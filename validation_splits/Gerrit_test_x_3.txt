Text
I don't think this is the way we should do it. The routine execute_x86cpuid is obviously *x86*-specific, and that is why it is only defined on certain x86 platforms. For other platforms we should never call this routine, but then we should add proper #ifdefs around that call. We will gradually get more detection routines, so it does not make sense to have all routines available on all architectures, but usually non-functional.
I don't think we need to have these messages in our repository of messages for GSS analysis.
I don't think we should let people modify a branch that they don't have access to, even if it is for a commit that they are replacing that used to be in another branch. Locked down is locked down, right? I see how it might be annoying to have to redo a change if you used the wrong branch the first time, though... Perhaps there is some Git magic that can let you do that painlessly?
I don't understand the problem. Without the explicit assign, and copy operator, and without the AnalysisNeighborhoodSearch(const ImplPointer &) (not needed if the setMode is done easier), I don't see why it wouldn't just work by itself correctly with gmx_unique_ptr. Sorry if I'm miss something obvious.
I don't understand why you need the boolean. This should be new_rti.SetTop(); new_rti.SetInexact().
I don't want to change the actual messages in this change for reasons stated above.
I have no idea what this means, but this is probably not the place to fix it!
I have no idea what to write here other than copying the dictionary definition of the word virtual.... At the moment it basically means entities that are not backed by a file, but defining things by what they are not is bad, and also might not be true in the future.
I like calling *somewhere* rather than inline policy-conditional code. I don't like that I have still exposed policy-specific's in line 528 :/ newest_file = durable_file or data_file or ts_file I nearly changed this to pass the ondisk file set to is_obsolete() and let that method take care of (a) determining the policy-specific newest file and then (b) determining if the file under test is obsolete. But backed off because there would be a slight loss of optimisation because as it stands, the loop is never executed if there is *no* newest file. I guess a call to a policy.get_newest(file_set) would do it. But what I'd really like to do is have a policy.get_ondisk_files() method return the wanted set and optionally the unwanted set as result of a single iteration over the dir listing.
I meant these, but we actually print the bypassLocal value with it so it doesn't matter much. Nevermind.
I must I disagree, but it's a matter of style. Consider though documenting the fact that the other method's days are numbered.
I personally hate this! commands should not go to a redirected file. I think your redirect options should be off, on, verbose - and only verbose should add commands
I really dislike modifying unrelated code. (All around.) All this is going to give us is merge conflicts. You're not even consistent, you left "$(this)" unchanged.
I see your point, there is place for improving my original suggestion. The problem with your current code and new suggestion is: you don't respect visibility during the whole loop. But the outcome of the loop is entirely useless when current change is say a draft or when the user doesn't have ACL to submit a change for a project. Example: if this code is merged as is or with your new suggestion, and you (you don't have +2 ACL on gerrit-review, right?) would open a change that belongs to a topic, that is shared by 1 million of changes, then you would iterate through all 1 mil. of changes, just to say visible = false, right?
I started with standard ReentrantLocks here, but when adding the lookFor...() method, I realized that that is a read-only operation, so concurrent queries didn't need to block each other.
I still can't decide whether this belongs here or in superio/winbond/w83627hf/w83627hf.h ... This applies to every romstage.c in this changeset.
I still think you also need to check that the $bi->get('blocktype') is allowed for $artefacttype->name. For example if I alter an internal media block to have the artefactid point to an image artefact I get this match: $artefacttype->name = image $a->get('artefacttype') = image $artefacttype->plugin = file $blocktype->artefactplugin = file So they are not seen as mismatched, but $bi->get('blocktype') = internalmedia so they should be mismatched as an internalmedia block can't have an image as its artefact. So we need to check not just if the plugin is correct (eg = 'file') but that the artefacttype is of the correct subset for the block (eg 'audio, video') for the block instance (eg 'internalmedia')
I suggest adding the enabled parameter (see above), so this gets enabled/disabled as well when someone calls ceph::repo: ensure => absent?
I suggest to add a wrapper class like \F3\FLOW3\Persistence\ObjectStorage and keep the API attach() and detach() stable.
I suggested to add aliases = {"-#tag"} in this comment: https://gerrit-review.googlesource.com/#/c/60106/8/gerrit-server/ src/main/java/com/google/gerrit/server/git/ReceiveCommits.java@1155
I suppose this is readable, but it's a lot of boilerplate compared to having a single callback each for comments/drafts with the if in the body.
I swear I read somewhere on Smashing magazine along time ago that all pseudo selectors are less performant but I can't find such an article. I can only find these 2 references (not sure of there credibility): * http://stackoverflow.com/questions/4082077/first-child-is-too-slow-alternatives/4082105#4082105 * http://www.onextrapixel.com/2012/05/03/css-tricks-how-to-speed-up-css-rendering/ I think the main thing I would say is whilst integrating with VE we should avoid them where possible. Use of first-child might invite us to use last-child and other selectors based on the idea. I do think we should be avoid nth-of-type and nth-child at all costs but I'd expect first-child and last-child to be less evil! That said browsers are getting better and better these days and we could just make the decision that we will use them and wait for browsers and VE to catch up. As tech lead, let me know what approach you want us to take. Happy either way. Please can we get the outcome documented on the coding guidelines page?
I think *both* initramfs and kernel image should be downloaded even if one of these files already exists. Otherwise we might end up with a version of a kernel different from that of the modules (in initramfs).
I think columnName is a property that indicates a column's name. I'm going more for "which column should we extract from the file". I thought about maybe columnToUse. I'm not sure because this configuration is going on a wiki page. I'll change it for clarity, we can think about it more when we do the mediawiki change.
I think he's looking for the exact string "h", the 2 is to count the terminating 0 at the end.
I think I have addressed this in the updated version too.
I think I was playing too safe here. We can probably just bound it to stackMode == native regardless of SDM.
I think I'll cherry-pick, rebase and add the bootblock.elf and coreboot.ram fixes in #750.. makefile half-baked output.
I think it is better to pass AccessScanner reference to the constructor instead of checking NULL here.
I think it is, if you read the documentation of what's happening when there's already a conversion registered, the new conversion function is getting deleted, i.e. nothing will happen. One could of course remove the old converter, but that would be bad if a conversion is happening at the same time in another thread. Therefore it's the same kind of warning as in QObject::connect, e.g.
I think it might be worth a comment up here what this class is intended to do and how it does it.
I think it should be optimizerCtx.getLastStepFor(NAME)+1, since the methods which are last modified by DeadCodeElimination are deadcode-free. Another concern is that when it is called by MethodInliner, actually we want to traverse the methods that modified by MethodInliner, not all the modified methods since last DeadCodeElimination. The result would be the same, but it may do unnecessary work in MethodInliner.
i think it's more common in Java to treat abbreviations as words when in an identifier name, so "BenchmarkResultJson" please apply throughout
I think should this be translated(m_xOffset, m_yOffset) instead, because adjusted(x1,y1,x2,y2) will make the rectangle grow
I think somebody just chose to put the AllTests class in a separate package from the other test classes. I don't know why. But they aren't integration-style tests; they seem to be closer to unit-style.
I think that this class makes more sense than the Branch class because there are several places in Gerrit where refs strings are manipulated without using Branch objects. Jgit does define some of those constants, but we cannot use jgit everywhere, particularly in GWT, which I suspect is why this class is here in the first place. We need a good place in Gerrit for these constants, and the Branch object itself is a much higher level object than this simple class (it isn't only about refs, but rather refs and projects). These constants feel more appropriate here to me than in the Branch class. I have some more changes, which I will push, which move them out of the Branch class completely. I am willing to update the comment here if need be, but this class feels appropriate to me (based on its name and location) and I don't think that "naive" comment should get in the way of that.
I think that this should be removed, and phdr->len and phdr->caplen needs to be incremented by 1 + 16 instead (see other comments below).
I think that's just a mistake in make.bash. It's better to fail fast and minimize distractions to stderr when you know you've already lost. I'd say add an exit failure here and then submit. If you feel strongly about keeping it as-is, you can submit this too and we can fix them both later if we decide to.
I think the bytes.Buffer version was more readable.
I think the cleanest style here would be to make this: class_linker->IsCompiledImageMethod(m) and then embed MayBe... into ClassLinker as IsCompiledImageMethod. It'd be nice to avoid exposing the debugger to inner notions of oat files.
I think the copyright is "Eike Stepper (Berlin, Germany) and others."
I think the expert info should point to the end_marker field itself (replace "message_tree" with "tiem").
I think the per stream flow control won't be implemented. Please double check with Mike and remove this code in case it won't be implemented (and update/get the spec updated).
I think there should be a maximum size, and scrolling should start from there. with 53 options, there would be a good case for implementing a tab-structure in the dialog.
i think there was a problem with d'tors as well. not too relevant, as we don't support unloading anyway.
I think there's a function for doing this. Maybe display_name()? I think you pass it a whole "usr" record and viewer and it figures out how to display it.
I think they are trying to match with the access control section data, which uses local because it used to also have the inherited rules from parent projects, and the local rules were in their own collection so the UI could tell them apart.
I think this $userid parameter is unnecessary, because having a User object instance implies that you're checking things for that one particular user account. Plus it doesn't really seem to be used.
I think this can be refactored (with the RTU "duplication") into the Modbus dissector.
I think this fits better as an overload in UnloggedFailure?
I think this needs to stay here? The idea is to have valid NotificationProperties We need a notification method (currently smtp and later smtp/snmp) So it cant ba validates inside smtp?
I think this should say Alias for 'gerrit remove plugin' (see line 150)?
I think this switch statement is getting big enough that this dissector should create a dissector table and have these dissectors register with it, not the other way around.
I think we only support mysql, sqlite, and postgresql in the migrations. (Mysql doesn't need this step because it stores indexes in a namespace per table. This step is only necessary in postgres and sql because index names are in a db-global namespace.)
I think we should hardcode the status since the user can only subscribe.
I think we should make it very clear that this is an asynchronous process: "Enqueues a clean up of old cache files..."
I think we use spaces instead of tabs after variable name (all @foo above).
i think we're better off just taking the auto-generated stub like we did in the original patch. it doesn't hurt anyone that there's dead code at the end because the syscall never returns, and it's arguably more confusing to be insisting on supplying our own stub.
I think you also need to add -.7em to this 24px. That number comes from the .fulltext-search left and right margins. Otherwise there is a horizontal scroll on the page.
i think you can use here getAndSetVdsStatic() to get the vds name, so we will have it in the log, i think it is called anyway for the logging infrastructure ("FINISH")
I think you could use a better method name, something like network_id_cmp for example
I think you miss the (complicated) case of a conflmict between a move in a branch vs a uncontrolling in another branch => In which case there is a deletion compared to origin on one side, and a rename on the other side.
i think you really want a pthread_once_t here instead, unless i'm misunderstanding what you're trying to do.
I think you're right that this seems only natural. I will leave the code for this commented out by a flag for now, and figure out a way to add a 'lint' mode to JSORestrictionsChecker later to warn when turned on.
I think, we should replace this by getBySeverity() to avoid juggling with message types in userland
i thinks that's the wrong one, the one that should be FROM is the "pl" library
I thought a little about this. Basically it should work like this: ImageName is null: there's no friendly name for the image, use the ImageId to list/display the image. ImageName is not null: there's a friendly name specified for the image but since it can be duplicated (it's not guaranteed to be unique), then we should also give an hint about which image it is (at the moment that's done reporting the initial part of ImageId, just as git does with short hashes). Now considering this last case if we set ImageName = ImageId, then the displayed name would be something like "myisoimagename.iso (myisoim)". Please let me know if you have a better idea on how to handle this all. Anyway (beside the image name displaying) I think that the safest way to address this now is not to set an ImageName since in fact there's not an additional friendly name to set.
i thought i was already using the guava Files class in the same file. but i guess that was only true in the test file. done
I thought of making it public bcoz, I had thought of making a itextpdf library wrapper, that can be used to export any reports in future.Like this class doesn't dictate any specific layout and provides methods to create the layout elements of choice although, it currently provides only a small number of layout elements like list,table.
I thought that handle->last_hdr_bid represents the last header that was written into the file. Is this incorrect?
I thought the point of the platform file is to make it easier by requiring only one option. Of course the user can also simply use "CC=icc CXX=icpc CFLAGS=-mmic CXXFLAGS=-mmic". If I don't specify the compiler then what's the point of having a platform file at all? I'm pretty sure gcc will never support the MIC vector instructions (compiling with gcc works but is of course useless without the vector instructions). And it seems also very unlikely that clang will ever support it.
I took out the cast. That was causing the warning I think.
I understand that right not only root is supported by engine, but I prefer that the API layer will pass to the engine all the information that the user provided. Engine may choose to ignore, for now, all users aside for 'root'. The way it's written here, is just a bug waiting to happen - tomorrow engine will support other users, and suddenly we will have a bug in the API: some users are not passed on to the engine, for some reason.
I understand you do this so that GF_FREE() under the out: label does not free the acl_xattr. The dict_unref() will call GF_FREE() already. Is there a need for GF_FREE() in out: at all? I think that only is useful for the error case when dict_set_bin() failed. It would be cleaner, and easier to understand if you do the GF_FREE(acl_xattr) above in the 'if (ret)' statements. There is no need for this 'acl_xattr = NULL' then anymore. If you do not like that approach (or if I missed something that makes it impractical), this 'acl_xattr = NULL' stetment desperately needs a comment.
I want the next item to be dequeued when the previously dequeued item has been consumed by the caller (as there is no facility to enqueue an item again). So I am using the unbuffered channel for this synchronization.
I want to keep it for now - there might be new architectures/optimizations where we suddenly realize it would be useful. Having them in config.h.cmakein is a reasonable compromise to remember we can use them, although they aren't selectable directly in Cmake for the moment.
I was being consistent with the hybrid pdf tooltip which used 'makes'.
I was mentioning the blank line. Please don't remove tk.WithExtra.
I will add a general error value and use it in this case.
I will do this for all remaining get_top_of_ram() in one go, separate from this fam10 patch.
I will remove all of the debug and most of the other messages after the VectorImage is working. Main reason to use the Logger is to print interleaved messages from multiple threads legibly. Other reason I'm avoiding debugMacro until VectorImage is working is so that I can continue to see debug messages even when compiled in Release mode for speed.
I will take my share of the blame here. We don't need equals or hashCode at all, they come for free from StringKey, and I added them for no reason way back in I5df6f0c5. And nothing personal, Sven, you know how it is when you've spent all afternoon debugging such a mysterious bug in production.
I will then await your next patch set before continuing review of this (and follow-up) changes.
I will update the currently commented font.family in another change. I will need to add the font first.
I wonder if eventually we should put these in the file table as well :) Not in this change, though.
i wonder where you see that - i don't. maybe it's not explicit enough for your taste in telling you that you are an idiot if you try? make the setup script simply refuse such qt versions.
I wonder why jetbrains repeats this code in all their bundles.
i would add a new variable with the tag name, this will make it so you can show which tags don't have any results
I would go for 2 template arguments InputIndexType (which could be by default IndexValueType or unsigned int) and Dimension
I would have put all this in a separate config file like we do in the other plugins.
I would like to rewrite in C++, but that requires all the calling programs to be C++ too. Will do that in a separate patch.
I would like to see http://review.coreboot.org/#/c/6041/ fixed up and then these headers fixed up either as a dependency for this or as a patch on immediately on top of this. #include <superio/ite/common/ite.h> #include <superio/ite/it8772f/it8772f.h>
I would love to do this. The problem is that all SSH information is only available inside of the SSH project and the server project which implements the REST endpoints doesn't have a dependency on it. Since we don't want this dependency I don't know how to implement it. On the other hand, if you have SSH enabled and you are interested in the SSH summary and connections you can retrieve this information via SSH. The REST endpoints are mainly important for installations where SSH is not available, but in this case there is also no SSH summary and no SSH connections. This is why I'm okay with the current solution of ignoring the SSH stuff in the REST endpoint.
I would prefer the previous formatting of line breaks.
I would remove the setter, and have a public getter you could always spy.
I would replace this line by $noteids = array_keys($data); as $data is associate array with key = 'id'
I would suggest changing the name of this, we actually use Neutron Drivers for spec reviews (confusing I know, given line 61 below). Since each of these has it's own review team, perhaps we can somehow indicate that here?
i would suggest LG_MSG_INVALID_ARG instead in all the places
I would very much appreciate a better name/doc/higher-level-interface. Which are the keys and the values of this map?
I wouldn't bother with bufio.NewReader, just read 100 bytes or something rather than bothering with ReadString.
I wouldn't recommend to use a percentage here.. With "This change is backwards-compatible most of the time" or "This does not change the public API..." we should be on the safe side
I'd add a guard to prevent surprises if (db.isBare()) { return null; }
I'd expect that to autounbox. Autounboxing *might* be less efficient, but it's more readable and won't matter much for a test.
I'd have to dig a bit deeper into the blame history of this file to find out. As we can see at line 154 it's being deliberately kept open, rather than as an oversight. If it needs fixing it can be done in a follow-up change.
I'd move ModelAdapterSource into the d pointer, and hide all the IPC API from the user-facing API here. That would reduce this to take a QAIM to remote, and a name for it, everything else can be internal.
I'd prefer if sizeof(x) was used throughout, instead of sizeof(op_t). As a bonus, op_t would only occur once (in the variable declaration) and then the typedef could easily be removed.
I'd probably make this _parseMemInfo. If we see that we need it outside this module we can always drop the leading underscore.
I'd rather do the logging fix separately, and not in 2.9.2 To avoid the potential to miss any warnings, we can add a warning in the 2.9.2 release note to not run the upgrade in batch mode.
I'd say yes. I mean, why not have hex for your file sizes internally? :)
if a comment is behind the field it describes, doxygen needs "///<" (with a symbolized left arrow) to realize it correctly
If a user term isn't returned I believe you'll get NPEs when displaying lists of changes. That's why I wrote https://gerrit-review.googlesource.com/35201 so that this error is discovered early and is properly reported. I was a while since I looked at it, and the code might've changed since then, so don't take my word for it.
If AddSdrObject() method, test goes into infinite loop. Because there is already AddSdrObject() function with same parameter which is mandatory in both cases. So should I add new method in parent class?
If all you are doing here is testing that the object returned by Network.get_by_id is passed to the allocated_fixed_ip() method properly along with some other arguments, the more clean and canonical way of doing that would be this: @mock.patch('nova.objects.Network.get_by_id', return_value=mock.sentinel.network) def test_add_fixed_ip_instance_using_id_without_vpn(self, get_by_id_mock): net_id = networks[0]['id'] with mock.patch.object(self.network, 'allocated_fixed_ip') as allocate_mock: self.network.add_fixed_ip_to_instance(self.context, FAKEUUID, HOST, net_id) get_id_mock.assert_called_once_with(self.context, net_id, project_only='allow_none') allocate_mock.assert_called_once_with(self.context, FAKEUUID, mock.sentinel.network, address=None)
if defined ITK_HAS_TYPETRAITS_TR1_NAMESPACE define ITK_STD_TR1_NAMESPACE std::tr1 else define ITK_STD_TR1_NAMEPSACE std endif
If I understand this right the buildr process is able to load Java classes dynamically and invoke them with reflection? That does it make it slightly easier to do some complex steps.
if in some places function returns something then it should return always something
If it sounds funny, I should fix it. Your explanation is a good approximation of what's happening. We are limiting traffic... Any suggestion for how to improve? Hmm, I think I see what you mean. We are not changing the amount of traffic, just the proportion of that traffic which is "going" to the campaign. What about, "Throttle impressions"?
If it's not set, there's no way to get FSP failure data out. I agree that it's not an absolute requirement, but without it, if there's a failure, you're going to be pretty lost. We could move it from here and put this below, surrounding the #if statements and not actually fail, but my opinion was this was the best option...
If no version can be parsed "0.0.0" â€” "0.0.0" is the result
If non-empty, go into reverse mode where the buildlet dials the coordinator instead of listening for connections. The value is a comma-separated list of modes, e.g. ....
if so there will be some problems here - i mean, to authorise we need password/token - token is really not supported in that version of nova_client. dunno what password to use here - where we're using ctx from trust. Using service user creds here is not really a good idea.
if that's a uintptr_t, then you again don't need this double cast.
If the methods of this class are only called from the request handler (worker) thread, then I think locking is not necessary. A comment describing which member variables the mutex is protecting would be helpful. See the comment in the header file.
If the string is boxed (ie. if the string is created in javascript new String("...")), it is no longer acts like java.lang.String in GWT lang. For example (aBoxedJsString instanceof String) will return false.
If there is only one developer path, do not append '0' to the Xcode name. It looks weird.
If this is considered a development tool and not a production tool, it should have LOCAL_MODULE_TAGS := eng
If this is never called - then we need to remove the method, it's signature in the header, and all call-sites for it (right?).
If this line is removed the rDescription parameter name (and only the name) needs to be commented out because otherwise in an --enable-werror build the build breaks with "unused variable".
If this need to be public, can we have a short doc comment?
If this place is fixed to contain fd->flags, should the other places(anon fd) also be fixed to use fd->flags?
if this was copied from another IT (?) and the GAV was not changed, it will conflict with the other IT when 'mvn install' installs it into the local repo. It's a good idea to make all GAVs used in test projects specific to the IT that is being run to avoid unwanted crosstalk/side-effects between unrelated ITs, esp. when they are being run in parallel. (and I know some ITs we have are not good examples for this...) I.e. same comment applies to all pom.xmls used here for test projects.
If we agree to always treat a single number as JSON even if the client doesn't enable datatype support, then we can always set its datatype to JSON regardless of that.
If we converted helper code to Groovy, we would have the Elvis operator. And closures to handle the try+finally+close idiom. Just sayin' ;)
If we're trying to make this documentation more consistent with other module pages, then I assume this page is meant to be similar to http://qt-project.org/doc/qt-5.0/qtcore/qtcore-index.html in terms of listing the types provided by the module, so we should add a list here that link to the following types: * Component * QtObject * Binding * Connections * Timer as these are the types provided by the QtQml module.
if we've got this, do we still need the flag? this field should probably be called something more like "allocated_stack_size".
If you are currently on 0.10,+ you won't see the message. This only appears only when coming from 0.8 or earlier.
If you dig into the code, at some point you will reach a very strange statement (a couple of calls from setCacheSize), qMax(qMin(.....), 25). The size reported by that might differ from the size specified by the caller, in which case the caller should be informed of that. If you query cacheSize() you will get the value of the variable, not the value that was adjusted after the qMax(qMin...) calls.
If you instead put this into the gerrit-server directory, you can then refactor the AdminSetParent SSHD command to also use this implementation. That would reduce the amount of code needed to add this feature, since its mostly just extracting the existing code from AdminSetParent.
If you look at the previous version of the code we returned true if the new one didn't contain "engine" I just noticed that I need to nuke out the engine params from setting :D
if you put editable, no need for editableOnTemplate, its good for both
if your job is parse the service_profile to then pass it to the driver, just let the driver take care of this directly. Less cross-talk and better separation.
If your users often link their books or publications to one online catalogue, then you can set the URL prefix here, and they will only have to paste the book or publication ID at the end of the URL. You must make sure that your URL ends with a "/". For example: If your users need to link to publications in WorldCat frequently, set the URL prefix to <pre>http://www.worldcat.org/oclc/</pre>, the the users only need to enter the publication ID at the end of the URL.
I'll add a comment. I don't think #ifdef is a good idea. It makes bugs more likely because you have more code and that code is less tested (because only one version is only compiled and run on any one system). But I will include the non-workaround version in the comment.
I'll let peter decide what he wants to email; but changed the subject to include the host name.
I'll remove it here, but so you know - there's a problem - if someone sets it to null (for example from REST), it fails with NPE in StorageComandBase. but that can be fixed in a different patch.
i'm confused why this changes the string you fputs but not the 'fn'?
I'm not clear if "${workspace_loc:gitiles-parent}" mean "$WORKSPACE/gitiles-parent" or if it means "Path to the project named "gitiles-parent". When I changed the on-disk location (via the rename above) of my gitiles checkout (under my /src/workspaces directory) to /src/workspaces/gitiles-parent then I got to the next error. :)
I'm not entirely sure this will work - I'll have to give this a test.
I'm not really liking this name, maybe just 'Resources'?
I'm not sure I understand your point here. Do you mean I should talk about things like field alignment and so on? I think that mentioning Java would make this more confusing.
I'm not sure if I understand why it should not pick ":/extras/custom3/test" as first.
I'm not sure we would ever remove this. When running the Super Dev Mode from a static html page instead of a server, people link directly to .nocache.js, so it should always exist.
I'm removing those checks in the other modules too. This is the new way.
I'm sorry :D Order these
I'm still trying to understand what this new logic brings to the table...after all of this effort, we are still just enforcing that the project/tenant-id that created an entity (secret/order) is the same one that can perform operations on that entity. However, the database relationships used in the entity queries enforce this, so what does all of this do that is different? If we were doing attribute-level access control, it might make more sense to me, but entity level for tenant-id RBAC is redundant to the db queries to me.
i'm very concerned that this is done at non-obvious place. it will be hard to observe that RPCs are found "replied" late in our context. we don't have any tests for this. if something is changed, then when we'll notice?
IMHO the probe*XML functions should simply take xmlTextReaderPtr. shared_ptr is only used to manage the lifetime of the reader, so it is impl. detail. I would even remove the typedef.
IMHO, we should explicitely add coverage for the method you're adding so we could isolate any problem later on
In code this will read "mgr.Mgr". If move to svc package, it would read "svc.Mgr". Also, Let's just name in Manager so: "svc.Manager".
In my company, this is a rule to put the constant before a variable for comparison. This rule avoid also to forget a '=' in '==' operator and to create a bug. You can retrieve this rule in ESF project(TIPS-38, https://polarsys.org/wiki/ESF_coding_rules). We think that the same work could be interesting with Papyrus.
