Text
we must make sure the paste file is in absolute path mode: config_path = os.path.abspath(config_path) ?
We need refresh freq_demote = defrag->tier_demote_frequency; here, otherwise we won't be able to change the frequency from the CLI.
We need to enter in this IF block only in case of unknown protocol, so when dissector_try_heuristic() return value is 0.
we need to test both non-privileged "udp4" and privileged "ip4" sockets here.
We only move bonds to the same place or back. So bond j is always tested. In the extreme case there are no H-bonds and the loop is simply a copy from i to j=i. Also note that this code has been tested in the nbnxn_hybrid_acc branch.
We probably should ensure the project is clean before doing this, otherwise a user might lose uncommitted changes they care about: project = Project( manifest = self.manifest, name = path, remote = RemoteSpec('origin'), gitdir = os.path.join(self.manifest.topdir, path, '.git'), worktree = os.path.join(self.manifest.topdir, path), relpath = path, revision = 'HEAD') if project.IsDirty: print >>sys.stderr, 'error: cannot remove %s: uncommitted changes are present' % project.relpath print >>sys.stderr, ' commit changes, then run sync again' else: shutil.rmtree(project.worktree)
We probably want tvb_reported_length_remaining() here
We probably want tvb_reported_length_remaining() here
We should have a log for non-connect events as well, probably at trace or debug levels.
We should move this to some other module since it has very little to do with SIMD, and it was only a hack for a single architecture. However, that will require us to write a different hardware module, so for now I've added a define for GMX_SIMD when any of the SIMD architectures is enabled (which is good to have anyway).
We should not reset the current filter here, but still need to use it for incoming read operations, and then replace it with the new filter in an atomic way below.
We should rename this method to "artefact_title_for_view_and_block()". Because what it really does is tell you if the artefact has an alternate title when viewed in a specific View & Block.
We shouldn't need ${ITK_EXECUTABLE_PATH} at all. Just naming the executable target will work because add_test(NAME) knows to translate a target name appearing just after COMMAND into the right path. This is already done for the other tests.
We take an "error_list" from the framework here, but "message" is passed as an argument. Looking at how message is constructed, this also could be generated here (there is no need to pass it through argument). So either both message and error_list are this function arguments, or none of them.
We tried to avoid include the large block in #if ... #else... #endif. :). And does this change break MIPS? Our change will not impact MIPS.
we will need to log the error since it is ignored by caller
Well - these files are still generated by autogen.sh, if no autogen.input is present. And when I asked on IRC, people told me they are still used. Actually I was told to keep the minimized info message to move config from autogen.lastrun.bak to autogen.input, instead of some more prominent header. I actually don't see a reason to deprecate the configuration via autogen.sh commandline arguments. For me autogen.input is just an other way to configure stuff.
Well I need a way to tell whether the newestConfiguration is enabled, since the 0 returned by defaultConfiguration() does not mean that, instead it means there are no configurations at all. How else do you suggest I could expose it?
well, at least not visually :p the following section is in the same green box, unlike other style guides that put it in a red box: "# Section of discouraged cases"
well, since we're doing this, might as well do this instead, since it's cleaner and looks better (and sanitized). elements = getattr(self._conn, class_name)(ElementName=element_name) data = self._get_first_item(elements) And before you dismiss the usage of getattr, That's actually how wmi namespaces work: the __getattr__ method is overriden and it will lookup and cache that class_name and return it, as it does not have it defined. This way it is more flexible, same wmi module works for any namespace.
Well, this is still a parameter, so you should probably leave the line.
What about abstracting this even further: instead of requiring a region_device to describe the location, we could just accept the name of an FMAP region and look up its offset and size.
What about setting tv->arg = arg and remove g_free(arg)?
what about this case? if user selected sysprep/cloud init in run once (then we get here) but also have payload configured?
What about: "Get the original length of the packet (may be larger than the captured length if the snaplen (dumpcap -s) is in effect)" (or something that clarifies the relation)
What do you think about my last paragraph? Do you think it's really needed to have a parseDevMode and parseProdMode methods?
What happen if groups were imported to an institution different from 'mahara'?
What happen when you pass the same email and ask to delete it and set as preferred? Make it sense to check for this and reject this case as mutually exclusive options?
What happens if a leap2a import's $entry->summary doesn't have any children at the path div->div? Should we check to see if the $entry->summary->div->div->children() exist and fall back to $entry->summary if they don't?
What happens if match is missing or empty? Does it do something sensible when trying to match against an empty pattern, or should such commentlink rules be skipped (e.g., with a 'continue;' statement here)?
What happens if the specified branch doesn't exist? Will that be caught by the check at line 154?
what happens if this fails? You have already deleted at the backend...
Whatever's easiest for you is OK with me :) Another CL would be easier for reviewing I suppose but if you would rather throw it in here, or create the class now and make another CL later to convert other existing code, I'm fine with that as well.
What's the correct thing for things exec'd from init? I assume we can use logwrapper if we need to.
What's the error message? and is that with the latest transform change?
when i was suggesting flipping the boolean, i did also wonder whether we wouldn't be better off just passing in the length. if it's <= 0, interpret that as "don't know"? that would then move 8192 down out of the callers too. or... i really like the way you went for readFully rather than implementing the missing read()s, which is what i'd actually imagined. how about we go one further and just have a static fromFile or similar? then it could do the stat, and have everything it needs. you could even use Libcore.os open/fstat/read/close to avoid the RandomAccessFile without increasing the overall amount of code.
When using this many parameters, using named parameters is preferable to make things more clear
When you move a host to maintenance then that calls disconnectStorageServer which should remove this definition so in general this shouldn't affect anything negatively. The case where this would remain is in case of an error flow where for some reason it wasn't disconnected properly or something. Even if that happens, it's not that interesting as a few leftover connections shouldn't affect the host negatively (think about FC where the host is always connected). The advantage is that most of the time (since hosts don't move between DCs very often) the host would automatically reconnect whenever it reboots (e.g. due to sanlock fencing) and it would be available to engine almost immediately reducing recovery time. Imo that is more important. See oVirt Bug 881941 - After a reboot of both engine and vdsm domains take a long time (15 minutes) to recover
When you swap a KEY_RIGHT for a KEY_LEFT in RTL, that's because you're interested in the "start of the line" (which is on the left in LTR) rather than the left vs. right; so in the "case KEY_LEFT", the comment could say "start of the line, no special RTL handling".
Where do we handle the COMPILER_RT_rmodules_$(4) ? Is that just included in the objs ?
where size is not the issue, and performance is not a big deal like in test, please use range() to mainatain future compat with python3
Which comment? :) Good idea. I'll update to explicitly call out CANARY_MASTER. It doesn't work b/c Initialize is mocked out in the sync_stage unit test, so self.repo never gets initialized and is None in the conditional logic. Haven't looked too far into why it's not being triggered for 'master-release', but I suspect that config simply doesn't run this unit test.
While we're changing the names of these triggers, let's fix the spelling of the word "exceed" as well. I think "unmark_quota_exceed_upd_set" should still be short enough.
while you're at it, would it make sense to fill in the remaining cases? Desktop, Music, Movies, Pictures, etc... the implementations which can be supported using a virtual file system (i.e. media types, as long as the permission is set in the manifest) can be added later, but having the cases here already seems reasonable
Whitespace matters. We use tabs, and trailing whitespace has to be removed.
who uses this method ? I don't see why this is useful. I'd just get rid of this method and the associated field. Once you do that, you can just collapse this class into a single static method (runAll) and get rid of the Pair class.
whoops, this is not new code, but docs are always good!
whose bugfix? what is the bug number? the comment is as helpful as it could be :) if there is a fix for this but not enough time to test best to let future programmer know where to look
Why an extra header file? The definitions can go directly to settings.cxx
Why are we allowing calls to non-existent functions?
why are you going to manager function if glusterd_svc_check_volfile_identical function will failed ??? you should simply return error.
why are you going to manager function if glusterd_svc_check_volfile_identical function will failed ??? you should simply return error. same comments apply for all reconfigure function if you have done same things.
Why are you using cerr here instead of vtkErrorMacro?
Why call it GetStartIndices() instead of the expected "GetSeeds()" ?
Why can't this go int QTypeinfo? (i would like to have it there to enable some feature of QWeakPointer only for QObject for example)
Why checking for null pointer here? delete handles null pointers just fine, you only add overhead here.
Why define this as a new function instead of replacing the one that expects a NamedElement? getFuncName is invoked on actions, but also on guards, and we need to apply the new naming on guards as well. If we replace the old getFuncName with this one, but keeping the NamedElement parameter, we can move the "translator.getSource" part here and be able to reuse the same function without modifying the ActionDeclarationGenerator or the GuardDeclarationGenerator.
Why did you add this back? It's not needed as far as I know.
Why did you make this change? I think it makes sense to have the assertion.
why do we json_encode() $scopeData here? We do not do this in the base class. Furthermore it is already serialized. The only difference in this method compared to the one in the base class is now the Tree.thisScript stuff. The question therefore is: Is this a bug in the baseclass that Tree.thisScript is not set, or is it superfluous here? If neither applies, then still the question remains, if there's a nicer way of adding this code snippet without overriding (and copyiing) the complete method from the base class?
Why do you set the value to true for the requiresAuthentication here since it is already set when you create the class !
Why is 1 the default? Why isn't the default to use all available cores? This is the default for mdrun and also the default behavior of OpenMP.
Why is this rounding necessary? Just a guess, clock skew?
why not arm? I am thinking about removing this ifndef...
Why not do dict_get_str and use the ptr to find the index. That will avoid more book keeping
Why not just adjust the check upstairs to (m->total_size?:2048) > (microcode_end - (u32)c) then you won't need this check if you assume that cbfs is correct and if you don't cbfs check belongs to cbfs functions, not here.
Why not level 1? We don't care about warnings in third-party code. Using level 3 could actually *increase* the level depending on the actual build flags.
Why not move this up into the anonymous namespace above? It is harder to read going from RWMolecule constructor/destructor to internal class and back again. Maybe I missed something subtle? If so, maybe we could add a brief comment.
Why not put this in begin(), so that all subclasses will have the trxFname logic?
Why not simply do: connect(groupSeparatorChkBox, SIGNAL(toggled(bool)), groupSeparatorSpinBox, SLOT(setGroupSeparatorShown(bool))); ?
Why not to include topic when this really implemented?
Why not use: if ($limit > 0) { } elseif ($limit < 0) { }
Why this special case? It did not exist before and all it callers seem to take it from a tvb (except for a hard-coded 2000 in EnhancedAlarmMessage, which seems wrong too as the length is not checked there?)
Why would you remove it ? Please keep gid_File_Bin_UnpackUpdate untouched.
why? this makes no sense. you should have just amended it if you didn't want to wait for the roundtrip.
why? we removed prelinking for a very specific reason (security), and I don't think we want to put it back in the platform.
Will take a look after we decide how to move forward.
Will the servicename have other characters at this point?
Will we miss adding the server if the status change command failed on it? I guess we should add it if it fails with "already enabled" error. Not sure what we should do if there is some other error though. Maybe we should let the sync job handle such cases.
With auto-generated CRUD methods you don't need to define these methods manually. Please check this patch https://review.openstack.org/#/c/62865/
With ElementTree I can create an Element and provide the attributes as a dict see implementation below it's much easier, minidom is too much limited http://docs.python.org/2/library/xml.dom.minidom.html
with proto_tree_add_item, last argument is encoding no value
with the suggested while loop this would become i =0
with --xml, return code will be zero for both success and failures. This may fail for invalid Volume name.
Wondering if this message could be more descriptive in terms of specifying WHAT remote operation failed?
Wondering whether ret needs to be initialised to -ENOMEM here because its caller is expecting it to contain -errno.
Woops! Sorry. I'll fix this in the upstream (well, it's my upstream after all) and add a patch to the queue to update the library.
Would be better to name this view rather than window
Would it be worth putting `-ex` here to get the echoed output and exit status?
Would it be worth to mention that the review notes are written by the review-notes plugin?
Would it make it easier to override if we return a List? That way if someone wants to add an adapter, they could simply add to the list instead of copying the array. This method is used in an enhanced for loop, so a list would work just as well as an Array
wouldn't this be subject to the same bug if the server answers something different for one of the keys, like 0x86 TEMP_FAIL? what about doing a response.Read while it's not returning -1 (socket.isAlive == false)? the NOOP already returns from the loop, but the case where correlationId doesn't map to a key should maybe also be a break from the loop, not a continue?
xport entries are added to the conf->xprt_list under the "conf->mutex", but not client entries. "xprt" entries are added to the list during handshake I suppose in server_rpc_notify(). Post that , in "server_setvolume()", we create client entry and assign it to transport object "xprt". So there could be scenarios where in we have an entry in xprt_list without client associated.
Yeah -- I just left a related question on the rename CL :) Lets discuss this IRL.
Yeah, but this is usual wording we are using: $ git grep "member of the privileged 'Administrators' group" | wc -l 20
Yeah, done. Removed the function and function calls. Thanks.
Yeah, I used that in other places. You're right it doesn't make much of a difference: no difference for norm and about 20% or 20k for the language tables. I've simplified the code and also now use NewFormattedFileWriter in all the other places where I'm used go/format before. See the diff of language/table.go to see how it is affected (will first do the IANA update separately). Unfortunately, this increases the diff a lot. Again in language/tables.go. But you can verify the data itself didn't change by looking at the checksum at the bottom.
yeah, if it's fatal, we might as well just revert the serial patch. The whole purpose of the serial (or ehci-debug) route is for platforms that don't support (for whatever reason) cbmem console log. If it's fatal here, then the script won't run on those platforms, making it impossible to collect the logs with this script. I'm not going to fight it anymore though.
yeah, just wondered how likely that would be in combination with OStringBuffer?
Yeah, major documentation work in the next few weeks, so we can all use our time more efficiently when new or wasn't-paying-attention-then developers come on board. Today, only worried about completing the rc while not creating repeat work later! :-)
Yeah, we can file a bug against android or just fix it and submit a patch.
yeah.. that being said, the protocol explicitly state it to be two bytes ;-)
Yep, I've merged the two into |supportedSignatureAlgorithms|.
Yep, not sure why it was using a string there. Thanks.
Yes they are. Most of the shorter methods are from Media Foundation SDK example.
Yes, and it does. I submitted an amendment with a better comment explaining that.
Yes, assuming the modelService works :) This private method does not rely on other services. Also, model service may have issues with elements that have the same ID. In theory I could put the same element with the same id multiple times in a menu. I don't know if modelService would be able to resolve that. At least here we can count and validate if need be. I will make the other changes and await response on this.
yes, I know see you have fixed almost all places. thanks.
Yes, it is a bug in adb, no ambiguity here, but it's really subtle, so it'd be nice to have a better description of the problem, it's not really Python specific as you mention, i.e. something like: """ Some programs want to launch an adb command and collect its output by calling CreateProcess with inheritable stdout/stderr handles, then using read() to get its output. When this happens, the stdout/stderr handles passed to the adb client process will also be inheritable. When starting the adb server here, care must be taken to reset them to non-inheritable. Otherwise, something bad happens: even if the adb command completes, the calling process is stuck while read()-ing from the stdout/stderr descriptors, because they're connected to corresponding handles in the adb server process (even if the latter never uses/writes to them). """ The PROC_THREAD_ATTRIBUTE_HANDLE_LIST isn't directly related to the problem, and not needed in this specific case because I don't think there are multiple threads being used in the adb client process (at least when reaching this code). It's probably better to avoid mentioning it, or add a note like "ideally, use PROC_THREAD_ATTRIBUTE_HANDLE_LIST if running on Vista or higher"
Yes, let's improve documentation. Thanks for comments.
Yes, sorry about missing the indirection. Here's the example. 0xffc00000 -- 0xffe00000 cbfs in memory. 0xffdffffc has 0xffdfffa0 in it which would then be passed back to map.
yes, that's the point: if it's a *designer* plugin, it needs to depend on designer, as in the other example. but this is a ui loader/widget plugin only.
Yes, this is correct! The error was introduced by bbc94edb9a91b27910d43610db9994df10dd99e1
Yes, you are right, although I do not believe we ever did ;) I'll change it back.
Yes. Actually, look at what I just merged to master with the query operators, in particular you might want to read the documentation in user-search.txt. You can write a query to identify changes that can be submitted: is:open CodeReview+2 Verified+1 -Verified-1 -CodeReview-2 If we put that string (minus the is:open part that would be implied) into your field, it means what you want it to mean... you can submit this only if the above expression is true. By making it a single string, all you need to do is feed the string from the table through the ChangeQueryBuilder to get a Predicate<ChangeData>, and then run match() on that to see if the submit is possible. That completely removes the FunctionState mess and starts to move us into this configurable submit logic that we have been discussing for quite a long time. So the existence of that ChangeQueryBuilder and its Predicate support classes is why I was trying to steer you into a simple string here. We have the code already done to handle that as a string, and users can use the same syntax to search for changes as they can for controlling how we manage them.
Yhis could be removed and use as parameter of the reset method.
Yikes, we are starting an RPC for every row in the table? My concern with this is the browser can only issue 4 requests at a time to the server. If a user has 50 items in their dashboard, which many do, this will take quite a few round-trips (13!) to completely load the status codes. Worse, if the user navigates away before they are completely done loading, they will continue to load, as there is no way to cancel the queued RPCs. I would prefer having myApprovals and strongestApprovals take a Set<Change.Id> and return a Map<Change.Id, Whatever>, and make only one call to each method for the dashboard.
York, please use TAB in each line following the coreboot coding standard.
You are missing Schema upgrade and SchemaVersion. See for example this change [1]. [1] https://gerrit-review.googlesource.com/#/c/56641
You are missing usage = "List of SSH session ids to be closed" or some such.
You are mixing two different use cases. Use case 1: beginTransaction() commit() this works, because beginTransaction() set autoCommit=false and commit is successful even though nothing to commit. Use case 2: open Connection with autoCommit=true commit() Evidently, this doesn't work on all Jdbc dialects supported by Gerrit. E. g. this doesn't work on PostgreSQL for the same reason why rollback() doesn't work. To see the failure, remove this if-guard above and run PostgreSQL unit test: testRollbackNoTransaction() it is failing with: Cannot commit when autoCommit is enabled. or some such.
You are right, this won't work without the next patch (use DbGroup instead of LdapGroup), I will check again and I will probably have to merge both this patch and next one into one single patch.
You assume here that size of phdr entry is sizeof (*phdr). You should use phentsize instead.
You ca use directly val_to_str on HF VALS(xip_serval_proto_vals...)
You can actually remove this entirely - I needed it to work around a bug in lcb when connecting to a non-standard port (i.e. ./cluster_run running on port 9000 instead of 8091). For use in perfrunner with standard packages we probably want CCCP.
You can add bitmasks to the hf_ item and still use proto_tree_add_item to get your desired effect.
You can open as many issue tickets as you like. But we would still have to add all these tests in here, and find solution that fit them. Why delay?
You can pass in -ret as errno to gf_msg. Also, this can be a new msgid : DHT_MSG_OPEN_FD_ON_DST_FAILED
you can remove the access tag and set the function actually to private
You can remove these functions now and use logcat_text_dump_open in dump routines in file_access.c
You can simply use here $GLOBALS['TYPO3_LOADED_EXT'] It is initialized in the bootstrap. Basically this global does not need initialization. And extension could still use it in ext_tables and ext_localconf.
You cannot design an API for logging. We should take out the "command" argument and have generic errors. It's easy looking at vdsm.log to discover what was the command executed before this failure.
You can't make changes directly to OOJS directly here. You need to check out the oojs repos (gerrit.wikimedia.org:29418/oojs/core.git & gerrit.wikimedia.org:29418/oojs/ui.gt), make changes there, and once they are merged create a separate change which updates this concatenated file. Then you can rebase onto that change.
You could eventually create 1 hf entry per size. For sizes <=32 bits, you can use the same filter name. But for those above 32 bits, you need another filter name (as seen in README.dissector chapter 1.5.1)
you could use `self.patchobject` from HeatTestCase, that does all the boilerplate for you. Or use @mock.patch.object as class decorator, as you seem to use this mock in all tests.
You don't need to put this xml or a new test class. That means in a previous test case you can just do following: @WithProperties({ @Property(name = "webApiUsage", value = "resistance") }) public void testAnimationImpInResistanceMode() { // your test code here }
you handle all these exceptions in the same way so you can use multi-catch: } catch (RevisionSyntaxException | AmbiguousObjectException | IncorrectObjectTypeException | IOException e) {
You have a potential problem here with MMCONF_SUPPORT. This option indicates hardware has PCI-e config register access in MMIO space in addition to the legacy 0xcf8/0xcfc IO registers. A second option MMCONF_SUPPORT_DEFAULT is not set, so by default you would use PCI IO config access. But since those are non-atomic, SMI handler in i82801ix explicitly uses MMIO and you have no MMCONF_BASE_ADDRESS set.
you have create_port function with build in cleanup, it's better to use it
You may want to check for NULL because cbmem allocations can fail.
you might be used to americanisms here. they can be awful sometimes. They right things "like this." it's garbage ;)
You might even want to change (de)allocations in this source to use gf_*() routines (as a part of this patch or separately).
You might want to use a constant ScriptRunner.NOP instead.
You need to do error detection etc.. Perhaps its easier to just build up a single buffer, and then call a single function to write everything to disk so that you have a single place to add file IO error detection (and logging).
You only need assertTrue(Object.class instanceof Type); The rest will break GWT test for the cases where there is no metadata available.
You probably meant that the comments should explain why, not how? But even that is missing here.
You probably need to check for divide-by-zero here, since addr_len comes from compr, which is based on packet data.
You removed this line in I1c2a5a9c3da5 with a commit message that noted you wanted COM removal only in the second half of VV, but there was no related change to how that worked. How do we assess when you were right? :-D
You should put it into memcached_defaults instead. That handles the upgrade scenario and will allow us to change the value easily in future.
You should use a different filter name as you cannot mix FT_UINT64 (hf_glusterfs_size64) and FT_UINT32 (hf_glusterfs_size). See doc/README.dissector chapter 1.5.1.
You should wrap the following code into a try/finally and close the pdb when you are done with it.
You shouldn't check "_doc.length.bodylen == 0 && (iterator->opt & FDB_ITR_NO_DELETES)" again because we already checked it above.
You shouldn't need this - I have a patch in flight to our gtest - see https://github.com/daverigby/gtest/tree/clang_analyzer which will make the GTest asset macros "understood" by clang analyser.
You'll get bool to int conversion warnings with these return calls.Fix by return this-> ...()? 1 : 0;
you'll need someone with some maven experience to review this
Your memory is too smalll. Consider buying a RAM. :D
You're preforming this check multiple times. it's better to create a separate function, in case we will need to add a new "localhost" name/ip
You're right. Ivan,tenant_id is non-admin tenant need to change to admin tennt id here. will fix it in next patch.
You're right. The issue is that the onSampleSelected() callback uses the Combo index to fetch the sample from mSamplePath, so the way you have it they don't match (if you try, selecting a sample will load a different one). The trivial solution is to sort mSamplePaths alphabetically like it should have been done in the first place anyway (my fault for forgetting that).
