{"_default": {"1": {"chilimatic": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1618", "title": "class properties disappear if assigned a var that has no value assigned", "body": "While I was implementing the transaction feature I notices a curious behaviour that happened in the unittests \r\n\r\na getter threw an exception that a defined property does not exist. I found my bug but I was curious. I tested if this is a behaviour that can be easily reproduced.\r\n\r\nphp 7.2 + zephir 1.0.7\r\n\r\n2 classes:\r\n\r\nTestCase: \r\n```zephir\r\nnamespace Bugreport;\r\n\r\nclass PropertyIsGoingToDisappear {\r\n    protected _magicProperty;\r\n\r\n    public function setProperty(param) {\r\n        let this->_magicProperty = param;\r\n\r\n        return this;\r\n    }\r\n\r\n    public function getProperty() {\r\n        return this->_magicProperty;\r\n    }\r\n}\r\n```\r\nand\r\n```zephir\r\nnamespace Bugreport;\r\n\r\nclass MyClass {\r\n\r\n    protected _property1;\r\n\r\n    public function useSetterOfChild() {\r\n        var myValue, instanceToBeReturned;\r\n\r\n        let instanceToBeReturned = new PropertyIsGoingToDisappear();\r\n        return instanceToBeReturned->setProperty(myValue);\r\n    }\r\n}\r\n\r\n```\r\ninvoked by \r\n```php\r\n$myObject = new Bugreport\\MyClass();\r\n$returnedObject = $myObject->useSetterOfChild();\r\n\r\n// same as the returned object\r\n$myOtherObject = new Bugreport\\PropertyIsGoingToDisappear();\r\n$myOtherObject->setProperty(1);\r\n\r\nvar_dump($myOtherObject->getProperty());\r\nvar_dump($returnedObject->getProperty());\r\n```\r\n\r\nresults in \r\n```sh\r\n/home/j/development/repos/bugreport-zephir/test.php:19:\r\nint(1)\r\nPHP Notice:  Undefined property: Bugreport\\PropertyIsGoingToDisappear::$_magicProperty in /home/j/development/repos/bugreport-zephir/test.php on line 20\r\nPHP Stack trace:\r\nPHP   1. {main}() /home/j/development/repos/bugreport-zephir/test.php:0\r\nPHP   2. Bugreport\\PropertyIsGoingToDisappear->getProperty() /home/j/development/repos/bugreport-zephir/test.php:20\r\n/home/j/development/repos/bugreport-zephir/test.php:20:\r\nNULL\r\n```\r\n\r\nthe issue is \r\n```zephir\r\nvar myValue, instanceToBeReturned;\r\ninstanceToBeReturned->setProperty(myValue);\r\n```\r\n\r\nthe var has no value assigned so instead of setting a null value it removes the property in runtime, which is a quite curious sideeffect. ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "php318": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1606", "title": "php json_decode ($ str, 1) isset is invalid after passing to zephir", "body": "post data:\r\n\r\n```\r\nrows:[{\"item_id\":1,\"parent_id\":null,\"depth\":1,\"left\":1,\"right\":10},\r\n{\"id\":\"59818f067e52392064000042\",\"parent_id\":1,\"depth\":1,\"left\":2,\"right\":3},\r\n{\"id\":\"59818f607e52392064000047\",\"parent_id\":1,\"depth\":1,\"left\":4,\"right\":5},\r\n{\"id\":\"59a26e607e52391c180035d2\",\"parent_id\":1,\"depth\":1,\"left\":6,\"right\":9},\r\n{\"id\":\"59818f867e523921ec00733c\",\"parent_id\":\"59a26e607e52391c180035d2\",\"depth\":2,\"left\":7,\"right\":8}]\r\n```\r\n\r\nphp code\r\n```php\r\n$rows=$this->request->getPost('rows');\r\n$rows=json_decode($rows,true);\r\nvar_export(rows);\r\n\r\n\\XqKeji\\Test::change($rows);\r\n```\r\n\r\noutput data:\r\n\r\n```php\r\narray (\r\n  0 => \r\n  array (\r\n    'item_id' => 1,\r\n    'parent_id' => NULL,\r\n    'depth' => 1,\r\n    'left' => 1,\r\n    'right' => 10,\r\n  ),\r\n  1 => \r\n  array (\r\n    'id' => '59818f067e52392064000042',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 2,\r\n    'right' => 3,\r\n  ),\r\n  2 => \r\n  array (\r\n    'id' => '59818f607e52392064000047',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 4,\r\n    'right' => 5,\r\n  ),\r\n  3 => \r\n  array (\r\n    'id' => '59a26e607e52391c180035d2',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 6,\r\n    'right' => 9,\r\n  ),\r\n  4 => \r\n  array (\r\n    'id' => '59818f867e523921ec00733c',\r\n    'parent_id' => '59a26e607e52391c180035d2',\r\n    'depth' => 2,\r\n    'left' => 7,\r\n    'right' => 8,\r\n  ),\r\n)\r\n```\r\n\r\n<p>zephir code</p>\r\n\r\n```zep\r\nnamespace XqKeji;\r\n\r\nclass Test\r\n{\r\n\tpublic static function change(array data=[])\r\n\t{\r\n\r\n\t\tvar row;\r\n\r\n\t\tfor row in data {\r\n\t\t\tvar_export(row);\r\n\r\n\t\t\tif isset row[\"parent_id\"] {\r\n\t\t\t\techo \"exits parent_id\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n<p>output data:</p>\r\n\r\n```php\r\narray (\r\n    'item_id' => 1,\r\n    'parent_id' => NULL,\r\n    'depth' => 1,\r\n    'left' => 1,\r\n    'right' => 10,\r\n  )\r\narray (\r\n    'id' => '59818f067e52392064000042',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 2,\r\n    'right' => 3,\r\n  )\r\narray (\r\n    'id' => '59818f607e52392064000047',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 4,\r\n    'right' => 5,\r\n  )\r\n array (\r\n    'id' => '59a26e607e52391c180035d2',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 6,\r\n    'right' => 9,\r\n  )\r\n array (\r\n    'id' => '59818f867e523921ec00733c',\r\n    'parent_id' => '59a26e607e52391c180035d2',\r\n    'depth' => 2,\r\n    'left' => 7,\r\n    'right' => 8,\r\n  )\r\n```\r\n\r\n<p>change the zephir code</p>\r\n\r\n```zep\r\nnamespace XqKeji;\r\n\r\nclass Test\r\n{\r\n\tpublic static function change(array data=[])\r\n\t{\r\n\t\tvar row;\r\n\r\n\t\tfor row in data {\r\n\t\t\tlet row = json_decode(json_encode(row),1);\r\n\r\n\t\t\tvar_export(row);\r\n\r\n\t\t\tif isset row[\"parent_id\"] {\r\n\t\t\t\techo \"exits parent_id\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n```php\r\narray (\r\n    'item_id' => 1,\r\n    'parent_id' => NULL,\r\n    'depth' => 1,\r\n    'left' => 1,\r\n    'right' => 10,\r\n  )exits parent_id\r\narray (\r\n    'id' => '59818f067e52392064000042',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 2,\r\n    'right' => 3,\r\n  )exits parent_id\r\narray (\r\n    'id' => '59818f607e52392064000047',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 4,\r\n    'right' => 5,\r\n  )exits parent_id\r\n array (\r\n    'id' => '59a26e607e52391c180035d2',\r\n    'parent_id' => 1,\r\n    'depth' => 1,\r\n    'left' => 6,\r\n    'right' => 9,\r\n  )exits parent_id\r\n array (\r\n    'id' => '59818f867e523921ec00733c',\r\n    'parent_id' => '59a26e607e52391c180035d2',\r\n    'depth' => 2,\r\n    'left' => 7,\r\n    'right' => 8,\r\n  )exits parent_id\r\n```\r\n\r\nI use `json_encode` and `json_decode` the test is valid.\r\n\r\n\r\nphp7.0.15 nts\r\nzephir 0.10.6\r\nwin 10", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1530", "title": "Access to undeclared static property", "body": "When ajax request more than 3 times, there will be \"Access to undeclared static property\"\r\nE.g\r\n```zep\r\nnamespace XqKeji;\r\n\r\nclass Di\r\n{\r\n\tprivate static _default;\r\n\r\n\tpublic static function getInstance()\r\n\t{\r\n\t\tvar di\r\n\t\tlet di = self::_default;\r\n\r\n\t\tif !di {\r\n\t\t\tlet di = new self();\r\n\t\t\tlet self::_default = di;\r\n\t\t}\r\n\r\n\t\treturn self::_default;\r\n\t}\r\n}\r\n```\r\n\r\n```zep\r\nclass app\r\n{\r\n\tpublic function __construct()\r\n\t{\r\n\t\tvar di;\r\n\t\tlet di = \\XqKeji\\Di::getInstance();\r\n\t}\r\n}\r\n```\r\nTest:\r\n\r\n```php\r\n<?php\r\n$App = new App();\r\n\r\n```\r\n in window php7.0 ts\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aiddroid": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1604", "title": "Dumplicate Extension Globals key prefix", "body": "Here is the config.json\r\n```js\r\n{\r\n    \"namespace\": \"utils\",\r\n    \"name\": \"utils\",\r\n    \"description\": \"An utils helper extension\",\r\n    \"author\": \"aiddroid\",\r\n    \"version\": \"0.0.1\",\r\n    \"verbose\": false,\r\n    \"requires\": {\r\n        \"extensions\": []\r\n    },\r\n    \"globals\": {\r\n        \"utils.enable_cache\": {\r\n            \"type\": \"bool\",\r\n            \"default\": true\r\n        }\r\n    }\r\n}\r\n```\r\nbut got \"utils.utils.enable_cache\" in phpinfo().\r\n<img width=\"978\" alt=\"phpinfo\" src=\"https://user-images.githubusercontent.com/3241146/32821231-f2d9b916-c997-11e7-808b-f36ea378c770.png\">\r\n\r\nand after I removed the \"utils\" prefix from globals section in config.json, The key became \"enable_cache\" in phpinfo().It's very strange.\r\n![image](https://user-images.githubusercontent.com/3241146/32821339-678449b6-c998-11e7-96d3-313b3cbb41e4.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcospassos": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1601", "title": "Build failing on OSX 10.12.06", "body": "Hi folks!\r\n\r\nI'm trying to compile an extension without success on OSX.\r\n\r\n```\r\n/Users/marcospassos/Development/ccl-extension/ext/kernel/fcall.c:38:9: warning: nonnull parameter 'ce' will evaluate to 'true' on first encounter [-Wpointer-bool-conversion]\r\n        while (ce) {\r\n        ~~~~~  ^~\r\n./kernel/fcall.h:383:76: note: declared 'nonnull' here\r\nint zephir_has_constructor_ce(const zend_class_entry *ce) ZEPHIR_ATTR_PURE ZEPHIR_ATTR_NONNULL;\r\n                                                                           ^\r\n./kernel/globals.h:87:45: note: expanded from macro 'ZEPHIR_ATTR_NONNULL'\r\n# define ZEPHIR_ATTR_NONNULL __attribute__((nonnull))\r\n                                            ^\r\n1 warning generated.\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    croct/.libs/equatable.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/exception.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/concat.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/array.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/time.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/operators.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/exit.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/main.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/file.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/math.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/string.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/iterator.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/filter.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/require.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/variables.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/memory.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    croct/.libs/equality.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/fcall.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/debug.o\r\nduplicate symbol _tsrm_ls in:\r\n    .libs/croct.o\r\n    kernel/.libs/object.o\r\nld: 20 duplicate symbols for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake: *** [croct.la] Error 1\r\n```\r\n\r\nAny idea on how to fix it?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "3amprogrammer": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1596", "title": "[BUG] Assignment to protected static property derived from Phalcon class causes segmentation fault", "body": "More about an issue [here](https://forum.phalconphp.com/discussion/17219/why-assigning-to-a-static-property-causes-random-segmentation-fa#C52027).\r\n\r\nSteps to reproduce:\r\n1. Create new project using cli.\r\n2. Create a simple class in library folder, that extends `\\Phalcon\\Tag`\r\n```php\r\nclass Tag extends \\Phalcon\\Tag\r\n{\r\n    public static function getUrlService()\r\n    {\r\n        self::$_escaperService = new \\stdClass(); // <- this or any other assignment to any static property causes an error\r\n\r\n        return parent::getUrlService();\r\n    }\r\n}\r\n```\r\n3. Call `Tag::getUrlService();` anywhere, in my case inside `IndexController::indexAction`.\r\n4. Use php build-in web server and refresh page a few times.\r\n```\r\n\u256d\u2500klatosinski@workstation ~/Code/test  \r\n\u2570\u2500\u27a4  php -S localhost:8000 -t public                                                                                                                                                                                                                             1 \u21b5\r\nPHP 7.0.22-0ubuntu0.16.04.1 Development Server started at Fri Nov  3 09:20:29 2017\r\nListening on http://localhost:8000\r\nDocument root is /home/klatosinski/Code/test/public\r\nPress Ctrl-C to quit.\r\n[Fri Nov  3 09:20:29 2017] 127.0.0.1:53566 [200]: /\r\nzend_mm_heap corrupted\r\n```\r\n\r\nSyslog\r\n```\r\nNov  2 14:48:13 workstation kernel: [21780.492560] traps: php-fpm7.0[11713] general protection ip:55b8b9d5cc94 sp:7ffc9ba8ca00 error:0 in php-fpm7.0[55b8b9b2a000+3ae000]\r\n```\r\n\r\ngdb core dump\r\n```\r\ntmp # gdb /usr/sbin/php-fpm7.0 core-php-fpm7.0.29519\r\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n<http://www.gnu.org/software/gdb/documentation/>.\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from /usr/sbin/php-fpm7.0...(no debugging symbols found)...done.\r\n[New LWP 29519]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\nCore was generated by `php-fpm: pool www                                                            '.\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x000055c192935978 in ?? ()\r\n(gdb) bt\r\n#0  0x000055c192935978 in ?? ()\r\n#1  0x000055c19292e91b in execute_ex ()\r\n#2  0x00007f1f723bea4f in xdebug_execute_ex (execute_data=0x7f1f72a123a0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:1890\r\n#3  0x000055c1929739bd in ?? ()\r\n#4  0x000055c19292e91b in execute_ex ()\r\n#5  0x00007f1f723bea4f in xdebug_execute_ex (execute_data=0x7f1f72a12330) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:1890\r\n#6  0x000055c1928dec53 in zend_call_function ()\r\n#7  0x00007f1f63f92b59 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#8  0x00007f1f64140349 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#9  0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a122a0, return_value=0x7ffc7c8d8920) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#10 0x000055c1928deea6 in zend_call_function ()\r\n#11 0x00007f1f63f8fe6c in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#12 0x00007f1f63f907b1 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#13 0x00007f1f64187a3e in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#14 0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a12240, return_value=0x7ffc7c8d8db0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#15 0x000055c1928deea6 in zend_call_function ()\r\n#16 0x00007f1f63f8fe6c in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#17 0x00007f1f63f907b1 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#18 0x00007f1f6416ff36 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#19 0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a121e0, return_value=0x7ffc7c8d92d0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#20 0x000055c1928deea6 in zend_call_function ()\r\n#21 0x00007f1f63f8fe6c in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#22 0x00007f1f63f907b1 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#23 0x00007f1f6423ef48 in ?? () from /usr/lib/php/20151012/phalcon.so\r\n#24 0x00007f1f723bf56d in xdebug_execute_internal (current_execute_data=0x7f1f72a12180, return_value=0x7f1f72a120d0) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:2037\r\n#25 0x000055c192973880 in ?? ()\r\n#26 0x000055c19292e91b in execute_ex ()\r\n#27 0x00007f1f723bea4f in xdebug_execute_ex (execute_data=0x7f1f72a12030) at /build/xdebug-RemklO/xdebug-2.4.0/xdebug-2.4.0/xdebug.c:1890\r\n#28 0x000055c192982f47 in zend_execute ()\r\n#29 0x000055c1928ee0e3 in zend_execute_scripts ()\r\n#30 0x000055c19288d240 in php_execute_script ()\r\n#31 0x000055c192771da6 in main ()\r\n```\r\n\r\nPHP 7.0.22\r\nPhalcon Version: 3.1.2", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwtitle": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1595", "title": "How to loop SimpleXMLElement ?", "body": "for ... in can't work with SimpleXMLElement\uff1f\r\n\r\nMy XML is : \r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n--\r\n\u00a0 | <Messages xmlns=\"http://mns.aliyuncs.com/doc/v1\">\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F72355F38-200000004</MessageId>\r\n\u00a0 | <MessageBodyMD5>D23B14C6CD9CA410B627D3C3C38BED34</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:39\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5Ni0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449621304</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608944846</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>20</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F72358F0A-200000005</MessageId>\r\n\u00a0 | <MessageBodyMD5>0DC582A80C06D1C334899B104FFFDA5D</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:51\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5Ny0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449633546</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608952453</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>17</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F7235936E-200000006</MessageId>\r\n\u00a0 | <MessageBodyMD5>C0CEFB762CE46988EDE0A0DF34243519</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:52\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5OC0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449634670</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608954367</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>16</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | <Message>\r\n\u00a0 | <MessageId>52224710247175BA-1-15F7235978C-200000007</MessageId>\r\n\u00a0 | <MessageBodyMD5>BE399129E2EA269C68EAAE815BE718AD</MessageBodyMD5>\r\n\u00a0 | <MessageBody>[\"asdf\",\"sadfasdf\",\"2017-10-31 11:33:53\"]</MessageBody>\r\n\u00a0 | <ReceiptHandle>1-ODU4OTkzNDU5OS0xNTA5NjE0MzA5LTEtOA==</ReceiptHandle>\r\n\u00a0 | <EnqueueTime>1509449635724</EnqueueTime>\r\n\u00a0 | <FirstDequeueTime>1509608954799</FirstDequeueTime>\r\n\u00a0 | <NextVisibleTime>1509614309000</NextVisibleTime>\r\n\u00a0 | <DequeueCount>13</DequeueCount>\r\n\u00a0 | <Priority>8</Priority>\r\n\u00a0 | </Message>\r\n\u00a0 | </Messages>\r\n```\r\nwhen i use zephir language , the code is:\r\n```php\r\n// zephir language code\r\n.....\r\nvar xml = simplexml_load_string(xmlstring);\r\nvar k, v;\r\nfor v, v in xml {\r\n    print_r(k);\r\n    print_r(v);\r\n}\r\n....\r\n```\r\n\r\nthe run time error is:\r\n```\r\n<b>Fatal error</b>:  Uncaught Exception: The argument is not initialized or iterable() in Test.zep:154\r\n```\r\n\r\nbut It's work very good in PHP code \r\n\r\n```php\r\n<?php\r\n...\r\n$xml = simplexml_load_string($xmlstring);\r\nforeach ($xml as $item) {\r\n    print_r($item);\r\n}\r\n...\r\n```\r\n\r\n* who can help me ? thank you very much ?*", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "temuri416": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1590", "title": "[BUG] phalcon.so segfault on Centos7, PHP7.1 and latest 3.3.x branch", "body": "Hi,\r\n\r\nI'm trying to run an application on Centos7, under PHP7.1 and Phalcon 3.3.x.\r\n\r\nI'm seeing extremely unstable behaviour which results in segfaults in phalcon.so:\r\n\r\n```\r\nOct 23 10:45:10 d7 kernel: php-fpm[6242]: segfault at 18 ip 00007fb5f8f31d08 sp 00007ffd8edaf9a0 error 4 in phalcon.so[7fb5f8eb3000+476000]\r\n```\r\n\r\nIn this case crash happens very early in the app, during app modules setup. This is the class that's crashing it:\r\n\r\n```php\r\nabstract class ModuleTemplate implements ModuleDefinitionInterface, InjectionAwareInterface\r\n{\r\n....\r\n}\r\n```\r\n\r\nHowever, sometimes it goes past that point and after that crashes somewhere in MVC models.\r\n\r\nI dumped the core and ran gdb:\r\n\r\n```bash\r\n[root@d7 corefiles]# gdb /usr/sbin/php-fpm core.php-fpm.1508774215.1002                                                                                         GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7\r\nCopyright (C) 2013 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>...\r\nReading symbols from /usr/sbin/php-fpm...Reading symbols from /usr/lib/debug/usr/sbin/php-fpm.debug...done.\r\ndone.\r\n[New LWP 1002]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\r\nCore was generated by `php-fpm: pool www                                             '.\r\nProgram terminated with signal 11, Segmentation fault.\r\n#0  0x00007fe04fb31d08 in zephir_create_instance.constprop.179 () from /usr/lib64/php/modules/phalcon.so\r\n(gdb) bt\r\n#0  0x00007fe04fb31d08 in zephir_create_instance.constprop.179 () from /usr/lib64/php/modules/phalcon.so\r\n#1  0x00007fe04fc715b6 in zim_Phalcon_Di_get () from /usr/lib64/php/modules/phalcon.so\r\n#2  0x00007fe060270c34 in ?? () from /usr/lib64/php/modules/dbg-php-7.1.v18.so\r\n#3  0x00005626cb4db04c in zend_call_function (fci=0x7ffdfbe7ce70, fci_cache=0x7ffdfbe7ce40) at /usr/src/debug/php-7.1.10/Zend/zend_execute_API.c:871\r\n#4  0x00007fe04fb25061 in zephir_call_user_function () from /usr/lib64/php/modules/phalcon.so\r\n#5  0x00007fe04fb258ca in zephir_call_class_method_aparams.part.33 () from /usr/lib64/php/modules/phalcon.so\r\n#6  0x00007fe04fd65b7f in zim_Phalcon_Mvc_Application_handle () from /usr/lib64/php/modules/phalcon.so\r\n#7  0x00007fe060270c34 in ?? () from /usr/lib64/php/modules/dbg-php-7.1.v18.so\r\n#8  0x00005626cb58402c in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /usr/src/debug/php-7.1.10/Zend/zend_vm_execute.h:972\r\n#9  0x00005626cb53224b in execute_ex (ex=<optimized out>) at /usr/src/debug/php-7.1.10/Zend/zend_vm_execute.h:429\r\n#10 0x00007fe060270d68 in ?? () from /usr/lib64/php/modules/dbg-php-7.1.v18.so\r\n#11 0x00005626cb585f04 in zend_execute (op_array=0x7fe05b87f000, op_array@entry=0x7fe05b898b20, return_value=return_value@entry=0x7fe05b813030)\r\n    at /usr/src/debug/php-7.1.10/Zend/zend_vm_execute.h:474\r\n#12 0x00005626cb4ea8b3 in zend_execute_scripts (type=type@entry=8, retval=0x7fe05b813030, retval@entry=0x0, file_count=file_count@entry=3)\r\n    at /usr/src/debug/php-7.1.10/Zend/zend.c:1480\r\n#13 0x00005626cb487de8 in php_execute_script (primary_file=primary_file@entry=0x7ffdfbe80030) at /usr/src/debug/php-7.1.10/main/main.c:2552\r\n#14 0x00005626cb321474 in main (argc=<optimized out>, argv=<optimized out>) at /usr/src/debug/php-7.1.10/sapi/fpm/fpm/fpm_main.c:1966\r\n(gdb)\r\n```\r\n\r\n\r\nPhalcon version:\r\n\r\n```\r\n php --ri phalcon\r\n\r\nphalcon\r\n\r\n\r\nWeb framework delivered as a C-extension for PHP\r\nphalcon => enabled\r\nAuthor => Phalcon Team and contributors\r\nVersion => 3.3.0\r\nBuild Date => Oct 23 2017 09:45:56\r\nPowered by Zephir => Version 0.10.4-07c821e996\r\n\r\nDirective => Local Value => Master Value\r\nphalcon.db.escape_identifiers => On => On\r\nphalcon.db.force_casting => Off => Off\r\nphalcon.orm.events => On => On\r\nphalcon.orm.virtual_foreign_keys => On => On\r\nphalcon.orm.column_renaming => On => On\r\nphalcon.orm.not_null_validations => On => On\r\nphalcon.orm.exception_on_failed_save => Off => Off\r\nphalcon.orm.enable_literals => On => On\r\nphalcon.orm.late_state_binding => Off => Off\r\nphalcon.orm.enable_implicit_joins => On => On\r\nphalcon.orm.cast_on_hydrate => Off => Off\r\nphalcon.orm.ignore_unknown_columns => Off => Off\r\nphalcon.orm.update_snapshot_on_save => On => On\r\nphalcon.orm.disable_assign_setters => Off => Off\r\n```\r\n\r\nI have NuSphere's `dbg` extension enabled.\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wisegoodvin": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1580", "title": "Access to PHP $GLOBALS superglobal array", "body": "Is it possible to organize access to the superglobal $GLOBALS array, as to $ _POST, $ _GET, and others?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergeyklay": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1571", "title": "[Bug] IDE Stubs generation errors", "body": "_From @kornerita on August 8, 2017 13:55_\n\n### Expected and Actual Behavior\r\n\r\n> **Describe what you are trying to achieve and what goes wrong.**\r\n\r\nStrings constants are not quoted and generates invalid php code.\r\n\r\ni.e. [Zephir](https://github.com/phalcon/cphalcon/blob/master/phalcon/config.zep#L55)\r\n\r\nGenerated PHP:\r\n```php\r\nclass Config implements \\ArrayAccess, \\Countable {\r\n\r\n\tconst DEFAULT_PATH_DELIMITER = .;\r\n\r\n\tprotected static $_pathDelimiter;\r\n```\r\n\r\nExpected PHP:\r\n```php\r\nclass Config implements \\ArrayAccess, \\Countable {\r\n\r\n\tconst DEFAULT_PATH_DELIMITER = \".\";\r\n\r\n\tprotected static $_pathDelimiter;\r\n```\r\n### Details\r\n\r\n* System info and versions (if possible): (`phalcon info`)\r\n```\r\n$ phalcon info\r\n\r\nPhalcon DevTools (3.2.0)\r\n\r\nEnvironment:\r\n  OS: Darwin Kornalito-Air.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n  PHP Version: 5.6.30\r\n  PHP SAPI: cli\r\n  PHP Bin: /usr/bin/php\r\n  PHP Extension Dir: /usr/lib/php/extensions/no-debug-non-zts-20131226\r\n  PHP Bin Dir: /usr/bin\r\n  Loaded PHP config: /etc/php.ini\r\nVersions:\r\n  Phalcon DevTools Version: 3.2.0\r\n  Phalcon Version: 3.2.1\r\n  AdminLTE Version: 2.3.6\r\n\r\n```\r\n* Phalcon Framework version: (`php --ri phalcon`)\r\n```\r\n$ php --ri phalcon\r\n\r\nphalcon\r\n\r\n\r\nWeb framework delivered as a C-extension for PHP\r\nphalcon => enabled\r\nAuthor => Phalcon Team and contributors\r\nVersion => 3.2.1\r\nBuild Date => Jul 17 2017 13:04:30\r\nPowered by Zephir => Version 0.9.9-868cb1f92b\r\n\r\nDirective => Local Value => Master Value\r\nphalcon.db.escape_identifiers => On => On\r\nphalcon.db.force_casting => Off => Off\r\nphalcon.orm.events => On => On\r\nphalcon.orm.virtual_foreign_keys => On => On\r\nphalcon.orm.column_renaming => On => On\r\nphalcon.orm.not_null_validations => On => On\r\nphalcon.orm.exception_on_failed_save => Off => Off\r\nphalcon.orm.enable_literals => On => On\r\nphalcon.orm.late_state_binding => Off => Off\r\nphalcon.orm.enable_implicit_joins => On => On\r\nphalcon.orm.cast_on_hydrate => Off => Off\r\nphalcon.orm.ignore_unknown_columns => Off => Off\r\nphalcon.orm.update_snapshot_on_save => On => On\r\nphalcon.orm.disable_assign_setters => Off => Off\r\n```\r\n* PHP Version: (`php -v`)\r\n```\r\n$ php -v\r\nPHP 5.6.30 (cli) (built: Feb  7 2017 16:18:37) \r\nCopyright (c) 1997-2016 The PHP Group\r\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r\n```\r\n* Operating System: `macOS Sierra 10.12.6`\r\n```\r\n$ uname -a\r\nDarwin Kornalito-Air.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n```\r\n* Server: `none required`\r\n* Other related info (Database, table schema): `none required`\r\n\r\n\n\n_Copied from original issue: phalcon/phalcon-devtools#1076_", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/8059e665683d1ba20c715d0761f39b6fa609af27", "message": "Updated README [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ee1ab64337460dcd6cc478838bb53c09164cf3e7", "message": "Updated README [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/ac484539e10667464a615d774f6f1a3eeb16e6f0", "message": "Updated README [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/127bc9be43662c3a97d94f34e651106781f4d780", "message": "Clean build matrix"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/9aeac6ec976be9da298a6bb2637bfe5180aa4619", "message": "Cleaned Composer config\n\n/cc @Ultimater"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/31e9c9eab354537018c24034edaac4d76e397988", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/0b7210d4f6edfe5f8ae3f1181bb4c279746afdb9", "message": "Merge pull request #1613 from sergeyklay/development\n\nDo not treat numeric strings as numbers"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/53fadda99cd79f44f4745905d2cb57bd2b49a4b4", "message": "Do not treat numeric strings as numbers\n\nFixes:  #1609"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/aabb0549a4665eb4586ed281f9ad375351bde571", "message": "Amended gd prototype"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f58caac89e6eee39711d1bb74f4053e6ed3af741", "message": "Merge pull request #1612 from Jurigag/createinstanceabstract\n\nFix create instance abstract"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/f221e7d82659783fe5767d38f0f99f49df5aa8fb", "message": "Merge pull request #1603 from phalcon/development\n\n0.10.6"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/6b069ad0610eba6cbabfcf4aafa4c8f1b06fc5bc", "message": "Merge pull request #1602 from sergeyklay/development\n\n Deal with types"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/03525627136b960a149413e37831b6df8911146a", "message": "Use latest Zephir Parser"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/5e8b17037d8585ffff889763f0a7c75cd69958c2", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/3dfd5bca00bbd3cbe5f582f95a0d2579a7ae9773", "message": "mod-assign: Support for assignment by division by modulus for variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/38dbe18c31a0cd963c46b1d23b23b941e3148f31", "message": "Amended tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/b8a64c9147092435f75f581cb309cbbab302048f", "message": "div-assign: Support for assignment by division for variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2213636b36c1ba69f66a3d154bd4d7ff55eb3fff", "message": "Code cleanup, removed no longer used variables"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/af7b5816a87319507b915161b26bd03d85e21ef9", "message": "Improved illegal operation error handling"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/2009b69f3e13ff5dd6ef020e760736dbf7ca18e4", "message": "Amended assign tests"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/463604146d377a1306b277b4eebf75297bc62db5", "message": "ZE3: Fixed adding reference counter for scalar values\n\nPHP doesn't allocate scalar values in heap but do it directly on VM\nstack, inside HashTables and object. They are not subjects for\nreference counting and garbage collection anymore. Scalar values\ndon't have reference counter and don't support Z_ADDREF*(), Z_DELREF*(),\nZ_REFCOUNT*() and Z_SET_REFCOUNT*() macros anymore. In most cases we\nshould check if zval supports these macros before calling them.\nOtherwise we'll get an assert() or crash."}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d79f700b519bf2b5954979db5b21947b1fdd3141", "message": "Fixed PHPDoc to help IDE"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/18ff4536c2a1d7fee822371b952ec11fa72dbb2a", "message": "Minor fixes for SymbolTable (CS, comparing objects, PHPDoc)"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/7fa922ffa1fbca334d3b4b55c02fb321168db28d", "message": "concat-assign: Do not cast dynamic string variables to long\n\nRefs: #1573"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/04eb3288bf55581a120b3832abe88e18f7857390", "message": "Merge pull request #1600 from phalcon/development\n\n0.10.5"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/d10b3c1f4c2190a0068d186f4587dc3df07a3f8b", "message": "Fixed LICENSE [ci skip]"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/75e4b3587a811c53b4c943d7b87a3524e138a129", "message": "Bump version"}, {"url": "https://api.github.com/repos/phalcon/zephir/commits/775f433787d0ead016eb3b0163f947672f0427bf", "message": "Merge pull request #1597 from sergeyklay/feature/latest-re2c\n\nUse latest re2c"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maybeTomorrow": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1568", "title": "i got a 50mb size dll file", "body": "How do I compress DLL file sizes?", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ilhanyumer": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1564", "title": "zephir build doesn't create a dll, instead opens configure.js in Notepad++", "body": "I'm trying to build a dll file but it doesn't build any dll. I run this command: `zephir build`\r\n\r\nThen the output is:\r\n```\r\nPreparing for PHP compilation...\r\nPreparing configuration file...\r\n```\r\nAnd then it opens the `configure.js` in Notepad++. http://i.imgur.com/vBQiWSn.png And it stays like this forever. If I close the Notepad++ it prints 2 more lines and there is no dll http://i.imgur.com/Hssuc2b.jpg\r\n\r\n\r\n### Details\r\n\r\n* Everything is 64bit\r\n* Zephir Parser => enabled\r\n* Author => Zephir Team and contributors\r\n* Version => 1.0.3\r\n* Build Date => May 13 2017 15:03:23\r\n\r\n* PHP 5.6.31 (cli) (built: Jul  5 2017 22:24:47)\r\n* Copyright (c) 1997-2016 The PHP Group\r\n* Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r\n\r\n* Microsoft Windows [Version 6.3.9600]\r\n\r\n* Installation type: installing via package manager\r\n\r\n* Visual Studio Ultimate 2012 with Blend\r\n** Blend for Visual Studio\r\n** LightSwitch\r\n** Microsoft Foundation Classes for C++\r\n** Microsoft Office Developer Tools\r\n** Microsoft SharePoint Developer Tools\r\n** Microsoft Web Developer Tools\r\n\r\n\r\ncompile-errors.log:\r\n\r\n> Microsoft (R) Program Maintenance Utility Version 11.00.50727.1\r\n> Copyright (C) Microsoft Corporation.  All rights reserved.\r\n> \r\n> NMAKE : fatal error U1064: MAKEFILE not found and no target specified\r\n> Stop.\r\n\r\nThe compile.log is empty.\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1564/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jurigag": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1542", "title": "Random Core Dumps on PHP 5.5(possibly 5.6 too)", "body": "Some latest changes to zephir triggered somehow i think this bug in php - https://bugs.php.net/bug.php?id=64827 when running phalcon tests. I got two core dumps here:\r\n\r\nhttps://pastebin.com/nMRHmf1k\r\n\r\nNot sure what is causing it, it's not really reproducible, some times it runs fine, some times core dump and sometimes zend_mm_heap corrupted", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1536", "title": "Extending class with static is changing null value", "body": "When extending zephir class which has static field it's changing it's value from `NULL` to `&NULL` in php 7 and 7.1, for php 5.5 and 5.6 it works fine.\r\n\r\nRelated PR with test - https://github.com/phalcon/zephir/pull/1535\r\n\r\n@sjinks ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1520", "title": "Detect debug when building", "body": "I have a small idea, sometimes i forgot to write builddev when i need to, how about:\r\n\r\n- detect if we have php compiled as debug\r\n- if yes then `zephir build` will always build extension with debug symbols(just `zephir builddev`)\r\n- if not then as it is\r\n- add `zephir buildprod` so someone can build extension without debug symbols anyway", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1449", "title": "Missing optimizers", "body": "- [ ] extract\r\n- [ ] compact\r\n- [x] get_defined_vars\r\n- [ ] parse_str\r\n- [ ] assert\r\n- [x] func_get_args\r\n- [x] func_get_arg\r\n- [x] func_num_args\r\n\r\nSource - https://wiki.php.net/rfc/forbid_dynamic_scope_introspection", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1431", "title": "Protected call", "body": "Currently zephir allows to call protected method from other object in zephir code itself.\r\n\r\nIs there any visbility set in zephir itself or just all methods are public and visibility is only for php?\r\n\r\nHere is rellated pull request with tests - https://github.com/phalcon/zephir/pull/1429 Notice on php 7.1 it works as it should be.", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/448b45901f8f0cd772c32f43eb32b09f76e9da85", "message": "Fix create instance abstract"}], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1551", "title": "Test globals", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1429", "title": "Test calling protected method", "body": "On phalcon repo there is some weird code that protected method of some object is called without any problems from other object, on php 7.1 it's started to failing(**IT SHOULD ON ALL VERSIONS**) so this is testing this.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mruz": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1538", "title": "SIGABRT in zephir_memory_observe", "body": "https://github.com/ice/framework/blob/dev/ice/assets.zep#L60\r\n\r\nhttps://github.com/ice/framework/blob/dev/build/php7/ice/assets.zep.c#L165\r\n\r\n```\r\nProgram received signal SIGABRT, Aborted.\r\n0x00007ffff652f0c7 in raise () from /lib64/libc.so.6\r\n(gdb) bt\r\n#0  0x00007ffff652f0c7 in raise () from /lib64/libc.so.6\r\n#1  0x00007ffff6530478 in abort () from /lib64/libc.so.6\r\n#2  0x00007ffff1b1db53 in zephir_memory_observe () from /usr/lib64/php7/extensions/ice.so\r\n#3  0x00007ffff1b5aa00 in zim_Ice_Assets_add () from /usr/lib64/php7/extensions/ice.so\r\n#4  0x00005555558f5b58 in ZEND_DO_FCALL_SPEC_RETVAL_USED_HANDLER ()\r\n#5  0x000055555588de8b in execute_ex ()\r\n#6  0x0000555555832901 in zend_call_function ()\r\n#7  0x00007ffff1b25fbb in zephir_call_user_function () from /usr/lib64/php7/extensions/ice.so\r\n#8  0x00007ffff1b26add in zephir_call_class_method_aparams () from /usr/lib64/php7/extensions/ice.so\r\n#9  0x00007ffff1b4e256 in zim_Ice_Dispatcher_dispatch () from /usr/lib64/php7/extensions/ice.so\r\n#10 0x00005555558327f9 in zend_call_function ()\r\n#11 0x00007ffff1b25fbb in zephir_call_user_function () from /usr/lib64/php7/extensions/ice.so\r\n#12 0x00007ffff1b26add in zephir_call_class_method_aparams () from /usr/lib64/php7/extensions/ice.so\r\n#13 0x00007ffff1bcd2b0 in zim_Ice_Mvc_Dispatcher_dispatch () from /usr/lib64/php7/extensions/ice.so\r\n#14 0x00005555558327f9 in zend_call_function ()\r\n#15 0x00007ffff1b25fbb in zephir_call_user_function () from /usr/lib64/php7/extensions/ice.so\r\n#16 0x00007ffff1b26add in zephir_call_class_method_aparams () from /usr/lib64/php7/extensions/ice.so\r\n#17 0x00007ffff1bcb1ad in zim_Ice_Mvc_App_handle () from /usr/lib64/php7/extensions/ice.so\r\n#18 0x00005555558f5b58 in ZEND_DO_FCALL_SPEC_RETVAL_USED_HANDLER ()\r\n#19 0x000055555588de8b in execute_ex ()\r\n#20 0x00005555558f8524 in zend_execute ()\r\n#21 0x0000555555842cf0 in zend_execute_scripts ()\r\n#22 0x00005555557d7df8 in php_execute_script ()\r\n#23 0x00005555558fae58 in do_cli ()\r\n#24 0x0000555555688046 in main ()\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1174", "title": "Add magic shortcuts: 'is', 'add'", "body": "``` zep\nclass Person {\n\n  protected name { set, get  };\n  protected age { set, get };\n  protected male = true { set, is };\n  protected phone { add, get };\n  protected email { add, get };\n}\n```\n\n``` php\n$person = new Person;\n$person->setName('Julia');\n$person->setAge(21);\n$person->setMale(false);\n\n$person\n    ->addPhone('0123456789')\n    ->addEmail('julia@example.com');\n\necho 'Name: ' . $person->getName() .\n     'Age: ' . $person->getAge() .\n     'Sex: ' . ($person->isMale() ? 'Male' : 'Female') .\n     'Phone: ' . $person->getPhone() .\n     'Email: ' . $person->getEmail();\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/5179727", "body": "It works fine now. Thanks guys!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5277975", "body": "I'm getting:\n\n> Argument 3 passed to Variable::setIsInitialized() must be of the type array, none given, called in ../zephir-master/Library/Operators/Other/CloneOperator.php on line 64 and defined in ../zephir-master/Library/Variable.php on line 517\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5277975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5553640", "body": "On the latest zephir version something was changed with `__construct()` I'm getting:\n\n> Fatal error: Call to undefined function Baseapp\\Frontend\\Controllers\\IndexController::__construct() in /home/mruz/Dropbox/osc/test/public/index.php on line 69\n\nI don't have constructor in IndexController, in the `\\Phalcon\\Mvc\\Controller` constructor is _final_.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5553640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5568395", "body": "Simple multi module application:\n/public/index.php\n\n``` php\n<?php\n\nuse \\Phalcon\\Mvc\\Router,\n    \\Phalcon\\Mvc\\Application,\n    \\Phalcon\\DI\\FactoryDefault;\n\ntry {\n    if (!defined('ROOT_PATH')) {\n        define('ROOT_PATH', dirname(__DIR__));\n    }\n\n    //Register an autoloader\n    $loader = new \\Phalcon\\Loader();\n    $loader->registerNamespaces(array(\n        'Baseapp\\Models' => ROOT_PATH . '/app/common/models/',\n        //'Baseapp\\Library' => ROOT_PATH . '/app/common/library/',\n    ))->register();\n\n    $di = new FactoryDefault();\n\n    $di->set('router', function() {\n        $router = new Router();\n        $router->setDefaultModule(\"frontend\");\n        $router->setDefaultController(\"index\");\n        $router->setDefaultAction(\"index\");\n        return $router;\n    });\n\n    $application = new Application($di);\n\n    $application->registerModules(array(\n        'frontend' => array(\n            'className' => 'Baseapp\\Frontend\\Module',\n            'path' => ROOT_PATH . '/app/frontend/Module.php'\n        )\n    ));\n\n    $application->setDI($di);\n\n    echo $application->handle()->getContent();\n} catch (\\Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n/app/frontend/Module.php\n\n``` php\n<?php\nnamespace Baseapp\\Frontend;\n\nclass Module implements \\Phalcon\\Mvc\\ModuleDefinitionInterface\n{\n\n    public function registerAutoloaders($di = NULL)\n    {\n        $loader = new \\Phalcon\\Loader();\n\n        $loader->registerNamespaces(array(\n            'Baseapp\\Frontend\\Controllers' => __DIR__ . '/controllers/',\n        ));\n\n        $loader->register();\n    }\n\n    public function registerServices($di)\n    {\n        //Registering a dispatcher\n        $di->set('dispatcher', function() {\n            //Create/Get an EventManager\n            $eventsManager = new \\Phalcon\\Events\\Manager();\n            //Attach a listener\n            $eventsManager->attach(\"dispatch\", function($event, $dispatcher, $exception) {\n                //controller or action doesn't exist\n                if ($event->getType() == 'beforeException') {\n                    switch ($exception->getCode()) {\n                        case \\Phalcon\\Dispatcher::EXCEPTION_HANDLER_NOT_FOUND:\n                        case \\Phalcon\\Dispatcher::EXCEPTION_ACTION_NOT_FOUND:\n                            $dispatcher->forward(array(\n                                'controller' => 'index',\n                                'action' => 'notFound'\n                            ));\n                            return false;\n                    }\n                }\n            });\n\n            $dispatcher = new \\Phalcon\\Mvc\\Dispatcher();\n            //Set default namespace to frontend module\n            $dispatcher->setDefaultNamespace(\"Baseapp\\Frontend\\Controllers\");\n            //Bind the EventsManager to the dispatcher\n            $dispatcher->setEventsManager($eventsManager);\n\n            return $dispatcher;\n        });\n\n        //Registering the view component\n        $di->set('view', function() {\n            $view = new \\Phalcon\\Mvc\\View();\n            $view->setViewsDir(__DIR__ . '/views/');\n            return $view;\n        });\n    }\n\n}\n```\n\n/app/frontend/controllers/IndexController.php\n\n``` php\n<?php\nnamespace Baseapp\\Frontend\\Controllers;\n\nclass IndexController extends \\Phalcon\\Mvc\\Controller\n{\n\n    public function indexAction()\n    {\n        echo 'OK';\n    }\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5568395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5608237", "body": "The problem is similar to https://github.com/phalcon/zephir/issues/108#issuecomment-35603559 maybe with _Zephir\\MethodCall_ `CALL_DYNAMIC`/`CALL_DYNAMIC_STRING`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5608237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "maciejmrozinski": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1524", "title": "Casting resource to int", "body": "Hi,\r\n\r\nFound an unexpected result when casting resources to ints (common thing in PHP):\r\n\r\n```\r\n    var key;\r\n    let key =  (int) stream; //stream is resource #127\r\n    echo $key;\r\n```\r\n\r\nExpected:\r\n`127`\r\nCurrent:\r\n`1`\r\n\r\nI always receive `1` instead of resource id. `intval` is also not working. `strval` gets `Resource id #127`", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sjinks": {"issues": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/1510", "title": "[RFC] FastCall API", "body": "Currently, Zephir compiler misses a lot of cases where method caching could save some time. Some of these misses are by design (i.e., when a non-final method is called, the compiler cannot be sure which class `$this` refers to), some are compiler defects (when the same method is called in a loop).\r\n\r\nSome of these deficiencies are dealt with by the Zephir Kernel (it tries to cache functions and methods called by the user code). However, this caching is not very efficient: a) every method/function is cached, b) cache is stored in hash tables.\r\n\r\nFastCall API can be used to deal with these deficiencies; however, *right now* it is quite low-level and is for manual use only.\r\n\r\n[Usage example](https://github.com/sjinks/zephir/commit/c360d861dcb2585431ae53fe9483e1f87f6600cb#diff-b913b909037a897c48b0d7f9e284dcf2R141)\r\n\r\n[Benchmarks](https://travis-ci.org/sjinks/zephir/jobs/222133655#L4901)\r\n\r\nPS: `fastcall` branch was branched off `master` and does not include fixes from #1509.\r\n\r\nHowever, my initial impression is that it could be faster than our current CALL API.\r\n\r\nThe main question is: do we need it? :-)\r\n\r\n@sergeyklay @Jurigag @ovr ", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1510/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1495", "title": "Compiler does not escape slashes in strings", "body": "```\r\n/workspace/zephir/ext/test/declaretest.zep.c: In function \u2018zim_Test_DeclareTest_testStringDeclare1\u2019:\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\w'\r\n  ZVAL_STRING(&a, \"/@(\\w+)(?:\\s*(?:\\(\\s*)?(.*?)(?:\\s*\\))?)??\\s*(?:\\n|\\*\\/)/\");\r\n                                                                            ^\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\)'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\*'\r\n/workspace/zephir/ext/test/declaretest.zep.c:40:76: warning: unknown escape sequence: '\\/'\r\n/workspace/zephir/ext/test/declaretest.zep.c: In function \u2018zim_Test_DeclareTest_testStringDeclare2\u2019:\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\w'\r\n  ZVAL_STRING(&a, \"/(\\w+)\\s*=\\s*(\\[[^\\]]*\\]|\\\"[^\\\"]*\\\"|[^,)]*)\\s*(?:,|$)/\");\r\n                                                                          ^\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\s'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\]'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\]'\r\n/workspace/zephir/ext/test/declaretest.zep.c:55:74: warning: unknown escape sequence: '\\s'\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1495/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1494", "title": "zephir_update_static_property_ce_cache in the compiler", "body": "`StaticProperty::assignStatic`:\r\n\r\n```php\r\nif ($compilationContext->insideCycle) {\r\n    $propertyCache = $compilationContext->symbolTable->getTempVariableForWrite('zend_property_info', $compilationContext);\r\n    $propertyCache->setMustInitNull(true);\r\n    $propertyCache->setReusable(false);\r\n    $codePrinter->output('zephir_update_static_property_ce_cache(' . $classEntry .', SL(\"' . $property . '\"), &' . $tempVariable->getName() . ', &' . $propertyCache->getName() . ' TSRMLS_CC);');\r\n} else {\r\n     $compilationContext->backend->updateStaticProperty($classEntry, $property, $tempVariable, $compilationContext);\r\n}\r\n```\r\n\r\nHowever, `zephir_update_static_property_ce_cache` is available only in ZE2 kernel.\r\n\r\nhttps://github.com/phalcon/zephir/blob/master/Library/Statements/Let/StaticProperty.php#L208\r\nhttps://github.com/phalcon/zephir/blob/master/Library/Statements/Let/StaticProperty.php#L224\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1487", "title": "Unnecessary memory allocation", "body": "```c\r\nPHP_METHOD(Test_SPropertyAccess, __construct) {\r\n\r\n\tzval *_0, _1, _2, *_3, *_4 = NULL;\r\n\r\n\tZEPHIR_MM_GROW();\r\n\r\n\tZEPHIR_INIT_ZVAL_NREF(_0);\r\n\tZEPHIR_INIT_VAR(_0);\r\n\tZVAL_STRING(_0, \"abc\", 1);\r\n```\r\n\r\nBoth `ZEPHIR_INIT_ZVAL_NREF` and `ZEPHIR_INIT_VAR` allocate memory via `ALLOC_ZVAL`; memory allocated by `ZEPHIR_INIT_ZVAL_NREF` is leaked.\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1483", "title": "Non-tracked variables are not destroyed", "body": "```c\r\nzval _2$$3 = zval_used_for_init;\r\n\r\n\twhile (1) {\r\n\t\tif (!(i < zephir_fast_strlen_ev(value))) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t_1$$3 = ZEPHIR_STRING_OFFSET(value, i);\r\n\t\tZEPHIR_SINIT_NVAR(_2$$3);\r\n\t\tZVAL_STRINGL(&_2$$3, &_1$$3, 1, 1);\r\n\t\tZEPHIR_CALL_FUNCTION(&_3$$3, \"ord\", &_4, 79, &_2$$3);\r\n\t\tzephir_check_call_status();\r\n\t\tZEPHIR_CALL_FUNCTION(&_5$$3, \"dechex\", &_6, 6, _3$$3);\r\n\t\tzephir_check_call_status();\r\n\t\tzephir_concat_self(&ret, _5$$3 TSRMLS_CC);\r\n\t\ti++;\r\n\t}\r\n\tRETURN_CTOR(ret);\r\n```\r\n\r\nAs a result, the very last value of `_2$$3` will leak.\r\n\r\nSee: `Variable::initVariant()` in the compiler\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1480", "title": "Zephir generates code incorrectly", "body": "PHP 5.6, `zim_Test_BuiltIn_CharMethods_getHexForString`\r\n\r\n```\r\nPHP_METHOD(Test_BuiltIn_CharMethods, getHexForString) {\r\n\r\n\tlong _0;\r\n\tchar ch = 0;\r\n\tzval *str_param = NULL, *o = NULL, *_1$$3 = NULL, *_2$$3 = NULL, _3$$3 = zval_used_for_init;\r\n\tzval *str = NULL;\r\n\r\n\tZEPHIR_MM_GROW();\r\n\tzephir_fetch_params(1, 1, 0, &str_param);\r\n\r\n\tzephir_get_strval(str, str_param);\r\n\r\n\r\n\tZEPHIR_INIT_VAR(o);\r\n\tZVAL_STRING(o, \"\", 1);\r\n\tfor (_0 = 0; _0 < Z_STRLEN_P(str); _0++) {\r\n\t\tch = ZEPHIR_STRING_OFFSET(str, _0);\r\n\t\tZEPHIR_INIT_NVAR(_2$$3);\r\n\t\tZEPHIR_SINIT_NVAR(_3$$3);\r\n\t\tZVAL_STRINGL(&_3$$3, &ch, 1, 1);\r\n\t\tzephir_string_to_hex(_2$$3, &_3$$3);\r\n\t\tzephir_concat_self(&o, _2$$3 TSRMLS_CC);\r\n\t}\r\n\tRETURN_CCTOR(o);\r\n\r\n}\r\n```\r\n\r\nInteresting parts:\r\n```c\r\nzval _3$$3 = zval_used_for_init\r\n\r\nfor (_0 = 0; _0 < Z_STRLEN_P(str); _0++) {\r\n\tZEPHIR_SINIT_NVAR(_3$$3);\r\n\tZVAL_STRINGL(&_3$$3, &ch, 1, 1);\r\n}\r\n```\r\n\r\n`ZEPHIR_SINIT_NVAR(z)` expands to `Z_SET_REFCOUNT_P(&z, 1)`\r\n\r\n`ZVAL_STRINGL` in the loop overwrites the previous string which is never freed.\r\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/1475", "title": "Memory leaks in Zephir", "body": "```\r\n==32320== \r\n==32320== HEAP SUMMARY:\r\n==32320==     in use at exit: 22,383 bytes in 259 blocks\r\n==32320==   total heap usage: 313,020 allocs, 312,761 frees, 66,395,022 bytes allocated\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 13 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106CDEA0: zim_Test_Sort_quick (sort.zep.c:95)\r\n==32320==    by 0x848517: zend_call_function (zend_execute_API.c:885)\r\n==32320==    by 0x105F7B1A: zephir_call_user_function (fcall.c:303)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106CDEA0: zim_Test_Sort_quick (sort.zep.c:95)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 14 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x10670D83: zim_Test_Mcall_testCall7 (mcall.zep.c:242)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 15 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x10670E6C: zim_Test_Mcall_testCall7 (mcall.zep.c:244)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 16 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106710BD: zim_Test_Mcall_testCall8 (mcall.zep.c:268)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 17 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106711A6: zim_Test_Mcall_testCall8 (mcall.zep.c:270)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 16 bytes in 1 blocks are definitely lost in loss record 18 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x105F7BA3: zephir_call_user_function (fcall.c:323)\r\n==32320==    by 0x105F8330: zephir_call_class_method_aparams (fcall.c:509)\r\n==32320==    by 0x106A9A4A: zim_Test_Pregmatch_testMatchAllInZep (pregmatch.zep.c:320)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 56 bytes in 1 blocks are definitely lost in loss record 39 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x106A7D6F: zim_Test_Pregmatch_testPregMatchAll (pregmatch.zep.c:119)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320== \r\n==32320== 96 bytes in 2 blocks are definitely lost in loss record 40 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x8A7FFB: zend_objects_new (zend_objects.c:162)\r\n==32320==    by 0x8666C9: _object_and_properties_init (zend_API.c:1301)\r\n==32320==    by 0x866786: _object_init_ex (zend_API.c:1316)\r\n==32320==    by 0x8C6DB4: ZEND_NEW_SPEC_CONST_HANDLER (zend_vm_execute.h:3342)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320== \r\n==32320== 504 (56 direct, 448 indirect) bytes in 1 blocks are definitely lost in loss record 58 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x7DD61F: php_build_argv (php_variables.c:537)\r\n==32320==    by 0x7DDE71: php_hash_environment (php_variables.c:666)\r\n==32320==    by 0x7C71B3: php_request_startup (main.c:1628)\r\n==32320==    by 0x9283A0: do_cli (php_cli.c:945)\r\n==32320==    by 0x929724: main (php_cli.c:1344)\r\n==32320==\r\n==32320== 736 (584 direct, 152 indirect) bytes in 3 blocks are definitely lost in loss record 60 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x8A7FFB: zend_objects_new (zend_objects.c:162)\r\n==32320==    by 0x8666C9: _object_and_properties_init (zend_API.c:1301)\r\n==32320==    by 0x866786: _object_init_ex (zend_API.c:1316)\r\n==32320==    by 0x8C6DB4: ZEND_NEW_SPEC_CONST_HANDLER (zend_vm_execute.h:3342)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8BF4BC: zend_execute (zend_vm_execute.h:458)\r\n==32320==    by 0x8605FB: zend_execute_scripts (zend.c:1427)\r\n==32320==    by 0x7C8D9F: php_execute_script (main.c:2494)\r\n==32320==    by 0x928556: do_cli (php_cli.c:974)\r\n==32320==    by 0x929724: main (php_cli.c:1344)\r\n==32320==\r\n==32320== 1,924 (208 direct, 1,716 indirect) bytes in 1 blocks are definitely lost in loss record 67 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x8040A3: compile_file (zend_language_scanner.l:596)\r\n==32320==    by 0x58805F: phar_compile_file (phar.c:3322)\r\n==32320==    by 0x86058D: zend_execute_scripts (zend.c:1421)\r\n==32320==    by 0x7C8D9F: php_execute_script (main.c:2494)\r\n==32320==    by 0x928556: do_cli (php_cli.c:974)\r\n==32320==    by 0x929724: main (php_cli.c:1344)\r\n==32320==\r\n==32320== 6,608 bytes in 118 blocks are definitely lost in loss record 69 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x2F6F51: php_pcre_match_impl (php_pcre.c:697)\r\n==32320==    by 0x105F6208: zephir_preg_match (string.c:1082)\r\n==32320==    by 0x106BD268: zim_Test_Router_handle (router.zep.c:634)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==\r\n==32320== 6,968 (448 direct, 6,520 indirect) bytes in 8 blocks are definitely lost in loss record 70 of 70\r\n==32320==    at 0x4C2CB3F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32320==    by 0x82AE2E: _emalloc (zend_alloc.c:2446)\r\n==32320==    by 0x865702: _array_init (zend_API.c:1061)\r\n==32320==    by 0x2F6F51: php_pcre_match_impl (php_pcre.c:697)\r\n==32320==    by 0x105F6208: zephir_preg_match (string.c:1082)\r\n==32320==    by 0x106B6146: zim_Test_RegexDNA_process (regexdna.zep.c:192)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==    by 0x8483F1: zend_call_function (zend_execute_API.c:866)\r\n==32320==    by 0x5AF943: zim_reflection_method_invokeArgs (php_reflection.c:3348)\r\n==32320==    by 0x8C052B: ZEND_DO_FCALL_SPEC_HANDLER (zend_vm_execute.h:842)\r\n==32320==    by 0x8BF3AB: execute_ex (zend_vm_execute.h:414)\r\n==32320==\r\n==32320== LEAK SUMMARY:\r\n==32320==    definitely lost: 8,152 bytes in 140 blocks\r\n==32320==    indirectly lost: 8,836 bytes in 79 blocks\r\n==32320==      possibly lost: 0 bytes in 0 blocks\r\n==32320==    still reachable: 5,395 bytes in 40 blocks\r\n==32320==         suppressed: 0 bytes in 0 blocks\r\n```", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/1475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1467", "title": "Fix scope issues in calls (PHP 7.0)", "body": "See #251 \r\n\r\nPHP 5.4 and 5.5 still need fixing.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chrysanthemum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/phalcon/zephir/commits/d5319f31403883171eae9f2d598a7b20030be7f0", "message": "fix global function has not parameter, compile failed (#1616)\n\n* fix global function without parameter,compile fail\r\n\r\nError: Call to a member function getParameters() on null in /../zephir/Library/Compiler.php on line 2019\r\n\r\n* Update Compiler.php"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ovr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1458", "title": "[Runtime] Start working on PHP 7+ support - WIP!!", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1020", "title": "GCC PGO (Profile-guided optimization)", "body": "Hey!\n\nHow to start\n\nGenerate gcda profile:\n\n```\ncd ext\n./pgo-install\n```\n\nStart our application 1000 runs\nFor example\n\n```\n./vendor/bin/phpunit - 100 runs :D\n```\n\nNext install with `PGO`:\n\n```\ncd ext\n./pgo-use-install\n```\n- [X] Added\n- [ ] Protect gcda clean\n\nrefs @andresgutierrez \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1018", "title": "Compile StaticConstantAccess directly, small review", "body": "Very simple review with comments\n\nping @andresgutierrez \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/860", "title": "841 final fix [WORKING!!!]", "body": "https://github.com/phalcon/zephir/issues/841", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/754", "title": "Added test for #753 - levenshtein - WORK!", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/717", "title": "[WIP] Support for traits - DONT MERGE!!", "body": "Start working on this\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25767705", "body": "Fix Fatal error: Call to undefined method Variable::getDynamicType() in /home/travis/build/phalcon/zephir/Library/Statements/LetStatement.php on line 1209!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25767705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/4261662", "body": "i think Undefined variable $dynamicType because u delete init row\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4261662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/4937257", "body": "What is this? Your should use rebase not merge from branch\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4937257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179136", "body": "fail....\n1 TSRMLS_DC you add macros to function but doesnt add to optimizer when you call it\n2 why return code back it is not more faster. why?\n3 every week the master branch don`t work\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179141", "body": "i see this in core but function array_values below this is not\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179154", "body": "if you dont love pull request you need to\nyou can fork this repo and before push to master _phalcon/zephir_ push to you repo user/zephir and activate travic ci for it and see result if it success push to master.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179219", "body": "http://gyazo.com/3795821861b43325bf03029e6419062e  okey :D\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5182177", "body": "@phalcon Don`t merge from remote origin master branch to local (not master) branch. plz read about rebase\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5182177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5212175", "body": "my miss :cry: and so big title about my fail :D\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5212175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5235572", "body": "how many exp you need to understand that push to master is wrong way before run tests?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5235572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5252395", "body": "You forgot checkout phalcon master account in git\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5252395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5270060", "body": "You forgot checkout phalcon master account in git\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5270060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5335982", "body": "after break case PSR disallow to enter new line broker\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5335982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361402", "body": "Now we use tabs or spaces?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361423", "body": "Now we use spaces or tabs?\nYou say that you prefer tabs but in ide it show likes spaces? If it tabs i create new standart zephir extends of PSR2 but set tabs i think it would be good idea.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361455", "body": "okey np now i use 4 spaces\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361490", "body": "and please  `Blank lines are not allowed between case statements; found 1` in cases\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701593", "body": "i doesn`t think so i use this class only in stub method not all for class\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701784", "body": "php is not c\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9702444", "body": "w8 @phalcon comment\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9702444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970896", "body": "There is no difference, copy pasted from micro bench.php in Zend folder of php-src\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970916", "body": "1 no matter\n2 not needed.\n3 algorithm without loop would be faster!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11551936", "body": "@nkt this is not a bug. I wrote it specifically\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11551936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12473977", "body": "\u0442\u043e\u0433\u0434\u0430 \u0441\u0432\u0438\u0442\u0447 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0439\u0434\u0435\u0442 \u0438 \u043f\u043e\u0439\u0434\u0435\u0442 \u0434\u0430\u043b\u044c\u0448\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12473977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12501411", "body": "np\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12501411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13077347", "body": "You said \"delete stubs it is not needed in repo\" :)))\n\n``` zep\n    /**\n     * Bla bla my method\n     */\n     public function method() {}\n```\n\nand see output without patch\n\n``` zep\n/**\n  * * Bla bla my method\n */\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13077347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "flip111": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1177", "title": "Easy access to Zephir function name in AbstractOptimizer", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fezfez": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1104", "title": "[WIP] First implementation of zept", "body": "Please dont merge now\n- [X] Implement first test case\n- [ ] Convert .phpt test from php-src into .zept\n- [ ] Unit test on zephir-testcase\n- [ ] Give zephir-testcase to Zephir organisation ?\n\nComments are welcome !\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KorsaR-ZN": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/1103", "title": "[WIP] Added support syntax assign-bitwise operators", "body": "**New syntax**, see #1056 \n\n``` zephir\nlet a &= b;\nlet a |= b;\nlet a ^= b;\nlet a <<= b;\nlet a >>= b;\n```\n\n**Progress list**\n- [x] Add parsing new syntax\n- [x] Add compiling new syntax only `assign-type: variable`\n- [ ] Add compiling new syntax other `assign-type`\n- [x] Add tests only `assign-type: variable`\n- [ ] Add tests other `assign-type`\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/1100", "title": "[WIP] Added new feature support variable-length argument in functions", "body": "**New syntax**, see #938 \n\n``` zephir\npublic function test1(int a, int b, ...args) \n{\n    // expr\n}\n\npublic function test2(int a, int b, int ...args) \n{\n    // expr\n}\n\npublic function test3(int a, int b, int! ...args) \n{\n    // expr\n}\n\npublic function test4(int a, int b, <\\StdClass> ...args) \n{\n    // expr\n}\n```\n\n**Progress list**\n- [x] Add parsing new syntax\n- [ ] Add compiling new syntax\n- [ ] Add tests\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phalcon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22202970", "body": "Thank you\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22202970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/23342452", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/23342452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25184647", "body": "Just make a new commit on your fork, Github will automatically pick up it to this PR\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25184647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25216053", "body": "thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25216053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25456277", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25456277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25543902", "body": "Regarding __call and __callStatic, to avoid that Zephir validates the existence of a method the syntax is:\n\n``` php\n$x->{\"hello\"}();\nSomeClass::{\"hello\"}();\n```\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25543902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544074", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544877", "body": "It would not check the existence of __call, because the method call be called via call or the method can be implemented in an extended class, so that syntax must be used if you want to tell Zephir that it must not check the existence of a method, but it must generate the call in the c-code.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25774138", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25774138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25946245", "body": "thanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25946245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988397", "body": "I can't still understand this proposed structure, Phalcon 2.0 is not compiling due to this, what are the advantages of this structure? \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989694", "body": "I'm restoring the old behavior\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/4613788", "body": "We're following PSR1/PSR2 as coding standard: http://www.php-fig.org/psr/psr-2/\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4613788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179139", "body": "This code is based on the original implementation: http://lxr.php.net/xref/PHP_5_4/ext/standard/array.c#2442\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179160", "body": "I don't think so\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179223", "body": "I'll fix it man, don't worry ;) \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5179223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361420", "body": "Spaces\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361435", "body": "```\nCode MUST use 4 spaces for indenting, not tabs.\n```\n\nhttp://www.php-fig.org/psr/psr-2/\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5361435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/comments/5566797", "body": "Could you please post some code to check?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5566797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9714015", "body": "Please move it to the top of the file, also we should use an autoloader now that we have namespaces.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9714015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "niden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22277957", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/22277957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25884838", "body": "Thank you!!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25884838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25153007", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25153007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25514914", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25514914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25869296", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25869296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25952792", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25952792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andresgutierrez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25387595", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25387595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ilyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544106", "body": "but if you will use  $x->{\"hello\"}(); would Zephir check existance of method \"__call\"?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25544106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "racklin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25870119", "body": "@sjinks You are welcome.\nHere is another PR for `zephir help`, i Added ASCII Art Logo like 'Composer' for Zephir. #16 :)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25870119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25901278", "body": "@mobli Just like npm / composer do, NOT everybody happy to install it to /usr/local/bin.\n\nSo with origin zephir shell script it will auto detect ZEPHIRDIR enviroment is set? \nIf set , using user's ZEPHIRDIR (Like yours).\nIf not set, using the current shell script's parent path.\n\nIt's behavior like yours, but more flexible. right?\n\nAnd you are welcome.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25901278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25987941", "body": "@mobli @phalcon  `zephir init <namespace>` will create subdir from current directory with namespace name and put the `ext` and `config.json` to subdir , that was wrong structure.\n\nAnd, `zephir init` with default namespace, that don't create <namespace> subdir.\n\nso, with this pr, zephir init will not initial workable project structure . \n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25987941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988752", "body": "@phalcon Original structure is good. Like `Composer`.\nUser create there own project directory, and `init` only create `config.json` , `ext` and `[namespace]` subdir.\n\nBut now, `zephir init [namespace]` has difference behaviors, one will create nest subdir, and the another not ..\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25988752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989469", "body": "@phalcon And https://github.com/mobli/zephir/commit/1b3b620787aa81a9abf7bbd0e0719e9595a7e08b#diff-803edc27a0dcbb56c0d1a6ac3128a3a4L79 \n\nThe original code using ZEPHIRDIR ENV for running `zephir-parser`, but with this patch, the \n`zephir-parser` must in running search $PATH or `/usr/local/bin` . Original is better.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25989469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mobli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25900664", "body": "Hi there,\n\nThanks for the feedback and questions.\n\nWhat the ./install script is doing with my mod is to simply install zephir in /usr/local/bin, which should be in your path. the /usr/local/bin/zephir script knows where to find zephir, no need for environment variables.\nTherefore, you can just type commands as such:\n\ncd /where/ever\nzephir init myext\ncd /where/ever/myext\n<write code here>\nzephir generate\nzephir compile\nzephir install\n\nWith all your code in /where/ever/myext, the extension will be built into /where/ever/myext/ext.\nGood idea using basename(getcwd()) as default namespace.\n\nDecoupling zephir itself from the extension you're building is much easier - try building a new extension as it stands, it's hard :-)\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25900664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25902137", "body": "It doesn't really matter to me how it's done, as long as I can decouple zephir from the work I'm doing now.\nSo for instance, I might install zephir in /opt but work in ~/projects. I don't want to have to change my .profile file every time I add a new tool, which is what I need to do to make ZEPHIRDIR sticky.\nI can the mods as you requested so as not to install zephir in /usr/local/bin because I really need that pull request to go through, but I'd prefer if you could reconsider your position on that. Please let me know ;-)\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25902137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25922809", "body": "@racklin I've restored the install process as you requested. I've simply added an option on the install script that will copy zephir to /usr/local/bin for those who want (like me :-).\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25922809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25957873", "body": "Thanks! That was really quick, fantastic!\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/issues/comments/25957873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/4582149", "body": "Hi, what are the coding standards?\nFor instance, do you prefer `tab` or `space`? If `tab`, what is its width?\nI see that you prefer the `{` to be at the end of the `if` line, not on the next line, noted.\nIs there something else that is important to you?\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/4582149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "damienalexandre": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/comments/5465976", "body": "I think this change is breaking calls to `parent::methodName();`, the \"non-static method\" exception is thrown even for parent and self method types.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/comments/5465976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nkt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701340", "body": "it's not right, you should move it to start of file\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701719", "body": "Ok. If you in c use library just in one function do you include its inside this function?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701948", "body": "this is not a reason for writing code smells\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9701948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865028", "body": "use assertFalse\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865063", "body": "use assertFalse\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865226", "body": "use assertInternalType($expected, $actual[, $message = ''])\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9865226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970880", "body": "wtf?\nMay be you should create class?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970882", "body": "Why not microtime(true)?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970909", "body": "You write benchmark. There is important speed of benchmark itself. I think you should replace `getmicrotime` by `microtime(true)`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9970909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9972112", "body": "Why not an interface?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9972112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9978436", "body": "Please remove first slash\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/9978436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/10030817", "body": "typo\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/10030817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11546160", "body": "Please remove repeated `array`\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/11546160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12499174", "body": "Please replace it by variable and add unit-test.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12499174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12470131", "body": "Maybe change it to `break`?\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12470131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12477733", "body": "So, please, add comment about that.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12477733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509870", "body": "That is conflict\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509872", "body": "Conflict again\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/12509872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13076348", "body": "Can you add test on this.\nI can not understand what for you adds this replacing:(\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/13076348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851715", "body": "Please remove comparison.\n", "reactions": {"url": "https://api.github.com/repos/phalcon/zephir/pulls/comments/14851715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}