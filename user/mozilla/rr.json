{"_default": {"1": {"emilio": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2160", "title": "After a (not so long) debugging sesssion, rc stops working, and it's impossible to recover", "body": "In particular, `rc` hangs, and pressing ctrl + C only results in `Invalid remote reply` messages.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2128", "title": "Bug hard to hunt down under rr even with --chaos", "body": "I remember @rocallahan was interested on this kind of thing, so I'm opening an issue.\r\n\r\nSee: https://github.com/servo/ipc-channel/pull/179\r\n\r\nWhen I run the test on my machine, like:\r\n\r\n```\r\n$ true; while [ $? -eq 0 ];do RUST_BACKTRACE=1 ./target/release/deps/ipc_channel-6611382eff9c2dbb stress ; done\r\n```\r\n\r\nI manage to get something like:\r\n\r\n<details>\r\n\r\n```\r\nfailures:\r\n\r\n---- test::stress_in_process stdout ----\r\n\tthread 'test::stress_in_process' panicked at 'recv: Io(Error { repr: Os { code: 104, message: \"Connection reset by peer\" } })', /checkout/src/libcore/result.rs:906:4\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\r\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::_print\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:69\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:58\r\n             at /checkout/src/libstd/panicking.rs:381\r\n   3: std::panicking::default_hook\r\n             at /checkout/src/libstd/panicking.rs:391\r\n   4: std::panicking::rust_panic_with_hook\r\n             at /checkout/src/libstd/panicking.rs:577\r\n   5: std::panicking::begin_panic\r\n             at /checkout/src/libstd/panicking.rs:538\r\n   6: std::panicking::begin_panic_fmt\r\n             at /checkout/src/libstd/panicking.rs:522\r\n   7: rust_begin_unwind\r\n             at /checkout/src/libstd/panicking.rs:498\r\n   8: core::panicking::panic_fmt\r\n             at /checkout/src/libcore/panicking.rs:71\r\n   9: core::result::unwrap_failed\r\n  10: ipc_channel::test::stress_in_process\r\n  11: _ZN42_$LT$F$u20$as$u20$test..FnBox$LT$T$GT$$GT$8call_box17hee77675d0689c9f5E.llvm.313E8C1E\r\n             at /checkout/src/libtest/lib.rs:1480\r\n             at /checkout/src/libcore/ops/function.rs:223\r\n             at /checkout/src/libtest/lib.rs:141\r\n  12: __rust_maybe_catch_panic\r\n             at /checkout/src/libpanic_unwind/lib.rs:99\r\n\r\n\r\nfailures:\r\n    test::stress_in_process\r\n\r\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out\r\n```\r\n\r\n</details>\r\n\r\nAfter 20 / 60 iterations consistently.\r\n\r\nSo the next logical step was to try hunting it with rr, using:\r\n\r\n```\r\n$ true; while [ $? -eq 0 ];do RUST_BACKTRACE=1 rr record --chaos ./target/debug/deps/ipc_channel-0a671e7e49351578 stress && rm -rf ~/.local/share/rr/ipc_channel-*; done\r\n```\r\n\r\nSo far I haven't succeeded yet (it's been 90 iterations already, which take more than a minute when recording, both on debug and release).\r\n\r\nJust filing to see if it rings a bell or you find it interesting, it's mostly a bunch of `socketpair` / `sendmsg` / `recvmsg` syscalls.\r\n\r\nI'm running rr as of 244151f05a0a0c9315675c6278580a98cb97db69.\r\n\r\nAlso, something I've noticed about this test-case is that recording it under rr is much slower than not doing it even in release, but that's kinda expected given it's very syscall-intensive.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jld": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2159", "title": "20x slowdown recording Firefox `SandboxBrokerTest.MultiThread*` unit tests", "body": "The Firefox GTests `SandboxBrokerTest.MultiThreadOpen` and `SandboxBrokerTest.MultiThreadStat` run 20x slower than native (constrained to one core) when being recorded with rr 5.1.0.\r\n\r\nThese are unit tests of the Linux sandbox file broker; seccomp-bpf is not involved.  They construct a broker instance and send it a lot of requests from several threads at once in a tight loop, within the same process.  (And they're the least unreliable reproducer we have for a [mysterious intermittent bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1243108).)  For each request, a `socketpair` is created and one end is sent to the broker with `SCM_RIGHTS` to carry the response.\r\n\r\nI'm not surprised that rr has to do nontrivial work for this, and it's probably not something a normal application would do on the critical path, but this is a lot of slowdown.\r\n\r\nFor reference, the command I've been running is `MOZ_RUN_GTEST=True GTEST_FILTER=SandboxBrokerTest.MultiThread\\* rr record obj-x86_64-pc-linux-gnu/dist/bin/firefox -unittest`, and I'm using a non-debug build.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hotsphink": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2154", "title": "rr assertion during recording of firefox/mochitest run: !is_in_untraced_syscall() || 0 == (SYSCALLBUF_LOCKED_TRACEE & read_mem(REMOTE_PTR_FIELD(syscallbuf_child, locked)))", "body": "Using rr ed91e251d4840f54add6a2cb4f2b784171301bdc (rr version 5.0.0).\r\n\r\n[FATAL /home/sfink/src/rr/src/Task.cc:2012:reset_syscallbuf()] \r\n (task 27107 (rec:27107) at time 6815702)\r\n -> Assertion `!is_in_untraced_syscall() || 0 == (SYSCALLBUF_LOCKED_TRACEE & read_mem(REMOTE_PTR_FIELD(syscallbuf_child, locked)))' failed to hold. \r\n=== Start rr backtrace:\r\nrr(_ZN2rr13dump_rr_stackEv+0x28)[0x544118]\r\nrr(_ZN2rr9GdbServer15emergency_debugEPNS_4TaskE+0x615)[0x4892f5]\r\nrr(_ZN2rr21EmergencyDebugOstreamD2Ev+0xe1)[0x4952f1]\r\nrr(_ZN2rr4Task16reset_syscallbufEv+0x82)[0x529e02]\r\nrr(_ZN2rr10RecordTask22maybe_reset_syscallbufEv+0x6c)[0x4e92bc]\r\nrr(_ZN2rr10RecordTask12record_eventERKNS_5EventENS0_15FlushSyscallbufEPKNS_9RegistersE+0x14e)[0x4e8b4e]\r\nrr[0x4b1193]\r\nrr(_ZN2rr13RecordSession11record_stepEv+0x184)[0x4b4ee4]\r\nrr(_ZN2rr13RecordCommand3runERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE+0xbae)[0x4aca9e]\r\nrr(main+0x1e8)[0x54c49a]\r\n/lib64/libc.so.6(__libc_start_main+0xf1)[0x7f07ff8db431]\r\nrr(_start+0x2a)[0x43f35a]\r\n=== End rr backtrace\r\nLaunch gdb with\r\n  gdb '-l' '10000' '-ex' 'set sysroot /' '-ex' 'target extended-remote 127.0.0.1:27107' /home/sfink/src/mozilla2/obj-x86_64-pc-linux-gnu/dist/bin/xpcshell\r\n\r\ntail of rr dump -t 27107 is:\r\n\r\n{\r\n  real_time:32321.485824 global_time:6815657, event:`SYSCALLBUF_ABORT_COMMIT' tid:27107, ticks:175252\r\n}\r\n{\r\n  real_time:32321.485880 global_time:6815658, event:`SYSCALL: rrcall_notify_syscall_hook_exit' (state:ENTERING_SYSCALL) tid:27107, ticks:175260\r\nrax:0xffffffffffffffda rbx:0x7fc03f758fa0 rcx:0xffffffffffffffff rdx:0xffffffff rsi:0x2 rdi:0xd0e62518ad0 rbp:0x1 rsp:0x7fc03f758e20 r8:0x0 r9:0x59f670d0 r10:0x0 r11:0x246 r12:0xd0e62518ad0 r13:0x7fc03f459306 r14:0xffffffff r15:0x10 rip:0x70000005 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0x1bc fs_base:0xd0e6251a700 gs_base:0x0\r\n}\r\n{\r\n  real_time:32321.485882 global_time:6815659, event:`SYSCALLBUF_RESET' tid:27107, ticks:175260\r\n}\r\n{\r\n  real_time:32321.485894 global_time:6815660, event:`SYSCALL: rrcall_notify_syscall_hook_exit' (state:EXITING_SYSCALL) tid:27107, ticks:175260\r\nrax:0x1 rbx:0x7fc03f758fa0 rcx:0xffffffffffffffff rdx:0xffffffff rsi:0x2 rdi:0xd0e62518ad0 rbp:0x1 rsp:0x7fc03f758e20 r8:0x0 r9:0x59f670d0 r10:0x0 r11:0x246 r12:0xd0e62518ad0 r13:0x7fc03f459306 r14:0xffffffff r15:0x10 rip:0x70000005 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0x7 fs_base:0xd0e6251a700 gs_base:0x0\r\n}\r\n{\r\n  real_time:32321.486054 global_time:6815661, event:`SYSCALLBUF_FLUSH' tid:27107, ticks:183241\r\n}\r\n{\r\n  real_time:32321.486056 global_time:6815662, event:`SYSCALL: poll' (state:ENTERING_SYSCALL) tid:27107, ticks:183241\r\nrax:0xffffffffffffffda rbx:0x7fc03f4592e6 rcx:0xffffffffffffffff rdx:0xffffffffffffffff rsi:0x2 rdi:0x7fc03f4592f6 rbp:0x7fc03f4592f6 rsp:0x7fc03f758e00 r8:0x0 r9:0x0 r10:0x0 r11:0x246 r12:0xd0e62518ad0 r13:0x7fc03f459306 r14:0xffffffff r15:0x10 rip:0x7000000e eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0x7 fs_base:0xd0e6251a700 gs_base:0x0\r\n}\r\n{\r\n  real_time:32321.486260 global_time:6815670, event:`SYSCALL: poll' (state:EXITING_SYSCALL) tid:27107, ticks:183241\r\nrax:0x1 rbx:0x7fc03f4592e6 rcx:0xffffffffffffffff rdx:0xffffffffffffffff rsi:0x2 rdi:0x7fc03f4592f6 rbp:0x7fc03f4592f6 rsp:0x7fc03f758e00 r8:0x0 r9:0x0 r10:0x0 r11:0x246 r12:0xd0e62518ad0 r13:0x7fc03f459306 r14:0xffffffff r15:0x10 rip:0x7000000e eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0x7 fs_base:0xd0e6251a700 gs_base:0x0\r\n}\r\n{\r\n  real_time:32321.486261 global_time:6815671, event:`SYSCALLBUF_ABORT_COMMIT' tid:27107, ticks:183241\r\n}\r\n{\r\n  real_time:32321.487074 global_time:6815701, event:`SCHED' tid:27107, ticks:183246\r\nrax:0x0 rbx:0x7fc03f459000 rcx:0xffffffffffffffff rdx:0x0 rsi:0x2401 rdi:0x67 rbp:0x7fc03f4592e6 rsp:0x7fc03f758e00 r8:0x0 r9:0x0 r10:0x0 r11:0x246 r12:0x1 r13:0x7fc03f459306 r14:0xffffffff r15:0x10 rip:0x70000017 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0x10 fs_base:0xd0e6251a700 gs_base:0x0\r\n}\r\n\r\nBacktrace of that process:\r\n\r\n(gdb) bt\r\nbt\r\n#0  0x0000000070000017 in  ()\r\n#1  0x0000013e561a2222 in _raw_syscall () at /home/sfink/src/rr/src/preload/raw_syscall.S:120\r\n#2  0x0000013e5619ee33 in disarm_desched_event () at /home/sfink/src/rr/src/preload/syscallbuf.c:729\r\n#3  0x0000013e5619ee33 in commit_raw_syscall (syscallno=syscallno@entry=7, record_end=record_end@entry=0x7fc03f459306, ret=1) at /home/sfink/src/rr/src/preload/syscallbuf.c:894\r\n#4  0x0000013e561a0dc7 in sys_poll (call=0x7fc03f758fa0)\r\n    at /home/sfink/src/rr/src/preload/syscallbuf.c:1698\r\n#5  0x0000013e561a0dc7 in syscall_hook_internal (call=0x7fc03f758fa0)\r\n    at /home/sfink/src/rr/src/preload/syscallbuf.c:2489\r\n#6  0x0000013e561a0dc7 in syscall_hook (call=0x7fc03f758fa0)\r\n    at /home/sfink/src/rr/src/preload/syscallbuf.c:2576\r\n#7  0x0000013e5619eaca in _syscall_hook_trampoline ()\r\n    at /home/sfink/src/rr/src/preload/syscall_hook.S:282\r\n#8  0x0000013e5619eafa in __morestack () at /home/sfink/src/rr/src/preload/syscall_hook.S:417\r\n#9  0x0000013e5619eb2a in _syscall_hook_trampoline_48_8b_3c_24 ()\r\n    at /home/sfink/src/rr/src/preload/syscall_hook.S:433\r\n#10 0x000018055f96ff41 in poll () at ../sysdeps/unix/syscall-template.S:84\r\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2066", "title": "Unable to break while running backwards: Assertion `req.is_resume_request() || req.type == DREQ_INTERRUPT'", "body": "Usually if I try to interrupt gdb, rr crashes. Just now I was doing a reverse-continue with a watchpoint set, it was taking a very long time, so I hit ctrl-C:\r\n\r\n(rr) rc\r\nContinuing.  C-c C-c\r\nrr: /home/sfink/src/rr/src/GdbConnection.cc:1346: void rr::GdbConnection::notify_stop(rr::GdbThreadId, int, uintptr_t): Assertion `req.is_resume_request() || req.type == DREQ_INTERRUPT' failed.\r\nRemote communication error.  Target disconnected.: Connection reset by peer.\r\n\r\nI normally avoid breaking during an rr replay to avoid this, but it would be nice if it could work.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaasedelen": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2143", "title": "RR can get stuck in an infinite loop during reverse-step", "body": "Filing this so it doesn't get lost/forgotten. I haven't had a chance to investigate this.\r\n\r\n## Overview\r\n\r\nThere appears to be a bug where rr can get stuck in an infinite loop while attempting to complete a `reverse-step` request. Based on the repro steps, the bug may stem from the use of hardware breakpoints while stepping around or over syscalls. \r\n\r\nDemo of the issue: https://asciinema.org/a/1pu9AI7IQHYUn4TcWIbpP36A4\r\n\r\n## Stack Trace\r\n\r\nI attached to the stuck proc and dumped its stack trace. Seems stuck in a loop.\r\n\r\n```\r\n(gdb) bt\r\n#0  0x00007fa2e03c3dee in ptrace (request=32) at ../sysdeps/unix/sysv/linux/ptrace.c:45\r\n#1  0x0000000000522728 in rr::Task::fallible_ptrace (this=0xee6340, request=32, addr=..., data=0x0) at ../src/Task.cc:1922\r\n#2  rr::Task::ptrace_if_alive (this=0xee6340, request=32, addr=..., data=0x0) at ../src/Task.cc:2259\r\n#3  0x000000000051edcc in rr::Task::resume_execution (this=0xee6340, how=rr::RESUME_SYSEMU_SINGLESTEP, wait_how=<optimized out>, tick_period=rr::RESUME_UNLIMITED_TICKS, sig=0) at ../src/Task.cc:1049\r\n#4  0x000000000045e243 in rr::fast_forward_through_instruction (t=0xee6340, how=rr::RESUME_SYSEMU_SINGLESTEP, states=std::vector of length 1, capacity 1 = {...}) at ../src/fast_forward.cc:164\r\n#5  0x00000000004e871b in rr::ReplaySession::cont_syscall_boundary (this=0xea9ae0, t=0xee6340, constraints=...) at ../src/ReplaySession.cc:357\r\n#6  0x00000000004e8e20 in rr::ReplaySession::enter_syscall (this=0xea9ae0, t=0xee6340, constraints=...) at ../src/ReplaySession.cc:456\r\n#7  0x00000000004ed9c9 in rr::ReplaySession::replay_step (this=0xea9ae0, constraints=...) at ../src/ReplaySession.cc:1477\r\n#8  0x0000000000508789 in rr::ReplayTimeline::reverse_singlestep(rr::ReplayTimeline::Mark const&, rr::TaskishUid<rr::Task> const&, long, std::function<bool (rr::ReplayTask*)> const&, std::function<bool ()> const&) (\r\n    this=<optimized out>, origin=..., step_tuid=..., step_ticks=<optimized out>, stop_filter=..., interrupt_check=...) at ../src/ReplayTimeline.cc:1190\r\n#9  0x000000000050aeac in rr::ReplayTimeline::reverse_singlestep(rr::TaskishUid<rr::Task> const&, long, std::function<bool (rr::ReplayTask*)> const&, std::function<bool ()> const&) (this=0x7fff1d085eb8, tuid=..., tuid_ticks=31,\r\n    stop_filter=..., interrupt_check=...) at ../src/ReplayTimeline.cc:1366\r\n#10 0x000000000047ae43 in rr::GdbServer::debug_one_step (this=<optimized out>, last_resume_request=...) at ../src/GdbServer.cc:1205\r\n#11 0x000000000047c66b in rr::GdbServer::serve_replay (this=<optimized out>, flags=...) at ../src/GdbServer.cc:1537\r\n#12 0x00000000004e5af2 in rr::replay (trace_dir=..., flags=...) at ../src/ReplayCommand.cc:452\r\n#13 rr::ReplayCommand::run (this=<optimized out>, args=...) at ../src/ReplayCommand.cc:567\r\n#14 0x000000000054779e in main (argc=3, argv=0x7fff1d086798) at ../src/main.cc:237\r\n```\r\n\r\n## Reproduction steps\r\n\r\nDownload the [trace.zip](https://github.com/mozilla/rr/files/1502730/trace.zip) of the `simple_32` unit test and load it via `rr replay`. The following GDB commands will trigger the issue. \r\n\r\n```\r\nhbreak * 0x70000003 \r\nc\r\nstepi\r\nreverse-stepi\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BusyJay": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2141", "title": "sched_getcpu doesn't keep consistent with sysconf(_SC_NPROCESSORS_ONLN)", "body": "When calling `sysconf(_SC_NPROCESSORS_ONLN)`, the returned value is always 1. However when call `sched_getcpu`, the actual cpu number is returned, which may be larger than 1. It may lead to unexpected index out of range access in some program.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pm215": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2132", "title": "^C in gdb ignored when doing reverse-execution of a replay with conditional-bp", "body": "I was trying to debug a replay, and I set up a conditional bp and did a reverse-continue. It took longer than I was expecting, so I tried to ^C to interrupt and get back to a debug prompt. rr ignored the ^C and I had to resort to killing the whole debug session and restarting it.\r\n```\r\n(rr) cond 9 (itb->pc - 0xffffadea4000) == 9e6924\r\n(rr) rc\r\nContinuing.\r\n^C\r\n^CInterrupted while waiting for the program.\r\nGive up waiting? (y or n) n\r\n^C^CInterrupted while waiting for the program.\r\nGive up waiting? (y or n) y\r\nQuit\r\n```\r\n\r\nThe bp condition was of a form that meant it couldn't be executed on the rr end ('info bp' said \"host evals\"), so slowness is perhaps expected, but the user should always be able to regain control with ^C.\r\n\r\n(This is with rr commit b8821907e0ed.)\r\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theres-waldo": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2131", "title": "reverse-continue to a checkpoint", "body": "I often want to use the following workflow:\r\n\r\n  1. Mark where I currently am\r\n  1. Go forward a bit\r\n  1. Go back to the place I marked\r\n\r\nI can do the first with `when`, which gives me an event number that marks my position, but the only way I know to do the third is with `run <event-number>`, which restarts the replay from the beginning.\r\n\r\nI'd like to be able to reverse-continue to the marked event instead. Depending on how long the replay is and how far I've gone forward from the marked place, that can be significantly faster than starting from the beginning.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khuey": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2130", "title": "Certain ptrace-like permissions checks may fail due to our emulated ptrace setup.", "body": "The kernel uses the ptrace permissions model for checks of other things, such as parts of the proc filesystem and syscalls like `process_vm_writev`.  On systems with yama enabled at `ptrace_scope=1`, processes are usually restricted to ptracing their descendants. Yama does make an exception to that rule for processes that are *already* ptracing a process, allowing ptracing to continue even in the case of a ptraced grandchild where the child exits and the grandparent is reparented to init. Under rr though, the process that thinks it's ptracing is never the real ptracer as seen by the kernel, because  rr is. In any case where an operation was relying on that \"already ptracing\" exception to succeed it will fail under rr.\r\n\r\nI think we could work around this by injecting a `prctl(PR_SET_TRACER)` into the traced process. The other exception to the yama rules is for processes designated via this mechanism, and there's nothing that requires it to be the same as the actual ptracer. The main question is *when* to inject that syscall. I tried adding code to do it from `set_emulated_ptracer` but that blew up pretty quickly (among other problems, after a PTRACE_DETACH the tracee is not stopped there!).", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mozilla/rr/commits/756f0c1f13e692f4d3152d850f81aacf9a31aa08", "message": "Use EBX instead of ECX to get the XSAVE area as determined by the set of features enabled in XCR0, rather than the theoretical maximum.\n\nFixes #2157."}, {"url": "https://api.github.com/repos/mozilla/rr/commits/9d9a5e947516227aa0c36f237e2c542f6d726ef4", "message": "Restore memset that was removed in 5a9324ed because there are still registers (like fsbase) that are in the 64 bit struct but not the 32 bit struct."}, {"url": "https://api.github.com/repos/mozilla/rr/commits/e6717d6ce6974492ec7b2272131db1243e0e4b5e", "message": "Fix handling at exec boundary."}, {"url": "https://api.github.com/repos/mozilla/rr/commits/c0e518175ac47482b0af295b23146bb4760b3e82", "message": "When skipping through the replay to a specified starting event, skip a bunch of the singlestep handling logic.\n\nold_task might have died here, so it's not safe to access it."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rocallahan": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2129", "title": "Add unmap events to trace?", "body": "Traces contain explicit records for all mappings, but currently tools that want to extract unmap events from the trace have to study rr's inner workings to determine exactly what is unmapped and when. For example in `Task::clone` we unmap some tasks' syscall buffers and scratch buffers after a fork, and these decisions are not recorded in the trace. It would be much cleaner for tools other than rr itself if we recorded these unmap events in the trace.\r\n\r\nHowever, it would be good if the ecosystem around rr traces can consume any trace in the rr 5.0+ format. So maybe we should just document the unmap rules carefully instead, and if we ever change them, enhance the trace to record unmaps and add a flag to say to use those recorded events instead of the default rules. This approach is more complex for consumers though.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2127", "title": "Investigate mmap behavior with changing file lengths", "body": "Right now we assume that the size of an mmapped file never changes (except possibly accompanies by an `mremap`). However I think it's possible to mmap a file and then use ftruncate to change its length. This would require special handling in rr.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2120", "title": "multiple tracee seccomp filters won't be treated with the right priorities", "body": "We turn all tracee resutls into `SECCOMP_RET_TRACE`. For multiple filters, the kernel chooses the first filter result whose action is the lowest action number, which means that among the tracee filters it will always choose the first filter's result. So if the first tracee filter was supposed to return `SECCOMP_RET_ERRNO` and the second tracee filter was supposed to return `SECCOMP_RET_TRAP`, we'll actually emulate the former instead of the latter.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2108", "title": "`exec_from_other_thread` test is failing intermittently", "body": "Undoubtedly a recent regression.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2100", "title": "`SECCOMP_RET_KILL` under rr reports the terminating signal as `SIGKILL` instead of `SIGSYS`", "body": "This is tricky to fix because `SIGSYS` can be blocked or handled, unlike `SIGKILL`, so we can't just send `SIGSYS` instead of `SIGKILL`. We can try unblocking `SIGSYS` and setting its handler to default, and then sending it or stashing it, but that could behave oddly when `SECCOMP_RET_KILL` is used for a buffered syscall.\r\n\r\nWe could try to send `SIGKILL` and then try to lie about the `waitpid` status using `RecordTask::emulated_stop_code`. That is perhaps the best approach.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2099", "title": "Fix `clone_share_vm` test", "body": "This test is trickier than I thought.\r\n\r\nThe problem is the handling of `cloned_file_data_fd_child` when we restore captured state in `Task::copy_state`. For correct replay, that fd *must* refer to the opened cloned-data file for this task. But consider the case where this task has been cloned from a group-leader task holding its address space, but during recording this task had a different file descriptor table to that group-leader task (e.g. because this task was cloned with `CLONE_VM` but not `CLONE_FILES`); this task's `cloned_file_data_fd_child` and the group-leader's `cloned_file_data_fd_child` could be equal. During replay this task and the group-leader task currently always share file-descriptor tables so we can't have that same file descriptor value assigned to the two different files.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2095", "title": "Recording fails when you bombard the tracee with SIGCONT", "body": "If you apply this patch:\r\n````\r\ndiff --git a/src/test/thread_exit_signal.run b/src/test/thread_exit_signal.run\r\nindex f39c19ee6..d022b8b1f 100644\r\n--- a/src/test/thread_exit_signal.run\r\n+++ b/src/test/thread_exit_signal.run\r\n@@ -6,11 +6,13 @@ until grep -q ready record.out; do\r\n   sleep 0\r\n done\r\n \r\n+PID=$(pidof $TESTNAME-$nonce)\r\n for i in $(seq 1 100); do\r\n   sleep 0.001\r\n-  kill -CHLD $(pidof $TESTNAME-$nonce) >& /dev/null\r\n+  kill -CHLD $PID >& /dev/null\r\n+  kill -CONT $PID >& /dev/null\r\n done\r\n-kill -USR2 $(pidof $TESTNAME-$nonce) >& /dev/null\r\n+kill -USR2 $PID >& /dev/null\r\n \r\n # Wait for 'record' to actually terminate. Otherwise we might start\r\n # replaying before the trace file has been completely written.\r\n````\r\nyou get all sorts of failures. It appears that when a `PTRACE_SINGLESTEP` races with a `SIGCONT` the kernel reports `PTRACE_EVENT_STOP` with a `SIGTRAP` and those can be reported in all sorts of places. ", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2090", "title": "Support loading symbols for shared libraries from the trace", "body": "Currently gdb tries to load symbols for shared libraries by grabbing the file names from tracee memory and trying to read those files in the local filesystem. That won't work well when the local files have changed or are simply not there. In those cases gdb needs to read symbols from files in our trace.\r\n\r\nIn 6b272d5a27a73c071ed492db0e4a2ccfcb04536f we added support for `vFile` in the remote protocol, and gdb would normally use this to load files from the remote target, but we disabled that by forcing `set sysroot /`. If we remove that command then gdb will request files from rr, so in principle we could return the contents of files from our trace, but there are a couple of problems:\r\n* Shoveling large files through the remote protocol socket is slow. I don't think there's much we can do about this without modifying gdb.\r\n* The filenames in tracee memory (and thus supplied by gdb) often refer to symbolic links to the real files. The \"original file names\" in the rr trace are obtained from `/proc/.../maps`, which gives the real names. Thus, identifying the correct trace file for the name provided by gdb is difficult.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2034", "title": "Support AMD Ryzen?", "body": "Ryzen has a conditional branch counter. I have patches to use it here: https://github.com/mozilla/rr/tree/ryzen\r\n\r\nTo make it work reliably I had to increase the skid counter to 1000. That's pretty high, but OK. The patches make the skid size configurable per-architecture so we don't take that hit on Intel.\r\n\r\nWith these patches, most tests pass and the rest seem to be intermittent. In one run I get 10 failures out of 2068:\r\n````\r\n        327 - proc_fds (Failed)\r\n        388 - ptracer_death_multithread_peer-no-syscallbuf (Failed)\r\n        688 - condvar_stress-no-syscallbuf (Failed)\r\n        835 - thread_stress (Failed)\r\n        904 - checkpoint_prctl_name-no-syscallbuf (Failed)\r\n        1362 - proc_fds-32-no-syscallbuf (Failed)\r\n        1679 - async_signal_syscalls2-32 (Failed)\r\n        1722 - condvar_stress-32-no-syscallbuf (Failed)\r\n        1869 - thread_stress-32 (Failed)\r\n        1870 - thread_stress-32-no-syscallbuf (Failed)\r\n````\r\n\r\nIt appears that all these failures are due to intermittent overcounting. In most of them, during recording we seem to have overcounted a few conditional branches in the leadup to some syscall. In the rest, we seem to have overcounted during replay.\r\n\r\nOne interesting thing is that most of the syscalls where we detect the overcount are an `mprotect` (or a syscall following a syscall-buffered `mprotect`) that followed an `mmap`. There are two exceptions, one a `read` syscall and one a `write` syscall. I need to think about what this might mean.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2034/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mozilla/rr/commits/581ec5a6c7137eef1088fec49a942f370d5720b3", "message": "Warn about field offset that shouldn't change"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/1de6464ab2742691f5df9c8b9ff800e8b865feeb", "message": "Use case-insensitive check for debug build type"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/3d936461b2951b5072b7a150d953ea22e872cb54", "message": "Bump version to 5.1.0."}, {"url": "https://api.github.com/repos/mozilla/rr/commits/e3d558a9634acd3acf7c63f4ac5a8e25f44aaf4c", "message": "Avoid calling detect_syscall_arch in PTRACE_EVENT_EXIT"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/dfbf9713ba8581c95fb28471ce2540953285de2a", "message": "Make run_end test wait before responding to some prompts to fix hang"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/11bb87bbbfbdd05142aa5f152dea1fe6cc07eb4a", "message": "Record robust futex changes before we send SIGKILL in case the SIGKILL destroys the threadgroup without sending a proper PTRACE_EVENT_EXIT"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/a1b782d89cbad5365a988a1ff1e290c8bbfc051e", "message": "Make signal_numbers test more strict about waiting so we don't send 'y' confirmation early"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/e64c04da2f7c5ebb723392da04bcd2cebeb56366", "message": "SIOCGIFMAP takes an ifreq not an ifmap"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/ed91e251d4840f54add6a2cb4f2b784171301bdc", "message": "Flush RR_LOG_FILE on exit"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/68250e31d8ea1231e9ae315b8e1c855976f021ab", "message": "Handle cases where expected sigframe area is completely unmapped"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/a6ddc8c867d24bab08ccbe0a761fd175f12a177f", "message": "Make ThreadDb owned by GdbServer\n\nResolves #2136"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/a684eb1f8df131f9737e1196865d9bd9c785d8f6", "message": "Ensure that when we treat a file as assumed-immutable, we use the immutable path for the backing file"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/61a33aea15bafe7ee41b455bb9fb0dd8a0f3203b", "message": "Fix late start"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/33b87594f64f73f6c9b072ceb78fabf53e9ec97e", "message": "Clear first two parameter registers"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/b8f6da11904370d597acae364e6aa0c69a2d2113", "message": "Align stack for function call"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/5a9324edef78b3bd4e087bc10f3d7e6b431c8924", "message": "Support all registers in rerun register-dumping"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/742e462b37e269213f62c465ead6af0ae71df4a5", "message": "Reformat"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/c841d529ef6d14f1858462a8d9403ef8dcdd46b7", "message": "Support text-format register dumping and singlestepping through a diversion function"}, {"url": "https://api.github.com/repos/mozilla/rr/commits/747fbbd3ac1f6cb477d46cd0f9c2dccc5d42721d", "message": "Add 0x50650 Skylake model"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17578682", "body": "It's easy to collect counts of the number of syscalls by reading the rr trace files, especially for non-wrapped syscalls which are recorded in ASCII.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17578682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17755065", "body": "It worked for me a couple of months ago in Fedora 17.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17755065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17910261", "body": "I don't follow. After the exec the replayer should be replacing the contents of the environment with the recorded environment.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17910261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17911023", "body": "I see. Yes, we'll need to explicitly save and restore PATH, I think.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17911023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/1880821", "body": "It looks like this code runs on every single write() to any file descriptor? That's not right :-)\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/1880821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/1884716", "body": "On Fri, Sep 21, 2012 at 9:50 AM, nimrodpar notifications@github.com wrote:\n\n> Well, for some of the tests i added, i do want to see a print to a file in\n> the standard output, but i guess printing ALL output is an overkill, we'll\n> just redirect stdout and stderr intended calls for now.\n\nRight. I think we should print to stdout whatever the recorded program\nwrote to stdout, and print to stderr whatever the recorded program wrote to\nstderr, but nothing else.\n## Rob\n\n\u201cYou have heard that it was said, \u2018Love your neighbor and hate your enemy.\u2019\nBut I tell you, love your enemies and pray for those who persecute you,\nthat you may be children of your Father in heaven. ... If you love those\nwho love you, what reward will you get? Are not even the tax collectors\ndoing that? And if you greet only your own people, what are you doing more\nthan others?\" [Matthew 5:43-47]\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/1884716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/7294076", "body": "Hmm. Now that I try it again, this doesn't seem to be necessary. I'll back it out. Not sure what happened last night...\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7294076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/7415414", "body": "I don't know, but 0 is an invalid signal number so I don't think it matters.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7415414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/7542948", "body": "I ran the test suite and it seemed OK but I didn't really do any measurements. I guess the suite could slow down a lot in some cases, where more than one of the long-running 'checkpoint' tests get pinned to the same CPU.\n\nWe can back out the followup commit to restore test-suite behavior.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7542948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/7564953", "body": "I backed out the testsuite changes.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7564953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/9907801", "body": "If we allow the process to make itself undumpable, future attempts to call `perf_event_open` on the process will fail.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/9907801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/9907802", "body": "I'll add a comment mentioning that.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/9907802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17686579", "body": "Fixed by https://github.com/mozilla/rr/commit/435d9c9c331b8c856087214cdf17fbec68c78e05 hopefully\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17686579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17686939", "body": "Not worth investigating; there's no particular reason why it should take 25 steps. I'll bump it up to 50.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17686939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17976649", "body": "If `CLONE_VFORK` is set we replace it with `CLONE_VM`. I'm not sure what's unclear.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17976649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17976710", "body": "True, but we need to avoid the scheduling effects.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17976710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/11474642", "body": "Actually @skitt pointed out that mmap defines the offset to be multiples of 4096, not the page_size().\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/11474642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12723056", "body": "I don't think so, because this patch makes a Task not own its Session.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12723056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14431956", "body": "I think we should assert here that the value actually fits. But that can be a separate patch.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14431956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432065", "body": "I think this can just be size_t.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432111", "body": "Same here.\n\nWe aren't going to compile a 32-bit rr that works with 64-bit tracees, so whenever rr can just use the wider type, I think we should because it's a bit simpler. Same reason we've been using uinptr_t/intptr_t for register values.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432125", "body": "Can just use auto& I think.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432131", "body": "And auto& here.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432179", "body": "And auto here.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432238", "body": "More auto/size_t.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432335", "body": "size_t, auto\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432312", "body": "size_t\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432426", "body": "I think we should avoid mucking with these templated definitions by just moving record/restore_struct_(m)msghdr into record/replay_syscall.cc.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14432426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14488532", "body": "We should still sleep() because we want to write out some '.'s before sending the signal, and calling sleep() makes that much more likely.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14488532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14678835", "body": "I think this should template over the class rather than the enum value, for consistency with other templated code.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14678835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14678996", "body": "This is no longer needed, so you can remove this part of the comment as well as the redundant SYSCALL_UNDEFINED_X86_64()s.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14678996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681721", "body": "Actually I wonder if we could make the Arch classes inherit from `Syscalls<Arch>`. Then we could write just `Arch::readv` etc which looks nicer than `Syscalls<Arch>::readv`.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681967", "body": "OK I guess. Though I think we should reconsider this if it becomes a burden.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "WesleyYue": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2126", "title": "Get time since execution", "body": "I would like to be able to query the elapsed time (during the recording) when I am stopped at a breakpoint. Would this be a difficult feature to implement? Do you have any hints on how one might approach implementing this?", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "emk": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2123", "title": "Expected EINVAL for 'futex' but got result 1 (while debugging Rust's tokio)", "body": "Hello, I'm trying to use rr to debug a Rust application that uses the tokio async networking library. When I do this, I hit an unimplemented syscall:\r\n\r\n```\r\nDEBUG:tokio_core::reactor: loop poll - Duration { secs: 0, nanos: 2225926 }\r\nDEBUG:tokio_core::reactor: loop time - Instant { tv_sec: 2611, tv_nsec: 103246097 }\r\nTRACE:tokio_core::reactor: event Readable Token(0)\r\nDEBUG:tokio_core::reactor: consuming notification queue\r\nDEBUG:tokio_core::reactor: loop process - 1 events, Duration { secs: 0, nanos: 1760503 }\r\nDEBUG:tokio_core::reactor: loop poll - Duration { secs: 0, nanos: 2346041 }\r\nDEBUG:tokio_core::reactor: loop time - Instant { tv_sec: 2611, tv_nsec: 107812276 }\r\nDEBUG:tokio_core::reactor: loop process - 0 events, Duration { secs: 0, nanos: 892061 }\r\n[FATAL /home/rust/rr/rr/src/record_syscall.cc:4872:rec_process_syscall_arch()] \r\n (task 22765 (rec:22765) at time 458)\r\n -> Assertion `t->regs().syscall_result_signed() == -syscall_state.expect_errno' failed to hold. Expected EINVAL for 'futex' but got result 1 (errno errno(-1)); unknown futex(0x3)\r\n```\r\n\r\nI'd be willing to try and submit a PR. Do you have a guide for how to add new syscalls? Thank you for any pointers you can provide!", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "senjitsu": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2115", "title": "23% of tests fail on Ubuntu 16.04", "body": "Working on getting RR up and running and am seeing many test failures. I havent dug through all of them, but they all seem to generate the same / similar output. \r\n\r\nI am seeing 77% tests passing, but it took some additional work to even get that far from the normal install instructions. I had to get the perf tools setup and set the perf_event_paranoid flag to 1 from 3, prior to this.\r\n\r\nI am running Ubuntu 16.04 in VMware Workstation 14. \r\n\r\n```\r\nStart testing: Oct 23 06:58 PDT\r\n----------------------------------------------------------\r\n669/2141 Testing: block_clone_checkpoint-no-syscallbuf\r\n669/2141 Test: block_clone_checkpoint-no-syscallbuf\r\nCommand: \"/bin/bash\" \"/home/hive/rr/rr/src/test/block_clone_checkpoint.run\" \"block_clone_checkpoint\" \"-n\" \"/home/hive/rr/obj\" \"120\"\r\nDirectory: /home/hive/rr/obj\r\n\"block_clone_checkpoint-no-syscallbuf\" start time: Oct 23 06:58 PDT\r\nOutput:\r\n----------------------------------------------------------\r\nFAILED: sending \"b breakpoint\r\n\"\r\nexception: a float is required\r\nTest 'block_clone_checkpoint' FAILED: debug script failed\r\n--------------------------------------------------\r\ngdb_rr.log:\r\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n<http://www.gnu.org/software/gdb/documentation/>.\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from /tmp/rr-test-block_clone_checkpoint-LgmRWzRup/block_clone_checkpoint-LgmRWzRup-0/mmap_hardlink_3_block_clone_checkpoint-LgmRWzRup...done.\r\nReally redefine built-in command \"restart\"? (y or n) [answered Y; input not from terminal]\r\nRemote debugging using 127.0.0.1:8458\r\nReading symbols from /lib64/ld-linux-x86-64.so.2...Reading symbols from /usr/lib/debug//lib/x86_64-linux-gnu/ld-2.23.so...done.\r\ndone.\r\n0x00007fcdbc703c30 in _start () from /lib64/ld-linux-x86-64.so.2\r\n(rr) --------------------------------------------------\r\ndebug.err:\r\ncat: debug.err: No such file or directory\r\n```\r\n\r\nWhen I go to rerun the /tmp/ test binary, I am not getting anything interesting as far as I can tell, however, I have never used anything of these tools. \r\n\r\n```\r\nStarting program: /tmp/rr-test-block_clone_checkpoint-LgmRWzRup/block_clone_checkpoint-LgmRWzRup \r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\nEXIT-SUCCESS\r\n[Inferior 1 (process 23208) exited normally]\r\n```\r\nI am currently trying to run the test as a replay, but wanted to get the issue started up here incase I am just missing something in the setup.\r\n\r\nEDIT: After running the replay, it looks as if the test is not running at all, and is just exiting / returning from ld64. ", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikeconley": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2105", "title": "Support hopping between recorded processes", "body": "I debug multi-process Firefox with rr all of the time, and it's absolutely great.\r\n\r\nOne thing I wish I could do is choose and switch which process I was \"inside\" while debugging.\r\n\r\nFor example, suppose I'm debugging the content processes reaction to a particular IPC message. This IPC message is sent frequently, but there's a time when it's sent and the parent is in a particular state where I want to see what the content process does.\r\n\r\nIt'd be lovely if I could break when I realize I'm in that state in the parent process, and then switch over to the content process and see how it deals with the IPC message.\r\n\r\nCurrently, I do this with stdio logging, and it's noisy but it gets the job done. I'd prefer rr if I can get it!", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cirosantilli": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2089", "title": "Start reverse debugging immediately after record to run long running programs only once", "body": "My program takes a long time to reach a failure point which leads the process to exit.\r\n\r\nCurrently, I'm using:\r\n\r\n    rr record prog\r\n    rr replay\r\n\r\nwhich does the long execution twice up to the failure point.\r\n\r\nIs there a way to start reverse debugging from the point it exits immediately after the `rr record prog` so I don't have to wait twice?\r\n\r\nPossibly related to: https://github.com/mozilla/rr/issues/1989 At the limit this could be implemented by periodically snapshotting the running program.\r\n\r\nEDIT: or even better: start the program in a reverse-recorde enabled GDB shell like UndoDB does.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vadimcn": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2078", "title": "rr does not support LLDB as a client", "body": "I hoped I could use LLDB to connect to rr in server mode, but this was not to be... Looks like rr's emulation of gdbserver is not complete.   \r\n\r\nA couple of problems I found during initial investigation:\r\n- rr reports process id=0, which LLDB considers invalid.\r\n- rr uses ['multiprocess' thread id format](https://sourceware.org/gdb/onlinedocs/gdb/Packets.html#thread_002did-syntax) even though LLDB did not indicate 'multiprocess' extension support in qSupported request.\r\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkmoore": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2057", "title": "Support for \"catch syscall\" or other means of breaking on system call entry and exit", "body": "Right now attempting to catch a syscall during replay results in an error indicating that the feature is not supported.  This means that the best a user can do is break execution on the libc wrappers that exist for some system calls.  This workaround isn't sufficient for breaking on all system call entries and exits.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2057/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "froydnj": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2041", "title": "visiting https://rr-project.org/ gives errors about insecure connections", "body": "Firefox says:\r\n\r\n```\r\nrr-project.org uses an invalid security certificate.\r\n\r\nThe certificate is only valid for the following names: *.github.com, github.com, *.github.io, github.io\r\n\r\nError code: SSL_ERROR_BAD_CERT_DOMAIN\r\n```\r\n\r\nIt'd be nice if we could link to https://rr-project.org/", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/6893954", "body": "Aw, really?  I checked for C++11-ness there; I guess I didn't check hard enough for availability in appropriate GCC versions.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/6893954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681372", "body": "I think being explicit about exactly what syscalls are undefined is better than silently letting undefinedness \"leak through\" multiple syscall definitions.  I realize the numbering scheme \"leaks through\", but I think numbering is different than undefinedness.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681423", "body": "Ah, so specialize on `x86_arch` instead?  That will probably work better once more things get templated.  I'll do that.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14681423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14682331", "body": "Making `base_arch<supported_arch arch>` inherit from `Syscalls<arch>` is pretty straightforward.  I think trying to make `x86_arch` inherit from `Syscalls<x86_arch>` might run into circularity problems, unless you can specialize `Syscalls` on a class that isn't yet defined...\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/14682331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jrmuizel": {"issues": [{"url": "https://api.github.com/repos/mozilla/rr/issues/2037", "title": "Add support for time bisection", "body": "It might be useful to be able to specify a condition and have rr bisect the running of a program to the point when the condition transitions from true to false.", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/2025", "title": "Assertion failure during reverse continue", "body": "I hit: /home/jrmuizel/src/rr/src/ReplayTimeline.cc:1001: rr::ReplayResult rr::ReplayTimeline::reverse_continue(const std::function<bool(rr::ReplayTask*)>&, const std::function<bool()>&): Assertion `!at_mark(end)' failed.\r\n\r\nduring a reverse-finish operation using a build of f80d1d2115af8f7f6a524a9270b7df6f8207155a from Sun Jan 15 09:39:18 2017", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/2025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jun0": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mozilla/rr/commits/a6206f04892ced9434363832a2e12daf8a6edc8f", "message": "Fix cmake flag detection"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yuyichao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mozilla/rr/commits/77d94f5db970408e8c9009afc04b63f2b9952d3f", "message": "Fix AMD cpuid detection."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/16544547", "body": "Ooops, thanks. I opened the [doc](http://en.cppreference.com/w/cpp/types/make_unsigned) for exactly this but forgot to actually add it in the end...............\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/16544547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Manouchehri": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mozilla/rr/commits/d4c2f69fcbe2964d3e2f5f930418647d3b62ab02", "message": "Added Vagrant support."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dcci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mozilla/rr/commits/dd7f29a56061579146a43f8e6ec6cf23bc60149f", "message": "[ftrace] Make sure all paths to the exit of the functions return.\n\nThis removes an undefined behaviour and also suppresses a warning\non FreeBSD + clang."}, {"url": "https://api.github.com/repos/mozilla/rr/commits/a92bdb16bed165ee9f02b85c0bc810552eacac84", "message": "[test] Remove duplicated include of <sys/mount.h>\n\nFound by inspection."}, {"url": "https://api.github.com/repos/mozilla/rr/commits/56a04e814f4a6415100933adc63f0ddbeda696e2", "message": "[test-monitor] Include headers used explicitly.\n\nOn FreeBSD, this fails because the file uses std::string and\nerrno without including the correct header. On Linux, it happens\nto work because those headers are transitively included by some\nother header. Let's bee more explicit here."}, {"url": "https://api.github.com/repos/mozilla/rr/commits/1f306e26a74b1e91b57632525667786c6ca54b95", "message": "[kernel-abi] Don't use a reserved keyword.\n\n__unused is reserved by compilers somehow (even though it's an\nextension) so compiling this code with clang on FreeBSD results\nin an error, i.e.\n\n/home/davide/rr/src/kernel_abi.h:1046:27: error: expected member\nname or ';' after declaration specifiers\n    unsigned_long __unused[4];\n    ~~~~~~~~~~~~~         ^\n\nRename to avoid the clash."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bgamari": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/2101", "title": "[WIP] Compatibility with LLDB", "body": "This teaches rr to respect the client debuggers's advertised support of\r\nthe GDB multiprocess protocol. We parse the state of the client's\r\nmultiprocess support from its qSupported message and use this to\r\ndetermine whether we produce old-style thread IDs or the\r\nmultiprocess-style pPID.TID format.\r\n\r\nThis fixes #2078.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aaptel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/2014", "title": "add support for XFS quotactl(Q_XGETQSTAT...", "body": "fixes #2013 \r\n\r\nthanks to @khuey for the hints\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Keno": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/1954", "title": "In new CPU binding code, use cpuset.effective_cpus", "body": "`cpuset.cpus` is the user configurable maximum setting for the current cgroup,\r\n`cpuset.effective_cpus` is the actual CPUs that members of this cgroup can run\r\non (e.g. if the cpus are restricted by parents or siblings).\r\n\r\ncc @yuyichao ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/1754", "title": "Early WIP: rr/sampling profiler hybrid", "body": "This is an idea I've been kicking around. When doing sampling profiling, you really want to minimize the amount of work you do while sampling in order for it to a) be fast and b) not disrupt the program too much. Unfortunately this is of course in direct conflict with actually collecting anything useful. What I'm proposing here is to use rr to do the actual data collection as a post-processing step. The way this is done is to sample the current ip and the value of the retired branch counter, thus hopefully allowing us to find this position again during replay and do whatever we want to do (backtrace, collect values, more fancy things, etc...).\n\nThis is nowhere near done, but I figured people may have early feedback.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/17606806", "body": "\ud83d\udc4d I was thinking about doing this myself. \n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17606806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17669464", "body": "This test fails for me in the 32bit case:\n\n```\nLoaded symbols for /lib/ld-linux.so.2\n0xf77990d0 in ?? () from /lib/ld-linux.so.2\n(rr) handle SIGKILL stop\nSignal        Stop  Print   Pass to program Description\nSIGKILL       Yes   Yes Yes     Killed\n(rr) c\nContinuing.\nEXIT-SUCCESS\n\nProgram received signal SIGKILL, Killed.\n0x70000002 in ?? ()\n(rr) reverse-continue\nContinuing.\n\n[Thread 4001.4001] #1 stopped.\n0xf77990d0 in ?? () from /lib/ld-linux.so.2\n```\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17669464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17686745", "body": "Yup!\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17686745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17686875", "body": "Hmm, not sure what else you changed (or maybe I changed something in my environment?) but after pulling master `reverse_step_threads_break-no-syscallbuf` now takes 26 `reverse-step`s. Should I submit a PR to bump the number or is that worth investigating?\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17686875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17966337", "body": "Not sure I understand this part.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17966337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/17976678", "body": "I don't understand why. CLONE_VFORK by itself only affects scheduling not memory sharing as far as I know.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17976678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bgirard": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/1814", "title": "flushregs on RRCmds because they can invalidate the GDB caches", "body": "What do you think about this fix?\n\nhttps://sourceware.org/gdb/onlinedocs/gdb/Maintenance-Commands.html\n\nWe might get hit later by another cache but so far this seems to work ok.\n\nI wrote a testcase to make sure we do the right thing when hitting the end of the program and we don't. I've added it as a todo for now.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neon12345": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/1735", "title": "New features and fixes", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "szborows": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/1617", "title": "More meaningful message when ~/.rr doesn't exist.", "body": "Fixes #1583 \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zmaril": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/1581", "title": "CLI `ls` command", "body": "These two commits implement the `ls` command for `rr` (per #1415). The `ls` command supports `-r`, `-l`, and `-t`. It uses the `st_ctime` of a traces `version` file to find the date the trace was recorded and takes the difference between that and the `data` file.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "synlestidae": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/1486", "title": "Detect and avoid Monkeypatch patching when vdso unmapped", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joneschrisg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17627809", "body": "Sorry, forgot to update this yesterday.  The build error was from incorrectly using $ebx in code compiled with -fPIC.  After that was fixed, libc malloc started asserting early in startup.  I've just established that that's (somehow) caused by the length or format of arguments on the command line.  This command works with the Eclipse build but causes the assertion failure in the CMake build\n\n```\n./rr --record --filter_lib=../rr/obj/lib/librr_wrap_syscalls.so ./hello\n```\n\nHowever, this command works fine in the CMake build\n\n```\n./rr --record --filter_lib=/home/cjones/rr/rr/obj/lib/librr_wrap_syscalls.so ./hello\n```\n\nSmelling like a fencepost bug somewhere ...\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17627809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17682331", "body": "(This is blocking followup work, and I don't think anyone cares to review this.  So I'm going to ask forgiveness for rather than permission to merge this ;). )\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17682331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17694444", "body": "_/me asks for forgiveness_\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17694444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17700377", "body": "Pretty trivial and has a test.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17700377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17743057", "body": "The priority of this is bumped up a bit by the fact that the CII isn't running unit tests.  So the tests aren't being built _or_ run.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17743057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17745494", "body": "Yep! :)  (Not anymore ;).)\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17745494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17748932", "body": "And of course, when I run this in gdb, it shuts down cleanly.  Smells like a waitpid race condition or something like that.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17748932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17749037", "body": "It's something to do with this log spew\n\n```\nGLib-GIO-Message: Using the 'memory' GSettings backend.  Your settings will not be saved or shared with other applications.\n```\n\nWhen this appears, I get the livelock.  When it doesn't, shutdown is clean.  Oddly, this is an intermittent issue.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17749037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17749155", "body": "Solved!  (I think.)\n\n```\nsudo apt-get install dconf-tools:i386 libdconf0:i386 libdconf-dbus-1-0:i386\n```\n\nSolution adapted from [here](https://bugs.launchpad.net/ubuntu/+source/glib2.0/+bug/757866).\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17749155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17750413", "body": "So hm.  #32 shows that all the tests are passing when run with the filter lib.  So this appears to be some new issue specific to FF.\n\n@rocallahan do you recall the last time you successfully recorded FF with the filter lib?  What was the FF version?\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17750413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17750579", "body": "(Seen in ubuntu 12.04 x64, running rr cross-compiled to x86, inside VMWare Workstation 9.  So a lot of moving parts.)\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17750579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17752667", "body": "Disabling the seccomp-bpf and bisecting narrows the problem down to some subset of the socket interface\n\naccept4\naccept\ngetpeername\ngetsockname\ngetsockopt\nrecv\nrecvfrom\nsocket\nbind\nconnect\nlisten\nsendmsg\nsend\nsendto\nsetsockopt\nshutdown\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17752667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17753216", "body": "Ended up being pretty complex.  Here's what's busted\n\nclock_gettime\ngettimeofday\naccept4 - shutdown (socketcall API)\n\nI'm running an x86 build in an x86-64 VM.  I know that the ABI for clock_gettime/gettimeofday is significantly different across x86/x86-64, so this is pretty suspicious.  Will either disable or switch (back, sigh) to an x86 VM.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17753216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17754248", "body": "Broken the same way in an x86 VM, too ...\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17754248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17754321", "body": "\"Fixed\" (worked around temporarily) by #35.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17754321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17910256", "body": "#42 \n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17910256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17910751", "body": "It depends on where we restore the saved initial environment.  If we do it after `fork()` and before `exec*p()`, then all will be well.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17910751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17911614", "body": ">  I think that rr may be changing execution semantics. There's an error message printed from rr runs that I don't think I see sans rr.\n\nPretty sure now that this isn't happening.  I let the automation run on bare metal for 850 runs and didn't repro, but when I ran the test outside of rr on the same machine, it only repro'd 1/10 times, and I saw the same symptoms as in the VM when it didn't repro.  So almost certainly a scheduling issue or something in that neighborhood.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17911614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17913794", "body": "Some more data\n- `taskset 0x1` vs `taskset 0x3` doesn't seem to make a difference; bare metal is at ~700 runs with the latter and no failures\n- running the test under a no-op wrapper still reproduces the bug.  So some scheduler quirk around terminals or process hierarchies doesn't seem to be \"it\".\n- the bug doesn't reproduce under strace either\n\nSkimming the actual bug, it sounds like some code is running on a off-main thread too late after shutdown.  So it might be that the scheduling under ptrace is actually too _fair_.  rr isn't letting the buggy thread get far enough behind to exhibit the bug (or resp., main thread far enough ahead).\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17913794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17913869", "body": "That might explain too why the bug reproduces much less frequently on bare metal with many cores; the threads can actually run in parallel.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17913869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17918501", "body": "The problem is that find_library_location() is going into an infinite loop.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17918501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17921557", "body": "This looks like a big patch but there are really just two small actual fixes along with a lot more insubstantial changes.  So I'll conserve limited review bandwidth here.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17921557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17921592", "body": "First part of this is #44.  I forgot to update the name of the wrapper lib, and we need to use `struct stat64`.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17921592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/7293068", "body": "Something to do with yama?  Otherwise this doesn't make sense :).\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7293068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/7417935", "body": "> Is handlers[0] deliberately skipped?\n\nYes, valgrind issues a warning for `sigaction(0)`.  (There's no harm caused by that though.)\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7417935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/7542239", "body": "I tried this approach way back when we first diagnosed the CPUID core-number leak.  Unfortunately, it was big slowdown on the test suite compared to the \"unbound\" approach, IIRC 2x or more slower.  That was a big enough productivity hit that I did the \"unbound\" hack.  Did you happen to test the test suite before/after to see if runtime was dinged too much?  (Either way, it makes sense for this to be the default \"production\" behavior.)\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7542239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/7646315", "body": "Grr, stupid @cgjones!  Thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7646315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/9907683", "body": "I don't think it matters too much, but what's the rationale behind blocking that?\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/9907683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/9920750", "body": "Well that's odd ... thanks for the explanation.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/9920750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/5093702", "body": "Yeah, that code is old but has made me nervous too.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/5093702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/7106070", "body": "More generally, files created on tmpfs file systems always need to be copied to be able to replay across reboots.  I'd prefer to check for that with an `fstatfs`, but I'll need to check if that's going to be awkward here.  Otherwise this looks pretty much OK; I would change the condition to `filename == strstr(filename, \"/tmp/\")`, but that's just a nit.\n\nbrb\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/7106070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/11474046", "body": "We have a `page_size()` helper to let avoid the magic 4096 constant, but of course that's not going to matter in practice.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/11474046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/11474852", "body": "Ah, the linux mmap2 syscall interface, right.  Ignore me :).\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/11474852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12073583", "body": "Ftr, I'd like the rr code to move towards C++ stream-style logging, since this is the common idiom.  (I.e. iostream and `operator <<()`s.)  But this patch is perfectly fine as is, a move in the right direction.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12073583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12073585", "body": "Drop the explicit `std::` qualification in .cc files.  There are some more uses below.  This is in the [new coding style doc](https://github.com/mozilla/rr/wiki/Code-style), which I think we wrote while you were writing this patch :).  Sorry about that.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12073585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12073588", "body": "Prefer using `vector` to manual memory management.  You can achieve the equivalent of what you do here by making `mem` a `vector`, then doing\n\n``` C++\nmem.resize(first.num_bytes()).\nvalid_mem_len = t->read_bytes_fallible(first.start,\n                mem.size(), mem.data());\n```\n\nIt gets really nasty managing explicit `free / delete`s, and C++'s greatest feature RAII frees you from having to do that :).\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12073588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12078983", "body": "Another minor nit: elsewhere in the code we've used `Foo::str()` for this kind of method, which is a little more STL-y.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12078983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12718517", "body": "I didn't look closely at this patch, but `t` might end up holding the last reference to the session, so unless you've prepared otherwise, `sess` might be dead after this call.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/12718517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "andreasgal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17629051", "body": "The new occupant gets to make the rules. Feel free to dictate a new style guide.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17629051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17629113", "body": "Moar C++ please.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17629113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/5083080", "body": "probably a good idea to file an issue here\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/pulls/comments/5083080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "anoll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17712257", "body": "Hi Chris,\nsystem call number 96 is unimplemented.\n\nAlbert\n\nVon meinem iPhone gesendet\n\nAm 09.05.2013 um 03:55 schrieb Chris Jones notifications@github.com:\n\n> This is with today's nightly i686 build, running in an x86 VM on an x86-64 system. Lots of moving parts here, not sure yet where the problem is. Full output below.\n> \n> $ rr --record ./firefox/firefox -no-remote -P garbage\n> [INFO](/home/cjones/rr/rr/src/main.c:164) Start recording...\n> \n> .[ERROR](/home/cjones/rr/rr/src/recorder/rec_process_event.c:2162: errno: None) recorder: unknown syscall 96 -- bailing out\n> [ERROR](/home/cjones/rr/rr/src/recorder/rec_process_event.c:2163: errno: None) execuction state: 4 sig 0\n> Printing register file:\n> eax: 14\n> ebx: 0\n> ecx: 0\n> edx: b7c6aff4\n> esi: 1\n> edi: b781a240\n> ebp: bfffbd98\n> esp: bfffbd48\n> eip: b7fdd424\n> eflags 200292\n> orig_eax 60\n> xcs: 73\n> xds: 7b\n> xes: 7b\n> xfs: 0\n> xgs: 33\n> xss: 7b\n> \n> [ERROR](/home/cjones/rr/rr/src/share/sys.c:117: errno: None) Exiting\n> rr: /home/cjones/rr/rr/src/share/sys.c:120: sys_exit: Assertion `0' failed.\n> Aborted (core dumped)\n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/issues/comments/17712257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nimrodpar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/1884655", "body": "Well, for some of the tests i added, i do want to see a print to a file in the standard output, but i guess printing ALL output is an overkill, we'll just redirect stdout and stderr intended calls for now.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/1884655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mozilla/rr/comments/1884685", "body": "I also had trouble with this function, i added read_child_buffer() which worked a lot better for me. You're welcome to try it if you encounter more problems with this one.\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/1884685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/7413197", "body": "Is `handlers[0]` deliberately skipped?\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/7413197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "GSam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mozilla/rr/comments/17394614", "body": "Not sure if this is relevant, but on one machine, I found that it was using a shim-layer for quotactl akin to http://lxr.free-electrons.com/source/include/linux/quotacompat.h\n", "reactions": {"url": "https://api.github.com/repos/mozilla/rr/comments/17394614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}