{"_default": {"1": {"onovy": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/765", "title": "big endian: FAIL: test_no_context_lines (test.test_patch.PatchTest)", "body": "Hi,\r\n\r\ntest.test_patch.PatchTest.test_no_context_lines fails on archs mips, s390x, hppa, powerpc or ppc64. I think all of them are \"big endian\". This bug is new in 0.26.3, because before this version test_no_context_lines test didn't exists.\r\n\r\n```\r\nFAIL: test_no_context_lines (test.test_patch.PatchTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/<<PKGBUILDDIR>>/test/test_patch.py\", line 196, in test_no_context_lines\r\n    self.assertEqual(context_count, 0)\r\nAssertionError: 1 != 0\r\n```\r\n\r\nSee: https://buildd.debian.org/status/package.php?p=python-pygit2\r\n\r\nThanks for fixing.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/764", "title": "tree.diff_to_tree results in many unnecessary sys calls", "body": "Hi!\r\n\r\nI'm currently working on a git scanner with a very high throughput for my bachelor thesis.\r\nAs the scanner runs with 8 threads, I'm observing severe slowdowns on my server.\r\nAfter running the command with `strace` i noticed that there are a whole lot of unnecessary syscalls issued on each diff. It looks like  for each file in the diff, there is one `stat` for the actual file, two `access` for `/etc/gitattributes` and two `stat` for `/info/attributes`. \r\n\r\nThis results in a lot of syscalls and slows things down significantly as the program seems to wait for those calls most of the time. The repositories are located inside `/tmp` and cleaned after each scan. There are no signs of RAM shortage as there are about 8GB+ unused space in the `/tmp` fs.\r\n\r\nThe repositories are cloned `bare`. The actual function call is:\r\n```\r\ndiff = commit.tree.diff_to_tree(commit.parents[0].tree)\r\nself.commit_stats[commit.hex] = {\r\n    'additions': diff.stats.insertions,\r\n    'deletions': diff.stats.deletions,\r\n}\r\n```\r\n\r\nI'm not sure if this is the right place or if this is rather a libgit2 issue.\r\nAnyway I'm happy for any help as I'm not that familiar with the pythin-C binding mechanics.\r\n\r\nRelevant strace output example:\r\n```\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnareb": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/752", "title": "Performance: speed of getting `blob.data` for large files (as compared to GitPython)", "body": "I have compared speed of equivalent to `git show <revision>:<pathname>` in both pygit2 and GitPython (the pure-Python implementation). In all other cases that I have tested pygit2 is faster, but for very large files `git show` / `git cat-file` equivalent is slower.\r\n\r\npygit2 code:\r\n``` python\r\nblob = repo.revparse_single(commit + ':' + path)\r\nresult = blob.data\r\n```\r\n\r\nGitPython code:\r\n``` python\r\nblob = repo.rev_parse(commit + ':' + path)\r\nresult = blob.data_stream.read()\r\n```\r\n\r\nDo you have any ideas why pygit2 is slower here?\r\n\r\nP.S. would it be difficult to add streaming access?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750", "title": "Suggestion: better handling of `repo.set_head(pygit2.Commit)`", "body": "I have tried to emulate `git checkout --detach <commit>` in pygit2, to create **detached HEAD** checkout, and I did come up with the following rough equivalent (though the following does not uses transactions as git does):\r\n\r\n``` python\r\nrev = repo.revparse_single(commit_name)\r\nrepo.checkout_tree(rev)\r\nrepo.set_head(rev.id)\r\n```\r\n\r\nHowever when I tried to use simply `repo.set_head(rev)`, I got the following error:\r\n\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-35-9612528ec0ac> in <module>()\r\n----> 1 repo.set_head(rev)\r\n\r\n/usr/lib/python2.7/dist-packages/pygit2/repository.pyc in set_head(self, target)\r\n    293\r\n    294         # if it's a string, then it's a reference name\r\n--> 295         err = C.git_repository_set_head(self._repo, to_bytes(target))\r\n    296         check_error(err)\r\n    297\r\n\r\nTypeError: initializer for ctype 'char *' must be a cdata pointer, not _pygit2.Commit\r\n```\r\n\r\nIt would be nice if `pygit2.Commit` object was automatically peeled, but if it is decided to be not good idea, then what it needs is more user-friendly error message than the one above.\r\n\r\n-----\r\npygit2 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738", "title": "`repo.diff(c1, c2, flags=pygit2.GIT_DIFF_FIND_RENAMES)` reverses diff", "body": "First complaint is that there is no documentation and no examples of using `flags` (not `flag` as in description of parameters) with `Repository.diff`: http://www.pygit2.org/diff.html . Therefore I am not sure if I am using the API correctly.\r\n\r\nSecond, using `flags=pygit2.GIT_DIFF_FIND_RENAMES` for some reason **reverses** diff.\r\n\r\nCompare \r\n```\r\n>>> repo = pygit2.Repository('path/to/repo')\r\n>>> repo.diff('HEAD^', 'HEAD', flag=pygit2.GIT_DIFF_FIND_RENAMES).patch`\r\n```\r\nwith \r\n```\r\n>>> repo.diff('HEAD^', 'HEAD').patch\r\n```\r\n\r\n-----\r\n\r\npygit2.LIBGIT2_VERSION: '0.26.0'\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pypingou": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/747", "title": "Broken GIT_SORT_TIME ?", "body": "This is a script to reproduce the behavior I'm seeing:\r\n````\r\n#!/usr/bin/env python\r\n\r\nimport tempfile\r\nimport time\r\nimport os\r\n\r\nimport pygit2\r\n\r\npath = tempfile.mkdtemp(prefix='pygit2_test_')\r\nrepo = pygit2.init_repository(path)\r\n\r\nauthor = pygit2.Signature('Alice Author', 'alice@authors.tld')\r\ncommitter = pygit2.Signature('Cecil Committer', 'cecil@committers.tld')\r\n\r\n# Commit #1\r\n\r\n # Create a file in that git repo\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\nparents = []\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #1',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents,\r\n))\r\ncommit1 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n# Commit #2\r\n\r\nparents = [commit1.oid.hex]\r\n\r\nsubfolder = os.path.join('folder1', 'folder2')\r\nos.makedirs(os.path.join(path, subfolder))\r\n# Create a file in that git repo\r\nwith open(os.path.join(path, subfolder, 'file'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz')\r\nrepo.index.add(os.path.join(subfolder, 'file'))\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #2',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit2 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n\r\n# Commit #3\r\n\r\nparents = [commit2.oid.hex]\r\n\r\n# Update the sources file\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz!')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #3',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit3 = repo.revparse_single('HEAD')\r\n\r\n\r\nprint('')\r\nmain_walker = repo.walk(commit3.oid.hex, pygit2.GIT_SORT_TIME)\r\ncommits_msgs = []\r\nwhile 1:\r\n    try:\r\n        com = main_walker.next()\r\n        print(com.message)\r\n        print(com.oid.hex)\r\n    except StopIteration:\r\n        break\r\n````\r\n\r\nIt gives me the following output:\r\n````\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\n\r\nCommit #3\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\nCommit #1\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\nCommit #2\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n````\r\n\r\nThe first three lines are the commit as they are committed.\r\nThe following lines are the commit message and hash as ``repo.walk(commit3, pygit2.GIT_SORT_TIME)`` is returning them.\r\n\r\nSomething looks broken to me :)", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/747/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Bysmyyr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/732", "title": "hunk.final_committer.name not work if email is empty", "body": "Hi, I found this error:\r\n\r\nif email is missing, it gives error \"Signarure cannot have an empty name or email\"\r\n\r\nin libgit2 Slack channel we discuss it and end up that in `wrap_signature` pygit2 creates new signature where email cannot be empty. It maybe should use `git_signature_dup` instead?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yan12125": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/731", "title": "Document KeypairFromAgent", "body": "I didn't know that feature until I check codes from both libgit2 and pygit2. I think it would be helpful to have that documented in http://www.pygit2.org/remotes.html.\r\n\r\nGoogling reveals another confused developer like me :-) https://github.com/saltstack/salt/issues/40008#issuecomment-286434931", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santublr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/729", "title": "pygit2 installation error. ", "body": "This issue which I'm reporting may be repetative one, but after googling and trying all the options I'm still not able to load the right pygit2.\r\n\r\npygit2 version 0.22.0\r\nlibgit2 version 0.22.0\r\npycparse version 2.18\r\ncffi version 0.9.2\r\nPython Version 3.3.2\r\nOS CentOS release 6.8 (Fina\r\n\r\n\r\npython3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LD_LIBRARY_PATH=$LIBGIT2/lib\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LIBGIT2=/usr/local\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nImportError: No module named pygit2\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nicolasdespres": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/727", "title": "create_commit does not update the reflog", "body": "Hi,\r\n\r\nI have noticed that v0.26.0 of `create_commit` does not create an entry in the reflog for the initial commit of a branch.\r\n\r\n```python\r\n/private/tmp\r\n4> mkdir d\r\n\r\n/private/tmp\r\n5> cd d\r\n/private/tmp/d\r\n\r\n/private/tmp/d\r\n6> import pygit2\r\n\r\n/private/tmp/d\r\n7> repo = pygit2.init_repository(\".\")\r\n\r\n/private/tmp/d\r\n8> repo.config[\"user.email\"] = \"foo@bar.com\"\r\n\r\n/private/tmp/d\r\n9> foo = repo.create_blob(\"foo\")\r\n\r\n/private/tmp/d\r\n10> builder = repo.TreeBuilder()\r\n\r\n/private/tmp/d\r\n11> builder.insert(\"foo\", foo, pygit2.GIT_FILEMODE_BLOB)\r\n\r\n/private/tmp/d\r\n12> tree_id = builder.write()\r\n\r\n/private/tmp/d\r\n13> repo.create_commit(\"refs/test\", repo.default_signature, repo.default_signature, \"test\", tre\r\n13: e_id, [])\r\n13> f610cdd139fab6f738dfaff52839a552a6b8bb9e\r\n\r\n/private/tmp/d\r\n14> git reflog refs/test\r\n  File \"<ipython-input-14-afa1bc8c3c03>\", line 1\r\n    git reflog refs/test\r\n             ^\r\nSyntaxError: invalid syntax\r\n\r\n\r\n/private/tmp/d\r\n15> !git reflog refs/test\r\n\r\n/private/tmp/d\r\n16> !git --no-pager reflog refs/test\r\n\r\n/private/tmp/d\r\n17> repo.references[\"refs/test\"].log\r\n17> <function Reference.log>\r\n\r\n/private/tmp/d\r\n18> repo.references[\"refs/test\"].log()\r\n18> <_pygit2.RefLogIter at 0x10db93bc0>\r\n\r\n/private/tmp/d\r\n19> list(repo.references[\"refs/test\"].log())\r\n19> []\r\n```\r\n\r\nHowever it works it is not an initial commit.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726", "title": "revparse_single does not understand date", "body": "Hi,\r\n\r\n`revparse_single` does not support date parsing:\r\n\r\n$ git rev-parse 'HEAD@{2 weeks ago}'\r\neebac5f1c21ec78e098a8f7b60facd726b30844e\r\n$ python3 -c 'import pygit2; pygit2.Repository(\".\").revparse_single(\"HEAD@{2 weeks ago}\")'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nKeyError: 'HEAD@{2 weeks ago}'\r\n\r\nI am using version 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "white-gecko": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/725", "title": "Support for Custom Merge drivers?", "body": "Is there any way of using a custom merge driver in pygit2? I've see this for libgit2: https://github.com/libgit2/libgit2/pull/3564 is this also possible to be used with pygit2 as it is?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smelnikov": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/724", "title": "How can I get current Tag reference?", "body": "First, I checkout TAG from my repo. \r\nThen I need resolve name of this TAG. But I can't get relevant reference object (HEAD is detached).\r\nPlease tell me, how this can be done?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Parakleta": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/723", "title": "GIT_SORT_TOPOLOGICAL is document backwards.", "body": "The documentation states that parents come before children, but actually children come before parents.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686", "title": "`git_commit_amend` not available.", "body": "Additionally `Repository.create_commit` fails if the first parent is not the tip of the branch being updated, so the behaviour cannot be fudged by making a new commit with the tip's parent.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680", "title": "`peel` arguments inconsistent.", "body": "`peel` is implemented twice, once in `object.c` and once in `reference.c`.  In the first it requires an argument and in the second it provides a default argument of `None`.  This is confusing when branches can be 'default' peeled but tags cannot.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ashmastaflash": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/722", "title": "Support `git bundle create`", "body": "Ideal form would be to have a class method for Repository that accepts a single argument for the output file path.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pklim101": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/717", "title": "How to solve 'LIBSSH2 not found.'?", "body": "when I execute the command 'cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/libgit2',\r\nI have the output bellow\uff1a\r\n\r\n> \r\n\r\n-- Checking for module 'libcurl' \r\n--   Found libcurl, version 7.15.5  \r\n-- Could NOT find HTTP_Parser (missing: HTTP_PARSER_INCLUDE_DIR HTTP_PARSER_LIBRARY)   \r\n-- http-parser version 2 was not found; using bundled 3rd-party sources.  \r\n-- Checking for module 'libssh2'  \r\n--   No package 'libssh2' found  \r\n-- LIBSSH2 not found. Set CMAKE_PREFIX_PATH if it is installed outside of the default search path.\r\n\r\nthere are two module not fund, How can I solve it? thanks!", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tongtongtongtong": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/716", "title": "pygit2.GIT_DIFF_IGNORE_WHITESPACE result Inconsistent", "body": "git command:\r\ndiff --git a/Makefile b/Makefile\r\nindex bb20e89..c25d045 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -3,4 +3,5 @@ install:\r\n \r\n clean: \r\n        rm -rf tgit-statistics \r\n+       \r\n qed \r\n\\ No newline at end of file\r\n\r\npygit2:\r\nrepo.diff(from_id, to_id, cached=True, flags=pygit2.GIT_DIFF_IGNORE_WHITESPACE, context_lines=3, interhunk_lines=3)\r\n\r\ndiff --git a/Makefile b/Makefile\r\nindex bb2..c25 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -5,0 +6 @@ clean:\r\n+", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbaiter": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/712", "title": "`Repository.diff(cached=True)` does not list diffs for indexed files", "body": "This is with pygit2 version 0.24.0.\r\n\r\n```\r\n$ git init\r\nInitialized empty Git repository in /tmp/minimal/.git/\r\n$ touch foo\r\n$ git add foo\r\n$ git commit -am \"First commit\"\r\n[master (root-commit) 3551222] First commit\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 foo\r\n$ echo \"foobar\" >> foo                                                                                                                                                                                                                                                                                 \r\n$ git add foo\r\n$ git diff --cached\r\ndiff --git a/foo b/foo\r\nindex e69de29..323fae0 100644\r\n--- a/foo\r\n+++ b/foo\r\n@@ -0,0 +1 @@\r\n+foobar\r\n$ python\r\n>>> import pygit2\r\n>>> repo = pygit2.Repository('.')\r\n>>> list(repo.diff(cached=True))\r\n[]\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmr232": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/709", "title": "Type Annotations", "body": "I was thinking of adding type annotations to some of the APIs to assist IDEs in parsing them and providing useful completion.\r\n\r\nSince it currently does not exist in the code, I preferred asking before coding.\r\nDue to supporting both Python 2 and 3, I think the way to do it is to use syntax present [here](http://mypy.readthedocs.io/en/latest/python2.html).\r\n\r\nThere are some drawbacks:\r\n1. Adding a new dependency - the `typing` package\r\n1. Annotation comments are not the prettiest thing\r\n\r\nBut if we only the do the required minimum, we get more clarity when using the library, and can also use `mypy` as a verification step for new code.\r\n\r\n@jdavid what is your opinion?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699", "title": "libssh2", "body": "I think it would be good to add libssh2 to the builds to provide SSH support.\r\nOn Windows it takes quite some work to get it working (no success yet on my side). Haven't tried other OSs yet.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701", "body": "This closes #669 ", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "FabriceSalvaire": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/704", "title": "How to implement (un)staging and query staging status ?", "body": "Not a bug, but I cannot figure out how to achieve this using pygit2 / libgit. Does someone have clues about this ?\r\n\r\nI tried to get information from this page http://www.pygit2.org/working-copy.html and I found https://github.com/libgit2/libgit2sharp/blob/master/LibGit2Sharp/Commands/Stage.cs and https://github.com/libgit2/libgit2/issues/3632\r\n\r\nI want to implement staging feature to my code review tools: https://github.com/FabriceSalvaire/CodeReview\r\n\r\n**Is http://stackoverflow.com/questions/tagged/libgit2 the right place to discuss on pygit2 ???**", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/705", "title": "Added recipe for git-add and git-reset (staging)", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "niven823": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/702", "title": "Repository.update_submodules() got Request failed with status code: 401", "body": "I thought update_submodules()'s requires adding parameter of callbacks for RemoteCallbacks.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ignatenkobrain": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/693", "title": "[RFE] rebase routines", "body": "libgit2 supports rebasing, but pygit2 doesn't expose it. It would be very useful if it could.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wme-at-contact-de": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/687", "title": "Possible encoding problem with Repository.file_status", "body": "If I try to get the status of a single file using Repository.file_status, I get a \"KeyError\" when the path contains non-ASCII characters like \"\u00e4\" or \"\\u00A0\" (non breaking space\").\r\n\r\nThe problem seems to be that \"Repository_status_file\" uses \"py_path_to_c_str\" to convert the path. Which encodes the path using the Python file system encoding.\r\n\r\nIf I encode the string myself using \"utf-8\", it works fine.\r\n\r\nNot sure whether this is a libgit2, pygit2 or Windows problem...\r\n\r\nUsing pygit-0.24.2 on Python 3.5, running on Windows 7.\r\nsys.getfilesystemencoding() returns \"mbcs\".\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "catsclaw": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/684", "title": "repo.status() appears to be broken?", "body": "I'm running `repo.status().items()` in a pre-commit hook using the `-a` flag (`git commit -a -m \"Test\"`), and I get a result that looks like this:\r\n\r\n`[('config/git_hooks/pre-commit', 256), ('bin/run_flake8', 256)]`\r\n\r\nIf I run `git status` in that same process, I get:\r\n\r\n    On branch ops_1331_fix\r\n    Your branch is ahead of 'origin/ops_1331_fix' by 2 commits.\r\n      (use \"git push\" to publish your local commits)\r\n    Changes to be committed:\r\n      (use \"git reset HEAD <file>...\" to unstage)\r\n    \r\n\t    modified:   bin/run_flake8\r\n\t    modified:   config/git_hooks/pre-commit\r\n\r\nIn other words, pygit2 is reporting those files as not being staged, and git is reporting them as being staged. Why the discrepancy?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4s1": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/683", "title": "DoS on wrong password", "body": "As discussed in upstream bug report saltstack/salt#38230 pygit2 tries to authenticate indefinite with wrong credentials instead of failing after two consecutive failures with same authentication token as specified by https://tools.ietf.org/html/rfc7235#section-3.1\r\nPossible a libgit2 Bug if it's reproducable with other language bindings.\r\n\r\n\r\n## Testcase:\r\n### nginx dummy server configuration\r\nThis is just a stub configuration, no real repository needed\r\n````\r\nlocation ~ /git(/.*) {\r\n        add_header \"WWW-Authenticate\" \"Basic realm=\\\"Closed Areas\\\"\" always;\r\n        return 401;\r\n    }\r\n````\r\n### test client\r\n````python\r\n#!/bin/python2.7\r\n\r\nimport pygit2\r\n\r\nusername = 'dummyUser'\r\npassword = 'dummyPassword'\r\ncredentials = pygit2.UserPass(username, password)\r\ncallbacks = pygit2.RemoteCallbacks(credentials)\r\npygit2.clone_repository(\"http://git.demo.local/git/test.git\", \"test.git\", bare=True, callbacks=callbacks)\r\n\r\n````", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdavid": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/bf74b2a99341437a755390c692ae04a21737c9d7", "message": "Merge remote-tracking branch 'white-gecko/patch-1'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a1494574fff619ef135119487980d751877af20c", "message": "Fixing ImportError in some cases, bug #658"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9b047fe18a4313596e567dda463554f6d9a416d6", "message": "Fix running the tests with tox"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5c96a46e2bfa2fa35d10a42fb51271da50d5685f", "message": "Release 0.26.3"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/91dfaf2a07225865b7bd09a0f1a49e933462c2f8", "message": "Review Patch, fixes #757"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c4e026095e7ce19793a0c811d35a1074f606b6a2", "message": "New Diff.deltas iterable"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d1c954f40f96816d3695a1eeb5d22a6beb32416d", "message": "Release 0.26.2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4804143f5590cf989f162973ec3a99c8314607bc", "message": "test: use self.assertXXX not assert\n\nBecause we use unittest, not pytest."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8944d0208a7468ec7d378247356677829b87766b", "message": "Merge remote-tracking branch 'cecedille1/fetch-prune'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3adda5509e5affb6a2f6f1daa0d02ee9e2d6d91b", "message": "docs: diff, add missing members"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694", "body": "I see from the traceback that you are using Python 2.6.1, it contains some bugs regarding zip files, like [issue 4710](http://bugs.python.org/issue4710). Could you try with a more recent version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416", "body": "From the traceback it looks like this has nothing to do with my patches, no regression here.\n\nSupporting Python 2.5 would take more work. I think it is not worth the effort, it is an old version and pygit2 is clearly understaffed. I think it is more interesting to spend time on supporting new versions (Python 3) than on supporting old versions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996", "body": "Accidentally I have reproduced the traceback you found with Python 2.5. It has nothing to do with 2.5 actually.\n\nIt happens pygit2 has two ways to run the tests. If setuptools is installed it will run the tests in-place. But if setuptools is not installed then you need to install pygit2 before running the tests (otherwise you will get that traceback), that's what the documentation says anyway:\n\n```\n$ python setup.py install\n$ python setup.py test\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027", "body": "About Python 2.6, it works fine.\n\nJust tested myself and reproduced the same error with 2.6.1:\n\n  IOError: [Errno 20] Not a directory: '/tmp/tmp_W_Hl9/testrepo/bye.txt'\n\nBut the tests pass with 2.6.2 (which was released almost two years ago). By the way I use myself Python 2.6\n\nAnyway, I am going to replace zipfile by tarfile as you suggest, since it looks more robust (the tests may even pass with 2.5)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072", "body": "Replaced zipfile by tarfile and now the tests pass even with Python 2.5 (on GNU/Linux, did not check Mac or Windows)\n\nIt was a bad idea to use zipfile in the first place.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264", "body": "cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360", "body": "Hello,\n\nI have merged the branch 'add-commit-attributes' by John Szakmeister. This adds Commit.parents, I needed that to\nimplement the equivalent to \"git log -- path\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919", "body": "This branch does not work after the recent changes to libgit2. I withdraw this pull request to open a new one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764", "body": "You can try my fork of pygit2 where this has been fixed:\n\n```\ngit://github.com/jdavid/pygit2.git\n```\n\nI asked for my changes to be merged, see https://github.com/libgit2/pygit2/pull/11\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445", "body": "There have been some more commits since I made this pull request, most important to keep pygit2 working after the changes to libgit2. But there are a few enhancements too:\n- New module function 'init_repository'\n- Added 'IndexEntry.path'\n- Started documentation on using pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641", "body": "The changes have been merged upstream, so this is fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196", "body": "pygit2 works with the 'master' branch of libgit2, commit b5c5f0f8086ee4\nis the tip of the 'development' branch\n\nOn Fri, 18 Mar 2011 05:31:07 -0700\nhonza\nreply@reply.github.com\nwrote:\n\n> Installed latest [libgit2][libgitsha], zlib and openssl. Using\n> [this][pysha] pygit2 revision, I can't get it to install:\n> \n> bash-3.2$ sudo python setup.py install\n> running install\n> running bdist_egg\n> running egg_info\n> writing pygit2.egg-info/PKG-INFO\n> writing top-level names to pygit2.egg-info/top_level.txt\n> writing dependency_links to pygit2.egg-info/dependency_links.txt\n> reading manifest file 'pygit2.egg-info/SOURCES.txt'\n> writing manifest file 'pygit2.egg-info/SOURCES.txt'\n> installing library code to build/bdist.macosx-10.6-universal/egg\n> running install_lib\n> running build_ext\n> building 'pygit2' extension\n> gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv\n> -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc\n> -arch x86_64 -pipe -I/usr/local/include\n> -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6\n> -c pygit2.c -o build/temp.macosx-10.6-universal-2.6/pygit2.o\n> pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356: error: void\n> value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be lipo: can't open input file: /var/tmp//ccSxjred.out (No\n> such file or directory) error: command 'gcc-4.2' failed with exit\n> status 1\n> \n> [libgitsha]:\n> https://github.com/libgit2/libgit2/commit/b5c5f0f8086ee4e9bccf0703386fd5219ac380c2\n> \n> [pysha]:\n> https://github.com/libgit2/pygit2/commit/6c7df765c1a9a186e721826121f50d0286b4040e\n\n## \n\nJ. David Ib\u00e1\u00f1ez\nItaapy http://www.itaapy.com         Tel +33 (0)1 42 23 67 45\n9 rue Darwin, 75018 Paris              Fax +33 (0)1 53 28 27 88\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490", "body": "I hope to update pygit2 by tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505", "body": "I don't like the \"GPLv2 + exception\" for pygit2 either. Personally I would prefer LGPLv3, that would be fine to you?\n\nTo change the license the agreement of everybody that contributed to pygit2 is required, starting by Dave Borowitz, who has written more than half of it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550", "body": "I think the behaviour must be the same for both Python 2 and 3, otherwise everything will be ore complicated (implementation, documentation, ...)\n\nBesides, in this case, the remark by @pyos [1] also applies to Python 2. Later on we will add to this method the ability to get an object by a short hex-sha, by calling `git_object_lookup_prefix`. If the hex-sha passed is 20 bytes long, how to know it is an hex-sha and not a raw-sha? I think to make the difference by the type is a fine solution.\n\n[1] https://github.com/libgit2/pygit2/issues/43#issuecomment-1791199\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935", "body": "Readability. It is not evident whether the word \"sha\" refers to the raw oid (20 bytes byte string) or to its hexadecimal form (40 chars text string). At least `.hex` has the virtue of not being ambiguous.\n\nNote that now we also have `object.oid`, the raw oid as a 20 bytes byte string. And that the old `.sha` and the new `.hex` are not exactly the same, before `.sha` was a byte string, now `.hex` is a text (unicode) string. So this was the right time to make the change.\n\nAlso, pygit2 is still, like libgit2, alpha software. So changes to the API may happen from time to time, they will be documented on every release.\n\nThis commit is part of the work to fix issue 43, https://github.com/libgit2/pygit2/issues/43\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780", "body": "www.pygit2.org actually, but it's to late to fix a commit message\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811", "body": "No. What I do is to keep a libgit2 clone and from time to time check whether pygit2 still works.\n\n(In my opinion, the problem is libgit2 does not release often enough.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984", "body": "I bet you mean:\n\n```\nif (builder) {\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078", "body": "- I wonder what Py_XDECREF will do with a `git_treebuilder` struct.\n- The point of using `Py_XDECREF` instead of `Py_DECREF` is that you don't need to check for NULL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062", "body": "This line should not be. The dealloc function is called when the refcount is zero. Decreasing it below zero is not correct.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085", "body": "Just changed this static method so it is shorter and fails on unexpected arguments.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "zhangyiant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/12d83a955333ff47c2f2c747be3b3f0206f6d674", "message": "Implement update_submodules using ffi."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f512bd94d47adbcb4ceb07ae76ddfece031c9dab", "message": "Add wrongly deleted declaration."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/bda601adc4a101b9b3131cf0a3ff84461e90e930", "message": "Import submodule_update related options."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/03deadb9f886ac2ecfafe8de1ffc2fb7f5c5f1c4", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c0eaa698d648af33a72c743ba296dd1427bcb81f", "message": "Fix patch-after-blob-free"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/83fdde770b72b836cc7ae1490803464f74bf9d3d", "message": "Add similar blob test"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3070a22c064b56da8d0a131be70d2addf40f7856", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d463fd7151b6d839afbd49628b7b923d7a958591", "message": "Make broken patch tests be less nebulous"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/007ac2a28dcd3b7dd13beade915fe62f936924ba", "message": "test_patch: assertEquals -> assertEqual"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/798e357ffe3d551a59a26b3f228e321cd6f2a4ed", "message": "Add more patch and blob tests that could fail"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/28c3828ef05d90e1ea6704c0bc60ad78c103af82", "message": "Add contextlines, interhunk lines to Patch.create_from"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a96da22cbf456fe2181e196877845b590cede606", "message": "Dont create blobs on the fly in test_patch, make patch kwargs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d5c8e6208c8ac33534c2bf36c7bc525d6bc5e756", "message": "Move declarations to top of functions"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/575905fd2c4791cb11d2f660e1c162c56878b23c", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e765acdb9c17103544d0f10f60fb12abd8ae91a6", "message": "Add bad arg tests to test_patch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ea1a08d25746dbb4613ea09350741fe7ae2ad5c1", "message": "Add static Patch.create_from method to create patches"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fourplusone": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cae2c2866e610d6b6baa318281f14e8a92cf7a3b", "message": "Clear clone_repo in Prune Test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cecedille1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/523f82e9094bd878d2bc1710ff40121ca8c8fbf6", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d0c224a1d8ce11c60592c57e1b139cd7d1ee0732", "message": "Implement prune option for fetch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ceb02490a554f1dc221049e24f6952c3d883edf0", "message": "Export the constants GIT_FETCH_PRUNE_*"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nhynes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/719", "title": "Rebased worktrees", "body": "This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexchamberlain": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/538", "title": "Add certificate callback.", "body": "Existing unit tests pass. Adapted from `__init__.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petrhosek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/405", "title": "Walker interface reimplemented with CFFI", "body": "I've reimplemented the `Walker` interface with CFFI; this is a first step towards reimplementing the entire pygit2 Object model with CFFI. It's supposed to be a straightforward rewrite, I haven't made any changes to the API to avoid breaking the backwards compatibility.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/346", "title": "Diff and Patch interface refactored", "body": "This is a complete refactoring of the diff and patch interface. The changes include:\n- Splitting `Diff` and `Patch` into separate classes and files, including respective tests. This largely follwos the recent development in `libgit2`.\n- Introducing `DiffDelta`, `DiffFile` and `DiffLine` classes and their respective iterators.\n- Moving the recently introduced `Blob` diff methods into patch again to be in line with the respective `libgit2` interface.\n\nThe biggest difference, apart from the code cleanup, is the lazy evaluation due to heavy use of iterators rather than evaluating everything ahead of time as in case of the existing code, which tends to be slow on larger projects.\n\nI have tried to make the interface as \"Pythonic\" as possible, while closely following the underlying `libgit2` C interface. However, some of you might think of a better abstraction and I'd happy to incorporate further changes into the patch.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596", "body": "Indeed, it was using the private clone URL. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600", "body": "Replaced the build instructions with a link to our website: that way it'll always be up to date.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355", "body": "Neat, thanks for this, but it looks like I got two pull requests for the same thing. ^^\n\nI've just merged the other one, and while I was at it fixed the test that was failing -- it was an issue in libgit2, so thanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527", "body": "Hey, this is very nice, but the new compressed text repository is making the tests fail:\n\n```\nTraceback (most recent call last):\nFile \"/Users/tanoku/src/pygit2/test/utils.py\", line 74, in setUp\nz.extractall(temp_dir)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 940, in extractall\nself.extract(zipinfo, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 928, in extract\nreturn self._extract_member(member, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 965, in _extract_member\ntarget = file(targetpath, \"wb\")\nIOError: [Errno 20] Not a directory: '/var/folders/0d/0dHASpI3E9Ca1CvFczxbjU+++TI/-Tmp-/tmpdHiwtC/testrepo/bye.txt'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331", "body": "Hm, 2.5.4 fails too, with the following error:\n\n```\nTraceback (most recent call last):\n  File \"setup.py\", line 87, in <module>\n    **kwargs\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/core.py\", line 151, in setup\n    dist.run_commands()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 974, in                 run_commands\n    self.run_command(cmd)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 994, in run_command\n    cmd_obj.run()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 121, in run\n    self.with_project_on_sys_path(self.run_tests)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 101, in with_project_on_sys_path\n    func()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 130, in run_tests\n    testLoader = loader_class()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 767, in __init__\n    self.parseArgs(argv)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 794, in parseArgs\n    self.createTests()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 800, in createTests\n    self.module)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 553, in loadTestsFromName\n    test = obj()\n  File \"/Users/tanoku/src/pygit2/test/__init__.py\", line 41, in test_suite\n    return unittest.defaultTestLoader.loadTestsFromNames(modules)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 541, in loadTestsFromName\n    parent, obj = obj, getattr(obj, part)\nAttributeError: 'module' object has no attribute 'test_blob'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753", "body": "Fair enough -- the tests do work with Python 2.7. Nice job!\n\n...However, I'm afraid that 2.6 is still too mainstream as to have the tests broken on it. You need to work around the Zip issue on 2.6 before I can merge this. I'd suggest using GZip instead of Zip.\n\nThanks in advance!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119", "body": "This is perfect, thank you very much! Merging now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714", "body": "Hey, just stepping by to remind you that the linking exception is indeed _very_ permissive: you could even link your own Python library with a static version of libgit2 without it affecting your own program's license. I'm looking forward to see what can you come up with the git-python streaming framework. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958", "body": "This changed in libgit2 as of\nhttps://github.com/libgit2/libgit2/commit/44908fe763b1a2097b65c86130ac679c458df7d2\n\nFeel free to update pygit2.c if I don't get the chance to soon.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750", "body": "This appears to have been fixed by 9e919c39662ecc0f0080. I was able to build successfully at HEAD, so I'm going to close this issue. Let me know if you still have problems.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629", "body": "On Thu, Mar 31, 2011 at 03:27, Byron <\nreply@reply.github.com>wrote:\n\n> Hi,\n> \n> As the answer to this question might be interesting for others as well, I\n> make it public using the issue system.\n> \n> Pygit2 uses the same license as libgit2, the GPL with linkage exception.\n> The problem I see is that this exception doesn't apply to the usage of\n> pygit2 within other python programs and libraries which are not necessarily\n> licensed under GPL.\n\nI've been assured by a lawyer that the linkage exception does apply to the\nnormal Python import mechanism. So you can safely \"import pygit2\" from a BSD\nproject without making that project GPL+exception. (You still cannot safely\nincorporate pygit2 source code in the source of a BSD project.)\n\n> For instance, I would be interested in using pygit2 in one of my projects,\n> gitdb, which in turn can be used by git-python. Both are licensed under\n> NewBSD, so I am worried that using pygit2 would compromise this license and\n> force it into the GPL.\n\nAs long as \"using\" == \"importing\", this is fine.\n\n> Could you please clarify the situation ?\n> Thank you,\n> Sebastian\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/issues/15\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "peti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459", "body": "I can confirm that this patch fixes the build error.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jszakmeister": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439", "body": "I realized that shortly after I submitted the pull request (and I thought I closed this one... but perhaps I forgot).  Thanks anyways!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "honza": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Byron": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525", "body": "According to wikipedia, the LGPL, even though it usually refers to library linking, may also be generalized into 'using' the library.\nAs python doesn't explicitly link pygit2 when importing it, the LGPL wouldn't really help unless we just regard pygit2 as being 'used' by my library. I don't know what lawyers say about that, but I would be fine with LGPL, from what I read in the wiki at least.\n\nPersonally I think the LGPL was designed just with dynamic and static libraries in mind, but maybe it can be widened to the general use of one library by another, no matter which system of linkage is actually employed.\n\nMaybe it would already be enough to adjust the linkage exemption to state that it may be linked to _and_ imported. This should be clear enough to allow git-python to use it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643", "body": "Great to hear, thanks !\nI am quite eager to find out how libgit2 performs within the git-python streaming framework, so I will try to implement a gitdb which allows to obtain object information and object streams. Lets see how that works out :).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "encukou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320", "body": "Does this make sense for Python 2? Maybe the str & unicode types are too interchangeable there to select functionality based on them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "valueof": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226", "body": "May I ask what was the reasoning behind this change? I have to update all my code and tests now. :-(\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333", "body": "Alright, understood. Without any other alternatives, we basically have no choice but to rely on alpha software\u2014so no worries about that, I realize that interfaces do change. I was just curious about the reasoning.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luztak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091", "body": "Is there any func or class for push,please?Or could you tell me how push works?thx.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "richo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309", "body": "Typo in commit message, should be pygit2.com\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644", "body": "Is there a list where this is tracked? I spent about an hour trying to fix the broken linker on an old machine I was getting unresolved symbol errors on due to this one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823", "body": "I agree completely. Having to have \"install libgit2 from their development head\" in the install instructions for my project is pretty awkward.\n\nIn this instance it was my fault for not diagnosing properly, I'll keep this in mind going forward. Cheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wking": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834", "body": "On Sat, Jan 19, 2013 at 09:30:54AM -0800, Richo Healey wrote:\n\n> Having to have \"install libgit2 from their development head\" in the\n> install instructions for my project is pretty awkward.\n\nThis should all settle down once libgit2 freezes their API (soon?\nlibgit2/libgit2#1028).  In the mean time, there are usually known-good\nlibgit2 SHAs in the pygit2 upgrade commits.  The problem with _not_\ntracking the development branch of libgit2 is that their master branch\nhasn't been bumped since 2012-05-19, so lots of features are missing\nfrom the master branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Gonnzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382", "body": "\u0421 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0431\u043b\u044f (\u041a\u0430\u0440\u0430\u0441\u044c)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cboos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808", "body": "I suppose this is a typo... \"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH\"\ns/MATC/MATCH/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "alexband": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373", "body": "why `GIT_DIFF_LINE_CONTEXT` has been removed ?\n\nin version 0.18.0 \nI can do\n\n`from pygit2 import GIT_DIFF_LINE_CONTEXT`\n\nbut now I can't , why?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412", "body": "btw, I thought this parameter is used to control how many context line I would show in diff, like `git diff -U`, is this correct, how can I \nuse it properly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766", "body": "hi @carlosmn is `git_diff_list` depreciated in libgit2\uff0c we here has a kind of fork of `pygi2` with some modification. The fork hasn't sync with the main repo for a while, and now there are some conflicts with `git_diff_list`, I found your commit to adjust to libgit2, is there any explanation or documentation about the `git_diff_list` thing, either in libgit2 or pygit2. Thanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360", "body": "seems that it's just rename https://github.com/libgit2/libgit2/commit/3ff1d123736e5686fb9ec16e65828d5b8ffa2b30\n\nso I can just rename it , cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081", "body": "sorry, I do not familiar with C. \nThe old code seems like try to compatible with either unicode and bytes. So if use \"ssi\", we can accept them both or does this require specific python version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248", "body": "Thanks. Then it's much clear now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132", "body": "@cholin hi, I think here exist a problem, that, for `git_diff_patch_get_line_in_hunk`, this get a line detail for every line, but only the last one of 'origin' get reserved in hunk.origin.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006", "body": "this will break application code. and I change my code to receive int to char now. if this can be noticed in advance pull from master.\nby the way, do you guys recommend we application developer always use the latest code of pygit2?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "arrbee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676", "body": "These constants are used when looking at text lines in a diff to indicate if the line is a context line (or and added line or a removed line). The set the number of context lines, you need to set the `context_lines` value in the `git_diff_options`. It appears to me that that field of the options is not current exposed through pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463", "body": "@cholin Just a heads up, in recent libgit2 updates to the `development` branch, I had to introduce a new constant `GIT_DIFF_LINE_CONTEXT_EOFNL` that deals with the case where both sides of a diff end without an newline and those lines appear in the context at the end of the diff. When I added this new constant, I changed the values for the `...EOFNL` constants so that we're no longer using `'\\n'` as a value (since I worried it was confusing). The new values are `'>'` is ADD_EOFNL, `'<'` is DEL_EOFNL, and `'='` is CONTEXT_EOFNL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "cholin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623", "body": "In pygit2 we convert the `context_line` to unicode (for python2/3 compability reasons). So if you use these constants for comparison it will fail. I think '+','-',' ' and '\\n' are more than enough meaningful. Btw pygit2 has support for `context_lines` with `#77b5cdc` (not yet merged to master).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195", "body": "Well unicode and python is a bit messy. But PyArg_ParseTuple with `s` as argument will convert Strings and Unicode Strings to a c string pointer. So we can use PyArg_ParseTuple and do not loose any functionalities... Check the api: [python2.7](http://docs.python.org/2.7/c-api/arg.html) and [python3](http://docs.python.org/2.7/c-api/arg.html)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703", "body": "I do not think you should use the latest version of pygit2 in your application. Right now the api isn't stable. We try to avoid these changes but better now than after a 1.0 release (which could be in near future). If you depend on a recent change, well then you have no other choice...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "luchuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324", "body": ":beer:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "guysoft": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816", "body": "Hey,\nWhy was the MergeResult object object removed? How do I get now the oid of the merged result? It does not seem to appear in the working directory for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684", "body": "thank you :heart: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "carlosmn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992", "body": "Yes I do. `builder` used to be called `bld` and it looks like I didn't clean up properly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739", "body": "It doesn't seem to mind a `git_treebuilder` that much (it doesn't crash in the tests). Some example code must have been wrong about `Py_XDECREF`. I saw it being used with a guard. I'll update shortly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804", "body": "Now that you mention it, it does look silly, will fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335", "body": "We have `to_unicode` for this which works across verisions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225", "body": "Why not use `\"s\"` as the format directly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262", "body": "Because it's a special function. I went back and forth on that one, but this is a private function that only makes sense inside pygit2. The consistency should go the other way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235", "body": "It's a leftover from working with less abstract constructions; but it's a guess as to how many parameters will actually be passed versus how many we will be looking at. I'm not a fan of looking up the same key twice, but it can be reduced.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294", "body": "I remember now why I wanted to iterate over the inputs instead of checking for the known keys: if the programmer using this method makes a typo, we will ignore that option instead of complaining, which can cause subtle bugs, as there is no indication that we're ignoring an argument that was passed. I didn't end up doing it as we just have the two things, but when this gets extended, we should raise an exception if we get something we don't recognise as an option.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992", "body": "All of these values will be unitialised if they're not passed. Instead of this, you should let `PyArg_ParseTupleAndKeywords` write into the options structure directly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723", "body": "Again, this has nothing to do with the username the user may have passed as a hint. _This_ username is the only one that counts, and it has to be the username as which you wish to authenticate to the ssh host.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524", "body": "There's no need for this line. You're already setting the version above with the init function. If the version does increase, this would cause libgit2 to consider the struct to have a different layout.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924", "body": "`self._self_handle` needs to be set to `None` after the push operation completes, next to freeing the push object itself.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737", "body": "One of these lies is redundant. If we're going to rely on the superclass' constructor, then there's no need for us to store the username explicitly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "xtao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396", "body": "I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021", "body": "More than one space.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "vtemian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155", "body": "Why not `from_c` like in `Index.from_c`? Is more consistent this way\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831", "body": "Why do you need to iterate? You can do it with 2 if statements:\n\n``` python\nif 'strategy' in kwargs:\n  copts.checkout_strategy = kwargs['strategy']\n\nif 'directory' in kwargs:\n  target_dir = ffi.new('char[]', to_str(kwargs['directory']))\n  refs.append(target_dir)\n  copts.target_directory = target_dir\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881", "body": "I think you delete by mistake an `h` from `Show`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ArnoVanLumig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170", "body": "Thanks!\n\nI actually figured that out myself but forgot to commit and push it... Thanks for the heads-up!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mduggan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362", "body": "Ah, I was doing it in a little bit of a weird order.. I wanted to create the \"default\" callbacks first so that any error could raise before the custom callbacks had been set.. but fair point about the version number being set differently on the two lines.. if it changes in one place it will need to change in both,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"onovy": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/765", "title": "big endian: FAIL: test_no_context_lines (test.test_patch.PatchTest)", "body": "Hi,\r\n\r\ntest.test_patch.PatchTest.test_no_context_lines fails on archs mips, s390x, hppa, powerpc or ppc64. I think all of them are \"big endian\". This bug is new in 0.26.3, because before this version test_no_context_lines test didn't exists.\r\n\r\n```\r\nFAIL: test_no_context_lines (test.test_patch.PatchTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/<<PKGBUILDDIR>>/test/test_patch.py\", line 196, in test_no_context_lines\r\n    self.assertEqual(context_count, 0)\r\nAssertionError: 1 != 0\r\n```\r\n\r\nSee: https://buildd.debian.org/status/package.php?p=python-pygit2\r\n\r\nThanks for fixing.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/764", "title": "tree.diff_to_tree results in many unnecessary sys calls", "body": "Hi!\r\n\r\nI'm currently working on a git scanner with a very high throughput for my bachelor thesis.\r\nAs the scanner runs with 8 threads, I'm observing severe slowdowns on my server.\r\nAfter running the command with `strace` i noticed that there are a whole lot of unnecessary syscalls issued on each diff. It looks like  for each file in the diff, there is one `stat` for the actual file, two `access` for `/etc/gitattributes` and two `stat` for `/info/attributes`. \r\n\r\nThis results in a lot of syscalls and slows things down significantly as the program seems to wait for those calls most of the time. The repositories are located inside `/tmp` and cleaned after each scan. There are no signs of RAM shortage as there are about 8GB+ unused space in the `/tmp` fs.\r\n\r\nThe repositories are cloned `bare`. The actual function call is:\r\n```\r\ndiff = commit.tree.diff_to_tree(commit.parents[0].tree)\r\nself.commit_stats[commit.hex] = {\r\n    'additions': diff.stats.insertions,\r\n    'deletions': diff.stats.deletions,\r\n}\r\n```\r\n\r\nI'm not sure if this is the right place or if this is rather a libgit2 issue.\r\nAnyway I'm happy for any help as I'm not that familiar with the pythin-C binding mechanics.\r\n\r\nRelevant strace output example:\r\n```\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnareb": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/752", "title": "Performance: speed of getting `blob.data` for large files (as compared to GitPython)", "body": "I have compared speed of equivalent to `git show <revision>:<pathname>` in both pygit2 and GitPython (the pure-Python implementation). In all other cases that I have tested pygit2 is faster, but for very large files `git show` / `git cat-file` equivalent is slower.\r\n\r\npygit2 code:\r\n``` python\r\nblob = repo.revparse_single(commit + ':' + path)\r\nresult = blob.data\r\n```\r\n\r\nGitPython code:\r\n``` python\r\nblob = repo.rev_parse(commit + ':' + path)\r\nresult = blob.data_stream.read()\r\n```\r\n\r\nDo you have any ideas why pygit2 is slower here?\r\n\r\nP.S. would it be difficult to add streaming access?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750", "title": "Suggestion: better handling of `repo.set_head(pygit2.Commit)`", "body": "I have tried to emulate `git checkout --detach <commit>` in pygit2, to create **detached HEAD** checkout, and I did come up with the following rough equivalent (though the following does not uses transactions as git does):\r\n\r\n``` python\r\nrev = repo.revparse_single(commit_name)\r\nrepo.checkout_tree(rev)\r\nrepo.set_head(rev.id)\r\n```\r\n\r\nHowever when I tried to use simply `repo.set_head(rev)`, I got the following error:\r\n\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-35-9612528ec0ac> in <module>()\r\n----> 1 repo.set_head(rev)\r\n\r\n/usr/lib/python2.7/dist-packages/pygit2/repository.pyc in set_head(self, target)\r\n    293\r\n    294         # if it's a string, then it's a reference name\r\n--> 295         err = C.git_repository_set_head(self._repo, to_bytes(target))\r\n    296         check_error(err)\r\n    297\r\n\r\nTypeError: initializer for ctype 'char *' must be a cdata pointer, not _pygit2.Commit\r\n```\r\n\r\nIt would be nice if `pygit2.Commit` object was automatically peeled, but if it is decided to be not good idea, then what it needs is more user-friendly error message than the one above.\r\n\r\n-----\r\npygit2 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738", "title": "`repo.diff(c1, c2, flags=pygit2.GIT_DIFF_FIND_RENAMES)` reverses diff", "body": "First complaint is that there is no documentation and no examples of using `flags` (not `flag` as in description of parameters) with `Repository.diff`: http://www.pygit2.org/diff.html . Therefore I am not sure if I am using the API correctly.\r\n\r\nSecond, using `flags=pygit2.GIT_DIFF_FIND_RENAMES` for some reason **reverses** diff.\r\n\r\nCompare \r\n```\r\n>>> repo = pygit2.Repository('path/to/repo')\r\n>>> repo.diff('HEAD^', 'HEAD', flag=pygit2.GIT_DIFF_FIND_RENAMES).patch`\r\n```\r\nwith \r\n```\r\n>>> repo.diff('HEAD^', 'HEAD').patch\r\n```\r\n\r\n-----\r\n\r\npygit2.LIBGIT2_VERSION: '0.26.0'\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pypingou": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/747", "title": "Broken GIT_SORT_TIME ?", "body": "This is a script to reproduce the behavior I'm seeing:\r\n````\r\n#!/usr/bin/env python\r\n\r\nimport tempfile\r\nimport time\r\nimport os\r\n\r\nimport pygit2\r\n\r\npath = tempfile.mkdtemp(prefix='pygit2_test_')\r\nrepo = pygit2.init_repository(path)\r\n\r\nauthor = pygit2.Signature('Alice Author', 'alice@authors.tld')\r\ncommitter = pygit2.Signature('Cecil Committer', 'cecil@committers.tld')\r\n\r\n# Commit #1\r\n\r\n # Create a file in that git repo\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\nparents = []\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #1',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents,\r\n))\r\ncommit1 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n# Commit #2\r\n\r\nparents = [commit1.oid.hex]\r\n\r\nsubfolder = os.path.join('folder1', 'folder2')\r\nos.makedirs(os.path.join(path, subfolder))\r\n# Create a file in that git repo\r\nwith open(os.path.join(path, subfolder, 'file'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz')\r\nrepo.index.add(os.path.join(subfolder, 'file'))\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #2',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit2 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n\r\n# Commit #3\r\n\r\nparents = [commit2.oid.hex]\r\n\r\n# Update the sources file\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz!')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #3',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit3 = repo.revparse_single('HEAD')\r\n\r\n\r\nprint('')\r\nmain_walker = repo.walk(commit3.oid.hex, pygit2.GIT_SORT_TIME)\r\ncommits_msgs = []\r\nwhile 1:\r\n    try:\r\n        com = main_walker.next()\r\n        print(com.message)\r\n        print(com.oid.hex)\r\n    except StopIteration:\r\n        break\r\n````\r\n\r\nIt gives me the following output:\r\n````\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\n\r\nCommit #3\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\nCommit #1\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\nCommit #2\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n````\r\n\r\nThe first three lines are the commit as they are committed.\r\nThe following lines are the commit message and hash as ``repo.walk(commit3, pygit2.GIT_SORT_TIME)`` is returning them.\r\n\r\nSomething looks broken to me :)", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/747/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Bysmyyr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/732", "title": "hunk.final_committer.name not work if email is empty", "body": "Hi, I found this error:\r\n\r\nif email is missing, it gives error \"Signarure cannot have an empty name or email\"\r\n\r\nin libgit2 Slack channel we discuss it and end up that in `wrap_signature` pygit2 creates new signature where email cannot be empty. It maybe should use `git_signature_dup` instead?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yan12125": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/731", "title": "Document KeypairFromAgent", "body": "I didn't know that feature until I check codes from both libgit2 and pygit2. I think it would be helpful to have that documented in http://www.pygit2.org/remotes.html.\r\n\r\nGoogling reveals another confused developer like me :-) https://github.com/saltstack/salt/issues/40008#issuecomment-286434931", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santublr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/729", "title": "pygit2 installation error. ", "body": "This issue which I'm reporting may be repetative one, but after googling and trying all the options I'm still not able to load the right pygit2.\r\n\r\npygit2 version 0.22.0\r\nlibgit2 version 0.22.0\r\npycparse version 2.18\r\ncffi version 0.9.2\r\nPython Version 3.3.2\r\nOS CentOS release 6.8 (Fina\r\n\r\n\r\npython3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LD_LIBRARY_PATH=$LIBGIT2/lib\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LIBGIT2=/usr/local\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nImportError: No module named pygit2\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nicolasdespres": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/727", "title": "create_commit does not update the reflog", "body": "Hi,\r\n\r\nI have noticed that v0.26.0 of `create_commit` does not create an entry in the reflog for the initial commit of a branch.\r\n\r\n```python\r\n/private/tmp\r\n4> mkdir d\r\n\r\n/private/tmp\r\n5> cd d\r\n/private/tmp/d\r\n\r\n/private/tmp/d\r\n6> import pygit2\r\n\r\n/private/tmp/d\r\n7> repo = pygit2.init_repository(\".\")\r\n\r\n/private/tmp/d\r\n8> repo.config[\"user.email\"] = \"foo@bar.com\"\r\n\r\n/private/tmp/d\r\n9> foo = repo.create_blob(\"foo\")\r\n\r\n/private/tmp/d\r\n10> builder = repo.TreeBuilder()\r\n\r\n/private/tmp/d\r\n11> builder.insert(\"foo\", foo, pygit2.GIT_FILEMODE_BLOB)\r\n\r\n/private/tmp/d\r\n12> tree_id = builder.write()\r\n\r\n/private/tmp/d\r\n13> repo.create_commit(\"refs/test\", repo.default_signature, repo.default_signature, \"test\", tre\r\n13: e_id, [])\r\n13> f610cdd139fab6f738dfaff52839a552a6b8bb9e\r\n\r\n/private/tmp/d\r\n14> git reflog refs/test\r\n  File \"<ipython-input-14-afa1bc8c3c03>\", line 1\r\n    git reflog refs/test\r\n             ^\r\nSyntaxError: invalid syntax\r\n\r\n\r\n/private/tmp/d\r\n15> !git reflog refs/test\r\n\r\n/private/tmp/d\r\n16> !git --no-pager reflog refs/test\r\n\r\n/private/tmp/d\r\n17> repo.references[\"refs/test\"].log\r\n17> <function Reference.log>\r\n\r\n/private/tmp/d\r\n18> repo.references[\"refs/test\"].log()\r\n18> <_pygit2.RefLogIter at 0x10db93bc0>\r\n\r\n/private/tmp/d\r\n19> list(repo.references[\"refs/test\"].log())\r\n19> []\r\n```\r\n\r\nHowever it works it is not an initial commit.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726", "title": "revparse_single does not understand date", "body": "Hi,\r\n\r\n`revparse_single` does not support date parsing:\r\n\r\n$ git rev-parse 'HEAD@{2 weeks ago}'\r\neebac5f1c21ec78e098a8f7b60facd726b30844e\r\n$ python3 -c 'import pygit2; pygit2.Repository(\".\").revparse_single(\"HEAD@{2 weeks ago}\")'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nKeyError: 'HEAD@{2 weeks ago}'\r\n\r\nI am using version 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "white-gecko": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/725", "title": "Support for Custom Merge drivers?", "body": "Is there any way of using a custom merge driver in pygit2? I've see this for libgit2: https://github.com/libgit2/libgit2/pull/3564 is this also possible to be used with pygit2 as it is?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smelnikov": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/724", "title": "How can I get current Tag reference?", "body": "First, I checkout TAG from my repo. \r\nThen I need resolve name of this TAG. But I can't get relevant reference object (HEAD is detached).\r\nPlease tell me, how this can be done?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Parakleta": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/723", "title": "GIT_SORT_TOPOLOGICAL is document backwards.", "body": "The documentation states that parents come before children, but actually children come before parents.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686", "title": "`git_commit_amend` not available.", "body": "Additionally `Repository.create_commit` fails if the first parent is not the tip of the branch being updated, so the behaviour cannot be fudged by making a new commit with the tip's parent.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680", "title": "`peel` arguments inconsistent.", "body": "`peel` is implemented twice, once in `object.c` and once in `reference.c`.  In the first it requires an argument and in the second it provides a default argument of `None`.  This is confusing when branches can be 'default' peeled but tags cannot.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ashmastaflash": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/722", "title": "Support `git bundle create`", "body": "Ideal form would be to have a class method for Repository that accepts a single argument for the output file path.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pklim101": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/717", "title": "How to solve 'LIBSSH2 not found.'?", "body": "when I execute the command 'cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/libgit2',\r\nI have the output bellow\uff1a\r\n\r\n> \r\n\r\n-- Checking for module 'libcurl' \r\n--   Found libcurl, version 7.15.5  \r\n-- Could NOT find HTTP_Parser (missing: HTTP_PARSER_INCLUDE_DIR HTTP_PARSER_LIBRARY)   \r\n-- http-parser version 2 was not found; using bundled 3rd-party sources.  \r\n-- Checking for module 'libssh2'  \r\n--   No package 'libssh2' found  \r\n-- LIBSSH2 not found. Set CMAKE_PREFIX_PATH if it is installed outside of the default search path.\r\n\r\nthere are two module not fund, How can I solve it? thanks!", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tongtongtongtong": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/716", "title": "pygit2.GIT_DIFF_IGNORE_WHITESPACE result Inconsistent", "body": "git command:\r\ndiff --git a/Makefile b/Makefile\r\nindex bb20e89..c25d045 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -3,4 +3,5 @@ install:\r\n \r\n clean: \r\n        rm -rf tgit-statistics \r\n+       \r\n qed \r\n\\ No newline at end of file\r\n\r\npygit2:\r\nrepo.diff(from_id, to_id, cached=True, flags=pygit2.GIT_DIFF_IGNORE_WHITESPACE, context_lines=3, interhunk_lines=3)\r\n\r\ndiff --git a/Makefile b/Makefile\r\nindex bb2..c25 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -5,0 +6 @@ clean:\r\n+", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbaiter": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/712", "title": "`Repository.diff(cached=True)` does not list diffs for indexed files", "body": "This is with pygit2 version 0.24.0.\r\n\r\n```\r\n$ git init\r\nInitialized empty Git repository in /tmp/minimal/.git/\r\n$ touch foo\r\n$ git add foo\r\n$ git commit -am \"First commit\"\r\n[master (root-commit) 3551222] First commit\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 foo\r\n$ echo \"foobar\" >> foo                                                                                                                                                                                                                                                                                 \r\n$ git add foo\r\n$ git diff --cached\r\ndiff --git a/foo b/foo\r\nindex e69de29..323fae0 100644\r\n--- a/foo\r\n+++ b/foo\r\n@@ -0,0 +1 @@\r\n+foobar\r\n$ python\r\n>>> import pygit2\r\n>>> repo = pygit2.Repository('.')\r\n>>> list(repo.diff(cached=True))\r\n[]\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmr232": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/709", "title": "Type Annotations", "body": "I was thinking of adding type annotations to some of the APIs to assist IDEs in parsing them and providing useful completion.\r\n\r\nSince it currently does not exist in the code, I preferred asking before coding.\r\nDue to supporting both Python 2 and 3, I think the way to do it is to use syntax present [here](http://mypy.readthedocs.io/en/latest/python2.html).\r\n\r\nThere are some drawbacks:\r\n1. Adding a new dependency - the `typing` package\r\n1. Annotation comments are not the prettiest thing\r\n\r\nBut if we only the do the required minimum, we get more clarity when using the library, and can also use `mypy` as a verification step for new code.\r\n\r\n@jdavid what is your opinion?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699", "title": "libssh2", "body": "I think it would be good to add libssh2 to the builds to provide SSH support.\r\nOn Windows it takes quite some work to get it working (no success yet on my side). Haven't tried other OSs yet.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701", "body": "This closes #669 ", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "FabriceSalvaire": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/704", "title": "How to implement (un)staging and query staging status ?", "body": "Not a bug, but I cannot figure out how to achieve this using pygit2 / libgit. Does someone have clues about this ?\r\n\r\nI tried to get information from this page http://www.pygit2.org/working-copy.html and I found https://github.com/libgit2/libgit2sharp/blob/master/LibGit2Sharp/Commands/Stage.cs and https://github.com/libgit2/libgit2/issues/3632\r\n\r\nI want to implement staging feature to my code review tools: https://github.com/FabriceSalvaire/CodeReview\r\n\r\n**Is http://stackoverflow.com/questions/tagged/libgit2 the right place to discuss on pygit2 ???**", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/705", "title": "Added recipe for git-add and git-reset (staging)", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "niven823": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/702", "title": "Repository.update_submodules() got Request failed with status code: 401", "body": "I thought update_submodules()'s requires adding parameter of callbacks for RemoteCallbacks.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ignatenkobrain": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/693", "title": "[RFE] rebase routines", "body": "libgit2 supports rebasing, but pygit2 doesn't expose it. It would be very useful if it could.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wme-at-contact-de": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/687", "title": "Possible encoding problem with Repository.file_status", "body": "If I try to get the status of a single file using Repository.file_status, I get a \"KeyError\" when the path contains non-ASCII characters like \"\u00e4\" or \"\\u00A0\" (non breaking space\").\r\n\r\nThe problem seems to be that \"Repository_status_file\" uses \"py_path_to_c_str\" to convert the path. Which encodes the path using the Python file system encoding.\r\n\r\nIf I encode the string myself using \"utf-8\", it works fine.\r\n\r\nNot sure whether this is a libgit2, pygit2 or Windows problem...\r\n\r\nUsing pygit-0.24.2 on Python 3.5, running on Windows 7.\r\nsys.getfilesystemencoding() returns \"mbcs\".\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "catsclaw": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/684", "title": "repo.status() appears to be broken?", "body": "I'm running `repo.status().items()` in a pre-commit hook using the `-a` flag (`git commit -a -m \"Test\"`), and I get a result that looks like this:\r\n\r\n`[('config/git_hooks/pre-commit', 256), ('bin/run_flake8', 256)]`\r\n\r\nIf I run `git status` in that same process, I get:\r\n\r\n    On branch ops_1331_fix\r\n    Your branch is ahead of 'origin/ops_1331_fix' by 2 commits.\r\n      (use \"git push\" to publish your local commits)\r\n    Changes to be committed:\r\n      (use \"git reset HEAD <file>...\" to unstage)\r\n    \r\n\t    modified:   bin/run_flake8\r\n\t    modified:   config/git_hooks/pre-commit\r\n\r\nIn other words, pygit2 is reporting those files as not being staged, and git is reporting them as being staged. Why the discrepancy?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4s1": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/683", "title": "DoS on wrong password", "body": "As discussed in upstream bug report saltstack/salt#38230 pygit2 tries to authenticate indefinite with wrong credentials instead of failing after two consecutive failures with same authentication token as specified by https://tools.ietf.org/html/rfc7235#section-3.1\r\nPossible a libgit2 Bug if it's reproducable with other language bindings.\r\n\r\n\r\n## Testcase:\r\n### nginx dummy server configuration\r\nThis is just a stub configuration, no real repository needed\r\n````\r\nlocation ~ /git(/.*) {\r\n        add_header \"WWW-Authenticate\" \"Basic realm=\\\"Closed Areas\\\"\" always;\r\n        return 401;\r\n    }\r\n````\r\n### test client\r\n````python\r\n#!/bin/python2.7\r\n\r\nimport pygit2\r\n\r\nusername = 'dummyUser'\r\npassword = 'dummyPassword'\r\ncredentials = pygit2.UserPass(username, password)\r\ncallbacks = pygit2.RemoteCallbacks(credentials)\r\npygit2.clone_repository(\"http://git.demo.local/git/test.git\", \"test.git\", bare=True, callbacks=callbacks)\r\n\r\n````", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdavid": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/bf74b2a99341437a755390c692ae04a21737c9d7", "message": "Merge remote-tracking branch 'white-gecko/patch-1'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a1494574fff619ef135119487980d751877af20c", "message": "Fixing ImportError in some cases, bug #658"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9b047fe18a4313596e567dda463554f6d9a416d6", "message": "Fix running the tests with tox"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5c96a46e2bfa2fa35d10a42fb51271da50d5685f", "message": "Release 0.26.3"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/91dfaf2a07225865b7bd09a0f1a49e933462c2f8", "message": "Review Patch, fixes #757"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c4e026095e7ce19793a0c811d35a1074f606b6a2", "message": "New Diff.deltas iterable"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d1c954f40f96816d3695a1eeb5d22a6beb32416d", "message": "Release 0.26.2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4804143f5590cf989f162973ec3a99c8314607bc", "message": "test: use self.assertXXX not assert\n\nBecause we use unittest, not pytest."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8944d0208a7468ec7d378247356677829b87766b", "message": "Merge remote-tracking branch 'cecedille1/fetch-prune'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3adda5509e5affb6a2f6f1daa0d02ee9e2d6d91b", "message": "docs: diff, add missing members"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694", "body": "I see from the traceback that you are using Python 2.6.1, it contains some bugs regarding zip files, like [issue 4710](http://bugs.python.org/issue4710). Could you try with a more recent version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416", "body": "From the traceback it looks like this has nothing to do with my patches, no regression here.\n\nSupporting Python 2.5 would take more work. I think it is not worth the effort, it is an old version and pygit2 is clearly understaffed. I think it is more interesting to spend time on supporting new versions (Python 3) than on supporting old versions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996", "body": "Accidentally I have reproduced the traceback you found with Python 2.5. It has nothing to do with 2.5 actually.\n\nIt happens pygit2 has two ways to run the tests. If setuptools is installed it will run the tests in-place. But if setuptools is not installed then you need to install pygit2 before running the tests (otherwise you will get that traceback), that's what the documentation says anyway:\n\n```\n$ python setup.py install\n$ python setup.py test\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027", "body": "About Python 2.6, it works fine.\n\nJust tested myself and reproduced the same error with 2.6.1:\n\n  IOError: [Errno 20] Not a directory: '/tmp/tmp_W_Hl9/testrepo/bye.txt'\n\nBut the tests pass with 2.6.2 (which was released almost two years ago). By the way I use myself Python 2.6\n\nAnyway, I am going to replace zipfile by tarfile as you suggest, since it looks more robust (the tests may even pass with 2.5)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072", "body": "Replaced zipfile by tarfile and now the tests pass even with Python 2.5 (on GNU/Linux, did not check Mac or Windows)\n\nIt was a bad idea to use zipfile in the first place.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264", "body": "cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360", "body": "Hello,\n\nI have merged the branch 'add-commit-attributes' by John Szakmeister. This adds Commit.parents, I needed that to\nimplement the equivalent to \"git log -- path\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919", "body": "This branch does not work after the recent changes to libgit2. I withdraw this pull request to open a new one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764", "body": "You can try my fork of pygit2 where this has been fixed:\n\n```\ngit://github.com/jdavid/pygit2.git\n```\n\nI asked for my changes to be merged, see https://github.com/libgit2/pygit2/pull/11\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445", "body": "There have been some more commits since I made this pull request, most important to keep pygit2 working after the changes to libgit2. But there are a few enhancements too:\n- New module function 'init_repository'\n- Added 'IndexEntry.path'\n- Started documentation on using pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641", "body": "The changes have been merged upstream, so this is fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196", "body": "pygit2 works with the 'master' branch of libgit2, commit b5c5f0f8086ee4\nis the tip of the 'development' branch\n\nOn Fri, 18 Mar 2011 05:31:07 -0700\nhonza\nreply@reply.github.com\nwrote:\n\n> Installed latest [libgit2][libgitsha], zlib and openssl. Using\n> [this][pysha] pygit2 revision, I can't get it to install:\n> \n> bash-3.2$ sudo python setup.py install\n> running install\n> running bdist_egg\n> running egg_info\n> writing pygit2.egg-info/PKG-INFO\n> writing top-level names to pygit2.egg-info/top_level.txt\n> writing dependency_links to pygit2.egg-info/dependency_links.txt\n> reading manifest file 'pygit2.egg-info/SOURCES.txt'\n> writing manifest file 'pygit2.egg-info/SOURCES.txt'\n> installing library code to build/bdist.macosx-10.6-universal/egg\n> running install_lib\n> running build_ext\n> building 'pygit2' extension\n> gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv\n> -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc\n> -arch x86_64 -pipe -I/usr/local/include\n> -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6\n> -c pygit2.c -o build/temp.macosx-10.6-universal-2.6/pygit2.o\n> pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356: error: void\n> value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be lipo: can't open input file: /var/tmp//ccSxjred.out (No\n> such file or directory) error: command 'gcc-4.2' failed with exit\n> status 1\n> \n> [libgitsha]:\n> https://github.com/libgit2/libgit2/commit/b5c5f0f8086ee4e9bccf0703386fd5219ac380c2\n> \n> [pysha]:\n> https://github.com/libgit2/pygit2/commit/6c7df765c1a9a186e721826121f50d0286b4040e\n\n## \n\nJ. David Ib\u00e1\u00f1ez\nItaapy http://www.itaapy.com         Tel +33 (0)1 42 23 67 45\n9 rue Darwin, 75018 Paris              Fax +33 (0)1 53 28 27 88\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490", "body": "I hope to update pygit2 by tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505", "body": "I don't like the \"GPLv2 + exception\" for pygit2 either. Personally I would prefer LGPLv3, that would be fine to you?\n\nTo change the license the agreement of everybody that contributed to pygit2 is required, starting by Dave Borowitz, who has written more than half of it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550", "body": "I think the behaviour must be the same for both Python 2 and 3, otherwise everything will be ore complicated (implementation, documentation, ...)\n\nBesides, in this case, the remark by @pyos [1] also applies to Python 2. Later on we will add to this method the ability to get an object by a short hex-sha, by calling `git_object_lookup_prefix`. If the hex-sha passed is 20 bytes long, how to know it is an hex-sha and not a raw-sha? I think to make the difference by the type is a fine solution.\n\n[1] https://github.com/libgit2/pygit2/issues/43#issuecomment-1791199\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935", "body": "Readability. It is not evident whether the word \"sha\" refers to the raw oid (20 bytes byte string) or to its hexadecimal form (40 chars text string). At least `.hex` has the virtue of not being ambiguous.\n\nNote that now we also have `object.oid`, the raw oid as a 20 bytes byte string. And that the old `.sha` and the new `.hex` are not exactly the same, before `.sha` was a byte string, now `.hex` is a text (unicode) string. So this was the right time to make the change.\n\nAlso, pygit2 is still, like libgit2, alpha software. So changes to the API may happen from time to time, they will be documented on every release.\n\nThis commit is part of the work to fix issue 43, https://github.com/libgit2/pygit2/issues/43\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780", "body": "www.pygit2.org actually, but it's to late to fix a commit message\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811", "body": "No. What I do is to keep a libgit2 clone and from time to time check whether pygit2 still works.\n\n(In my opinion, the problem is libgit2 does not release often enough.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984", "body": "I bet you mean:\n\n```\nif (builder) {\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078", "body": "- I wonder what Py_XDECREF will do with a `git_treebuilder` struct.\n- The point of using `Py_XDECREF` instead of `Py_DECREF` is that you don't need to check for NULL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062", "body": "This line should not be. The dealloc function is called when the refcount is zero. Decreasing it below zero is not correct.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085", "body": "Just changed this static method so it is shorter and fails on unexpected arguments.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "zhangyiant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/12d83a955333ff47c2f2c747be3b3f0206f6d674", "message": "Implement update_submodules using ffi."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f512bd94d47adbcb4ceb07ae76ddfece031c9dab", "message": "Add wrongly deleted declaration."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/bda601adc4a101b9b3131cf0a3ff84461e90e930", "message": "Import submodule_update related options."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/03deadb9f886ac2ecfafe8de1ffc2fb7f5c5f1c4", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c0eaa698d648af33a72c743ba296dd1427bcb81f", "message": "Fix patch-after-blob-free"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/83fdde770b72b836cc7ae1490803464f74bf9d3d", "message": "Add similar blob test"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3070a22c064b56da8d0a131be70d2addf40f7856", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d463fd7151b6d839afbd49628b7b923d7a958591", "message": "Make broken patch tests be less nebulous"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/007ac2a28dcd3b7dd13beade915fe62f936924ba", "message": "test_patch: assertEquals -> assertEqual"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/798e357ffe3d551a59a26b3f228e321cd6f2a4ed", "message": "Add more patch and blob tests that could fail"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/28c3828ef05d90e1ea6704c0bc60ad78c103af82", "message": "Add contextlines, interhunk lines to Patch.create_from"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a96da22cbf456fe2181e196877845b590cede606", "message": "Dont create blobs on the fly in test_patch, make patch kwargs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d5c8e6208c8ac33534c2bf36c7bc525d6bc5e756", "message": "Move declarations to top of functions"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/575905fd2c4791cb11d2f660e1c162c56878b23c", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e765acdb9c17103544d0f10f60fb12abd8ae91a6", "message": "Add bad arg tests to test_patch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ea1a08d25746dbb4613ea09350741fe7ae2ad5c1", "message": "Add static Patch.create_from method to create patches"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fourplusone": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cae2c2866e610d6b6baa318281f14e8a92cf7a3b", "message": "Clear clone_repo in Prune Test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cecedille1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/523f82e9094bd878d2bc1710ff40121ca8c8fbf6", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d0c224a1d8ce11c60592c57e1b139cd7d1ee0732", "message": "Implement prune option for fetch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ceb02490a554f1dc221049e24f6952c3d883edf0", "message": "Export the constants GIT_FETCH_PRUNE_*"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nhynes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/719", "title": "Rebased worktrees", "body": "This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexchamberlain": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/538", "title": "Add certificate callback.", "body": "Existing unit tests pass. Adapted from `__init__.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petrhosek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/405", "title": "Walker interface reimplemented with CFFI", "body": "I've reimplemented the `Walker` interface with CFFI; this is a first step towards reimplementing the entire pygit2 Object model with CFFI. It's supposed to be a straightforward rewrite, I haven't made any changes to the API to avoid breaking the backwards compatibility.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/346", "title": "Diff and Patch interface refactored", "body": "This is a complete refactoring of the diff and patch interface. The changes include:\n- Splitting `Diff` and `Patch` into separate classes and files, including respective tests. This largely follwos the recent development in `libgit2`.\n- Introducing `DiffDelta`, `DiffFile` and `DiffLine` classes and their respective iterators.\n- Moving the recently introduced `Blob` diff methods into patch again to be in line with the respective `libgit2` interface.\n\nThe biggest difference, apart from the code cleanup, is the lazy evaluation due to heavy use of iterators rather than evaluating everything ahead of time as in case of the existing code, which tends to be slow on larger projects.\n\nI have tried to make the interface as \"Pythonic\" as possible, while closely following the underlying `libgit2` C interface. However, some of you might think of a better abstraction and I'd happy to incorporate further changes into the patch.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596", "body": "Indeed, it was using the private clone URL. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600", "body": "Replaced the build instructions with a link to our website: that way it'll always be up to date.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355", "body": "Neat, thanks for this, but it looks like I got two pull requests for the same thing. ^^\n\nI've just merged the other one, and while I was at it fixed the test that was failing -- it was an issue in libgit2, so thanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527", "body": "Hey, this is very nice, but the new compressed text repository is making the tests fail:\n\n```\nTraceback (most recent call last):\nFile \"/Users/tanoku/src/pygit2/test/utils.py\", line 74, in setUp\nz.extractall(temp_dir)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 940, in extractall\nself.extract(zipinfo, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 928, in extract\nreturn self._extract_member(member, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 965, in _extract_member\ntarget = file(targetpath, \"wb\")\nIOError: [Errno 20] Not a directory: '/var/folders/0d/0dHASpI3E9Ca1CvFczxbjU+++TI/-Tmp-/tmpdHiwtC/testrepo/bye.txt'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331", "body": "Hm, 2.5.4 fails too, with the following error:\n\n```\nTraceback (most recent call last):\n  File \"setup.py\", line 87, in <module>\n    **kwargs\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/core.py\", line 151, in setup\n    dist.run_commands()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 974, in                 run_commands\n    self.run_command(cmd)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 994, in run_command\n    cmd_obj.run()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 121, in run\n    self.with_project_on_sys_path(self.run_tests)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 101, in with_project_on_sys_path\n    func()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 130, in run_tests\n    testLoader = loader_class()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 767, in __init__\n    self.parseArgs(argv)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 794, in parseArgs\n    self.createTests()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 800, in createTests\n    self.module)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 553, in loadTestsFromName\n    test = obj()\n  File \"/Users/tanoku/src/pygit2/test/__init__.py\", line 41, in test_suite\n    return unittest.defaultTestLoader.loadTestsFromNames(modules)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 541, in loadTestsFromName\n    parent, obj = obj, getattr(obj, part)\nAttributeError: 'module' object has no attribute 'test_blob'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753", "body": "Fair enough -- the tests do work with Python 2.7. Nice job!\n\n...However, I'm afraid that 2.6 is still too mainstream as to have the tests broken on it. You need to work around the Zip issue on 2.6 before I can merge this. I'd suggest using GZip instead of Zip.\n\nThanks in advance!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119", "body": "This is perfect, thank you very much! Merging now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714", "body": "Hey, just stepping by to remind you that the linking exception is indeed _very_ permissive: you could even link your own Python library with a static version of libgit2 without it affecting your own program's license. I'm looking forward to see what can you come up with the git-python streaming framework. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958", "body": "This changed in libgit2 as of\nhttps://github.com/libgit2/libgit2/commit/44908fe763b1a2097b65c86130ac679c458df7d2\n\nFeel free to update pygit2.c if I don't get the chance to soon.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750", "body": "This appears to have been fixed by 9e919c39662ecc0f0080. I was able to build successfully at HEAD, so I'm going to close this issue. Let me know if you still have problems.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629", "body": "On Thu, Mar 31, 2011 at 03:27, Byron <\nreply@reply.github.com>wrote:\n\n> Hi,\n> \n> As the answer to this question might be interesting for others as well, I\n> make it public using the issue system.\n> \n> Pygit2 uses the same license as libgit2, the GPL with linkage exception.\n> The problem I see is that this exception doesn't apply to the usage of\n> pygit2 within other python programs and libraries which are not necessarily\n> licensed under GPL.\n\nI've been assured by a lawyer that the linkage exception does apply to the\nnormal Python import mechanism. So you can safely \"import pygit2\" from a BSD\nproject without making that project GPL+exception. (You still cannot safely\nincorporate pygit2 source code in the source of a BSD project.)\n\n> For instance, I would be interested in using pygit2 in one of my projects,\n> gitdb, which in turn can be used by git-python. Both are licensed under\n> NewBSD, so I am worried that using pygit2 would compromise this license and\n> force it into the GPL.\n\nAs long as \"using\" == \"importing\", this is fine.\n\n> Could you please clarify the situation ?\n> Thank you,\n> Sebastian\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/issues/15\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "peti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459", "body": "I can confirm that this patch fixes the build error.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jszakmeister": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439", "body": "I realized that shortly after I submitted the pull request (and I thought I closed this one... but perhaps I forgot).  Thanks anyways!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "honza": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Byron": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525", "body": "According to wikipedia, the LGPL, even though it usually refers to library linking, may also be generalized into 'using' the library.\nAs python doesn't explicitly link pygit2 when importing it, the LGPL wouldn't really help unless we just regard pygit2 as being 'used' by my library. I don't know what lawyers say about that, but I would be fine with LGPL, from what I read in the wiki at least.\n\nPersonally I think the LGPL was designed just with dynamic and static libraries in mind, but maybe it can be widened to the general use of one library by another, no matter which system of linkage is actually employed.\n\nMaybe it would already be enough to adjust the linkage exemption to state that it may be linked to _and_ imported. This should be clear enough to allow git-python to use it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643", "body": "Great to hear, thanks !\nI am quite eager to find out how libgit2 performs within the git-python streaming framework, so I will try to implement a gitdb which allows to obtain object information and object streams. Lets see how that works out :).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "encukou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320", "body": "Does this make sense for Python 2? Maybe the str & unicode types are too interchangeable there to select functionality based on them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "valueof": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226", "body": "May I ask what was the reasoning behind this change? I have to update all my code and tests now. :-(\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333", "body": "Alright, understood. Without any other alternatives, we basically have no choice but to rely on alpha software\u2014so no worries about that, I realize that interfaces do change. I was just curious about the reasoning.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luztak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091", "body": "Is there any func or class for push,please?Or could you tell me how push works?thx.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "richo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309", "body": "Typo in commit message, should be pygit2.com\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644", "body": "Is there a list where this is tracked? I spent about an hour trying to fix the broken linker on an old machine I was getting unresolved symbol errors on due to this one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823", "body": "I agree completely. Having to have \"install libgit2 from their development head\" in the install instructions for my project is pretty awkward.\n\nIn this instance it was my fault for not diagnosing properly, I'll keep this in mind going forward. Cheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wking": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834", "body": "On Sat, Jan 19, 2013 at 09:30:54AM -0800, Richo Healey wrote:\n\n> Having to have \"install libgit2 from their development head\" in the\n> install instructions for my project is pretty awkward.\n\nThis should all settle down once libgit2 freezes their API (soon?\nlibgit2/libgit2#1028).  In the mean time, there are usually known-good\nlibgit2 SHAs in the pygit2 upgrade commits.  The problem with _not_\ntracking the development branch of libgit2 is that their master branch\nhasn't been bumped since 2012-05-19, so lots of features are missing\nfrom the master branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Gonnzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382", "body": "\u0421 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0431\u043b\u044f (\u041a\u0430\u0440\u0430\u0441\u044c)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cboos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808", "body": "I suppose this is a typo... \"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH\"\ns/MATC/MATCH/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "alexband": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373", "body": "why `GIT_DIFF_LINE_CONTEXT` has been removed ?\n\nin version 0.18.0 \nI can do\n\n`from pygit2 import GIT_DIFF_LINE_CONTEXT`\n\nbut now I can't , why?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412", "body": "btw, I thought this parameter is used to control how many context line I would show in diff, like `git diff -U`, is this correct, how can I \nuse it properly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766", "body": "hi @carlosmn is `git_diff_list` depreciated in libgit2\uff0c we here has a kind of fork of `pygi2` with some modification. The fork hasn't sync with the main repo for a while, and now there are some conflicts with `git_diff_list`, I found your commit to adjust to libgit2, is there any explanation or documentation about the `git_diff_list` thing, either in libgit2 or pygit2. Thanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360", "body": "seems that it's just rename https://github.com/libgit2/libgit2/commit/3ff1d123736e5686fb9ec16e65828d5b8ffa2b30\n\nso I can just rename it , cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081", "body": "sorry, I do not familiar with C. \nThe old code seems like try to compatible with either unicode and bytes. So if use \"ssi\", we can accept them both or does this require specific python version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248", "body": "Thanks. Then it's much clear now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132", "body": "@cholin hi, I think here exist a problem, that, for `git_diff_patch_get_line_in_hunk`, this get a line detail for every line, but only the last one of 'origin' get reserved in hunk.origin.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006", "body": "this will break application code. and I change my code to receive int to char now. if this can be noticed in advance pull from master.\nby the way, do you guys recommend we application developer always use the latest code of pygit2?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "arrbee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676", "body": "These constants are used when looking at text lines in a diff to indicate if the line is a context line (or and added line or a removed line). The set the number of context lines, you need to set the `context_lines` value in the `git_diff_options`. It appears to me that that field of the options is not current exposed through pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463", "body": "@cholin Just a heads up, in recent libgit2 updates to the `development` branch, I had to introduce a new constant `GIT_DIFF_LINE_CONTEXT_EOFNL` that deals with the case where both sides of a diff end without an newline and those lines appear in the context at the end of the diff. When I added this new constant, I changed the values for the `...EOFNL` constants so that we're no longer using `'\\n'` as a value (since I worried it was confusing). The new values are `'>'` is ADD_EOFNL, `'<'` is DEL_EOFNL, and `'='` is CONTEXT_EOFNL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "cholin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623", "body": "In pygit2 we convert the `context_line` to unicode (for python2/3 compability reasons). So if you use these constants for comparison it will fail. I think '+','-',' ' and '\\n' are more than enough meaningful. Btw pygit2 has support for `context_lines` with `#77b5cdc` (not yet merged to master).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195", "body": "Well unicode and python is a bit messy. But PyArg_ParseTuple with `s` as argument will convert Strings and Unicode Strings to a c string pointer. So we can use PyArg_ParseTuple and do not loose any functionalities... Check the api: [python2.7](http://docs.python.org/2.7/c-api/arg.html) and [python3](http://docs.python.org/2.7/c-api/arg.html)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703", "body": "I do not think you should use the latest version of pygit2 in your application. Right now the api isn't stable. We try to avoid these changes but better now than after a 1.0 release (which could be in near future). If you depend on a recent change, well then you have no other choice...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "luchuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324", "body": ":beer:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "guysoft": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816", "body": "Hey,\nWhy was the MergeResult object object removed? How do I get now the oid of the merged result? It does not seem to appear in the working directory for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684", "body": "thank you :heart: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "carlosmn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992", "body": "Yes I do. `builder` used to be called `bld` and it looks like I didn't clean up properly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739", "body": "It doesn't seem to mind a `git_treebuilder` that much (it doesn't crash in the tests). Some example code must have been wrong about `Py_XDECREF`. I saw it being used with a guard. I'll update shortly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804", "body": "Now that you mention it, it does look silly, will fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335", "body": "We have `to_unicode` for this which works across verisions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225", "body": "Why not use `\"s\"` as the format directly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262", "body": "Because it's a special function. I went back and forth on that one, but this is a private function that only makes sense inside pygit2. The consistency should go the other way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235", "body": "It's a leftover from working with less abstract constructions; but it's a guess as to how many parameters will actually be passed versus how many we will be looking at. I'm not a fan of looking up the same key twice, but it can be reduced.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294", "body": "I remember now why I wanted to iterate over the inputs instead of checking for the known keys: if the programmer using this method makes a typo, we will ignore that option instead of complaining, which can cause subtle bugs, as there is no indication that we're ignoring an argument that was passed. I didn't end up doing it as we just have the two things, but when this gets extended, we should raise an exception if we get something we don't recognise as an option.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992", "body": "All of these values will be unitialised if they're not passed. Instead of this, you should let `PyArg_ParseTupleAndKeywords` write into the options structure directly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723", "body": "Again, this has nothing to do with the username the user may have passed as a hint. _This_ username is the only one that counts, and it has to be the username as which you wish to authenticate to the ssh host.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524", "body": "There's no need for this line. You're already setting the version above with the init function. If the version does increase, this would cause libgit2 to consider the struct to have a different layout.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924", "body": "`self._self_handle` needs to be set to `None` after the push operation completes, next to freeing the push object itself.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737", "body": "One of these lies is redundant. If we're going to rely on the superclass' constructor, then there's no need for us to store the username explicitly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "xtao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396", "body": "I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021", "body": "More than one space.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "vtemian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155", "body": "Why not `from_c` like in `Index.from_c`? Is more consistent this way\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831", "body": "Why do you need to iterate? You can do it with 2 if statements:\n\n``` python\nif 'strategy' in kwargs:\n  copts.checkout_strategy = kwargs['strategy']\n\nif 'directory' in kwargs:\n  target_dir = ffi.new('char[]', to_str(kwargs['directory']))\n  refs.append(target_dir)\n  copts.target_directory = target_dir\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881", "body": "I think you delete by mistake an `h` from `Show`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ArnoVanLumig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170", "body": "Thanks!\n\nI actually figured that out myself but forgot to commit and push it... Thanks for the heads-up!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mduggan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362", "body": "Ah, I was doing it in a little bit of a weird order.. I wanted to create the \"default\" callbacks first so that any error could raise before the custom callbacks had been set.. but fair point about the version number being set differently on the two lines.. if it changes in one place it will need to change in both,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "3": {"onovy": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/765", "title": "big endian: FAIL: test_no_context_lines (test.test_patch.PatchTest)", "body": "Hi,\r\n\r\ntest.test_patch.PatchTest.test_no_context_lines fails on archs mips, s390x, hppa, powerpc or ppc64. I think all of them are \"big endian\". This bug is new in 0.26.3, because before this version test_no_context_lines test didn't exists.\r\n\r\n```\r\nFAIL: test_no_context_lines (test.test_patch.PatchTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/<<PKGBUILDDIR>>/test/test_patch.py\", line 196, in test_no_context_lines\r\n    self.assertEqual(context_count, 0)\r\nAssertionError: 1 != 0\r\n```\r\n\r\nSee: https://buildd.debian.org/status/package.php?p=python-pygit2\r\n\r\nThanks for fixing.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/764", "title": "tree.diff_to_tree results in many unnecessary sys calls", "body": "Hi!\r\n\r\nI'm currently working on a git scanner with a very high throughput for my bachelor thesis.\r\nAs the scanner runs with 8 threads, I'm observing severe slowdowns on my server.\r\nAfter running the command with `strace` i noticed that there are a whole lot of unnecessary syscalls issued on each diff. It looks like  for each file in the diff, there is one `stat` for the actual file, two `access` for `/etc/gitattributes` and two `stat` for `/info/attributes`. \r\n\r\nThis results in a lot of syscalls and slows things down significantly as the program seems to wait for those calls most of the time. The repositories are located inside `/tmp` and cleaned after each scan. There are no signs of RAM shortage as there are about 8GB+ unused space in the `/tmp` fs.\r\n\r\nThe repositories are cloned `bare`. The actual function call is:\r\n```\r\ndiff = commit.tree.diff_to_tree(commit.parents[0].tree)\r\nself.commit_stats[commit.hex] = {\r\n    'additions': diff.stats.insertions,\r\n    'deletions': diff.stats.deletions,\r\n}\r\n```\r\n\r\nI'm not sure if this is the right place or if this is rather a libgit2 issue.\r\nAnyway I'm happy for any help as I'm not that familiar with the pythin-C binding mechanics.\r\n\r\nRelevant strace output example:\r\n```\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnareb": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/752", "title": "Performance: speed of getting `blob.data` for large files (as compared to GitPython)", "body": "I have compared speed of equivalent to `git show <revision>:<pathname>` in both pygit2 and GitPython (the pure-Python implementation). In all other cases that I have tested pygit2 is faster, but for very large files `git show` / `git cat-file` equivalent is slower.\r\n\r\npygit2 code:\r\n``` python\r\nblob = repo.revparse_single(commit + ':' + path)\r\nresult = blob.data\r\n```\r\n\r\nGitPython code:\r\n``` python\r\nblob = repo.rev_parse(commit + ':' + path)\r\nresult = blob.data_stream.read()\r\n```\r\n\r\nDo you have any ideas why pygit2 is slower here?\r\n\r\nP.S. would it be difficult to add streaming access?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750", "title": "Suggestion: better handling of `repo.set_head(pygit2.Commit)`", "body": "I have tried to emulate `git checkout --detach <commit>` in pygit2, to create **detached HEAD** checkout, and I did come up with the following rough equivalent (though the following does not uses transactions as git does):\r\n\r\n``` python\r\nrev = repo.revparse_single(commit_name)\r\nrepo.checkout_tree(rev)\r\nrepo.set_head(rev.id)\r\n```\r\n\r\nHowever when I tried to use simply `repo.set_head(rev)`, I got the following error:\r\n\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-35-9612528ec0ac> in <module>()\r\n----> 1 repo.set_head(rev)\r\n\r\n/usr/lib/python2.7/dist-packages/pygit2/repository.pyc in set_head(self, target)\r\n    293\r\n    294         # if it's a string, then it's a reference name\r\n--> 295         err = C.git_repository_set_head(self._repo, to_bytes(target))\r\n    296         check_error(err)\r\n    297\r\n\r\nTypeError: initializer for ctype 'char *' must be a cdata pointer, not _pygit2.Commit\r\n```\r\n\r\nIt would be nice if `pygit2.Commit` object was automatically peeled, but if it is decided to be not good idea, then what it needs is more user-friendly error message than the one above.\r\n\r\n-----\r\npygit2 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738", "title": "`repo.diff(c1, c2, flags=pygit2.GIT_DIFF_FIND_RENAMES)` reverses diff", "body": "First complaint is that there is no documentation and no examples of using `flags` (not `flag` as in description of parameters) with `Repository.diff`: http://www.pygit2.org/diff.html . Therefore I am not sure if I am using the API correctly.\r\n\r\nSecond, using `flags=pygit2.GIT_DIFF_FIND_RENAMES` for some reason **reverses** diff.\r\n\r\nCompare \r\n```\r\n>>> repo = pygit2.Repository('path/to/repo')\r\n>>> repo.diff('HEAD^', 'HEAD', flag=pygit2.GIT_DIFF_FIND_RENAMES).patch`\r\n```\r\nwith \r\n```\r\n>>> repo.diff('HEAD^', 'HEAD').patch\r\n```\r\n\r\n-----\r\n\r\npygit2.LIBGIT2_VERSION: '0.26.0'\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pypingou": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/747", "title": "Broken GIT_SORT_TIME ?", "body": "This is a script to reproduce the behavior I'm seeing:\r\n````\r\n#!/usr/bin/env python\r\n\r\nimport tempfile\r\nimport time\r\nimport os\r\n\r\nimport pygit2\r\n\r\npath = tempfile.mkdtemp(prefix='pygit2_test_')\r\nrepo = pygit2.init_repository(path)\r\n\r\nauthor = pygit2.Signature('Alice Author', 'alice@authors.tld')\r\ncommitter = pygit2.Signature('Cecil Committer', 'cecil@committers.tld')\r\n\r\n# Commit #1\r\n\r\n # Create a file in that git repo\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\nparents = []\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #1',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents,\r\n))\r\ncommit1 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n# Commit #2\r\n\r\nparents = [commit1.oid.hex]\r\n\r\nsubfolder = os.path.join('folder1', 'folder2')\r\nos.makedirs(os.path.join(path, subfolder))\r\n# Create a file in that git repo\r\nwith open(os.path.join(path, subfolder, 'file'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz')\r\nrepo.index.add(os.path.join(subfolder, 'file'))\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #2',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit2 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n\r\n# Commit #3\r\n\r\nparents = [commit2.oid.hex]\r\n\r\n# Update the sources file\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz!')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #3',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit3 = repo.revparse_single('HEAD')\r\n\r\n\r\nprint('')\r\nmain_walker = repo.walk(commit3.oid.hex, pygit2.GIT_SORT_TIME)\r\ncommits_msgs = []\r\nwhile 1:\r\n    try:\r\n        com = main_walker.next()\r\n        print(com.message)\r\n        print(com.oid.hex)\r\n    except StopIteration:\r\n        break\r\n````\r\n\r\nIt gives me the following output:\r\n````\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\n\r\nCommit #3\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\nCommit #1\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\nCommit #2\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n````\r\n\r\nThe first three lines are the commit as they are committed.\r\nThe following lines are the commit message and hash as ``repo.walk(commit3, pygit2.GIT_SORT_TIME)`` is returning them.\r\n\r\nSomething looks broken to me :)", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/747/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Bysmyyr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/732", "title": "hunk.final_committer.name not work if email is empty", "body": "Hi, I found this error:\r\n\r\nif email is missing, it gives error \"Signarure cannot have an empty name or email\"\r\n\r\nin libgit2 Slack channel we discuss it and end up that in `wrap_signature` pygit2 creates new signature where email cannot be empty. It maybe should use `git_signature_dup` instead?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yan12125": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/731", "title": "Document KeypairFromAgent", "body": "I didn't know that feature until I check codes from both libgit2 and pygit2. I think it would be helpful to have that documented in http://www.pygit2.org/remotes.html.\r\n\r\nGoogling reveals another confused developer like me :-) https://github.com/saltstack/salt/issues/40008#issuecomment-286434931", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santublr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/729", "title": "pygit2 installation error. ", "body": "This issue which I'm reporting may be repetative one, but after googling and trying all the options I'm still not able to load the right pygit2.\r\n\r\npygit2 version 0.22.0\r\nlibgit2 version 0.22.0\r\npycparse version 2.18\r\ncffi version 0.9.2\r\nPython Version 3.3.2\r\nOS CentOS release 6.8 (Fina\r\n\r\n\r\npython3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LD_LIBRARY_PATH=$LIBGIT2/lib\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LIBGIT2=/usr/local\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nImportError: No module named pygit2\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nicolasdespres": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/727", "title": "create_commit does not update the reflog", "body": "Hi,\r\n\r\nI have noticed that v0.26.0 of `create_commit` does not create an entry in the reflog for the initial commit of a branch.\r\n\r\n```python\r\n/private/tmp\r\n4> mkdir d\r\n\r\n/private/tmp\r\n5> cd d\r\n/private/tmp/d\r\n\r\n/private/tmp/d\r\n6> import pygit2\r\n\r\n/private/tmp/d\r\n7> repo = pygit2.init_repository(\".\")\r\n\r\n/private/tmp/d\r\n8> repo.config[\"user.email\"] = \"foo@bar.com\"\r\n\r\n/private/tmp/d\r\n9> foo = repo.create_blob(\"foo\")\r\n\r\n/private/tmp/d\r\n10> builder = repo.TreeBuilder()\r\n\r\n/private/tmp/d\r\n11> builder.insert(\"foo\", foo, pygit2.GIT_FILEMODE_BLOB)\r\n\r\n/private/tmp/d\r\n12> tree_id = builder.write()\r\n\r\n/private/tmp/d\r\n13> repo.create_commit(\"refs/test\", repo.default_signature, repo.default_signature, \"test\", tre\r\n13: e_id, [])\r\n13> f610cdd139fab6f738dfaff52839a552a6b8bb9e\r\n\r\n/private/tmp/d\r\n14> git reflog refs/test\r\n  File \"<ipython-input-14-afa1bc8c3c03>\", line 1\r\n    git reflog refs/test\r\n             ^\r\nSyntaxError: invalid syntax\r\n\r\n\r\n/private/tmp/d\r\n15> !git reflog refs/test\r\n\r\n/private/tmp/d\r\n16> !git --no-pager reflog refs/test\r\n\r\n/private/tmp/d\r\n17> repo.references[\"refs/test\"].log\r\n17> <function Reference.log>\r\n\r\n/private/tmp/d\r\n18> repo.references[\"refs/test\"].log()\r\n18> <_pygit2.RefLogIter at 0x10db93bc0>\r\n\r\n/private/tmp/d\r\n19> list(repo.references[\"refs/test\"].log())\r\n19> []\r\n```\r\n\r\nHowever it works it is not an initial commit.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726", "title": "revparse_single does not understand date", "body": "Hi,\r\n\r\n`revparse_single` does not support date parsing:\r\n\r\n$ git rev-parse 'HEAD@{2 weeks ago}'\r\neebac5f1c21ec78e098a8f7b60facd726b30844e\r\n$ python3 -c 'import pygit2; pygit2.Repository(\".\").revparse_single(\"HEAD@{2 weeks ago}\")'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nKeyError: 'HEAD@{2 weeks ago}'\r\n\r\nI am using version 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "white-gecko": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/725", "title": "Support for Custom Merge drivers?", "body": "Is there any way of using a custom merge driver in pygit2? I've see this for libgit2: https://github.com/libgit2/libgit2/pull/3564 is this also possible to be used with pygit2 as it is?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smelnikov": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/724", "title": "How can I get current Tag reference?", "body": "First, I checkout TAG from my repo. \r\nThen I need resolve name of this TAG. But I can't get relevant reference object (HEAD is detached).\r\nPlease tell me, how this can be done?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Parakleta": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/723", "title": "GIT_SORT_TOPOLOGICAL is document backwards.", "body": "The documentation states that parents come before children, but actually children come before parents.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686", "title": "`git_commit_amend` not available.", "body": "Additionally `Repository.create_commit` fails if the first parent is not the tip of the branch being updated, so the behaviour cannot be fudged by making a new commit with the tip's parent.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680", "title": "`peel` arguments inconsistent.", "body": "`peel` is implemented twice, once in `object.c` and once in `reference.c`.  In the first it requires an argument and in the second it provides a default argument of `None`.  This is confusing when branches can be 'default' peeled but tags cannot.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ashmastaflash": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/722", "title": "Support `git bundle create`", "body": "Ideal form would be to have a class method for Repository that accepts a single argument for the output file path.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pklim101": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/717", "title": "How to solve 'LIBSSH2 not found.'?", "body": "when I execute the command 'cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/libgit2',\r\nI have the output bellow\uff1a\r\n\r\n> \r\n\r\n-- Checking for module 'libcurl' \r\n--   Found libcurl, version 7.15.5  \r\n-- Could NOT find HTTP_Parser (missing: HTTP_PARSER_INCLUDE_DIR HTTP_PARSER_LIBRARY)   \r\n-- http-parser version 2 was not found; using bundled 3rd-party sources.  \r\n-- Checking for module 'libssh2'  \r\n--   No package 'libssh2' found  \r\n-- LIBSSH2 not found. Set CMAKE_PREFIX_PATH if it is installed outside of the default search path.\r\n\r\nthere are two module not fund, How can I solve it? thanks!", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tongtongtongtong": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/716", "title": "pygit2.GIT_DIFF_IGNORE_WHITESPACE result Inconsistent", "body": "git command:\r\ndiff --git a/Makefile b/Makefile\r\nindex bb20e89..c25d045 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -3,4 +3,5 @@ install:\r\n \r\n clean: \r\n        rm -rf tgit-statistics \r\n+       \r\n qed \r\n\\ No newline at end of file\r\n\r\npygit2:\r\nrepo.diff(from_id, to_id, cached=True, flags=pygit2.GIT_DIFF_IGNORE_WHITESPACE, context_lines=3, interhunk_lines=3)\r\n\r\ndiff --git a/Makefile b/Makefile\r\nindex bb2..c25 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -5,0 +6 @@ clean:\r\n+", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbaiter": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/712", "title": "`Repository.diff(cached=True)` does not list diffs for indexed files", "body": "This is with pygit2 version 0.24.0.\r\n\r\n```\r\n$ git init\r\nInitialized empty Git repository in /tmp/minimal/.git/\r\n$ touch foo\r\n$ git add foo\r\n$ git commit -am \"First commit\"\r\n[master (root-commit) 3551222] First commit\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 foo\r\n$ echo \"foobar\" >> foo                                                                                                                                                                                                                                                                                 \r\n$ git add foo\r\n$ git diff --cached\r\ndiff --git a/foo b/foo\r\nindex e69de29..323fae0 100644\r\n--- a/foo\r\n+++ b/foo\r\n@@ -0,0 +1 @@\r\n+foobar\r\n$ python\r\n>>> import pygit2\r\n>>> repo = pygit2.Repository('.')\r\n>>> list(repo.diff(cached=True))\r\n[]\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmr232": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/709", "title": "Type Annotations", "body": "I was thinking of adding type annotations to some of the APIs to assist IDEs in parsing them and providing useful completion.\r\n\r\nSince it currently does not exist in the code, I preferred asking before coding.\r\nDue to supporting both Python 2 and 3, I think the way to do it is to use syntax present [here](http://mypy.readthedocs.io/en/latest/python2.html).\r\n\r\nThere are some drawbacks:\r\n1. Adding a new dependency - the `typing` package\r\n1. Annotation comments are not the prettiest thing\r\n\r\nBut if we only the do the required minimum, we get more clarity when using the library, and can also use `mypy` as a verification step for new code.\r\n\r\n@jdavid what is your opinion?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699", "title": "libssh2", "body": "I think it would be good to add libssh2 to the builds to provide SSH support.\r\nOn Windows it takes quite some work to get it working (no success yet on my side). Haven't tried other OSs yet.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FabriceSalvaire": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/704", "title": "How to implement (un)staging and query staging status ?", "body": "Not a bug, but I cannot figure out how to achieve this using pygit2 / libgit. Does someone have clues about this ?\r\n\r\nI tried to get information from this page http://www.pygit2.org/working-copy.html and I found https://github.com/libgit2/libgit2sharp/blob/master/LibGit2Sharp/Commands/Stage.cs and https://github.com/libgit2/libgit2/issues/3632\r\n\r\nI want to implement staging feature to my code review tools: https://github.com/FabriceSalvaire/CodeReview\r\n\r\n**Is http://stackoverflow.com/questions/tagged/libgit2 the right place to discuss on pygit2 ???**", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/705", "title": "Added recipe for git-add and git-reset (staging)", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "niven823": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/702", "title": "Repository.update_submodules() got Request failed with status code: 401", "body": "I thought update_submodules()'s requires adding parameter of callbacks for RemoteCallbacks.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ignatenkobrain": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/693", "title": "[RFE] rebase routines", "body": "libgit2 supports rebasing, but pygit2 doesn't expose it. It would be very useful if it could.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wme-at-contact-de": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/687", "title": "Possible encoding problem with Repository.file_status", "body": "If I try to get the status of a single file using Repository.file_status, I get a \"KeyError\" when the path contains non-ASCII characters like \"\u00e4\" or \"\\u00A0\" (non breaking space\").\r\n\r\nThe problem seems to be that \"Repository_status_file\" uses \"py_path_to_c_str\" to convert the path. Which encodes the path using the Python file system encoding.\r\n\r\nIf I encode the string myself using \"utf-8\", it works fine.\r\n\r\nNot sure whether this is a libgit2, pygit2 or Windows problem...\r\n\r\nUsing pygit-0.24.2 on Python 3.5, running on Windows 7.\r\nsys.getfilesystemencoding() returns \"mbcs\".\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "catsclaw": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/684", "title": "repo.status() appears to be broken?", "body": "I'm running `repo.status().items()` in a pre-commit hook using the `-a` flag (`git commit -a -m \"Test\"`), and I get a result that looks like this:\r\n\r\n`[('config/git_hooks/pre-commit', 256), ('bin/run_flake8', 256)]`\r\n\r\nIf I run `git status` in that same process, I get:\r\n\r\n    On branch ops_1331_fix\r\n    Your branch is ahead of 'origin/ops_1331_fix' by 2 commits.\r\n      (use \"git push\" to publish your local commits)\r\n    Changes to be committed:\r\n      (use \"git reset HEAD <file>...\" to unstage)\r\n    \r\n\t    modified:   bin/run_flake8\r\n\t    modified:   config/git_hooks/pre-commit\r\n\r\nIn other words, pygit2 is reporting those files as not being staged, and git is reporting them as being staged. Why the discrepancy?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4s1": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/683", "title": "DoS on wrong password", "body": "As discussed in upstream bug report saltstack/salt#38230 pygit2 tries to authenticate indefinite with wrong credentials instead of failing after two consecutive failures with same authentication token as specified by https://tools.ietf.org/html/rfc7235#section-3.1\r\nPossible a libgit2 Bug if it's reproducable with other language bindings.\r\n\r\n\r\n## Testcase:\r\n### nginx dummy server configuration\r\nThis is just a stub configuration, no real repository needed\r\n````\r\nlocation ~ /git(/.*) {\r\n        add_header \"WWW-Authenticate\" \"Basic realm=\\\"Closed Areas\\\"\" always;\r\n        return 401;\r\n    }\r\n````\r\n### test client\r\n````python\r\n#!/bin/python2.7\r\n\r\nimport pygit2\r\n\r\nusername = 'dummyUser'\r\npassword = 'dummyPassword'\r\ncredentials = pygit2.UserPass(username, password)\r\ncallbacks = pygit2.RemoteCallbacks(credentials)\r\npygit2.clone_repository(\"http://git.demo.local/git/test.git\", \"test.git\", bare=True, callbacks=callbacks)\r\n\r\n````", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdavid": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/bf74b2a99341437a755390c692ae04a21737c9d7", "message": "Merge remote-tracking branch 'white-gecko/patch-1'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a1494574fff619ef135119487980d751877af20c", "message": "Fixing ImportError in some cases, bug #658"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9b047fe18a4313596e567dda463554f6d9a416d6", "message": "Fix running the tests with tox"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5c96a46e2bfa2fa35d10a42fb51271da50d5685f", "message": "Release 0.26.3"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/91dfaf2a07225865b7bd09a0f1a49e933462c2f8", "message": "Review Patch, fixes #757"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c4e026095e7ce19793a0c811d35a1074f606b6a2", "message": "New Diff.deltas iterable"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d1c954f40f96816d3695a1eeb5d22a6beb32416d", "message": "Release 0.26.2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4804143f5590cf989f162973ec3a99c8314607bc", "message": "test: use self.assertXXX not assert\n\nBecause we use unittest, not pytest."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8944d0208a7468ec7d378247356677829b87766b", "message": "Merge remote-tracking branch 'cecedille1/fetch-prune'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3adda5509e5affb6a2f6f1daa0d02ee9e2d6d91b", "message": "docs: diff, add missing members"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694", "body": "I see from the traceback that you are using Python 2.6.1, it contains some bugs regarding zip files, like [issue 4710](http://bugs.python.org/issue4710). Could you try with a more recent version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416", "body": "From the traceback it looks like this has nothing to do with my patches, no regression here.\n\nSupporting Python 2.5 would take more work. I think it is not worth the effort, it is an old version and pygit2 is clearly understaffed. I think it is more interesting to spend time on supporting new versions (Python 3) than on supporting old versions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996", "body": "Accidentally I have reproduced the traceback you found with Python 2.5. It has nothing to do with 2.5 actually.\n\nIt happens pygit2 has two ways to run the tests. If setuptools is installed it will run the tests in-place. But if setuptools is not installed then you need to install pygit2 before running the tests (otherwise you will get that traceback), that's what the documentation says anyway:\n\n```\n$ python setup.py install\n$ python setup.py test\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027", "body": "About Python 2.6, it works fine.\n\nJust tested myself and reproduced the same error with 2.6.1:\n\n  IOError: [Errno 20] Not a directory: '/tmp/tmp_W_Hl9/testrepo/bye.txt'\n\nBut the tests pass with 2.6.2 (which was released almost two years ago). By the way I use myself Python 2.6\n\nAnyway, I am going to replace zipfile by tarfile as you suggest, since it looks more robust (the tests may even pass with 2.5)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072", "body": "Replaced zipfile by tarfile and now the tests pass even with Python 2.5 (on GNU/Linux, did not check Mac or Windows)\n\nIt was a bad idea to use zipfile in the first place.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264", "body": "cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360", "body": "Hello,\n\nI have merged the branch 'add-commit-attributes' by John Szakmeister. This adds Commit.parents, I needed that to\nimplement the equivalent to \"git log -- path\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919", "body": "This branch does not work after the recent changes to libgit2. I withdraw this pull request to open a new one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764", "body": "You can try my fork of pygit2 where this has been fixed:\n\n```\ngit://github.com/jdavid/pygit2.git\n```\n\nI asked for my changes to be merged, see https://github.com/libgit2/pygit2/pull/11\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445", "body": "There have been some more commits since I made this pull request, most important to keep pygit2 working after the changes to libgit2. But there are a few enhancements too:\n- New module function 'init_repository'\n- Added 'IndexEntry.path'\n- Started documentation on using pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641", "body": "The changes have been merged upstream, so this is fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196", "body": "pygit2 works with the 'master' branch of libgit2, commit b5c5f0f8086ee4\nis the tip of the 'development' branch\n\nOn Fri, 18 Mar 2011 05:31:07 -0700\nhonza\nreply@reply.github.com\nwrote:\n\n> Installed latest [libgit2][libgitsha], zlib and openssl. Using\n> [this][pysha] pygit2 revision, I can't get it to install:\n> \n> bash-3.2$ sudo python setup.py install\n> running install\n> running bdist_egg\n> running egg_info\n> writing pygit2.egg-info/PKG-INFO\n> writing top-level names to pygit2.egg-info/top_level.txt\n> writing dependency_links to pygit2.egg-info/dependency_links.txt\n> reading manifest file 'pygit2.egg-info/SOURCES.txt'\n> writing manifest file 'pygit2.egg-info/SOURCES.txt'\n> installing library code to build/bdist.macosx-10.6-universal/egg\n> running install_lib\n> running build_ext\n> building 'pygit2' extension\n> gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv\n> -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc\n> -arch x86_64 -pipe -I/usr/local/include\n> -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6\n> -c pygit2.c -o build/temp.macosx-10.6-universal-2.6/pygit2.o\n> pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356: error: void\n> value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be lipo: can't open input file: /var/tmp//ccSxjred.out (No\n> such file or directory) error: command 'gcc-4.2' failed with exit\n> status 1\n> \n> [libgitsha]:\n> https://github.com/libgit2/libgit2/commit/b5c5f0f8086ee4e9bccf0703386fd5219ac380c2\n> \n> [pysha]:\n> https://github.com/libgit2/pygit2/commit/6c7df765c1a9a186e721826121f50d0286b4040e\n\n## \n\nJ. David Ib\u00e1\u00f1ez\nItaapy http://www.itaapy.com         Tel +33 (0)1 42 23 67 45\n9 rue Darwin, 75018 Paris              Fax +33 (0)1 53 28 27 88\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490", "body": "I hope to update pygit2 by tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505", "body": "I don't like the \"GPLv2 + exception\" for pygit2 either. Personally I would prefer LGPLv3, that would be fine to you?\n\nTo change the license the agreement of everybody that contributed to pygit2 is required, starting by Dave Borowitz, who has written more than half of it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984", "body": "I bet you mean:\n\n```\nif (builder) {\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078", "body": "- I wonder what Py_XDECREF will do with a `git_treebuilder` struct.\n- The point of using `Py_XDECREF` instead of `Py_DECREF` is that you don't need to check for NULL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062", "body": "This line should not be. The dealloc function is called when the refcount is zero. Decreasing it below zero is not correct.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085", "body": "Just changed this static method so it is shorter and fails on unexpected arguments.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "zhangyiant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/12d83a955333ff47c2f2c747be3b3f0206f6d674", "message": "Implement update_submodules using ffi."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f512bd94d47adbcb4ceb07ae76ddfece031c9dab", "message": "Add wrongly deleted declaration."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/bda601adc4a101b9b3131cf0a3ff84461e90e930", "message": "Import submodule_update related options."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/03deadb9f886ac2ecfafe8de1ffc2fb7f5c5f1c4", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c0eaa698d648af33a72c743ba296dd1427bcb81f", "message": "Fix patch-after-blob-free"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/83fdde770b72b836cc7ae1490803464f74bf9d3d", "message": "Add similar blob test"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3070a22c064b56da8d0a131be70d2addf40f7856", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d463fd7151b6d839afbd49628b7b923d7a958591", "message": "Make broken patch tests be less nebulous"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/007ac2a28dcd3b7dd13beade915fe62f936924ba", "message": "test_patch: assertEquals -> assertEqual"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/798e357ffe3d551a59a26b3f228e321cd6f2a4ed", "message": "Add more patch and blob tests that could fail"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/28c3828ef05d90e1ea6704c0bc60ad78c103af82", "message": "Add contextlines, interhunk lines to Patch.create_from"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a96da22cbf456fe2181e196877845b590cede606", "message": "Dont create blobs on the fly in test_patch, make patch kwargs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d5c8e6208c8ac33534c2bf36c7bc525d6bc5e756", "message": "Move declarations to top of functions"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/575905fd2c4791cb11d2f660e1c162c56878b23c", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e765acdb9c17103544d0f10f60fb12abd8ae91a6", "message": "Add bad arg tests to test_patch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ea1a08d25746dbb4613ea09350741fe7ae2ad5c1", "message": "Add static Patch.create_from method to create patches"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fourplusone": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cae2c2866e610d6b6baa318281f14e8a92cf7a3b", "message": "Clear clone_repo in Prune Test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cecedille1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/523f82e9094bd878d2bc1710ff40121ca8c8fbf6", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d0c224a1d8ce11c60592c57e1b139cd7d1ee0732", "message": "Implement prune option for fetch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ceb02490a554f1dc221049e24f6952c3d883edf0", "message": "Export the constants GIT_FETCH_PRUNE_*"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nhynes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/719", "title": "Rebased worktrees", "body": "This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexchamberlain": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/538", "title": "Add certificate callback.", "body": "Existing unit tests pass. Adapted from `__init__.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petrhosek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/405", "title": "Walker interface reimplemented with CFFI", "body": "I've reimplemented the `Walker` interface with CFFI; this is a first step towards reimplementing the entire pygit2 Object model with CFFI. It's supposed to be a straightforward rewrite, I haven't made any changes to the API to avoid breaking the backwards compatibility.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/346", "title": "Diff and Patch interface refactored", "body": "This is a complete refactoring of the diff and patch interface. The changes include:\n- Splitting `Diff` and `Patch` into separate classes and files, including respective tests. This largely follwos the recent development in `libgit2`.\n- Introducing `DiffDelta`, `DiffFile` and `DiffLine` classes and their respective iterators.\n- Moving the recently introduced `Blob` diff methods into patch again to be in line with the respective `libgit2` interface.\n\nThe biggest difference, apart from the code cleanup, is the lazy evaluation due to heavy use of iterators rather than evaluating everything ahead of time as in case of the existing code, which tends to be slow on larger projects.\n\nI have tried to make the interface as \"Pythonic\" as possible, while closely following the underlying `libgit2` C interface. However, some of you might think of a better abstraction and I'd happy to incorporate further changes into the patch.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596", "body": "Indeed, it was using the private clone URL. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600", "body": "Replaced the build instructions with a link to our website: that way it'll always be up to date.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355", "body": "Neat, thanks for this, but it looks like I got two pull requests for the same thing. ^^\n\nI've just merged the other one, and while I was at it fixed the test that was failing -- it was an issue in libgit2, so thanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527", "body": "Hey, this is very nice, but the new compressed text repository is making the tests fail:\n\n```\nTraceback (most recent call last):\nFile \"/Users/tanoku/src/pygit2/test/utils.py\", line 74, in setUp\nz.extractall(temp_dir)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 940, in extractall\nself.extract(zipinfo, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 928, in extract\nreturn self._extract_member(member, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 965, in _extract_member\ntarget = file(targetpath, \"wb\")\nIOError: [Errno 20] Not a directory: '/var/folders/0d/0dHASpI3E9Ca1CvFczxbjU+++TI/-Tmp-/tmpdHiwtC/testrepo/bye.txt'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331", "body": "Hm, 2.5.4 fails too, with the following error:\n\n```\nTraceback (most recent call last):\n  File \"setup.py\", line 87, in <module>\n    **kwargs\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/core.py\", line 151, in setup\n    dist.run_commands()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 974, in                 run_commands\n    self.run_command(cmd)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 994, in run_command\n    cmd_obj.run()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 121, in run\n    self.with_project_on_sys_path(self.run_tests)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 101, in with_project_on_sys_path\n    func()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 130, in run_tests\n    testLoader = loader_class()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 767, in __init__\n    self.parseArgs(argv)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 794, in parseArgs\n    self.createTests()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 800, in createTests\n    self.module)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 553, in loadTestsFromName\n    test = obj()\n  File \"/Users/tanoku/src/pygit2/test/__init__.py\", line 41, in test_suite\n    return unittest.defaultTestLoader.loadTestsFromNames(modules)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 541, in loadTestsFromName\n    parent, obj = obj, getattr(obj, part)\nAttributeError: 'module' object has no attribute 'test_blob'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753", "body": "Fair enough -- the tests do work with Python 2.7. Nice job!\n\n...However, I'm afraid that 2.6 is still too mainstream as to have the tests broken on it. You need to work around the Zip issue on 2.6 before I can merge this. I'd suggest using GZip instead of Zip.\n\nThanks in advance!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119", "body": "This is perfect, thank you very much! Merging now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714", "body": "Hey, just stepping by to remind you that the linking exception is indeed _very_ permissive: you could even link your own Python library with a static version of libgit2 without it affecting your own program's license. I'm looking forward to see what can you come up with the git-python streaming framework. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958", "body": "This changed in libgit2 as of\nhttps://github.com/libgit2/libgit2/commit/44908fe763b1a2097b65c86130ac679c458df7d2\n\nFeel free to update pygit2.c if I don't get the chance to soon.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750", "body": "This appears to have been fixed by 9e919c39662ecc0f0080. I was able to build successfully at HEAD, so I'm going to close this issue. Let me know if you still have problems.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629", "body": "On Thu, Mar 31, 2011 at 03:27, Byron <\nreply@reply.github.com>wrote:\n\n> Hi,\n> \n> As the answer to this question might be interesting for others as well, I\n> make it public using the issue system.\n> \n> Pygit2 uses the same license as libgit2, the GPL with linkage exception.\n> The problem I see is that this exception doesn't apply to the usage of\n> pygit2 within other python programs and libraries which are not necessarily\n> licensed under GPL.\n\nI've been assured by a lawyer that the linkage exception does apply to the\nnormal Python import mechanism. So you can safely \"import pygit2\" from a BSD\nproject without making that project GPL+exception. (You still cannot safely\nincorporate pygit2 source code in the source of a BSD project.)\n\n> For instance, I would be interested in using pygit2 in one of my projects,\n> gitdb, which in turn can be used by git-python. Both are licensed under\n> NewBSD, so I am worried that using pygit2 would compromise this license and\n> force it into the GPL.\n\nAs long as \"using\" == \"importing\", this is fine.\n\n> Could you please clarify the situation ?\n> Thank you,\n> Sebastian\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/issues/15\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "peti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459", "body": "I can confirm that this patch fixes the build error.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jszakmeister": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439", "body": "I realized that shortly after I submitted the pull request (and I thought I closed this one... but perhaps I forgot).  Thanks anyways!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "honza": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Byron": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525", "body": "According to wikipedia, the LGPL, even though it usually refers to library linking, may also be generalized into 'using' the library.\nAs python doesn't explicitly link pygit2 when importing it, the LGPL wouldn't really help unless we just regard pygit2 as being 'used' by my library. I don't know what lawyers say about that, but I would be fine with LGPL, from what I read in the wiki at least.\n\nPersonally I think the LGPL was designed just with dynamic and static libraries in mind, but maybe it can be widened to the general use of one library by another, no matter which system of linkage is actually employed.\n\nMaybe it would already be enough to adjust the linkage exemption to state that it may be linked to _and_ imported. This should be clear enough to allow git-python to use it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643", "body": "Great to hear, thanks !\nI am quite eager to find out how libgit2 performs within the git-python streaming framework, so I will try to implement a gitdb which allows to obtain object information and object streams. Lets see how that works out :).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "carlosmn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992", "body": "Yes I do. `builder` used to be called `bld` and it looks like I didn't clean up properly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739", "body": "It doesn't seem to mind a `git_treebuilder` that much (it doesn't crash in the tests). Some example code must have been wrong about `Py_XDECREF`. I saw it being used with a guard. I'll update shortly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804", "body": "Now that you mention it, it does look silly, will fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335", "body": "We have `to_unicode` for this which works across verisions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225", "body": "Why not use `\"s\"` as the format directly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262", "body": "Because it's a special function. I went back and forth on that one, but this is a private function that only makes sense inside pygit2. The consistency should go the other way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235", "body": "It's a leftover from working with less abstract constructions; but it's a guess as to how many parameters will actually be passed versus how many we will be looking at. I'm not a fan of looking up the same key twice, but it can be reduced.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294", "body": "I remember now why I wanted to iterate over the inputs instead of checking for the known keys: if the programmer using this method makes a typo, we will ignore that option instead of complaining, which can cause subtle bugs, as there is no indication that we're ignoring an argument that was passed. I didn't end up doing it as we just have the two things, but when this gets extended, we should raise an exception if we get something we don't recognise as an option.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992", "body": "All of these values will be unitialised if they're not passed. Instead of this, you should let `PyArg_ParseTupleAndKeywords` write into the options structure directly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723", "body": "Again, this has nothing to do with the username the user may have passed as a hint. _This_ username is the only one that counts, and it has to be the username as which you wish to authenticate to the ssh host.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524", "body": "There's no need for this line. You're already setting the version above with the init function. If the version does increase, this would cause libgit2 to consider the struct to have a different layout.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924", "body": "`self._self_handle` needs to be set to `None` after the push operation completes, next to freeing the push object itself.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737", "body": "One of these lies is redundant. If we're going to rely on the superclass' constructor, then there's no need for us to store the username explicitly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "alexband": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081", "body": "sorry, I do not familiar with C. \nThe old code seems like try to compatible with either unicode and bytes. So if use \"ssi\", we can accept them both or does this require specific python version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248", "body": "Thanks. Then it's much clear now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132", "body": "@cholin hi, I think here exist a problem, that, for `git_diff_patch_get_line_in_hunk`, this get a line detail for every line, but only the last one of 'origin' get reserved in hunk.origin.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006", "body": "this will break application code. and I change my code to receive int to char now. if this can be noticed in advance pull from master.\nby the way, do you guys recommend we application developer always use the latest code of pygit2?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "cholin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195", "body": "Well unicode and python is a bit messy. But PyArg_ParseTuple with `s` as argument will convert Strings and Unicode Strings to a c string pointer. So we can use PyArg_ParseTuple and do not loose any functionalities... Check the api: [python2.7](http://docs.python.org/2.7/c-api/arg.html) and [python3](http://docs.python.org/2.7/c-api/arg.html)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703", "body": "I do not think you should use the latest version of pygit2 in your application. Right now the api isn't stable. We try to avoid these changes but better now than after a 1.0 release (which could be in near future). If you depend on a recent change, well then you have no other choice...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "xtao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396", "body": "I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021", "body": "More than one space.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "vtemian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155", "body": "Why not `from_c` like in `Index.from_c`? Is more consistent this way\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831", "body": "Why do you need to iterate? You can do it with 2 if statements:\n\n``` python\nif 'strategy' in kwargs:\n  copts.checkout_strategy = kwargs['strategy']\n\nif 'directory' in kwargs:\n  target_dir = ffi.new('char[]', to_str(kwargs['directory']))\n  refs.append(target_dir)\n  copts.target_directory = target_dir\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881", "body": "I think you delete by mistake an `h` from `Show`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ArnoVanLumig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170", "body": "Thanks!\n\nI actually figured that out myself but forgot to commit and push it... Thanks for the heads-up!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mduggan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362", "body": "Ah, I was doing it in a little bit of a weird order.. I wanted to create the \"default\" callbacks first so that any error could raise before the custom callbacks had been set.. but fair point about the version number being set differently on the two lines.. if it changes in one place it will need to change in both,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "4": {"onovy": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/765", "title": "big endian: FAIL: test_no_context_lines (test.test_patch.PatchTest)", "body": "Hi,\r\n\r\ntest.test_patch.PatchTest.test_no_context_lines fails on archs mips, s390x, hppa, powerpc or ppc64. I think all of them are \"big endian\". This bug is new in 0.26.3, because before this version test_no_context_lines test didn't exists.\r\n\r\n```\r\nFAIL: test_no_context_lines (test.test_patch.PatchTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/<<PKGBUILDDIR>>/test/test_patch.py\", line 196, in test_no_context_lines\r\n    self.assertEqual(context_count, 0)\r\nAssertionError: 1 != 0\r\n```\r\n\r\nSee: https://buildd.debian.org/status/package.php?p=python-pygit2\r\n\r\nThanks for fixing.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/764", "title": "tree.diff_to_tree results in many unnecessary sys calls", "body": "Hi!\r\n\r\nI'm currently working on a git scanner with a very high throughput for my bachelor thesis.\r\nAs the scanner runs with 8 threads, I'm observing severe slowdowns on my server.\r\nAfter running the command with `strace` i noticed that there are a whole lot of unnecessary syscalls issued on each diff. It looks like  for each file in the diff, there is one `stat` for the actual file, two `access` for `/etc/gitattributes` and two `stat` for `/info/attributes`. \r\n\r\nThis results in a lot of syscalls and slows things down significantly as the program seems to wait for those calls most of the time. The repositories are located inside `/tmp` and cleaned after each scan. There are no signs of RAM shortage as there are about 8GB+ unused space in the `/tmp` fs.\r\n\r\nThe repositories are cloned `bare`. The actual function call is:\r\n```\r\ndiff = commit.tree.diff_to_tree(commit.parents[0].tree)\r\nself.commit_stats[commit.hex] = {\r\n    'additions': diff.stats.insertions,\r\n    'deletions': diff.stats.deletions,\r\n}\r\n```\r\n\r\nI'm not sure if this is the right place or if this is rather a libgit2 issue.\r\nAnyway I'm happy for any help as I'm not that familiar with the pythin-C binding mechanics.\r\n\r\nRelevant strace output example:\r\n```\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/main.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"src/states/Level.lua\", 0x7ffd6ef8c410) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] stat(\"/tmp/gitalizer/C-gotoh/atomazed/info/attributes\", 0x7ffd6ef8c250) = -1 ENOENT (No such file or directory)\r\n[pid 32220] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnareb": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/752", "title": "Performance: speed of getting `blob.data` for large files (as compared to GitPython)", "body": "I have compared speed of equivalent to `git show <revision>:<pathname>` in both pygit2 and GitPython (the pure-Python implementation). In all other cases that I have tested pygit2 is faster, but for very large files `git show` / `git cat-file` equivalent is slower.\r\n\r\npygit2 code:\r\n``` python\r\nblob = repo.revparse_single(commit + ':' + path)\r\nresult = blob.data\r\n```\r\n\r\nGitPython code:\r\n``` python\r\nblob = repo.rev_parse(commit + ':' + path)\r\nresult = blob.data_stream.read()\r\n```\r\n\r\nDo you have any ideas why pygit2 is slower here?\r\n\r\nP.S. would it be difficult to add streaming access?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750", "title": "Suggestion: better handling of `repo.set_head(pygit2.Commit)`", "body": "I have tried to emulate `git checkout --detach <commit>` in pygit2, to create **detached HEAD** checkout, and I did come up with the following rough equivalent (though the following does not uses transactions as git does):\r\n\r\n``` python\r\nrev = repo.revparse_single(commit_name)\r\nrepo.checkout_tree(rev)\r\nrepo.set_head(rev.id)\r\n```\r\n\r\nHowever when I tried to use simply `repo.set_head(rev)`, I got the following error:\r\n\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-35-9612528ec0ac> in <module>()\r\n----> 1 repo.set_head(rev)\r\n\r\n/usr/lib/python2.7/dist-packages/pygit2/repository.pyc in set_head(self, target)\r\n    293\r\n    294         # if it's a string, then it's a reference name\r\n--> 295         err = C.git_repository_set_head(self._repo, to_bytes(target))\r\n    296         check_error(err)\r\n    297\r\n\r\nTypeError: initializer for ctype 'char *' must be a cdata pointer, not _pygit2.Commit\r\n```\r\n\r\nIt would be nice if `pygit2.Commit` object was automatically peeled, but if it is decided to be not good idea, then what it needs is more user-friendly error message than the one above.\r\n\r\n-----\r\npygit2 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738", "title": "`repo.diff(c1, c2, flags=pygit2.GIT_DIFF_FIND_RENAMES)` reverses diff", "body": "First complaint is that there is no documentation and no examples of using `flags` (not `flag` as in description of parameters) with `Repository.diff`: http://www.pygit2.org/diff.html . Therefore I am not sure if I am using the API correctly.\r\n\r\nSecond, using `flags=pygit2.GIT_DIFF_FIND_RENAMES` for some reason **reverses** diff.\r\n\r\nCompare \r\n```\r\n>>> repo = pygit2.Repository('path/to/repo')\r\n>>> repo.diff('HEAD^', 'HEAD', flag=pygit2.GIT_DIFF_FIND_RENAMES).patch`\r\n```\r\nwith \r\n```\r\n>>> repo.diff('HEAD^', 'HEAD').patch\r\n```\r\n\r\n-----\r\n\r\npygit2.LIBGIT2_VERSION: '0.26.0'\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pypingou": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/747", "title": "Broken GIT_SORT_TIME ?", "body": "This is a script to reproduce the behavior I'm seeing:\r\n````\r\n#!/usr/bin/env python\r\n\r\nimport tempfile\r\nimport time\r\nimport os\r\n\r\nimport pygit2\r\n\r\npath = tempfile.mkdtemp(prefix='pygit2_test_')\r\nrepo = pygit2.init_repository(path)\r\n\r\nauthor = pygit2.Signature('Alice Author', 'alice@authors.tld')\r\ncommitter = pygit2.Signature('Cecil Committer', 'cecil@committers.tld')\r\n\r\n# Commit #1\r\n\r\n # Create a file in that git repo\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\nparents = []\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #1',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents,\r\n))\r\ncommit1 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n# Commit #2\r\n\r\nparents = [commit1.oid.hex]\r\n\r\nsubfolder = os.path.join('folder1', 'folder2')\r\nos.makedirs(os.path.join(path, subfolder))\r\n# Create a file in that git repo\r\nwith open(os.path.join(path, subfolder, 'file'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz')\r\nrepo.index.add(os.path.join(subfolder, 'file'))\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #2',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit2 = repo.revparse_single('HEAD')\r\ntime.sleep(0.1)\r\n\r\n\r\n# Commit #3\r\n\r\nparents = [commit2.oid.hex]\r\n\r\n# Update the sources file\r\nwith open(os.path.join(path, 'sources'), 'w') as stream:\r\n    stream.write('foo\\n bar\\nbaz!')\r\nrepo.index.add('sources')\r\nrepo.index.write()\r\n\r\n# Commits the files added\r\ntree = repo.index.write_tree()\r\nprint(repo.create_commit(\r\n    'refs/heads/master',  # the name of the reference to update\r\n    author,\r\n    committer,\r\n    'Commit #3',\r\n    # binary string representing the tree object ID\r\n    tree,\r\n    # list of binary strings representing parents of the new commit\r\n    parents\r\n))\r\ncommit3 = repo.revparse_single('HEAD')\r\n\r\n\r\nprint('')\r\nmain_walker = repo.walk(commit3.oid.hex, pygit2.GIT_SORT_TIME)\r\ncommits_msgs = []\r\nwhile 1:\r\n    try:\r\n        com = main_walker.next()\r\n        print(com.message)\r\n        print(com.oid.hex)\r\n    except StopIteration:\r\n        break\r\n````\r\n\r\nIt gives me the following output:\r\n````\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\n\r\nCommit #3\r\n47e61d2eaa8c5d3d1562475a43aa99c0e7fb9b8a\r\nCommit #1\r\n7335ffcfdb2039a9631ef5c891ec6a12feaeb342\r\nCommit #2\r\n50ea7d4691ee78b60323ac1d4174a6609190fbaf\r\n````\r\n\r\nThe first three lines are the commit as they are committed.\r\nThe following lines are the commit message and hash as ``repo.walk(commit3, pygit2.GIT_SORT_TIME)`` is returning them.\r\n\r\nSomething looks broken to me :)", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/747/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Bysmyyr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/732", "title": "hunk.final_committer.name not work if email is empty", "body": "Hi, I found this error:\r\n\r\nif email is missing, it gives error \"Signarure cannot have an empty name or email\"\r\n\r\nin libgit2 Slack channel we discuss it and end up that in `wrap_signature` pygit2 creates new signature where email cannot be empty. It maybe should use `git_signature_dup` instead?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yan12125": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/731", "title": "Document KeypairFromAgent", "body": "I didn't know that feature until I check codes from both libgit2 and pygit2. I think it would be helpful to have that documented in http://www.pygit2.org/remotes.html.\r\n\r\nGoogling reveals another confused developer like me :-) https://github.com/saltstack/salt/issues/40008#issuecomment-286434931", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santublr": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/729", "title": "pygit2 installation error. ", "body": "This issue which I'm reporting may be repetative one, but after googling and trying all the options I'm still not able to load the right pygit2.\r\n\r\npygit2 version 0.22.0\r\nlibgit2 version 0.22.0\r\npycparse version 2.18\r\ncffi version 0.9.2\r\nPython Version 3.3.2\r\nOS CentOS release 6.8 (Fina\r\n\r\n\r\npython3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LD_LIBRARY_PATH=$LIBGIT2/lib\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # export LIBGIT2=/usr/local\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nImportError: No module named pygit2\r\nroot@sc-p4-gitfusion-2017:/scm/p4/bin.gitfusion/2017.1 # python3.3 -c 'import pygit2'\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 147, in _typeof\r\n    result = self._parsed_types[cdecl]\r\nKeyError: 'int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 126, in _parse\r\n    ast = _get_parser().parse(csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 152, in parse\r\n    debug=debuglevel)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 331, in parse\r\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 1199, in parseopt_notrack\r\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/ply/yacc.py\", line 193, in call_errorfunc\r\n    r = errorfunc(token)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/c_parser.py\", line 1761, in p_error\r\n    column=self.clex.find_tok_column(p)))\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pycparser-2.18-py3.3.egg/pycparser/plyparser.py\", line 66, in _parse_error\r\n    raise ParseError(\"%s: %s\" % (coord, msg))\r\npycparser.plyparser.ParseError: :71:7: before: git_repository_create_cb\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/pygit2-0.22.0-py3.3-linux-x86_64.egg/pygit2/__init__.py\", line 134, in <module>\r\n    @ffi.callback('int (*git_repository_create_cb)(git_repository **out,'\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 297, in callback\r\n    cdecl = self._typeof(cdecl, consider_function_as_funcptr=True)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 150, in _typeof\r\n    result = self._typeof_locked(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/api.py\", line 135, in _typeof_locked\r\n    type = self._parser.parse_type(cdecl)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 275, in parse_type\r\n    ast, macros = self._parse('void __dummy(\\n%s\\n);' % cdecl)[:2]\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 128, in _parse\r\n    self.convert_pycparser_error(e, csource)\r\n  File \"/scm/apps/Python-3.3.2/lib/python3.3/site-packages/cffi-0.9.2-py3.3-linux-x86_64.egg/cffi/cparser.py\", line 157, in convert_pycparser_error\r\n    raise api.CDefError(msg)\r\ncffi.api.CDefError: cannot parse \"int (*git_repository_create_cb)(git_repository **out,const char *path, int bare, void *payload)\"\r\n:71:7: before: git_repository_create_cb\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nicolasdespres": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/727", "title": "create_commit does not update the reflog", "body": "Hi,\r\n\r\nI have noticed that v0.26.0 of `create_commit` does not create an entry in the reflog for the initial commit of a branch.\r\n\r\n```python\r\n/private/tmp\r\n4> mkdir d\r\n\r\n/private/tmp\r\n5> cd d\r\n/private/tmp/d\r\n\r\n/private/tmp/d\r\n6> import pygit2\r\n\r\n/private/tmp/d\r\n7> repo = pygit2.init_repository(\".\")\r\n\r\n/private/tmp/d\r\n8> repo.config[\"user.email\"] = \"foo@bar.com\"\r\n\r\n/private/tmp/d\r\n9> foo = repo.create_blob(\"foo\")\r\n\r\n/private/tmp/d\r\n10> builder = repo.TreeBuilder()\r\n\r\n/private/tmp/d\r\n11> builder.insert(\"foo\", foo, pygit2.GIT_FILEMODE_BLOB)\r\n\r\n/private/tmp/d\r\n12> tree_id = builder.write()\r\n\r\n/private/tmp/d\r\n13> repo.create_commit(\"refs/test\", repo.default_signature, repo.default_signature, \"test\", tre\r\n13: e_id, [])\r\n13> f610cdd139fab6f738dfaff52839a552a6b8bb9e\r\n\r\n/private/tmp/d\r\n14> git reflog refs/test\r\n  File \"<ipython-input-14-afa1bc8c3c03>\", line 1\r\n    git reflog refs/test\r\n             ^\r\nSyntaxError: invalid syntax\r\n\r\n\r\n/private/tmp/d\r\n15> !git reflog refs/test\r\n\r\n/private/tmp/d\r\n16> !git --no-pager reflog refs/test\r\n\r\n/private/tmp/d\r\n17> repo.references[\"refs/test\"].log\r\n17> <function Reference.log>\r\n\r\n/private/tmp/d\r\n18> repo.references[\"refs/test\"].log()\r\n18> <_pygit2.RefLogIter at 0x10db93bc0>\r\n\r\n/private/tmp/d\r\n19> list(repo.references[\"refs/test\"].log())\r\n19> []\r\n```\r\n\r\nHowever it works it is not an initial commit.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726", "title": "revparse_single does not understand date", "body": "Hi,\r\n\r\n`revparse_single` does not support date parsing:\r\n\r\n$ git rev-parse 'HEAD@{2 weeks ago}'\r\neebac5f1c21ec78e098a8f7b60facd726b30844e\r\n$ python3 -c 'import pygit2; pygit2.Repository(\".\").revparse_single(\"HEAD@{2 weeks ago}\")'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nKeyError: 'HEAD@{2 weeks ago}'\r\n\r\nI am using version 0.26.0", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "white-gecko": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/725", "title": "Support for Custom Merge drivers?", "body": "Is there any way of using a custom merge driver in pygit2? I've see this for libgit2: https://github.com/libgit2/libgit2/pull/3564 is this also possible to be used with pygit2 as it is?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smelnikov": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/724", "title": "How can I get current Tag reference?", "body": "First, I checkout TAG from my repo. \r\nThen I need resolve name of this TAG. But I can't get relevant reference object (HEAD is detached).\r\nPlease tell me, how this can be done?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Parakleta": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/723", "title": "GIT_SORT_TOPOLOGICAL is document backwards.", "body": "The documentation states that parents come before children, but actually children come before parents.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686", "title": "`git_commit_amend` not available.", "body": "Additionally `Repository.create_commit` fails if the first parent is not the tip of the branch being updated, so the behaviour cannot be fudged by making a new commit with the tip's parent.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680", "title": "`peel` arguments inconsistent.", "body": "`peel` is implemented twice, once in `object.c` and once in `reference.c`.  In the first it requires an argument and in the second it provides a default argument of `None`.  This is confusing when branches can be 'default' peeled but tags cannot.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ashmastaflash": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/722", "title": "Support `git bundle create`", "body": "Ideal form would be to have a class method for Repository that accepts a single argument for the output file path.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pklim101": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/717", "title": "How to solve 'LIBSSH2 not found.'?", "body": "when I execute the command 'cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/libgit2',\r\nI have the output bellow\uff1a\r\n\r\n> \r\n\r\n-- Checking for module 'libcurl' \r\n--   Found libcurl, version 7.15.5  \r\n-- Could NOT find HTTP_Parser (missing: HTTP_PARSER_INCLUDE_DIR HTTP_PARSER_LIBRARY)   \r\n-- http-parser version 2 was not found; using bundled 3rd-party sources.  \r\n-- Checking for module 'libssh2'  \r\n--   No package 'libssh2' found  \r\n-- LIBSSH2 not found. Set CMAKE_PREFIX_PATH if it is installed outside of the default search path.\r\n\r\nthere are two module not fund, How can I solve it? thanks!", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tongtongtongtong": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/716", "title": "pygit2.GIT_DIFF_IGNORE_WHITESPACE result Inconsistent", "body": "git command:\r\ndiff --git a/Makefile b/Makefile\r\nindex bb20e89..c25d045 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -3,4 +3,5 @@ install:\r\n \r\n clean: \r\n        rm -rf tgit-statistics \r\n+       \r\n qed \r\n\\ No newline at end of file\r\n\r\npygit2:\r\nrepo.diff(from_id, to_id, cached=True, flags=pygit2.GIT_DIFF_IGNORE_WHITESPACE, context_lines=3, interhunk_lines=3)\r\n\r\ndiff --git a/Makefile b/Makefile\r\nindex bb2..c25 100644\r\n--- a/Makefile\r\n+++ b/Makefile\r\n@@ -5,0 +6 @@ clean:\r\n+", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbaiter": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/712", "title": "`Repository.diff(cached=True)` does not list diffs for indexed files", "body": "This is with pygit2 version 0.24.0.\r\n\r\n```\r\n$ git init\r\nInitialized empty Git repository in /tmp/minimal/.git/\r\n$ touch foo\r\n$ git add foo\r\n$ git commit -am \"First commit\"\r\n[master (root-commit) 3551222] First commit\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 foo\r\n$ echo \"foobar\" >> foo                                                                                                                                                                                                                                                                                 \r\n$ git add foo\r\n$ git diff --cached\r\ndiff --git a/foo b/foo\r\nindex e69de29..323fae0 100644\r\n--- a/foo\r\n+++ b/foo\r\n@@ -0,0 +1 @@\r\n+foobar\r\n$ python\r\n>>> import pygit2\r\n>>> repo = pygit2.Repository('.')\r\n>>> list(repo.diff(cached=True))\r\n[]\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmr232": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/709", "title": "Type Annotations", "body": "I was thinking of adding type annotations to some of the APIs to assist IDEs in parsing them and providing useful completion.\r\n\r\nSince it currently does not exist in the code, I preferred asking before coding.\r\nDue to supporting both Python 2 and 3, I think the way to do it is to use syntax present [here](http://mypy.readthedocs.io/en/latest/python2.html).\r\n\r\nThere are some drawbacks:\r\n1. Adding a new dependency - the `typing` package\r\n1. Annotation comments are not the prettiest thing\r\n\r\nBut if we only the do the required minimum, we get more clarity when using the library, and can also use `mypy` as a verification step for new code.\r\n\r\n@jdavid what is your opinion?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699", "title": "libssh2", "body": "I think it would be good to add libssh2 to the builds to provide SSH support.\r\nOn Windows it takes quite some work to get it working (no success yet on my side). Haven't tried other OSs yet.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701", "body": "This closes #669 ", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/21637701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "FabriceSalvaire": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/704", "title": "How to implement (un)staging and query staging status ?", "body": "Not a bug, but I cannot figure out how to achieve this using pygit2 / libgit. Does someone have clues about this ?\r\n\r\nI tried to get information from this page http://www.pygit2.org/working-copy.html and I found https://github.com/libgit2/libgit2sharp/blob/master/LibGit2Sharp/Commands/Stage.cs and https://github.com/libgit2/libgit2/issues/3632\r\n\r\nI want to implement staging feature to my code review tools: https://github.com/FabriceSalvaire/CodeReview\r\n\r\n**Is http://stackoverflow.com/questions/tagged/libgit2 the right place to discuss on pygit2 ???**", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/705", "title": "Added recipe for git-add and git-reset (staging)", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "niven823": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/702", "title": "Repository.update_submodules() got Request failed with status code: 401", "body": "I thought update_submodules()'s requires adding parameter of callbacks for RemoteCallbacks.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ignatenkobrain": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/693", "title": "[RFE] rebase routines", "body": "libgit2 supports rebasing, but pygit2 doesn't expose it. It would be very useful if it could.", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wme-at-contact-de": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/687", "title": "Possible encoding problem with Repository.file_status", "body": "If I try to get the status of a single file using Repository.file_status, I get a \"KeyError\" when the path contains non-ASCII characters like \"\u00e4\" or \"\\u00A0\" (non breaking space\").\r\n\r\nThe problem seems to be that \"Repository_status_file\" uses \"py_path_to_c_str\" to convert the path. Which encodes the path using the Python file system encoding.\r\n\r\nIf I encode the string myself using \"utf-8\", it works fine.\r\n\r\nNot sure whether this is a libgit2, pygit2 or Windows problem...\r\n\r\nUsing pygit-0.24.2 on Python 3.5, running on Windows 7.\r\nsys.getfilesystemencoding() returns \"mbcs\".\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "catsclaw": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/684", "title": "repo.status() appears to be broken?", "body": "I'm running `repo.status().items()` in a pre-commit hook using the `-a` flag (`git commit -a -m \"Test\"`), and I get a result that looks like this:\r\n\r\n`[('config/git_hooks/pre-commit', 256), ('bin/run_flake8', 256)]`\r\n\r\nIf I run `git status` in that same process, I get:\r\n\r\n    On branch ops_1331_fix\r\n    Your branch is ahead of 'origin/ops_1331_fix' by 2 commits.\r\n      (use \"git push\" to publish your local commits)\r\n    Changes to be committed:\r\n      (use \"git reset HEAD <file>...\" to unstage)\r\n    \r\n\t    modified:   bin/run_flake8\r\n\t    modified:   config/git_hooks/pre-commit\r\n\r\nIn other words, pygit2 is reporting those files as not being staged, and git is reporting them as being staged. Why the discrepancy?", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4s1": {"issues": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/683", "title": "DoS on wrong password", "body": "As discussed in upstream bug report saltstack/salt#38230 pygit2 tries to authenticate indefinite with wrong credentials instead of failing after two consecutive failures with same authentication token as specified by https://tools.ietf.org/html/rfc7235#section-3.1\r\nPossible a libgit2 Bug if it's reproducable with other language bindings.\r\n\r\n\r\n## Testcase:\r\n### nginx dummy server configuration\r\nThis is just a stub configuration, no real repository needed\r\n````\r\nlocation ~ /git(/.*) {\r\n        add_header \"WWW-Authenticate\" \"Basic realm=\\\"Closed Areas\\\"\" always;\r\n        return 401;\r\n    }\r\n````\r\n### test client\r\n````python\r\n#!/bin/python2.7\r\n\r\nimport pygit2\r\n\r\nusername = 'dummyUser'\r\npassword = 'dummyPassword'\r\ncredentials = pygit2.UserPass(username, password)\r\ncallbacks = pygit2.RemoteCallbacks(credentials)\r\npygit2.clone_repository(\"http://git.demo.local/git/test.git\", \"test.git\", bare=True, callbacks=callbacks)\r\n\r\n````", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdavid": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/bf74b2a99341437a755390c692ae04a21737c9d7", "message": "Merge remote-tracking branch 'white-gecko/patch-1'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a1494574fff619ef135119487980d751877af20c", "message": "Fixing ImportError in some cases, bug #658"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/9b047fe18a4313596e567dda463554f6d9a416d6", "message": "Fix running the tests with tox"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/5c96a46e2bfa2fa35d10a42fb51271da50d5685f", "message": "Release 0.26.3"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/91dfaf2a07225865b7bd09a0f1a49e933462c2f8", "message": "Review Patch, fixes #757"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c4e026095e7ce19793a0c811d35a1074f606b6a2", "message": "New Diff.deltas iterable"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d1c954f40f96816d3695a1eeb5d22a6beb32416d", "message": "Release 0.26.2"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/4804143f5590cf989f162973ec3a99c8314607bc", "message": "test: use self.assertXXX not assert\n\nBecause we use unittest, not pytest."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/8944d0208a7468ec7d378247356677829b87766b", "message": "Merge remote-tracking branch 'cecedille1/fetch-prune'"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3adda5509e5affb6a2f6f1daa0d02ee9e2d6d91b", "message": "docs: diff, add missing members"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694", "body": "I see from the traceback that you are using Python 2.6.1, it contains some bugs regarding zip files, like [issue 4710](http://bugs.python.org/issue4710). Could you try with a more recent version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/751694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416", "body": "From the traceback it looks like this has nothing to do with my patches, no regression here.\n\nSupporting Python 2.5 would take more work. I think it is not worth the effort, it is an old version and pygit2 is clearly understaffed. I think it is more interesting to spend time on supporting new versions (Python 3) than on supporting old versions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996", "body": "Accidentally I have reproduced the traceback you found with Python 2.5. It has nothing to do with 2.5 actually.\n\nIt happens pygit2 has two ways to run the tests. If setuptools is installed it will run the tests in-place. But if setuptools is not installed then you need to install pygit2 before running the tests (otherwise you will get that traceback), that's what the documentation says anyway:\n\n```\n$ python setup.py install\n$ python setup.py test\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027", "body": "About Python 2.6, it works fine.\n\nJust tested myself and reproduced the same error with 2.6.1:\n\n  IOError: [Errno 20] Not a directory: '/tmp/tmp_W_Hl9/testrepo/bye.txt'\n\nBut the tests pass with 2.6.2 (which was released almost two years ago). By the way I use myself Python 2.6\n\nAnyway, I am going to replace zipfile by tarfile as you suggest, since it looks more robust (the tests may even pass with 2.5)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072", "body": "Replaced zipfile by tarfile and now the tests pass even with Python 2.5 (on GNU/Linux, did not check Mac or Windows)\n\nIt was a bad idea to use zipfile in the first place.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264", "body": "cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360", "body": "Hello,\n\nI have merged the branch 'add-commit-attributes' by John Szakmeister. This adds Commit.parents, I needed that to\nimplement the equivalent to \"git log -- path\".\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/831360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919", "body": "This branch does not work after the recent changes to libgit2. I withdraw this pull request to open a new one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/833919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764", "body": "You can try my fork of pygit2 where this has been fixed:\n\n```\ngit://github.com/jdavid/pygit2.git\n```\n\nI asked for my changes to be merged, see https://github.com/libgit2/pygit2/pull/11\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/847764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445", "body": "There have been some more commits since I made this pull request, most important to keep pygit2 working after the changes to libgit2. But there are a few enhancements too:\n- New module function 'init_repository'\n- Added 'IndexEntry.path'\n- Started documentation on using pygit2\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/876445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641", "body": "The changes have been merged upstream, so this is fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/886641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196", "body": "pygit2 works with the 'master' branch of libgit2, commit b5c5f0f8086ee4\nis the tip of the 'development' branch\n\nOn Fri, 18 Mar 2011 05:31:07 -0700\nhonza\nreply@reply.github.com\nwrote:\n\n> Installed latest [libgit2][libgitsha], zlib and openssl. Using\n> [this][pysha] pygit2 revision, I can't get it to install:\n> \n> bash-3.2$ sudo python setup.py install\n> running install\n> running bdist_egg\n> running egg_info\n> writing pygit2.egg-info/PKG-INFO\n> writing top-level names to pygit2.egg-info/top_level.txt\n> writing dependency_links to pygit2.egg-info/dependency_links.txt\n> reading manifest file 'pygit2.egg-info/SOURCES.txt'\n> writing manifest file 'pygit2.egg-info/SOURCES.txt'\n> installing library code to build/bdist.macosx-10.6-universal/egg\n> running install_lib\n> running build_ext\n> building 'pygit2' extension\n> gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv\n> -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc\n> -arch x86_64 -pipe -I/usr/local/include\n> -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6\n> -c pygit2.c -o build/temp.macosx-10.6-universal-2.6/pygit2.o\n> pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356: error: void\n> value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be pygit2.c: In function \u2018Repository_walk\u2019: pygit2.c:356:\n> error: void value not ignored as it ought to be pygit2.c: In function\n> \u2018Walker_sort\u2019: pygit2.c:1838: error: void value not ignored as it\n> ought to be lipo: can't open input file: /var/tmp//ccSxjred.out (No\n> such file or directory) error: command 'gcc-4.2' failed with exit\n> status 1\n> \n> [libgitsha]:\n> https://github.com/libgit2/libgit2/commit/b5c5f0f8086ee4e9bccf0703386fd5219ac380c2\n> \n> [pysha]:\n> https://github.com/libgit2/pygit2/commit/6c7df765c1a9a186e721826121f50d0286b4040e\n\n## \n\nJ. David Ib\u00e1\u00f1ez\nItaapy http://www.itaapy.com         Tel +33 (0)1 42 23 67 45\n9 rue Darwin, 75018 Paris              Fax +33 (0)1 53 28 27 88\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490", "body": "I hope to update pygit2 by tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505", "body": "I don't like the \"GPLv2 + exception\" for pygit2 either. Personally I would prefer LGPLv3, that would be fine to you?\n\nTo change the license the agreement of everybody that contributed to pygit2 is required, starting by Dave Borowitz, who has written more than half of it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550", "body": "I think the behaviour must be the same for both Python 2 and 3, otherwise everything will be ore complicated (implementation, documentation, ...)\n\nBesides, in this case, the remark by @pyos [1] also applies to Python 2. Later on we will add to this method the ability to get an object by a short hex-sha, by calling `git_object_lookup_prefix`. If the hex-sha passed is 20 bytes long, how to know it is an hex-sha and not a raw-sha? I think to make the difference by the type is a fine solution.\n\n[1] https://github.com/libgit2/pygit2/issues/43#issuecomment-1791199\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/532550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935", "body": "Readability. It is not evident whether the word \"sha\" refers to the raw oid (20 bytes byte string) or to its hexadecimal form (40 chars text string). At least `.hex` has the virtue of not being ambiguous.\n\nNote that now we also have `object.oid`, the raw oid as a 20 bytes byte string. And that the old `.sha` and the new `.hex` are not exactly the same, before `.sha` was a byte string, now `.hex` is a text (unicode) string. So this was the right time to make the change.\n\nAlso, pygit2 is still, like libgit2, alpha software. So changes to the API may happen from time to time, they will be documented on every release.\n\nThis commit is part of the work to fix issue 43, https://github.com/libgit2/pygit2/issues/43\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780", "body": "www.pygit2.org actually, but it's to late to fix a commit message\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811", "body": "No. What I do is to keep a libgit2 clone and from time to time check whether pygit2 still works.\n\n(In my opinion, the problem is libgit2 does not release often enough.)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984", "body": "I bet you mean:\n\n```\nif (builder) {\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078", "body": "- I wonder what Py_XDECREF will do with a `git_treebuilder` struct.\n- The point of using `Py_XDECREF` instead of `Py_DECREF` is that you don't need to check for NULL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/463078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062", "body": "This line should not be. The dealloc function is called when the refcount is zero. Decreasing it below zero is not correct.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/465062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085", "body": "Just changed this static method so it is shorter and fails on unexpected arguments.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15143085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "zhangyiant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/12d83a955333ff47c2f2c747be3b3f0206f6d674", "message": "Implement update_submodules using ffi."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/f512bd94d47adbcb4ceb07ae76ddfece031c9dab", "message": "Add wrongly deleted declaration."}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/bda601adc4a101b9b3131cf0a3ff84461e90e930", "message": "Import submodule_update related options."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/03deadb9f886ac2ecfafe8de1ffc2fb7f5c5f1c4", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/c0eaa698d648af33a72c743ba296dd1427bcb81f", "message": "Fix patch-after-blob-free"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/83fdde770b72b836cc7ae1490803464f74bf9d3d", "message": "Add similar blob test"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/3070a22c064b56da8d0a131be70d2addf40f7856", "message": "Merge branch 'master' into patch_tests"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d463fd7151b6d839afbd49628b7b923d7a958591", "message": "Make broken patch tests be less nebulous"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/007ac2a28dcd3b7dd13beade915fe62f936924ba", "message": "test_patch: assertEquals -> assertEqual"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/798e357ffe3d551a59a26b3f228e321cd6f2a4ed", "message": "Add more patch and blob tests that could fail"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/28c3828ef05d90e1ea6704c0bc60ad78c103af82", "message": "Add contextlines, interhunk lines to Patch.create_from"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/a96da22cbf456fe2181e196877845b590cede606", "message": "Dont create blobs on the fly in test_patch, make patch kwargs"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d5c8e6208c8ac33534c2bf36c7bc525d6bc5e756", "message": "Move declarations to top of functions"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/575905fd2c4791cb11d2f660e1c162c56878b23c", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/e765acdb9c17103544d0f10f60fb12abd8ae91a6", "message": "Add bad arg tests to test_patch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ea1a08d25746dbb4613ea09350741fe7ae2ad5c1", "message": "Add static Patch.create_from method to create patches"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fourplusone": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/cae2c2866e610d6b6baa318281f14e8a92cf7a3b", "message": "Clear clone_repo in Prune Test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cecedille1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/pygit2/commits/523f82e9094bd878d2bc1710ff40121ca8c8fbf6", "message": "Add my name, for the fame"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/d0c224a1d8ce11c60592c57e1b139cd7d1ee0732", "message": "Implement prune option for fetch"}, {"url": "https://api.github.com/repos/libgit2/pygit2/commits/ceb02490a554f1dc221049e24f6952c3d883edf0", "message": "Export the constants GIT_FETCH_PRUNE_*"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nhynes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/719", "title": "Rebased worktrees", "body": "This is a rebased version of #691 (with a tiny modification to use add+prune opts) if the original author doesn't get around to updating it.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexchamberlain": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/538", "title": "Add certificate callback.", "body": "Existing unit tests pass. Adapted from `__init__.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petrhosek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/405", "title": "Walker interface reimplemented with CFFI", "body": "I've reimplemented the `Walker` interface with CFFI; this is a first step towards reimplementing the entire pygit2 Object model with CFFI. It's supposed to be a straightforward rewrite, I haven't made any changes to the API to avoid breaking the backwards compatibility.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/346", "title": "Diff and Patch interface refactored", "body": "This is a complete refactoring of the diff and patch interface. The changes include:\n- Splitting `Diff` and `Patch` into separate classes and files, including respective tests. This largely follwos the recent development in `libgit2`.\n- Introducing `DiffDelta`, `DiffFile` and `DiffLine` classes and their respective iterators.\n- Moving the recently introduced `Blob` diff methods into patch again to be in line with the respective `libgit2` interface.\n\nThe biggest difference, apart from the code cleanup, is the lazy evaluation due to heavy use of iterators rather than evaluating everything ahead of time as in case of the existing code, which tends to be slow on larger projects.\n\nI have tried to make the interface as \"Pythonic\" as possible, while closely following the underlying `libgit2` C interface. However, some of you might think of a better abstraction and I'd happy to incorporate further changes into the patch.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596", "body": "Indeed, it was using the private clone URL. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600", "body": "Replaced the build instructions with a link to our website: that way it'll always be up to date.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/578600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355", "body": "Neat, thanks for this, but it looks like I got two pull requests for the same thing. ^^\n\nI've just merged the other one, and while I was at it fixed the test that was failing -- it was an issue in libgit2, so thanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/694355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527", "body": "Hey, this is very nice, but the new compressed text repository is making the tests fail:\n\n```\nTraceback (most recent call last):\nFile \"/Users/tanoku/src/pygit2/test/utils.py\", line 74, in setUp\nz.extractall(temp_dir)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 940, in extractall\nself.extract(zipinfo, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 928, in extract\nreturn self._extract_member(member, path, pwd)\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/zipfile.py\", line 965, in _extract_member\ntarget = file(targetpath, \"wb\")\nIOError: [Errno 20] Not a directory: '/var/folders/0d/0dHASpI3E9Ca1CvFczxbjU+++TI/-Tmp-/tmpdHiwtC/testrepo/bye.txt'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/750527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331", "body": "Hm, 2.5.4 fails too, with the following error:\n\n```\nTraceback (most recent call last):\n  File \"setup.py\", line 87, in <module>\n    **kwargs\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/core.py\", line 151, in setup\n    dist.run_commands()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 974, in                 run_commands\n    self.run_command(cmd)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/distutils/dist.py\", line 994, in run_command\n    cmd_obj.run()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 121, in run\n    self.with_project_on_sys_path(self.run_tests)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 101, in with_project_on_sys_path\n    func()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python/setuptools/command/test.py\", line 130, in run_tests\n    testLoader = loader_class()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 767, in __init__\n    self.parseArgs(argv)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 794, in parseArgs\n    self.createTests()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 800, in createTests\n    self.module)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 553, in loadTestsFromName\n    test = obj()\n  File \"/Users/tanoku/src/pygit2/test/__init__.py\", line 41, in test_suite\n    return unittest.defaultTestLoader.loadTestsFromNames(modules)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 565, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py\", line 541, in loadTestsFromName\n    parent, obj = obj, getattr(obj, part)\nAttributeError: 'module' object has no attribute 'test_blob'\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753", "body": "Fair enough -- the tests do work with Python 2.7. Nice job!\n\n...However, I'm afraid that 2.6 is still too mainstream as to have the tests broken on it. You need to work around the Zip issue on 2.6 before I can merge this. I'd suggest using GZip instead of Zip.\n\nThanks in advance!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/753753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119", "body": "This is perfect, thank you very much! Merging now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/754119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714", "body": "Hey, just stepping by to remind you that the linking exception is indeed _very_ permissive: you could even link your own Python library with a static version of libgit2 without it affecting your own program's license. I'm looking forward to see what can you come up with the git-python streaming framework. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958", "body": "This changed in libgit2 as of\nhttps://github.com/libgit2/libgit2/commit/44908fe763b1a2097b65c86130ac679c458df7d2\n\nFeel free to update pygit2.c if I don't get the chance to soon.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/597958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750", "body": "This appears to have been fixed by 9e919c39662ecc0f0080. I was able to build successfully at HEAD, so I'm going to close this issue. Let me know if you still have problems.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/726750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629", "body": "On Thu, Mar 31, 2011 at 03:27, Byron <\nreply@reply.github.com>wrote:\n\n> Hi,\n> \n> As the answer to this question might be interesting for others as well, I\n> make it public using the issue system.\n> \n> Pygit2 uses the same license as libgit2, the GPL with linkage exception.\n> The problem I see is that this exception doesn't apply to the usage of\n> pygit2 within other python programs and libraries which are not necessarily\n> licensed under GPL.\n\nI've been assured by a lawyer that the linkage exception does apply to the\nnormal Python import mechanism. So you can safely \"import pygit2\" from a BSD\nproject without making that project GPL+exception. (You still cannot safely\nincorporate pygit2 source code in the source of a BSD project.)\n\n> For instance, I would be interested in using pygit2 in one of my projects,\n> gitdb, which in turn can be used by git-python. Both are licensed under\n> NewBSD, so I am worried that using pygit2 would compromise this license and\n> force it into the GPL.\n\nAs long as \"using\" == \"importing\", this is fine.\n\n> Could you please clarify the situation ?\n> Thank you,\n> Sebastian\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/libgit2/pygit2/issues/15\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "peti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459", "body": "I can confirm that this patch fixes the build error.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/739459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jszakmeister": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439", "body": "I realized that shortly after I submitted the pull request (and I thought I closed this one... but perhaps I forgot).  Thanks anyways!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/820439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "honza": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/889316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Byron": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525", "body": "According to wikipedia, the LGPL, even though it usually refers to library linking, may also be generalized into 'using' the library.\nAs python doesn't explicitly link pygit2 when importing it, the LGPL wouldn't really help unless we just regard pygit2 as being 'used' by my library. I don't know what lawyers say about that, but I would be fine with LGPL, from what I read in the wiki at least.\n\nPersonally I think the LGPL was designed just with dynamic and static libraries in mind, but maybe it can be widened to the general use of one library by another, no matter which system of linkage is actually employed.\n\nMaybe it would already be enough to adjust the linkage exemption to state that it may be linked to _and_ imported. This should be clear enough to allow git-python to use it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/940525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643", "body": "Great to hear, thanks !\nI am quite eager to find out how libgit2 performs within the git-python streaming framework, so I will try to implement a gitdb which allows to obtain object information and object streams. Lets see how that works out :).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/issues/comments/942643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "encukou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320", "body": "Does this make sense for Python 2? Maybe the str & unicode types are too interchangeable there to select functionality based on them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/530320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "valueof": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226", "body": "May I ask what was the reasoning behind this change? I have to update all my code and tests now. :-(\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/621226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333", "body": "Alright, understood. Without any other alternatives, we basically have no choice but to rely on alpha software\u2014so no worries about that, I realize that interfaces do change. I was just curious about the reasoning.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/626333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luztak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091", "body": "Is there any func or class for push,please?Or could you tell me how push works?thx.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/1421091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "richo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309", "body": "Typo in commit message, should be pygit2.com\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2427309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644", "body": "Is there a list where this is tracked? I spent about an hour trying to fix the broken linker on an old machine I was getting unresolved symbol errors on due to this one.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823", "body": "I agree completely. Having to have \"install libgit2 from their development head\" in the install instructions for my project is pretty awkward.\n\nIn this instance it was my fault for not diagnosing properly, I'll keep this in mind going forward. Cheers.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wking": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834", "body": "On Sat, Jan 19, 2013 at 09:30:54AM -0800, Richo Healey wrote:\n\n> Having to have \"install libgit2 from their development head\" in the\n> install instructions for my project is pretty awkward.\n\nThis should all settle down once libgit2 freezes their API (soon?\nlibgit2/libgit2#1028).  In the mean time, there are usually known-good\nlibgit2 SHAs in the pygit2 upgrade commits.  The problem with _not_\ntracking the development branch of libgit2 is that their master branch\nhasn't been bumped since 2012-05-19, so lots of features are missing\nfrom the master branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2464834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Gonnzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382", "body": "\u0421 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0431\u043b\u044f (\u041a\u0430\u0440\u0430\u0441\u044c)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2548382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cboos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808", "body": "I suppose this is a typo... \"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH\"\ns/MATC/MATCH/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/2952808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "alexband": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373", "body": "why `GIT_DIFF_LINE_CONTEXT` has been removed ?\n\nin version 0.18.0 \nI can do\n\n`from pygit2 import GIT_DIFF_LINE_CONTEXT`\n\nbut now I can't , why?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412", "body": "btw, I thought this parameter is used to control how many context line I would show in diff, like `git diff -U`, is this correct, how can I \nuse it properly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3232412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766", "body": "hi @carlosmn is `git_diff_list` depreciated in libgit2\uff0c we here has a kind of fork of `pygi2` with some modification. The fork hasn't sync with the main repo for a while, and now there are some conflicts with `git_diff_list`, I found your commit to adjust to libgit2, is there any explanation or documentation about the `git_diff_list` thing, either in libgit2 or pygit2. Thanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4840766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360", "body": "seems that it's just rename https://github.com/libgit2/libgit2/commit/3ff1d123736e5686fb9ec16e65828d5b8ffa2b30\n\nso I can just rename it , cool\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/4841360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081", "body": "sorry, I do not familiar with C. \nThe old code seems like try to compatible with either unicode and bytes. So if use \"ssi\", we can accept them both or does this require specific python version?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248", "body": "Thanks. Then it's much clear now.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132", "body": "@cholin hi, I think here exist a problem, that, for `git_diff_patch_get_line_in_hunk`, this get a line detail for every line, but only the last one of 'origin' get reserved in hunk.origin.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4185132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006", "body": "this will break application code. and I change my code to receive int to char now. if this can be noticed in advance pull from master.\nby the way, do you guys recommend we application developer always use the latest code of pygit2?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4188006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "arrbee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676", "body": "These constants are used when looking at text lines in a diff to indicate if the line is a context line (or and added line or a removed line). The set the number of context lines, you need to set the `context_lines` value in the `git_diff_options`. It appears to me that that field of the options is not current exposed through pygit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3236676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463", "body": "@cholin Just a heads up, in recent libgit2 updates to the `development` branch, I had to introduce a new constant `GIT_DIFF_LINE_CONTEXT_EOFNL` that deals with the case where both sides of a diff end without an newline and those lines appear in the context at the end of the diff. When I added this new constant, I changed the values for the `...EOFNL` constants so that we're no longer using `'\\n'` as a value (since I worried it was confusing). The new values are `'>'` is ADD_EOFNL, `'<'` is DEL_EOFNL, and `'='` is CONTEXT_EOFNL.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3249463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "cholin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623", "body": "In pygit2 we convert the `context_line` to unicode (for python2/3 compability reasons). So if you use these constants for comparison it will fail. I think '+','-',' ' and '\\n' are more than enough meaningful. Btw pygit2 has support for `context_lines` with `#77b5cdc` (not yet merged to master).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3247623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195", "body": "Well unicode and python is a bit messy. But PyArg_ParseTuple with `s` as argument will convert Strings and Unicode Strings to a c string pointer. So we can use PyArg_ParseTuple and do not loose any functionalities... Check the api: [python2.7](http://docs.python.org/2.7/c-api/arg.html) and [python3](http://docs.python.org/2.7/c-api/arg.html)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/3873195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703", "body": "I do not think you should use the latest version of pygit2 in your application. Right now the api isn't stable. We try to avoid these changes but better now than after a 1.0 release (which could be in near future). If you depend on a recent change, well then you have no other choice...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/4189703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "luchuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324", "body": ":beer:\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/3980324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "guysoft": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816", "body": "Hey,\nWhy was the MergeResult object object removed? How do I get now the oid of the merged result? It does not seem to appear in the working directory for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/7623816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "luto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684", "body": "thank you :heart: \n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/comments/10577684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "carlosmn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992", "body": "Yes I do. `builder` used to be called `bld` and it looks like I didn't clean up properly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/462992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739", "body": "It doesn't seem to mind a `git_treebuilder` that much (it doesn't crash in the tests). Some example code must have been wrong about `Py_XDECREF`. I saw it being used with a guard. I'll update shortly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/464739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804", "body": "Now that you mention it, it does look silly, will fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/470804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335", "body": "We have `to_unicode` for this which works across verisions.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/7895335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225", "body": "Why not use `\"s\"` as the format directly?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9060225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262", "body": "Because it's a special function. I went back and forth on that one, but this is a private function that only makes sense inside pygit2. The consistency should go the other way.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14761262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235", "body": "It's a leftover from working with less abstract constructions; but it's a guess as to how many parameters will actually be passed versus how many we will be looking at. I'm not a fan of looking up the same key twice, but it can be reduced.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14818235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294", "body": "I remember now why I wanted to iterate over the inputs instead of checking for the known keys: if the programmer using this method makes a typo, we will ignore that option instead of complaining, which can cause subtle bugs, as there is no indication that we're ignoring an argument that was passed. I didn't end up doing it as we just have the two things, but when this gets extended, we should raise an exception if we get something we don't recognise as an option.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14854294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992", "body": "All of these values will be unitialised if they're not passed. Instead of this, you should let `PyArg_ParseTupleAndKeywords` write into the options structure directly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15392992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723", "body": "Again, this has nothing to do with the username the user may have passed as a hint. _This_ username is the only one that counts, and it has to be the username as which you wish to authenticate to the ssh host.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16031723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524", "body": "There's no need for this line. You're already setting the version above with the init function. If the version does increase, this would cause libgit2 to consider the struct to have a different layout.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16348524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924", "body": "`self._self_handle` needs to be set to `None` after the push operation completes, next to freeing the push object itself.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/18427924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737", "body": "One of these lies is redundant. If we're going to rely on the superclass' constructor, then there's no need for us to store the username explicitly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/17552737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "xtao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396", "body": "I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9064396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021", "body": "More than one space.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/9171021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "vtemian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155", "body": "Why not `from_c` like in `Index.from_c`? Is more consistent this way\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14758155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831", "body": "Why do you need to iterate? You can do it with 2 if statements:\n\n``` python\nif 'strategy' in kwargs:\n  copts.checkout_strategy = kwargs['strategy']\n\nif 'directory' in kwargs:\n  target_dir = ffi.new('char[]', to_str(kwargs['directory']))\n  refs.append(target_dir)\n  copts.target_directory = target_dir\n```\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881", "body": "I think you delete by mistake an `h` from `Show`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/14817881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ArnoVanLumig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170", "body": "Thanks!\n\nI actually figured that out myself but forgot to commit and push it... Thanks for the heads-up!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/15393170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mduggan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362", "body": "Ah, I was doing it in a little bit of a weird order.. I wanted to create the \"default\" callbacks first so that any error could raise before the custom callbacks had been set.. but fair point about the version number being set differently on the two lines.. if it changes in one place it will need to change in both,\n", "reactions": {"url": "https://api.github.com/repos/libgit2/pygit2/pulls/comments/16349362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}