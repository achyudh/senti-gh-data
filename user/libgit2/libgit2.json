{"_default": {"1": {"medranocalvo": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482", "title": "Incorrect git_push_options's pb_parallelism documentation", "body": "The `pb_parallelism` field of the `git_push_options` structure is documented to default to 1 (meaning no parallelism), but it is actually initialized to 0 by default (meaning auto-detected parallelism).\r\n\r\n>  If the transport being used to push to the remote requires the creation of a pack file, this controls the number of worker threads used by the packbuilder when creating that pack file to be sent to the remote. If set to 0, the packbuilder will auto-detect the number of threads to create. **The default value is 1**.\r\n\r\n~~~\r\n#define GIT_PUSH_OPTIONS_INIT { GIT_PUSH_OPTIONS_VERSION, 0, GIT_REMOTE_CALLBACKS_INIT, GIT_PROXY_OPTIONS_INIT }\r\n~~~\r\n\r\nPlease, correct the documentation or the initial value.  In my case, the automatic parallelism was unexpected.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480", "title": "Unnecessary syscalls on bare repository", "body": "### Reproduction steps\r\nDiff any two commits on bare repository and observe behaviour with strace.\r\n\r\n### Expected behavior\r\nDon't query stat for files on a bare repository.\r\n\r\n### Actual behavior\r\nStat checked for every file in diff, if it's a bare repository.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nMaster 782402c271d5467f9890af8e808af938a93bc55f\r\n\r\n### Operating system(s) tested\r\nArch Linux\r\n\r\nI just tried diffing with the current `master` libgit2 build. While the other bug with unnecessary syscalls for `.gitattributes` and `attributes` was fixed, there are still some `stat` calls for files, which shouldn't be necessary on a bare repository.\r\n\r\nI'm using pygit2 for my interaction with git repositories, but as far as I can see, this is actually a issue with libgit2.\r\n\r\nCurrent  output:\r\n```\r\n[pid 15375] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"/tmp/gitalizer/phoemur/slackbuilds-1/info/attributes\", 0x7ffe5758e5f0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n```\r\n\r\npygit2 issue:\r\nhttps://github.com/libgit2/pygit2/issues/764", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tyrielv": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479", "title": "Recursive merge uses parents of virtual commits instead of virtual commit itself when finding merge base", "body": "Recursive merge passes the parents of a virtual commit to git_merge_bases_many in place of the virtual commit. This produces a different result in some cases than git.exe.\r\n\r\n### Reproduction steps\r\nSee attached repo [bases.zip](https://github.com/libgit2/libgit2/files/1640783/bases.zip)\r\nCall git_merge_commits(), passing the commits for branchJ-1 and branchJ-2.\r\n\r\n### Expected behavior\r\nOne conflict, in version.txt\r\n\r\n### Actual behavior\r\nTwo conflicts, one in version.txt and one in targetfile.txt\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.26.0\r\n\r\n### Operating system(s) tested\r\nWindows 10\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Phrohdoh": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473", "title": "Request: Please consider publishing to conan.io", "body": "Hello, libgit2 team / community / maintainers!\r\n\r\n_Note: I am not affiliated with conan.io or JFrog in any way._\r\n\r\nI am not a C developer by any means (I'm quite positive I would lose all of my limbs in a matter of minutes with C) which goes to show that I am also quite clueless regarding dependency management but from what I understand C (and C++) mostly consist of copying headers and implementation files of dependencies in-tree.\r\n\r\nGiven the above it is quite difficult, in my limited experience, to stay up to date (or even track which version of a library you are using).\r\n\r\nIt is my belief that more projects and developers (myself included of course) could benefit from the work put into libgit2 if it were easier to depend on in a trackable way.\r\n\r\nThis is where my request for you all (and if you decide to and I can help please let me know how!) to consider publishing libgit2 releases to [conan.io](https://conan.io/index.html) which markets itself as \"Conan, the C / C++ Package Manager for Developers.\"\r\n\r\n[`conan`](http://docs.conan.io/en/latest/getting_started.html) use is driven by the [`conanfile.txt`](http://docs.conan.io/en/latest/reference/conanfile_txt.html) which allows downstream projects to declare dependencies which the conan tool will resolve and build as specified in the manifest.\r\n\r\nIf the overhead of management and setup of publishing to conan.io outweighs the benefits then please note so and close this.\r\n\r\nThank you for your time!\r\n\r\n**Edit**: Corrected a link.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rankr": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469", "title": "Test failures", "body": "### Reproduction steps\r\nRun tests in bulid directory, with command \"ctest -V\"\r\n### Expected behavior\r\nno test fail\r\n### Actual behavior\r\nThe following tests FAILED:\r\n\t  1 - libgit2_clar (Failed)\r\nsome details:\r\n1:   2) Failure:\r\n1: diff::binary::delta [/Users/file4/libgit2-0.26.0/tests/diff/binary.c:53]\r\n1:   String mismatch: expected != actual.ptr\r\n### Version of libgit2 (release number or SHA1)\r\nlibgit2-0.26.0\r\n### Operating system(s) tested\r\nmacOS 10.13.2 (17C88)\r\n###some more info:\r\ncmake version 3.10.1\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlosmn": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465", "title": "Release v0.27.0 & v0.26.1", "body": "We're at that time again where we want to make a new release.\r\n\r\nFor the v0.27 series, codenamed \"Stadtrandsiedlung\"\r\n\r\n- [ ] Bump the versions in the headers\r\n- [ ] Make a release candidate\r\n- [ ] Plug any final leaks\r\n- [ ] Fix any last-minute issues\r\n- [ ] Make sure CHANGELOG reflects everything worth discussing\r\n- [ ] Update the version in CHANGELOG and the header\r\n- [ ] Produce a release candidate\r\n- [ ] Tag\r\n- [ ] Create maint/v0.27\r\n- [ ] Update any bindings the core team works with\r\n\r\nFor v0.26.1\r\n\r\n- [ ] Select the changes we want to backport\r\n- [ ] Update maint/v0.26\r\n- [ ] Tag", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/ecd55cec771d9c6f7ffffe80422a1decd4645c17", "message": "Merge pull request #4477 from pks-t/pks/memleaks\n\nMemory leaks"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f1323d9c161aeeada190fd9615a8b5a9fb8a7f3e", "message": "Merge pull request #4472 from libgit2/ethomson/libgit2deps_azure\n\ntravis: fetch trusty dependencies from Bintray"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6e748130e4f910b6f8c03a3f6f2e11c856d19ba7", "message": "travis: we use bintray's own key for signing\n\nThe VM on Travis apparently will still proceed, but it's good practice."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6d452600fa5c351670c9200e7c48f1da1191c5b8", "message": "cmake: use a FEATURE_SUMMARY call compatible with 3.0.2\n\nWhen we print features, we make an effort to support all the way back to\npre-3.0. However, in the code for versions from 3 onward we call\n`FEATURE_SUMMARY` with multiple kinds of elements to print in the same line.\nThis is only supported in CMake 3.1 and later, making the rather popular CMake\n3.0.2 unable to build the library.\n\nUse a single kind of element per invocation. This means we need to provide a\n\"description\" text, which CMake provides for us if provide multiple kinds of\nelements."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a7e36d3d9c473647f141b24d398a98171744ceee", "message": "Merge pull request #4468 from libgit2/cmn/openssl-pc\n\nMake sure to include 'openssl' as a dep when building statically with SHA1DC"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b21c5408ff18eaf99029f59e738f6f614a53c90d", "message": "cmake: add openssl to the private deps list when it's the TLS implementation\n\nWe might want OpenSSL to be the implementation for SHA-1 and/or TLS. If we only\nwant it for TLS (e.g. we're building with the collision-detecting SHA-1\nimplementation) then we did not indicate this to the systems including us a\nstatic library.\n\nAdd OpenSSL to the list also during the TLS decision to make sure we say we\nshould link to it if we use it for TLS."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b85548edb027474af3d107f9faa004cc09a1863a", "message": "cmake: treat LIBGIT2_PC_REQUIRES as a list\n\nIt is indeed a list of dependencies for those which include the static archive.\nThis is in preparation for adding two possible places where we might add openssl\nas a dependency."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ddd36510b589f8dd39a9bfaaecfb9160dc943f42", "message": "Merge pull request #4467 from libgit2/cmn/static-archive-later\n\ncmake: move the rule to find static archives close to building clar"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/85e40bbf0938cac5668e810864f6be9619b9e60e", "message": "cmake: move the rule to find static archives close to building clar\n\nIf we're building static libraries, we want to use that for building our clar\nbinary. This is done in 49551254 (2017-09-22; cmake: use static dependencies\nwhen building static libgit2) but that commit included the rule too early,\nmaking it affect the search for iconv, meaning we did not find it when we were\nbuilding a static libgit2.\n\nMove the rule to just before building clar, after we've included the rules for\nbuilding the library itself. This lets us find and link to the dynamic libiconv."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4478", "title": "refs: include \" sorted \" in our packed-refs header", "body": "This lets git know that we do in fact have written our packed-refs file\r\nsorted (which is apparently not necessarily the case) and it can then use the\r\nnew-ish mmaped access which lets it avoid significant amounts of effort parsing\r\npotentially large files to get to a single piece of data.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4418", "title": "Re-enable the RC4 test", "body": "We disabled this test while dealing with a security issue. Enable it again and make the error handling in the OpenSSL stream let us return the actual error due to trying to talk to RC4.\r\n\r\n`GIT_ECERTIFICATE` is likely not _really_ the right thing to return here since it's not really about the certificate but about not supporting our cipherlist. We will likely want a specific error code for this (or we can overload this one, but TLS is confusing enough as it is).", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4396", "title": "config: specify how we match the regular expressions", "body": "We do it the same as git does: case-sensitively on the normalized form of the\r\nvariable name.\r\n\r\nWhile here also specify that we're case-sensitive on the values when handling\r\nthe values when setting or deleting multivars.\r\n\r\n---\r\n\r\n#4390 highlights this deficiency in the documentation.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119", "body": "This is actually a debug statement that sneaked in. I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464", "body": "This causes us to behave differently to `git.git` by allowing comments inside multi-line values. I'm not sure whether that's a good thing or not\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349", "body": "On Tue, Apr 26, 2011 at 03:33:49PM -0700, tclem wrote:\n\n> > -   str[input_sp - input] = '.';\n> >   +\n> > -   for (i = 0; i < 2; ++i) {\n> > -       quote = strrchr(str, '\"');\n> > -       memmove(quote, quote + 1, strlen(quote));\n> > -   }\n> >   +\n> > -   return GIT_SUCCESS;\n> >   +}\n> >   +\n> >   +void git__strntolower(char *str, int len)\n> >   +{\n> > -   int i;\n> >   +\n> > -   for (i = 0; i < len; ++i) {\n> > -       str[len] = tolower(str[len]);\n> \n> I think you meant to do this: `str[i] = tolower(str[i]);`\n\nYes I do. Thanks for catching this.\n\n## \n\nCarlos Mart\u00edn Nieto | http://cmartin.tk\n\n\"\u00bfC\u00f3mo voy a decir bobadas si soy mudo?\" -- CACHAI\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362", "body": "The way I understood it, buffer_end in this function points to the end of the specified entry, because the entry length is parsed in the caller\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492", "body": "No, it's not. I removed that at least once but I must have gotten confused with all the rebasing I was doing\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "stanhu": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460", "title": "High number of `stat` calls for `gitattributes` files", "body": "I've noticed that libgit2 makes a high number of `stat` calls to `gitattributes` files, which significantly impacts networked file systems.\r\n\r\n### Reproduction steps\r\n\r\nWith the Linux repo (https://github.com/torvalds/linux.git), I created this Rugged script:\r\n\r\n```ruby\r\nrequire 'rugged'\r\n\r\nrepo = Rugged::Repository.new('.')\r\n\r\ncommit_object = repo.rev_parse('master')\r\noriginal_oid = repo.rev_parse('979e1f08042b83152dfe3d76df10db31eb7edf98')\r\ndiff_commits = commit_object.parents[0].diff(original_oid)\r\n\r\nputs diff_commits.stat\r\n```\r\n\r\nThe result is 30,497 files changed with 753,086 additions and 1,345,193 deletions. Now if I run `strace` on this, I see there are 457,782 hits with `gitattributes`:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/diff-linux.txt -s 1024 ruby diff.rb                                                                                                     \r\n30497\r\n753086\r\n1345193\r\n$ grep gitattributes /tmp/diff-linux.txt | wc -l\r\n457782\r\n```\r\n\r\nLooking at it in more detail, I see that we are often duplicating the same lookup:\r\n\r\n```sh\r\n07:38:38.120824 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.120852 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.120881 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.120949 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121019 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.121270 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121301 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121329 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121356 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.121390 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.121742 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.121805 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122075 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122105 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122133 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122161 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122189 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122249 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122305 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000013>\r\n07:38:38.122602 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.122631 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122659 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122686 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000009>\r\n07:38:38.122715 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122816 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122874 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123136 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123164 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123192 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123219 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123247 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123309 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123365 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123628 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123656 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123688 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123729 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.123767 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:38:38.123919 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123983 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.124245 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.124273 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n```\r\n\r\n### Expected behavior\r\n\r\nIf I compare this with the `git` call, I \"only\" see 7,951 hits:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/git-compare.txt -s 1024 git diff 979e1f08042b83152dfe3d76df10db31eb7edf98..master > /dev/null\r\n$ grep gitattributes /tmp/git-compare.txt | wc -l\r\n7951\r\n```\r\n\r\nThe actual hits look a lot more sensible:\r\n\r\n```\r\n07:42:52.269330 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.269446 open(\".gitattributes\", O_RDONLY) = 4 <0.000014>\r\n07:42:52.270123 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.270203 open(\".gitattributes\", O_RDONLY) = 4 <0.000028>\r\n07:42:52.274058 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.274105 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.274143 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274604 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274646 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.274682 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.275014 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000017>\r\n07:42:52.275347 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.276283 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.276479 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289449 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.289506 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.289545 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289900 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000023>\r\n07:42:52.289962 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290002 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290237 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.290604 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.310600 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.313085 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.320641 open(\"Documentation/acpi/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n```\r\n\r\n### Actual behavior\r\n\r\nExcessive number of `stat` calls for `gitattributes`\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nRugged 0.26.0 \r\n\r\n### Operating system(s) tested\r\n\r\nUbuntu Linux 16.04\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TomGle123": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458", "title": "Missing support for 'subtree' merge strategy", "body": "Using LibGit2Sharp I noticed there was no support for merge strategies other than 'Standard' and 'Octopus'.  I was looking to use the 'Subtree' strategy ([docs](https://git-scm.com/docs/merge-strategies#merge-strategies-subtree)).  I'd like to add support for this merge strategy in LibGit2Sharp but it is also missing from LibGit2, and I only program C#.\r\n\r\nMaybe there are technical reasons why this feature is not implemented, but if not, it would be a useful addition for me, allowing me to write tooling in C# based around the 'subtree' merge strategy.\r\n\r\nReported against master commit 'd621024'.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fuhao92": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454", "title": "hello, I use git_index_add_bypath(), to add about 500M zip file, but it return out of memoryOperator failed?", "body": "You are opening a _bug report_ against the libgit2 project.  If you have a\r\nquestion about an API or usage, please ask on StackOverflow:\r\nhttp://stackoverflow.com/questions/tagged/libgit2.  Please fill out the\r\nreproduction steps (below) and delete this introductory paragraph.  Thanks!\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aw32": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452", "title": "SSH: Pass hostkey to certificate check callback", "body": "Feature request:\r\nThere is the certificate check callback for remote connections.\r\nFor the SSH certificate check `git_cert_hostkey` can only contain the MD5 and/or SHA1 hash of the hostkey as passed from libssh2. Since MD5 and SHA1 are not considered trustable anymore, it would be nice to receive the actual hostkey as returned by libssh2.\r\nWould you consider this reasonable enough to accept a pull request?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441", "title": "git_diff_hunk documentation has one-off field descriptions", "body": "The documentation for `git_diff_hunk` has descriptions that are for the wrong fields. (Documentation found https://libgit2.github.com/libgit2/#HEAD/type/git_diff_hunk)\r\n\r\n# Actual:\r\n```\r\nint | old_start\r\n\r\nint | old_lines: Starting line number in old_file\r\n\r\nint | new_start: Number of lines in old_file\r\n\r\nint | new_lines: Starting line number in new_file\r\n\r\nsize_t | header_len: Number of lines in new_file\r\n\r\nchar [128] | header: Number of bytes in header text\r\n```\r\n\r\n# Expected:\r\n```\r\nint | old_start: Starting line number in old_file\r\n\r\nint | old_lines: Number of lines in old_file\r\n\r\nint | new_start: Starting line number in new_file\r\n\r\nint | new_lines: Number of lines in new_file\r\n\r\nsize_t | header_len: Number of bytes in header text\r\n\r\nchar [128] | header: Header text, NUL-byte terminated\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rgburke": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428", "title": "git_revwalk_next is slow on first iteration since v0.25", "body": "git_revwalk_next is slow on its first iteration for versions 0.25, 0.26 and master when compared to v0.24. This is especially noticeable on large repositories.\r\n\r\n### Reproduction steps\r\nRun the following program on the Linux kernel source tree (https://github.com/torvalds/linux):\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <git2.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n        git_libgit2_init();\r\n\r\n        git_repository *repo;\r\n        if (git_repository_open(&repo, \".git\")) {\r\n                fprintf(stderr, \"Failed to open repository\\n\");\r\n                return 1;\r\n        }\r\n\r\n        git_oid oid;\r\n        git_oid_fromstr(&oid, \"a0651c7fa2c088a605f63792279859608ed7f2c8\");\r\n\r\n        git_revwalk *revwalk;\r\n        git_revwalk_new(&revwalk, repo);\r\n        git_revwalk_sorting(revwalk, GIT_SORT_TIME);\r\n        git_revwalk_push(revwalk, &oid);\r\n\r\n        if (!git_revwalk_next(&oid, revwalk)) {\r\n                git_commit *commit;\r\n\r\n                if (git_commit_lookup(&commit, repo, &oid)) {\r\n                        fprintf(stderr, \"Failed to lookup commit\\n\");\r\n                        return 1;\r\n                }\r\n\r\n                printf(\"%s\\n\", git_commit_message(commit));\r\n                git_commit_free(commit);\r\n        }\r\n\r\n        git_revwalk_free(revwalk);\r\n        git_repository_free(repo);\r\n\r\n        return 0;\r\n}\r\n```\r\n\r\n### Expected behavior\r\nWhen using v0.24 this program runs in a couple of milliseconds:\r\n```\r\nrichard@DevNew:~/code/linux$ time ./revwalktest >/dev/null\r\n\r\nreal\t0m0.006s\r\nuser\t0m0.000s\r\nsys\t0m0.006s\r\n```\r\n\r\n### Actual behavior\r\nWhen using v0.25, v0.26 or master this program has not completed after 1 minute:\r\n```\r\nrichard@DevNew:~/code/linux$ timeout 60s ./revwalktest\r\nrichard@DevNew:~/code/linux$ echo $?\r\n124\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.25, v0.26 & master\r\n\r\n### Operating system(s) tested\r\n```\r\nLinux DevNew 4.13.0-17-generic #20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ColMelvin": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425", "title": "git_index_add_frombuffer creates 0160000 mode objects as blobs", "body": "The `git_index_add_frombuffer` function accepts the commit mode, `0160000`, when creating a new entry from a buffer.  However, it creates the commit mode entry as a blob.  Since a blob object and a commit object with the exact same data will have a different SHA-1 checksum, this behavior may lead to unexpected results.\r\n\r\nNotably, `git_index_add_frombuffer` will return an error when the tree mode, `040000`, is provided for the mode.  I think the same should happen for `0160000`.\r\n\r\n### Reproduction steps\r\nThe reproduction code below uses a modified version of Perl's Git::Raw v0.74, available at https://github.com/jacquesg/p5-Git-Raw/pull/191.  This modification will hopefully be included in v0.75.\r\n\r\n```perl\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\nuse warnings;\r\n\r\nuse File::Temp;\r\nuse Git::Raw;\r\nuse Test::More tests => 3;\r\n\r\nmy $dir   = File::Temp->newdir();\r\nmy $repo  = Git::Raw::Repository->init( $dir->dirname, 1 );\r\nmy $index = $repo->index;\r\n\r\nmy $COMMIT_DATA = \"tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\\x0aauthor A U Thor <author\\@example.com> 1234567890 +0000\\x0acommitter C O Mitter <committer\\@example.com> 1234567890 +0000\\x0a\\x0aEmpty\\x0a\";\r\nmy $COMMIT_SHA  = '746262f5c8ed0115432581c2bcf8f08c77ae76c8';\r\n\r\n$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );\r\nmy $tree = $index->write_tree;\r\n\r\nmy ($entry) = $tree->entries;\r\nis $entry->file_mode,  0160000;               # Passes\r\nisa_ok $entry->object, 'Git::Raw::Commit';    # Fails\r\nis $entry->object->id, $COMMIT_SHA;           # Fails\r\n\r\nexit;\r\n\r\n# Sanity check proving actual commit value\r\nmy $hash = qx{cd '$dir'; echo -n '$COMMIT_DATA' | git hash-object -t commit --stdin};\r\nchomp $hash;\r\nis $hash, $COMMIT_SHA;                        # Passes\r\n```\r\n\r\n### Expected behavior\r\n\r\nEither:\r\n- all tests pass, or\r\n- script dies at `$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );` with 'invalid filemode'\r\n\r\n### Actual behavior\r\n\r\nScript runs to completion; 2nd & 3rd tests fail.\r\n\r\n```\r\n1..3\r\nok 1\r\nnot ok 2 - An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit'\r\n#   Failed test 'An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit''\r\n#   at proof line 22.\r\n#     The object of class 'Git::Raw::Blob' isn't a 'Git::Raw::Commit'\r\nnot ok 3\r\n#   Failed test at proof line 23.\r\n#          got: 'f8aabe3d076ed2278a652ba6d76ea152148daa3c'\r\n#     expected: '746262f5c8ed0115432581c2bcf8f08c77ae76c8'\r\n# Looks like you failed 2 tests of 3.\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nTested Git::Raw v0.74 (ee89941fa2 of libgit2, per Changes file).\r\n\r\nInspection of the code suggests the issue remains (as of 364184acca0d993deaeb060197b595f7c49ea226)\r\n\r\n### Operating system(s) tested\r\nLinux 3.10.0-514.26.2.el7.x86_64\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianmario": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/4893a9c01c8da084eb995178f80d0d453109056e", "message": "Merge pull request #4451 from libgit2/charliesome/trailer-info\n\nImplement message trailer parsing API"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d4a3a4b5383fefcb397524340af05118b4687f29", "message": "rename find_trailer to extract_trailer_block"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3e5239e42a529e99dc584ce37402856a4da26cec", "message": "update code docs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1e758fd3154eef0bf1237fb20b2180ad08cfe28d", "message": "just use git_message_trailer in tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6062032e452afea451901333089da834edbe2078", "message": "try and fix windows build"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d43974fb5cbfda6ec28fc92b83d03db0af73748b", "message": "Change trailer API to return a simple array"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5734768b9edaecedaa7b13fed2ce59cb588df7e8", "message": "Merge remote-tracking branch 'origin/master' into charliesome/trailer-info"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f4f0e7eb0f8280ed6100c37c3af0aa66c31a8f9e", "message": "switch back to braced array initializers"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f315cd1470e21dee0dc48cc6b53ffbd30122c917", "message": "make separators const a macro as well"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fb29ba0953ef52ce94aecd93b9b4a3bcc64cf07c", "message": "remove empty lines between @-lines"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1cda43ba34b40b82ff6470799d36e54a176aaad5", "message": "make comment_line_char const a macro"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6bc7301e8ab6194179423b95a481942e2fa11329", "message": "Don't use newer C syntax for declaration in tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759", "body": "should this be checking r (if the strdup succeeded) instead of s?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266", "body": "Sweet thanks dude!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pks-t": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/782402c271d5467f9890af8e808af938a93bc55f", "message": "tests: refs::iterator: fix memory leak due to ref names not being free'd\n\nThe test refs::iterator::foreach_name iterates through every reference\nand copies its name into a local vector. While the test makes sure to\nfree the vector afterwards, the copied reference names are not being\nfree'd. Fix that."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5963292f9ebc8b06ad307e2ed10eec845424e74e", "message": "refs: document need to free refs in foreach-callback\n\nReferences passed to the callback function of `git_reference_foreach`\nare expected to be owned by the callback. As such, they are never being\nfreed by `git_reference_foreach`, but will have to be freed by the\ncaller. This small detail is never mentioned in the function's\ndocumentation, though, making it easy to get wrong. Document this to\nmake it discoverable."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/90f81f9fdc6d87c4ca75e4f065e1eb4818c99674", "message": "transports: local: fix memory leak in reference walk\n\nUpon downloading the pack file, the local transport will iterate through\nevery reference using `git_reference_foreach`. The function is a bit\ntricky though in that it requires the passed callback to free the\nreferences, which does not currently happen.\n\nFix the memory leak by freeing all passed references in the callback."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/093e671ee8fb824e3e40677ed7440dba72483fe1", "message": "tests: network::fetchlocal: let cleanup function handle sandbox cleanup\n\nTwo tests in network::fetchlocal explicitly set a cleanup function to\nfree and remove the created sandbox repositories. This is not necessary,\nthough, as the cleanup function executed after each test already takes\ncare of cleaning up after them. Remove the code to avoid needless code\nduplication."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0b967396033b059d683bdecec85c2838c428a74e", "message": "Merge pull request #4471 from libgit2/cmn/cmake-feature-302\n\ncmake: use a FEATURE_SUMMARY call compatible with 3.0.2"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70aa61460a4f33509aa06ed86ac3becc243ee5d6", "message": "cmake: allow explicitly choosing SHA1 backend\n\nRight now, if SHA1DC is disabled, the SHA1 backend is mostly chosen\nbased on which system libgit2 is being compiled on and which libraries\nhave been found. To give developers and distributions more choice,\nenable them to request specific backends by passing in a\n`-DSHA1_BACKEND=<BACKEND>` option instead. This completely replaces the\nprevious auto-selection."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e7495ce6f4dee156b6a1d48a4d478c83d1053236", "message": "cmake: default to using SHA1DC\n\nUpstream git.git has changed their default SHA1 implementation to the\ncollision-detection algorithm SHA1DC in commit e6b07da27 (Makefile: make\nDC_SHA1 the default, 2017-03-17). To match upstream, align ourselves and\nswitch over to SHA1DC by default."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4481", "title": "tests: online::clone: fix memory leak due to not freeing URL", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4476", "title": "scripts: add backporting script", "body": "This adds a simple script for backporting pull requests to older\r\nbranches. It accepts as parameters a list of pull request numbers which\r\nwhose commits are to be cherry-picked. The identification of PRs\r\ncurrently happens by using the commit message of the merge of the PR,\r\nwhich should conform to the message \"Merge pull request #<PR>\".\r\n\r\nWhile the heuristic works in practice, we could instead also use the\r\ndirect references from GitHub via \"pull/#<PR>/head\". This requires the\r\nuser to have all these references fetched, though, so we can just use\r\nthe current heuristic until we experience any issues with that.\r\n\r\n---\r\n\r\nDunno if we want this. I've used this script to create #4475, and I think a bit of automation is nice to have.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4475", "title": "v0.26.1 backports", "body": "Proposed backports for v0.26.1. This includes all PRs that I've currently marked with the \"backport\" label:\r\n\r\n- #4045\r\n- #4455\r\n- #4447\r\n- #4444\r\n- #4437\r\n- #4435\r\n- #4432\r\n- #4431\r\n- #4427\r\n- #4426\r\n- #4424\r\n- #4423\r\n- #4408\r\n- #4386\r\n- #4369\r\n- #4368\r\n- #4367\r\n- #4364\r\n- #4359\r\n- #4357\r\n- #4344\r\n- #4326\r\n- #4306\r\n- #4296\r\n- #4280\r\n- #4273\r\n\r\nI've initially included #4277 as well, but that code was only merged after v0.26.0 in #4202.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4474", "title": "Special-casing null OIDs", "body": "I've been triggered by the not-so-recent discussion in upstream git.git around null OIDs (see [1]) to implement some defensive mechanisms about ever reading or writing null OIDs either via the ODB layer or into trees. For the ODB part, I now reject writing and shorcut reading null OIDs while for trees I've only implemented the rejection on inserting entries into the treebuilder. So I've not changed the reading part for our trees.\r\n\r\n[1]: https://marc.info/?l=git&m=151120958313567&w=2", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4438", "title": "Multiple hash algorithms", "body": "A first step towards an abstraction for the use of multiple of hash algorithms. It lays the groundwork for having `git_hash_ctx` dispatch to different hash algorithms based on which one is being requested. Next steps:\r\n\r\n- extend `git_repository` by a `git_hash_algorithm` field\r\n- implement required new algorithms\r\n- extend `git_hash_init` and `git_hash_ctx_init` to accept an algorithm which is then used for hashing by that particular context only\r\n- extend OIDs to be a union of all possible hashes\r\n- scavenge through the tree and adjust all callers. In most cases we'd want to retain SHA1 (e.g. pack trailers, patch IDs, filebuffers), for others we'd simply use whatever the repository format states", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4436", "title": "pack: rename `git_packfile_stream_free`", "body": "The function `git_packfile_stream_free` frees all state of the packfile\r\nstream without freeing the structure itself. Thus, the function is\r\nmisnamed, as we usually call such a function a \"clear\" function. Rename\r\nit to make clear that in fact it does not free the structure.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4417", "title": "[RFC] Khash refactorings (pt. 2)", "body": "Another round of khash fixes. While my first round of fixes only touched our own abstractions (git_oidmap, git_strmap, git_idxmap and git_offmap), this PR revamps the complete khash implementation. I've been too fed up with digging into those awful macros, so I decided to take the bait and decided to refactor that part.\r\n\r\nSo what I did is to make the khash implementation itself non-generic. Instead of having a macro to create per-type map structs, we now have a single map which has a void pointer only. This relieves us of all those macro magic, but possibliy at the cost of performance. I haven't measured that yet, but will do so if desired.\r\n\r\nSo this is mostly cosmetic only. I plan to do further refactorings in the future, as I think our map interfaces simply suck right now. They are not intuitive and do not follow our coding guidelines. This here is a first step, but seeing that it may be controverse I wanted to put up a RFC first.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4411", "title": "Config parser cleanups", "body": "Two small cleanups to make code more readable in our config parser.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4374", "title": "Pack file verification", "body": "Warning: this is ugly and, at least to me, in many places it feels like I'm doing hacks over hacks to work around our object system. The main problem here is that we currently cannot parse objects which are not owned by the ODB system, because our objects point into the reference-counted memory of the ODB. So when I try to parse an object which is not owned by the ODB, then this will crash later on after `git_odb_object_deref`, as it tries to free objects which aren't owned by itself or not even part of the heap. So yeah, this doesn't look as nice as it could in an ideal world.\r\n\r\nOn the other hand, this seems to work just fine right now. After nearly a whole day of cursing and debugging I think I've finally got it right. So what do I do? This is mostly the implementation of `git index-pack --strict`, doing two things:\r\n\r\n1. check whether all objects of a pack can be parsed correctly\r\n2. check all references to other objects for commits, tags and trees\r\n\r\nWhat this gets us is that we can verify that a pack is complete (we've got all objects such that we can resolve the complete graph) when we receive the pack.\r\n\r\nI've discussed the design a bit in Slack with @carlosmn. My first thought was to just perform an object walk after fetching the complete pack file. But seeing that in most cases we're limited by network bandwidth while fetching the pack file, we agreed that it would be much nicer to just do as much of the heavy lifting as possible during retrieval of the pack. So the algorithm works as follows:\r\n\r\n1. for every non-deltified object passed to the indexer\r\n    * strike its object ID from `expected_oids`, which keeps track of OIDs we still expect to find as part of the pack file\r\n    * parse the object\r\n    * add object IDs referenced by the object to the `expected_oids`\r\n2. when resolving delta objects, do the same with regards to the `expected_oids` map\r\n3. afterwards, check that the `expected_oids` map has no entries anymore, as all object references should now be resolved correctly\r\n\r\nI'm just putting this up early to get early feedback from the CI and reviewers. I'm not happy with some of the things I had to do here, even though they work.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ethomson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/da9898aba0fe26ea683822e99853bfb2b02ac744", "message": "travis: fetch trusty dependencies from bintray\n\nThe trusty dependencies are now hosted on Bintray."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70db57d4a431dae2edcf19e92a84db8d6cf4f935", "message": "Merge pull request #4398 from pks-t/pks/generic-sha1\n\ncmake: allow explicitly choosing SHA1 backend"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4450", "title": "Streaming read support for the loose ODB backend", "body": "Change the streaming reader API a bit, to provide the type and length of the object when initializing the stream. This would be a breaking API change - except, of course, that nobody is actually using the streaming reader API since none of the backends support it. So I feel pretty good breaking this API that nobody could be using.\r\n\r\nAdd streaming reader support to the loose object ODB backend. I cleaned up a bit while I was in there to add some more tests for things like read_header which had no explicit tests (and in fact failed on some of the loose ODB test corpus), teach read_header how to cope with \"packlike loose objects\" (which were a weird loose object format that was attempted for a bit and will never actually be seen in the wild) and drop the odb_loose internal zstream abstraction layer that ultimately became git_zstream.\r\n\r\nNote that this depends on #4443.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4416", "title": "WIP: travis: fail on memory leaks", "body": "Pass `--error-exitcode=125` to valgrind so that it will exit with a non-zero exit code when it detects a memory leak.  Use an exit code of `125` to stay safely above any clar errors and safely below any shell errors.\r\n\r\n**Note**: I suspect that there are some tests that we'll need to either exclude from valgrind's examination, or perhaps not run at all.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bisho": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4470", "title": "Fix error handling of odb_object__alloc() in odb_read_1()", "body": "If `odb_object__alloc()` returns `NULL` (fails to allocate) it currently goes to `out`. If error is != 0 we will try to free raw.data, when raw couldn't be allocated. If error is 0, then we are silently swallowing the allocation error, and possibly causing access to a wrong `out` pointer. Let's return an error instead.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fcharlie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4463", "title": "Now vcpkg support build and install libgit2", "body": "https://github.com/Microsoft/vcpkg/tree/master/ports/libgit2", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "softwareplumber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4461", "title": "Textconv support (Issue #1328)", "body": "Here's an initial stab at providing textconv support.\r\n\r\nCaveat: It's about 20 years since I last wrote any C code.\r\n\r\nThere is a feature switch (a diff option GIT_DIFF_ENABLE_TEXTCONV), and some limited unit tests (tests/textconv). Much code is copied from the existing implementation of filter. Some code common to filter and textconv as been moved from filter.c to a new file file filter_textconv.c to keep the dependency graph relatively sane. \r\n\r\nNext step is to do some testing downstream (I'll be building this into a fork of gitlab). Plan to add more unit tests based on issues identified as I work on that.\r\n\r\nFigured the feature switch would make this a relatively benign experimental feature. My life would certainly be easier if this got merged into master early as any fixes to filter would be hard to merge.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techvoltage": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4459", "title": "Update callgit_remote_connect arguments", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hackhaslam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4448", "title": "Fix failure to fetch annotated tags added to existing commits", "body": "This is an attempt to fix #3870.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tiennou": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4446", "title": "Graft support", "body": "Depends on #4445. Sadly I can't open the PR against libgit2 *and* set that as the base branch, so do note that the first 2 commits come from that other PR.\r\n\r\nThis adds graft support to `git_repository` as a private API. The end goal is to be able to store and obey shallow roots when working with a shallow repository, but this is usable on its own.\r\n\r\nAs discussed on #4331, this is unrelated to the `git-replace` mechanism.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4445", "title": "DRY commit parsing", "body": "Splitted from #4331. See this PR for context.\r\n\r\nThis adds a \"quick\" mode to our commit parsing machinery, and makes the revwalk code instead of going with its own. The outcome is a nice, single place where grafts can be handled.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhchavez": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4433", "title": "libFuzzer: Add build support and instructions", "body": "This change adds support for building a fuzz target for exercising the\r\npackfile parser, as well as documentation. It also runs the fuzzers in\r\nTravis to avoid regressions.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cpoerschke": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4409", "title": "issue #3751 (Function to parse author and committer information from environment)", "body": "work-in-progress for issue #3751 (Function to parse author and committer information from environment)\r\n\r\n```\r\ncd build\r\ncmake --build . && ./libgit2_clar -v -srepo::init\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Etiene": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4407", "title": "merge: reload index before git_merge", "body": "When the index in memory diverges from the index in disk `git_merge`\r\naborts with `GIT_ECONFLICT`. More details about this are found in the \r\nissue #4203, which this PR attempts to fix.\r\n\r\nA further discussion is needed wether this behaviour is actually desired.\r\n(Suppose someone actually is writing something to the index in memory\r\nand a concurrent task is merging. A possible argument is that the index\r\nshould be written to disk then.)\r\n\r\nCloses #4203 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaborbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4405", "title": "add a more verbose mode to the test runner with better progress reporting", "body": "```bash\r\nLoaded 340 suites, with 2504 tests, starting\r\n\r\nattr::ignore [#1 with 18 tests]\r\n  honor_temporary_rules [#1] .\r\n  allow_root [#2] .\r\n  ignore_space [#3] .\r\n  ignore_root [#4] .\r\n  full_paths [#5] F\r\n  more_starstar_cases [#6] .\r\n  leading_stars [#7] .\r\n  globs_and_path_delimiters [#8] .\r\n  skip_gitignore_directory [#9] .\r\n  subdirectory_gitignore [#10] .\r\n  expand_tilde_to_homedir [#11] .\r\n  gitignore_in_subdir [#12] .\r\n  dont_ignore_files_for_folder [#13] .\r\n  symlink_to_outside [#14] S\r\n  test [#15] .\r\n  unignore_dir_succeeds [#16] .\r\n  case_insensitive_unignores_previous_rule [#17] .\r\n  case_sensitive_unignore_does_nothing [#18] .\r\n\r\n  1) Failure:\r\nattr::ignore::full_paths [C:\\Users\\berna\\git\\libgit2\\tests\\attr\\ignore.c:83]\r\n  expected != is_ignored\r\n  0 != 1\r\n\r\n\r\nran 18 [16 passed 1 skipped 1 failed] in 1 suits in 2.9370 seconds\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petersalomonsen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4400", "title": "Hacks to build with emscripten for running in a web browser", "body": "Introducing new build option:\r\n\r\nAPPLY_EMSCRIPTEN_HACKS\r\n\r\nwhich will apply necessary tweaks to run in a web browser. Also added emscripten_hacks folder with build script (build.sh) and instructions in README.md.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcarz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4389", "title": "implement NTLM authentication", "body": "This patch implements NTLMv2 session negotiation over HTTP. Git repositories served by Team Foundation Server are currently only accessible if IIS is configured for SPNEGO authentication, which isn't always the case. I excluded support for older LM/NTLM versions since they are strongly discouraged and unlikely to be used in the wild.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asandroq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4383", "title": "transports: Avoid walking over non-commit objects", "body": "References may point to objects that are not commits, such as tags to\r\nblobs. In that case the reference must not be walked over further.\r\n\r\nFixes #3595.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cjhoward92": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4380", "title": "examples: ls-files: add ls-files to list paths in the index", "body": "Added an example to mimic `git ls-files` using the libgit2 library. It also supports the `--error-unmatch` parameter to determine if the specified paths are in the index. This will hopefully be a useful example for new libgit2 users.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4378", "title": "submodule: check index for path and prefix before adding submodule", "body": "This is to fix an issue where libgit2 will allow you to add a submodule even if the path you are trying add is found on the index. In the CLI we get a nice error about this, but not in libgit2.\n\nI would obviously like some pointers on how to do this, as I do not think it is 100% correct. For one, when I add the trailing slash to the path, I feel like I could clean that up or have a better implementation. I am also unsure if there is a more streamlined routine to check the index for the path.\n\nSome advice on how I could clean this up would be awesome.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184", "body": "Merged back into the experimental branch. Thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246", "body": "Fixed in 585190183b47dc991605abcfbe3afb57220a0f29. git_person is no longer public, memory is dynamic and managed by the library, and there are getter methods in place.\n\nThanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559", "body": "Fixed in d80e9d55aa2d0629f7f207db42762494075d7854. Thanks as always for reporting -- and obviously, if you can cook a patch instead of opening an issue, that's even more awesome. Feel free to fork away!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177", "body": "Merged, thanks a lot. Can \"Any Day Now\" be asap? Just message me and I'll set up a repository for the bindings inside of libgit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196", "body": "Oh, Mr Pearce. The world is so small. ;d\n\nJust shout when you are clear to release, I'm looking forward to hacking on the Python bindings too. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077", "body": "I think that since 1795f87952a68155a618523799f70473483c7265 all public methods return a proper error code. Tell me if anything is missing.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561", "body": "Scott was kind enough to write a README.txt for us. We'll make sure to keep it up to date. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346", "body": "libgit2 hasn't built in Windows for a while, because I don't have a Windows box to try it on. ^^\n\nWe are working on that and it's pretty high on our TODO list: we have a new build system in the waf-build branch which now has support for building libgit2 as a shared library. I'll be testing that on Windows someday on the following week, expect an update.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769", "body": "Hey there! We've been working very hard on the Windows build, and it's almost there. So far MSVC 2010 and MinGW compile cleanly with our new build system. Can you give it a go and tell us if you find any issues?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830", "body": "...We've just migrated from Make to waf last night. Try updating your master branch and compiling again. Shared targets should be available in all platforms.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367", "body": "Hey, we have two new commits! The shared library now builds without errors on all platforms I've tried, and you can choose compiler version with the --msvc flag, and target platform with the --arch flag.\n\nTell me if you find any more issues!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374", "body": "Oh, and yes, that's the 'expected' procedure for installing the library dependencies under MSVC: either copy them to the VC folder, or in any other folder inside of your %%LIB%% environment variable.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213", "body": "Hey people, thanks for your interest.\n\nThis is indeed a very interesting idea, and is something we have certainly on our TODO list: what we plan on doing is decoupling the storage system from the object database logic, as to allow people to write custom drivers on their apps to use **anything** as the backend on their Git app... From in-memory storage, to Cassandra. How cool is that? I'll tell you: very cool.\n\n...however, it has to wait, because our main focus right now are network ops. So stay tuned.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452", "body": "Hey, couple questions while I get QT Builder to try this out: have you actually tested this on Windows? What compiler does it use on that platform, can you choose between MSVC and GCC? Also, it seems like this only builds a shared library. How can we go about a static one?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942", "body": "Indeed, indeed. I don't know what was going on Shawn's head. :p\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966", "body": "Yes, we are now using a custom commit structure internally (not a normal git_commit) with very tight packing and only the minimal required fields for revision walking. It's the price to pay for a 20x increase in walking speed. You can get the OID of a commit just by calling `git_object_id(commit);`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002", "body": "Yeah, in fact, in most scenarios for revision walking, you have an OID and not a commit object: see `git_reference_listall`, `git_reference_resolve` and `git_reference_oid`, which would be used to find the HEADs of all the branches in your repository. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005", "body": "Ew, sometimes I forget that there are bindings for languages not written in C. :/\n\nI'll fix this in the dev branch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006", "body": "It is indeed, I forgot to save on Vim. :p\n\nFixing in dev-branch, I may release 10.1 to fix these minor issues.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176", "body": "This issue is now fixed in the dev branch. I don't know what do you mean by GIT_INTERN though...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631", "body": "Damn right. Fixed in the development branch!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509", "body": "Hey, fixed in dev branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774", "body": "No, certainly not in C. It's not a real API, but an ugly compiler workaround that lets you push an unspecified amount of objects to the stack. You still need to know how many objects are there, though.\n\nSee http://en.wikipedia.org/wiki/Stdarg.h\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286", "body": "Just return `GIT_ENOMEM` here, malloc already sets the error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383", "body": "Yeah absolutely, I wrote this when we had the \"kill on out of memory\" malloc wrappers, so it doesn't check for ENOMEM or return error codes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345", "body": "Question: are you sure we have to return `buffer_end` and not the actual end pointer for this single entry?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004", "body": "That comparison. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005", "body": "Don't rethrow this. Do a new `GIT_EEXISTS` with a good error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507", "body": "Hey, I'm afraid this won't cut it in MSVC. We need to be C89-compilant there. Can you move all the declarations to the top? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477", "body": "Is this comment up to date? AFAIK we're implementing fnmatch from scratch now?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030", "body": "This is terrible. We cannot duplicate and free a whole buffer just to prevent a cast. If you are concerned about this cast, you'll have to update the entire hashing code so that the hashed data is constant -- that would be a nice thing to have. Without that, this is a no-go.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031", "body": "Internal methods should not have the `git` prefix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032", "body": "Doesn't this leak memory?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033", "body": "Same as the `index` issue. There's no way we can double the overhead of deflating writes by copying _every single byte_ back and forth on memory. Impossible -- and since the ZLib code cannot be rewritten to support const writes either, your best bet is to change the signature of the function so `source` is not constant, and work from there.\n\nThis is one of the hottest paths in the library atm (all object writes go through this loop), so act accordingly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "schacon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875", "body": "They are not in progress yet, I just had that there as a placeholder and forgot to remove it.  I would love your help in getting them started.  I can also create a repo under the libgit2 org and give your project a place there if you want.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749", "body": "that isn't in the index information, it is only determined by comparing the index data to the data in the HEAD commit and the files in the working directory.  getting some status type calls is in the todo list, but it might take a bit of time.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490", "body": "Thanks. I've started some Python bindings, which I'll push in a few days or so.\n\nI've been looking forward to this since your GitTogether Skype video talk :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184", "body": "For some definition of \"possible\", sure :)\n\nATM due to Google policy around open-source releasing I'm blocking on review from someone inside Google (who also happens to be Shawn Pearce).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234", "body": "That was quick! Much better, thanks.\n\nThere are still a few outstanding issues:\n-GIT_COMMIT_GETTER ignores the return code from git_commit__parse_full.\n-I haven't fully grokked the revwalk code, but I think git_revwalk_next should be able to distinguish between the various reasons a walk is finished (e.g. a parent was missing/corrupted vs. the actual end of a walk).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310", "body": "I've got approval to push my libgit2 bindings. I think the best solution is for it to live in the libgit2 namespace, which I can push to my fork of. My project name is pygit2 and, at Shawn's recommendation, it's licensed under the same GPL-with-exception license as libgit2. If you have a more creative name I wouldn't mind changing it, but I don't feel strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ctimmerm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199", "body": "I overlooked I had created an extra compiler warning in commit.c, fixed in the second commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436", "body": "I am not sure about windows library conventions, but I had to do this:\n\ncopy zlib125dll.zip/dllx64/zlibwapi.lib to C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib\\amd64\n\ncopy zlib125.zip/zlib-1.2.5/zlib.h and zlib125.zip/zlib-1.2.5/zconf.h\nto C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\n\n`waf build-shared` didn't work, it gives this error:\n     Waf: Entering directory `C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     [ 1/23] cshlib: build\\shared\\src\\blob.c.0.o build\\shared\\src\\commit.c.0.o build\\shared\\src\\delta-apply.c.0.o build\\shared\\src\\errors.c.0.o build\\shared\\src\\file\n     lock.c.0.o build\\shared\\src\\fileops.c.0.o build\\shared\\src\\hash.c.0.o build\\shared\\src\\hashtable.c.0.o build\\shared\\src\\index.c.0.o build\\shared\\src\\odb.c.0.o build\\shared\\src\\oid.c.0.o build\\shared\\src\\person.c.0.o build\\shared\\src\\repository.c.0.o build\\shared\\src\\revwalk.c.0.o build\\shared\\src\\tag.c.0.o  build\\shared\n     \\src\\thread-utils.c.0.o build\\shared\\src\\tree.c.0.o build\\shared\\src\\util.c.0.o build\\shared\\src\\win32\\dir.c.0.o build\\shared\\src\\win32\\fileops.c.0.o build\\shared\\src\\win32\\map.c.0.o build\\shared\\src\\block-sha1\\sha1.c.0.o -> build\\shared\\git2.dll build\\shared\\git2.lib build\\shared\\git2.dll.manifest\n     Waf: Leaving directory`C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     Build failed\n      -> missing file: 'C:\\Users\\hef\\projects\\libgit2\\build\\shared\\git2.lib'\nThe error appears to be accurate, I get a git2.dll but not a git2.lib\n\n`waf build-static` appears to work fine though.\nI haven't tested the resulting library yet.\n\nAlso, it appears that waf built a 64bit lib by default, is there a way to tell it to make a 32bit lib?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461", "body": "the build system doesn't use make,\ndoes running `waf build-shared` work for you?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301", "body": "mingw32 notes:\nw32-pthreads does not seem to get linked to properly if it is built statically, but seemed fine dynamically.  That is, libgit2 linked against w32-pthreads(static), but my application did not.\nzlib and libgit2 seem to build and link fine.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829", "body": "you need to add zlib.h (and zconf.h) from zlib-1.2.5 to your include path.\nI dumped them in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\INCLUDE.\n\nyou are also going to need zlibwapi.lib.  I put that in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\lib\nI believe you will need to keep the zlib.dll either in your %PATH% or in the same directory as your built executable for this to work.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841", "body": "Ah, I see. I misunderstood about what was stored in the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510", "body": "begin able to specify a qt subproject in a git submodule would be awesome.\n\naccording to http://doc.qt.nokia.com/4.7/qmake-variable-reference.html, you might be able to build a static lib with:\n\n```\n CONFIG += create_pri\n QMAKE_LFLAGS = staticlib\n```\n\nI did not test this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joefeser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849", "body": "I copied the dll per the read me file but never copied the .h files as you stated. I placed the zlib.h and zconf.h files in the include folder and a dll was created. Next to figure out if it is x86 or x64.\n\nYou may want to add the instructions for the two .h files to the readme.\n\nThanks for your help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rkh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977", "body": "I love the idea. Would be awesome to use for undo history in Redcar, for instance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "przemoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096", "body": "Other example, that maybe I shouldn't reveal yet. ;)\n\nFor a few years at least I have in my mind the idea of very useful application (as usual, implementation is not even started yet), that I even named already: SINAVE - sed inspired, nipped by awk visual editor. Name says pretty much (awk & sed users should predict how such tool would be useful), but from the beginning I thought that having git in the back is a must-have thing, because it would allow implementing the best undo/redo feature any editor ever had, because of possibility of having divergent branches all the time accessible from editor during work, for instance. You must already feel how awesome such tool could be.\n\nSorry for a bit off-topic.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nulltoken": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043", "body": "Nice! :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140", "body": "Nice one! \nI knew the duplicate packed and loose ref would help by biting us in the... back. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030", "body": "+1 :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558", "body": "common.h:\n\n<pre><code>#if defined(_MSC_VER)\n# define GIT_INLINE(type) static __inline type\n#else\n# define GIT_INLINE(type) static inline type\n#endif</code></pre>\n\n\nMy guess would be that GIT_INLINE exists because inlining requires a different specifier depending on the platorm/compiler.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323", "body": "Current signature of the method is <code>void git_cache_init(git_cache *cache, size_t size, git_cached_obj_freeptr free_ptr)</code>.\n\nFine with you if I change it to return an <code>int</code>?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425", "body": "It's now fixed\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525", "body": "Damn! You're right. Will force-push a fix. Thanks for having spotted this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tclem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209", "body": "Love it!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296", "body": "I think you meant to do this: `str[i] = tolower(str[i]);`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tbranyen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786", "body": "Awesome glad to see this, bumping up my bindings to this version immediately!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jystic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940", "body": "+1 from me, as a sometimes Windows user this is really helpful\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523", "body": "Should this be including oid.h instead? I can't see what revwalk.h needs from object.h, but it definitely needs the git_oid struct from oid.h\n\nThis commit breaks the auto-binding generator that I'm using because the generator doesn't traverse header files recursively to find types. Changing this to oid.h makes everything happy again. I don't mind changing the binding generator to be more robust, but this seems to be better changed in the main codebase.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484", "body": "CONDITION_VARIABLE doesn't seem to be available on MinGW, so all the stuff to do with pthread_cond_t doesn't compile. I found this explanation: http://forums.techarena.in/software-development/1130499.htm\n\nFortunately libgit2 doesn't use condition variables yet, so removing all traces of them means libgit2 compiles fine.\n\nYou didn't really want to use condition variables did you? ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "txdv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964", "body": "Any reason why it changed from (git_commit *commit) to (const git_oid *oid)?\nApart from being const...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998", "body": "I just thought you could retrieve the oid from git_commit, but I guess there are some valid scenarios were one has only an ID instead of an instance of git_commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143", "body": "why is GIT_INTERN present at all?\nYou can't use it in any other binding.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285", "body": "GIT_INLINE. its not that hard to figure it out, because there are not many defs with caps on\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763", "body": "Why the parent count when there is already the variable argument parent list?\nDoesn't the API for variable argument lists support the counting of them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246", "body": "I don't understand one thing though.\n\nWhy do the create functions return only an object id, instead of a direct pointer to the struct?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274", "body": "And what about git_repository_close? What happened to that? Got it replaced by _gc? gc does only some garbage collection if I'm not mistaken.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jasonpenny": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000", "body": "There seems to be no way to free the git_strarray from my bindings, since `git_strarray_free` is GIT_INLINE and not GIT_EXTERN\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004", "body": "The API specifies\n    GIT_EXTERN(void) git_repository_close(git_repository *repo);\nis it supposed to be `git_repository_gc` ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617", "body": "Warnings treated as errors, so doesn't build with MSVC:\n\ncache.c: \"potentially uninitialized local variable 'node' used\" in git_cache_get,\nand commit.c has 3 places where free() is called on const pointers\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "scorpion007": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618", "body": "Won't this get compiled out in release builds and break the program's behavior?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637", "body": "Assert is still ok, just perhaps needs to be done on a separate line. I.e. save the return value of snprintf and assert it on the next line. No sweat :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sakari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633", "body": "oh boy.. nice catch\n\nI would think so. That needs to be fixed. Maybe abort here some other way. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "avidal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943", "body": "s/importart/important/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944", "body": "s/copmparison/comparison/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jpfender": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996", "body": "Oops, this appears to be a duplication.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "schu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524", "body": "This must be repo2, no? Otherwise the test is segfaulting for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kiryl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034", "body": "Ok. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035", "body": "No, it doen't. Comment is not relevant (any more?).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036", "body": "This is a real bug! zlib can modify data pointed by ->next_in so you **cannot** just cast out the qualifier if you don't want to get SIGSEGV.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"medranocalvo": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482", "title": "Incorrect git_push_options's pb_parallelism documentation", "body": "The `pb_parallelism` field of the `git_push_options` structure is documented to default to 1 (meaning no parallelism), but it is actually initialized to 0 by default (meaning auto-detected parallelism).\r\n\r\n>  If the transport being used to push to the remote requires the creation of a pack file, this controls the number of worker threads used by the packbuilder when creating that pack file to be sent to the remote. If set to 0, the packbuilder will auto-detect the number of threads to create. **The default value is 1**.\r\n\r\n~~~\r\n#define GIT_PUSH_OPTIONS_INIT { GIT_PUSH_OPTIONS_VERSION, 0, GIT_REMOTE_CALLBACKS_INIT, GIT_PROXY_OPTIONS_INIT }\r\n~~~\r\n\r\nPlease, correct the documentation or the initial value.  In my case, the automatic parallelism was unexpected.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480", "title": "Unnecessary syscalls on bare repository", "body": "### Reproduction steps\r\nDiff any two commits on bare repository and observe behaviour with strace.\r\n\r\n### Expected behavior\r\nDon't query stat for files on a bare repository.\r\n\r\n### Actual behavior\r\nStat checked for every file in diff, if it's a bare repository.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nMaster 782402c271d5467f9890af8e808af938a93bc55f\r\n\r\n### Operating system(s) tested\r\nArch Linux\r\n\r\nI just tried diffing with the current `master` libgit2 build. While the other bug with unnecessary syscalls for `.gitattributes` and `attributes` was fixed, there are still some `stat` calls for files, which shouldn't be necessary on a bare repository.\r\n\r\nI'm using pygit2 for my interaction with git repositories, but as far as I can see, this is actually a issue with libgit2.\r\n\r\nCurrent  output:\r\n```\r\n[pid 15375] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"/tmp/gitalizer/phoemur/slackbuilds-1/info/attributes\", 0x7ffe5758e5f0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n```\r\n\r\npygit2 issue:\r\nhttps://github.com/libgit2/pygit2/issues/764", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tyrielv": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479", "title": "Recursive merge uses parents of virtual commits instead of virtual commit itself when finding merge base", "body": "Recursive merge passes the parents of a virtual commit to git_merge_bases_many in place of the virtual commit. This produces a different result in some cases than git.exe.\r\n\r\n### Reproduction steps\r\nSee attached repo [bases.zip](https://github.com/libgit2/libgit2/files/1640783/bases.zip)\r\nCall git_merge_commits(), passing the commits for branchJ-1 and branchJ-2.\r\n\r\n### Expected behavior\r\nOne conflict, in version.txt\r\n\r\n### Actual behavior\r\nTwo conflicts, one in version.txt and one in targetfile.txt\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.26.0\r\n\r\n### Operating system(s) tested\r\nWindows 10\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Phrohdoh": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473", "title": "Request: Please consider publishing to conan.io", "body": "Hello, libgit2 team / community / maintainers!\r\n\r\n_Note: I am not affiliated with conan.io or JFrog in any way._\r\n\r\nI am not a C developer by any means (I'm quite positive I would lose all of my limbs in a matter of minutes with C) which goes to show that I am also quite clueless regarding dependency management but from what I understand C (and C++) mostly consist of copying headers and implementation files of dependencies in-tree.\r\n\r\nGiven the above it is quite difficult, in my limited experience, to stay up to date (or even track which version of a library you are using).\r\n\r\nIt is my belief that more projects and developers (myself included of course) could benefit from the work put into libgit2 if it were easier to depend on in a trackable way.\r\n\r\nThis is where my request for you all (and if you decide to and I can help please let me know how!) to consider publishing libgit2 releases to [conan.io](https://conan.io/index.html) which markets itself as \"Conan, the C / C++ Package Manager for Developers.\"\r\n\r\n[`conan`](http://docs.conan.io/en/latest/getting_started.html) use is driven by the [`conanfile.txt`](http://docs.conan.io/en/latest/reference/conanfile_txt.html) which allows downstream projects to declare dependencies which the conan tool will resolve and build as specified in the manifest.\r\n\r\nIf the overhead of management and setup of publishing to conan.io outweighs the benefits then please note so and close this.\r\n\r\nThank you for your time!\r\n\r\n**Edit**: Corrected a link.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rankr": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469", "title": "Test failures", "body": "### Reproduction steps\r\nRun tests in bulid directory, with command \"ctest -V\"\r\n### Expected behavior\r\nno test fail\r\n### Actual behavior\r\nThe following tests FAILED:\r\n\t  1 - libgit2_clar (Failed)\r\nsome details:\r\n1:   2) Failure:\r\n1: diff::binary::delta [/Users/file4/libgit2-0.26.0/tests/diff/binary.c:53]\r\n1:   String mismatch: expected != actual.ptr\r\n### Version of libgit2 (release number or SHA1)\r\nlibgit2-0.26.0\r\n### Operating system(s) tested\r\nmacOS 10.13.2 (17C88)\r\n###some more info:\r\ncmake version 3.10.1\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlosmn": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465", "title": "Release v0.27.0 & v0.26.1", "body": "We're at that time again where we want to make a new release.\r\n\r\nFor the v0.27 series, codenamed \"Stadtrandsiedlung\"\r\n\r\n- [ ] Bump the versions in the headers\r\n- [ ] Make a release candidate\r\n- [ ] Plug any final leaks\r\n- [ ] Fix any last-minute issues\r\n- [ ] Make sure CHANGELOG reflects everything worth discussing\r\n- [ ] Update the version in CHANGELOG and the header\r\n- [ ] Produce a release candidate\r\n- [ ] Tag\r\n- [ ] Create maint/v0.27\r\n- [ ] Update any bindings the core team works with\r\n\r\nFor v0.26.1\r\n\r\n- [ ] Select the changes we want to backport\r\n- [ ] Update maint/v0.26\r\n- [ ] Tag", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/ecd55cec771d9c6f7ffffe80422a1decd4645c17", "message": "Merge pull request #4477 from pks-t/pks/memleaks\n\nMemory leaks"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f1323d9c161aeeada190fd9615a8b5a9fb8a7f3e", "message": "Merge pull request #4472 from libgit2/ethomson/libgit2deps_azure\n\ntravis: fetch trusty dependencies from Bintray"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6e748130e4f910b6f8c03a3f6f2e11c856d19ba7", "message": "travis: we use bintray's own key for signing\n\nThe VM on Travis apparently will still proceed, but it's good practice."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6d452600fa5c351670c9200e7c48f1da1191c5b8", "message": "cmake: use a FEATURE_SUMMARY call compatible with 3.0.2\n\nWhen we print features, we make an effort to support all the way back to\npre-3.0. However, in the code for versions from 3 onward we call\n`FEATURE_SUMMARY` with multiple kinds of elements to print in the same line.\nThis is only supported in CMake 3.1 and later, making the rather popular CMake\n3.0.2 unable to build the library.\n\nUse a single kind of element per invocation. This means we need to provide a\n\"description\" text, which CMake provides for us if provide multiple kinds of\nelements."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a7e36d3d9c473647f141b24d398a98171744ceee", "message": "Merge pull request #4468 from libgit2/cmn/openssl-pc\n\nMake sure to include 'openssl' as a dep when building statically with SHA1DC"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b21c5408ff18eaf99029f59e738f6f614a53c90d", "message": "cmake: add openssl to the private deps list when it's the TLS implementation\n\nWe might want OpenSSL to be the implementation for SHA-1 and/or TLS. If we only\nwant it for TLS (e.g. we're building with the collision-detecting SHA-1\nimplementation) then we did not indicate this to the systems including us a\nstatic library.\n\nAdd OpenSSL to the list also during the TLS decision to make sure we say we\nshould link to it if we use it for TLS."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b85548edb027474af3d107f9faa004cc09a1863a", "message": "cmake: treat LIBGIT2_PC_REQUIRES as a list\n\nIt is indeed a list of dependencies for those which include the static archive.\nThis is in preparation for adding two possible places where we might add openssl\nas a dependency."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ddd36510b589f8dd39a9bfaaecfb9160dc943f42", "message": "Merge pull request #4467 from libgit2/cmn/static-archive-later\n\ncmake: move the rule to find static archives close to building clar"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/85e40bbf0938cac5668e810864f6be9619b9e60e", "message": "cmake: move the rule to find static archives close to building clar\n\nIf we're building static libraries, we want to use that for building our clar\nbinary. This is done in 49551254 (2017-09-22; cmake: use static dependencies\nwhen building static libgit2) but that commit included the rule too early,\nmaking it affect the search for iconv, meaning we did not find it when we were\nbuilding a static libgit2.\n\nMove the rule to just before building clar, after we've included the rules for\nbuilding the library itself. This lets us find and link to the dynamic libiconv."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4478", "title": "refs: include \" sorted \" in our packed-refs header", "body": "This lets git know that we do in fact have written our packed-refs file\r\nsorted (which is apparently not necessarily the case) and it can then use the\r\nnew-ish mmaped access which lets it avoid significant amounts of effort parsing\r\npotentially large files to get to a single piece of data.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4418", "title": "Re-enable the RC4 test", "body": "We disabled this test while dealing with a security issue. Enable it again and make the error handling in the OpenSSL stream let us return the actual error due to trying to talk to RC4.\r\n\r\n`GIT_ECERTIFICATE` is likely not _really_ the right thing to return here since it's not really about the certificate but about not supporting our cipherlist. We will likely want a specific error code for this (or we can overload this one, but TLS is confusing enough as it is).", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4396", "title": "config: specify how we match the regular expressions", "body": "We do it the same as git does: case-sensitively on the normalized form of the\r\nvariable name.\r\n\r\nWhile here also specify that we're case-sensitive on the values when handling\r\nthe values when setting or deleting multivars.\r\n\r\n---\r\n\r\n#4390 highlights this deficiency in the documentation.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119", "body": "This is actually a debug statement that sneaked in. I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464", "body": "This causes us to behave differently to `git.git` by allowing comments inside multi-line values. I'm not sure whether that's a good thing or not\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349", "body": "On Tue, Apr 26, 2011 at 03:33:49PM -0700, tclem wrote:\n\n> > -   str[input_sp - input] = '.';\n> >   +\n> > -   for (i = 0; i < 2; ++i) {\n> > -       quote = strrchr(str, '\"');\n> > -       memmove(quote, quote + 1, strlen(quote));\n> > -   }\n> >   +\n> > -   return GIT_SUCCESS;\n> >   +}\n> >   +\n> >   +void git__strntolower(char *str, int len)\n> >   +{\n> > -   int i;\n> >   +\n> > -   for (i = 0; i < len; ++i) {\n> > -       str[len] = tolower(str[len]);\n> \n> I think you meant to do this: `str[i] = tolower(str[i]);`\n\nYes I do. Thanks for catching this.\n\n## \n\nCarlos Mart\u00edn Nieto | http://cmartin.tk\n\n\"\u00bfC\u00f3mo voy a decir bobadas si soy mudo?\" -- CACHAI\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362", "body": "The way I understood it, buffer_end in this function points to the end of the specified entry, because the entry length is parsed in the caller\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492", "body": "No, it's not. I removed that at least once but I must have gotten confused with all the rebasing I was doing\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "stanhu": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460", "title": "High number of `stat` calls for `gitattributes` files", "body": "I've noticed that libgit2 makes a high number of `stat` calls to `gitattributes` files, which significantly impacts networked file systems.\r\n\r\n### Reproduction steps\r\n\r\nWith the Linux repo (https://github.com/torvalds/linux.git), I created this Rugged script:\r\n\r\n```ruby\r\nrequire 'rugged'\r\n\r\nrepo = Rugged::Repository.new('.')\r\n\r\ncommit_object = repo.rev_parse('master')\r\noriginal_oid = repo.rev_parse('979e1f08042b83152dfe3d76df10db31eb7edf98')\r\ndiff_commits = commit_object.parents[0].diff(original_oid)\r\n\r\nputs diff_commits.stat\r\n```\r\n\r\nThe result is 30,497 files changed with 753,086 additions and 1,345,193 deletions. Now if I run `strace` on this, I see there are 457,782 hits with `gitattributes`:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/diff-linux.txt -s 1024 ruby diff.rb                                                                                                     \r\n30497\r\n753086\r\n1345193\r\n$ grep gitattributes /tmp/diff-linux.txt | wc -l\r\n457782\r\n```\r\n\r\nLooking at it in more detail, I see that we are often duplicating the same lookup:\r\n\r\n```sh\r\n07:38:38.120824 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.120852 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.120881 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.120949 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121019 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.121270 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121301 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121329 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121356 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.121390 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.121742 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.121805 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122075 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122105 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122133 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122161 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122189 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122249 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122305 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000013>\r\n07:38:38.122602 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.122631 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122659 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122686 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000009>\r\n07:38:38.122715 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122816 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122874 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123136 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123164 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123192 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123219 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123247 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123309 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123365 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123628 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123656 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123688 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123729 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.123767 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:38:38.123919 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123983 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.124245 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.124273 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n```\r\n\r\n### Expected behavior\r\n\r\nIf I compare this with the `git` call, I \"only\" see 7,951 hits:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/git-compare.txt -s 1024 git diff 979e1f08042b83152dfe3d76df10db31eb7edf98..master > /dev/null\r\n$ grep gitattributes /tmp/git-compare.txt | wc -l\r\n7951\r\n```\r\n\r\nThe actual hits look a lot more sensible:\r\n\r\n```\r\n07:42:52.269330 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.269446 open(\".gitattributes\", O_RDONLY) = 4 <0.000014>\r\n07:42:52.270123 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.270203 open(\".gitattributes\", O_RDONLY) = 4 <0.000028>\r\n07:42:52.274058 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.274105 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.274143 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274604 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274646 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.274682 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.275014 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000017>\r\n07:42:52.275347 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.276283 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.276479 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289449 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.289506 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.289545 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289900 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000023>\r\n07:42:52.289962 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290002 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290237 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.290604 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.310600 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.313085 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.320641 open(\"Documentation/acpi/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n```\r\n\r\n### Actual behavior\r\n\r\nExcessive number of `stat` calls for `gitattributes`\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nRugged 0.26.0 \r\n\r\n### Operating system(s) tested\r\n\r\nUbuntu Linux 16.04\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TomGle123": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458", "title": "Missing support for 'subtree' merge strategy", "body": "Using LibGit2Sharp I noticed there was no support for merge strategies other than 'Standard' and 'Octopus'.  I was looking to use the 'Subtree' strategy ([docs](https://git-scm.com/docs/merge-strategies#merge-strategies-subtree)).  I'd like to add support for this merge strategy in LibGit2Sharp but it is also missing from LibGit2, and I only program C#.\r\n\r\nMaybe there are technical reasons why this feature is not implemented, but if not, it would be a useful addition for me, allowing me to write tooling in C# based around the 'subtree' merge strategy.\r\n\r\nReported against master commit 'd621024'.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fuhao92": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454", "title": "hello, I use git_index_add_bypath(), to add about 500M zip file, but it return out of memoryOperator failed?", "body": "You are opening a _bug report_ against the libgit2 project.  If you have a\r\nquestion about an API or usage, please ask on StackOverflow:\r\nhttp://stackoverflow.com/questions/tagged/libgit2.  Please fill out the\r\nreproduction steps (below) and delete this introductory paragraph.  Thanks!\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aw32": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452", "title": "SSH: Pass hostkey to certificate check callback", "body": "Feature request:\r\nThere is the certificate check callback for remote connections.\r\nFor the SSH certificate check `git_cert_hostkey` can only contain the MD5 and/or SHA1 hash of the hostkey as passed from libssh2. Since MD5 and SHA1 are not considered trustable anymore, it would be nice to receive the actual hostkey as returned by libssh2.\r\nWould you consider this reasonable enough to accept a pull request?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441", "title": "git_diff_hunk documentation has one-off field descriptions", "body": "The documentation for `git_diff_hunk` has descriptions that are for the wrong fields. (Documentation found https://libgit2.github.com/libgit2/#HEAD/type/git_diff_hunk)\r\n\r\n# Actual:\r\n```\r\nint | old_start\r\n\r\nint | old_lines: Starting line number in old_file\r\n\r\nint | new_start: Number of lines in old_file\r\n\r\nint | new_lines: Starting line number in new_file\r\n\r\nsize_t | header_len: Number of lines in new_file\r\n\r\nchar [128] | header: Number of bytes in header text\r\n```\r\n\r\n# Expected:\r\n```\r\nint | old_start: Starting line number in old_file\r\n\r\nint | old_lines: Number of lines in old_file\r\n\r\nint | new_start: Starting line number in new_file\r\n\r\nint | new_lines: Number of lines in new_file\r\n\r\nsize_t | header_len: Number of bytes in header text\r\n\r\nchar [128] | header: Header text, NUL-byte terminated\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rgburke": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428", "title": "git_revwalk_next is slow on first iteration since v0.25", "body": "git_revwalk_next is slow on its first iteration for versions 0.25, 0.26 and master when compared to v0.24. This is especially noticeable on large repositories.\r\n\r\n### Reproduction steps\r\nRun the following program on the Linux kernel source tree (https://github.com/torvalds/linux):\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <git2.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n        git_libgit2_init();\r\n\r\n        git_repository *repo;\r\n        if (git_repository_open(&repo, \".git\")) {\r\n                fprintf(stderr, \"Failed to open repository\\n\");\r\n                return 1;\r\n        }\r\n\r\n        git_oid oid;\r\n        git_oid_fromstr(&oid, \"a0651c7fa2c088a605f63792279859608ed7f2c8\");\r\n\r\n        git_revwalk *revwalk;\r\n        git_revwalk_new(&revwalk, repo);\r\n        git_revwalk_sorting(revwalk, GIT_SORT_TIME);\r\n        git_revwalk_push(revwalk, &oid);\r\n\r\n        if (!git_revwalk_next(&oid, revwalk)) {\r\n                git_commit *commit;\r\n\r\n                if (git_commit_lookup(&commit, repo, &oid)) {\r\n                        fprintf(stderr, \"Failed to lookup commit\\n\");\r\n                        return 1;\r\n                }\r\n\r\n                printf(\"%s\\n\", git_commit_message(commit));\r\n                git_commit_free(commit);\r\n        }\r\n\r\n        git_revwalk_free(revwalk);\r\n        git_repository_free(repo);\r\n\r\n        return 0;\r\n}\r\n```\r\n\r\n### Expected behavior\r\nWhen using v0.24 this program runs in a couple of milliseconds:\r\n```\r\nrichard@DevNew:~/code/linux$ time ./revwalktest >/dev/null\r\n\r\nreal\t0m0.006s\r\nuser\t0m0.000s\r\nsys\t0m0.006s\r\n```\r\n\r\n### Actual behavior\r\nWhen using v0.25, v0.26 or master this program has not completed after 1 minute:\r\n```\r\nrichard@DevNew:~/code/linux$ timeout 60s ./revwalktest\r\nrichard@DevNew:~/code/linux$ echo $?\r\n124\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.25, v0.26 & master\r\n\r\n### Operating system(s) tested\r\n```\r\nLinux DevNew 4.13.0-17-generic #20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ColMelvin": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425", "title": "git_index_add_frombuffer creates 0160000 mode objects as blobs", "body": "The `git_index_add_frombuffer` function accepts the commit mode, `0160000`, when creating a new entry from a buffer.  However, it creates the commit mode entry as a blob.  Since a blob object and a commit object with the exact same data will have a different SHA-1 checksum, this behavior may lead to unexpected results.\r\n\r\nNotably, `git_index_add_frombuffer` will return an error when the tree mode, `040000`, is provided for the mode.  I think the same should happen for `0160000`.\r\n\r\n### Reproduction steps\r\nThe reproduction code below uses a modified version of Perl's Git::Raw v0.74, available at https://github.com/jacquesg/p5-Git-Raw/pull/191.  This modification will hopefully be included in v0.75.\r\n\r\n```perl\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\nuse warnings;\r\n\r\nuse File::Temp;\r\nuse Git::Raw;\r\nuse Test::More tests => 3;\r\n\r\nmy $dir   = File::Temp->newdir();\r\nmy $repo  = Git::Raw::Repository->init( $dir->dirname, 1 );\r\nmy $index = $repo->index;\r\n\r\nmy $COMMIT_DATA = \"tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\\x0aauthor A U Thor <author\\@example.com> 1234567890 +0000\\x0acommitter C O Mitter <committer\\@example.com> 1234567890 +0000\\x0a\\x0aEmpty\\x0a\";\r\nmy $COMMIT_SHA  = '746262f5c8ed0115432581c2bcf8f08c77ae76c8';\r\n\r\n$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );\r\nmy $tree = $index->write_tree;\r\n\r\nmy ($entry) = $tree->entries;\r\nis $entry->file_mode,  0160000;               # Passes\r\nisa_ok $entry->object, 'Git::Raw::Commit';    # Fails\r\nis $entry->object->id, $COMMIT_SHA;           # Fails\r\n\r\nexit;\r\n\r\n# Sanity check proving actual commit value\r\nmy $hash = qx{cd '$dir'; echo -n '$COMMIT_DATA' | git hash-object -t commit --stdin};\r\nchomp $hash;\r\nis $hash, $COMMIT_SHA;                        # Passes\r\n```\r\n\r\n### Expected behavior\r\n\r\nEither:\r\n- all tests pass, or\r\n- script dies at `$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );` with 'invalid filemode'\r\n\r\n### Actual behavior\r\n\r\nScript runs to completion; 2nd & 3rd tests fail.\r\n\r\n```\r\n1..3\r\nok 1\r\nnot ok 2 - An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit'\r\n#   Failed test 'An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit''\r\n#   at proof line 22.\r\n#     The object of class 'Git::Raw::Blob' isn't a 'Git::Raw::Commit'\r\nnot ok 3\r\n#   Failed test at proof line 23.\r\n#          got: 'f8aabe3d076ed2278a652ba6d76ea152148daa3c'\r\n#     expected: '746262f5c8ed0115432581c2bcf8f08c77ae76c8'\r\n# Looks like you failed 2 tests of 3.\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nTested Git::Raw v0.74 (ee89941fa2 of libgit2, per Changes file).\r\n\r\nInspection of the code suggests the issue remains (as of 364184acca0d993deaeb060197b595f7c49ea226)\r\n\r\n### Operating system(s) tested\r\nLinux 3.10.0-514.26.2.el7.x86_64\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianmario": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/4893a9c01c8da084eb995178f80d0d453109056e", "message": "Merge pull request #4451 from libgit2/charliesome/trailer-info\n\nImplement message trailer parsing API"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d4a3a4b5383fefcb397524340af05118b4687f29", "message": "rename find_trailer to extract_trailer_block"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3e5239e42a529e99dc584ce37402856a4da26cec", "message": "update code docs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1e758fd3154eef0bf1237fb20b2180ad08cfe28d", "message": "just use git_message_trailer in tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6062032e452afea451901333089da834edbe2078", "message": "try and fix windows build"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d43974fb5cbfda6ec28fc92b83d03db0af73748b", "message": "Change trailer API to return a simple array"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5734768b9edaecedaa7b13fed2ce59cb588df7e8", "message": "Merge remote-tracking branch 'origin/master' into charliesome/trailer-info"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f4f0e7eb0f8280ed6100c37c3af0aa66c31a8f9e", "message": "switch back to braced array initializers"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f315cd1470e21dee0dc48cc6b53ffbd30122c917", "message": "make separators const a macro as well"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fb29ba0953ef52ce94aecd93b9b4a3bcc64cf07c", "message": "remove empty lines between @-lines"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1cda43ba34b40b82ff6470799d36e54a176aaad5", "message": "make comment_line_char const a macro"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6bc7301e8ab6194179423b95a481942e2fa11329", "message": "Don't use newer C syntax for declaration in tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759", "body": "should this be checking r (if the strdup succeeded) instead of s?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266", "body": "Sweet thanks dude!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pks-t": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/782402c271d5467f9890af8e808af938a93bc55f", "message": "tests: refs::iterator: fix memory leak due to ref names not being free'd\n\nThe test refs::iterator::foreach_name iterates through every reference\nand copies its name into a local vector. While the test makes sure to\nfree the vector afterwards, the copied reference names are not being\nfree'd. Fix that."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5963292f9ebc8b06ad307e2ed10eec845424e74e", "message": "refs: document need to free refs in foreach-callback\n\nReferences passed to the callback function of `git_reference_foreach`\nare expected to be owned by the callback. As such, they are never being\nfreed by `git_reference_foreach`, but will have to be freed by the\ncaller. This small detail is never mentioned in the function's\ndocumentation, though, making it easy to get wrong. Document this to\nmake it discoverable."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/90f81f9fdc6d87c4ca75e4f065e1eb4818c99674", "message": "transports: local: fix memory leak in reference walk\n\nUpon downloading the pack file, the local transport will iterate through\nevery reference using `git_reference_foreach`. The function is a bit\ntricky though in that it requires the passed callback to free the\nreferences, which does not currently happen.\n\nFix the memory leak by freeing all passed references in the callback."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/093e671ee8fb824e3e40677ed7440dba72483fe1", "message": "tests: network::fetchlocal: let cleanup function handle sandbox cleanup\n\nTwo tests in network::fetchlocal explicitly set a cleanup function to\nfree and remove the created sandbox repositories. This is not necessary,\nthough, as the cleanup function executed after each test already takes\ncare of cleaning up after them. Remove the code to avoid needless code\nduplication."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0b967396033b059d683bdecec85c2838c428a74e", "message": "Merge pull request #4471 from libgit2/cmn/cmake-feature-302\n\ncmake: use a FEATURE_SUMMARY call compatible with 3.0.2"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70aa61460a4f33509aa06ed86ac3becc243ee5d6", "message": "cmake: allow explicitly choosing SHA1 backend\n\nRight now, if SHA1DC is disabled, the SHA1 backend is mostly chosen\nbased on which system libgit2 is being compiled on and which libraries\nhave been found. To give developers and distributions more choice,\nenable them to request specific backends by passing in a\n`-DSHA1_BACKEND=<BACKEND>` option instead. This completely replaces the\nprevious auto-selection."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e7495ce6f4dee156b6a1d48a4d478c83d1053236", "message": "cmake: default to using SHA1DC\n\nUpstream git.git has changed their default SHA1 implementation to the\ncollision-detection algorithm SHA1DC in commit e6b07da27 (Makefile: make\nDC_SHA1 the default, 2017-03-17). To match upstream, align ourselves and\nswitch over to SHA1DC by default."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4481", "title": "tests: online::clone: fix memory leak due to not freeing URL", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4476", "title": "scripts: add backporting script", "body": "This adds a simple script for backporting pull requests to older\r\nbranches. It accepts as parameters a list of pull request numbers which\r\nwhose commits are to be cherry-picked. The identification of PRs\r\ncurrently happens by using the commit message of the merge of the PR,\r\nwhich should conform to the message \"Merge pull request #<PR>\".\r\n\r\nWhile the heuristic works in practice, we could instead also use the\r\ndirect references from GitHub via \"pull/#<PR>/head\". This requires the\r\nuser to have all these references fetched, though, so we can just use\r\nthe current heuristic until we experience any issues with that.\r\n\r\n---\r\n\r\nDunno if we want this. I've used this script to create #4475, and I think a bit of automation is nice to have.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4475", "title": "v0.26.1 backports", "body": "Proposed backports for v0.26.1. This includes all PRs that I've currently marked with the \"backport\" label:\r\n\r\n- #4045\r\n- #4455\r\n- #4447\r\n- #4444\r\n- #4437\r\n- #4435\r\n- #4432\r\n- #4431\r\n- #4427\r\n- #4426\r\n- #4424\r\n- #4423\r\n- #4408\r\n- #4386\r\n- #4369\r\n- #4368\r\n- #4367\r\n- #4364\r\n- #4359\r\n- #4357\r\n- #4344\r\n- #4326\r\n- #4306\r\n- #4296\r\n- #4280\r\n- #4273\r\n\r\nI've initially included #4277 as well, but that code was only merged after v0.26.0 in #4202.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4474", "title": "Special-casing null OIDs", "body": "I've been triggered by the not-so-recent discussion in upstream git.git around null OIDs (see [1]) to implement some defensive mechanisms about ever reading or writing null OIDs either via the ODB layer or into trees. For the ODB part, I now reject writing and shorcut reading null OIDs while for trees I've only implemented the rejection on inserting entries into the treebuilder. So I've not changed the reading part for our trees.\r\n\r\n[1]: https://marc.info/?l=git&m=151120958313567&w=2", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4438", "title": "Multiple hash algorithms", "body": "A first step towards an abstraction for the use of multiple of hash algorithms. It lays the groundwork for having `git_hash_ctx` dispatch to different hash algorithms based on which one is being requested. Next steps:\r\n\r\n- extend `git_repository` by a `git_hash_algorithm` field\r\n- implement required new algorithms\r\n- extend `git_hash_init` and `git_hash_ctx_init` to accept an algorithm which is then used for hashing by that particular context only\r\n- extend OIDs to be a union of all possible hashes\r\n- scavenge through the tree and adjust all callers. In most cases we'd want to retain SHA1 (e.g. pack trailers, patch IDs, filebuffers), for others we'd simply use whatever the repository format states", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4436", "title": "pack: rename `git_packfile_stream_free`", "body": "The function `git_packfile_stream_free` frees all state of the packfile\r\nstream without freeing the structure itself. Thus, the function is\r\nmisnamed, as we usually call such a function a \"clear\" function. Rename\r\nit to make clear that in fact it does not free the structure.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4417", "title": "[RFC] Khash refactorings (pt. 2)", "body": "Another round of khash fixes. While my first round of fixes only touched our own abstractions (git_oidmap, git_strmap, git_idxmap and git_offmap), this PR revamps the complete khash implementation. I've been too fed up with digging into those awful macros, so I decided to take the bait and decided to refactor that part.\r\n\r\nSo what I did is to make the khash implementation itself non-generic. Instead of having a macro to create per-type map structs, we now have a single map which has a void pointer only. This relieves us of all those macro magic, but possibliy at the cost of performance. I haven't measured that yet, but will do so if desired.\r\n\r\nSo this is mostly cosmetic only. I plan to do further refactorings in the future, as I think our map interfaces simply suck right now. They are not intuitive and do not follow our coding guidelines. This here is a first step, but seeing that it may be controverse I wanted to put up a RFC first.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4411", "title": "Config parser cleanups", "body": "Two small cleanups to make code more readable in our config parser.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4374", "title": "Pack file verification", "body": "Warning: this is ugly and, at least to me, in many places it feels like I'm doing hacks over hacks to work around our object system. The main problem here is that we currently cannot parse objects which are not owned by the ODB system, because our objects point into the reference-counted memory of the ODB. So when I try to parse an object which is not owned by the ODB, then this will crash later on after `git_odb_object_deref`, as it tries to free objects which aren't owned by itself or not even part of the heap. So yeah, this doesn't look as nice as it could in an ideal world.\r\n\r\nOn the other hand, this seems to work just fine right now. After nearly a whole day of cursing and debugging I think I've finally got it right. So what do I do? This is mostly the implementation of `git index-pack --strict`, doing two things:\r\n\r\n1. check whether all objects of a pack can be parsed correctly\r\n2. check all references to other objects for commits, tags and trees\r\n\r\nWhat this gets us is that we can verify that a pack is complete (we've got all objects such that we can resolve the complete graph) when we receive the pack.\r\n\r\nI've discussed the design a bit in Slack with @carlosmn. My first thought was to just perform an object walk after fetching the complete pack file. But seeing that in most cases we're limited by network bandwidth while fetching the pack file, we agreed that it would be much nicer to just do as much of the heavy lifting as possible during retrieval of the pack. So the algorithm works as follows:\r\n\r\n1. for every non-deltified object passed to the indexer\r\n    * strike its object ID from `expected_oids`, which keeps track of OIDs we still expect to find as part of the pack file\r\n    * parse the object\r\n    * add object IDs referenced by the object to the `expected_oids`\r\n2. when resolving delta objects, do the same with regards to the `expected_oids` map\r\n3. afterwards, check that the `expected_oids` map has no entries anymore, as all object references should now be resolved correctly\r\n\r\nI'm just putting this up early to get early feedback from the CI and reviewers. I'm not happy with some of the things I had to do here, even though they work.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ethomson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/da9898aba0fe26ea683822e99853bfb2b02ac744", "message": "travis: fetch trusty dependencies from bintray\n\nThe trusty dependencies are now hosted on Bintray."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70db57d4a431dae2edcf19e92a84db8d6cf4f935", "message": "Merge pull request #4398 from pks-t/pks/generic-sha1\n\ncmake: allow explicitly choosing SHA1 backend"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4450", "title": "Streaming read support for the loose ODB backend", "body": "Change the streaming reader API a bit, to provide the type and length of the object when initializing the stream. This would be a breaking API change - except, of course, that nobody is actually using the streaming reader API since none of the backends support it. So I feel pretty good breaking this API that nobody could be using.\r\n\r\nAdd streaming reader support to the loose object ODB backend. I cleaned up a bit while I was in there to add some more tests for things like read_header which had no explicit tests (and in fact failed on some of the loose ODB test corpus), teach read_header how to cope with \"packlike loose objects\" (which were a weird loose object format that was attempted for a bit and will never actually be seen in the wild) and drop the odb_loose internal zstream abstraction layer that ultimately became git_zstream.\r\n\r\nNote that this depends on #4443.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4416", "title": "WIP: travis: fail on memory leaks", "body": "Pass `--error-exitcode=125` to valgrind so that it will exit with a non-zero exit code when it detects a memory leak.  Use an exit code of `125` to stay safely above any clar errors and safely below any shell errors.\r\n\r\n**Note**: I suspect that there are some tests that we'll need to either exclude from valgrind's examination, or perhaps not run at all.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bisho": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4470", "title": "Fix error handling of odb_object__alloc() in odb_read_1()", "body": "If `odb_object__alloc()` returns `NULL` (fails to allocate) it currently goes to `out`. If error is != 0 we will try to free raw.data, when raw couldn't be allocated. If error is 0, then we are silently swallowing the allocation error, and possibly causing access to a wrong `out` pointer. Let's return an error instead.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fcharlie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4463", "title": "Now vcpkg support build and install libgit2", "body": "https://github.com/Microsoft/vcpkg/tree/master/ports/libgit2", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "softwareplumber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4461", "title": "Textconv support (Issue #1328)", "body": "Here's an initial stab at providing textconv support.\r\n\r\nCaveat: It's about 20 years since I last wrote any C code.\r\n\r\nThere is a feature switch (a diff option GIT_DIFF_ENABLE_TEXTCONV), and some limited unit tests (tests/textconv). Much code is copied from the existing implementation of filter. Some code common to filter and textconv as been moved from filter.c to a new file file filter_textconv.c to keep the dependency graph relatively sane. \r\n\r\nNext step is to do some testing downstream (I'll be building this into a fork of gitlab). Plan to add more unit tests based on issues identified as I work on that.\r\n\r\nFigured the feature switch would make this a relatively benign experimental feature. My life would certainly be easier if this got merged into master early as any fixes to filter would be hard to merge.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techvoltage": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4459", "title": "Update callgit_remote_connect arguments", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hackhaslam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4448", "title": "Fix failure to fetch annotated tags added to existing commits", "body": "This is an attempt to fix #3870.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tiennou": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4446", "title": "Graft support", "body": "Depends on #4445. Sadly I can't open the PR against libgit2 *and* set that as the base branch, so do note that the first 2 commits come from that other PR.\r\n\r\nThis adds graft support to `git_repository` as a private API. The end goal is to be able to store and obey shallow roots when working with a shallow repository, but this is usable on its own.\r\n\r\nAs discussed on #4331, this is unrelated to the `git-replace` mechanism.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4445", "title": "DRY commit parsing", "body": "Splitted from #4331. See this PR for context.\r\n\r\nThis adds a \"quick\" mode to our commit parsing machinery, and makes the revwalk code instead of going with its own. The outcome is a nice, single place where grafts can be handled.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhchavez": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4433", "title": "libFuzzer: Add build support and instructions", "body": "This change adds support for building a fuzz target for exercising the\r\npackfile parser, as well as documentation. It also runs the fuzzers in\r\nTravis to avoid regressions.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cpoerschke": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4409", "title": "issue #3751 (Function to parse author and committer information from environment)", "body": "work-in-progress for issue #3751 (Function to parse author and committer information from environment)\r\n\r\n```\r\ncd build\r\ncmake --build . && ./libgit2_clar -v -srepo::init\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Etiene": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4407", "title": "merge: reload index before git_merge", "body": "When the index in memory diverges from the index in disk `git_merge`\r\naborts with `GIT_ECONFLICT`. More details about this are found in the \r\nissue #4203, which this PR attempts to fix.\r\n\r\nA further discussion is needed wether this behaviour is actually desired.\r\n(Suppose someone actually is writing something to the index in memory\r\nand a concurrent task is merging. A possible argument is that the index\r\nshould be written to disk then.)\r\n\r\nCloses #4203 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaborbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4405", "title": "add a more verbose mode to the test runner with better progress reporting", "body": "```bash\r\nLoaded 340 suites, with 2504 tests, starting\r\n\r\nattr::ignore [#1 with 18 tests]\r\n  honor_temporary_rules [#1] .\r\n  allow_root [#2] .\r\n  ignore_space [#3] .\r\n  ignore_root [#4] .\r\n  full_paths [#5] F\r\n  more_starstar_cases [#6] .\r\n  leading_stars [#7] .\r\n  globs_and_path_delimiters [#8] .\r\n  skip_gitignore_directory [#9] .\r\n  subdirectory_gitignore [#10] .\r\n  expand_tilde_to_homedir [#11] .\r\n  gitignore_in_subdir [#12] .\r\n  dont_ignore_files_for_folder [#13] .\r\n  symlink_to_outside [#14] S\r\n  test [#15] .\r\n  unignore_dir_succeeds [#16] .\r\n  case_insensitive_unignores_previous_rule [#17] .\r\n  case_sensitive_unignore_does_nothing [#18] .\r\n\r\n  1) Failure:\r\nattr::ignore::full_paths [C:\\Users\\berna\\git\\libgit2\\tests\\attr\\ignore.c:83]\r\n  expected != is_ignored\r\n  0 != 1\r\n\r\n\r\nran 18 [16 passed 1 skipped 1 failed] in 1 suits in 2.9370 seconds\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petersalomonsen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4400", "title": "Hacks to build with emscripten for running in a web browser", "body": "Introducing new build option:\r\n\r\nAPPLY_EMSCRIPTEN_HACKS\r\n\r\nwhich will apply necessary tweaks to run in a web browser. Also added emscripten_hacks folder with build script (build.sh) and instructions in README.md.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcarz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4389", "title": "implement NTLM authentication", "body": "This patch implements NTLMv2 session negotiation over HTTP. Git repositories served by Team Foundation Server are currently only accessible if IIS is configured for SPNEGO authentication, which isn't always the case. I excluded support for older LM/NTLM versions since they are strongly discouraged and unlikely to be used in the wild.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asandroq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4383", "title": "transports: Avoid walking over non-commit objects", "body": "References may point to objects that are not commits, such as tags to\r\nblobs. In that case the reference must not be walked over further.\r\n\r\nFixes #3595.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cjhoward92": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4380", "title": "examples: ls-files: add ls-files to list paths in the index", "body": "Added an example to mimic `git ls-files` using the libgit2 library. It also supports the `--error-unmatch` parameter to determine if the specified paths are in the index. This will hopefully be a useful example for new libgit2 users.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4378", "title": "submodule: check index for path and prefix before adding submodule", "body": "This is to fix an issue where libgit2 will allow you to add a submodule even if the path you are trying add is found on the index. In the CLI we get a nice error about this, but not in libgit2.\n\nI would obviously like some pointers on how to do this, as I do not think it is 100% correct. For one, when I add the trailing slash to the path, I feel like I could clean that up or have a better implementation. I am also unsure if there is a more streamlined routine to check the index for the path.\n\nSome advice on how I could clean this up would be awesome.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184", "body": "Merged back into the experimental branch. Thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246", "body": "Fixed in 585190183b47dc991605abcfbe3afb57220a0f29. git_person is no longer public, memory is dynamic and managed by the library, and there are getter methods in place.\n\nThanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559", "body": "Fixed in d80e9d55aa2d0629f7f207db42762494075d7854. Thanks as always for reporting -- and obviously, if you can cook a patch instead of opening an issue, that's even more awesome. Feel free to fork away!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177", "body": "Merged, thanks a lot. Can \"Any Day Now\" be asap? Just message me and I'll set up a repository for the bindings inside of libgit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196", "body": "Oh, Mr Pearce. The world is so small. ;d\n\nJust shout when you are clear to release, I'm looking forward to hacking on the Python bindings too. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077", "body": "I think that since 1795f87952a68155a618523799f70473483c7265 all public methods return a proper error code. Tell me if anything is missing.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561", "body": "Scott was kind enough to write a README.txt for us. We'll make sure to keep it up to date. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346", "body": "libgit2 hasn't built in Windows for a while, because I don't have a Windows box to try it on. ^^\n\nWe are working on that and it's pretty high on our TODO list: we have a new build system in the waf-build branch which now has support for building libgit2 as a shared library. I'll be testing that on Windows someday on the following week, expect an update.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769", "body": "Hey there! We've been working very hard on the Windows build, and it's almost there. So far MSVC 2010 and MinGW compile cleanly with our new build system. Can you give it a go and tell us if you find any issues?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830", "body": "...We've just migrated from Make to waf last night. Try updating your master branch and compiling again. Shared targets should be available in all platforms.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367", "body": "Hey, we have two new commits! The shared library now builds without errors on all platforms I've tried, and you can choose compiler version with the --msvc flag, and target platform with the --arch flag.\n\nTell me if you find any more issues!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374", "body": "Oh, and yes, that's the 'expected' procedure for installing the library dependencies under MSVC: either copy them to the VC folder, or in any other folder inside of your %%LIB%% environment variable.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213", "body": "Hey people, thanks for your interest.\n\nThis is indeed a very interesting idea, and is something we have certainly on our TODO list: what we plan on doing is decoupling the storage system from the object database logic, as to allow people to write custom drivers on their apps to use **anything** as the backend on their Git app... From in-memory storage, to Cassandra. How cool is that? I'll tell you: very cool.\n\n...however, it has to wait, because our main focus right now are network ops. So stay tuned.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452", "body": "Hey, couple questions while I get QT Builder to try this out: have you actually tested this on Windows? What compiler does it use on that platform, can you choose between MSVC and GCC? Also, it seems like this only builds a shared library. How can we go about a static one?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942", "body": "Indeed, indeed. I don't know what was going on Shawn's head. :p\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966", "body": "Yes, we are now using a custom commit structure internally (not a normal git_commit) with very tight packing and only the minimal required fields for revision walking. It's the price to pay for a 20x increase in walking speed. You can get the OID of a commit just by calling `git_object_id(commit);`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002", "body": "Yeah, in fact, in most scenarios for revision walking, you have an OID and not a commit object: see `git_reference_listall`, `git_reference_resolve` and `git_reference_oid`, which would be used to find the HEADs of all the branches in your repository. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005", "body": "Ew, sometimes I forget that there are bindings for languages not written in C. :/\n\nI'll fix this in the dev branch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006", "body": "It is indeed, I forgot to save on Vim. :p\n\nFixing in dev-branch, I may release 10.1 to fix these minor issues.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176", "body": "This issue is now fixed in the dev branch. I don't know what do you mean by GIT_INTERN though...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631", "body": "Damn right. Fixed in the development branch!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509", "body": "Hey, fixed in dev branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774", "body": "No, certainly not in C. It's not a real API, but an ugly compiler workaround that lets you push an unspecified amount of objects to the stack. You still need to know how many objects are there, though.\n\nSee http://en.wikipedia.org/wiki/Stdarg.h\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286", "body": "Just return `GIT_ENOMEM` here, malloc already sets the error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383", "body": "Yeah absolutely, I wrote this when we had the \"kill on out of memory\" malloc wrappers, so it doesn't check for ENOMEM or return error codes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345", "body": "Question: are you sure we have to return `buffer_end` and not the actual end pointer for this single entry?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004", "body": "That comparison. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005", "body": "Don't rethrow this. Do a new `GIT_EEXISTS` with a good error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507", "body": "Hey, I'm afraid this won't cut it in MSVC. We need to be C89-compilant there. Can you move all the declarations to the top? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477", "body": "Is this comment up to date? AFAIK we're implementing fnmatch from scratch now?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030", "body": "This is terrible. We cannot duplicate and free a whole buffer just to prevent a cast. If you are concerned about this cast, you'll have to update the entire hashing code so that the hashed data is constant -- that would be a nice thing to have. Without that, this is a no-go.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031", "body": "Internal methods should not have the `git` prefix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032", "body": "Doesn't this leak memory?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033", "body": "Same as the `index` issue. There's no way we can double the overhead of deflating writes by copying _every single byte_ back and forth on memory. Impossible -- and since the ZLib code cannot be rewritten to support const writes either, your best bet is to change the signature of the function so `source` is not constant, and work from there.\n\nThis is one of the hottest paths in the library atm (all object writes go through this loop), so act accordingly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "schacon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875", "body": "They are not in progress yet, I just had that there as a placeholder and forgot to remove it.  I would love your help in getting them started.  I can also create a repo under the libgit2 org and give your project a place there if you want.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749", "body": "that isn't in the index information, it is only determined by comparing the index data to the data in the HEAD commit and the files in the working directory.  getting some status type calls is in the todo list, but it might take a bit of time.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490", "body": "Thanks. I've started some Python bindings, which I'll push in a few days or so.\n\nI've been looking forward to this since your GitTogether Skype video talk :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184", "body": "For some definition of \"possible\", sure :)\n\nATM due to Google policy around open-source releasing I'm blocking on review from someone inside Google (who also happens to be Shawn Pearce).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234", "body": "That was quick! Much better, thanks.\n\nThere are still a few outstanding issues:\n-GIT_COMMIT_GETTER ignores the return code from git_commit__parse_full.\n-I haven't fully grokked the revwalk code, but I think git_revwalk_next should be able to distinguish between the various reasons a walk is finished (e.g. a parent was missing/corrupted vs. the actual end of a walk).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310", "body": "I've got approval to push my libgit2 bindings. I think the best solution is for it to live in the libgit2 namespace, which I can push to my fork of. My project name is pygit2 and, at Shawn's recommendation, it's licensed under the same GPL-with-exception license as libgit2. If you have a more creative name I wouldn't mind changing it, but I don't feel strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ctimmerm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199", "body": "I overlooked I had created an extra compiler warning in commit.c, fixed in the second commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436", "body": "I am not sure about windows library conventions, but I had to do this:\n\ncopy zlib125dll.zip/dllx64/zlibwapi.lib to C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib\\amd64\n\ncopy zlib125.zip/zlib-1.2.5/zlib.h and zlib125.zip/zlib-1.2.5/zconf.h\nto C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\n\n`waf build-shared` didn't work, it gives this error:\n     Waf: Entering directory `C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     [ 1/23] cshlib: build\\shared\\src\\blob.c.0.o build\\shared\\src\\commit.c.0.o build\\shared\\src\\delta-apply.c.0.o build\\shared\\src\\errors.c.0.o build\\shared\\src\\file\n     lock.c.0.o build\\shared\\src\\fileops.c.0.o build\\shared\\src\\hash.c.0.o build\\shared\\src\\hashtable.c.0.o build\\shared\\src\\index.c.0.o build\\shared\\src\\odb.c.0.o build\\shared\\src\\oid.c.0.o build\\shared\\src\\person.c.0.o build\\shared\\src\\repository.c.0.o build\\shared\\src\\revwalk.c.0.o build\\shared\\src\\tag.c.0.o  build\\shared\n     \\src\\thread-utils.c.0.o build\\shared\\src\\tree.c.0.o build\\shared\\src\\util.c.0.o build\\shared\\src\\win32\\dir.c.0.o build\\shared\\src\\win32\\fileops.c.0.o build\\shared\\src\\win32\\map.c.0.o build\\shared\\src\\block-sha1\\sha1.c.0.o -> build\\shared\\git2.dll build\\shared\\git2.lib build\\shared\\git2.dll.manifest\n     Waf: Leaving directory`C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     Build failed\n      -> missing file: 'C:\\Users\\hef\\projects\\libgit2\\build\\shared\\git2.lib'\nThe error appears to be accurate, I get a git2.dll but not a git2.lib\n\n`waf build-static` appears to work fine though.\nI haven't tested the resulting library yet.\n\nAlso, it appears that waf built a 64bit lib by default, is there a way to tell it to make a 32bit lib?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461", "body": "the build system doesn't use make,\ndoes running `waf build-shared` work for you?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301", "body": "mingw32 notes:\nw32-pthreads does not seem to get linked to properly if it is built statically, but seemed fine dynamically.  That is, libgit2 linked against w32-pthreads(static), but my application did not.\nzlib and libgit2 seem to build and link fine.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829", "body": "you need to add zlib.h (and zconf.h) from zlib-1.2.5 to your include path.\nI dumped them in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\INCLUDE.\n\nyou are also going to need zlibwapi.lib.  I put that in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\lib\nI believe you will need to keep the zlib.dll either in your %PATH% or in the same directory as your built executable for this to work.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841", "body": "Ah, I see. I misunderstood about what was stored in the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510", "body": "begin able to specify a qt subproject in a git submodule would be awesome.\n\naccording to http://doc.qt.nokia.com/4.7/qmake-variable-reference.html, you might be able to build a static lib with:\n\n```\n CONFIG += create_pri\n QMAKE_LFLAGS = staticlib\n```\n\nI did not test this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joefeser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849", "body": "I copied the dll per the read me file but never copied the .h files as you stated. I placed the zlib.h and zconf.h files in the include folder and a dll was created. Next to figure out if it is x86 or x64.\n\nYou may want to add the instructions for the two .h files to the readme.\n\nThanks for your help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rkh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977", "body": "I love the idea. Would be awesome to use for undo history in Redcar, for instance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "przemoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096", "body": "Other example, that maybe I shouldn't reveal yet. ;)\n\nFor a few years at least I have in my mind the idea of very useful application (as usual, implementation is not even started yet), that I even named already: SINAVE - sed inspired, nipped by awk visual editor. Name says pretty much (awk & sed users should predict how such tool would be useful), but from the beginning I thought that having git in the back is a must-have thing, because it would allow implementing the best undo/redo feature any editor ever had, because of possibility of having divergent branches all the time accessible from editor during work, for instance. You must already feel how awesome such tool could be.\n\nSorry for a bit off-topic.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nulltoken": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043", "body": "Nice! :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140", "body": "Nice one! \nI knew the duplicate packed and loose ref would help by biting us in the... back. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030", "body": "+1 :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558", "body": "common.h:\n\n<pre><code>#if defined(_MSC_VER)\n# define GIT_INLINE(type) static __inline type\n#else\n# define GIT_INLINE(type) static inline type\n#endif</code></pre>\n\n\nMy guess would be that GIT_INLINE exists because inlining requires a different specifier depending on the platorm/compiler.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323", "body": "Current signature of the method is <code>void git_cache_init(git_cache *cache, size_t size, git_cached_obj_freeptr free_ptr)</code>.\n\nFine with you if I change it to return an <code>int</code>?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425", "body": "It's now fixed\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525", "body": "Damn! You're right. Will force-push a fix. Thanks for having spotted this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tclem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209", "body": "Love it!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296", "body": "I think you meant to do this: `str[i] = tolower(str[i]);`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tbranyen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786", "body": "Awesome glad to see this, bumping up my bindings to this version immediately!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jystic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940", "body": "+1 from me, as a sometimes Windows user this is really helpful\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523", "body": "Should this be including oid.h instead? I can't see what revwalk.h needs from object.h, but it definitely needs the git_oid struct from oid.h\n\nThis commit breaks the auto-binding generator that I'm using because the generator doesn't traverse header files recursively to find types. Changing this to oid.h makes everything happy again. I don't mind changing the binding generator to be more robust, but this seems to be better changed in the main codebase.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484", "body": "CONDITION_VARIABLE doesn't seem to be available on MinGW, so all the stuff to do with pthread_cond_t doesn't compile. I found this explanation: http://forums.techarena.in/software-development/1130499.htm\n\nFortunately libgit2 doesn't use condition variables yet, so removing all traces of them means libgit2 compiles fine.\n\nYou didn't really want to use condition variables did you? ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "txdv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964", "body": "Any reason why it changed from (git_commit *commit) to (const git_oid *oid)?\nApart from being const...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998", "body": "I just thought you could retrieve the oid from git_commit, but I guess there are some valid scenarios were one has only an ID instead of an instance of git_commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143", "body": "why is GIT_INTERN present at all?\nYou can't use it in any other binding.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285", "body": "GIT_INLINE. its not that hard to figure it out, because there are not many defs with caps on\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763", "body": "Why the parent count when there is already the variable argument parent list?\nDoesn't the API for variable argument lists support the counting of them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246", "body": "I don't understand one thing though.\n\nWhy do the create functions return only an object id, instead of a direct pointer to the struct?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274", "body": "And what about git_repository_close? What happened to that? Got it replaced by _gc? gc does only some garbage collection if I'm not mistaken.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jasonpenny": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000", "body": "There seems to be no way to free the git_strarray from my bindings, since `git_strarray_free` is GIT_INLINE and not GIT_EXTERN\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004", "body": "The API specifies\n    GIT_EXTERN(void) git_repository_close(git_repository *repo);\nis it supposed to be `git_repository_gc` ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617", "body": "Warnings treated as errors, so doesn't build with MSVC:\n\ncache.c: \"potentially uninitialized local variable 'node' used\" in git_cache_get,\nand commit.c has 3 places where free() is called on const pointers\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "scorpion007": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618", "body": "Won't this get compiled out in release builds and break the program's behavior?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637", "body": "Assert is still ok, just perhaps needs to be done on a separate line. I.e. save the return value of snprintf and assert it on the next line. No sweat :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sakari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633", "body": "oh boy.. nice catch\n\nI would think so. That needs to be fixed. Maybe abort here some other way. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "avidal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943", "body": "s/importart/important/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944", "body": "s/copmparison/comparison/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jpfender": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996", "body": "Oops, this appears to be a duplication.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "schu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524", "body": "This must be repo2, no? Otherwise the test is segfaulting for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kiryl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034", "body": "Ok. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035", "body": "No, it doen't. Comment is not relevant (any more?).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036", "body": "This is a real bug! zlib can modify data pointed by ->next_in so you **cannot** just cast out the qualifier if you don't want to get SIGSEGV.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "3": {"medranocalvo": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482", "title": "Incorrect git_push_options's pb_parallelism documentation", "body": "The `pb_parallelism` field of the `git_push_options` structure is documented to default to 1 (meaning no parallelism), but it is actually initialized to 0 by default (meaning auto-detected parallelism).\r\n\r\n>  If the transport being used to push to the remote requires the creation of a pack file, this controls the number of worker threads used by the packbuilder when creating that pack file to be sent to the remote. If set to 0, the packbuilder will auto-detect the number of threads to create. **The default value is 1**.\r\n\r\n~~~\r\n#define GIT_PUSH_OPTIONS_INIT { GIT_PUSH_OPTIONS_VERSION, 0, GIT_REMOTE_CALLBACKS_INIT, GIT_PROXY_OPTIONS_INIT }\r\n~~~\r\n\r\nPlease, correct the documentation or the initial value.  In my case, the automatic parallelism was unexpected.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480", "title": "Unnecessary syscalls on bare repository", "body": "### Reproduction steps\r\nDiff any two commits on bare repository and observe behaviour with strace.\r\n\r\n### Expected behavior\r\nDon't query stat for files on a bare repository.\r\n\r\n### Actual behavior\r\nStat checked for every file in diff, if it's a bare repository.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nMaster 782402c271d5467f9890af8e808af938a93bc55f\r\n\r\n### Operating system(s) tested\r\nArch Linux\r\n\r\nI just tried diffing with the current `master` libgit2 build. While the other bug with unnecessary syscalls for `.gitattributes` and `attributes` was fixed, there are still some `stat` calls for files, which shouldn't be necessary on a bare repository.\r\n\r\nI'm using pygit2 for my interaction with git repositories, but as far as I can see, this is actually a issue with libgit2.\r\n\r\nCurrent  output:\r\n```\r\n[pid 15375] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"/tmp/gitalizer/phoemur/slackbuilds-1/info/attributes\", 0x7ffe5758e5f0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n```\r\n\r\npygit2 issue:\r\nhttps://github.com/libgit2/pygit2/issues/764", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tyrielv": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479", "title": "Recursive merge uses parents of virtual commits instead of virtual commit itself when finding merge base", "body": "Recursive merge passes the parents of a virtual commit to git_merge_bases_many in place of the virtual commit. This produces a different result in some cases than git.exe.\r\n\r\n### Reproduction steps\r\nSee attached repo [bases.zip](https://github.com/libgit2/libgit2/files/1640783/bases.zip)\r\nCall git_merge_commits(), passing the commits for branchJ-1 and branchJ-2.\r\n\r\n### Expected behavior\r\nOne conflict, in version.txt\r\n\r\n### Actual behavior\r\nTwo conflicts, one in version.txt and one in targetfile.txt\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.26.0\r\n\r\n### Operating system(s) tested\r\nWindows 10\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Phrohdoh": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473", "title": "Request: Please consider publishing to conan.io", "body": "Hello, libgit2 team / community / maintainers!\r\n\r\n_Note: I am not affiliated with conan.io or JFrog in any way._\r\n\r\nI am not a C developer by any means (I'm quite positive I would lose all of my limbs in a matter of minutes with C) which goes to show that I am also quite clueless regarding dependency management but from what I understand C (and C++) mostly consist of copying headers and implementation files of dependencies in-tree.\r\n\r\nGiven the above it is quite difficult, in my limited experience, to stay up to date (or even track which version of a library you are using).\r\n\r\nIt is my belief that more projects and developers (myself included of course) could benefit from the work put into libgit2 if it were easier to depend on in a trackable way.\r\n\r\nThis is where my request for you all (and if you decide to and I can help please let me know how!) to consider publishing libgit2 releases to [conan.io](https://conan.io/index.html) which markets itself as \"Conan, the C / C++ Package Manager for Developers.\"\r\n\r\n[`conan`](http://docs.conan.io/en/latest/getting_started.html) use is driven by the [`conanfile.txt`](http://docs.conan.io/en/latest/reference/conanfile_txt.html) which allows downstream projects to declare dependencies which the conan tool will resolve and build as specified in the manifest.\r\n\r\nIf the overhead of management and setup of publishing to conan.io outweighs the benefits then please note so and close this.\r\n\r\nThank you for your time!\r\n\r\n**Edit**: Corrected a link.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rankr": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469", "title": "Test failures", "body": "### Reproduction steps\r\nRun tests in bulid directory, with command \"ctest -V\"\r\n### Expected behavior\r\nno test fail\r\n### Actual behavior\r\nThe following tests FAILED:\r\n\t  1 - libgit2_clar (Failed)\r\nsome details:\r\n1:   2) Failure:\r\n1: diff::binary::delta [/Users/file4/libgit2-0.26.0/tests/diff/binary.c:53]\r\n1:   String mismatch: expected != actual.ptr\r\n### Version of libgit2 (release number or SHA1)\r\nlibgit2-0.26.0\r\n### Operating system(s) tested\r\nmacOS 10.13.2 (17C88)\r\n###some more info:\r\ncmake version 3.10.1\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlosmn": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465", "title": "Release v0.27.0 & v0.26.1", "body": "We're at that time again where we want to make a new release.\r\n\r\nFor the v0.27 series, codenamed \"Stadtrandsiedlung\"\r\n\r\n- [ ] Bump the versions in the headers\r\n- [ ] Make a release candidate\r\n- [ ] Plug any final leaks\r\n- [ ] Fix any last-minute issues\r\n- [ ] Make sure CHANGELOG reflects everything worth discussing\r\n- [ ] Update the version in CHANGELOG and the header\r\n- [ ] Produce a release candidate\r\n- [ ] Tag\r\n- [ ] Create maint/v0.27\r\n- [ ] Update any bindings the core team works with\r\n\r\nFor v0.26.1\r\n\r\n- [ ] Select the changes we want to backport\r\n- [ ] Update maint/v0.26\r\n- [ ] Tag", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/ecd55cec771d9c6f7ffffe80422a1decd4645c17", "message": "Merge pull request #4477 from pks-t/pks/memleaks\n\nMemory leaks"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f1323d9c161aeeada190fd9615a8b5a9fb8a7f3e", "message": "Merge pull request #4472 from libgit2/ethomson/libgit2deps_azure\n\ntravis: fetch trusty dependencies from Bintray"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6e748130e4f910b6f8c03a3f6f2e11c856d19ba7", "message": "travis: we use bintray's own key for signing\n\nThe VM on Travis apparently will still proceed, but it's good practice."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6d452600fa5c351670c9200e7c48f1da1191c5b8", "message": "cmake: use a FEATURE_SUMMARY call compatible with 3.0.2\n\nWhen we print features, we make an effort to support all the way back to\npre-3.0. However, in the code for versions from 3 onward we call\n`FEATURE_SUMMARY` with multiple kinds of elements to print in the same line.\nThis is only supported in CMake 3.1 and later, making the rather popular CMake\n3.0.2 unable to build the library.\n\nUse a single kind of element per invocation. This means we need to provide a\n\"description\" text, which CMake provides for us if provide multiple kinds of\nelements."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a7e36d3d9c473647f141b24d398a98171744ceee", "message": "Merge pull request #4468 from libgit2/cmn/openssl-pc\n\nMake sure to include 'openssl' as a dep when building statically with SHA1DC"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b21c5408ff18eaf99029f59e738f6f614a53c90d", "message": "cmake: add openssl to the private deps list when it's the TLS implementation\n\nWe might want OpenSSL to be the implementation for SHA-1 and/or TLS. If we only\nwant it for TLS (e.g. we're building with the collision-detecting SHA-1\nimplementation) then we did not indicate this to the systems including us a\nstatic library.\n\nAdd OpenSSL to the list also during the TLS decision to make sure we say we\nshould link to it if we use it for TLS."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b85548edb027474af3d107f9faa004cc09a1863a", "message": "cmake: treat LIBGIT2_PC_REQUIRES as a list\n\nIt is indeed a list of dependencies for those which include the static archive.\nThis is in preparation for adding two possible places where we might add openssl\nas a dependency."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ddd36510b589f8dd39a9bfaaecfb9160dc943f42", "message": "Merge pull request #4467 from libgit2/cmn/static-archive-later\n\ncmake: move the rule to find static archives close to building clar"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/85e40bbf0938cac5668e810864f6be9619b9e60e", "message": "cmake: move the rule to find static archives close to building clar\n\nIf we're building static libraries, we want to use that for building our clar\nbinary. This is done in 49551254 (2017-09-22; cmake: use static dependencies\nwhen building static libgit2) but that commit included the rule too early,\nmaking it affect the search for iconv, meaning we did not find it when we were\nbuilding a static libgit2.\n\nMove the rule to just before building clar, after we've included the rules for\nbuilding the library itself. This lets us find and link to the dynamic libiconv."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4478", "title": "refs: include \" sorted \" in our packed-refs header", "body": "This lets git know that we do in fact have written our packed-refs file\r\nsorted (which is apparently not necessarily the case) and it can then use the\r\nnew-ish mmaped access which lets it avoid significant amounts of effort parsing\r\npotentially large files to get to a single piece of data.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4418", "title": "Re-enable the RC4 test", "body": "We disabled this test while dealing with a security issue. Enable it again and make the error handling in the OpenSSL stream let us return the actual error due to trying to talk to RC4.\r\n\r\n`GIT_ECERTIFICATE` is likely not _really_ the right thing to return here since it's not really about the certificate but about not supporting our cipherlist. We will likely want a specific error code for this (or we can overload this one, but TLS is confusing enough as it is).", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4396", "title": "config: specify how we match the regular expressions", "body": "We do it the same as git does: case-sensitively on the normalized form of the\r\nvariable name.\r\n\r\nWhile here also specify that we're case-sensitive on the values when handling\r\nthe values when setting or deleting multivars.\r\n\r\n---\r\n\r\n#4390 highlights this deficiency in the documentation.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119", "body": "This is actually a debug statement that sneaked in. I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464", "body": "This causes us to behave differently to `git.git` by allowing comments inside multi-line values. I'm not sure whether that's a good thing or not\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349", "body": "On Tue, Apr 26, 2011 at 03:33:49PM -0700, tclem wrote:\n\n> > -   str[input_sp - input] = '.';\n> >   +\n> > -   for (i = 0; i < 2; ++i) {\n> > -       quote = strrchr(str, '\"');\n> > -       memmove(quote, quote + 1, strlen(quote));\n> > -   }\n> >   +\n> > -   return GIT_SUCCESS;\n> >   +}\n> >   +\n> >   +void git__strntolower(char *str, int len)\n> >   +{\n> > -   int i;\n> >   +\n> > -   for (i = 0; i < len; ++i) {\n> > -       str[len] = tolower(str[len]);\n> \n> I think you meant to do this: `str[i] = tolower(str[i]);`\n\nYes I do. Thanks for catching this.\n\n## \n\nCarlos Mart\u00edn Nieto | http://cmartin.tk\n\n\"\u00bfC\u00f3mo voy a decir bobadas si soy mudo?\" -- CACHAI\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362", "body": "The way I understood it, buffer_end in this function points to the end of the specified entry, because the entry length is parsed in the caller\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492", "body": "No, it's not. I removed that at least once but I must have gotten confused with all the rebasing I was doing\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "stanhu": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460", "title": "High number of `stat` calls for `gitattributes` files", "body": "I've noticed that libgit2 makes a high number of `stat` calls to `gitattributes` files, which significantly impacts networked file systems.\r\n\r\n### Reproduction steps\r\n\r\nWith the Linux repo (https://github.com/torvalds/linux.git), I created this Rugged script:\r\n\r\n```ruby\r\nrequire 'rugged'\r\n\r\nrepo = Rugged::Repository.new('.')\r\n\r\ncommit_object = repo.rev_parse('master')\r\noriginal_oid = repo.rev_parse('979e1f08042b83152dfe3d76df10db31eb7edf98')\r\ndiff_commits = commit_object.parents[0].diff(original_oid)\r\n\r\nputs diff_commits.stat\r\n```\r\n\r\nThe result is 30,497 files changed with 753,086 additions and 1,345,193 deletions. Now if I run `strace` on this, I see there are 457,782 hits with `gitattributes`:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/diff-linux.txt -s 1024 ruby diff.rb                                                                                                     \r\n30497\r\n753086\r\n1345193\r\n$ grep gitattributes /tmp/diff-linux.txt | wc -l\r\n457782\r\n```\r\n\r\nLooking at it in more detail, I see that we are often duplicating the same lookup:\r\n\r\n```sh\r\n07:38:38.120824 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.120852 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.120881 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.120949 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121019 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.121270 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121301 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121329 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121356 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.121390 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.121742 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.121805 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122075 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122105 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122133 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122161 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122189 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122249 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122305 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000013>\r\n07:38:38.122602 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.122631 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122659 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122686 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000009>\r\n07:38:38.122715 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122816 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122874 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123136 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123164 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123192 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123219 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123247 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123309 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123365 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123628 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123656 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123688 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123729 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.123767 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:38:38.123919 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123983 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.124245 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.124273 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n```\r\n\r\n### Expected behavior\r\n\r\nIf I compare this with the `git` call, I \"only\" see 7,951 hits:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/git-compare.txt -s 1024 git diff 979e1f08042b83152dfe3d76df10db31eb7edf98..master > /dev/null\r\n$ grep gitattributes /tmp/git-compare.txt | wc -l\r\n7951\r\n```\r\n\r\nThe actual hits look a lot more sensible:\r\n\r\n```\r\n07:42:52.269330 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.269446 open(\".gitattributes\", O_RDONLY) = 4 <0.000014>\r\n07:42:52.270123 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.270203 open(\".gitattributes\", O_RDONLY) = 4 <0.000028>\r\n07:42:52.274058 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.274105 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.274143 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274604 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274646 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.274682 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.275014 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000017>\r\n07:42:52.275347 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.276283 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.276479 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289449 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.289506 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.289545 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289900 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000023>\r\n07:42:52.289962 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290002 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290237 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.290604 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.310600 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.313085 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.320641 open(\"Documentation/acpi/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n```\r\n\r\n### Actual behavior\r\n\r\nExcessive number of `stat` calls for `gitattributes`\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nRugged 0.26.0 \r\n\r\n### Operating system(s) tested\r\n\r\nUbuntu Linux 16.04\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TomGle123": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458", "title": "Missing support for 'subtree' merge strategy", "body": "Using LibGit2Sharp I noticed there was no support for merge strategies other than 'Standard' and 'Octopus'.  I was looking to use the 'Subtree' strategy ([docs](https://git-scm.com/docs/merge-strategies#merge-strategies-subtree)).  I'd like to add support for this merge strategy in LibGit2Sharp but it is also missing from LibGit2, and I only program C#.\r\n\r\nMaybe there are technical reasons why this feature is not implemented, but if not, it would be a useful addition for me, allowing me to write tooling in C# based around the 'subtree' merge strategy.\r\n\r\nReported against master commit 'd621024'.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fuhao92": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454", "title": "hello, I use git_index_add_bypath(), to add about 500M zip file, but it return out of memoryOperator failed?", "body": "You are opening a _bug report_ against the libgit2 project.  If you have a\r\nquestion about an API or usage, please ask on StackOverflow:\r\nhttp://stackoverflow.com/questions/tagged/libgit2.  Please fill out the\r\nreproduction steps (below) and delete this introductory paragraph.  Thanks!\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aw32": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452", "title": "SSH: Pass hostkey to certificate check callback", "body": "Feature request:\r\nThere is the certificate check callback for remote connections.\r\nFor the SSH certificate check `git_cert_hostkey` can only contain the MD5 and/or SHA1 hash of the hostkey as passed from libssh2. Since MD5 and SHA1 are not considered trustable anymore, it would be nice to receive the actual hostkey as returned by libssh2.\r\nWould you consider this reasonable enough to accept a pull request?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441", "title": "git_diff_hunk documentation has one-off field descriptions", "body": "The documentation for `git_diff_hunk` has descriptions that are for the wrong fields. (Documentation found https://libgit2.github.com/libgit2/#HEAD/type/git_diff_hunk)\r\n\r\n# Actual:\r\n```\r\nint | old_start\r\n\r\nint | old_lines: Starting line number in old_file\r\n\r\nint | new_start: Number of lines in old_file\r\n\r\nint | new_lines: Starting line number in new_file\r\n\r\nsize_t | header_len: Number of lines in new_file\r\n\r\nchar [128] | header: Number of bytes in header text\r\n```\r\n\r\n# Expected:\r\n```\r\nint | old_start: Starting line number in old_file\r\n\r\nint | old_lines: Number of lines in old_file\r\n\r\nint | new_start: Starting line number in new_file\r\n\r\nint | new_lines: Number of lines in new_file\r\n\r\nsize_t | header_len: Number of bytes in header text\r\n\r\nchar [128] | header: Header text, NUL-byte terminated\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rgburke": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428", "title": "git_revwalk_next is slow on first iteration since v0.25", "body": "git_revwalk_next is slow on its first iteration for versions 0.25, 0.26 and master when compared to v0.24. This is especially noticeable on large repositories.\r\n\r\n### Reproduction steps\r\nRun the following program on the Linux kernel source tree (https://github.com/torvalds/linux):\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <git2.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n        git_libgit2_init();\r\n\r\n        git_repository *repo;\r\n        if (git_repository_open(&repo, \".git\")) {\r\n                fprintf(stderr, \"Failed to open repository\\n\");\r\n                return 1;\r\n        }\r\n\r\n        git_oid oid;\r\n        git_oid_fromstr(&oid, \"a0651c7fa2c088a605f63792279859608ed7f2c8\");\r\n\r\n        git_revwalk *revwalk;\r\n        git_revwalk_new(&revwalk, repo);\r\n        git_revwalk_sorting(revwalk, GIT_SORT_TIME);\r\n        git_revwalk_push(revwalk, &oid);\r\n\r\n        if (!git_revwalk_next(&oid, revwalk)) {\r\n                git_commit *commit;\r\n\r\n                if (git_commit_lookup(&commit, repo, &oid)) {\r\n                        fprintf(stderr, \"Failed to lookup commit\\n\");\r\n                        return 1;\r\n                }\r\n\r\n                printf(\"%s\\n\", git_commit_message(commit));\r\n                git_commit_free(commit);\r\n        }\r\n\r\n        git_revwalk_free(revwalk);\r\n        git_repository_free(repo);\r\n\r\n        return 0;\r\n}\r\n```\r\n\r\n### Expected behavior\r\nWhen using v0.24 this program runs in a couple of milliseconds:\r\n```\r\nrichard@DevNew:~/code/linux$ time ./revwalktest >/dev/null\r\n\r\nreal\t0m0.006s\r\nuser\t0m0.000s\r\nsys\t0m0.006s\r\n```\r\n\r\n### Actual behavior\r\nWhen using v0.25, v0.26 or master this program has not completed after 1 minute:\r\n```\r\nrichard@DevNew:~/code/linux$ timeout 60s ./revwalktest\r\nrichard@DevNew:~/code/linux$ echo $?\r\n124\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.25, v0.26 & master\r\n\r\n### Operating system(s) tested\r\n```\r\nLinux DevNew 4.13.0-17-generic #20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ColMelvin": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425", "title": "git_index_add_frombuffer creates 0160000 mode objects as blobs", "body": "The `git_index_add_frombuffer` function accepts the commit mode, `0160000`, when creating a new entry from a buffer.  However, it creates the commit mode entry as a blob.  Since a blob object and a commit object with the exact same data will have a different SHA-1 checksum, this behavior may lead to unexpected results.\r\n\r\nNotably, `git_index_add_frombuffer` will return an error when the tree mode, `040000`, is provided for the mode.  I think the same should happen for `0160000`.\r\n\r\n### Reproduction steps\r\nThe reproduction code below uses a modified version of Perl's Git::Raw v0.74, available at https://github.com/jacquesg/p5-Git-Raw/pull/191.  This modification will hopefully be included in v0.75.\r\n\r\n```perl\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\nuse warnings;\r\n\r\nuse File::Temp;\r\nuse Git::Raw;\r\nuse Test::More tests => 3;\r\n\r\nmy $dir   = File::Temp->newdir();\r\nmy $repo  = Git::Raw::Repository->init( $dir->dirname, 1 );\r\nmy $index = $repo->index;\r\n\r\nmy $COMMIT_DATA = \"tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\\x0aauthor A U Thor <author\\@example.com> 1234567890 +0000\\x0acommitter C O Mitter <committer\\@example.com> 1234567890 +0000\\x0a\\x0aEmpty\\x0a\";\r\nmy $COMMIT_SHA  = '746262f5c8ed0115432581c2bcf8f08c77ae76c8';\r\n\r\n$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );\r\nmy $tree = $index->write_tree;\r\n\r\nmy ($entry) = $tree->entries;\r\nis $entry->file_mode,  0160000;               # Passes\r\nisa_ok $entry->object, 'Git::Raw::Commit';    # Fails\r\nis $entry->object->id, $COMMIT_SHA;           # Fails\r\n\r\nexit;\r\n\r\n# Sanity check proving actual commit value\r\nmy $hash = qx{cd '$dir'; echo -n '$COMMIT_DATA' | git hash-object -t commit --stdin};\r\nchomp $hash;\r\nis $hash, $COMMIT_SHA;                        # Passes\r\n```\r\n\r\n### Expected behavior\r\n\r\nEither:\r\n- all tests pass, or\r\n- script dies at `$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );` with 'invalid filemode'\r\n\r\n### Actual behavior\r\n\r\nScript runs to completion; 2nd & 3rd tests fail.\r\n\r\n```\r\n1..3\r\nok 1\r\nnot ok 2 - An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit'\r\n#   Failed test 'An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit''\r\n#   at proof line 22.\r\n#     The object of class 'Git::Raw::Blob' isn't a 'Git::Raw::Commit'\r\nnot ok 3\r\n#   Failed test at proof line 23.\r\n#          got: 'f8aabe3d076ed2278a652ba6d76ea152148daa3c'\r\n#     expected: '746262f5c8ed0115432581c2bcf8f08c77ae76c8'\r\n# Looks like you failed 2 tests of 3.\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nTested Git::Raw v0.74 (ee89941fa2 of libgit2, per Changes file).\r\n\r\nInspection of the code suggests the issue remains (as of 364184acca0d993deaeb060197b595f7c49ea226)\r\n\r\n### Operating system(s) tested\r\nLinux 3.10.0-514.26.2.el7.x86_64\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianmario": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/4893a9c01c8da084eb995178f80d0d453109056e", "message": "Merge pull request #4451 from libgit2/charliesome/trailer-info\n\nImplement message trailer parsing API"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d4a3a4b5383fefcb397524340af05118b4687f29", "message": "rename find_trailer to extract_trailer_block"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3e5239e42a529e99dc584ce37402856a4da26cec", "message": "update code docs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1e758fd3154eef0bf1237fb20b2180ad08cfe28d", "message": "just use git_message_trailer in tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6062032e452afea451901333089da834edbe2078", "message": "try and fix windows build"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d43974fb5cbfda6ec28fc92b83d03db0af73748b", "message": "Change trailer API to return a simple array"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5734768b9edaecedaa7b13fed2ce59cb588df7e8", "message": "Merge remote-tracking branch 'origin/master' into charliesome/trailer-info"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f4f0e7eb0f8280ed6100c37c3af0aa66c31a8f9e", "message": "switch back to braced array initializers"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f315cd1470e21dee0dc48cc6b53ffbd30122c917", "message": "make separators const a macro as well"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fb29ba0953ef52ce94aecd93b9b4a3bcc64cf07c", "message": "remove empty lines between @-lines"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1cda43ba34b40b82ff6470799d36e54a176aaad5", "message": "make comment_line_char const a macro"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6bc7301e8ab6194179423b95a481942e2fa11329", "message": "Don't use newer C syntax for declaration in tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pks-t": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/782402c271d5467f9890af8e808af938a93bc55f", "message": "tests: refs::iterator: fix memory leak due to ref names not being free'd\n\nThe test refs::iterator::foreach_name iterates through every reference\nand copies its name into a local vector. While the test makes sure to\nfree the vector afterwards, the copied reference names are not being\nfree'd. Fix that."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5963292f9ebc8b06ad307e2ed10eec845424e74e", "message": "refs: document need to free refs in foreach-callback\n\nReferences passed to the callback function of `git_reference_foreach`\nare expected to be owned by the callback. As such, they are never being\nfreed by `git_reference_foreach`, but will have to be freed by the\ncaller. This small detail is never mentioned in the function's\ndocumentation, though, making it easy to get wrong. Document this to\nmake it discoverable."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/90f81f9fdc6d87c4ca75e4f065e1eb4818c99674", "message": "transports: local: fix memory leak in reference walk\n\nUpon downloading the pack file, the local transport will iterate through\nevery reference using `git_reference_foreach`. The function is a bit\ntricky though in that it requires the passed callback to free the\nreferences, which does not currently happen.\n\nFix the memory leak by freeing all passed references in the callback."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/093e671ee8fb824e3e40677ed7440dba72483fe1", "message": "tests: network::fetchlocal: let cleanup function handle sandbox cleanup\n\nTwo tests in network::fetchlocal explicitly set a cleanup function to\nfree and remove the created sandbox repositories. This is not necessary,\nthough, as the cleanup function executed after each test already takes\ncare of cleaning up after them. Remove the code to avoid needless code\nduplication."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0b967396033b059d683bdecec85c2838c428a74e", "message": "Merge pull request #4471 from libgit2/cmn/cmake-feature-302\n\ncmake: use a FEATURE_SUMMARY call compatible with 3.0.2"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70aa61460a4f33509aa06ed86ac3becc243ee5d6", "message": "cmake: allow explicitly choosing SHA1 backend\n\nRight now, if SHA1DC is disabled, the SHA1 backend is mostly chosen\nbased on which system libgit2 is being compiled on and which libraries\nhave been found. To give developers and distributions more choice,\nenable them to request specific backends by passing in a\n`-DSHA1_BACKEND=<BACKEND>` option instead. This completely replaces the\nprevious auto-selection."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e7495ce6f4dee156b6a1d48a4d478c83d1053236", "message": "cmake: default to using SHA1DC\n\nUpstream git.git has changed their default SHA1 implementation to the\ncollision-detection algorithm SHA1DC in commit e6b07da27 (Makefile: make\nDC_SHA1 the default, 2017-03-17). To match upstream, align ourselves and\nswitch over to SHA1DC by default."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4481", "title": "tests: online::clone: fix memory leak due to not freeing URL", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4476", "title": "scripts: add backporting script", "body": "This adds a simple script for backporting pull requests to older\r\nbranches. It accepts as parameters a list of pull request numbers which\r\nwhose commits are to be cherry-picked. The identification of PRs\r\ncurrently happens by using the commit message of the merge of the PR,\r\nwhich should conform to the message \"Merge pull request #<PR>\".\r\n\r\nWhile the heuristic works in practice, we could instead also use the\r\ndirect references from GitHub via \"pull/#<PR>/head\". This requires the\r\nuser to have all these references fetched, though, so we can just use\r\nthe current heuristic until we experience any issues with that.\r\n\r\n---\r\n\r\nDunno if we want this. I've used this script to create #4475, and I think a bit of automation is nice to have.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4475", "title": "v0.26.1 backports", "body": "Proposed backports for v0.26.1. This includes all PRs that I've currently marked with the \"backport\" label:\r\n\r\n- #4045\r\n- #4455\r\n- #4447\r\n- #4444\r\n- #4437\r\n- #4435\r\n- #4432\r\n- #4431\r\n- #4427\r\n- #4426\r\n- #4424\r\n- #4423\r\n- #4408\r\n- #4386\r\n- #4369\r\n- #4368\r\n- #4367\r\n- #4364\r\n- #4359\r\n- #4357\r\n- #4344\r\n- #4326\r\n- #4306\r\n- #4296\r\n- #4280\r\n- #4273\r\n\r\nI've initially included #4277 as well, but that code was only merged after v0.26.0 in #4202.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4474", "title": "Special-casing null OIDs", "body": "I've been triggered by the not-so-recent discussion in upstream git.git around null OIDs (see [1]) to implement some defensive mechanisms about ever reading or writing null OIDs either via the ODB layer or into trees. For the ODB part, I now reject writing and shorcut reading null OIDs while for trees I've only implemented the rejection on inserting entries into the treebuilder. So I've not changed the reading part for our trees.\r\n\r\n[1]: https://marc.info/?l=git&m=151120958313567&w=2", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4438", "title": "Multiple hash algorithms", "body": "A first step towards an abstraction for the use of multiple of hash algorithms. It lays the groundwork for having `git_hash_ctx` dispatch to different hash algorithms based on which one is being requested. Next steps:\r\n\r\n- extend `git_repository` by a `git_hash_algorithm` field\r\n- implement required new algorithms\r\n- extend `git_hash_init` and `git_hash_ctx_init` to accept an algorithm which is then used for hashing by that particular context only\r\n- extend OIDs to be a union of all possible hashes\r\n- scavenge through the tree and adjust all callers. In most cases we'd want to retain SHA1 (e.g. pack trailers, patch IDs, filebuffers), for others we'd simply use whatever the repository format states", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4436", "title": "pack: rename `git_packfile_stream_free`", "body": "The function `git_packfile_stream_free` frees all state of the packfile\r\nstream without freeing the structure itself. Thus, the function is\r\nmisnamed, as we usually call such a function a \"clear\" function. Rename\r\nit to make clear that in fact it does not free the structure.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4417", "title": "[RFC] Khash refactorings (pt. 2)", "body": "Another round of khash fixes. While my first round of fixes only touched our own abstractions (git_oidmap, git_strmap, git_idxmap and git_offmap), this PR revamps the complete khash implementation. I've been too fed up with digging into those awful macros, so I decided to take the bait and decided to refactor that part.\r\n\r\nSo what I did is to make the khash implementation itself non-generic. Instead of having a macro to create per-type map structs, we now have a single map which has a void pointer only. This relieves us of all those macro magic, but possibliy at the cost of performance. I haven't measured that yet, but will do so if desired.\r\n\r\nSo this is mostly cosmetic only. I plan to do further refactorings in the future, as I think our map interfaces simply suck right now. They are not intuitive and do not follow our coding guidelines. This here is a first step, but seeing that it may be controverse I wanted to put up a RFC first.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4411", "title": "Config parser cleanups", "body": "Two small cleanups to make code more readable in our config parser.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4374", "title": "Pack file verification", "body": "Warning: this is ugly and, at least to me, in many places it feels like I'm doing hacks over hacks to work around our object system. The main problem here is that we currently cannot parse objects which are not owned by the ODB system, because our objects point into the reference-counted memory of the ODB. So when I try to parse an object which is not owned by the ODB, then this will crash later on after `git_odb_object_deref`, as it tries to free objects which aren't owned by itself or not even part of the heap. So yeah, this doesn't look as nice as it could in an ideal world.\r\n\r\nOn the other hand, this seems to work just fine right now. After nearly a whole day of cursing and debugging I think I've finally got it right. So what do I do? This is mostly the implementation of `git index-pack --strict`, doing two things:\r\n\r\n1. check whether all objects of a pack can be parsed correctly\r\n2. check all references to other objects for commits, tags and trees\r\n\r\nWhat this gets us is that we can verify that a pack is complete (we've got all objects such that we can resolve the complete graph) when we receive the pack.\r\n\r\nI've discussed the design a bit in Slack with @carlosmn. My first thought was to just perform an object walk after fetching the complete pack file. But seeing that in most cases we're limited by network bandwidth while fetching the pack file, we agreed that it would be much nicer to just do as much of the heavy lifting as possible during retrieval of the pack. So the algorithm works as follows:\r\n\r\n1. for every non-deltified object passed to the indexer\r\n    * strike its object ID from `expected_oids`, which keeps track of OIDs we still expect to find as part of the pack file\r\n    * parse the object\r\n    * add object IDs referenced by the object to the `expected_oids`\r\n2. when resolving delta objects, do the same with regards to the `expected_oids` map\r\n3. afterwards, check that the `expected_oids` map has no entries anymore, as all object references should now be resolved correctly\r\n\r\nI'm just putting this up early to get early feedback from the CI and reviewers. I'm not happy with some of the things I had to do here, even though they work.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ethomson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/da9898aba0fe26ea683822e99853bfb2b02ac744", "message": "travis: fetch trusty dependencies from bintray\n\nThe trusty dependencies are now hosted on Bintray."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70db57d4a431dae2edcf19e92a84db8d6cf4f935", "message": "Merge pull request #4398 from pks-t/pks/generic-sha1\n\ncmake: allow explicitly choosing SHA1 backend"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4450", "title": "Streaming read support for the loose ODB backend", "body": "Change the streaming reader API a bit, to provide the type and length of the object when initializing the stream. This would be a breaking API change - except, of course, that nobody is actually using the streaming reader API since none of the backends support it. So I feel pretty good breaking this API that nobody could be using.\r\n\r\nAdd streaming reader support to the loose object ODB backend. I cleaned up a bit while I was in there to add some more tests for things like read_header which had no explicit tests (and in fact failed on some of the loose ODB test corpus), teach read_header how to cope with \"packlike loose objects\" (which were a weird loose object format that was attempted for a bit and will never actually be seen in the wild) and drop the odb_loose internal zstream abstraction layer that ultimately became git_zstream.\r\n\r\nNote that this depends on #4443.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4416", "title": "WIP: travis: fail on memory leaks", "body": "Pass `--error-exitcode=125` to valgrind so that it will exit with a non-zero exit code when it detects a memory leak.  Use an exit code of `125` to stay safely above any clar errors and safely below any shell errors.\r\n\r\n**Note**: I suspect that there are some tests that we'll need to either exclude from valgrind's examination, or perhaps not run at all.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bisho": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4470", "title": "Fix error handling of odb_object__alloc() in odb_read_1()", "body": "If `odb_object__alloc()` returns `NULL` (fails to allocate) it currently goes to `out`. If error is != 0 we will try to free raw.data, when raw couldn't be allocated. If error is 0, then we are silently swallowing the allocation error, and possibly causing access to a wrong `out` pointer. Let's return an error instead.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fcharlie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4463", "title": "Now vcpkg support build and install libgit2", "body": "https://github.com/Microsoft/vcpkg/tree/master/ports/libgit2", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "softwareplumber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4461", "title": "Textconv support (Issue #1328)", "body": "Here's an initial stab at providing textconv support.\r\n\r\nCaveat: It's about 20 years since I last wrote any C code.\r\n\r\nThere is a feature switch (a diff option GIT_DIFF_ENABLE_TEXTCONV), and some limited unit tests (tests/textconv). Much code is copied from the existing implementation of filter. Some code common to filter and textconv as been moved from filter.c to a new file file filter_textconv.c to keep the dependency graph relatively sane. \r\n\r\nNext step is to do some testing downstream (I'll be building this into a fork of gitlab). Plan to add more unit tests based on issues identified as I work on that.\r\n\r\nFigured the feature switch would make this a relatively benign experimental feature. My life would certainly be easier if this got merged into master early as any fixes to filter would be hard to merge.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techvoltage": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4459", "title": "Update callgit_remote_connect arguments", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hackhaslam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4448", "title": "Fix failure to fetch annotated tags added to existing commits", "body": "This is an attempt to fix #3870.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tiennou": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4446", "title": "Graft support", "body": "Depends on #4445. Sadly I can't open the PR against libgit2 *and* set that as the base branch, so do note that the first 2 commits come from that other PR.\r\n\r\nThis adds graft support to `git_repository` as a private API. The end goal is to be able to store and obey shallow roots when working with a shallow repository, but this is usable on its own.\r\n\r\nAs discussed on #4331, this is unrelated to the `git-replace` mechanism.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4445", "title": "DRY commit parsing", "body": "Splitted from #4331. See this PR for context.\r\n\r\nThis adds a \"quick\" mode to our commit parsing machinery, and makes the revwalk code instead of going with its own. The outcome is a nice, single place where grafts can be handled.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhchavez": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4433", "title": "libFuzzer: Add build support and instructions", "body": "This change adds support for building a fuzz target for exercising the\r\npackfile parser, as well as documentation. It also runs the fuzzers in\r\nTravis to avoid regressions.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cpoerschke": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4409", "title": "issue #3751 (Function to parse author and committer information from environment)", "body": "work-in-progress for issue #3751 (Function to parse author and committer information from environment)\r\n\r\n```\r\ncd build\r\ncmake --build . && ./libgit2_clar -v -srepo::init\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Etiene": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4407", "title": "merge: reload index before git_merge", "body": "When the index in memory diverges from the index in disk `git_merge`\r\naborts with `GIT_ECONFLICT`. More details about this are found in the \r\nissue #4203, which this PR attempts to fix.\r\n\r\nA further discussion is needed wether this behaviour is actually desired.\r\n(Suppose someone actually is writing something to the index in memory\r\nand a concurrent task is merging. A possible argument is that the index\r\nshould be written to disk then.)\r\n\r\nCloses #4203 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaborbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4405", "title": "add a more verbose mode to the test runner with better progress reporting", "body": "```bash\r\nLoaded 340 suites, with 2504 tests, starting\r\n\r\nattr::ignore [#1 with 18 tests]\r\n  honor_temporary_rules [#1] .\r\n  allow_root [#2] .\r\n  ignore_space [#3] .\r\n  ignore_root [#4] .\r\n  full_paths [#5] F\r\n  more_starstar_cases [#6] .\r\n  leading_stars [#7] .\r\n  globs_and_path_delimiters [#8] .\r\n  skip_gitignore_directory [#9] .\r\n  subdirectory_gitignore [#10] .\r\n  expand_tilde_to_homedir [#11] .\r\n  gitignore_in_subdir [#12] .\r\n  dont_ignore_files_for_folder [#13] .\r\n  symlink_to_outside [#14] S\r\n  test [#15] .\r\n  unignore_dir_succeeds [#16] .\r\n  case_insensitive_unignores_previous_rule [#17] .\r\n  case_sensitive_unignore_does_nothing [#18] .\r\n\r\n  1) Failure:\r\nattr::ignore::full_paths [C:\\Users\\berna\\git\\libgit2\\tests\\attr\\ignore.c:83]\r\n  expected != is_ignored\r\n  0 != 1\r\n\r\n\r\nran 18 [16 passed 1 skipped 1 failed] in 1 suits in 2.9370 seconds\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petersalomonsen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4400", "title": "Hacks to build with emscripten for running in a web browser", "body": "Introducing new build option:\r\n\r\nAPPLY_EMSCRIPTEN_HACKS\r\n\r\nwhich will apply necessary tweaks to run in a web browser. Also added emscripten_hacks folder with build script (build.sh) and instructions in README.md.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcarz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4389", "title": "implement NTLM authentication", "body": "This patch implements NTLMv2 session negotiation over HTTP. Git repositories served by Team Foundation Server are currently only accessible if IIS is configured for SPNEGO authentication, which isn't always the case. I excluded support for older LM/NTLM versions since they are strongly discouraged and unlikely to be used in the wild.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asandroq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4383", "title": "transports: Avoid walking over non-commit objects", "body": "References may point to objects that are not commits, such as tags to\r\nblobs. In that case the reference must not be walked over further.\r\n\r\nFixes #3595.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cjhoward92": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4380", "title": "examples: ls-files: add ls-files to list paths in the index", "body": "Added an example to mimic `git ls-files` using the libgit2 library. It also supports the `--error-unmatch` parameter to determine if the specified paths are in the index. This will hopefully be a useful example for new libgit2 users.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4378", "title": "submodule: check index for path and prefix before adding submodule", "body": "This is to fix an issue where libgit2 will allow you to add a submodule even if the path you are trying add is found on the index. In the CLI we get a nice error about this, but not in libgit2.\n\nI would obviously like some pointers on how to do this, as I do not think it is 100% correct. For one, when I add the trailing slash to the path, I feel like I could clean that up or have a better implementation. I am also unsure if there is a more streamlined routine to check the index for the path.\n\nSome advice on how I could clean this up would be awesome.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184", "body": "Merged back into the experimental branch. Thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246", "body": "Fixed in 585190183b47dc991605abcfbe3afb57220a0f29. git_person is no longer public, memory is dynamic and managed by the library, and there are getter methods in place.\n\nThanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559", "body": "Fixed in d80e9d55aa2d0629f7f207db42762494075d7854. Thanks as always for reporting -- and obviously, if you can cook a patch instead of opening an issue, that's even more awesome. Feel free to fork away!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177", "body": "Merged, thanks a lot. Can \"Any Day Now\" be asap? Just message me and I'll set up a repository for the bindings inside of libgit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196", "body": "Oh, Mr Pearce. The world is so small. ;d\n\nJust shout when you are clear to release, I'm looking forward to hacking on the Python bindings too. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077", "body": "I think that since 1795f87952a68155a618523799f70473483c7265 all public methods return a proper error code. Tell me if anything is missing.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561", "body": "Scott was kind enough to write a README.txt for us. We'll make sure to keep it up to date. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346", "body": "libgit2 hasn't built in Windows for a while, because I don't have a Windows box to try it on. ^^\n\nWe are working on that and it's pretty high on our TODO list: we have a new build system in the waf-build branch which now has support for building libgit2 as a shared library. I'll be testing that on Windows someday on the following week, expect an update.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769", "body": "Hey there! We've been working very hard on the Windows build, and it's almost there. So far MSVC 2010 and MinGW compile cleanly with our new build system. Can you give it a go and tell us if you find any issues?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830", "body": "...We've just migrated from Make to waf last night. Try updating your master branch and compiling again. Shared targets should be available in all platforms.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367", "body": "Hey, we have two new commits! The shared library now builds without errors on all platforms I've tried, and you can choose compiler version with the --msvc flag, and target platform with the --arch flag.\n\nTell me if you find any more issues!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374", "body": "Oh, and yes, that's the 'expected' procedure for installing the library dependencies under MSVC: either copy them to the VC folder, or in any other folder inside of your %%LIB%% environment variable.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213", "body": "Hey people, thanks for your interest.\n\nThis is indeed a very interesting idea, and is something we have certainly on our TODO list: what we plan on doing is decoupling the storage system from the object database logic, as to allow people to write custom drivers on their apps to use **anything** as the backend on their Git app... From in-memory storage, to Cassandra. How cool is that? I'll tell you: very cool.\n\n...however, it has to wait, because our main focus right now are network ops. So stay tuned.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452", "body": "Hey, couple questions while I get QT Builder to try this out: have you actually tested this on Windows? What compiler does it use on that platform, can you choose between MSVC and GCC? Also, it seems like this only builds a shared library. How can we go about a static one?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286", "body": "Just return `GIT_ENOMEM` here, malloc already sets the error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383", "body": "Yeah absolutely, I wrote this when we had the \"kill on out of memory\" malloc wrappers, so it doesn't check for ENOMEM or return error codes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345", "body": "Question: are you sure we have to return `buffer_end` and not the actual end pointer for this single entry?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004", "body": "That comparison. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005", "body": "Don't rethrow this. Do a new `GIT_EEXISTS` with a good error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507", "body": "Hey, I'm afraid this won't cut it in MSVC. We need to be C89-compilant there. Can you move all the declarations to the top? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477", "body": "Is this comment up to date? AFAIK we're implementing fnmatch from scratch now?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030", "body": "This is terrible. We cannot duplicate and free a whole buffer just to prevent a cast. If you are concerned about this cast, you'll have to update the entire hashing code so that the hashed data is constant -- that would be a nice thing to have. Without that, this is a no-go.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031", "body": "Internal methods should not have the `git` prefix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032", "body": "Doesn't this leak memory?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033", "body": "Same as the `index` issue. There's no way we can double the overhead of deflating writes by copying _every single byte_ back and forth on memory. Impossible -- and since the ZLib code cannot be rewritten to support const writes either, your best bet is to change the signature of the function so `source` is not constant, and work from there.\n\nThis is one of the hottest paths in the library atm (all object writes go through this loop), so act accordingly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "schacon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875", "body": "They are not in progress yet, I just had that there as a placeholder and forgot to remove it.  I would love your help in getting them started.  I can also create a repo under the libgit2 org and give your project a place there if you want.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749", "body": "that isn't in the index information, it is only determined by comparing the index data to the data in the HEAD commit and the files in the working directory.  getting some status type calls is in the todo list, but it might take a bit of time.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490", "body": "Thanks. I've started some Python bindings, which I'll push in a few days or so.\n\nI've been looking forward to this since your GitTogether Skype video talk :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184", "body": "For some definition of \"possible\", sure :)\n\nATM due to Google policy around open-source releasing I'm blocking on review from someone inside Google (who also happens to be Shawn Pearce).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234", "body": "That was quick! Much better, thanks.\n\nThere are still a few outstanding issues:\n-GIT_COMMIT_GETTER ignores the return code from git_commit__parse_full.\n-I haven't fully grokked the revwalk code, but I think git_revwalk_next should be able to distinguish between the various reasons a walk is finished (e.g. a parent was missing/corrupted vs. the actual end of a walk).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310", "body": "I've got approval to push my libgit2 bindings. I think the best solution is for it to live in the libgit2 namespace, which I can push to my fork of. My project name is pygit2 and, at Shawn's recommendation, it's licensed under the same GPL-with-exception license as libgit2. If you have a more creative name I wouldn't mind changing it, but I don't feel strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ctimmerm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199", "body": "I overlooked I had created an extra compiler warning in commit.c, fixed in the second commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436", "body": "I am not sure about windows library conventions, but I had to do this:\n\ncopy zlib125dll.zip/dllx64/zlibwapi.lib to C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib\\amd64\n\ncopy zlib125.zip/zlib-1.2.5/zlib.h and zlib125.zip/zlib-1.2.5/zconf.h\nto C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\n\n`waf build-shared` didn't work, it gives this error:\n     Waf: Entering directory `C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     [ 1/23] cshlib: build\\shared\\src\\blob.c.0.o build\\shared\\src\\commit.c.0.o build\\shared\\src\\delta-apply.c.0.o build\\shared\\src\\errors.c.0.o build\\shared\\src\\file\n     lock.c.0.o build\\shared\\src\\fileops.c.0.o build\\shared\\src\\hash.c.0.o build\\shared\\src\\hashtable.c.0.o build\\shared\\src\\index.c.0.o build\\shared\\src\\odb.c.0.o build\\shared\\src\\oid.c.0.o build\\shared\\src\\person.c.0.o build\\shared\\src\\repository.c.0.o build\\shared\\src\\revwalk.c.0.o build\\shared\\src\\tag.c.0.o  build\\shared\n     \\src\\thread-utils.c.0.o build\\shared\\src\\tree.c.0.o build\\shared\\src\\util.c.0.o build\\shared\\src\\win32\\dir.c.0.o build\\shared\\src\\win32\\fileops.c.0.o build\\shared\\src\\win32\\map.c.0.o build\\shared\\src\\block-sha1\\sha1.c.0.o -> build\\shared\\git2.dll build\\shared\\git2.lib build\\shared\\git2.dll.manifest\n     Waf: Leaving directory`C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     Build failed\n      -> missing file: 'C:\\Users\\hef\\projects\\libgit2\\build\\shared\\git2.lib'\nThe error appears to be accurate, I get a git2.dll but not a git2.lib\n\n`waf build-static` appears to work fine though.\nI haven't tested the resulting library yet.\n\nAlso, it appears that waf built a 64bit lib by default, is there a way to tell it to make a 32bit lib?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461", "body": "the build system doesn't use make,\ndoes running `waf build-shared` work for you?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301", "body": "mingw32 notes:\nw32-pthreads does not seem to get linked to properly if it is built statically, but seemed fine dynamically.  That is, libgit2 linked against w32-pthreads(static), but my application did not.\nzlib and libgit2 seem to build and link fine.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829", "body": "you need to add zlib.h (and zconf.h) from zlib-1.2.5 to your include path.\nI dumped them in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\INCLUDE.\n\nyou are also going to need zlibwapi.lib.  I put that in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\lib\nI believe you will need to keep the zlib.dll either in your %PATH% or in the same directory as your built executable for this to work.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841", "body": "Ah, I see. I misunderstood about what was stored in the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510", "body": "begin able to specify a qt subproject in a git submodule would be awesome.\n\naccording to http://doc.qt.nokia.com/4.7/qmake-variable-reference.html, you might be able to build a static lib with:\n\n```\n CONFIG += create_pri\n QMAKE_LFLAGS = staticlib\n```\n\nI did not test this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joefeser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849", "body": "I copied the dll per the read me file but never copied the .h files as you stated. I placed the zlib.h and zconf.h files in the include folder and a dll was created. Next to figure out if it is x86 or x64.\n\nYou may want to add the instructions for the two .h files to the readme.\n\nThanks for your help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rkh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977", "body": "I love the idea. Would be awesome to use for undo history in Redcar, for instance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "przemoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096", "body": "Other example, that maybe I shouldn't reveal yet. ;)\n\nFor a few years at least I have in my mind the idea of very useful application (as usual, implementation is not even started yet), that I even named already: SINAVE - sed inspired, nipped by awk visual editor. Name says pretty much (awk & sed users should predict how such tool would be useful), but from the beginning I thought that having git in the back is a must-have thing, because it would allow implementing the best undo/redo feature any editor ever had, because of possibility of having divergent branches all the time accessible from editor during work, for instance. You must already feel how awesome such tool could be.\n\nSorry for a bit off-topic.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "scorpion007": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618", "body": "Won't this get compiled out in release builds and break the program's behavior?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637", "body": "Assert is still ok, just perhaps needs to be done on a separate line. I.e. save the return value of snprintf and assert it on the next line. No sweat :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sakari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633", "body": "oh boy.. nice catch\n\nI would think so. That needs to be fixed. Maybe abort here some other way. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nulltoken": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323", "body": "Current signature of the method is <code>void git_cache_init(git_cache *cache, size_t size, git_cached_obj_freeptr free_ptr)</code>.\n\nFine with you if I change it to return an <code>int</code>?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425", "body": "It's now fixed\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525", "body": "Damn! You're right. Will force-push a fix. Thanks for having spotted this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "avidal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943", "body": "s/importart/important/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944", "body": "s/copmparison/comparison/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "tclem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296", "body": "I think you meant to do this: `str[i] = tolower(str[i]);`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jpfender": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996", "body": "Oops, this appears to be a duplication.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "schu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524", "body": "This must be repo2, no? Otherwise the test is segfaulting for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kiryl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034", "body": "Ok. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035", "body": "No, it doen't. Comment is not relevant (any more?).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036", "body": "This is a real bug! zlib can modify data pointed by ->next_in so you **cannot** just cast out the qualifier if you don't want to get SIGSEGV.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "4": {"medranocalvo": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482", "title": "Incorrect git_push_options's pb_parallelism documentation", "body": "The `pb_parallelism` field of the `git_push_options` structure is documented to default to 1 (meaning no parallelism), but it is actually initialized to 0 by default (meaning auto-detected parallelism).\r\n\r\n>  If the transport being used to push to the remote requires the creation of a pack file, this controls the number of worker threads used by the packbuilder when creating that pack file to be sent to the remote. If set to 0, the packbuilder will auto-detect the number of threads to create. **The default value is 1**.\r\n\r\n~~~\r\n#define GIT_PUSH_OPTIONS_INIT { GIT_PUSH_OPTIONS_VERSION, 0, GIT_REMOTE_CALLBACKS_INIT, GIT_PROXY_OPTIONS_INIT }\r\n~~~\r\n\r\nPlease, correct the documentation or the initial value.  In my case, the automatic parallelism was unexpected.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n0.26.0\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nukesor": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480", "title": "Unnecessary syscalls on bare repository", "body": "### Reproduction steps\r\nDiff any two commits on bare repository and observe behaviour with strace.\r\n\r\n### Expected behavior\r\nDon't query stat for files on a bare repository.\r\n\r\n### Actual behavior\r\nStat checked for every file in diff, if it's a bare repository.\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nMaster 782402c271d5467f9890af8e808af938a93bc55f\r\n\r\n### Operating system(s) tested\r\nArch Linux\r\n\r\nI just tried diffing with the current `master` libgit2 build. While the other bug with unnecessary syscalls for `.gitattributes` and `attributes` was fixed, there are still some `stat` calls for files, which shouldn't be necessary on a bare repository.\r\n\r\nI'm using pygit2 for my interaction with git repositories, but as far as I can see, this is actually a issue with libgit2.\r\n\r\nCurrent  output:\r\n```\r\n[pid 15375] access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"/tmp/gitalizer/phoemur/slackbuilds-1/info/attributes\", 0x7ffe5758e5f0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/README\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.SlackBuild\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/python-webencodings.info\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n[pid 15375] stat(\"python/python-webencodings/slack-desc\", 0x7ffe5758e7e0) = -1 ENOENT (No such file or directory)\r\n```\r\n\r\npygit2 issue:\r\nhttps://github.com/libgit2/pygit2/issues/764", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tyrielv": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479", "title": "Recursive merge uses parents of virtual commits instead of virtual commit itself when finding merge base", "body": "Recursive merge passes the parents of a virtual commit to git_merge_bases_many in place of the virtual commit. This produces a different result in some cases than git.exe.\r\n\r\n### Reproduction steps\r\nSee attached repo [bases.zip](https://github.com/libgit2/libgit2/files/1640783/bases.zip)\r\nCall git_merge_commits(), passing the commits for branchJ-1 and branchJ-2.\r\n\r\n### Expected behavior\r\nOne conflict, in version.txt\r\n\r\n### Actual behavior\r\nTwo conflicts, one in version.txt and one in targetfile.txt\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.26.0\r\n\r\n### Operating system(s) tested\r\nWindows 10\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Phrohdoh": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473", "title": "Request: Please consider publishing to conan.io", "body": "Hello, libgit2 team / community / maintainers!\r\n\r\n_Note: I am not affiliated with conan.io or JFrog in any way._\r\n\r\nI am not a C developer by any means (I'm quite positive I would lose all of my limbs in a matter of minutes with C) which goes to show that I am also quite clueless regarding dependency management but from what I understand C (and C++) mostly consist of copying headers and implementation files of dependencies in-tree.\r\n\r\nGiven the above it is quite difficult, in my limited experience, to stay up to date (or even track which version of a library you are using).\r\n\r\nIt is my belief that more projects and developers (myself included of course) could benefit from the work put into libgit2 if it were easier to depend on in a trackable way.\r\n\r\nThis is where my request for you all (and if you decide to and I can help please let me know how!) to consider publishing libgit2 releases to [conan.io](https://conan.io/index.html) which markets itself as \"Conan, the C / C++ Package Manager for Developers.\"\r\n\r\n[`conan`](http://docs.conan.io/en/latest/getting_started.html) use is driven by the [`conanfile.txt`](http://docs.conan.io/en/latest/reference/conanfile_txt.html) which allows downstream projects to declare dependencies which the conan tool will resolve and build as specified in the manifest.\r\n\r\nIf the overhead of management and setup of publishing to conan.io outweighs the benefits then please note so and close this.\r\n\r\nThank you for your time!\r\n\r\n**Edit**: Corrected a link.", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rankr": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469", "title": "Test failures", "body": "### Reproduction steps\r\nRun tests in bulid directory, with command \"ctest -V\"\r\n### Expected behavior\r\nno test fail\r\n### Actual behavior\r\nThe following tests FAILED:\r\n\t  1 - libgit2_clar (Failed)\r\nsome details:\r\n1:   2) Failure:\r\n1: diff::binary::delta [/Users/file4/libgit2-0.26.0/tests/diff/binary.c:53]\r\n1:   String mismatch: expected != actual.ptr\r\n### Version of libgit2 (release number or SHA1)\r\nlibgit2-0.26.0\r\n### Operating system(s) tested\r\nmacOS 10.13.2 (17C88)\r\n###some more info:\r\ncmake version 3.10.1\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlosmn": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465", "title": "Release v0.27.0 & v0.26.1", "body": "We're at that time again where we want to make a new release.\r\n\r\nFor the v0.27 series, codenamed \"Stadtrandsiedlung\"\r\n\r\n- [ ] Bump the versions in the headers\r\n- [ ] Make a release candidate\r\n- [ ] Plug any final leaks\r\n- [ ] Fix any last-minute issues\r\n- [ ] Make sure CHANGELOG reflects everything worth discussing\r\n- [ ] Update the version in CHANGELOG and the header\r\n- [ ] Produce a release candidate\r\n- [ ] Tag\r\n- [ ] Create maint/v0.27\r\n- [ ] Update any bindings the core team works with\r\n\r\nFor v0.26.1\r\n\r\n- [ ] Select the changes we want to backport\r\n- [ ] Update maint/v0.26\r\n- [ ] Tag", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/ecd55cec771d9c6f7ffffe80422a1decd4645c17", "message": "Merge pull request #4477 from pks-t/pks/memleaks\n\nMemory leaks"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f1323d9c161aeeada190fd9615a8b5a9fb8a7f3e", "message": "Merge pull request #4472 from libgit2/ethomson/libgit2deps_azure\n\ntravis: fetch trusty dependencies from Bintray"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6e748130e4f910b6f8c03a3f6f2e11c856d19ba7", "message": "travis: we use bintray's own key for signing\n\nThe VM on Travis apparently will still proceed, but it's good practice."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6d452600fa5c351670c9200e7c48f1da1191c5b8", "message": "cmake: use a FEATURE_SUMMARY call compatible with 3.0.2\n\nWhen we print features, we make an effort to support all the way back to\npre-3.0. However, in the code for versions from 3 onward we call\n`FEATURE_SUMMARY` with multiple kinds of elements to print in the same line.\nThis is only supported in CMake 3.1 and later, making the rather popular CMake\n3.0.2 unable to build the library.\n\nUse a single kind of element per invocation. This means we need to provide a\n\"description\" text, which CMake provides for us if provide multiple kinds of\nelements."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/a7e36d3d9c473647f141b24d398a98171744ceee", "message": "Merge pull request #4468 from libgit2/cmn/openssl-pc\n\nMake sure to include 'openssl' as a dep when building statically with SHA1DC"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b21c5408ff18eaf99029f59e738f6f614a53c90d", "message": "cmake: add openssl to the private deps list when it's the TLS implementation\n\nWe might want OpenSSL to be the implementation for SHA-1 and/or TLS. If we only\nwant it for TLS (e.g. we're building with the collision-detecting SHA-1\nimplementation) then we did not indicate this to the systems including us a\nstatic library.\n\nAdd OpenSSL to the list also during the TLS decision to make sure we say we\nshould link to it if we use it for TLS."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/b85548edb027474af3d107f9faa004cc09a1863a", "message": "cmake: treat LIBGIT2_PC_REQUIRES as a list\n\nIt is indeed a list of dependencies for those which include the static archive.\nThis is in preparation for adding two possible places where we might add openssl\nas a dependency."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/ddd36510b589f8dd39a9bfaaecfb9160dc943f42", "message": "Merge pull request #4467 from libgit2/cmn/static-archive-later\n\ncmake: move the rule to find static archives close to building clar"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/85e40bbf0938cac5668e810864f6be9619b9e60e", "message": "cmake: move the rule to find static archives close to building clar\n\nIf we're building static libraries, we want to use that for building our clar\nbinary. This is done in 49551254 (2017-09-22; cmake: use static dependencies\nwhen building static libgit2) but that commit included the rule too early,\nmaking it affect the search for iconv, meaning we did not find it when we were\nbuilding a static libgit2.\n\nMove the rule to just before building clar, after we've included the rules for\nbuilding the library itself. This lets us find and link to the dynamic libiconv."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4478", "title": "refs: include \" sorted \" in our packed-refs header", "body": "This lets git know that we do in fact have written our packed-refs file\r\nsorted (which is apparently not necessarily the case) and it can then use the\r\nnew-ish mmaped access which lets it avoid significant amounts of effort parsing\r\npotentially large files to get to a single piece of data.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4418", "title": "Re-enable the RC4 test", "body": "We disabled this test while dealing with a security issue. Enable it again and make the error handling in the OpenSSL stream let us return the actual error due to trying to talk to RC4.\r\n\r\n`GIT_ECERTIFICATE` is likely not _really_ the right thing to return here since it's not really about the certificate but about not supporting our cipherlist. We will likely want a specific error code for this (or we can overload this one, but TLS is confusing enough as it is).", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4396", "title": "config: specify how we match the regular expressions", "body": "We do it the same as git does: case-sensitively on the normalized form of the\r\nvariable name.\r\n\r\nWhile here also specify that we're case-sensitive on the values when handling\r\nthe values when setting or deleting multivars.\r\n\r\n---\r\n\r\n#4390 highlights this deficiency in the documentation.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119", "body": "This is actually a debug statement that sneaked in. I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464", "body": "This causes us to behave differently to `git.git` by allowing comments inside multi-line values. I'm not sure whether that's a good thing or not\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/15464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349", "body": "On Tue, Apr 26, 2011 at 03:33:49PM -0700, tclem wrote:\n\n> > -   str[input_sp - input] = '.';\n> >   +\n> > -   for (i = 0; i < 2; ++i) {\n> > -       quote = strrchr(str, '\"');\n> > -       memmove(quote, quote + 1, strlen(quote));\n> > -   }\n> >   +\n> > -   return GIT_SUCCESS;\n> >   +}\n> >   +\n> >   +void git__strntolower(char *str, int len)\n> >   +{\n> > -   int i;\n> >   +\n> > -   for (i = 0; i < len; ++i) {\n> > -       str[len] = tolower(str[len]);\n> \n> I think you meant to do this: `str[i] = tolower(str[i]);`\n\nYes I do. Thanks for catching this.\n\n## \n\nCarlos Mart\u00edn Nieto | http://cmartin.tk\n\n\"\u00bfC\u00f3mo voy a decir bobadas si soy mudo?\" -- CACHAI\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362", "body": "The way I understood it, buffer_end in this function points to the end of the specified entry, because the entry length is parsed in the caller\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492", "body": "No, it's not. I removed that at least once but I must have gotten confused with all the rebasing I was doing\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "stanhu": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460", "title": "High number of `stat` calls for `gitattributes` files", "body": "I've noticed that libgit2 makes a high number of `stat` calls to `gitattributes` files, which significantly impacts networked file systems.\r\n\r\n### Reproduction steps\r\n\r\nWith the Linux repo (https://github.com/torvalds/linux.git), I created this Rugged script:\r\n\r\n```ruby\r\nrequire 'rugged'\r\n\r\nrepo = Rugged::Repository.new('.')\r\n\r\ncommit_object = repo.rev_parse('master')\r\noriginal_oid = repo.rev_parse('979e1f08042b83152dfe3d76df10db31eb7edf98')\r\ndiff_commits = commit_object.parents[0].diff(original_oid)\r\n\r\nputs diff_commits.stat\r\n```\r\n\r\nThe result is 30,497 files changed with 753,086 additions and 1,345,193 deletions. Now if I run `strace` on this, I see there are 457,782 hits with `gitattributes`:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/diff-linux.txt -s 1024 ruby diff.rb                                                                                                     \r\n30497\r\n753086\r\n1345193\r\n$ grep gitattributes /tmp/diff-linux.txt | wc -l\r\n457782\r\n```\r\n\r\nLooking at it in more detail, I see that we are often duplicating the same lookup:\r\n\r\n```sh\r\n07:38:38.120824 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.120852 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.120881 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.120949 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121019 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.121270 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121301 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121329 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.121356 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.121390 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.121742 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:38:38.121805 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122075 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122105 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122133 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122161 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.122189 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122249 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122305 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000013>\r\n07:38:38.122602 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.122631 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122659 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122686 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000009>\r\n07:38:38.122715 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122816 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.122874 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123136 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123164 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123192 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123219 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123247 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123309 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123365 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.123628 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000009>\r\n07:38:38.123656 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.123688 stat(\"/home/stanhu/linux/Documentation/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123729 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000011>\r\n07:38:38.123767 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:38:38.123919 access(\"/etc/gitattributes\", F_OK) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:38:38.123983 stat(\"/home/stanhu/linux/.gitattributes\", {st_mode=S_IFREG|0664, st_size=30, ...}) = 0 <0.000010>\r\n07:38:38.124245 stat(\"/home/stanhu/linux/Documentation/ABI/testing/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n07:38:38.124273 stat(\"/home/stanhu/linux/Documentation/ABI/.gitattributes\", 0x7ffe261fe130) = -1 ENOENT (No such file or directory) <0.000010>\r\n```\r\n\r\n### Expected behavior\r\n\r\nIf I compare this with the `git` call, I \"only\" see 7,951 hits:\r\n\r\n```sh\r\n$ strace -tt -T -o /tmp/git-compare.txt -s 1024 git diff 979e1f08042b83152dfe3d76df10db31eb7edf98..master > /dev/null\r\n$ grep gitattributes /tmp/git-compare.txt | wc -l\r\n7951\r\n```\r\n\r\nThe actual hits look a lot more sensible:\r\n\r\n```\r\n07:42:52.269330 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.269446 open(\".gitattributes\", O_RDONLY) = 4 <0.000014>\r\n07:42:52.270123 open(\"/etc/gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.270203 open(\".gitattributes\", O_RDONLY) = 4 <0.000028>\r\n07:42:52.274058 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.274105 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.274143 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274604 open(\"Documentation/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.274646 open(\"Documentation/ABI/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.274682 open(\"Documentation/ABI/obsolete/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.275014 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000017>\r\n07:42:52.275347 open(\"Documentation/ABI/stable/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.276283 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.276479 open(\"Documentation/ABI/testing/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289449 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.289506 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000012>\r\n07:42:52.289545 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.289900 open(\"Documentation/RCU/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000023>\r\n07:42:52.289962 open(\"Documentation/RCU/Design/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290002 open(\"Documentation/RCU/Design/Expedited-Grace-Periods/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000011>\r\n07:42:52.290237 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000013>\r\n07:42:52.290604 open(\"Documentation/RCU/Design/Memory-Ordering/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000014>\r\n07:42:52.310600 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000016>\r\n07:42:52.313085 open(\"Documentation/RCU/Design/Requirements/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n07:42:52.320641 open(\"Documentation/acpi/.gitattributes\", O_RDONLY) = -1 ENOENT (No such file or directory) <0.000024>\r\n```\r\n\r\n### Actual behavior\r\n\r\nExcessive number of `stat` calls for `gitattributes`\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\nRugged 0.26.0 \r\n\r\n### Operating system(s) tested\r\n\r\nUbuntu Linux 16.04\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TomGle123": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458", "title": "Missing support for 'subtree' merge strategy", "body": "Using LibGit2Sharp I noticed there was no support for merge strategies other than 'Standard' and 'Octopus'.  I was looking to use the 'Subtree' strategy ([docs](https://git-scm.com/docs/merge-strategies#merge-strategies-subtree)).  I'd like to add support for this merge strategy in LibGit2Sharp but it is also missing from LibGit2, and I only program C#.\r\n\r\nMaybe there are technical reasons why this feature is not implemented, but if not, it would be a useful addition for me, allowing me to write tooling in C# based around the 'subtree' merge strategy.\r\n\r\nReported against master commit 'd621024'.\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fuhao92": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454", "title": "hello, I use git_index_add_bypath(), to add about 500M zip file, but it return out of memoryOperator failed?", "body": "You are opening a _bug report_ against the libgit2 project.  If you have a\r\nquestion about an API or usage, please ask on StackOverflow:\r\nhttp://stackoverflow.com/questions/tagged/libgit2.  Please fill out the\r\nreproduction steps (below) and delete this introductory paragraph.  Thanks!\r\n\r\n### Reproduction steps\r\n\r\n### Expected behavior\r\n\r\n### Actual behavior\r\n\r\n### Version of libgit2 (release number or SHA1)\r\n\r\n### Operating system(s) tested\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aw32": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452", "title": "SSH: Pass hostkey to certificate check callback", "body": "Feature request:\r\nThere is the certificate check callback for remote connections.\r\nFor the SSH certificate check `git_cert_hostkey` can only contain the MD5 and/or SHA1 hash of the hostkey as passed from libssh2. Since MD5 and SHA1 are not considered trustable anymore, it would be nice to receive the actual hostkey as returned by libssh2.\r\nWould you consider this reasonable enough to accept a pull request?", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandonio21": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441", "title": "git_diff_hunk documentation has one-off field descriptions", "body": "The documentation for `git_diff_hunk` has descriptions that are for the wrong fields. (Documentation found https://libgit2.github.com/libgit2/#HEAD/type/git_diff_hunk)\r\n\r\n# Actual:\r\n```\r\nint | old_start\r\n\r\nint | old_lines: Starting line number in old_file\r\n\r\nint | new_start: Number of lines in old_file\r\n\r\nint | new_lines: Starting line number in new_file\r\n\r\nsize_t | header_len: Number of lines in new_file\r\n\r\nchar [128] | header: Number of bytes in header text\r\n```\r\n\r\n# Expected:\r\n```\r\nint | old_start: Starting line number in old_file\r\n\r\nint | old_lines: Number of lines in old_file\r\n\r\nint | new_start: Starting line number in new_file\r\n\r\nint | new_lines: Number of lines in new_file\r\n\r\nsize_t | header_len: Number of bytes in header text\r\n\r\nchar [128] | header: Header text, NUL-byte terminated\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rgburke": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428", "title": "git_revwalk_next is slow on first iteration since v0.25", "body": "git_revwalk_next is slow on its first iteration for versions 0.25, 0.26 and master when compared to v0.24. This is especially noticeable on large repositories.\r\n\r\n### Reproduction steps\r\nRun the following program on the Linux kernel source tree (https://github.com/torvalds/linux):\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <git2.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n        git_libgit2_init();\r\n\r\n        git_repository *repo;\r\n        if (git_repository_open(&repo, \".git\")) {\r\n                fprintf(stderr, \"Failed to open repository\\n\");\r\n                return 1;\r\n        }\r\n\r\n        git_oid oid;\r\n        git_oid_fromstr(&oid, \"a0651c7fa2c088a605f63792279859608ed7f2c8\");\r\n\r\n        git_revwalk *revwalk;\r\n        git_revwalk_new(&revwalk, repo);\r\n        git_revwalk_sorting(revwalk, GIT_SORT_TIME);\r\n        git_revwalk_push(revwalk, &oid);\r\n\r\n        if (!git_revwalk_next(&oid, revwalk)) {\r\n                git_commit *commit;\r\n\r\n                if (git_commit_lookup(&commit, repo, &oid)) {\r\n                        fprintf(stderr, \"Failed to lookup commit\\n\");\r\n                        return 1;\r\n                }\r\n\r\n                printf(\"%s\\n\", git_commit_message(commit));\r\n                git_commit_free(commit);\r\n        }\r\n\r\n        git_revwalk_free(revwalk);\r\n        git_repository_free(repo);\r\n\r\n        return 0;\r\n}\r\n```\r\n\r\n### Expected behavior\r\nWhen using v0.24 this program runs in a couple of milliseconds:\r\n```\r\nrichard@DevNew:~/code/linux$ time ./revwalktest >/dev/null\r\n\r\nreal\t0m0.006s\r\nuser\t0m0.000s\r\nsys\t0m0.006s\r\n```\r\n\r\n### Actual behavior\r\nWhen using v0.25, v0.26 or master this program has not completed after 1 minute:\r\n```\r\nrichard@DevNew:~/code/linux$ timeout 60s ./revwalktest\r\nrichard@DevNew:~/code/linux$ echo $?\r\n124\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nv0.25, v0.26 & master\r\n\r\n### Operating system(s) tested\r\n```\r\nLinux DevNew 4.13.0-17-generic #20-Ubuntu SMP Mon Nov 6 10:04:08 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ColMelvin": {"issues": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425", "title": "git_index_add_frombuffer creates 0160000 mode objects as blobs", "body": "The `git_index_add_frombuffer` function accepts the commit mode, `0160000`, when creating a new entry from a buffer.  However, it creates the commit mode entry as a blob.  Since a blob object and a commit object with the exact same data will have a different SHA-1 checksum, this behavior may lead to unexpected results.\r\n\r\nNotably, `git_index_add_frombuffer` will return an error when the tree mode, `040000`, is provided for the mode.  I think the same should happen for `0160000`.\r\n\r\n### Reproduction steps\r\nThe reproduction code below uses a modified version of Perl's Git::Raw v0.74, available at https://github.com/jacquesg/p5-Git-Raw/pull/191.  This modification will hopefully be included in v0.75.\r\n\r\n```perl\r\n#!/usr/bin/perl\r\n\r\nuse strict;\r\nuse warnings;\r\n\r\nuse File::Temp;\r\nuse Git::Raw;\r\nuse Test::More tests => 3;\r\n\r\nmy $dir   = File::Temp->newdir();\r\nmy $repo  = Git::Raw::Repository->init( $dir->dirname, 1 );\r\nmy $index = $repo->index;\r\n\r\nmy $COMMIT_DATA = \"tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\\x0aauthor A U Thor <author\\@example.com> 1234567890 +0000\\x0acommitter C O Mitter <committer\\@example.com> 1234567890 +0000\\x0a\\x0aEmpty\\x0a\";\r\nmy $COMMIT_SHA  = '746262f5c8ed0115432581c2bcf8f08c77ae76c8';\r\n\r\n$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );\r\nmy $tree = $index->write_tree;\r\n\r\nmy ($entry) = $tree->entries;\r\nis $entry->file_mode,  0160000;               # Passes\r\nisa_ok $entry->object, 'Git::Raw::Commit';    # Fails\r\nis $entry->object->id, $COMMIT_SHA;           # Fails\r\n\r\nexit;\r\n\r\n# Sanity check proving actual commit value\r\nmy $hash = qx{cd '$dir'; echo -n '$COMMIT_DATA' | git hash-object -t commit --stdin};\r\nchomp $hash;\r\nis $hash, $COMMIT_SHA;                        # Passes\r\n```\r\n\r\n### Expected behavior\r\n\r\nEither:\r\n- all tests pass, or\r\n- script dies at `$index->add_frombuffer( 'submodule', $COMMIT_DATA, 0160000 );` with 'invalid filemode'\r\n\r\n### Actual behavior\r\n\r\nScript runs to completion; 2nd & 3rd tests fail.\r\n\r\n```\r\n1..3\r\nok 1\r\nnot ok 2 - An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit'\r\n#   Failed test 'An object of class 'Git::Raw::Blob' isa 'Git::Raw::Commit''\r\n#   at proof line 22.\r\n#     The object of class 'Git::Raw::Blob' isn't a 'Git::Raw::Commit'\r\nnot ok 3\r\n#   Failed test at proof line 23.\r\n#          got: 'f8aabe3d076ed2278a652ba6d76ea152148daa3c'\r\n#     expected: '746262f5c8ed0115432581c2bcf8f08c77ae76c8'\r\n# Looks like you failed 2 tests of 3.\r\n```\r\n\r\n### Version of libgit2 (release number or SHA1)\r\nTested Git::Raw v0.74 (ee89941fa2 of libgit2, per Changes file).\r\n\r\nInspection of the code suggests the issue remains (as of 364184acca0d993deaeb060197b595f7c49ea226)\r\n\r\n### Operating system(s) tested\r\nLinux 3.10.0-514.26.2.el7.x86_64\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/4425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianmario": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/4893a9c01c8da084eb995178f80d0d453109056e", "message": "Merge pull request #4451 from libgit2/charliesome/trailer-info\n\nImplement message trailer parsing API"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d4a3a4b5383fefcb397524340af05118b4687f29", "message": "rename find_trailer to extract_trailer_block"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/3e5239e42a529e99dc584ce37402856a4da26cec", "message": "update code docs"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1e758fd3154eef0bf1237fb20b2180ad08cfe28d", "message": "just use git_message_trailer in tests"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6062032e452afea451901333089da834edbe2078", "message": "try and fix windows build"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/d43974fb5cbfda6ec28fc92b83d03db0af73748b", "message": "Change trailer API to return a simple array"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5734768b9edaecedaa7b13fed2ce59cb588df7e8", "message": "Merge remote-tracking branch 'origin/master' into charliesome/trailer-info"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f4f0e7eb0f8280ed6100c37c3af0aa66c31a8f9e", "message": "switch back to braced array initializers"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/f315cd1470e21dee0dc48cc6b53ffbd30122c917", "message": "make separators const a macro as well"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/fb29ba0953ef52ce94aecd93b9b4a3bcc64cf07c", "message": "remove empty lines between @-lines"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/1cda43ba34b40b82ff6470799d36e54a176aaad5", "message": "make comment_line_char const a macro"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/6bc7301e8ab6194179423b95a481942e2fa11329", "message": "Don't use newer C syntax for declaration in tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759", "body": "should this be checking r (if the strdup succeeded) instead of s?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266", "body": "Sweet thanks dude!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/276266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pks-t": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/782402c271d5467f9890af8e808af938a93bc55f", "message": "tests: refs::iterator: fix memory leak due to ref names not being free'd\n\nThe test refs::iterator::foreach_name iterates through every reference\nand copies its name into a local vector. While the test makes sure to\nfree the vector afterwards, the copied reference names are not being\nfree'd. Fix that."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/5963292f9ebc8b06ad307e2ed10eec845424e74e", "message": "refs: document need to free refs in foreach-callback\n\nReferences passed to the callback function of `git_reference_foreach`\nare expected to be owned by the callback. As such, they are never being\nfreed by `git_reference_foreach`, but will have to be freed by the\ncaller. This small detail is never mentioned in the function's\ndocumentation, though, making it easy to get wrong. Document this to\nmake it discoverable."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/90f81f9fdc6d87c4ca75e4f065e1eb4818c99674", "message": "transports: local: fix memory leak in reference walk\n\nUpon downloading the pack file, the local transport will iterate through\nevery reference using `git_reference_foreach`. The function is a bit\ntricky though in that it requires the passed callback to free the\nreferences, which does not currently happen.\n\nFix the memory leak by freeing all passed references in the callback."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/093e671ee8fb824e3e40677ed7440dba72483fe1", "message": "tests: network::fetchlocal: let cleanup function handle sandbox cleanup\n\nTwo tests in network::fetchlocal explicitly set a cleanup function to\nfree and remove the created sandbox repositories. This is not necessary,\nthough, as the cleanup function executed after each test already takes\ncare of cleaning up after them. Remove the code to avoid needless code\nduplication."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/0b967396033b059d683bdecec85c2838c428a74e", "message": "Merge pull request #4471 from libgit2/cmn/cmake-feature-302\n\ncmake: use a FEATURE_SUMMARY call compatible with 3.0.2"}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70aa61460a4f33509aa06ed86ac3becc243ee5d6", "message": "cmake: allow explicitly choosing SHA1 backend\n\nRight now, if SHA1DC is disabled, the SHA1 backend is mostly chosen\nbased on which system libgit2 is being compiled on and which libraries\nhave been found. To give developers and distributions more choice,\nenable them to request specific backends by passing in a\n`-DSHA1_BACKEND=<BACKEND>` option instead. This completely replaces the\nprevious auto-selection."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/e7495ce6f4dee156b6a1d48a4d478c83d1053236", "message": "cmake: default to using SHA1DC\n\nUpstream git.git has changed their default SHA1 implementation to the\ncollision-detection algorithm SHA1DC in commit e6b07da27 (Makefile: make\nDC_SHA1 the default, 2017-03-17). To match upstream, align ourselves and\nswitch over to SHA1DC by default."}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4481", "title": "tests: online::clone: fix memory leak due to not freeing URL", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4476", "title": "scripts: add backporting script", "body": "This adds a simple script for backporting pull requests to older\r\nbranches. It accepts as parameters a list of pull request numbers which\r\nwhose commits are to be cherry-picked. The identification of PRs\r\ncurrently happens by using the commit message of the merge of the PR,\r\nwhich should conform to the message \"Merge pull request #<PR>\".\r\n\r\nWhile the heuristic works in practice, we could instead also use the\r\ndirect references from GitHub via \"pull/#<PR>/head\". This requires the\r\nuser to have all these references fetched, though, so we can just use\r\nthe current heuristic until we experience any issues with that.\r\n\r\n---\r\n\r\nDunno if we want this. I've used this script to create #4475, and I think a bit of automation is nice to have.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4475", "title": "v0.26.1 backports", "body": "Proposed backports for v0.26.1. This includes all PRs that I've currently marked with the \"backport\" label:\r\n\r\n- #4045\r\n- #4455\r\n- #4447\r\n- #4444\r\n- #4437\r\n- #4435\r\n- #4432\r\n- #4431\r\n- #4427\r\n- #4426\r\n- #4424\r\n- #4423\r\n- #4408\r\n- #4386\r\n- #4369\r\n- #4368\r\n- #4367\r\n- #4364\r\n- #4359\r\n- #4357\r\n- #4344\r\n- #4326\r\n- #4306\r\n- #4296\r\n- #4280\r\n- #4273\r\n\r\nI've initially included #4277 as well, but that code was only merged after v0.26.0 in #4202.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4474", "title": "Special-casing null OIDs", "body": "I've been triggered by the not-so-recent discussion in upstream git.git around null OIDs (see [1]) to implement some defensive mechanisms about ever reading or writing null OIDs either via the ODB layer or into trees. For the ODB part, I now reject writing and shorcut reading null OIDs while for trees I've only implemented the rejection on inserting entries into the treebuilder. So I've not changed the reading part for our trees.\r\n\r\n[1]: https://marc.info/?l=git&m=151120958313567&w=2", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4438", "title": "Multiple hash algorithms", "body": "A first step towards an abstraction for the use of multiple of hash algorithms. It lays the groundwork for having `git_hash_ctx` dispatch to different hash algorithms based on which one is being requested. Next steps:\r\n\r\n- extend `git_repository` by a `git_hash_algorithm` field\r\n- implement required new algorithms\r\n- extend `git_hash_init` and `git_hash_ctx_init` to accept an algorithm which is then used for hashing by that particular context only\r\n- extend OIDs to be a union of all possible hashes\r\n- scavenge through the tree and adjust all callers. In most cases we'd want to retain SHA1 (e.g. pack trailers, patch IDs, filebuffers), for others we'd simply use whatever the repository format states", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4436", "title": "pack: rename `git_packfile_stream_free`", "body": "The function `git_packfile_stream_free` frees all state of the packfile\r\nstream without freeing the structure itself. Thus, the function is\r\nmisnamed, as we usually call such a function a \"clear\" function. Rename\r\nit to make clear that in fact it does not free the structure.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4417", "title": "[RFC] Khash refactorings (pt. 2)", "body": "Another round of khash fixes. While my first round of fixes only touched our own abstractions (git_oidmap, git_strmap, git_idxmap and git_offmap), this PR revamps the complete khash implementation. I've been too fed up with digging into those awful macros, so I decided to take the bait and decided to refactor that part.\r\n\r\nSo what I did is to make the khash implementation itself non-generic. Instead of having a macro to create per-type map structs, we now have a single map which has a void pointer only. This relieves us of all those macro magic, but possibliy at the cost of performance. I haven't measured that yet, but will do so if desired.\r\n\r\nSo this is mostly cosmetic only. I plan to do further refactorings in the future, as I think our map interfaces simply suck right now. They are not intuitive and do not follow our coding guidelines. This here is a first step, but seeing that it may be controverse I wanted to put up a RFC first.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4411", "title": "Config parser cleanups", "body": "Two small cleanups to make code more readable in our config parser.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4374", "title": "Pack file verification", "body": "Warning: this is ugly and, at least to me, in many places it feels like I'm doing hacks over hacks to work around our object system. The main problem here is that we currently cannot parse objects which are not owned by the ODB system, because our objects point into the reference-counted memory of the ODB. So when I try to parse an object which is not owned by the ODB, then this will crash later on after `git_odb_object_deref`, as it tries to free objects which aren't owned by itself or not even part of the heap. So yeah, this doesn't look as nice as it could in an ideal world.\r\n\r\nOn the other hand, this seems to work just fine right now. After nearly a whole day of cursing and debugging I think I've finally got it right. So what do I do? This is mostly the implementation of `git index-pack --strict`, doing two things:\r\n\r\n1. check whether all objects of a pack can be parsed correctly\r\n2. check all references to other objects for commits, tags and trees\r\n\r\nWhat this gets us is that we can verify that a pack is complete (we've got all objects such that we can resolve the complete graph) when we receive the pack.\r\n\r\nI've discussed the design a bit in Slack with @carlosmn. My first thought was to just perform an object walk after fetching the complete pack file. But seeing that in most cases we're limited by network bandwidth while fetching the pack file, we agreed that it would be much nicer to just do as much of the heavy lifting as possible during retrieval of the pack. So the algorithm works as follows:\r\n\r\n1. for every non-deltified object passed to the indexer\r\n    * strike its object ID from `expected_oids`, which keeps track of OIDs we still expect to find as part of the pack file\r\n    * parse the object\r\n    * add object IDs referenced by the object to the `expected_oids`\r\n2. when resolving delta objects, do the same with regards to the `expected_oids` map\r\n3. afterwards, check that the `expected_oids` map has no entries anymore, as all object references should now be resolved correctly\r\n\r\nI'm just putting this up early to get early feedback from the CI and reviewers. I'm not happy with some of the things I had to do here, even though they work.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ethomson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/libgit2/libgit2/commits/da9898aba0fe26ea683822e99853bfb2b02ac744", "message": "travis: fetch trusty dependencies from bintray\n\nThe trusty dependencies are now hosted on Bintray."}, {"url": "https://api.github.com/repos/libgit2/libgit2/commits/70db57d4a431dae2edcf19e92a84db8d6cf4f935", "message": "Merge pull request #4398 from pks-t/pks/generic-sha1\n\ncmake: allow explicitly choosing SHA1 backend"}], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4450", "title": "Streaming read support for the loose ODB backend", "body": "Change the streaming reader API a bit, to provide the type and length of the object when initializing the stream. This would be a breaking API change - except, of course, that nobody is actually using the streaming reader API since none of the backends support it. So I feel pretty good breaking this API that nobody could be using.\r\n\r\nAdd streaming reader support to the loose object ODB backend. I cleaned up a bit while I was in there to add some more tests for things like read_header which had no explicit tests (and in fact failed on some of the loose ODB test corpus), teach read_header how to cope with \"packlike loose objects\" (which were a weird loose object format that was attempted for a bit and will never actually be seen in the wild) and drop the odb_loose internal zstream abstraction layer that ultimately became git_zstream.\r\n\r\nNote that this depends on #4443.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4416", "title": "WIP: travis: fail on memory leaks", "body": "Pass `--error-exitcode=125` to valgrind so that it will exit with a non-zero exit code when it detects a memory leak.  Use an exit code of `125` to stay safely above any clar errors and safely below any shell errors.\r\n\r\n**Note**: I suspect that there are some tests that we'll need to either exclude from valgrind's examination, or perhaps not run at all.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bisho": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4470", "title": "Fix error handling of odb_object__alloc() in odb_read_1()", "body": "If `odb_object__alloc()` returns `NULL` (fails to allocate) it currently goes to `out`. If error is != 0 we will try to free raw.data, when raw couldn't be allocated. If error is 0, then we are silently swallowing the allocation error, and possibly causing access to a wrong `out` pointer. Let's return an error instead.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fcharlie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4463", "title": "Now vcpkg support build and install libgit2", "body": "https://github.com/Microsoft/vcpkg/tree/master/ports/libgit2", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "softwareplumber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4461", "title": "Textconv support (Issue #1328)", "body": "Here's an initial stab at providing textconv support.\r\n\r\nCaveat: It's about 20 years since I last wrote any C code.\r\n\r\nThere is a feature switch (a diff option GIT_DIFF_ENABLE_TEXTCONV), and some limited unit tests (tests/textconv). Much code is copied from the existing implementation of filter. Some code common to filter and textconv as been moved from filter.c to a new file file filter_textconv.c to keep the dependency graph relatively sane. \r\n\r\nNext step is to do some testing downstream (I'll be building this into a fork of gitlab). Plan to add more unit tests based on issues identified as I work on that.\r\n\r\nFigured the feature switch would make this a relatively benign experimental feature. My life would certainly be easier if this got merged into master early as any fixes to filter would be hard to merge.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techvoltage": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4459", "title": "Update callgit_remote_connect arguments", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hackhaslam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4448", "title": "Fix failure to fetch annotated tags added to existing commits", "body": "This is an attempt to fix #3870.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tiennou": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4446", "title": "Graft support", "body": "Depends on #4445. Sadly I can't open the PR against libgit2 *and* set that as the base branch, so do note that the first 2 commits come from that other PR.\r\n\r\nThis adds graft support to `git_repository` as a private API. The end goal is to be able to store and obey shallow roots when working with a shallow repository, but this is usable on its own.\r\n\r\nAs discussed on #4331, this is unrelated to the `git-replace` mechanism.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4445", "title": "DRY commit parsing", "body": "Splitted from #4331. See this PR for context.\r\n\r\nThis adds a \"quick\" mode to our commit parsing machinery, and makes the revwalk code instead of going with its own. The outcome is a nice, single place where grafts can be handled.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhchavez": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4433", "title": "libFuzzer: Add build support and instructions", "body": "This change adds support for building a fuzz target for exercising the\r\npackfile parser, as well as documentation. It also runs the fuzzers in\r\nTravis to avoid regressions.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cpoerschke": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4409", "title": "issue #3751 (Function to parse author and committer information from environment)", "body": "work-in-progress for issue #3751 (Function to parse author and committer information from environment)\r\n\r\n```\r\ncd build\r\ncmake --build . && ./libgit2_clar -v -srepo::init\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Etiene": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4407", "title": "merge: reload index before git_merge", "body": "When the index in memory diverges from the index in disk `git_merge`\r\naborts with `GIT_ECONFLICT`. More details about this are found in the \r\nissue #4203, which this PR attempts to fix.\r\n\r\nA further discussion is needed wether this behaviour is actually desired.\r\n(Suppose someone actually is writing something to the index in memory\r\nand a concurrent task is merging. A possible argument is that the index\r\nshould be written to disk then.)\r\n\r\nCloses #4203 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaborbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4405", "title": "add a more verbose mode to the test runner with better progress reporting", "body": "```bash\r\nLoaded 340 suites, with 2504 tests, starting\r\n\r\nattr::ignore [#1 with 18 tests]\r\n  honor_temporary_rules [#1] .\r\n  allow_root [#2] .\r\n  ignore_space [#3] .\r\n  ignore_root [#4] .\r\n  full_paths [#5] F\r\n  more_starstar_cases [#6] .\r\n  leading_stars [#7] .\r\n  globs_and_path_delimiters [#8] .\r\n  skip_gitignore_directory [#9] .\r\n  subdirectory_gitignore [#10] .\r\n  expand_tilde_to_homedir [#11] .\r\n  gitignore_in_subdir [#12] .\r\n  dont_ignore_files_for_folder [#13] .\r\n  symlink_to_outside [#14] S\r\n  test [#15] .\r\n  unignore_dir_succeeds [#16] .\r\n  case_insensitive_unignores_previous_rule [#17] .\r\n  case_sensitive_unignore_does_nothing [#18] .\r\n\r\n  1) Failure:\r\nattr::ignore::full_paths [C:\\Users\\berna\\git\\libgit2\\tests\\attr\\ignore.c:83]\r\n  expected != is_ignored\r\n  0 != 1\r\n\r\n\r\nran 18 [16 passed 1 skipped 1 failed] in 1 suits in 2.9370 seconds\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "petersalomonsen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4400", "title": "Hacks to build with emscripten for running in a web browser", "body": "Introducing new build option:\r\n\r\nAPPLY_EMSCRIPTEN_HACKS\r\n\r\nwhich will apply necessary tweaks to run in a web browser. Also added emscripten_hacks folder with build script (build.sh) and instructions in README.md.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcarz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4389", "title": "implement NTLM authentication", "body": "This patch implements NTLMv2 session negotiation over HTTP. Git repositories served by Team Foundation Server are currently only accessible if IIS is configured for SPNEGO authentication, which isn't always the case. I excluded support for older LM/NTLM versions since they are strongly discouraged and unlikely to be used in the wild.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asandroq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4383", "title": "transports: Avoid walking over non-commit objects", "body": "References may point to objects that are not commits, such as tags to\r\nblobs. In that case the reference must not be walked over further.\r\n\r\nFixes #3595.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cjhoward92": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4380", "title": "examples: ls-files: add ls-files to list paths in the index", "body": "Added an example to mimic `git ls-files` using the libgit2 library. It also supports the `--error-unmatch` parameter to determine if the specified paths are in the index. This will hopefully be a useful example for new libgit2 users.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/4378", "title": "submodule: check index for path and prefix before adding submodule", "body": "This is to fix an issue where libgit2 will allow you to add a submodule even if the path you are trying add is found on the index. In the CLI we get a nice error about this, but not in libgit2.\n\nI would obviously like some pointers on how to do this, as I do not think it is 100% correct. For one, when I add the trailing slash to the path, I feel like I could clean that up or have a better implementation. I am also unsure if there is a more streamlined routine to check the index for the path.\n\nSome advice on how I could clean this up would be awesome.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184", "body": "Merged back into the experimental branch. Thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/495184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246", "body": "Fixed in 585190183b47dc991605abcfbe3afb57220a0f29. git_person is no longer public, memory is dynamic and managed by the library, and there are getter methods in place.\n\nThanks for reporting.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/498246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559", "body": "Fixed in d80e9d55aa2d0629f7f207db42762494075d7854. Thanks as always for reporting -- and obviously, if you can cook a patch instead of opening an issue, that's even more awesome. Feel free to fork away!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/505559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177", "body": "Merged, thanks a lot. Can \"Any Day Now\" be asap? Just message me and I'll set up a repository for the bindings inside of libgit2.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196", "body": "Oh, Mr Pearce. The world is so small. ;d\n\nJust shout when you are clear to release, I'm looking forward to hacking on the Python bindings too. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077", "body": "I think that since 1795f87952a68155a618523799f70473483c7265 all public methods return a proper error code. Tell me if anything is missing.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/519077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561", "body": "Scott was kind enough to write a README.txt for us. We'll make sure to keep it up to date. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/525561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346", "body": "libgit2 hasn't built in Windows for a while, because I don't have a Windows box to try it on. ^^\n\nWe are working on that and it's pretty high on our TODO list: we have a new build system in the waf-build branch which now has support for building libgit2 as a shared library. I'll be testing that on Windows someday on the following week, expect an update.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/559346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769", "body": "Hey there! We've been working very hard on the Windows build, and it's almost there. So far MSVC 2010 and MinGW compile cleanly with our new build system. Can you give it a go and tell us if you find any issues?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/562769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830", "body": "...We've just migrated from Make to waf last night. Try updating your master branch and compiling again. Shared targets should be available in all platforms.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367", "body": "Hey, we have two new commits! The shared library now builds without errors on all platforms I've tried, and you can choose compiler version with the --msvc flag, and target platform with the --arch flag.\n\nTell me if you find any more issues!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374", "body": "Oh, and yes, that's the 'expected' procedure for installing the library dependencies under MSVC: either copy them to the VC folder, or in any other folder inside of your %%LIB%% environment variable.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/564374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213", "body": "Hey people, thanks for your interest.\n\nThis is indeed a very interesting idea, and is something we have certainly on our TODO list: what we plan on doing is decoupling the storage system from the object database logic, as to allow people to write custom drivers on their apps to use **anything** as the backend on their Git app... From in-memory storage, to Cassandra. How cool is that? I'll tell you: very cool.\n\n...however, it has to wait, because our main focus right now are network ops. So stay tuned.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452", "body": "Hey, couple questions while I get QT Builder to try this out: have you actually tested this on Windows? What compiler does it use on that platform, can you choose between MSVC and GCC? Also, it seems like this only builds a shared library. How can we go about a static one?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942", "body": "Indeed, indeed. I don't know what was going on Shawn's head. :p\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/197942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966", "body": "Yes, we are now using a custom commit structure internally (not a normal git_commit) with very tight packing and only the minimal required fields for revision walking. It's the price to pay for a 20x increase in walking speed. You can get the OID of a commit just by calling `git_object_id(commit);`.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002", "body": "Yeah, in fact, in most scenarios for revision walking, you have an OID and not a commit object: see `git_reference_listall`, `git_reference_resolve` and `git_reference_oid`, which would be used to find the HEADs of all the branches in your repository. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005", "body": "Ew, sometimes I forget that there are bindings for languages not written in C. :/\n\nI'll fix this in the dev branch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006", "body": "It is indeed, I forgot to save on Vim. :p\n\nFixing in dev-branch, I may release 10.1 to fix these minor issues.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176", "body": "This issue is now fixed in the dev branch. I don't know what do you mean by GIT_INTERN though...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631", "body": "Damn right. Fixed in the development branch!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509", "body": "Hey, fixed in dev branch.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774", "body": "No, certainly not in C. It's not a real API, but an ugly compiler workaround that lets you push an unspecified amount of objects to the stack. You still need to know how many objects are there, though.\n\nSee http://en.wikipedia.org/wiki/Stdarg.h\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286", "body": "Just return `GIT_ENOMEM` here, malloc already sets the error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383", "body": "Yeah absolutely, I wrote this when we had the \"kill on out of memory\" malloc wrappers, so it doesn't check for ENOMEM or return error codes.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345", "body": "Question: are you sure we have to return `buffer_end` and not the actual end pointer for this single entry?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/38345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004", "body": "That comparison. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005", "body": "Don't rethrow this. Do a new `GIT_EEXISTS` with a good error message.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507", "body": "Hey, I'm afraid this won't cut it in MSVC. We need to be C89-compilant there. Can you move all the declarations to the top? Cheers!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/40507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477", "body": "Is this comment up to date? AFAIK we're implementing fnmatch from scratch now?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/50477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030", "body": "This is terrible. We cannot duplicate and free a whole buffer just to prevent a cast. If you are concerned about this cast, you'll have to update the entire hashing code so that the hashed data is constant -- that would be a nice thing to have. Without that, this is a no-go.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031", "body": "Internal methods should not have the `git` prefix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032", "body": "Doesn't this leak memory?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033", "body": "Same as the `index` issue. There's no way we can double the overhead of deflating writes by copying _every single byte_ back and forth on memory. Impossible -- and since the ZLib code cannot be rewritten to support const writes either, your best bet is to change the signature of the function so `source` is not constant, and work from there.\n\nThis is one of the hottest paths in the library atm (all object writes go through this loop), so act accordingly.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "schacon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875", "body": "They are not in progress yet, I just had that there as a placeholder and forgot to remove it.  I would love your help in getting them started.  I can also create a repo under the libgit2 org and give your project a place there if you want.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/496875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749", "body": "that isn't in the index information, it is only determined by comparing the index data to the data in the HEAD commit and the files in the working directory.  getting some status type calls is in the todo list, but it might take a bit of time.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dborowitz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490", "body": "Thanks. I've started some Python bindings, which I'll push in a few days or so.\n\nI've been looking forward to this since your GitTogether Skype video talk :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/503490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184", "body": "For some definition of \"possible\", sure :)\n\nATM due to Google policy around open-source releasing I'm blocking on review from someone inside Google (who also happens to be Shawn Pearce).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/516184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234", "body": "That was quick! Much better, thanks.\n\nThere are still a few outstanding issues:\n-GIT_COMMIT_GETTER ignores the return code from git_commit__parse_full.\n-I haven't fully grokked the revwalk code, but I think git_revwalk_next should be able to distinguish between the various reasons a walk is finished (e.g. a parent was missing/corrupted vs. the actual end of a walk).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310", "body": "I've got approval to push my libgit2 bindings. I think the best solution is for it to live in the libgit2 namespace, which I can push to my fork of. My project name is pygit2 and, at Shawn's recommendation, it's licensed under the same GPL-with-exception license as libgit2. If you have a more creative name I wouldn't mind changing it, but I don't feel strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/526310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ctimmerm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199", "body": "I overlooked I had created an extra compiler warning in commit.c, fixed in the second commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/521199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436", "body": "I am not sure about windows library conventions, but I had to do this:\n\ncopy zlib125dll.zip/dllx64/zlibwapi.lib to C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib\\amd64\n\ncopy zlib125.zip/zlib-1.2.5/zlib.h and zlib125.zip/zlib-1.2.5/zconf.h\nto C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\n\n`waf build-shared` didn't work, it gives this error:\n     Waf: Entering directory `C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     [ 1/23] cshlib: build\\shared\\src\\blob.c.0.o build\\shared\\src\\commit.c.0.o build\\shared\\src\\delta-apply.c.0.o build\\shared\\src\\errors.c.0.o build\\shared\\src\\file\n     lock.c.0.o build\\shared\\src\\fileops.c.0.o build\\shared\\src\\hash.c.0.o build\\shared\\src\\hashtable.c.0.o build\\shared\\src\\index.c.0.o build\\shared\\src\\odb.c.0.o build\\shared\\src\\oid.c.0.o build\\shared\\src\\person.c.0.o build\\shared\\src\\repository.c.0.o build\\shared\\src\\revwalk.c.0.o build\\shared\\src\\tag.c.0.o  build\\shared\n     \\src\\thread-utils.c.0.o build\\shared\\src\\tree.c.0.o build\\shared\\src\\util.c.0.o build\\shared\\src\\win32\\dir.c.0.o build\\shared\\src\\win32\\fileops.c.0.o build\\shared\\src\\win32\\map.c.0.o build\\shared\\src\\block-sha1\\sha1.c.0.o -> build\\shared\\git2.dll build\\shared\\git2.lib build\\shared\\git2.dll.manifest\n     Waf: Leaving directory`C:\\Users\\hef\\projects\\libgit2\\build\\shared'\n     Build failed\n      -> missing file: 'C:\\Users\\hef\\projects\\libgit2\\build\\shared\\git2.lib'\nThe error appears to be accurate, I get a git2.dll but not a git2.lib\n\n`waf build-static` appears to work fine though.\nI haven't tested the resulting library yet.\n\nAlso, it appears that waf built a 64bit lib by default, is there a way to tell it to make a 32bit lib?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461", "body": "the build system doesn't use make,\ndoes running `waf build-shared` work for you?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/563461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301", "body": "mingw32 notes:\nw32-pthreads does not seem to get linked to properly if it is built statically, but seemed fine dynamically.  That is, libgit2 linked against w32-pthreads(static), but my application did not.\nzlib and libgit2 seem to build and link fine.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829", "body": "you need to add zlib.h (and zconf.h) from zlib-1.2.5 to your include path.\nI dumped them in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\INCLUDE.\n\nyou are also going to need zlibwapi.lib.  I put that in C:\\Program Files (x86)\\Microsoft Visual Studio 10 .0\\VC\\lib\nI believe you will need to keep the zlib.dll either in your %PATH% or in the same directory as your built executable for this to work.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841", "body": "Ah, I see. I misunderstood about what was stored in the index.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/573841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510", "body": "begin able to specify a qt subproject in a git submodule would be awesome.\n\naccording to http://doc.qt.nokia.com/4.7/qmake-variable-reference.html, you might be able to build a static lib with:\n\n```\n CONFIG += create_pri\n QMAKE_LFLAGS = staticlib\n```\n\nI did not test this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/579510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joefeser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849", "body": "I copied the dll per the read me file but never copied the .h files as you stated. I placed the zlib.h and zconf.h files in the include folder and a dll was created. Next to figure out if it is x86 or x64.\n\nYou may want to add the instructions for the two .h files to the readme.\n\nThanks for your help.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/565849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rkh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977", "body": "I love the idea. Would be awesome to use for undo history in Redcar, for instance.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/575977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "przemoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096", "body": "Other example, that maybe I shouldn't reveal yet. ;)\n\nFor a few years at least I have in my mind the idea of very useful application (as usual, implementation is not even started yet), that I even named already: SINAVE - sed inspired, nipped by awk visual editor. Name says pretty much (awk & sed users should predict how such tool would be useful), but from the beginning I thought that having git in the back is a must-have thing, because it would allow implementing the best undo/redo feature any editor ever had, because of possibility of having divergent branches all the time accessible from editor during work, for instance. You must already feel how awesome such tool could be.\n\nSorry for a bit off-topic.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/issues/comments/576096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nulltoken": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043", "body": "Nice! :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140", "body": "Nice one! \nI knew the duplicate packed and loose ref would help by biting us in the... back. :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030", "body": "+1 :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558", "body": "common.h:\n\n<pre><code>#if defined(_MSC_VER)\n# define GIT_INLINE(type) static __inline type\n#else\n# define GIT_INLINE(type) static inline type\n#endif</code></pre>\n\n\nMy guess would be that GIT_INLINE exists because inlining requires a different specifier depending on the platorm/compiler.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323", "body": "Current signature of the method is <code>void git_cache_init(git_cache *cache, size_t size, git_cached_obj_freeptr free_ptr)</code>.\n\nFine with you if I change it to return an <code>int</code>?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425", "body": "It's now fixed\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/30425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525", "body": "Damn! You're right. Will force-push a fix. Thanks for having spotted this.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tclem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209", "body": "Love it!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/300209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296", "body": "I think you meant to do this: `str[i] = tolower(str[i]);`\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tbranyen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786", "body": "Awesome glad to see this, bumping up my bindings to this version immediately!\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jystic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940", "body": "+1 from me, as a sometimes Windows user this is really helpful\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523", "body": "Should this be including oid.h instead? I can't see what revwalk.h needs from object.h, but it definitely needs the git_oid struct from oid.h\n\nThis commit breaks the auto-binding generator that I'm using because the generator doesn't traverse header files recursively to find types. Changing this to oid.h makes everything happy again. I don't mind changing the binding generator to be more robust, but this seems to be better changed in the main codebase.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/304523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484", "body": "CONDITION_VARIABLE doesn't seem to be available on MinGW, so all the stuff to do with pthread_cond_t doesn't compile. I found this explanation: http://forums.techarena.in/software-development/1130499.htm\n\nFortunately libgit2 doesn't use condition variables yet, so removing all traces of them means libgit2 compiles fine.\n\nYou didn't really want to use condition variables did you? ;)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/305484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "txdv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964", "body": "Any reason why it changed from (git_commit *commit) to (const git_oid *oid)?\nApart from being const...\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998", "body": "I just thought you could retrieve the oid from git_commit, but I guess there are some valid scenarios were one has only an ID instead of an instance of git_commit.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/301998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143", "body": "why is GIT_INTERN present at all?\nYou can't use it in any other binding.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285", "body": "GIT_INLINE. its not that hard to figure it out, because there are not many defs with caps on\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/303285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763", "body": "Why the parent count when there is already the variable argument parent list?\nDoesn't the API for variable argument lists support the counting of them?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/309763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246", "body": "I don't understand one thing though.\n\nWhy do the create functions return only an object id, instead of a direct pointer to the struct?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274", "body": "And what about git_repository_close? What happened to that? Got it replaced by _gc? gc does only some garbage collection if I'm not mistaken.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/312274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jasonpenny": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000", "body": "There seems to be no way to free the git_strarray from my bindings, since `git_strarray_free` is GIT_INLINE and not GIT_EXTERN\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004", "body": "The API specifies\n    GIT_EXTERN(void) git_repository_close(git_repository *repo);\nis it supposed to be `git_repository_gc` ?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/302004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617", "body": "Warnings treated as errors, so doesn't build with MSVC:\n\ncache.c: \"potentially uninitialized local variable 'node' used\" in git_cache_get,\nand commit.c has 3 places where free() is called on const pointers\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/comments/308617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "scorpion007": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618", "body": "Won't this get compiled out in release builds and break the program's behavior?\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637", "body": "Assert is still ok, just perhaps needs to be done on a separate line. I.e. save the return value of snprintf and assert it on the next line. No sweat :)\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sakari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633", "body": "oh boy.. nice catch\n\nI would think so. That needs to be fixed. Maybe abort here some other way. \n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/5633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "avidal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943", "body": "s/importart/important/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944", "body": "s/copmparison/comparison/\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/14944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jpfender": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996", "body": "Oops, this appears to be a duplication.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/23996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "schu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524", "body": "This must be repo2, no? Otherwise the test is segfaulting for me.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/61524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kiryl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034", "body": "Ok. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035", "body": "No, it doen't. Comment is not relevant (any more?).\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036", "body": "This is a real bug! zlib can modify data pointed by ->next_in so you **cannot** just cast out the qualifier if you don't want to get SIGSEGV.\n", "reactions": {"url": "https://api.github.com/repos/libgit2/libgit2/pulls/comments/67036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}