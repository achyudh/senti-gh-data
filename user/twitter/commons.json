{"_default": {"1": {"jayeye": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/454", "title": "The release of twitter.common.app on pypi does not work with python3.5 (and possibly earlier)", "body": "This happens pretty much everywhere I've tried it, but to make sure I checked it in a fresh installation of python3.5 on Amazon Linux:\r\n\r\n    $ cat x.py\r\n    from twitter.common import app\r\n\r\n    $ python3.5 x.py\r\n    Traceback (most recent call last):\r\n      File \"x.py\", line 1, in <module>\r\n        from twitter.common import app\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/__init__.py\", line 39, in <module>\r\n        from .application import Application\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/application.py\", line 39, in <module>\r\n        from twitter.common.process import daemonize\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/__init__.py\", line 7, in <module>\r\n        from .process_provider_ps import ProcessProvider_PS\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/process_provider_ps.py\", line 2, in <module>\r\n        from process_handle_ps import ProcessHandlePs\r\n    ImportError: No module named 'process_handle_ps'\r\n\r\nAnd here is what's installed:\r\n\r\n    $ pip-3.5 freeze\r\n    twitter.common.app==0.3.9\r\n    twitter.common.collections==0.3.9\r\n    twitter.common.contextutil==0.3.9\r\n    twitter.common.dirutil==0.3.9\r\n    twitter.common.lang==0.3.9\r\n    twitter.common.log==0.3.9\r\n    twitter.common.options==0.3.9\r\n    twitter.common.process==0.3.9\r\n    twitter.common.string==0.3.9\r\n    twitter.common.util==0.3.9\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dslztx": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/438", "title": "I find a bug in src/java/com/twitter/common/objectsize/ObjectSizeCalculator.java", "body": "There are some classes as follows:\n\n```\nclass A {\n    int a;\n}\n\n\nclass B extends A {\n    long b;\n}\n\n\nclass C extends B {\n    char c;\n}\n\npublic class Main\n{\npublic static void main(String[] args)\n{\n    C c=new C();\n    System.out.println(ObjectSizeCalculator.getObjectSize(c));\n}\n}\n```\n\nIn 32 bits JDK,the result of your program execution is **24**,but the exact result is **32**.\nI also write a program for calculating java object size,please take a look at [java-object-size](https://github.com/dslztx/java-object-size)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwlzn": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/437", "title": "Kill twitter.common.python vestiges", "body": "a while back, `twitter.common.python` became `pex`. there are still references to `twitter.common.python` scattered in the code base - particularly, a failure in the release script:\n\n```\n                   Running register sdist upload against /Users/kwilson/dev/commons/dist/twitter.common.python-0.7.0**** Failed to install twitter.common.python-0.7.0. stdout:\nrunning register\nrunning egg_info\ncreating src/twitter.common.python.egg-info\nwriting requirements to src/twitter.common.python.egg-info/requires.txt\nwriting src/twitter.common.python.egg-info/PKG-INFO\nwriting namespace_packages to src/twitter.common.python.egg-info/namespace_packages.txt\nwriting top-level names to src/twitter.common.python.egg-info/top_level.txt\nwriting dependency_links to src/twitter.common.python.egg-info/dependency_links.txt\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nrunning check\nRegistering twitter.common.python to https://pypi.python.org/pypi\nServer response (200): OK\nrunning sdist\ncreating twitter.common.python-0.7.0\ncreating twitter.common.python-0.7.0/src\ncreating twitter.common.python-0.7.0/src/twitter\ncreating twitter.common.python-0.7.0/src/twitter.common.python.egg-info\ncreating twitter.common.python-0.7.0/src/twitter/common\ncreating twitter.common.python-0.7.0/src/twitter/common/python\ncreating twitter.common.python-0.7.0/src/twitter/common/python/http\nmaking hard links in twitter.common.python-0.7.0...\nhard linking MANIFEST.in -> twitter.common.python-0.7.0\nhard linking setup.py -> twitter.common.python-0.7.0\nhard linking src/twitter/__init__.py -> twitter.common.python-0.7.0/src/twitter\nhard linking src/twitter.common.python.egg-info/PKG-INFO -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/SOURCES.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/dependency_links.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/namespace_packages.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/requires.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/top_level.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/zip-safe -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter/common/__init__.py -> twitter.common.python-0.7.0/src/twitter/common\nhard linking src/twitter/common/python/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/base.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/common.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/compatibility.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/environment.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/fetcher.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/finders.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/installer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/interpreter.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/marshaller.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/obtainer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/orderedset.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/package.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pep425.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_bootstrapper.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_builder.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_info.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/platforms.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/resolver.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/testing.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/translator.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/util.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/http/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/crawler.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/http.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/link.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nWriting twitter.common.python-0.7.0/setup.cfg\ncreating dist\nCreating tar archive\nremoving 'twitter.common.python-0.7.0' (and everything under it)\nrunning upload\nSubmitting dist/twitter.common.python-0.7.0.tar.gz to https://pypi.python.org/pypi\n\n**** Failed to install twitter.common.python-0.7.0. stderr:\nwarning: check: missing meta-data: either (author and author_email) or (maintainer and maintainer_email) must be supplied\n\nwarning: sdist: standard file not found: should have one of README, README.rst, README.txt\n\nUpload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\nerror: Upload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\n```\n\nwe should clean this up.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/issues/430", "title": "Flaky test: tests/python/twitter/common/metrics/test_sampling.py:test_sampler_base", "body": "this can manifest in CI as:\n\n```\n                     tests/python/twitter/common/metrics/test_sampling.py F..\n                     tests/python/twitter/common/metrics/test_gauges.py ......\n\n                     ==================== FAILURES ====================\n                     _______________ test_sampler_base ________________\n\n                         def test_sampler_base():\n                           class TestSampler(SamplerBase):\n                             def __init__(self, period, clock):\n                               self.count = 0\n                               SamplerBase.__init__(self, period, clock)\n\n                             def iterate(self):\n                               self.count += 1\n\n                           test_clock = ThreadedClock()\n                           sampler = TestSampler(Amount(1, Time.SECONDS), clock=test_clock)\n                           sampler.start()\n\n                           assert test_clock.converge(threads=[sampler])\n                           test_clock.assert_waiting(sampler, 1)\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 0\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 1\n\n                           test_clock.tick(5)\n                           assert test_clock.converge(threads=[sampler])\n                     >     assert sampler.count == 6\n                     E     assert 2 == 6\n                     E      +  where 2 = <TestSampler(Thread-1 [TID=5876], started daemon 140429632481024)>.count\n\n                     tests/python/twitter/common/metrics/test_sampling.py:58: AssertionError\n                     -------------- Captured stderr call --------------\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 2.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 6.0\n                      1 failed, 21 passed, 1 warnings in 0.44 seconds =\n```\n\nbut succeeds on rebuild.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/89bc492969d735ea177374b178e39ea6cf0d85ed", "message": "Bump VERSION"}, {"url": "https://api.github.com/repos/twitter/commons/commits/941c7b4a06048e484e21f613bc04004f3756b16f", "message": "Repair ./rbt for review posting.\n\nAs Mateo noted in https://github.com/twitter/commons/pull/428, `./rbt` in the commons repo seems to have been broken @ 146de3 due to removal of the underlying virtualenv bits.\n\nThis RB restores the requisite venv deps and bumps both `virtualenv` and `rbtools` to their latest pypi versions to get `./rbt` functional again.\n\nTesting Done:\nDogfooded for this very review + green CI @ https://travis-ci.org/twitter/commons/builds/129290520 for good measure.\n\nbefore:\n\n```\n[illuminati commons (master)]$ ./rbt --version\n./rbt: line 3: build-support/python/libvirtualenv.sh: No such file or directory\n./rbt: line 4: setup_virtualenv: command not found\n./rbt: line 6: exec: rbt: not found\n```\n\nafter:\n\n```\n[illuminati commons (kwlzn/commons/rbt_fix)]$ ./rbt --version\nBootstrapping rbt with requirements RBTools==0.7.6\nUsing /Users/kwilson/Python/CPython-2.7.11/bin/python2.7\n~/dev/commons/build-support ~/dev/commons\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1799k  100 1799k    0     0  2207k      0 --:--:-- --:--:-- --:--:-- 2205k\n...\n~/dev/commons\nNew python executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python2.7\nAlso creating executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python\nInstalling setuptools, pip, wheel...done.\nCollecting RBTools==0.7.6\n  Using cached RBTools-0.7.6-py2-none-any.whl\nCollecting six>=1.8.0 (from RBTools==0.7.6)\n  Using cached six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: six, RBTools\nSuccessfully installed RBTools-0.7.6 six-1.10.0\nRBTools 0.7.6\n```\n\nReviewed at https://rbcommons.com/s/twitter/r/3858/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2097ff289d8e04040a6b004d2c6ba64a061661f0", "message": "Revert Diff 2 pants.ini changes from RB #3155"}, {"url": "https://api.github.com/repos/twitter/commons/commits/32011ab5351fea23e8c70e24e752540b06d1389f", "message": "[twitter/commons] Upgrade pants from 0.0.44 -> 0.0.59\n\nUpon merging an innocuous PR after 2+ months of no merges, CI broke in the commons repo due to https://github.com/pantsbuild/pants/issues/2566 + the public release of pytest-timeout-1.0.0 (which is visible by commons via open dep resolution against pypi). This change addresses that by upgrading the entire commons repo to pants 0.0.59 wherein #2566 is repaired.\n\n- Upgrade pants to 0.0.59.\n- Fixup various symbol references and usages throughout.\n- Update excludes syntax.\n- Upgrade to contrib python checks plugin for PythonEval (which brings along checkstyle).\n- Implement repo-wide python checkstyle suppression due to numerous checkstyle errors in the codebase.\n- Sync out latest twitter.common.args from Twitter's source repo to support removal of apt-args plugin.\n- Eliminate the apt-args plugin, which is no longer needed with isolation.\n\nTesting Done:\nhttps://travis-ci.org/twitter/commons/builds/92376412\n\nBugs closed: 414\n\nReviewed at https://rbcommons.com/s/twitter/r/3155/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/811ac6c0a31e8616c3be006e3a1b5d0b728297ec", "message": "Merge pull request #407 from johnskopis/jskopis/update-kazoo\n\nUpgrade kazoo 1.3.1 -> 2.2.1"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrwilby": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/432", "title": "Am I missing something - isn't this a thread leak?", "body": "Where does this thread (below):\n\n```\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n```\n\nget cleaned up when close() is called? I see a ton of these threads lingering around in one open source project we are using. \n## \n\n public ZooKeeperClient(Amount<Integer, Time> sessionTimeout, Credentials credentials,\n      Optional<String> chrootPath, Iterable<InetSocketAddress> zooKeeperServers) {\n    this.sessionTimeoutMs = Preconditions.checkNotNull(sessionTimeout).as(Time.MILLISECONDS);\n    this.credentials = Preconditions.checkNotNull(credentials);\n\n```\nif (chrootPath.isPresent()) {\n  PathUtils.validatePath(chrootPath.get());\n}\n\nPreconditions.checkNotNull(zooKeeperServers);\nPreconditions.checkArgument(!Iterables.isEmpty(zooKeeperServers),\n    \"Must present at least 1 ZK server\");\n\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n  @Override\n  public void run() {\n    while (true) {\n      try {\n        WatchedEvent event = eventQueue.take();\n        for (Watcher watcher : watchers) {\n          watcher.process(event);\n        }\n      } catch (InterruptedException e) { /* ignore */ }\n    }\n  }\n};\nwatcherProcessor.setDaemon(true);\nwatcherProcessor.start();\n\nIterable<String> servers =\n    Iterables.transform(ImmutableSet.copyOf(zooKeeperServers),\n        InetSocketAddressHelper.INET_TO_STR);\nthis.zooKeeperServers = Joiner.on(',').join(servers);\nthis.connectString = this.zooKeeperServers.concat(chrootPath.or(\"\"));\n```\n\n  }\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mateor": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/427", "title": "Request to update python `futures` library", "body": "The twitter.common libs depends on a pretty old version of `futures`, could you update to a more recent version?\n\nThis conflicts with the `futures` range required by some of our python libraries. `boto3-1.3.0` is the most recent example that sent me here, it requires `futures>=2.2.0,<4.0.0` for python 2.7. But this is not the first time I have seen it, just the first time I decided to try and solve the problem instead of working around it \ud83d\ude04 \n\nBoto3 requirements include [the dep here](https://github.com/boto/boto3/blob/67409f27c8e180b4e9e942fc2f795dbfc7e98c7f/setup.cfg).\n\nThe futures range above goes from 2.2.0 -> 4.0.0, but the most recent published version of `futures` is only 3.0.5, fyi.\n\nI cloned t.c. and upgraded `futures` to the minimum viable upgrade (to  `2.2.0`) and will be sending a pull request along.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/e8de9d16eda3c22c1a866178f73a12355fc5699c", "message": "Update the futures library.\n\nThis bumps futures to a more modern version,\nsome useful Python libraries are pinned to a range\nthat is later than the current t.c. `futures` version.\n\nex. boto3 is pinned to `futures>=2.2.0,<4.0.0` for python2.7\n\nThis is the minimum-viable change that makes the t.c.\nlibs compatible.\n\nTesting Done:\nRan ci.sh locally and Travis passed: https://github.com/twitter/commons/pull/428\n\nBugs closed: 427, 428\n\nReviewed at https://rbcommons.com/s/twitter/r/3857/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/431", "title": "Convert 3rdparty/python to use the python_requirements target.", "body": "Twitter commons was using a wrapper function around its python\ndependencies to create python_requirement_library targets.\nThe python_requirements library is able to understand a pip\nrequirements.txt file and convert each entry into the\npython_requirement_library target needed by Pants.\n\nThe python_requirements target uses the project name as a target\nname. The original  wrapper was maintained for a few dependencies\nwhen their name clashed with Pants BUILD file conventions.\n\nI also removed the easy_install thrift, it looks like it was\nput in place to service aurora, who was later unblocked.\n\nLet me know if you think it should be returned:\nhttps://github.com/pantsbuild/pants/issues/2533\n\nThe purpose of this change is to enable a simple interface to convert\nsome python dependencies from being hardcoded to a single rev into\nbeing able to be satisfied by a release range. I will submit\nany dependency version changes separately.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcandre": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/422", "title": "Can't find twitter common base Either in published apidocs", "body": "", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/418", "title": "Publish to Maven Central", "body": "twitter-commons has some really good stuff, especially the Zookeeper lock implementation. Could we publish twitter-commons to Maven Central, to make it easier for people to use these libs without having to link to custom artifact repos?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Abel123": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/413", "title": "bug in commons/src/java/com/twitter/common/metrics/Metrics.java", "body": "commons/src/java/com/twitter/common/metrics/Metrics.java\n\nline 39    if (gauges.containsKey(key) || counters.containsKey(key) || counters.containsKey(key)) {\n\nwhich should be     if (gauges.containsKey(key) || counters.containsKey(key) || histograms .containsKey(key)) {\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orsenthil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/411", "title": "Error while running tests. SourcePackage is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)", "body": "On master\n\n```\n$ git log origin/master -n 1 |head -n 3\ncommit d4454f233914d0a7586da8c5d07575d8b63124fe\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Mon Aug 24 15:09:53 2015\n```\n\nrunning the tests\n\n$ ./pants test tests/python/twitter/common:all\n\ngives me an error\n\n```\nException message: Package     SourcePackage(u'https://pypi.python.org/packages/source/w/wheel/wheel-0.24.0.tar.gz#md5=3b0d66f0d127ea8befaa5d11453107fd') is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)\n```\n\nIf I go back to an old commit (this was the latest which succeeded for me)\n\n```\n$ git log HEAD -n 1 |head -n 6\ncommit bc7248da0974ab8a39ca36956ac6880029b85b00\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Sun Aug 9 20:29:10 2015\n\n    Upgrade to pants 0.0.41\n```\n\nand run the tests.\n\n```\n$ ./pants test tests/python/twitter/common:all\n```\n\nThe test execution is successful.\n- The difference between these versions are only about pants version update.\n- FWIW, I tried the latest version of pants in pantsbuild/pants and **could not** reproduce this error. I am raising this against twitter/commons\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/405", "title": "checkstyle does not allow class scoped variables for staticmethod", "body": "It may be good idea to discuss this as a ticket.\n\nCheckstyle prevents the use of class scoped variables with a staticmethod. \n\n```\nclass MyClass(object):\n\n  VARIABLE = None\n\n  @staticmethod\n  def method():\n    return MyClass.VARIABLE\n```\n\n$ check.pex\n\n```\nT800:WARNING science/src/python/twitter/packer/lib/packer_client.py:046 Instead of MyClass.VARIABLE use self.VARIABLE or cls.VARIABLE with instancemethods and classmethods respectively.\n     |    return MyClass.VARIABLE\n```\n\nIt is entirely desirable to have a) staticmethod  b) have a class scoped variables in staticmethod. We do not care for subclassing in staticmethods, so enforcing the users to change it to classmethods may not be a good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7b4843fb2947ec9bc3ff7769a37d05ad2220fc48", "message": "Merge pull request #412 from landism/master\n\neliminate double slash in reviewboard urls"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923", "body": "I think, this is a typo. It should be extras_path\n\nOtherwise, it crashes with a NameError\n\nNameError: global name 'extra_paths' is not defined\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "brian-brazil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/396", "title": "com.twitter.common.zookeeper:server-set references non-existant com.twitter.common:service-thrift:jar:0.2.21", "body": "Hi,\n\nI have the following in my POM:\n\n```\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>client</artifactId>\n                        <version>0.0.8</version>\n                </dependency>\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>server-set</artifactId>\n                        <version>1.0.110</version>\n                </dependency>\n```\n\nWhich results in:\n\n```\n[ERROR] Failed to execute goal on project boxever-dropwizard-extras-load-balancer: Could not resolve dependencies for project com.boxever:boxever-dropwizard-extras-load-balancer:jar:0.7.1.62-SNAPSHOT: Failure to find com.twitter.common:service-thrift:jar:0.2.21 in http://maven.twttr.com/ was cached in the local repository, resolution will not be reattempted until the update interval of twitter-twttr has elapsed or updates are forced -> [Help 1]\n\n```\n\nand indeed there is no such version at http://maven.twttr.com/com/twitter/common/service-thrift/\n\nMy guess is that the server-set pom is out of date.\n#346 may be related.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevints": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/387", "title": "Python releases exist that contain no code changes", "body": "This is a bug in the release process. It looks like releases get created as one atomic unit. This leads to a situation where there are releases of individual component libraries that don't actually contain any code changes (and nor do their parents), leaving downstream users to resolve version conflicts that don't actually exist.\n\nFor example, twitter.common.quantity==0.3.2 and twitter.common.quantity==0.3.3 have identical code, but the twitter.common.quantity==0.3.3 requires twitter.common.lang==0.3.3, so the metadata is different. Okay, that warrants releasing a new version. But wait, twitter.common.lang==0.3.2 and twitter.common.lang==0.3.3 have identical code and no dependencies. So twitter.common.lang's version should not have been incremented, and that increment should not have cascaded to its dependees.\n\nThe alternative: a version change for a component needs to \"cascade\" to its dependees, but only when there's an actual code change. This means that a change to twitter.common.quantity source files causes an increment to its version and its dependees, but not to its parent twitter.common.lang.\n\nI'm not sure how the version strategy is implemented currently but would like to start a discussion toward changing it before the next release.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsirois": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/386", "title": "Consider restructuring python targets to be 1-1-1", "body": "See #385 for the java side of this.  In java, fine grained and deep package structures are more of-the-norm.  In python, less so; so this issue is phrased as a \"consider\".  The idea though is to eliminate most or all exclude lists in sources globs in the python codebase.  This would require re-structuring packages and thus risk breaking clients imports.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/385", "title": "Restructure java targets to be 1-1-1.", "body": "Today there are many java BUILD targets that are subsets of a package.  To maintain the BUILD files for these targets in a reasonable way, constant lists of source files are defined that can be subtracted out from target sources lists using the globs exclude facility.  At some point pants will likely remove the ability to define constants in BUILD files and this mode of defining non 1-1-1 targets will be taken away, forcing duplication of file lists and the associated maintenance risk.\n\nThere are 2 complicating factors here:\n1. re-packaging will likely break clients of the java jars - they'll need to fix imports; so, this will require a deprecation cycle\n2. IIUC the official home for the java code is still inside Twitter walls; so, this refactoring really needs to occur in Twitter's repo and then be synced out here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/0c5c6e3030b3890e20f3c2e85c5628d0ab7fc3d1", "message": "Work around lockfile break.\n\nThis pins lockfile's pbr dep on lockfile's behalf as reccomended here:\n  https://groups.google.com/d/topic/pants-devel/OnPISJosUoI/discussion\n\nTesting Done:\nCI went green here:\n  https://travis-ci.org/twitter/commons/builds/125937912\n\nBugs closed: 424\n\nReviewed at https://rbcommons.com/s/twitter/r/3762/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/342", "title": "Use Travis CIs new container based builds.", "body": "The announcement is here:\n  http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure\nThe specs here:\n  http://docs.travis-ci.com/user/workers/container-based-infrastructure\n  http://docs.travis-ci.com/user/caching/#Fetching-and-storing-caches\n\nThis also turns on caching for ~/.pants.d, ~/.ivy2\nand the current pants version bootstraped in\nbuild-support.  To make virtualenv caching work, updates\nthe virtualenv bootstrap script to use a stable directory name\nacross virtualenv versions.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768", "body": "We need to update the README and will be blogging about pants and sapling by ~end of May, but the build already works - but is custom (uses ant/ivy behind the scenes).  You need python 2.6 and ant 1.8+ installed and then, from the root of the repo, you run:\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nThis will likely fail on the 1st run and explain steps for installing a python templating library (mako) dependency.  After installing mako you should be good to go.\n\nFor example to compile all code and run all tests.\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nYou can learn a bit more using:\n$ ./pants help\nTjis will list subcommands available.\n\n$ ./pants help [subcommand]\nThis will give even more info about a particular subcommand.\n\nIn short - the repo is a monolithic source tree, but it produces many jars - vs a typical gradle/buildr/maven multi-module project where there would be a top-level project directory for each artifact-producing project.  Currently pants provides 40 thin jars from its one source tree:\n$ ./pants list --provides --provides-columns=artifact_id\ncom.twitter.common#application-action\ncom.twitter.common#application\ncom.twitter.common#application-http\ncom.twitter.common#application-modules\ncom.twitter.common#args\ncom.twitter.common#base\ncom.twitter.common#collections\ncom.twitter.common#inject\ncom.twitter.common#inject-timed\ncom.twitter.common#io\ncom.twitter.common#io-thrift\ncom.twitter.common#logging\ncom.twitter.common#dynamic-host-set\ncom.twitter.common#net-util\ncom.twitter.common#net-pool\ncom.twitter.common#net-http\ncom.twitter.common#net-http-handlers-text\ncom.twitter.common#net-http-handlers-string-template\ncom.twitter.common#net-http-handlers\ncom.twitter.common#net-http-handlers-thrift\ncom.twitter.common#net-http-handlers-time-series\ncom.twitter.common#quantity\ncom.twitter#serverset\ncom.twitter.common#stats-provider\ncom.twitter.common#stats\ncom.twitter.common#stats-jvm\ncom.twitter.common#stats-time-series\ncom.twitter.common#stats-util\ncom.twitter.common#thrift\ncom.twitter.common#jdk-logging\ncom.twitter.common#util\ncom.twitter.common#util-system-mocks\ncom.twitter.common#util-sampler\ncom.twitter.common#util-testing\ncom.twitter.common#util-caching\ncom.twitter.common#zookeeper\ncom.twitter.common#zookeeper-testing\ncom.twitter.common#stats-ostrich-adapter\ncom.twitter.common#service-thrift\norg.apache.scribe#scribe_client\n\nAnd some of these jars are very thin in and of themselves, leveraging internal and external jars:\n$ ./pants files src/java/com/twitter/common/quantity\ncom/twitter/common/quantity/Amount.java\ncom/twitter/common/quantity/Data.java\ncom/twitter/common/quantity/Time.java\ncom/twitter/common/quantity/Unit.java\n\n$ ./pants depmap -m src/java/com/twitter/common/quantity\ncom.twitter.common-quantity\n  com.twitter.common-collections\n    commons-lang-commons-lang-2.4\n    com.google.guava-guava-r08\n    com.google.code.findbugs-jsr305-1.3.9\n\nThe goal is to make it _very_ easy to craft lean targets that export minimal APIs and compose these.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933", "body": "Looks good, but also needs to cover *.st and *.mk files\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952", "body": "Looks like this covers the missing transforms:\n$ find build-support/ 3rdparty/ src/ tests/  -type f | xargs grep \"Licensed\" | grep \" to \"\nsrc//python/pants/ant/templates/ivy.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/protobuf/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/thrift/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/index.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/javadoc.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/classpath-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/project-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/pydevproject-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/module-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/project-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/application/http/graphview.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logconfig.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logprinter.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/thrift.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/common/thrift/text/TTextProtocolTest.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/endpoint.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/twitter.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/org/apache/scribe/0.1.2/fb303.thrift: \\* Licensed to the Apache Software Foundation (ASF) under one\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842", "body": "LGTM - thanks, merging\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395", "body": "Yes - scalability on 2 fronts:\n1.) What you see is a small slice of a much larger repo (using saplling: http://pypi.python.org/pypi/sapling https://github.com/jsirois/sapling) with >20 leaf projects and some common_internal libraries they share that are specific to internal twitter infrastucture.  In total, using a maven-like build system, we'd have > 120 top level projects in a classic maven multi-project build.  We were motivated by a strong desire to maintain a single source tree allowing for easy refactors across the global code base and easy discoverability of common code amongst 100s of developers scaling towards 1000s.\n2.) We needed to support several languages 1st class.  In particular - in this open source split you can see and use the excellent python support\n\nThe artifacts this build system exports are fully maven and ivy compatible, but a big shortcoming is that all the build documentation is still on internal wikis.  This will be remedied at some point.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477", "body": "You could vote to change to maven or anything else if it fits the requirements described.  In particular, besides the shortcoming of scant (non-existant!) docs right now on the public wiki for operating the pants build tool, what additional pain points are you encountering?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667", "body": "It does not support a single source tree though in any reasonable way afaict and does not support python.\nI understand the pain point on contribution though and its on us to update the wiki with good docs.\nThat said - if you are an eclipse or intellij user, the following works well for development:\n$ ./pants (idea|eclipse) tests/java/com/twitter/common:all -n common -c\nSee pants help (eclipse|idea) for more info.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375", "body": "Yes - the zk deps are a bit of a pain, we do the same (see: https://github.com/twitter/commons/blob/master/3rdparty/BUILD : 215).  com.twitter.common#zookeeper#0.0.24 itself depends on guava r09, see: http://maven.twttr.com/com/twitter/common/zookeeper/0.0.24/zookeeper-0.0.24.pom (or https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/BUILD).  I think the interesting thing here will be a dependency report to show what is getting pulled in by whom.  I'll run an ivy dep-report for a fake project with 1 dep on com.twitter.common#zookeeper#0.0.24 and see what that reveals...\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410", "body": "Ok, so my experiment went as follows:\n\n$ git diff\ndiff --git a/src/java/com/twitter/common/zookeeper/BUILD b/src/java/com/twitter/common/zookeeper/BUILD\nindex a83fc74..aa39954 100644\n--- a/src/java/com/twitter/common/zookeeper/BUILD\n+++ b/src/java/com/twitter/common/zookeeper/BUILD\n@@ -60,3 +60,8 @@ java_library(name = 'testing',\n   ],\n   sources = globs('testing/*.java'),\n )\n+\n+java_library(name = 'repro',\n-  dependencies = [ pants(':zookeeper') ],\n-  sources = [ '**none_hack**' ]\n  +)\n  $ ./pants src/java/com/twitter/common/zookeeper:repro compile dep-report\n  $ grep google target/src.java.com.twitter.common.zookeeper.repro/reports/ivy/internal-src.java.com.twitter.common.zookeeper.repro-default.dot\n      \"com.google.inject-guice\" [label=\"guice\\n3.0\"];\n      \"com.google.code.gson-gson\" [label=\"gson\\n1.6\"];\n      \"com.google.code.findbugs-jsr305\" [label=\"jsr305\\n1.3.9\"];\n      \"com.google.guava-guava\" [label=\"guava\\nr09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.inject-guice\" [label=\"3.0\"];\n  \"com.google.inject-guice\" -> \"org.sonatype.sisu.inject-cglib\" [label=\"2.2.1-v20090111\"];\n  \"com.google.inject-guice\" -> \"aopalliance-aopalliance\" [label=\"1.0\"];\n  \"com.twitter.common-io-json\" -> \"com.google.code.gson-gson\" [label=\"1.6\"];\n  \"com.twitter.common-util\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-stats\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-collections\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.google.inject-guice\" -> \"javax.inject-javax.inject\" [label=\"1\"];\n  \"com.twitter.common-io-json\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-base\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-collections\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-jdk-logging\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-dynamic-host-set\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-system-mocks\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats-provider\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io-thrift\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-sampler\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-quantity\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.guava-guava\" [label=\"r09\"];\n\nThis .dot file is generated by ivy:report (http://ant.apache.org/ivy/history/latest-milestone/use/report.html) and represents the full transitive dependency set of my fake target with its 1 dep on com.twitter.common#zookeeper.  I suspect your pom has a dependency on something elese that is pulling in the old google collections lib and you just need to exclude it.  We've run into this problem internally a few times (once this week even).  If you find new evidence please reopen.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002", "body": "Aha - ty.  The source from the last push on github is ahead of the last jar we cut.  We no longer use reflections, but instead a compile-time annotation processor, see: https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/args/BUILD\n\nI'll push the updated jars and then close.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052", "body": "I'm in process of pushing the fixed jars, but note the previous rev of 3rdparty/BUILD https://github.com/twitter/commons/blob/89ae581d728aecc39bde1e8843209a0998cd2b96/3rdparty/BUILD : 130 \nIn the old args setup we ourselves exclude old guava for the reasons you're encountering.  Afaict excludes are not transitive in ivy or maven worlds, ie: if we exclude some artifacts, users of our artifact must also choose to add the excludes (zookeeper -> log4j case in point), they won't automatically propagate.  I may be completely wrong on this point though.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748", "body": "Ok - should be good to go now: http://twitter.github.com/commons/apidocs/index.html#com.twitter.common.zookeeper.Group\nPublished @ 0.0.25 -> args 0.1.10 -> args-apt 0.0.1\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190", "body": "Sorry - just noticed this issue.   There seem to be a few bugs here:\n1.) tryLock(long, TimeUnit) clocking forever is clearly one bug.\n2.) cleanup() / the ublic methods should throw documented unchecked exceptions at the very least\n\nThe 1st issue you mention can't be fully right.  A session timeout implies the lock ephemeral node dies which release the lock.  A disconnect is expected to happen and should not affect holdig of the lock, only session expiry or explict release should relinquish the lock.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100", "body": "Thanks for the report, fixed here: https://github.com/twitter/commons/commit/faaa279231a432fef0d3613d92a769f7f432c96c\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855", "body": "There is no plan to fix this TODO in the near term - the [loadbalancing](https://github.com/twitter/commons/tree/master/src/java/com/twitter/common/net/loadbalancing) has been pure client side so far for internal use.  We've switched nearly all internal uses of ThriftFactory/Thrift internally to finagle and so this bit of code has not seen active development in ~6 months.  Consider making this switch as well, our internal effort towards RPCs is all focused here and the client builder already supports a configurable connection [max idle time](https://github.com/twitter/finagle/blob/master/finagle-core/src/main/scala/com/twitter/finagle/builder/ClientBuilder.scala#L460) that does what you want.\n\nThat said, ee'd happily accept a patch.  Taking a quick look, it seems like adding a forwarding ConnectionPool that only managed idle timeouts would be straight forward.  The messier bit would be wiring this option in through ThriftFactory/Thrift.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/897804", "body": "testing:\n$ ./pants src/java/com/twitter/common/zookeeper:client\n$ ./pants src/java/com/twitter/common/zookeeper:node\n$ ./pants src/java/com/twitter/common/zookeeper:map\n$ ./pants src/java/com/twitter/common/zookeeper:group\n$ ./pants src/java/com/twitter/common/zookeeper:partitioner\n$ ./pants src/java/com/twitter/common/zookeeper:candidate\n$ ./pants src/java/com/twitter/common/zookeeper:lock\n$ ./pants src/java/com/twitter/common/zookeeper:server-set\n$ ./pants src/java/com/twitter/common/zookeeper:singleton-service\n$ ./pants src/java/com/twitter/common/zookeeper\n$ ./pants tests/java/com/twitter/common/zookeeper\n$ ./pants list src/java/com/twitter/common/zookeeper --provides\nsrc/java/com/twitter/common/zookeeper/BUILD:client com.twitter.common.zookeeper#client\nsrc/java/com/twitter/common/zookeeper/BUILD:node com.twitter.common.zookeeper#node\nsrc/java/com/twitter/common/zookeeper/BUILD:map com.twitter.common.zookeeper#map\nsrc/java/com/twitter/common/zookeeper/BUILD:lock com.twitter.common.zookeeper#lock\nsrc/java/com/twitter/common/zookeeper/BUILD:group com.twitter.common.zookeeper#group\nsrc/java/com/twitter/common/zookeeper/BUILD:partitioner com.twitter.common.zookeeper#partitioner\nsrc/java/com/twitter/common/zookeeper/BUILD:candidate com.twitter.common.zookeeper#candidate\nsrc/java/com/twitter/common/zookeeper/BUILD:server-set com.twitter.common.zookeeper#server-set\nsrc/java/com/twitter/common/zookeeper/BUILD:singleton-service com.twitter.common.zookeeper#singleton-service\nsrc/java/com/twitter/common/zookeeper/BUILD:testing com.twitter.common#zookeeper-testing\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/897804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109239", "body": "Thats sounds like an old pants.pex.  I'm not sure what your setup is, but you need to rebuild pants.pex.  This is done in the commons repo with:\n\n``` console\nrm pants.pex\n./pants.bootstrap\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8923242", "body": "Was there a reviewboard for this?  Standard operating procedure is to post a review to rbcommons and apply the final shipped change via `rbt patch -c [RB ID]` which avoids merges and leaves a review trail in the commit message itself.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8923242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8924057", "body": "I got here directly from a red travis build that I re-started (now green).  Thanks for the link.  So this was all kosher mod the change application to master at the very end.  I'll need to ressurrect the contirbutor guide info that went away when pants migrated out of commons.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8924057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8939182", "body": "...and this change never made it to (twitter/commons) master.  I must have followed a _branch_ red ci to a _clone_ master merge which is all fine.  Sorry for the noise.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8939182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972", "body": "typo? src/java/com/twitter/common/commons/BUILD does not exist\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995", "body": "With a new name and some docs, I'd prefer this be elevated to the fundamental public interface for the user-supplied node value materializer.  I think anytime you have a function that takes more than 1 arg in a public interface, its more clear to create a dedicated interface.  This affords an opportunity to choose a better name than apply if one exists and also choose a more apt name for the function interface.  I think the benefits this bestows users of the api often outweigh the inconvenience to the library author and those api users that might benefit from something like Functions.compose for example. \n\nNaming suggestion:\ninterface NodeDeserializer<T> {\n  T deserialize(byte[] data, Stat stat);\n}\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270", "body": "kill extra blank line above and kill @Nullable below - looks like you never pass null\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275", "body": "Add T docs:\n[newline]\n@param <T> .....\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280", "body": "this should chain to once of the creates below\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975", "body": "Hah - this actually fixed problems with classes being examined by checkstyle that depended on thrift gen code iirc.  I'll test on our codebase to confirm.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015", "body": "you could use self.context.id\nsee context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\nIf you wan't to change that to use sha1 instead of md5 - sgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912", "body": "I think MockPantsTarget can just extend object now\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919", "body": "this fellow should have a license header too - Foursquare Labs lgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952", "body": "> 100 cols\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162", "body": "Yeah - so the translator can only in practice translate for the current platform.  If the pants.ini or python_binary asks for a non-native platform, without this fix, a SourceLink will happily build for the native platform and return success.  We ask for linux - it hands us back mac.  This in fact accounts for many surprise build on mac, deploy to linux runtime failures at Twitter today.  I tried 3 variants of the fix - the other 2 were in Obtainer and in *Link - I landed here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226", "body": "Yup - Benjy added the old eggs (https://github.com/twitter/commons/tree/binaries/pants/third_party/python/dist) so I'll fix down.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566", "body": "Oops - read better and you're right - link.platform should be Platform.current()\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ericzundel": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/380", "title": "fnmatch_translate_extended() incorrectly translates wildcard pattern", "body": "I found that the fnmatch_translate_extended translation of the pattern 'squareup/inventory/adjustment*.proto' to a regular expression did not match the string 'squareup/inventory/adjustment.proto'\n\nThis is because the re returned expects at least one character to replace '*' in the expression above:\n\n```\nfrom twitter.common.dirutil.fileset import fnmatch_translate_extended\npattern = fnmatch_translate_extended('squareup/inventory/adjustment*.proto')\n(Pdb) p pattern\nu'squareup\\\\/inventory\\\\/adjustment([^/]+)\\\\.proto\\\\Z(?ms)'\n```\n\nA better translation would be to replace the '+' with '*':\n\n```\nu'squareup\\\\/inventory\\\\/adjustment([^/]*)\\\\.proto\\\\Z(?ms)'\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/381", "title": "Bugfix for fnmatch_translate_extended() to match zero characters for '*'", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/306", "title": "Adds a DefaultOrderedDict class", "body": "This new class is meant to be a substitute for defaultdict().   I wanted to use it in pants because I'm trying to get to the bottom of what seems to be non-deterministic behavior in ordering the classpath for jvm compiles between different machines both working from head of master in the same repo.\n\nI also added some tests for OrderedDict while I was at it.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/6388651", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6388651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/6388662", "body": "There is one thing, it seems that the attribution to scottb@squareup.com might have gotten lost.  \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6388662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wanggaohang": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/378", "title": "TMonitoredProcessor has some problems", "body": "position\uff1acom.twitter.common.thrift.monitoring.TMonitoredProcessor\n1.when client transport is closed,code wrapped.process(in, out) will throws an exception even client donot invoke any service method.so this method can only monitor long-connect thrift client.\n2.the time computer way is wrong,because long startNanos = System.nanoTime(); will execute even no thrift client invoke any service method.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stuhood": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/06905dc0f1a26440a79ff1164831c85ce2d1bdf0", "message": "Update to pants 1.4.0rc0 (#457)\n\n* Update to 1.4.0rc0\r\n\r\n* Require JDK8.\r\n\r\n* Skip scalafix for now.\r\n\r\n* Remove newly detected cycle due to isolated python tests."}, {"url": "https://api.github.com/repos/twitter/commons/commits/2fe96bdcd69ba894a43157809a267674ad0d0a47", "message": "New binary url."}, {"url": "https://api.github.com/repos/twitter/commons/commits/edbdb602042b0fa5fb7e4bdd886ddb0ab53add11", "message": "Update to 1.3.0, and fix warnings. (#453)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/cfd86c13d32c4dc6a3c19dcba66c5f7d96ed1016", "message": "Very likely to be the final release candidate! (#452)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2de63c8032ab01d90dce47ee28263cb414943a80", "message": "Upgrade to pants 1.3.0rc1 (#451)\n\n* Upgrade to 1.3.0rc1\r\n* Remove dead target, and fix argument ordering in ci.sh\r\n* Enable storing the buildcache in travis` cache.\r\n* Merge JVM target sets, drop a bunch of unnecessary test aliases.\r\n* Drop remote_python_thrift_fileset, fix resource definitions.\r\n* Clear RootMetrics (singleton... yuck) before use, and skip flaky test."}, {"url": "https://api.github.com/repos/twitter/commons/commits/c9c275907f154aac69e2d16ed64861374e1d27c4", "message": "Bump pants to 1.3.0.dev14 and fix deprecation warnings (#449)\n\n### Problem\r\n\r\nThe 1.2.1 upgrade was incomplete, and didn't update the ci.sh script for python.\r\n\r\n### Solution\r\n\r\nBump to a newer version, allow prerelease python dependencies, raise the python version constraint, and remove deprecated flags."}, {"url": "https://api.github.com/repos/twitter/commons/commits/4360d424d66f8e2eabc8c35021994a0263eae3ef", "message": "Update to pants 1.2.1 (#448)\n\n### Problem\r\n\r\ncommons is on a >1 year old, pre-`1.0.0` version of pants.\r\n\r\n### Solution\r\n\r\nUpdated to the latest stable version and got the majority of the tests passing."}, {"url": "https://api.github.com/repos/twitter/commons/commits/02833f537fe7ad19dee71b8631acd19fc7c9e933", "message": "Drop rbcommons in favor of github reviews. (#446)\n\n### Problem\r\n\r\nTwitter has decided to move away from RBCommons for external contributions, at least partially because of the improvements to Github reviews... but also due to a unanimous decision from the pantsbuild/pants project to move away from RBCommons as well (the largest project that was using rbcommons).\r\n\r\n### Solution\r\n\r\nUpdate documentation and scripts to describe a Github-pull-request-based workflow.\r\n\r\n### Result\r\n\r\nAll future review should be accomplished via Github pull requests."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brutkin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/ea422dd91e35d302f87c80433615aa9b946b969d", "message": "Add option to sort commands names in python app help (#455)\n\n* Fix python test command in README\r\nAllow sorting of command names for help in python apps\r\n\r\n* Jcohen feedback - make sort option cleaner"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/425", "title": "[python zookeeper] Add member_id to ServiceInstance object if provided.", "body": "Add member_id to ServiceInstance object if supplied when creating it and make that the default action when creating a serverset list. This is mostly useful for reconciling issues with the serverset e.g. duplicate registration.\n\nTests all pass:\n$ ./pants test tests/python/twitter/common/zookeeper:all\n11:22:40 00:02         [chroot]============== test session starts ===============\n                     platform darwin -- Python 2.7.10 -- py-1.4.31 -- pytest-2.6.4\n                     plugins: cov, timeout\n                     collected 85 items\n\n```\n                 tests/python/twitter/common/zookeeper/kazoo_client_test.py .\n                 tests/python/twitter/common/zookeeper/group/test_active_kazoo_group.py ................................................\n                 tests/python/twitter/common/zookeeper/group/test_kazoo_group.py ..................\n                 tests/python/twitter/common/zookeeper/serverset/test_endpoint.py ............\n                 tests/python/twitter/common/zookeeper/serverset/test_kazoo_serverset.py .....\n                 tests/python/twitter/common/zookeeper/serverset/test_serverset_unit.py .\n\n                 =========== 85 passed in 23.80 seconds ===========\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maheshgaya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/45a0159a8e170baaf88103322cfacb2a0e073405", "message": "docs: updated broken link"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BobbyD-FL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/b97322f923bb75b3174693c739f7fca682d3fcd7", "message": "Bump Version to 0.3.9\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167790573\n\nBugs closed: 443\n\nReviewed at https://rbcommons.com/s/twitter/r/4313/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/fd79470188bb9a1f96c8a8f4368a25627bd03022", "message": "Bump Version to 0.3.8\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167517517\n\nBugs closed: 441\n\nReviewed at https://rbcommons.com/s/twitter/r/4307/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/18d4bbc8fb1c9fc5a2bcf9c3190aefcfcf36890b", "message": "Added CommandUtil.cmd_within_path() within twitter.common.util.command_util and patched twitter.common.fs.hdfs\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/167214107\n\nBugs closed: 440\n\nReviewed at https://rbcommons.com/s/twitter/r/4302/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chickenbellyfinn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7a61c23cc0085329bc95e762701ea66c5050e7a7", "message": "Fix AttributeError in HDFSHelper constructor (#436)\n\nuse_hadoop_v1 isn't a member variable. \r\nhttps://github.com/twitter/commons/issues/435"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drewrothstein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/77b31021cc19410aac060887dded2319c9c62814", "message": "Bump VERSION to 0.3.6.\n\nBugs closed: 434\n\nReviewed at https://rbcommons.com/s/twitter/r/4109/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/b444e9ea95a9b6f9699e57db88cdc1a15857aabd", "message": "[hadoop] change hadoop to hdfs cli\n\n[hadoop] add v1 option but default to hdfs\n\nGitHub: https://github.com/twitter/commons/pull/433/\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/141925751\n\nUpdated Travis: https://travis-ci.org/twitter/commons/builds/143485107\n\nBugs closed: 433\n\nReviewed at https://rbcommons.com/s/twitter/r/4048/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atollena": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/c19dcc8820641948a079c6dfe6e463a53cb51f69", "message": "Merge pull request #426 from atollena/endpoint-ip-addresses\n\npython: Add IP addresses to serverset entries"}, {"url": "https://api.github.com/repos/twitter/commons/commits/a85b7ad9aae1150190aa8be30b83e5f0bb91508b", "message": "python: Add IP addresses to serverset entries\n\nServerSet entries contain hostnames that require a DNS lookup before\nuse. When hostnames map to a unique, fixed IP address, this additional\nlookup is unnecessary and can put strain on DNS infrastructure in large\ndeployments.\n\nThis change adds 2 optional fields to server set endpoints: `inet` and\n`inet6` respectively for a human readable representation of an IPv4 and\nof an IPv6 address.\n\nHostnames are still mandatory, for backward compatibility with clients\nthat expect those fields. Port is untouched."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "a-sahdev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/456", "title": "fixed issue #329", "body": "### Problem\r\n\r\nThis fixes issue #329 , where one process was reading a file partially written by another process.\r\n\r\n### Solution\r\n\r\nOnly open the file once the 'if onwait' is true. This is done by moving the file read operation within the if statement.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "exarus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/444", "title": "Update styleguide.md", "body": "I think that \n\n> `(a << (8 * n) + 1) | 0xFF`\n> is a bit less obvious than:\n> `(a << (8 * n + 1)) | 0xFF`\n> Because it's a bit harder to guess which has a higher precedence: `+` or `>>`.\n> But muck easier to guess that a `*` has a higher precedence than `+`. Except that, `*` is placed left, so even if the reader is confused about the precedence of `+` and `*`, than he may just apply those operations one by one from left to right just as they would be with the same precedence.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sttts": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/423", "title": "Fix Zookeeper group member listener leak in leader election", "body": "The Candidate implementation leaks GroupChangeListener objects when abdicating\nleadership. These objects are registered as watches for group members and are\nnever deregistered. Consequently, one gets more and more ugly messages like\n\n  \"Current member ID %s is not a candidate for leader, current voting: %s\"\n\nin the logs.\n\nThis change only creates one watch for the Candidate implementation and reused it\nto avoid the leak (note: there is no way to actually remove a watch that has\nbeen registered before).\n\nFixes https://github.com/mesosphere/marathon/issues/2419.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesbroadhead": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/421", "title": "[check.pex] rm UPPER_SNAKE_CASED rule", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ameya-pandilwar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/420", "title": "Updated comparisions of floating values for NaN", "body": "Fix for #322 \n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/419", "title": "Fix bug in method for checking name collision", "body": "Fix for #413 \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mandar-Shinde": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/416", "title": "Updated README.md with markup for github", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mzhaom": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/415", "title": "Switch certain usage of deprecated guava API to new ones.", "body": "IputSupplier<? extends InputStream>  has been deprecated by ByteSource.\nhttp://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/InputSupplier.html\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santazhang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/390", "title": "fix _make_proxy_function() in twitter/common/app/__init__.py", "body": "`method_name` should be used instead of `attribute`.\n\n`attribute` is actually a global variable introduced later. Current code happen to work because calling `_make_proxy_function(attribute)` makes `method_name` equal to `attribute`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "christian-esken": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/373", "title": "Annotation based skipping of fields in ObjectSizeCalculator", "body": "This change adds annotation support to ObjectSizeCalculator. The whole object tree below a field annotated with ObjectSizeIgnoreField is ignored. \n## When to use\n\nThis is useful if there are references to other objects not of interest. For example, objects from a DB may be cached in the heap. If one measures that Cache separately, there may be no need to measure references from other places to those objects (again). Also, references to a classloader (directly or indirectly via a Thread instance) can end up with measuring the whole heap.\n## Technical details\n\nIgnoring means to ignore the whole object subtree _below the field_. The field itself is counted normally: _References_ are counted with the size of a reference in the memory model. As _primitive types_ are never shared, they are not ignored and thus always counted.\nThe annotation class can be freely chosen via setIgnoreFieldAnnotation(), to avoid hard runtime dependencies to ObjectSizeCalculator  or ObjectSizeIgnoreField.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benpoliquin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/358", "title": "Windowed.getCurrentIndex() changed int to long", "body": "When using e.g. WindowedStatistics with a time window/number of slice combination that results in a sliceDuration of less than 662 ms(currently) index calculation in Windowed.getCurrentIndex() fails because System.currentTimeMillis()/662 > Integer.MAX_VALUE and casting it to int produces unpredictable results.\n\n\"Best case\" is that getCurrentIndex() returns a negative value (as happened to me), causing an ArrayIndexOutOfBoundsException because the whole code in sync() is skipped and index will remain at the initial value of -1.\n\nThis is Issue #355 .\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinfeng": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/354", "title": "add cmdline argFileAllowed attribute to support @argfile for those options with extremely long values", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/340", "title": "Use new Travis CI container infrastructure", "body": "http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/\n\nSigned-off-by: Chris Aniszczyk zx@twitter.com\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162", "body": "Any reason Maven isn't used here? It's pretty much the standard build system for open source java stuff.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648", "body": "My pain point is that if you want people to contribute, use a standard build technology. I understand I'm saying this as an outsider though so take it like you wish.\n\nMaven3 is quite a bit faster than maven2 these days, even supports OSGi. As a person who spent migrating the majority of eclipse.org's infrastructure to maven3 it doesn't suck that bad anymore. It has a large ecosystem where you can easily integrate with tools like Hudson/Jenkins, code coverage etc... It would be nice if this would be investigated in the future again.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rgs1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/307", "title": "Allow properties dict along within a ServiceInstance", "body": "When joining a ServerSet, it can be handy to attach some extra data to\nthe published ServiceInstance (i.e.: debugging info, service version,\netc.). This is expressed in the form of a <str, str> properties dict.\n\nThis only takes effect when reading/writing JSON (for now).\n\nSigned-off-by: Raul Gutierrez S rgs@twitter.com\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simeonf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/262", "title": "Building sphinx docs for src/python/twitter/commons", "body": "I added a docs folder for the python twitter.commons stuff. The source for much documentation is an email thread from Brian Wickman so it should be mostly correct.\n\nI also did some autodocing to pull in docs in docstrings in the source. This occasionally necessitated sphinxifying the docstrings to supress warnings/errors or rendering bugs.\n\nBuild the docs by installing sphinx and running:\n\n```\nsphinx-build -b html -d ./docs/_build/doctrees  ./docs ./docs/_build/html \n```\n\nfrom the src/python/twitter/commons directory.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkwarren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/224", "title": "Add a close() method to ZooKeeperMap.", "body": "Enable a ZooKeeperMap user to signal that it no longer requires the map\nany longer by calling ZooKeeperMap.close(). This removes any persistent\nwatchers against ZooKeeperClient (allowing it to be GC'd), stops\nregistering any additional watchers against ZooKeeper, and prevents any\nadditional callbacks to the ZooKeeperMap.Listener interface.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teddziuba": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/192", "title": "Staked bootstrapping distribute version", "body": "This commit stakes the version of `distribute` that Pants depends on to `0.6.34`. It also adds a guard check against failure to bootstrap `pkg_resources.py` or `setuptools` into the Pants build.\n\nThe problem with using `distribute>=0.6.24` as a requirement is that it's possible to pick up `distribute>=0.7` which is actually a meta-package, and does not contain `pkg_resources.py` or `setuptools`, it simply declares `setuptools` as a dependency. Since the iteration to choose the `distribute` package to bootstrap in is eager, and happens in no particular order, this is a thing that could happen easily (it did on my build).\n\nIn normal `pip` land, there is no problem with this, but the way that Pants bootstraps `distribute` makes it difficult, since it doesn't pull in the transitive closure of dependencies, it simply iterates over the files in the `distribute` package and copies them to chroot.\n\nIn the case that it picks up `distribute>=0.7`, this results in there being no `pkg_resources.py` or `setuptools` copied into subsequent .pex files. Normally this would not cause any obvious problems, since most environments where a .pex file would run include `setuptools` in their system Python installations.\n\nHowever, if you work where I do, the production machines are very slimly configured, and do not include a reasonable system Python. This results in the bootstrap script inside the .pex file to fail to import `pkg_resources.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wfarner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085", "body": "All should be fixed, with the exception of src/thrift/org/apache/scribe/0.1.2/fb303.thrift, i'm not sure if we have the authority to re-license that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646", "body": "Just wanted to ACK that this is on the radar.  Expect some useful feedback by end of business week at the worst.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516", "body": "Remove trailing space in \"Logger Config \".\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520", "body": "Indenting is off here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545", "body": "Feel free to collapse this td tag to a one-liner: `<td>$logger.name$</td>`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558", "body": "Don't space-pad attributes, e.g. `class='selectlevels'`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170", "body": "Any way to vote to change it to use maven? :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ewhauser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405", "body": "Have you actually tried to compile and build with pants?  It's exponentially faster than a Maven build would be with 120 projects in a multi-project build.  \n\nStop complaining because you don't want to take the time to understand their tool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ntolia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988", "body": "Evidently, I don't have permission to reopen.\n\nThe problem is definitely on the twitter commons side as seen in the relevant part of `mvn dependency:tree` below. `com.twitter.common.args` pulls in an old version of `org.reflections` which in turn depends on `collections`. Now, the reflections package moved to Guava a little while ago - https://code.google.com/p/reflections/source/diff?spec=svn111&r=105&format=side&path=/trunk/reflections/pom.xml&old_path=/trunk/reflections/pom.xml&old=104 - but evidently the args package isn't pulling in the most recent bits.\n\n```\n[INFO] \\- com.twitter.common:zookeeper:jar:0.0.24:compile\n[INFO]    +- org.apache.zookeeper:zookeeper:jar:3.3.3:compile\n[INFO]    |  +- log4j:log4j:jar:1.2.15:compile\n[INFO]    |  |  +- javax.mail:mail:jar:1.4:compile\n[INFO]    |  |  |  \\- javax.activation:activation:jar:1.1:compile\n[INFO]    |  |  \\- javax.jms:jms:jar:1.1:compile\n[INFO]    |  \\- jline:jline:jar:0.9.94:compile\n[INFO]    +- com.twitter.common:args:jar:0.1.7:compile\n[INFO]    |  \\- org.reflections:reflections:jar:0.9.5-RC2:compile\n[INFO]    |     +- com.google.collections:google-collections:jar:1.0:compile\n[INFO]    |     +- javassist:javassist:jar:3.8.0.GA:compile\n[INFO]    |     \\- dom4j:dom4j:jar:1.6:compile\n[INFO]    |        \\- xml-apis:xml-apis:jar:1.0.b2:compile\n[INFO]    +- com.twitter.common:base:jar:0.0.17:compile\n[INFO]    +- com.twitter.common:io-json:jar:0.0.2:compile\n[INFO]    |  +- com.google.code.gson:gson:jar:1.6:compile\n[INFO]    |  \\- com.twitter.common:io:jar:0.0.10:compile\n[INFO]    +- com.twitter.common:io-thrift:jar:0.0.10:compile\n[INFO]    |  \\- org.slf4j:slf4j-jdk14:jar:1.5.10:compile\n[INFO]    +- com.twitter.common:net-util:jar:0.0.12:compile\n[INFO]    |  \\- com.twitter.common:collections:jar:0.0.16:compile\n[INFO]    +- com.twitter.common:dynamic-host-set:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:net-pool:jar:0.0.12:compile\n[INFO]    |  +- com.twitter.common:stats:jar:0.0.14:compile\n[INFO]    |  |  +- com.twitter.common:stats-provider:jar:0.0.8:compile\n[INFO]    |  |  +- com.twitter.common:application-action:jar:0.0.6:compile\n[INFO]    |  |  \\- com.twitter.common:util-sampler:jar:0.0.9:compile\n[INFO]    |  \\- com.twitter.common:util-system-mocks:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:quantity:jar:0.0.14:compile\n[INFO]    +- com.twitter.common:util:jar:0.0.20:compile\n[INFO]    |  \\- com.twitter.common:jdk-logging:jar:0.0.5:compile\n[INFO]    \\- com.twitter.common:service-thrift:jar:0.0.10:compile\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090", "body": "That would be correct. Adding the following to my ZK import does seem to fix the javadoc portion of the build but I will wait for the updated jars. Thanks for the quick turnaround!\n\n```\n        <exclusion>\n          <groupId>com.google.collections</groupId>\n          <artifactId>google-collections</artifactId>\n        </exclusion>\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396", "body": "Works great. Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819", "body": "And, while we are on this issue, why does the lock convert a ZooKeeper exception into a runtime/unchecked exception in cleanup() - https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/DistributedLockImpl.java#L206 ? Makes it complicated to properly unlock if a disconnection happens.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047", "body": "Another unexpected thing. `tryLock(long, TimeUnit)` does not actually timeout as expected if no ZK server is found and instead seems to block forever. I believe this is because of `prepare()` which calls `ZooKeeperUtils.ensurePath()`. `ensurePath()` can block forever because it calls `ZooKeeperClient.get()`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543", "body": "About the first issue, lets say that a client creates a lock on a particular path. It manages to grab the lock but is disconnected at some future point in time. The ephemeral node gets destroyed and some other client can therefore grab the lock. However, the first client still assumes it has it and the lock will not get any notification.\n\nWith regards to the other bugs, I also found a few more issues. Would you be willing to accept a patch like https://github.com/ntolia/commons/commit/89280c50413f3b92ea142cf17e1c917dcbb119a3 ? I have a similar patch working in a private repository but cannot seem to get pants to work for me. After fixing some python incompatibility issues, it can't seem to find the ' spy#memcached;2.4.2' dependency.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794", "body": "Bump.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556", "body": "Florian, can you give me an idea of the unit tests you are looking for? Most of my patch has to do with correctness and cleanups. The only thing I can think of right now is a test that checks that tryLock(long timeout, TimeUnit unit) does not block forever if no server is present.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "florianleibert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581", "body": "Hi - \njust got around looking at this. Thanks for your input.\n\nFor the issue that you're reporting - would you mind updating the unit test to reflect the issue you are seeing? That way, I'll be able to verify that your patch works.\n\nThanks!\nFlorian\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jonboulle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/2524994", "body": "FWIW, the error was because you wanted s/zincfile/cachepath/ on line 62 :-) \n(zincfile is not defined if an exception got thrown during its assignment)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/2524994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "simonandluna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/4657759", "body": "Wow, thanks for fixing it so quickly.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/4657759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "betepahos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5109153", "body": "any idea why i am geting :  File \"/media/datastore/Projects/twitterComonns/comgit/commons/BUILD.commons\", line 25, in <module>\n          from twitter.pants.base.build_environment import get_buildroot\n      ImportError: No module named build_environment\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109293", "body": " rebuilded - the same result i have 0.0.13 installed tried both the builded pex and the pip installed one with the same result \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109389", "body": "http://pastie.org/8645818 -- something is going on  wrong on pants.bootstrap \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5607662", "body": "just this one and its good to go. i have builded it and has no more surpises :)\n\ncommons/src/python/twitter/common/python/translator.py\", line 114, in translate\nos.rename(dist_path, target_path)\nOSError: [Errno 18] Invalid cross-device link\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5607662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "benjyw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5459257", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5459257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5459283", "body": "LGTM\n\nIn future can we not put large style changes in the same commits as real code changes? It's difficult to review such changes when you don't know if you're supposed to be looking for meaningful differences or not.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5459283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697", "body": "I _think_ the pull request now contains a revert for the checkstyle\nthing. It also contains other commits that are already in your repo,\nnot sure why.\n\nOn Tue, Apr 3, 2012 at 2:26 AM, John Sirois\nreply@reply.github.com\nwrote:\n\n> > @@ -120,18 +121,39 @@ def execute(self, targets):\n> > \u00a0 \u00a0 \u00a0 \u00a0of (conf, jar path).\n> > \u00a0 \u00a0 \u00a0\"\"\"\n> > - \u00a0 \u00a0def dirname_for_requested_targets(targets):\n> \n> you could use self.context.id\n> see context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\n> If you wan't to change that to use sha1 instead of md5 - sgtm\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/twitter/commons/pull/22/files#r638015\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599", "body": "Fixed as requested.\n\nOn Tue, Sep 11, 2012 at 7:42 PM, brian wickman notifications@github.comwrote:\n\n> In src/python/twitter/pants/targets/internal.py:\n> \n> > @@ -62,7 +62,7 @@ def sort_targets(cls, internal_targets):\n> >      def invert(target):\n> >        if target not in visited:\n> >          visited.add(target)\n> > -        if target.internal_dependencies:\n> > -        if hasattr(target, 'internal_dependencies') and target.internal_dependencies:\n> \n> if getattr(target, 'internal_dependencies', None):\n> ...\n> \n> achieves the same thing\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/twitter/commons/pull/80/files#r1582996.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380", "body": "Changed this to use isinstance(), but will leave the larger change for a separate commit, if that's OK?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wickman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5462997", "body": "FYI this is fixed in my rework_dependency_resolution branch:\n\n```\n--- a/src/python/twitter/pants/targets/python_target.py\n+++ b/src/python/twitter/pants/targets/python_target.py \n@@ -42,3 +42,10 @@ class PythonTarget(TargetWithDependencies, TargetWithSources):\n       except ValueError as e:\n         raise TargetDefinitionException(str(e))\n\n+  def resolve(self):\n+    for dep in super(PythonTarget, self).resolve():\n+      yield dep\n+    if self.provides:\n+      for binary in self.provides.binaries.values():\n+        for dep in binary.resolve():\n+          yield dep\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5462997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5607866", "body": "damn!  ok.  i'll audit the code on monday and replace all the os.renames with safe_rename.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5607866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996", "body": "if getattr(target, 'internal_dependencies', None):\n  ...\n\nachieves the same thing\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724", "body": "in general you want to avoid type(foo) == concrete_type and instead use isinstance, e.g. isinstance(classifiers, list).  of course, there are other iterable things that are not lists, so to be fully compatible, you might want something like:\n\n``` python\ndef maybe_list(value, expected_type=str):\n  from collections import Iterable\n  if isinstance(value, expected_type):\n    return [value]\n  elif isinstance(value, Iterable):\n    real_values = list(iter(value))\n    if not all(isinstance(v, expected_type) for v in real_values):\n      raise ValueError('Element of list is not of type %r' % expected_type)\n    return real_values\n  else:\n    raise ValueError('Value must be a %r or iterable of %r' % (expected_type, expected_type))\n```\n\nthen in several places in twitter-commons, we should just be doing, e.g.\n\nself.classifiers = maybe_list(classifiers)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447", "body": "Please build artifacts for macosx-10.4-x86_64\n\nAs it stands, 10.8-intel won't work with most Twitter laptops, including mine, whereas 10.4-x86_64 should include everything we've had in the last four years.\n\nSee https://gist.github.com/wickman/5550908 for a bootstrapper script for rolling your own set of Python interpreters that build 10.4-x86_64.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479", "body": "This doesn't make sense to me.  'platform' is never populated for SourceLinks -- how could this ever be used?  SourceLinks are only e.g. .zip, .tar.gz, .tgz.  Am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "marcottedan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/6015799", "body": "Do you avoid static import for performance issues or to ensure readable code and enforce standards?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6015799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Yasumoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/8923996", "body": "Did you get here from #335 ? If so, see #334 and https://rbcommons.com/s/twitter/r/1460/\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8923996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "leothekim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406", "body": "Indeed. I meant to type \"collections\" there.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427", "body": "Sounds sensible. I think I'll rename 'createWithStat' to 'create'. I don't like the name, and only chose it because the compiler would use type erasure to translate Function&lt;byte[], T&gt;.\n\nI'll add NodeDeserializer to the zookeeper package.\n\nUpdate: Looks like github doesn't html-escape arrow brackets.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ryan-williams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185", "body": "good point. done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"jayeye": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/454", "title": "The release of twitter.common.app on pypi does not work with python3.5 (and possibly earlier)", "body": "This happens pretty much everywhere I've tried it, but to make sure I checked it in a fresh installation of python3.5 on Amazon Linux:\r\n\r\n    $ cat x.py\r\n    from twitter.common import app\r\n\r\n    $ python3.5 x.py\r\n    Traceback (most recent call last):\r\n      File \"x.py\", line 1, in <module>\r\n        from twitter.common import app\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/__init__.py\", line 39, in <module>\r\n        from .application import Application\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/application.py\", line 39, in <module>\r\n        from twitter.common.process import daemonize\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/__init__.py\", line 7, in <module>\r\n        from .process_provider_ps import ProcessProvider_PS\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/process_provider_ps.py\", line 2, in <module>\r\n        from process_handle_ps import ProcessHandlePs\r\n    ImportError: No module named 'process_handle_ps'\r\n\r\nAnd here is what's installed:\r\n\r\n    $ pip-3.5 freeze\r\n    twitter.common.app==0.3.9\r\n    twitter.common.collections==0.3.9\r\n    twitter.common.contextutil==0.3.9\r\n    twitter.common.dirutil==0.3.9\r\n    twitter.common.lang==0.3.9\r\n    twitter.common.log==0.3.9\r\n    twitter.common.options==0.3.9\r\n    twitter.common.process==0.3.9\r\n    twitter.common.string==0.3.9\r\n    twitter.common.util==0.3.9\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dslztx": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/438", "title": "I find a bug in src/java/com/twitter/common/objectsize/ObjectSizeCalculator.java", "body": "There are some classes as follows:\n\n```\nclass A {\n    int a;\n}\n\n\nclass B extends A {\n    long b;\n}\n\n\nclass C extends B {\n    char c;\n}\n\npublic class Main\n{\npublic static void main(String[] args)\n{\n    C c=new C();\n    System.out.println(ObjectSizeCalculator.getObjectSize(c));\n}\n}\n```\n\nIn 32 bits JDK,the result of your program execution is **24**,but the exact result is **32**.\nI also write a program for calculating java object size,please take a look at [java-object-size](https://github.com/dslztx/java-object-size)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwlzn": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/437", "title": "Kill twitter.common.python vestiges", "body": "a while back, `twitter.common.python` became `pex`. there are still references to `twitter.common.python` scattered in the code base - particularly, a failure in the release script:\n\n```\n                   Running register sdist upload against /Users/kwilson/dev/commons/dist/twitter.common.python-0.7.0**** Failed to install twitter.common.python-0.7.0. stdout:\nrunning register\nrunning egg_info\ncreating src/twitter.common.python.egg-info\nwriting requirements to src/twitter.common.python.egg-info/requires.txt\nwriting src/twitter.common.python.egg-info/PKG-INFO\nwriting namespace_packages to src/twitter.common.python.egg-info/namespace_packages.txt\nwriting top-level names to src/twitter.common.python.egg-info/top_level.txt\nwriting dependency_links to src/twitter.common.python.egg-info/dependency_links.txt\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nrunning check\nRegistering twitter.common.python to https://pypi.python.org/pypi\nServer response (200): OK\nrunning sdist\ncreating twitter.common.python-0.7.0\ncreating twitter.common.python-0.7.0/src\ncreating twitter.common.python-0.7.0/src/twitter\ncreating twitter.common.python-0.7.0/src/twitter.common.python.egg-info\ncreating twitter.common.python-0.7.0/src/twitter/common\ncreating twitter.common.python-0.7.0/src/twitter/common/python\ncreating twitter.common.python-0.7.0/src/twitter/common/python/http\nmaking hard links in twitter.common.python-0.7.0...\nhard linking MANIFEST.in -> twitter.common.python-0.7.0\nhard linking setup.py -> twitter.common.python-0.7.0\nhard linking src/twitter/__init__.py -> twitter.common.python-0.7.0/src/twitter\nhard linking src/twitter.common.python.egg-info/PKG-INFO -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/SOURCES.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/dependency_links.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/namespace_packages.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/requires.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/top_level.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/zip-safe -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter/common/__init__.py -> twitter.common.python-0.7.0/src/twitter/common\nhard linking src/twitter/common/python/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/base.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/common.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/compatibility.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/environment.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/fetcher.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/finders.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/installer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/interpreter.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/marshaller.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/obtainer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/orderedset.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/package.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pep425.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_bootstrapper.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_builder.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_info.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/platforms.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/resolver.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/testing.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/translator.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/util.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/http/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/crawler.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/http.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/link.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nWriting twitter.common.python-0.7.0/setup.cfg\ncreating dist\nCreating tar archive\nremoving 'twitter.common.python-0.7.0' (and everything under it)\nrunning upload\nSubmitting dist/twitter.common.python-0.7.0.tar.gz to https://pypi.python.org/pypi\n\n**** Failed to install twitter.common.python-0.7.0. stderr:\nwarning: check: missing meta-data: either (author and author_email) or (maintainer and maintainer_email) must be supplied\n\nwarning: sdist: standard file not found: should have one of README, README.rst, README.txt\n\nUpload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\nerror: Upload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\n```\n\nwe should clean this up.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/issues/430", "title": "Flaky test: tests/python/twitter/common/metrics/test_sampling.py:test_sampler_base", "body": "this can manifest in CI as:\n\n```\n                     tests/python/twitter/common/metrics/test_sampling.py F..\n                     tests/python/twitter/common/metrics/test_gauges.py ......\n\n                     ==================== FAILURES ====================\n                     _______________ test_sampler_base ________________\n\n                         def test_sampler_base():\n                           class TestSampler(SamplerBase):\n                             def __init__(self, period, clock):\n                               self.count = 0\n                               SamplerBase.__init__(self, period, clock)\n\n                             def iterate(self):\n                               self.count += 1\n\n                           test_clock = ThreadedClock()\n                           sampler = TestSampler(Amount(1, Time.SECONDS), clock=test_clock)\n                           sampler.start()\n\n                           assert test_clock.converge(threads=[sampler])\n                           test_clock.assert_waiting(sampler, 1)\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 0\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 1\n\n                           test_clock.tick(5)\n                           assert test_clock.converge(threads=[sampler])\n                     >     assert sampler.count == 6\n                     E     assert 2 == 6\n                     E      +  where 2 = <TestSampler(Thread-1 [TID=5876], started daemon 140429632481024)>.count\n\n                     tests/python/twitter/common/metrics/test_sampling.py:58: AssertionError\n                     -------------- Captured stderr call --------------\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 2.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 6.0\n                      1 failed, 21 passed, 1 warnings in 0.44 seconds =\n```\n\nbut succeeds on rebuild.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/89bc492969d735ea177374b178e39ea6cf0d85ed", "message": "Bump VERSION"}, {"url": "https://api.github.com/repos/twitter/commons/commits/941c7b4a06048e484e21f613bc04004f3756b16f", "message": "Repair ./rbt for review posting.\n\nAs Mateo noted in https://github.com/twitter/commons/pull/428, `./rbt` in the commons repo seems to have been broken @ 146de3 due to removal of the underlying virtualenv bits.\n\nThis RB restores the requisite venv deps and bumps both `virtualenv` and `rbtools` to their latest pypi versions to get `./rbt` functional again.\n\nTesting Done:\nDogfooded for this very review + green CI @ https://travis-ci.org/twitter/commons/builds/129290520 for good measure.\n\nbefore:\n\n```\n[illuminati commons (master)]$ ./rbt --version\n./rbt: line 3: build-support/python/libvirtualenv.sh: No such file or directory\n./rbt: line 4: setup_virtualenv: command not found\n./rbt: line 6: exec: rbt: not found\n```\n\nafter:\n\n```\n[illuminati commons (kwlzn/commons/rbt_fix)]$ ./rbt --version\nBootstrapping rbt with requirements RBTools==0.7.6\nUsing /Users/kwilson/Python/CPython-2.7.11/bin/python2.7\n~/dev/commons/build-support ~/dev/commons\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1799k  100 1799k    0     0  2207k      0 --:--:-- --:--:-- --:--:-- 2205k\n...\n~/dev/commons\nNew python executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python2.7\nAlso creating executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python\nInstalling setuptools, pip, wheel...done.\nCollecting RBTools==0.7.6\n  Using cached RBTools-0.7.6-py2-none-any.whl\nCollecting six>=1.8.0 (from RBTools==0.7.6)\n  Using cached six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: six, RBTools\nSuccessfully installed RBTools-0.7.6 six-1.10.0\nRBTools 0.7.6\n```\n\nReviewed at https://rbcommons.com/s/twitter/r/3858/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2097ff289d8e04040a6b004d2c6ba64a061661f0", "message": "Revert Diff 2 pants.ini changes from RB #3155"}, {"url": "https://api.github.com/repos/twitter/commons/commits/32011ab5351fea23e8c70e24e752540b06d1389f", "message": "[twitter/commons] Upgrade pants from 0.0.44 -> 0.0.59\n\nUpon merging an innocuous PR after 2+ months of no merges, CI broke in the commons repo due to https://github.com/pantsbuild/pants/issues/2566 + the public release of pytest-timeout-1.0.0 (which is visible by commons via open dep resolution against pypi). This change addresses that by upgrading the entire commons repo to pants 0.0.59 wherein #2566 is repaired.\n\n- Upgrade pants to 0.0.59.\n- Fixup various symbol references and usages throughout.\n- Update excludes syntax.\n- Upgrade to contrib python checks plugin for PythonEval (which brings along checkstyle).\n- Implement repo-wide python checkstyle suppression due to numerous checkstyle errors in the codebase.\n- Sync out latest twitter.common.args from Twitter's source repo to support removal of apt-args plugin.\n- Eliminate the apt-args plugin, which is no longer needed with isolation.\n\nTesting Done:\nhttps://travis-ci.org/twitter/commons/builds/92376412\n\nBugs closed: 414\n\nReviewed at https://rbcommons.com/s/twitter/r/3155/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/811ac6c0a31e8616c3be006e3a1b5d0b728297ec", "message": "Merge pull request #407 from johnskopis/jskopis/update-kazoo\n\nUpgrade kazoo 1.3.1 -> 2.2.1"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrwilby": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/432", "title": "Am I missing something - isn't this a thread leak?", "body": "Where does this thread (below):\n\n```\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n```\n\nget cleaned up when close() is called? I see a ton of these threads lingering around in one open source project we are using. \n## \n\n public ZooKeeperClient(Amount<Integer, Time> sessionTimeout, Credentials credentials,\n      Optional<String> chrootPath, Iterable<InetSocketAddress> zooKeeperServers) {\n    this.sessionTimeoutMs = Preconditions.checkNotNull(sessionTimeout).as(Time.MILLISECONDS);\n    this.credentials = Preconditions.checkNotNull(credentials);\n\n```\nif (chrootPath.isPresent()) {\n  PathUtils.validatePath(chrootPath.get());\n}\n\nPreconditions.checkNotNull(zooKeeperServers);\nPreconditions.checkArgument(!Iterables.isEmpty(zooKeeperServers),\n    \"Must present at least 1 ZK server\");\n\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n  @Override\n  public void run() {\n    while (true) {\n      try {\n        WatchedEvent event = eventQueue.take();\n        for (Watcher watcher : watchers) {\n          watcher.process(event);\n        }\n      } catch (InterruptedException e) { /* ignore */ }\n    }\n  }\n};\nwatcherProcessor.setDaemon(true);\nwatcherProcessor.start();\n\nIterable<String> servers =\n    Iterables.transform(ImmutableSet.copyOf(zooKeeperServers),\n        InetSocketAddressHelper.INET_TO_STR);\nthis.zooKeeperServers = Joiner.on(',').join(servers);\nthis.connectString = this.zooKeeperServers.concat(chrootPath.or(\"\"));\n```\n\n  }\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mateor": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/427", "title": "Request to update python `futures` library", "body": "The twitter.common libs depends on a pretty old version of `futures`, could you update to a more recent version?\n\nThis conflicts with the `futures` range required by some of our python libraries. `boto3-1.3.0` is the most recent example that sent me here, it requires `futures>=2.2.0,<4.0.0` for python 2.7. But this is not the first time I have seen it, just the first time I decided to try and solve the problem instead of working around it \ud83d\ude04 \n\nBoto3 requirements include [the dep here](https://github.com/boto/boto3/blob/67409f27c8e180b4e9e942fc2f795dbfc7e98c7f/setup.cfg).\n\nThe futures range above goes from 2.2.0 -> 4.0.0, but the most recent published version of `futures` is only 3.0.5, fyi.\n\nI cloned t.c. and upgraded `futures` to the minimum viable upgrade (to  `2.2.0`) and will be sending a pull request along.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/e8de9d16eda3c22c1a866178f73a12355fc5699c", "message": "Update the futures library.\n\nThis bumps futures to a more modern version,\nsome useful Python libraries are pinned to a range\nthat is later than the current t.c. `futures` version.\n\nex. boto3 is pinned to `futures>=2.2.0,<4.0.0` for python2.7\n\nThis is the minimum-viable change that makes the t.c.\nlibs compatible.\n\nTesting Done:\nRan ci.sh locally and Travis passed: https://github.com/twitter/commons/pull/428\n\nBugs closed: 427, 428\n\nReviewed at https://rbcommons.com/s/twitter/r/3857/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/431", "title": "Convert 3rdparty/python to use the python_requirements target.", "body": "Twitter commons was using a wrapper function around its python\ndependencies to create python_requirement_library targets.\nThe python_requirements library is able to understand a pip\nrequirements.txt file and convert each entry into the\npython_requirement_library target needed by Pants.\n\nThe python_requirements target uses the project name as a target\nname. The original  wrapper was maintained for a few dependencies\nwhen their name clashed with Pants BUILD file conventions.\n\nI also removed the easy_install thrift, it looks like it was\nput in place to service aurora, who was later unblocked.\n\nLet me know if you think it should be returned:\nhttps://github.com/pantsbuild/pants/issues/2533\n\nThe purpose of this change is to enable a simple interface to convert\nsome python dependencies from being hardcoded to a single rev into\nbeing able to be satisfied by a release range. I will submit\nany dependency version changes separately.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcandre": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/422", "title": "Can't find twitter common base Either in published apidocs", "body": "", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/418", "title": "Publish to Maven Central", "body": "twitter-commons has some really good stuff, especially the Zookeeper lock implementation. Could we publish twitter-commons to Maven Central, to make it easier for people to use these libs without having to link to custom artifact repos?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Abel123": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/413", "title": "bug in commons/src/java/com/twitter/common/metrics/Metrics.java", "body": "commons/src/java/com/twitter/common/metrics/Metrics.java\n\nline 39    if (gauges.containsKey(key) || counters.containsKey(key) || counters.containsKey(key)) {\n\nwhich should be     if (gauges.containsKey(key) || counters.containsKey(key) || histograms .containsKey(key)) {\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orsenthil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/411", "title": "Error while running tests. SourcePackage is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)", "body": "On master\n\n```\n$ git log origin/master -n 1 |head -n 3\ncommit d4454f233914d0a7586da8c5d07575d8b63124fe\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Mon Aug 24 15:09:53 2015\n```\n\nrunning the tests\n\n$ ./pants test tests/python/twitter/common:all\n\ngives me an error\n\n```\nException message: Package     SourcePackage(u'https://pypi.python.org/packages/source/w/wheel/wheel-0.24.0.tar.gz#md5=3b0d66f0d127ea8befaa5d11453107fd') is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)\n```\n\nIf I go back to an old commit (this was the latest which succeeded for me)\n\n```\n$ git log HEAD -n 1 |head -n 6\ncommit bc7248da0974ab8a39ca36956ac6880029b85b00\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Sun Aug 9 20:29:10 2015\n\n    Upgrade to pants 0.0.41\n```\n\nand run the tests.\n\n```\n$ ./pants test tests/python/twitter/common:all\n```\n\nThe test execution is successful.\n- The difference between these versions are only about pants version update.\n- FWIW, I tried the latest version of pants in pantsbuild/pants and **could not** reproduce this error. I am raising this against twitter/commons\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/405", "title": "checkstyle does not allow class scoped variables for staticmethod", "body": "It may be good idea to discuss this as a ticket.\n\nCheckstyle prevents the use of class scoped variables with a staticmethod. \n\n```\nclass MyClass(object):\n\n  VARIABLE = None\n\n  @staticmethod\n  def method():\n    return MyClass.VARIABLE\n```\n\n$ check.pex\n\n```\nT800:WARNING science/src/python/twitter/packer/lib/packer_client.py:046 Instead of MyClass.VARIABLE use self.VARIABLE or cls.VARIABLE with instancemethods and classmethods respectively.\n     |    return MyClass.VARIABLE\n```\n\nIt is entirely desirable to have a) staticmethod  b) have a class scoped variables in staticmethod. We do not care for subclassing in staticmethods, so enforcing the users to change it to classmethods may not be a good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7b4843fb2947ec9bc3ff7769a37d05ad2220fc48", "message": "Merge pull request #412 from landism/master\n\neliminate double slash in reviewboard urls"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923", "body": "I think, this is a typo. It should be extras_path\n\nOtherwise, it crashes with a NameError\n\nNameError: global name 'extra_paths' is not defined\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "brian-brazil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/396", "title": "com.twitter.common.zookeeper:server-set references non-existant com.twitter.common:service-thrift:jar:0.2.21", "body": "Hi,\n\nI have the following in my POM:\n\n```\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>client</artifactId>\n                        <version>0.0.8</version>\n                </dependency>\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>server-set</artifactId>\n                        <version>1.0.110</version>\n                </dependency>\n```\n\nWhich results in:\n\n```\n[ERROR] Failed to execute goal on project boxever-dropwizard-extras-load-balancer: Could not resolve dependencies for project com.boxever:boxever-dropwizard-extras-load-balancer:jar:0.7.1.62-SNAPSHOT: Failure to find com.twitter.common:service-thrift:jar:0.2.21 in http://maven.twttr.com/ was cached in the local repository, resolution will not be reattempted until the update interval of twitter-twttr has elapsed or updates are forced -> [Help 1]\n\n```\n\nand indeed there is no such version at http://maven.twttr.com/com/twitter/common/service-thrift/\n\nMy guess is that the server-set pom is out of date.\n#346 may be related.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevints": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/387", "title": "Python releases exist that contain no code changes", "body": "This is a bug in the release process. It looks like releases get created as one atomic unit. This leads to a situation where there are releases of individual component libraries that don't actually contain any code changes (and nor do their parents), leaving downstream users to resolve version conflicts that don't actually exist.\n\nFor example, twitter.common.quantity==0.3.2 and twitter.common.quantity==0.3.3 have identical code, but the twitter.common.quantity==0.3.3 requires twitter.common.lang==0.3.3, so the metadata is different. Okay, that warrants releasing a new version. But wait, twitter.common.lang==0.3.2 and twitter.common.lang==0.3.3 have identical code and no dependencies. So twitter.common.lang's version should not have been incremented, and that increment should not have cascaded to its dependees.\n\nThe alternative: a version change for a component needs to \"cascade\" to its dependees, but only when there's an actual code change. This means that a change to twitter.common.quantity source files causes an increment to its version and its dependees, but not to its parent twitter.common.lang.\n\nI'm not sure how the version strategy is implemented currently but would like to start a discussion toward changing it before the next release.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsirois": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/386", "title": "Consider restructuring python targets to be 1-1-1", "body": "See #385 for the java side of this.  In java, fine grained and deep package structures are more of-the-norm.  In python, less so; so this issue is phrased as a \"consider\".  The idea though is to eliminate most or all exclude lists in sources globs in the python codebase.  This would require re-structuring packages and thus risk breaking clients imports.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/385", "title": "Restructure java targets to be 1-1-1.", "body": "Today there are many java BUILD targets that are subsets of a package.  To maintain the BUILD files for these targets in a reasonable way, constant lists of source files are defined that can be subtracted out from target sources lists using the globs exclude facility.  At some point pants will likely remove the ability to define constants in BUILD files and this mode of defining non 1-1-1 targets will be taken away, forcing duplication of file lists and the associated maintenance risk.\n\nThere are 2 complicating factors here:\n1. re-packaging will likely break clients of the java jars - they'll need to fix imports; so, this will require a deprecation cycle\n2. IIUC the official home for the java code is still inside Twitter walls; so, this refactoring really needs to occur in Twitter's repo and then be synced out here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/0c5c6e3030b3890e20f3c2e85c5628d0ab7fc3d1", "message": "Work around lockfile break.\n\nThis pins lockfile's pbr dep on lockfile's behalf as reccomended here:\n  https://groups.google.com/d/topic/pants-devel/OnPISJosUoI/discussion\n\nTesting Done:\nCI went green here:\n  https://travis-ci.org/twitter/commons/builds/125937912\n\nBugs closed: 424\n\nReviewed at https://rbcommons.com/s/twitter/r/3762/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/342", "title": "Use Travis CIs new container based builds.", "body": "The announcement is here:\n  http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure\nThe specs here:\n  http://docs.travis-ci.com/user/workers/container-based-infrastructure\n  http://docs.travis-ci.com/user/caching/#Fetching-and-storing-caches\n\nThis also turns on caching for ~/.pants.d, ~/.ivy2\nand the current pants version bootstraped in\nbuild-support.  To make virtualenv caching work, updates\nthe virtualenv bootstrap script to use a stable directory name\nacross virtualenv versions.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768", "body": "We need to update the README and will be blogging about pants and sapling by ~end of May, but the build already works - but is custom (uses ant/ivy behind the scenes).  You need python 2.6 and ant 1.8+ installed and then, from the root of the repo, you run:\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nThis will likely fail on the 1st run and explain steps for installing a python templating library (mako) dependency.  After installing mako you should be good to go.\n\nFor example to compile all code and run all tests.\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nYou can learn a bit more using:\n$ ./pants help\nTjis will list subcommands available.\n\n$ ./pants help [subcommand]\nThis will give even more info about a particular subcommand.\n\nIn short - the repo is a monolithic source tree, but it produces many jars - vs a typical gradle/buildr/maven multi-module project where there would be a top-level project directory for each artifact-producing project.  Currently pants provides 40 thin jars from its one source tree:\n$ ./pants list --provides --provides-columns=artifact_id\ncom.twitter.common#application-action\ncom.twitter.common#application\ncom.twitter.common#application-http\ncom.twitter.common#application-modules\ncom.twitter.common#args\ncom.twitter.common#base\ncom.twitter.common#collections\ncom.twitter.common#inject\ncom.twitter.common#inject-timed\ncom.twitter.common#io\ncom.twitter.common#io-thrift\ncom.twitter.common#logging\ncom.twitter.common#dynamic-host-set\ncom.twitter.common#net-util\ncom.twitter.common#net-pool\ncom.twitter.common#net-http\ncom.twitter.common#net-http-handlers-text\ncom.twitter.common#net-http-handlers-string-template\ncom.twitter.common#net-http-handlers\ncom.twitter.common#net-http-handlers-thrift\ncom.twitter.common#net-http-handlers-time-series\ncom.twitter.common#quantity\ncom.twitter#serverset\ncom.twitter.common#stats-provider\ncom.twitter.common#stats\ncom.twitter.common#stats-jvm\ncom.twitter.common#stats-time-series\ncom.twitter.common#stats-util\ncom.twitter.common#thrift\ncom.twitter.common#jdk-logging\ncom.twitter.common#util\ncom.twitter.common#util-system-mocks\ncom.twitter.common#util-sampler\ncom.twitter.common#util-testing\ncom.twitter.common#util-caching\ncom.twitter.common#zookeeper\ncom.twitter.common#zookeeper-testing\ncom.twitter.common#stats-ostrich-adapter\ncom.twitter.common#service-thrift\norg.apache.scribe#scribe_client\n\nAnd some of these jars are very thin in and of themselves, leveraging internal and external jars:\n$ ./pants files src/java/com/twitter/common/quantity\ncom/twitter/common/quantity/Amount.java\ncom/twitter/common/quantity/Data.java\ncom/twitter/common/quantity/Time.java\ncom/twitter/common/quantity/Unit.java\n\n$ ./pants depmap -m src/java/com/twitter/common/quantity\ncom.twitter.common-quantity\n  com.twitter.common-collections\n    commons-lang-commons-lang-2.4\n    com.google.guava-guava-r08\n    com.google.code.findbugs-jsr305-1.3.9\n\nThe goal is to make it _very_ easy to craft lean targets that export minimal APIs and compose these.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933", "body": "Looks good, but also needs to cover *.st and *.mk files\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952", "body": "Looks like this covers the missing transforms:\n$ find build-support/ 3rdparty/ src/ tests/  -type f | xargs grep \"Licensed\" | grep \" to \"\nsrc//python/pants/ant/templates/ivy.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/protobuf/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/thrift/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/index.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/javadoc.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/classpath-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/project-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/pydevproject-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/module-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/project-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/application/http/graphview.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logconfig.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logprinter.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/thrift.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/common/thrift/text/TTextProtocolTest.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/endpoint.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/twitter.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/org/apache/scribe/0.1.2/fb303.thrift: \\* Licensed to the Apache Software Foundation (ASF) under one\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842", "body": "LGTM - thanks, merging\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395", "body": "Yes - scalability on 2 fronts:\n1.) What you see is a small slice of a much larger repo (using saplling: http://pypi.python.org/pypi/sapling https://github.com/jsirois/sapling) with >20 leaf projects and some common_internal libraries they share that are specific to internal twitter infrastucture.  In total, using a maven-like build system, we'd have > 120 top level projects in a classic maven multi-project build.  We were motivated by a strong desire to maintain a single source tree allowing for easy refactors across the global code base and easy discoverability of common code amongst 100s of developers scaling towards 1000s.\n2.) We needed to support several languages 1st class.  In particular - in this open source split you can see and use the excellent python support\n\nThe artifacts this build system exports are fully maven and ivy compatible, but a big shortcoming is that all the build documentation is still on internal wikis.  This will be remedied at some point.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477", "body": "You could vote to change to maven or anything else if it fits the requirements described.  In particular, besides the shortcoming of scant (non-existant!) docs right now on the public wiki for operating the pants build tool, what additional pain points are you encountering?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667", "body": "It does not support a single source tree though in any reasonable way afaict and does not support python.\nI understand the pain point on contribution though and its on us to update the wiki with good docs.\nThat said - if you are an eclipse or intellij user, the following works well for development:\n$ ./pants (idea|eclipse) tests/java/com/twitter/common:all -n common -c\nSee pants help (eclipse|idea) for more info.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375", "body": "Yes - the zk deps are a bit of a pain, we do the same (see: https://github.com/twitter/commons/blob/master/3rdparty/BUILD : 215).  com.twitter.common#zookeeper#0.0.24 itself depends on guava r09, see: http://maven.twttr.com/com/twitter/common/zookeeper/0.0.24/zookeeper-0.0.24.pom (or https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/BUILD).  I think the interesting thing here will be a dependency report to show what is getting pulled in by whom.  I'll run an ivy dep-report for a fake project with 1 dep on com.twitter.common#zookeeper#0.0.24 and see what that reveals...\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410", "body": "Ok, so my experiment went as follows:\n\n$ git diff\ndiff --git a/src/java/com/twitter/common/zookeeper/BUILD b/src/java/com/twitter/common/zookeeper/BUILD\nindex a83fc74..aa39954 100644\n--- a/src/java/com/twitter/common/zookeeper/BUILD\n+++ b/src/java/com/twitter/common/zookeeper/BUILD\n@@ -60,3 +60,8 @@ java_library(name = 'testing',\n   ],\n   sources = globs('testing/*.java'),\n )\n+\n+java_library(name = 'repro',\n-  dependencies = [ pants(':zookeeper') ],\n-  sources = [ '**none_hack**' ]\n  +)\n  $ ./pants src/java/com/twitter/common/zookeeper:repro compile dep-report\n  $ grep google target/src.java.com.twitter.common.zookeeper.repro/reports/ivy/internal-src.java.com.twitter.common.zookeeper.repro-default.dot\n      \"com.google.inject-guice\" [label=\"guice\\n3.0\"];\n      \"com.google.code.gson-gson\" [label=\"gson\\n1.6\"];\n      \"com.google.code.findbugs-jsr305\" [label=\"jsr305\\n1.3.9\"];\n      \"com.google.guava-guava\" [label=\"guava\\nr09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.inject-guice\" [label=\"3.0\"];\n  \"com.google.inject-guice\" -> \"org.sonatype.sisu.inject-cglib\" [label=\"2.2.1-v20090111\"];\n  \"com.google.inject-guice\" -> \"aopalliance-aopalliance\" [label=\"1.0\"];\n  \"com.twitter.common-io-json\" -> \"com.google.code.gson-gson\" [label=\"1.6\"];\n  \"com.twitter.common-util\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-stats\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-collections\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.google.inject-guice\" -> \"javax.inject-javax.inject\" [label=\"1\"];\n  \"com.twitter.common-io-json\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-base\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-collections\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-jdk-logging\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-dynamic-host-set\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-system-mocks\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats-provider\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io-thrift\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-sampler\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-quantity\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.guava-guava\" [label=\"r09\"];\n\nThis .dot file is generated by ivy:report (http://ant.apache.org/ivy/history/latest-milestone/use/report.html) and represents the full transitive dependency set of my fake target with its 1 dep on com.twitter.common#zookeeper.  I suspect your pom has a dependency on something elese that is pulling in the old google collections lib and you just need to exclude it.  We've run into this problem internally a few times (once this week even).  If you find new evidence please reopen.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002", "body": "Aha - ty.  The source from the last push on github is ahead of the last jar we cut.  We no longer use reflections, but instead a compile-time annotation processor, see: https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/args/BUILD\n\nI'll push the updated jars and then close.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052", "body": "I'm in process of pushing the fixed jars, but note the previous rev of 3rdparty/BUILD https://github.com/twitter/commons/blob/89ae581d728aecc39bde1e8843209a0998cd2b96/3rdparty/BUILD : 130 \nIn the old args setup we ourselves exclude old guava for the reasons you're encountering.  Afaict excludes are not transitive in ivy or maven worlds, ie: if we exclude some artifacts, users of our artifact must also choose to add the excludes (zookeeper -> log4j case in point), they won't automatically propagate.  I may be completely wrong on this point though.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748", "body": "Ok - should be good to go now: http://twitter.github.com/commons/apidocs/index.html#com.twitter.common.zookeeper.Group\nPublished @ 0.0.25 -> args 0.1.10 -> args-apt 0.0.1\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190", "body": "Sorry - just noticed this issue.   There seem to be a few bugs here:\n1.) tryLock(long, TimeUnit) clocking forever is clearly one bug.\n2.) cleanup() / the ublic methods should throw documented unchecked exceptions at the very least\n\nThe 1st issue you mention can't be fully right.  A session timeout implies the lock ephemeral node dies which release the lock.  A disconnect is expected to happen and should not affect holdig of the lock, only session expiry or explict release should relinquish the lock.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100", "body": "Thanks for the report, fixed here: https://github.com/twitter/commons/commit/faaa279231a432fef0d3613d92a769f7f432c96c\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855", "body": "There is no plan to fix this TODO in the near term - the [loadbalancing](https://github.com/twitter/commons/tree/master/src/java/com/twitter/common/net/loadbalancing) has been pure client side so far for internal use.  We've switched nearly all internal uses of ThriftFactory/Thrift internally to finagle and so this bit of code has not seen active development in ~6 months.  Consider making this switch as well, our internal effort towards RPCs is all focused here and the client builder already supports a configurable connection [max idle time](https://github.com/twitter/finagle/blob/master/finagle-core/src/main/scala/com/twitter/finagle/builder/ClientBuilder.scala#L460) that does what you want.\n\nThat said, ee'd happily accept a patch.  Taking a quick look, it seems like adding a forwarding ConnectionPool that only managed idle timeouts would be straight forward.  The messier bit would be wiring this option in through ThriftFactory/Thrift.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/897804", "body": "testing:\n$ ./pants src/java/com/twitter/common/zookeeper:client\n$ ./pants src/java/com/twitter/common/zookeeper:node\n$ ./pants src/java/com/twitter/common/zookeeper:map\n$ ./pants src/java/com/twitter/common/zookeeper:group\n$ ./pants src/java/com/twitter/common/zookeeper:partitioner\n$ ./pants src/java/com/twitter/common/zookeeper:candidate\n$ ./pants src/java/com/twitter/common/zookeeper:lock\n$ ./pants src/java/com/twitter/common/zookeeper:server-set\n$ ./pants src/java/com/twitter/common/zookeeper:singleton-service\n$ ./pants src/java/com/twitter/common/zookeeper\n$ ./pants tests/java/com/twitter/common/zookeeper\n$ ./pants list src/java/com/twitter/common/zookeeper --provides\nsrc/java/com/twitter/common/zookeeper/BUILD:client com.twitter.common.zookeeper#client\nsrc/java/com/twitter/common/zookeeper/BUILD:node com.twitter.common.zookeeper#node\nsrc/java/com/twitter/common/zookeeper/BUILD:map com.twitter.common.zookeeper#map\nsrc/java/com/twitter/common/zookeeper/BUILD:lock com.twitter.common.zookeeper#lock\nsrc/java/com/twitter/common/zookeeper/BUILD:group com.twitter.common.zookeeper#group\nsrc/java/com/twitter/common/zookeeper/BUILD:partitioner com.twitter.common.zookeeper#partitioner\nsrc/java/com/twitter/common/zookeeper/BUILD:candidate com.twitter.common.zookeeper#candidate\nsrc/java/com/twitter/common/zookeeper/BUILD:server-set com.twitter.common.zookeeper#server-set\nsrc/java/com/twitter/common/zookeeper/BUILD:singleton-service com.twitter.common.zookeeper#singleton-service\nsrc/java/com/twitter/common/zookeeper/BUILD:testing com.twitter.common#zookeeper-testing\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/897804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109239", "body": "Thats sounds like an old pants.pex.  I'm not sure what your setup is, but you need to rebuild pants.pex.  This is done in the commons repo with:\n\n``` console\nrm pants.pex\n./pants.bootstrap\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8923242", "body": "Was there a reviewboard for this?  Standard operating procedure is to post a review to rbcommons and apply the final shipped change via `rbt patch -c [RB ID]` which avoids merges and leaves a review trail in the commit message itself.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8923242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8924057", "body": "I got here directly from a red travis build that I re-started (now green).  Thanks for the link.  So this was all kosher mod the change application to master at the very end.  I'll need to ressurrect the contirbutor guide info that went away when pants migrated out of commons.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8924057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8939182", "body": "...and this change never made it to (twitter/commons) master.  I must have followed a _branch_ red ci to a _clone_ master merge which is all fine.  Sorry for the noise.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8939182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972", "body": "typo? src/java/com/twitter/common/commons/BUILD does not exist\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995", "body": "With a new name and some docs, I'd prefer this be elevated to the fundamental public interface for the user-supplied node value materializer.  I think anytime you have a function that takes more than 1 arg in a public interface, its more clear to create a dedicated interface.  This affords an opportunity to choose a better name than apply if one exists and also choose a more apt name for the function interface.  I think the benefits this bestows users of the api often outweigh the inconvenience to the library author and those api users that might benefit from something like Functions.compose for example. \n\nNaming suggestion:\ninterface NodeDeserializer<T> {\n  T deserialize(byte[] data, Stat stat);\n}\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270", "body": "kill extra blank line above and kill @Nullable below - looks like you never pass null\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275", "body": "Add T docs:\n[newline]\n@param <T> .....\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280", "body": "this should chain to once of the creates below\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975", "body": "Hah - this actually fixed problems with classes being examined by checkstyle that depended on thrift gen code iirc.  I'll test on our codebase to confirm.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015", "body": "you could use self.context.id\nsee context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\nIf you wan't to change that to use sha1 instead of md5 - sgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912", "body": "I think MockPantsTarget can just extend object now\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919", "body": "this fellow should have a license header too - Foursquare Labs lgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952", "body": "> 100 cols\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162", "body": "Yeah - so the translator can only in practice translate for the current platform.  If the pants.ini or python_binary asks for a non-native platform, without this fix, a SourceLink will happily build for the native platform and return success.  We ask for linux - it hands us back mac.  This in fact accounts for many surprise build on mac, deploy to linux runtime failures at Twitter today.  I tried 3 variants of the fix - the other 2 were in Obtainer and in *Link - I landed here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226", "body": "Yup - Benjy added the old eggs (https://github.com/twitter/commons/tree/binaries/pants/third_party/python/dist) so I'll fix down.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566", "body": "Oops - read better and you're right - link.platform should be Platform.current()\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ericzundel": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/380", "title": "fnmatch_translate_extended() incorrectly translates wildcard pattern", "body": "I found that the fnmatch_translate_extended translation of the pattern 'squareup/inventory/adjustment*.proto' to a regular expression did not match the string 'squareup/inventory/adjustment.proto'\n\nThis is because the re returned expects at least one character to replace '*' in the expression above:\n\n```\nfrom twitter.common.dirutil.fileset import fnmatch_translate_extended\npattern = fnmatch_translate_extended('squareup/inventory/adjustment*.proto')\n(Pdb) p pattern\nu'squareup\\\\/inventory\\\\/adjustment([^/]+)\\\\.proto\\\\Z(?ms)'\n```\n\nA better translation would be to replace the '+' with '*':\n\n```\nu'squareup\\\\/inventory\\\\/adjustment([^/]*)\\\\.proto\\\\Z(?ms)'\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/381", "title": "Bugfix for fnmatch_translate_extended() to match zero characters for '*'", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/306", "title": "Adds a DefaultOrderedDict class", "body": "This new class is meant to be a substitute for defaultdict().   I wanted to use it in pants because I'm trying to get to the bottom of what seems to be non-deterministic behavior in ordering the classpath for jvm compiles between different machines both working from head of master in the same repo.\n\nI also added some tests for OrderedDict while I was at it.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/6388651", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6388651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/6388662", "body": "There is one thing, it seems that the attribution to scottb@squareup.com might have gotten lost.  \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6388662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wanggaohang": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/378", "title": "TMonitoredProcessor has some problems", "body": "position\uff1acom.twitter.common.thrift.monitoring.TMonitoredProcessor\n1.when client transport is closed,code wrapped.process(in, out) will throws an exception even client donot invoke any service method.so this method can only monitor long-connect thrift client.\n2.the time computer way is wrong,because long startNanos = System.nanoTime(); will execute even no thrift client invoke any service method.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stuhood": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/06905dc0f1a26440a79ff1164831c85ce2d1bdf0", "message": "Update to pants 1.4.0rc0 (#457)\n\n* Update to 1.4.0rc0\r\n\r\n* Require JDK8.\r\n\r\n* Skip scalafix for now.\r\n\r\n* Remove newly detected cycle due to isolated python tests."}, {"url": "https://api.github.com/repos/twitter/commons/commits/2fe96bdcd69ba894a43157809a267674ad0d0a47", "message": "New binary url."}, {"url": "https://api.github.com/repos/twitter/commons/commits/edbdb602042b0fa5fb7e4bdd886ddb0ab53add11", "message": "Update to 1.3.0, and fix warnings. (#453)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/cfd86c13d32c4dc6a3c19dcba66c5f7d96ed1016", "message": "Very likely to be the final release candidate! (#452)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2de63c8032ab01d90dce47ee28263cb414943a80", "message": "Upgrade to pants 1.3.0rc1 (#451)\n\n* Upgrade to 1.3.0rc1\r\n* Remove dead target, and fix argument ordering in ci.sh\r\n* Enable storing the buildcache in travis` cache.\r\n* Merge JVM target sets, drop a bunch of unnecessary test aliases.\r\n* Drop remote_python_thrift_fileset, fix resource definitions.\r\n* Clear RootMetrics (singleton... yuck) before use, and skip flaky test."}, {"url": "https://api.github.com/repos/twitter/commons/commits/c9c275907f154aac69e2d16ed64861374e1d27c4", "message": "Bump pants to 1.3.0.dev14 and fix deprecation warnings (#449)\n\n### Problem\r\n\r\nThe 1.2.1 upgrade was incomplete, and didn't update the ci.sh script for python.\r\n\r\n### Solution\r\n\r\nBump to a newer version, allow prerelease python dependencies, raise the python version constraint, and remove deprecated flags."}, {"url": "https://api.github.com/repos/twitter/commons/commits/4360d424d66f8e2eabc8c35021994a0263eae3ef", "message": "Update to pants 1.2.1 (#448)\n\n### Problem\r\n\r\ncommons is on a >1 year old, pre-`1.0.0` version of pants.\r\n\r\n### Solution\r\n\r\nUpdated to the latest stable version and got the majority of the tests passing."}, {"url": "https://api.github.com/repos/twitter/commons/commits/02833f537fe7ad19dee71b8631acd19fc7c9e933", "message": "Drop rbcommons in favor of github reviews. (#446)\n\n### Problem\r\n\r\nTwitter has decided to move away from RBCommons for external contributions, at least partially because of the improvements to Github reviews... but also due to a unanimous decision from the pantsbuild/pants project to move away from RBCommons as well (the largest project that was using rbcommons).\r\n\r\n### Solution\r\n\r\nUpdate documentation and scripts to describe a Github-pull-request-based workflow.\r\n\r\n### Result\r\n\r\nAll future review should be accomplished via Github pull requests."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brutkin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/ea422dd91e35d302f87c80433615aa9b946b969d", "message": "Add option to sort commands names in python app help (#455)\n\n* Fix python test command in README\r\nAllow sorting of command names for help in python apps\r\n\r\n* Jcohen feedback - make sort option cleaner"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/425", "title": "[python zookeeper] Add member_id to ServiceInstance object if provided.", "body": "Add member_id to ServiceInstance object if supplied when creating it and make that the default action when creating a serverset list. This is mostly useful for reconciling issues with the serverset e.g. duplicate registration.\n\nTests all pass:\n$ ./pants test tests/python/twitter/common/zookeeper:all\n11:22:40 00:02         [chroot]============== test session starts ===============\n                     platform darwin -- Python 2.7.10 -- py-1.4.31 -- pytest-2.6.4\n                     plugins: cov, timeout\n                     collected 85 items\n\n```\n                 tests/python/twitter/common/zookeeper/kazoo_client_test.py .\n                 tests/python/twitter/common/zookeeper/group/test_active_kazoo_group.py ................................................\n                 tests/python/twitter/common/zookeeper/group/test_kazoo_group.py ..................\n                 tests/python/twitter/common/zookeeper/serverset/test_endpoint.py ............\n                 tests/python/twitter/common/zookeeper/serverset/test_kazoo_serverset.py .....\n                 tests/python/twitter/common/zookeeper/serverset/test_serverset_unit.py .\n\n                 =========== 85 passed in 23.80 seconds ===========\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maheshgaya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/45a0159a8e170baaf88103322cfacb2a0e073405", "message": "docs: updated broken link"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BobbyD-FL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/b97322f923bb75b3174693c739f7fca682d3fcd7", "message": "Bump Version to 0.3.9\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167790573\n\nBugs closed: 443\n\nReviewed at https://rbcommons.com/s/twitter/r/4313/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/fd79470188bb9a1f96c8a8f4368a25627bd03022", "message": "Bump Version to 0.3.8\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167517517\n\nBugs closed: 441\n\nReviewed at https://rbcommons.com/s/twitter/r/4307/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/18d4bbc8fb1c9fc5a2bcf9c3190aefcfcf36890b", "message": "Added CommandUtil.cmd_within_path() within twitter.common.util.command_util and patched twitter.common.fs.hdfs\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/167214107\n\nBugs closed: 440\n\nReviewed at https://rbcommons.com/s/twitter/r/4302/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chickenbellyfinn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7a61c23cc0085329bc95e762701ea66c5050e7a7", "message": "Fix AttributeError in HDFSHelper constructor (#436)\n\nuse_hadoop_v1 isn't a member variable. \r\nhttps://github.com/twitter/commons/issues/435"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drewrothstein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/77b31021cc19410aac060887dded2319c9c62814", "message": "Bump VERSION to 0.3.6.\n\nBugs closed: 434\n\nReviewed at https://rbcommons.com/s/twitter/r/4109/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/b444e9ea95a9b6f9699e57db88cdc1a15857aabd", "message": "[hadoop] change hadoop to hdfs cli\n\n[hadoop] add v1 option but default to hdfs\n\nGitHub: https://github.com/twitter/commons/pull/433/\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/141925751\n\nUpdated Travis: https://travis-ci.org/twitter/commons/builds/143485107\n\nBugs closed: 433\n\nReviewed at https://rbcommons.com/s/twitter/r/4048/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atollena": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/c19dcc8820641948a079c6dfe6e463a53cb51f69", "message": "Merge pull request #426 from atollena/endpoint-ip-addresses\n\npython: Add IP addresses to serverset entries"}, {"url": "https://api.github.com/repos/twitter/commons/commits/a85b7ad9aae1150190aa8be30b83e5f0bb91508b", "message": "python: Add IP addresses to serverset entries\n\nServerSet entries contain hostnames that require a DNS lookup before\nuse. When hostnames map to a unique, fixed IP address, this additional\nlookup is unnecessary and can put strain on DNS infrastructure in large\ndeployments.\n\nThis change adds 2 optional fields to server set endpoints: `inet` and\n`inet6` respectively for a human readable representation of an IPv4 and\nof an IPv6 address.\n\nHostnames are still mandatory, for backward compatibility with clients\nthat expect those fields. Port is untouched."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "a-sahdev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/456", "title": "fixed issue #329", "body": "### Problem\r\n\r\nThis fixes issue #329 , where one process was reading a file partially written by another process.\r\n\r\n### Solution\r\n\r\nOnly open the file once the 'if onwait' is true. This is done by moving the file read operation within the if statement.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "exarus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/444", "title": "Update styleguide.md", "body": "I think that \n\n> `(a << (8 * n) + 1) | 0xFF`\n> is a bit less obvious than:\n> `(a << (8 * n + 1)) | 0xFF`\n> Because it's a bit harder to guess which has a higher precedence: `+` or `>>`.\n> But muck easier to guess that a `*` has a higher precedence than `+`. Except that, `*` is placed left, so even if the reader is confused about the precedence of `+` and `*`, than he may just apply those operations one by one from left to right just as they would be with the same precedence.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sttts": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/423", "title": "Fix Zookeeper group member listener leak in leader election", "body": "The Candidate implementation leaks GroupChangeListener objects when abdicating\nleadership. These objects are registered as watches for group members and are\nnever deregistered. Consequently, one gets more and more ugly messages like\n\n  \"Current member ID %s is not a candidate for leader, current voting: %s\"\n\nin the logs.\n\nThis change only creates one watch for the Candidate implementation and reused it\nto avoid the leak (note: there is no way to actually remove a watch that has\nbeen registered before).\n\nFixes https://github.com/mesosphere/marathon/issues/2419.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesbroadhead": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/421", "title": "[check.pex] rm UPPER_SNAKE_CASED rule", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ameya-pandilwar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/420", "title": "Updated comparisions of floating values for NaN", "body": "Fix for #322 \n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/419", "title": "Fix bug in method for checking name collision", "body": "Fix for #413 \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mandar-Shinde": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/416", "title": "Updated README.md with markup for github", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mzhaom": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/415", "title": "Switch certain usage of deprecated guava API to new ones.", "body": "IputSupplier<? extends InputStream>  has been deprecated by ByteSource.\nhttp://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/InputSupplier.html\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santazhang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/390", "title": "fix _make_proxy_function() in twitter/common/app/__init__.py", "body": "`method_name` should be used instead of `attribute`.\n\n`attribute` is actually a global variable introduced later. Current code happen to work because calling `_make_proxy_function(attribute)` makes `method_name` equal to `attribute`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "christian-esken": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/373", "title": "Annotation based skipping of fields in ObjectSizeCalculator", "body": "This change adds annotation support to ObjectSizeCalculator. The whole object tree below a field annotated with ObjectSizeIgnoreField is ignored. \n## When to use\n\nThis is useful if there are references to other objects not of interest. For example, objects from a DB may be cached in the heap. If one measures that Cache separately, there may be no need to measure references from other places to those objects (again). Also, references to a classloader (directly or indirectly via a Thread instance) can end up with measuring the whole heap.\n## Technical details\n\nIgnoring means to ignore the whole object subtree _below the field_. The field itself is counted normally: _References_ are counted with the size of a reference in the memory model. As _primitive types_ are never shared, they are not ignored and thus always counted.\nThe annotation class can be freely chosen via setIgnoreFieldAnnotation(), to avoid hard runtime dependencies to ObjectSizeCalculator  or ObjectSizeIgnoreField.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benpoliquin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/358", "title": "Windowed.getCurrentIndex() changed int to long", "body": "When using e.g. WindowedStatistics with a time window/number of slice combination that results in a sliceDuration of less than 662 ms(currently) index calculation in Windowed.getCurrentIndex() fails because System.currentTimeMillis()/662 > Integer.MAX_VALUE and casting it to int produces unpredictable results.\n\n\"Best case\" is that getCurrentIndex() returns a negative value (as happened to me), causing an ArrayIndexOutOfBoundsException because the whole code in sync() is skipped and index will remain at the initial value of -1.\n\nThis is Issue #355 .\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinfeng": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/354", "title": "add cmdline argFileAllowed attribute to support @argfile for those options with extremely long values", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/340", "title": "Use new Travis CI container infrastructure", "body": "http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/\n\nSigned-off-by: Chris Aniszczyk zx@twitter.com\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162", "body": "Any reason Maven isn't used here? It's pretty much the standard build system for open source java stuff.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648", "body": "My pain point is that if you want people to contribute, use a standard build technology. I understand I'm saying this as an outsider though so take it like you wish.\n\nMaven3 is quite a bit faster than maven2 these days, even supports OSGi. As a person who spent migrating the majority of eclipse.org's infrastructure to maven3 it doesn't suck that bad anymore. It has a large ecosystem where you can easily integrate with tools like Hudson/Jenkins, code coverage etc... It would be nice if this would be investigated in the future again.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rgs1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/307", "title": "Allow properties dict along within a ServiceInstance", "body": "When joining a ServerSet, it can be handy to attach some extra data to\nthe published ServiceInstance (i.e.: debugging info, service version,\netc.). This is expressed in the form of a <str, str> properties dict.\n\nThis only takes effect when reading/writing JSON (for now).\n\nSigned-off-by: Raul Gutierrez S rgs@twitter.com\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simeonf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/262", "title": "Building sphinx docs for src/python/twitter/commons", "body": "I added a docs folder for the python twitter.commons stuff. The source for much documentation is an email thread from Brian Wickman so it should be mostly correct.\n\nI also did some autodocing to pull in docs in docstrings in the source. This occasionally necessitated sphinxifying the docstrings to supress warnings/errors or rendering bugs.\n\nBuild the docs by installing sphinx and running:\n\n```\nsphinx-build -b html -d ./docs/_build/doctrees  ./docs ./docs/_build/html \n```\n\nfrom the src/python/twitter/commons directory.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkwarren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/224", "title": "Add a close() method to ZooKeeperMap.", "body": "Enable a ZooKeeperMap user to signal that it no longer requires the map\nany longer by calling ZooKeeperMap.close(). This removes any persistent\nwatchers against ZooKeeperClient (allowing it to be GC'd), stops\nregistering any additional watchers against ZooKeeper, and prevents any\nadditional callbacks to the ZooKeeperMap.Listener interface.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teddziuba": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/192", "title": "Staked bootstrapping distribute version", "body": "This commit stakes the version of `distribute` that Pants depends on to `0.6.34`. It also adds a guard check against failure to bootstrap `pkg_resources.py` or `setuptools` into the Pants build.\n\nThe problem with using `distribute>=0.6.24` as a requirement is that it's possible to pick up `distribute>=0.7` which is actually a meta-package, and does not contain `pkg_resources.py` or `setuptools`, it simply declares `setuptools` as a dependency. Since the iteration to choose the `distribute` package to bootstrap in is eager, and happens in no particular order, this is a thing that could happen easily (it did on my build).\n\nIn normal `pip` land, there is no problem with this, but the way that Pants bootstraps `distribute` makes it difficult, since it doesn't pull in the transitive closure of dependencies, it simply iterates over the files in the `distribute` package and copies them to chroot.\n\nIn the case that it picks up `distribute>=0.7`, this results in there being no `pkg_resources.py` or `setuptools` copied into subsequent .pex files. Normally this would not cause any obvious problems, since most environments where a .pex file would run include `setuptools` in their system Python installations.\n\nHowever, if you work where I do, the production machines are very slimly configured, and do not include a reasonable system Python. This results in the bootstrap script inside the .pex file to fail to import `pkg_resources.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wfarner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085", "body": "All should be fixed, with the exception of src/thrift/org/apache/scribe/0.1.2/fb303.thrift, i'm not sure if we have the authority to re-license that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646", "body": "Just wanted to ACK that this is on the radar.  Expect some useful feedback by end of business week at the worst.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516", "body": "Remove trailing space in \"Logger Config \".\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520", "body": "Indenting is off here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545", "body": "Feel free to collapse this td tag to a one-liner: `<td>$logger.name$</td>`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558", "body": "Don't space-pad attributes, e.g. `class='selectlevels'`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170", "body": "Any way to vote to change it to use maven? :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ewhauser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405", "body": "Have you actually tried to compile and build with pants?  It's exponentially faster than a Maven build would be with 120 projects in a multi-project build.  \n\nStop complaining because you don't want to take the time to understand their tool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ntolia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988", "body": "Evidently, I don't have permission to reopen.\n\nThe problem is definitely on the twitter commons side as seen in the relevant part of `mvn dependency:tree` below. `com.twitter.common.args` pulls in an old version of `org.reflections` which in turn depends on `collections`. Now, the reflections package moved to Guava a little while ago - https://code.google.com/p/reflections/source/diff?spec=svn111&r=105&format=side&path=/trunk/reflections/pom.xml&old_path=/trunk/reflections/pom.xml&old=104 - but evidently the args package isn't pulling in the most recent bits.\n\n```\n[INFO] \\- com.twitter.common:zookeeper:jar:0.0.24:compile\n[INFO]    +- org.apache.zookeeper:zookeeper:jar:3.3.3:compile\n[INFO]    |  +- log4j:log4j:jar:1.2.15:compile\n[INFO]    |  |  +- javax.mail:mail:jar:1.4:compile\n[INFO]    |  |  |  \\- javax.activation:activation:jar:1.1:compile\n[INFO]    |  |  \\- javax.jms:jms:jar:1.1:compile\n[INFO]    |  \\- jline:jline:jar:0.9.94:compile\n[INFO]    +- com.twitter.common:args:jar:0.1.7:compile\n[INFO]    |  \\- org.reflections:reflections:jar:0.9.5-RC2:compile\n[INFO]    |     +- com.google.collections:google-collections:jar:1.0:compile\n[INFO]    |     +- javassist:javassist:jar:3.8.0.GA:compile\n[INFO]    |     \\- dom4j:dom4j:jar:1.6:compile\n[INFO]    |        \\- xml-apis:xml-apis:jar:1.0.b2:compile\n[INFO]    +- com.twitter.common:base:jar:0.0.17:compile\n[INFO]    +- com.twitter.common:io-json:jar:0.0.2:compile\n[INFO]    |  +- com.google.code.gson:gson:jar:1.6:compile\n[INFO]    |  \\- com.twitter.common:io:jar:0.0.10:compile\n[INFO]    +- com.twitter.common:io-thrift:jar:0.0.10:compile\n[INFO]    |  \\- org.slf4j:slf4j-jdk14:jar:1.5.10:compile\n[INFO]    +- com.twitter.common:net-util:jar:0.0.12:compile\n[INFO]    |  \\- com.twitter.common:collections:jar:0.0.16:compile\n[INFO]    +- com.twitter.common:dynamic-host-set:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:net-pool:jar:0.0.12:compile\n[INFO]    |  +- com.twitter.common:stats:jar:0.0.14:compile\n[INFO]    |  |  +- com.twitter.common:stats-provider:jar:0.0.8:compile\n[INFO]    |  |  +- com.twitter.common:application-action:jar:0.0.6:compile\n[INFO]    |  |  \\- com.twitter.common:util-sampler:jar:0.0.9:compile\n[INFO]    |  \\- com.twitter.common:util-system-mocks:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:quantity:jar:0.0.14:compile\n[INFO]    +- com.twitter.common:util:jar:0.0.20:compile\n[INFO]    |  \\- com.twitter.common:jdk-logging:jar:0.0.5:compile\n[INFO]    \\- com.twitter.common:service-thrift:jar:0.0.10:compile\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090", "body": "That would be correct. Adding the following to my ZK import does seem to fix the javadoc portion of the build but I will wait for the updated jars. Thanks for the quick turnaround!\n\n```\n        <exclusion>\n          <groupId>com.google.collections</groupId>\n          <artifactId>google-collections</artifactId>\n        </exclusion>\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396", "body": "Works great. Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819", "body": "And, while we are on this issue, why does the lock convert a ZooKeeper exception into a runtime/unchecked exception in cleanup() - https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/DistributedLockImpl.java#L206 ? Makes it complicated to properly unlock if a disconnection happens.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047", "body": "Another unexpected thing. `tryLock(long, TimeUnit)` does not actually timeout as expected if no ZK server is found and instead seems to block forever. I believe this is because of `prepare()` which calls `ZooKeeperUtils.ensurePath()`. `ensurePath()` can block forever because it calls `ZooKeeperClient.get()`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543", "body": "About the first issue, lets say that a client creates a lock on a particular path. It manages to grab the lock but is disconnected at some future point in time. The ephemeral node gets destroyed and some other client can therefore grab the lock. However, the first client still assumes it has it and the lock will not get any notification.\n\nWith regards to the other bugs, I also found a few more issues. Would you be willing to accept a patch like https://github.com/ntolia/commons/commit/89280c50413f3b92ea142cf17e1c917dcbb119a3 ? I have a similar patch working in a private repository but cannot seem to get pants to work for me. After fixing some python incompatibility issues, it can't seem to find the ' spy#memcached;2.4.2' dependency.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794", "body": "Bump.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556", "body": "Florian, can you give me an idea of the unit tests you are looking for? Most of my patch has to do with correctness and cleanups. The only thing I can think of right now is a test that checks that tryLock(long timeout, TimeUnit unit) does not block forever if no server is present.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "florianleibert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581", "body": "Hi - \njust got around looking at this. Thanks for your input.\n\nFor the issue that you're reporting - would you mind updating the unit test to reflect the issue you are seeing? That way, I'll be able to verify that your patch works.\n\nThanks!\nFlorian\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jonboulle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/2524994", "body": "FWIW, the error was because you wanted s/zincfile/cachepath/ on line 62 :-) \n(zincfile is not defined if an exception got thrown during its assignment)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/2524994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "simonandluna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/4657759", "body": "Wow, thanks for fixing it so quickly.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/4657759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "betepahos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5109153", "body": "any idea why i am geting :  File \"/media/datastore/Projects/twitterComonns/comgit/commons/BUILD.commons\", line 25, in <module>\n          from twitter.pants.base.build_environment import get_buildroot\n      ImportError: No module named build_environment\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109293", "body": " rebuilded - the same result i have 0.0.13 installed tried both the builded pex and the pip installed one with the same result \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109389", "body": "http://pastie.org/8645818 -- something is going on  wrong on pants.bootstrap \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5607662", "body": "just this one and its good to go. i have builded it and has no more surpises :)\n\ncommons/src/python/twitter/common/python/translator.py\", line 114, in translate\nos.rename(dist_path, target_path)\nOSError: [Errno 18] Invalid cross-device link\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5607662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "benjyw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5459257", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5459257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5459283", "body": "LGTM\n\nIn future can we not put large style changes in the same commits as real code changes? It's difficult to review such changes when you don't know if you're supposed to be looking for meaningful differences or not.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5459283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697", "body": "I _think_ the pull request now contains a revert for the checkstyle\nthing. It also contains other commits that are already in your repo,\nnot sure why.\n\nOn Tue, Apr 3, 2012 at 2:26 AM, John Sirois\nreply@reply.github.com\nwrote:\n\n> > @@ -120,18 +121,39 @@ def execute(self, targets):\n> > \u00a0 \u00a0 \u00a0 \u00a0of (conf, jar path).\n> > \u00a0 \u00a0 \u00a0\"\"\"\n> > - \u00a0 \u00a0def dirname_for_requested_targets(targets):\n> \n> you could use self.context.id\n> see context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\n> If you wan't to change that to use sha1 instead of md5 - sgtm\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/twitter/commons/pull/22/files#r638015\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599", "body": "Fixed as requested.\n\nOn Tue, Sep 11, 2012 at 7:42 PM, brian wickman notifications@github.comwrote:\n\n> In src/python/twitter/pants/targets/internal.py:\n> \n> > @@ -62,7 +62,7 @@ def sort_targets(cls, internal_targets):\n> >      def invert(target):\n> >        if target not in visited:\n> >          visited.add(target)\n> > -        if target.internal_dependencies:\n> > -        if hasattr(target, 'internal_dependencies') and target.internal_dependencies:\n> \n> if getattr(target, 'internal_dependencies', None):\n> ...\n> \n> achieves the same thing\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/twitter/commons/pull/80/files#r1582996.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380", "body": "Changed this to use isinstance(), but will leave the larger change for a separate commit, if that's OK?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wickman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5462997", "body": "FYI this is fixed in my rework_dependency_resolution branch:\n\n```\n--- a/src/python/twitter/pants/targets/python_target.py\n+++ b/src/python/twitter/pants/targets/python_target.py \n@@ -42,3 +42,10 @@ class PythonTarget(TargetWithDependencies, TargetWithSources):\n       except ValueError as e:\n         raise TargetDefinitionException(str(e))\n\n+  def resolve(self):\n+    for dep in super(PythonTarget, self).resolve():\n+      yield dep\n+    if self.provides:\n+      for binary in self.provides.binaries.values():\n+        for dep in binary.resolve():\n+          yield dep\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5462997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5607866", "body": "damn!  ok.  i'll audit the code on monday and replace all the os.renames with safe_rename.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5607866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996", "body": "if getattr(target, 'internal_dependencies', None):\n  ...\n\nachieves the same thing\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724", "body": "in general you want to avoid type(foo) == concrete_type and instead use isinstance, e.g. isinstance(classifiers, list).  of course, there are other iterable things that are not lists, so to be fully compatible, you might want something like:\n\n``` python\ndef maybe_list(value, expected_type=str):\n  from collections import Iterable\n  if isinstance(value, expected_type):\n    return [value]\n  elif isinstance(value, Iterable):\n    real_values = list(iter(value))\n    if not all(isinstance(v, expected_type) for v in real_values):\n      raise ValueError('Element of list is not of type %r' % expected_type)\n    return real_values\n  else:\n    raise ValueError('Value must be a %r or iterable of %r' % (expected_type, expected_type))\n```\n\nthen in several places in twitter-commons, we should just be doing, e.g.\n\nself.classifiers = maybe_list(classifiers)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447", "body": "Please build artifacts for macosx-10.4-x86_64\n\nAs it stands, 10.8-intel won't work with most Twitter laptops, including mine, whereas 10.4-x86_64 should include everything we've had in the last four years.\n\nSee https://gist.github.com/wickman/5550908 for a bootstrapper script for rolling your own set of Python interpreters that build 10.4-x86_64.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479", "body": "This doesn't make sense to me.  'platform' is never populated for SourceLinks -- how could this ever be used?  SourceLinks are only e.g. .zip, .tar.gz, .tgz.  Am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "marcottedan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/6015799", "body": "Do you avoid static import for performance issues or to ensure readable code and enforce standards?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6015799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Yasumoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/8923996", "body": "Did you get here from #335 ? If so, see #334 and https://rbcommons.com/s/twitter/r/1460/\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8923996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "leothekim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406", "body": "Indeed. I meant to type \"collections\" there.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427", "body": "Sounds sensible. I think I'll rename 'createWithStat' to 'create'. I don't like the name, and only chose it because the compiler would use type erasure to translate Function&lt;byte[], T&gt;.\n\nI'll add NodeDeserializer to the zookeeper package.\n\nUpdate: Looks like github doesn't html-escape arrow brackets.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ryan-williams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185", "body": "good point. done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "3": {"jayeye": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/454", "title": "The release of twitter.common.app on pypi does not work with python3.5 (and possibly earlier)", "body": "This happens pretty much everywhere I've tried it, but to make sure I checked it in a fresh installation of python3.5 on Amazon Linux:\r\n\r\n    $ cat x.py\r\n    from twitter.common import app\r\n\r\n    $ python3.5 x.py\r\n    Traceback (most recent call last):\r\n      File \"x.py\", line 1, in <module>\r\n        from twitter.common import app\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/__init__.py\", line 39, in <module>\r\n        from .application import Application\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/application.py\", line 39, in <module>\r\n        from twitter.common.process import daemonize\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/__init__.py\", line 7, in <module>\r\n        from .process_provider_ps import ProcessProvider_PS\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/process_provider_ps.py\", line 2, in <module>\r\n        from process_handle_ps import ProcessHandlePs\r\n    ImportError: No module named 'process_handle_ps'\r\n\r\nAnd here is what's installed:\r\n\r\n    $ pip-3.5 freeze\r\n    twitter.common.app==0.3.9\r\n    twitter.common.collections==0.3.9\r\n    twitter.common.contextutil==0.3.9\r\n    twitter.common.dirutil==0.3.9\r\n    twitter.common.lang==0.3.9\r\n    twitter.common.log==0.3.9\r\n    twitter.common.options==0.3.9\r\n    twitter.common.process==0.3.9\r\n    twitter.common.string==0.3.9\r\n    twitter.common.util==0.3.9\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dslztx": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/438", "title": "I find a bug in src/java/com/twitter/common/objectsize/ObjectSizeCalculator.java", "body": "There are some classes as follows:\n\n```\nclass A {\n    int a;\n}\n\n\nclass B extends A {\n    long b;\n}\n\n\nclass C extends B {\n    char c;\n}\n\npublic class Main\n{\npublic static void main(String[] args)\n{\n    C c=new C();\n    System.out.println(ObjectSizeCalculator.getObjectSize(c));\n}\n}\n```\n\nIn 32 bits JDK,the result of your program execution is **24**,but the exact result is **32**.\nI also write a program for calculating java object size,please take a look at [java-object-size](https://github.com/dslztx/java-object-size)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwlzn": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/437", "title": "Kill twitter.common.python vestiges", "body": "a while back, `twitter.common.python` became `pex`. there are still references to `twitter.common.python` scattered in the code base - particularly, a failure in the release script:\n\n```\n                   Running register sdist upload against /Users/kwilson/dev/commons/dist/twitter.common.python-0.7.0**** Failed to install twitter.common.python-0.7.0. stdout:\nrunning register\nrunning egg_info\ncreating src/twitter.common.python.egg-info\nwriting requirements to src/twitter.common.python.egg-info/requires.txt\nwriting src/twitter.common.python.egg-info/PKG-INFO\nwriting namespace_packages to src/twitter.common.python.egg-info/namespace_packages.txt\nwriting top-level names to src/twitter.common.python.egg-info/top_level.txt\nwriting dependency_links to src/twitter.common.python.egg-info/dependency_links.txt\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nrunning check\nRegistering twitter.common.python to https://pypi.python.org/pypi\nServer response (200): OK\nrunning sdist\ncreating twitter.common.python-0.7.0\ncreating twitter.common.python-0.7.0/src\ncreating twitter.common.python-0.7.0/src/twitter\ncreating twitter.common.python-0.7.0/src/twitter.common.python.egg-info\ncreating twitter.common.python-0.7.0/src/twitter/common\ncreating twitter.common.python-0.7.0/src/twitter/common/python\ncreating twitter.common.python-0.7.0/src/twitter/common/python/http\nmaking hard links in twitter.common.python-0.7.0...\nhard linking MANIFEST.in -> twitter.common.python-0.7.0\nhard linking setup.py -> twitter.common.python-0.7.0\nhard linking src/twitter/__init__.py -> twitter.common.python-0.7.0/src/twitter\nhard linking src/twitter.common.python.egg-info/PKG-INFO -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/SOURCES.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/dependency_links.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/namespace_packages.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/requires.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/top_level.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/zip-safe -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter/common/__init__.py -> twitter.common.python-0.7.0/src/twitter/common\nhard linking src/twitter/common/python/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/base.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/common.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/compatibility.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/environment.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/fetcher.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/finders.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/installer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/interpreter.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/marshaller.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/obtainer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/orderedset.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/package.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pep425.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_bootstrapper.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_builder.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_info.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/platforms.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/resolver.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/testing.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/translator.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/util.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/http/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/crawler.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/http.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/link.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nWriting twitter.common.python-0.7.0/setup.cfg\ncreating dist\nCreating tar archive\nremoving 'twitter.common.python-0.7.0' (and everything under it)\nrunning upload\nSubmitting dist/twitter.common.python-0.7.0.tar.gz to https://pypi.python.org/pypi\n\n**** Failed to install twitter.common.python-0.7.0. stderr:\nwarning: check: missing meta-data: either (author and author_email) or (maintainer and maintainer_email) must be supplied\n\nwarning: sdist: standard file not found: should have one of README, README.rst, README.txt\n\nUpload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\nerror: Upload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\n```\n\nwe should clean this up.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/issues/430", "title": "Flaky test: tests/python/twitter/common/metrics/test_sampling.py:test_sampler_base", "body": "this can manifest in CI as:\n\n```\n                     tests/python/twitter/common/metrics/test_sampling.py F..\n                     tests/python/twitter/common/metrics/test_gauges.py ......\n\n                     ==================== FAILURES ====================\n                     _______________ test_sampler_base ________________\n\n                         def test_sampler_base():\n                           class TestSampler(SamplerBase):\n                             def __init__(self, period, clock):\n                               self.count = 0\n                               SamplerBase.__init__(self, period, clock)\n\n                             def iterate(self):\n                               self.count += 1\n\n                           test_clock = ThreadedClock()\n                           sampler = TestSampler(Amount(1, Time.SECONDS), clock=test_clock)\n                           sampler.start()\n\n                           assert test_clock.converge(threads=[sampler])\n                           test_clock.assert_waiting(sampler, 1)\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 0\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 1\n\n                           test_clock.tick(5)\n                           assert test_clock.converge(threads=[sampler])\n                     >     assert sampler.count == 6\n                     E     assert 2 == 6\n                     E      +  where 2 = <TestSampler(Thread-1 [TID=5876], started daemon 140429632481024)>.count\n\n                     tests/python/twitter/common/metrics/test_sampling.py:58: AssertionError\n                     -------------- Captured stderr call --------------\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 2.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 6.0\n                      1 failed, 21 passed, 1 warnings in 0.44 seconds =\n```\n\nbut succeeds on rebuild.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/89bc492969d735ea177374b178e39ea6cf0d85ed", "message": "Bump VERSION"}, {"url": "https://api.github.com/repos/twitter/commons/commits/941c7b4a06048e484e21f613bc04004f3756b16f", "message": "Repair ./rbt for review posting.\n\nAs Mateo noted in https://github.com/twitter/commons/pull/428, `./rbt` in the commons repo seems to have been broken @ 146de3 due to removal of the underlying virtualenv bits.\n\nThis RB restores the requisite venv deps and bumps both `virtualenv` and `rbtools` to their latest pypi versions to get `./rbt` functional again.\n\nTesting Done:\nDogfooded for this very review + green CI @ https://travis-ci.org/twitter/commons/builds/129290520 for good measure.\n\nbefore:\n\n```\n[illuminati commons (master)]$ ./rbt --version\n./rbt: line 3: build-support/python/libvirtualenv.sh: No such file or directory\n./rbt: line 4: setup_virtualenv: command not found\n./rbt: line 6: exec: rbt: not found\n```\n\nafter:\n\n```\n[illuminati commons (kwlzn/commons/rbt_fix)]$ ./rbt --version\nBootstrapping rbt with requirements RBTools==0.7.6\nUsing /Users/kwilson/Python/CPython-2.7.11/bin/python2.7\n~/dev/commons/build-support ~/dev/commons\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1799k  100 1799k    0     0  2207k      0 --:--:-- --:--:-- --:--:-- 2205k\n...\n~/dev/commons\nNew python executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python2.7\nAlso creating executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python\nInstalling setuptools, pip, wheel...done.\nCollecting RBTools==0.7.6\n  Using cached RBTools-0.7.6-py2-none-any.whl\nCollecting six>=1.8.0 (from RBTools==0.7.6)\n  Using cached six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: six, RBTools\nSuccessfully installed RBTools-0.7.6 six-1.10.0\nRBTools 0.7.6\n```\n\nReviewed at https://rbcommons.com/s/twitter/r/3858/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2097ff289d8e04040a6b004d2c6ba64a061661f0", "message": "Revert Diff 2 pants.ini changes from RB #3155"}, {"url": "https://api.github.com/repos/twitter/commons/commits/32011ab5351fea23e8c70e24e752540b06d1389f", "message": "[twitter/commons] Upgrade pants from 0.0.44 -> 0.0.59\n\nUpon merging an innocuous PR after 2+ months of no merges, CI broke in the commons repo due to https://github.com/pantsbuild/pants/issues/2566 + the public release of pytest-timeout-1.0.0 (which is visible by commons via open dep resolution against pypi). This change addresses that by upgrading the entire commons repo to pants 0.0.59 wherein #2566 is repaired.\n\n- Upgrade pants to 0.0.59.\n- Fixup various symbol references and usages throughout.\n- Update excludes syntax.\n- Upgrade to contrib python checks plugin for PythonEval (which brings along checkstyle).\n- Implement repo-wide python checkstyle suppression due to numerous checkstyle errors in the codebase.\n- Sync out latest twitter.common.args from Twitter's source repo to support removal of apt-args plugin.\n- Eliminate the apt-args plugin, which is no longer needed with isolation.\n\nTesting Done:\nhttps://travis-ci.org/twitter/commons/builds/92376412\n\nBugs closed: 414\n\nReviewed at https://rbcommons.com/s/twitter/r/3155/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/811ac6c0a31e8616c3be006e3a1b5d0b728297ec", "message": "Merge pull request #407 from johnskopis/jskopis/update-kazoo\n\nUpgrade kazoo 1.3.1 -> 2.2.1"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrwilby": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/432", "title": "Am I missing something - isn't this a thread leak?", "body": "Where does this thread (below):\n\n```\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n```\n\nget cleaned up when close() is called? I see a ton of these threads lingering around in one open source project we are using. \n## \n\n public ZooKeeperClient(Amount<Integer, Time> sessionTimeout, Credentials credentials,\n      Optional<String> chrootPath, Iterable<InetSocketAddress> zooKeeperServers) {\n    this.sessionTimeoutMs = Preconditions.checkNotNull(sessionTimeout).as(Time.MILLISECONDS);\n    this.credentials = Preconditions.checkNotNull(credentials);\n\n```\nif (chrootPath.isPresent()) {\n  PathUtils.validatePath(chrootPath.get());\n}\n\nPreconditions.checkNotNull(zooKeeperServers);\nPreconditions.checkArgument(!Iterables.isEmpty(zooKeeperServers),\n    \"Must present at least 1 ZK server\");\n\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n  @Override\n  public void run() {\n    while (true) {\n      try {\n        WatchedEvent event = eventQueue.take();\n        for (Watcher watcher : watchers) {\n          watcher.process(event);\n        }\n      } catch (InterruptedException e) { /* ignore */ }\n    }\n  }\n};\nwatcherProcessor.setDaemon(true);\nwatcherProcessor.start();\n\nIterable<String> servers =\n    Iterables.transform(ImmutableSet.copyOf(zooKeeperServers),\n        InetSocketAddressHelper.INET_TO_STR);\nthis.zooKeeperServers = Joiner.on(',').join(servers);\nthis.connectString = this.zooKeeperServers.concat(chrootPath.or(\"\"));\n```\n\n  }\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mateor": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/427", "title": "Request to update python `futures` library", "body": "The twitter.common libs depends on a pretty old version of `futures`, could you update to a more recent version?\n\nThis conflicts with the `futures` range required by some of our python libraries. `boto3-1.3.0` is the most recent example that sent me here, it requires `futures>=2.2.0,<4.0.0` for python 2.7. But this is not the first time I have seen it, just the first time I decided to try and solve the problem instead of working around it \ud83d\ude04 \n\nBoto3 requirements include [the dep here](https://github.com/boto/boto3/blob/67409f27c8e180b4e9e942fc2f795dbfc7e98c7f/setup.cfg).\n\nThe futures range above goes from 2.2.0 -> 4.0.0, but the most recent published version of `futures` is only 3.0.5, fyi.\n\nI cloned t.c. and upgraded `futures` to the minimum viable upgrade (to  `2.2.0`) and will be sending a pull request along.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/e8de9d16eda3c22c1a866178f73a12355fc5699c", "message": "Update the futures library.\n\nThis bumps futures to a more modern version,\nsome useful Python libraries are pinned to a range\nthat is later than the current t.c. `futures` version.\n\nex. boto3 is pinned to `futures>=2.2.0,<4.0.0` for python2.7\n\nThis is the minimum-viable change that makes the t.c.\nlibs compatible.\n\nTesting Done:\nRan ci.sh locally and Travis passed: https://github.com/twitter/commons/pull/428\n\nBugs closed: 427, 428\n\nReviewed at https://rbcommons.com/s/twitter/r/3857/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/431", "title": "Convert 3rdparty/python to use the python_requirements target.", "body": "Twitter commons was using a wrapper function around its python\ndependencies to create python_requirement_library targets.\nThe python_requirements library is able to understand a pip\nrequirements.txt file and convert each entry into the\npython_requirement_library target needed by Pants.\n\nThe python_requirements target uses the project name as a target\nname. The original  wrapper was maintained for a few dependencies\nwhen their name clashed with Pants BUILD file conventions.\n\nI also removed the easy_install thrift, it looks like it was\nput in place to service aurora, who was later unblocked.\n\nLet me know if you think it should be returned:\nhttps://github.com/pantsbuild/pants/issues/2533\n\nThe purpose of this change is to enable a simple interface to convert\nsome python dependencies from being hardcoded to a single rev into\nbeing able to be satisfied by a release range. I will submit\nany dependency version changes separately.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcandre": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/422", "title": "Can't find twitter common base Either in published apidocs", "body": "", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/418", "title": "Publish to Maven Central", "body": "twitter-commons has some really good stuff, especially the Zookeeper lock implementation. Could we publish twitter-commons to Maven Central, to make it easier for people to use these libs without having to link to custom artifact repos?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Abel123": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/413", "title": "bug in commons/src/java/com/twitter/common/metrics/Metrics.java", "body": "commons/src/java/com/twitter/common/metrics/Metrics.java\n\nline 39    if (gauges.containsKey(key) || counters.containsKey(key) || counters.containsKey(key)) {\n\nwhich should be     if (gauges.containsKey(key) || counters.containsKey(key) || histograms .containsKey(key)) {\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orsenthil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/411", "title": "Error while running tests. SourcePackage is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)", "body": "On master\n\n```\n$ git log origin/master -n 1 |head -n 3\ncommit d4454f233914d0a7586da8c5d07575d8b63124fe\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Mon Aug 24 15:09:53 2015\n```\n\nrunning the tests\n\n$ ./pants test tests/python/twitter/common:all\n\ngives me an error\n\n```\nException message: Package     SourcePackage(u'https://pypi.python.org/packages/source/w/wheel/wheel-0.24.0.tar.gz#md5=3b0d66f0d127ea8befaa5d11453107fd') is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)\n```\n\nIf I go back to an old commit (this was the latest which succeeded for me)\n\n```\n$ git log HEAD -n 1 |head -n 6\ncommit bc7248da0974ab8a39ca36956ac6880029b85b00\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Sun Aug 9 20:29:10 2015\n\n    Upgrade to pants 0.0.41\n```\n\nand run the tests.\n\n```\n$ ./pants test tests/python/twitter/common:all\n```\n\nThe test execution is successful.\n- The difference between these versions are only about pants version update.\n- FWIW, I tried the latest version of pants in pantsbuild/pants and **could not** reproduce this error. I am raising this against twitter/commons\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/405", "title": "checkstyle does not allow class scoped variables for staticmethod", "body": "It may be good idea to discuss this as a ticket.\n\nCheckstyle prevents the use of class scoped variables with a staticmethod. \n\n```\nclass MyClass(object):\n\n  VARIABLE = None\n\n  @staticmethod\n  def method():\n    return MyClass.VARIABLE\n```\n\n$ check.pex\n\n```\nT800:WARNING science/src/python/twitter/packer/lib/packer_client.py:046 Instead of MyClass.VARIABLE use self.VARIABLE or cls.VARIABLE with instancemethods and classmethods respectively.\n     |    return MyClass.VARIABLE\n```\n\nIt is entirely desirable to have a) staticmethod  b) have a class scoped variables in staticmethod. We do not care for subclassing in staticmethods, so enforcing the users to change it to classmethods may not be a good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7b4843fb2947ec9bc3ff7769a37d05ad2220fc48", "message": "Merge pull request #412 from landism/master\n\neliminate double slash in reviewboard urls"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923", "body": "I think, this is a typo. It should be extras_path\n\nOtherwise, it crashes with a NameError\n\nNameError: global name 'extra_paths' is not defined\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "brian-brazil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/396", "title": "com.twitter.common.zookeeper:server-set references non-existant com.twitter.common:service-thrift:jar:0.2.21", "body": "Hi,\n\nI have the following in my POM:\n\n```\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>client</artifactId>\n                        <version>0.0.8</version>\n                </dependency>\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>server-set</artifactId>\n                        <version>1.0.110</version>\n                </dependency>\n```\n\nWhich results in:\n\n```\n[ERROR] Failed to execute goal on project boxever-dropwizard-extras-load-balancer: Could not resolve dependencies for project com.boxever:boxever-dropwizard-extras-load-balancer:jar:0.7.1.62-SNAPSHOT: Failure to find com.twitter.common:service-thrift:jar:0.2.21 in http://maven.twttr.com/ was cached in the local repository, resolution will not be reattempted until the update interval of twitter-twttr has elapsed or updates are forced -> [Help 1]\n\n```\n\nand indeed there is no such version at http://maven.twttr.com/com/twitter/common/service-thrift/\n\nMy guess is that the server-set pom is out of date.\n#346 may be related.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevints": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/387", "title": "Python releases exist that contain no code changes", "body": "This is a bug in the release process. It looks like releases get created as one atomic unit. This leads to a situation where there are releases of individual component libraries that don't actually contain any code changes (and nor do their parents), leaving downstream users to resolve version conflicts that don't actually exist.\n\nFor example, twitter.common.quantity==0.3.2 and twitter.common.quantity==0.3.3 have identical code, but the twitter.common.quantity==0.3.3 requires twitter.common.lang==0.3.3, so the metadata is different. Okay, that warrants releasing a new version. But wait, twitter.common.lang==0.3.2 and twitter.common.lang==0.3.3 have identical code and no dependencies. So twitter.common.lang's version should not have been incremented, and that increment should not have cascaded to its dependees.\n\nThe alternative: a version change for a component needs to \"cascade\" to its dependees, but only when there's an actual code change. This means that a change to twitter.common.quantity source files causes an increment to its version and its dependees, but not to its parent twitter.common.lang.\n\nI'm not sure how the version strategy is implemented currently but would like to start a discussion toward changing it before the next release.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsirois": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/386", "title": "Consider restructuring python targets to be 1-1-1", "body": "See #385 for the java side of this.  In java, fine grained and deep package structures are more of-the-norm.  In python, less so; so this issue is phrased as a \"consider\".  The idea though is to eliminate most or all exclude lists in sources globs in the python codebase.  This would require re-structuring packages and thus risk breaking clients imports.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/385", "title": "Restructure java targets to be 1-1-1.", "body": "Today there are many java BUILD targets that are subsets of a package.  To maintain the BUILD files for these targets in a reasonable way, constant lists of source files are defined that can be subtracted out from target sources lists using the globs exclude facility.  At some point pants will likely remove the ability to define constants in BUILD files and this mode of defining non 1-1-1 targets will be taken away, forcing duplication of file lists and the associated maintenance risk.\n\nThere are 2 complicating factors here:\n1. re-packaging will likely break clients of the java jars - they'll need to fix imports; so, this will require a deprecation cycle\n2. IIUC the official home for the java code is still inside Twitter walls; so, this refactoring really needs to occur in Twitter's repo and then be synced out here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/0c5c6e3030b3890e20f3c2e85c5628d0ab7fc3d1", "message": "Work around lockfile break.\n\nThis pins lockfile's pbr dep on lockfile's behalf as reccomended here:\n  https://groups.google.com/d/topic/pants-devel/OnPISJosUoI/discussion\n\nTesting Done:\nCI went green here:\n  https://travis-ci.org/twitter/commons/builds/125937912\n\nBugs closed: 424\n\nReviewed at https://rbcommons.com/s/twitter/r/3762/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/342", "title": "Use Travis CIs new container based builds.", "body": "The announcement is here:\n  http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure\nThe specs here:\n  http://docs.travis-ci.com/user/workers/container-based-infrastructure\n  http://docs.travis-ci.com/user/caching/#Fetching-and-storing-caches\n\nThis also turns on caching for ~/.pants.d, ~/.ivy2\nand the current pants version bootstraped in\nbuild-support.  To make virtualenv caching work, updates\nthe virtualenv bootstrap script to use a stable directory name\nacross virtualenv versions.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768", "body": "We need to update the README and will be blogging about pants and sapling by ~end of May, but the build already works - but is custom (uses ant/ivy behind the scenes).  You need python 2.6 and ant 1.8+ installed and then, from the root of the repo, you run:\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nThis will likely fail on the 1st run and explain steps for installing a python templating library (mako) dependency.  After installing mako you should be good to go.\n\nFor example to compile all code and run all tests.\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nYou can learn a bit more using:\n$ ./pants help\nTjis will list subcommands available.\n\n$ ./pants help [subcommand]\nThis will give even more info about a particular subcommand.\n\nIn short - the repo is a monolithic source tree, but it produces many jars - vs a typical gradle/buildr/maven multi-module project where there would be a top-level project directory for each artifact-producing project.  Currently pants provides 40 thin jars from its one source tree:\n$ ./pants list --provides --provides-columns=artifact_id\ncom.twitter.common#application-action\ncom.twitter.common#application\ncom.twitter.common#application-http\ncom.twitter.common#application-modules\ncom.twitter.common#args\ncom.twitter.common#base\ncom.twitter.common#collections\ncom.twitter.common#inject\ncom.twitter.common#inject-timed\ncom.twitter.common#io\ncom.twitter.common#io-thrift\ncom.twitter.common#logging\ncom.twitter.common#dynamic-host-set\ncom.twitter.common#net-util\ncom.twitter.common#net-pool\ncom.twitter.common#net-http\ncom.twitter.common#net-http-handlers-text\ncom.twitter.common#net-http-handlers-string-template\ncom.twitter.common#net-http-handlers\ncom.twitter.common#net-http-handlers-thrift\ncom.twitter.common#net-http-handlers-time-series\ncom.twitter.common#quantity\ncom.twitter#serverset\ncom.twitter.common#stats-provider\ncom.twitter.common#stats\ncom.twitter.common#stats-jvm\ncom.twitter.common#stats-time-series\ncom.twitter.common#stats-util\ncom.twitter.common#thrift\ncom.twitter.common#jdk-logging\ncom.twitter.common#util\ncom.twitter.common#util-system-mocks\ncom.twitter.common#util-sampler\ncom.twitter.common#util-testing\ncom.twitter.common#util-caching\ncom.twitter.common#zookeeper\ncom.twitter.common#zookeeper-testing\ncom.twitter.common#stats-ostrich-adapter\ncom.twitter.common#service-thrift\norg.apache.scribe#scribe_client\n\nAnd some of these jars are very thin in and of themselves, leveraging internal and external jars:\n$ ./pants files src/java/com/twitter/common/quantity\ncom/twitter/common/quantity/Amount.java\ncom/twitter/common/quantity/Data.java\ncom/twitter/common/quantity/Time.java\ncom/twitter/common/quantity/Unit.java\n\n$ ./pants depmap -m src/java/com/twitter/common/quantity\ncom.twitter.common-quantity\n  com.twitter.common-collections\n    commons-lang-commons-lang-2.4\n    com.google.guava-guava-r08\n    com.google.code.findbugs-jsr305-1.3.9\n\nThe goal is to make it _very_ easy to craft lean targets that export minimal APIs and compose these.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933", "body": "Looks good, but also needs to cover *.st and *.mk files\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952", "body": "Looks like this covers the missing transforms:\n$ find build-support/ 3rdparty/ src/ tests/  -type f | xargs grep \"Licensed\" | grep \" to \"\nsrc//python/pants/ant/templates/ivy.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/protobuf/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/thrift/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/index.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/javadoc.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/classpath-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/project-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/pydevproject-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/module-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/project-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/application/http/graphview.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logconfig.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logprinter.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/thrift.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/common/thrift/text/TTextProtocolTest.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/endpoint.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/twitter.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/org/apache/scribe/0.1.2/fb303.thrift: \\* Licensed to the Apache Software Foundation (ASF) under one\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842", "body": "LGTM - thanks, merging\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395", "body": "Yes - scalability on 2 fronts:\n1.) What you see is a small slice of a much larger repo (using saplling: http://pypi.python.org/pypi/sapling https://github.com/jsirois/sapling) with >20 leaf projects and some common_internal libraries they share that are specific to internal twitter infrastucture.  In total, using a maven-like build system, we'd have > 120 top level projects in a classic maven multi-project build.  We were motivated by a strong desire to maintain a single source tree allowing for easy refactors across the global code base and easy discoverability of common code amongst 100s of developers scaling towards 1000s.\n2.) We needed to support several languages 1st class.  In particular - in this open source split you can see and use the excellent python support\n\nThe artifacts this build system exports are fully maven and ivy compatible, but a big shortcoming is that all the build documentation is still on internal wikis.  This will be remedied at some point.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477", "body": "You could vote to change to maven or anything else if it fits the requirements described.  In particular, besides the shortcoming of scant (non-existant!) docs right now on the public wiki for operating the pants build tool, what additional pain points are you encountering?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667", "body": "It does not support a single source tree though in any reasonable way afaict and does not support python.\nI understand the pain point on contribution though and its on us to update the wiki with good docs.\nThat said - if you are an eclipse or intellij user, the following works well for development:\n$ ./pants (idea|eclipse) tests/java/com/twitter/common:all -n common -c\nSee pants help (eclipse|idea) for more info.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375", "body": "Yes - the zk deps are a bit of a pain, we do the same (see: https://github.com/twitter/commons/blob/master/3rdparty/BUILD : 215).  com.twitter.common#zookeeper#0.0.24 itself depends on guava r09, see: http://maven.twttr.com/com/twitter/common/zookeeper/0.0.24/zookeeper-0.0.24.pom (or https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/BUILD).  I think the interesting thing here will be a dependency report to show what is getting pulled in by whom.  I'll run an ivy dep-report for a fake project with 1 dep on com.twitter.common#zookeeper#0.0.24 and see what that reveals...\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410", "body": "Ok, so my experiment went as follows:\n\n$ git diff\ndiff --git a/src/java/com/twitter/common/zookeeper/BUILD b/src/java/com/twitter/common/zookeeper/BUILD\nindex a83fc74..aa39954 100644\n--- a/src/java/com/twitter/common/zookeeper/BUILD\n+++ b/src/java/com/twitter/common/zookeeper/BUILD\n@@ -60,3 +60,8 @@ java_library(name = 'testing',\n   ],\n   sources = globs('testing/*.java'),\n )\n+\n+java_library(name = 'repro',\n-  dependencies = [ pants(':zookeeper') ],\n-  sources = [ '**none_hack**' ]\n  +)\n  $ ./pants src/java/com/twitter/common/zookeeper:repro compile dep-report\n  $ grep google target/src.java.com.twitter.common.zookeeper.repro/reports/ivy/internal-src.java.com.twitter.common.zookeeper.repro-default.dot\n      \"com.google.inject-guice\" [label=\"guice\\n3.0\"];\n      \"com.google.code.gson-gson\" [label=\"gson\\n1.6\"];\n      \"com.google.code.findbugs-jsr305\" [label=\"jsr305\\n1.3.9\"];\n      \"com.google.guava-guava\" [label=\"guava\\nr09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.inject-guice\" [label=\"3.0\"];\n  \"com.google.inject-guice\" -> \"org.sonatype.sisu.inject-cglib\" [label=\"2.2.1-v20090111\"];\n  \"com.google.inject-guice\" -> \"aopalliance-aopalliance\" [label=\"1.0\"];\n  \"com.twitter.common-io-json\" -> \"com.google.code.gson-gson\" [label=\"1.6\"];\n  \"com.twitter.common-util\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-stats\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-collections\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.google.inject-guice\" -> \"javax.inject-javax.inject\" [label=\"1\"];\n  \"com.twitter.common-io-json\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-base\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-collections\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-jdk-logging\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-dynamic-host-set\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-system-mocks\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats-provider\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io-thrift\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-sampler\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-quantity\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.guava-guava\" [label=\"r09\"];\n\nThis .dot file is generated by ivy:report (http://ant.apache.org/ivy/history/latest-milestone/use/report.html) and represents the full transitive dependency set of my fake target with its 1 dep on com.twitter.common#zookeeper.  I suspect your pom has a dependency on something elese that is pulling in the old google collections lib and you just need to exclude it.  We've run into this problem internally a few times (once this week even).  If you find new evidence please reopen.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002", "body": "Aha - ty.  The source from the last push on github is ahead of the last jar we cut.  We no longer use reflections, but instead a compile-time annotation processor, see: https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/args/BUILD\n\nI'll push the updated jars and then close.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052", "body": "I'm in process of pushing the fixed jars, but note the previous rev of 3rdparty/BUILD https://github.com/twitter/commons/blob/89ae581d728aecc39bde1e8843209a0998cd2b96/3rdparty/BUILD : 130 \nIn the old args setup we ourselves exclude old guava for the reasons you're encountering.  Afaict excludes are not transitive in ivy or maven worlds, ie: if we exclude some artifacts, users of our artifact must also choose to add the excludes (zookeeper -> log4j case in point), they won't automatically propagate.  I may be completely wrong on this point though.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748", "body": "Ok - should be good to go now: http://twitter.github.com/commons/apidocs/index.html#com.twitter.common.zookeeper.Group\nPublished @ 0.0.25 -> args 0.1.10 -> args-apt 0.0.1\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190", "body": "Sorry - just noticed this issue.   There seem to be a few bugs here:\n1.) tryLock(long, TimeUnit) clocking forever is clearly one bug.\n2.) cleanup() / the ublic methods should throw documented unchecked exceptions at the very least\n\nThe 1st issue you mention can't be fully right.  A session timeout implies the lock ephemeral node dies which release the lock.  A disconnect is expected to happen and should not affect holdig of the lock, only session expiry or explict release should relinquish the lock.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100", "body": "Thanks for the report, fixed here: https://github.com/twitter/commons/commit/faaa279231a432fef0d3613d92a769f7f432c96c\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855", "body": "There is no plan to fix this TODO in the near term - the [loadbalancing](https://github.com/twitter/commons/tree/master/src/java/com/twitter/common/net/loadbalancing) has been pure client side so far for internal use.  We've switched nearly all internal uses of ThriftFactory/Thrift internally to finagle and so this bit of code has not seen active development in ~6 months.  Consider making this switch as well, our internal effort towards RPCs is all focused here and the client builder already supports a configurable connection [max idle time](https://github.com/twitter/finagle/blob/master/finagle-core/src/main/scala/com/twitter/finagle/builder/ClientBuilder.scala#L460) that does what you want.\n\nThat said, ee'd happily accept a patch.  Taking a quick look, it seems like adding a forwarding ConnectionPool that only managed idle timeouts would be straight forward.  The messier bit would be wiring this option in through ThriftFactory/Thrift.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972", "body": "typo? src/java/com/twitter/common/commons/BUILD does not exist\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995", "body": "With a new name and some docs, I'd prefer this be elevated to the fundamental public interface for the user-supplied node value materializer.  I think anytime you have a function that takes more than 1 arg in a public interface, its more clear to create a dedicated interface.  This affords an opportunity to choose a better name than apply if one exists and also choose a more apt name for the function interface.  I think the benefits this bestows users of the api often outweigh the inconvenience to the library author and those api users that might benefit from something like Functions.compose for example. \n\nNaming suggestion:\ninterface NodeDeserializer<T> {\n  T deserialize(byte[] data, Stat stat);\n}\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270", "body": "kill extra blank line above and kill @Nullable below - looks like you never pass null\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275", "body": "Add T docs:\n[newline]\n@param <T> .....\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280", "body": "this should chain to once of the creates below\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975", "body": "Hah - this actually fixed problems with classes being examined by checkstyle that depended on thrift gen code iirc.  I'll test on our codebase to confirm.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015", "body": "you could use self.context.id\nsee context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\nIf you wan't to change that to use sha1 instead of md5 - sgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912", "body": "I think MockPantsTarget can just extend object now\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919", "body": "this fellow should have a license header too - Foursquare Labs lgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952", "body": "> 100 cols\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162", "body": "Yeah - so the translator can only in practice translate for the current platform.  If the pants.ini or python_binary asks for a non-native platform, without this fix, a SourceLink will happily build for the native platform and return success.  We ask for linux - it hands us back mac.  This in fact accounts for many surprise build on mac, deploy to linux runtime failures at Twitter today.  I tried 3 variants of the fix - the other 2 were in Obtainer and in *Link - I landed here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226", "body": "Yup - Benjy added the old eggs (https://github.com/twitter/commons/tree/binaries/pants/third_party/python/dist) so I'll fix down.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566", "body": "Oops - read better and you're right - link.platform should be Platform.current()\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ericzundel": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/380", "title": "fnmatch_translate_extended() incorrectly translates wildcard pattern", "body": "I found that the fnmatch_translate_extended translation of the pattern 'squareup/inventory/adjustment*.proto' to a regular expression did not match the string 'squareup/inventory/adjustment.proto'\n\nThis is because the re returned expects at least one character to replace '*' in the expression above:\n\n```\nfrom twitter.common.dirutil.fileset import fnmatch_translate_extended\npattern = fnmatch_translate_extended('squareup/inventory/adjustment*.proto')\n(Pdb) p pattern\nu'squareup\\\\/inventory\\\\/adjustment([^/]+)\\\\.proto\\\\Z(?ms)'\n```\n\nA better translation would be to replace the '+' with '*':\n\n```\nu'squareup\\\\/inventory\\\\/adjustment([^/]*)\\\\.proto\\\\Z(?ms)'\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/381", "title": "Bugfix for fnmatch_translate_extended() to match zero characters for '*'", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/306", "title": "Adds a DefaultOrderedDict class", "body": "This new class is meant to be a substitute for defaultdict().   I wanted to use it in pants because I'm trying to get to the bottom of what seems to be non-deterministic behavior in ordering the classpath for jvm compiles between different machines both working from head of master in the same repo.\n\nI also added some tests for OrderedDict while I was at it.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wanggaohang": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/378", "title": "TMonitoredProcessor has some problems", "body": "position\uff1acom.twitter.common.thrift.monitoring.TMonitoredProcessor\n1.when client transport is closed,code wrapped.process(in, out) will throws an exception even client donot invoke any service method.so this method can only monitor long-connect thrift client.\n2.the time computer way is wrong,because long startNanos = System.nanoTime(); will execute even no thrift client invoke any service method.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stuhood": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/06905dc0f1a26440a79ff1164831c85ce2d1bdf0", "message": "Update to pants 1.4.0rc0 (#457)\n\n* Update to 1.4.0rc0\r\n\r\n* Require JDK8.\r\n\r\n* Skip scalafix for now.\r\n\r\n* Remove newly detected cycle due to isolated python tests."}, {"url": "https://api.github.com/repos/twitter/commons/commits/2fe96bdcd69ba894a43157809a267674ad0d0a47", "message": "New binary url."}, {"url": "https://api.github.com/repos/twitter/commons/commits/edbdb602042b0fa5fb7e4bdd886ddb0ab53add11", "message": "Update to 1.3.0, and fix warnings. (#453)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/cfd86c13d32c4dc6a3c19dcba66c5f7d96ed1016", "message": "Very likely to be the final release candidate! (#452)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2de63c8032ab01d90dce47ee28263cb414943a80", "message": "Upgrade to pants 1.3.0rc1 (#451)\n\n* Upgrade to 1.3.0rc1\r\n* Remove dead target, and fix argument ordering in ci.sh\r\n* Enable storing the buildcache in travis` cache.\r\n* Merge JVM target sets, drop a bunch of unnecessary test aliases.\r\n* Drop remote_python_thrift_fileset, fix resource definitions.\r\n* Clear RootMetrics (singleton... yuck) before use, and skip flaky test."}, {"url": "https://api.github.com/repos/twitter/commons/commits/c9c275907f154aac69e2d16ed64861374e1d27c4", "message": "Bump pants to 1.3.0.dev14 and fix deprecation warnings (#449)\n\n### Problem\r\n\r\nThe 1.2.1 upgrade was incomplete, and didn't update the ci.sh script for python.\r\n\r\n### Solution\r\n\r\nBump to a newer version, allow prerelease python dependencies, raise the python version constraint, and remove deprecated flags."}, {"url": "https://api.github.com/repos/twitter/commons/commits/4360d424d66f8e2eabc8c35021994a0263eae3ef", "message": "Update to pants 1.2.1 (#448)\n\n### Problem\r\n\r\ncommons is on a >1 year old, pre-`1.0.0` version of pants.\r\n\r\n### Solution\r\n\r\nUpdated to the latest stable version and got the majority of the tests passing."}, {"url": "https://api.github.com/repos/twitter/commons/commits/02833f537fe7ad19dee71b8631acd19fc7c9e933", "message": "Drop rbcommons in favor of github reviews. (#446)\n\n### Problem\r\n\r\nTwitter has decided to move away from RBCommons for external contributions, at least partially because of the improvements to Github reviews... but also due to a unanimous decision from the pantsbuild/pants project to move away from RBCommons as well (the largest project that was using rbcommons).\r\n\r\n### Solution\r\n\r\nUpdate documentation and scripts to describe a Github-pull-request-based workflow.\r\n\r\n### Result\r\n\r\nAll future review should be accomplished via Github pull requests."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brutkin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/ea422dd91e35d302f87c80433615aa9b946b969d", "message": "Add option to sort commands names in python app help (#455)\n\n* Fix python test command in README\r\nAllow sorting of command names for help in python apps\r\n\r\n* Jcohen feedback - make sort option cleaner"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/425", "title": "[python zookeeper] Add member_id to ServiceInstance object if provided.", "body": "Add member_id to ServiceInstance object if supplied when creating it and make that the default action when creating a serverset list. This is mostly useful for reconciling issues with the serverset e.g. duplicate registration.\n\nTests all pass:\n$ ./pants test tests/python/twitter/common/zookeeper:all\n11:22:40 00:02         [chroot]============== test session starts ===============\n                     platform darwin -- Python 2.7.10 -- py-1.4.31 -- pytest-2.6.4\n                     plugins: cov, timeout\n                     collected 85 items\n\n```\n                 tests/python/twitter/common/zookeeper/kazoo_client_test.py .\n                 tests/python/twitter/common/zookeeper/group/test_active_kazoo_group.py ................................................\n                 tests/python/twitter/common/zookeeper/group/test_kazoo_group.py ..................\n                 tests/python/twitter/common/zookeeper/serverset/test_endpoint.py ............\n                 tests/python/twitter/common/zookeeper/serverset/test_kazoo_serverset.py .....\n                 tests/python/twitter/common/zookeeper/serverset/test_serverset_unit.py .\n\n                 =========== 85 passed in 23.80 seconds ===========\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maheshgaya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/45a0159a8e170baaf88103322cfacb2a0e073405", "message": "docs: updated broken link"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BobbyD-FL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/b97322f923bb75b3174693c739f7fca682d3fcd7", "message": "Bump Version to 0.3.9\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167790573\n\nBugs closed: 443\n\nReviewed at https://rbcommons.com/s/twitter/r/4313/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/fd79470188bb9a1f96c8a8f4368a25627bd03022", "message": "Bump Version to 0.3.8\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167517517\n\nBugs closed: 441\n\nReviewed at https://rbcommons.com/s/twitter/r/4307/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/18d4bbc8fb1c9fc5a2bcf9c3190aefcfcf36890b", "message": "Added CommandUtil.cmd_within_path() within twitter.common.util.command_util and patched twitter.common.fs.hdfs\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/167214107\n\nBugs closed: 440\n\nReviewed at https://rbcommons.com/s/twitter/r/4302/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chickenbellyfinn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7a61c23cc0085329bc95e762701ea66c5050e7a7", "message": "Fix AttributeError in HDFSHelper constructor (#436)\n\nuse_hadoop_v1 isn't a member variable. \r\nhttps://github.com/twitter/commons/issues/435"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drewrothstein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/77b31021cc19410aac060887dded2319c9c62814", "message": "Bump VERSION to 0.3.6.\n\nBugs closed: 434\n\nReviewed at https://rbcommons.com/s/twitter/r/4109/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/b444e9ea95a9b6f9699e57db88cdc1a15857aabd", "message": "[hadoop] change hadoop to hdfs cli\n\n[hadoop] add v1 option but default to hdfs\n\nGitHub: https://github.com/twitter/commons/pull/433/\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/141925751\n\nUpdated Travis: https://travis-ci.org/twitter/commons/builds/143485107\n\nBugs closed: 433\n\nReviewed at https://rbcommons.com/s/twitter/r/4048/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atollena": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/c19dcc8820641948a079c6dfe6e463a53cb51f69", "message": "Merge pull request #426 from atollena/endpoint-ip-addresses\n\npython: Add IP addresses to serverset entries"}, {"url": "https://api.github.com/repos/twitter/commons/commits/a85b7ad9aae1150190aa8be30b83e5f0bb91508b", "message": "python: Add IP addresses to serverset entries\n\nServerSet entries contain hostnames that require a DNS lookup before\nuse. When hostnames map to a unique, fixed IP address, this additional\nlookup is unnecessary and can put strain on DNS infrastructure in large\ndeployments.\n\nThis change adds 2 optional fields to server set endpoints: `inet` and\n`inet6` respectively for a human readable representation of an IPv4 and\nof an IPv6 address.\n\nHostnames are still mandatory, for backward compatibility with clients\nthat expect those fields. Port is untouched."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "a-sahdev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/456", "title": "fixed issue #329", "body": "### Problem\r\n\r\nThis fixes issue #329 , where one process was reading a file partially written by another process.\r\n\r\n### Solution\r\n\r\nOnly open the file once the 'if onwait' is true. This is done by moving the file read operation within the if statement.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "exarus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/444", "title": "Update styleguide.md", "body": "I think that \n\n> `(a << (8 * n) + 1) | 0xFF`\n> is a bit less obvious than:\n> `(a << (8 * n + 1)) | 0xFF`\n> Because it's a bit harder to guess which has a higher precedence: `+` or `>>`.\n> But muck easier to guess that a `*` has a higher precedence than `+`. Except that, `*` is placed left, so even if the reader is confused about the precedence of `+` and `*`, than he may just apply those operations one by one from left to right just as they would be with the same precedence.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sttts": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/423", "title": "Fix Zookeeper group member listener leak in leader election", "body": "The Candidate implementation leaks GroupChangeListener objects when abdicating\nleadership. These objects are registered as watches for group members and are\nnever deregistered. Consequently, one gets more and more ugly messages like\n\n  \"Current member ID %s is not a candidate for leader, current voting: %s\"\n\nin the logs.\n\nThis change only creates one watch for the Candidate implementation and reused it\nto avoid the leak (note: there is no way to actually remove a watch that has\nbeen registered before).\n\nFixes https://github.com/mesosphere/marathon/issues/2419.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesbroadhead": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/421", "title": "[check.pex] rm UPPER_SNAKE_CASED rule", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ameya-pandilwar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/420", "title": "Updated comparisions of floating values for NaN", "body": "Fix for #322 \n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/419", "title": "Fix bug in method for checking name collision", "body": "Fix for #413 \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mandar-Shinde": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/416", "title": "Updated README.md with markup for github", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mzhaom": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/415", "title": "Switch certain usage of deprecated guava API to new ones.", "body": "IputSupplier<? extends InputStream>  has been deprecated by ByteSource.\nhttp://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/InputSupplier.html\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santazhang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/390", "title": "fix _make_proxy_function() in twitter/common/app/__init__.py", "body": "`method_name` should be used instead of `attribute`.\n\n`attribute` is actually a global variable introduced later. Current code happen to work because calling `_make_proxy_function(attribute)` makes `method_name` equal to `attribute`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "christian-esken": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/373", "title": "Annotation based skipping of fields in ObjectSizeCalculator", "body": "This change adds annotation support to ObjectSizeCalculator. The whole object tree below a field annotated with ObjectSizeIgnoreField is ignored. \n## When to use\n\nThis is useful if there are references to other objects not of interest. For example, objects from a DB may be cached in the heap. If one measures that Cache separately, there may be no need to measure references from other places to those objects (again). Also, references to a classloader (directly or indirectly via a Thread instance) can end up with measuring the whole heap.\n## Technical details\n\nIgnoring means to ignore the whole object subtree _below the field_. The field itself is counted normally: _References_ are counted with the size of a reference in the memory model. As _primitive types_ are never shared, they are not ignored and thus always counted.\nThe annotation class can be freely chosen via setIgnoreFieldAnnotation(), to avoid hard runtime dependencies to ObjectSizeCalculator  or ObjectSizeIgnoreField.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benpoliquin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/358", "title": "Windowed.getCurrentIndex() changed int to long", "body": "When using e.g. WindowedStatistics with a time window/number of slice combination that results in a sliceDuration of less than 662 ms(currently) index calculation in Windowed.getCurrentIndex() fails because System.currentTimeMillis()/662 > Integer.MAX_VALUE and casting it to int produces unpredictable results.\n\n\"Best case\" is that getCurrentIndex() returns a negative value (as happened to me), causing an ArrayIndexOutOfBoundsException because the whole code in sync() is skipped and index will remain at the initial value of -1.\n\nThis is Issue #355 .\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinfeng": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/354", "title": "add cmdline argFileAllowed attribute to support @argfile for those options with extremely long values", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/340", "title": "Use new Travis CI container infrastructure", "body": "http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/\n\nSigned-off-by: Chris Aniszczyk zx@twitter.com\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162", "body": "Any reason Maven isn't used here? It's pretty much the standard build system for open source java stuff.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648", "body": "My pain point is that if you want people to contribute, use a standard build technology. I understand I'm saying this as an outsider though so take it like you wish.\n\nMaven3 is quite a bit faster than maven2 these days, even supports OSGi. As a person who spent migrating the majority of eclipse.org's infrastructure to maven3 it doesn't suck that bad anymore. It has a large ecosystem where you can easily integrate with tools like Hudson/Jenkins, code coverage etc... It would be nice if this would be investigated in the future again.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rgs1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/307", "title": "Allow properties dict along within a ServiceInstance", "body": "When joining a ServerSet, it can be handy to attach some extra data to\nthe published ServiceInstance (i.e.: debugging info, service version,\netc.). This is expressed in the form of a <str, str> properties dict.\n\nThis only takes effect when reading/writing JSON (for now).\n\nSigned-off-by: Raul Gutierrez S rgs@twitter.com\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simeonf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/262", "title": "Building sphinx docs for src/python/twitter/commons", "body": "I added a docs folder for the python twitter.commons stuff. The source for much documentation is an email thread from Brian Wickman so it should be mostly correct.\n\nI also did some autodocing to pull in docs in docstrings in the source. This occasionally necessitated sphinxifying the docstrings to supress warnings/errors or rendering bugs.\n\nBuild the docs by installing sphinx and running:\n\n```\nsphinx-build -b html -d ./docs/_build/doctrees  ./docs ./docs/_build/html \n```\n\nfrom the src/python/twitter/commons directory.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkwarren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/224", "title": "Add a close() method to ZooKeeperMap.", "body": "Enable a ZooKeeperMap user to signal that it no longer requires the map\nany longer by calling ZooKeeperMap.close(). This removes any persistent\nwatchers against ZooKeeperClient (allowing it to be GC'd), stops\nregistering any additional watchers against ZooKeeper, and prevents any\nadditional callbacks to the ZooKeeperMap.Listener interface.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teddziuba": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/192", "title": "Staked bootstrapping distribute version", "body": "This commit stakes the version of `distribute` that Pants depends on to `0.6.34`. It also adds a guard check against failure to bootstrap `pkg_resources.py` or `setuptools` into the Pants build.\n\nThe problem with using `distribute>=0.6.24` as a requirement is that it's possible to pick up `distribute>=0.7` which is actually a meta-package, and does not contain `pkg_resources.py` or `setuptools`, it simply declares `setuptools` as a dependency. Since the iteration to choose the `distribute` package to bootstrap in is eager, and happens in no particular order, this is a thing that could happen easily (it did on my build).\n\nIn normal `pip` land, there is no problem with this, but the way that Pants bootstraps `distribute` makes it difficult, since it doesn't pull in the transitive closure of dependencies, it simply iterates over the files in the `distribute` package and copies them to chroot.\n\nIn the case that it picks up `distribute>=0.7`, this results in there being no `pkg_resources.py` or `setuptools` copied into subsequent .pex files. Normally this would not cause any obvious problems, since most environments where a .pex file would run include `setuptools` in their system Python installations.\n\nHowever, if you work where I do, the production machines are very slimly configured, and do not include a reasonable system Python. This results in the bootstrap script inside the .pex file to fail to import `pkg_resources.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wfarner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085", "body": "All should be fixed, with the exception of src/thrift/org/apache/scribe/0.1.2/fb303.thrift, i'm not sure if we have the authority to re-license that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646", "body": "Just wanted to ACK that this is on the radar.  Expect some useful feedback by end of business week at the worst.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516", "body": "Remove trailing space in \"Logger Config \".\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520", "body": "Indenting is off here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545", "body": "Feel free to collapse this td tag to a one-liner: `<td>$logger.name$</td>`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558", "body": "Don't space-pad attributes, e.g. `class='selectlevels'`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170", "body": "Any way to vote to change it to use maven? :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ewhauser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405", "body": "Have you actually tried to compile and build with pants?  It's exponentially faster than a Maven build would be with 120 projects in a multi-project build.  \n\nStop complaining because you don't want to take the time to understand their tool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ntolia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988", "body": "Evidently, I don't have permission to reopen.\n\nThe problem is definitely on the twitter commons side as seen in the relevant part of `mvn dependency:tree` below. `com.twitter.common.args` pulls in an old version of `org.reflections` which in turn depends on `collections`. Now, the reflections package moved to Guava a little while ago - https://code.google.com/p/reflections/source/diff?spec=svn111&r=105&format=side&path=/trunk/reflections/pom.xml&old_path=/trunk/reflections/pom.xml&old=104 - but evidently the args package isn't pulling in the most recent bits.\n\n```\n[INFO] \\- com.twitter.common:zookeeper:jar:0.0.24:compile\n[INFO]    +- org.apache.zookeeper:zookeeper:jar:3.3.3:compile\n[INFO]    |  +- log4j:log4j:jar:1.2.15:compile\n[INFO]    |  |  +- javax.mail:mail:jar:1.4:compile\n[INFO]    |  |  |  \\- javax.activation:activation:jar:1.1:compile\n[INFO]    |  |  \\- javax.jms:jms:jar:1.1:compile\n[INFO]    |  \\- jline:jline:jar:0.9.94:compile\n[INFO]    +- com.twitter.common:args:jar:0.1.7:compile\n[INFO]    |  \\- org.reflections:reflections:jar:0.9.5-RC2:compile\n[INFO]    |     +- com.google.collections:google-collections:jar:1.0:compile\n[INFO]    |     +- javassist:javassist:jar:3.8.0.GA:compile\n[INFO]    |     \\- dom4j:dom4j:jar:1.6:compile\n[INFO]    |        \\- xml-apis:xml-apis:jar:1.0.b2:compile\n[INFO]    +- com.twitter.common:base:jar:0.0.17:compile\n[INFO]    +- com.twitter.common:io-json:jar:0.0.2:compile\n[INFO]    |  +- com.google.code.gson:gson:jar:1.6:compile\n[INFO]    |  \\- com.twitter.common:io:jar:0.0.10:compile\n[INFO]    +- com.twitter.common:io-thrift:jar:0.0.10:compile\n[INFO]    |  \\- org.slf4j:slf4j-jdk14:jar:1.5.10:compile\n[INFO]    +- com.twitter.common:net-util:jar:0.0.12:compile\n[INFO]    |  \\- com.twitter.common:collections:jar:0.0.16:compile\n[INFO]    +- com.twitter.common:dynamic-host-set:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:net-pool:jar:0.0.12:compile\n[INFO]    |  +- com.twitter.common:stats:jar:0.0.14:compile\n[INFO]    |  |  +- com.twitter.common:stats-provider:jar:0.0.8:compile\n[INFO]    |  |  +- com.twitter.common:application-action:jar:0.0.6:compile\n[INFO]    |  |  \\- com.twitter.common:util-sampler:jar:0.0.9:compile\n[INFO]    |  \\- com.twitter.common:util-system-mocks:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:quantity:jar:0.0.14:compile\n[INFO]    +- com.twitter.common:util:jar:0.0.20:compile\n[INFO]    |  \\- com.twitter.common:jdk-logging:jar:0.0.5:compile\n[INFO]    \\- com.twitter.common:service-thrift:jar:0.0.10:compile\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090", "body": "That would be correct. Adding the following to my ZK import does seem to fix the javadoc portion of the build but I will wait for the updated jars. Thanks for the quick turnaround!\n\n```\n        <exclusion>\n          <groupId>com.google.collections</groupId>\n          <artifactId>google-collections</artifactId>\n        </exclusion>\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396", "body": "Works great. Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819", "body": "And, while we are on this issue, why does the lock convert a ZooKeeper exception into a runtime/unchecked exception in cleanup() - https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/DistributedLockImpl.java#L206 ? Makes it complicated to properly unlock if a disconnection happens.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047", "body": "Another unexpected thing. `tryLock(long, TimeUnit)` does not actually timeout as expected if no ZK server is found and instead seems to block forever. I believe this is because of `prepare()` which calls `ZooKeeperUtils.ensurePath()`. `ensurePath()` can block forever because it calls `ZooKeeperClient.get()`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543", "body": "About the first issue, lets say that a client creates a lock on a particular path. It manages to grab the lock but is disconnected at some future point in time. The ephemeral node gets destroyed and some other client can therefore grab the lock. However, the first client still assumes it has it and the lock will not get any notification.\n\nWith regards to the other bugs, I also found a few more issues. Would you be willing to accept a patch like https://github.com/ntolia/commons/commit/89280c50413f3b92ea142cf17e1c917dcbb119a3 ? I have a similar patch working in a private repository but cannot seem to get pants to work for me. After fixing some python incompatibility issues, it can't seem to find the ' spy#memcached;2.4.2' dependency.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794", "body": "Bump.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556", "body": "Florian, can you give me an idea of the unit tests you are looking for? Most of my patch has to do with correctness and cleanups. The only thing I can think of right now is a test that checks that tryLock(long timeout, TimeUnit unit) does not block forever if no server is present.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "florianleibert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581", "body": "Hi - \njust got around looking at this. Thanks for your input.\n\nFor the issue that you're reporting - would you mind updating the unit test to reflect the issue you are seeing? That way, I'll be able to verify that your patch works.\n\nThanks!\nFlorian\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "leothekim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406", "body": "Indeed. I meant to type \"collections\" there.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427", "body": "Sounds sensible. I think I'll rename 'createWithStat' to 'create'. I don't like the name, and only chose it because the compiler would use type erasure to translate Function&lt;byte[], T&gt;.\n\nI'll add NodeDeserializer to the zookeeper package.\n\nUpdate: Looks like github doesn't html-escape arrow brackets.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "benjyw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697", "body": "I _think_ the pull request now contains a revert for the checkstyle\nthing. It also contains other commits that are already in your repo,\nnot sure why.\n\nOn Tue, Apr 3, 2012 at 2:26 AM, John Sirois\nreply@reply.github.com\nwrote:\n\n> > @@ -120,18 +121,39 @@ def execute(self, targets):\n> > \u00a0 \u00a0 \u00a0 \u00a0of (conf, jar path).\n> > \u00a0 \u00a0 \u00a0\"\"\"\n> > - \u00a0 \u00a0def dirname_for_requested_targets(targets):\n> \n> you could use self.context.id\n> see context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\n> If you wan't to change that to use sha1 instead of md5 - sgtm\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/twitter/commons/pull/22/files#r638015\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599", "body": "Fixed as requested.\n\nOn Tue, Sep 11, 2012 at 7:42 PM, brian wickman notifications@github.comwrote:\n\n> In src/python/twitter/pants/targets/internal.py:\n> \n> > @@ -62,7 +62,7 @@ def sort_targets(cls, internal_targets):\n> >      def invert(target):\n> >        if target not in visited:\n> >          visited.add(target)\n> > -        if target.internal_dependencies:\n> > -        if hasattr(target, 'internal_dependencies') and target.internal_dependencies:\n> \n> if getattr(target, 'internal_dependencies', None):\n> ...\n> \n> achieves the same thing\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/twitter/commons/pull/80/files#r1582996.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380", "body": "Changed this to use isinstance(), but will leave the larger change for a separate commit, if that's OK?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wickman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996", "body": "if getattr(target, 'internal_dependencies', None):\n  ...\n\nachieves the same thing\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724", "body": "in general you want to avoid type(foo) == concrete_type and instead use isinstance, e.g. isinstance(classifiers, list).  of course, there are other iterable things that are not lists, so to be fully compatible, you might want something like:\n\n``` python\ndef maybe_list(value, expected_type=str):\n  from collections import Iterable\n  if isinstance(value, expected_type):\n    return [value]\n  elif isinstance(value, Iterable):\n    real_values = list(iter(value))\n    if not all(isinstance(v, expected_type) for v in real_values):\n      raise ValueError('Element of list is not of type %r' % expected_type)\n    return real_values\n  else:\n    raise ValueError('Value must be a %r or iterable of %r' % (expected_type, expected_type))\n```\n\nthen in several places in twitter-commons, we should just be doing, e.g.\n\nself.classifiers = maybe_list(classifiers)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447", "body": "Please build artifacts for macosx-10.4-x86_64\n\nAs it stands, 10.8-intel won't work with most Twitter laptops, including mine, whereas 10.4-x86_64 should include everything we've had in the last four years.\n\nSee https://gist.github.com/wickman/5550908 for a bootstrapper script for rolling your own set of Python interpreters that build 10.4-x86_64.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479", "body": "This doesn't make sense to me.  'platform' is never populated for SourceLinks -- how could this ever be used?  SourceLinks are only e.g. .zip, .tar.gz, .tgz.  Am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ryan-williams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185", "body": "good point. done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "4": {"jayeye": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/454", "title": "The release of twitter.common.app on pypi does not work with python3.5 (and possibly earlier)", "body": "This happens pretty much everywhere I've tried it, but to make sure I checked it in a fresh installation of python3.5 on Amazon Linux:\r\n\r\n    $ cat x.py\r\n    from twitter.common import app\r\n\r\n    $ python3.5 x.py\r\n    Traceback (most recent call last):\r\n      File \"x.py\", line 1, in <module>\r\n        from twitter.common import app\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/__init__.py\", line 39, in <module>\r\n        from .application import Application\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/app/application.py\", line 39, in <module>\r\n        from twitter.common.process import daemonize\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/__init__.py\", line 7, in <module>\r\n        from .process_provider_ps import ProcessProvider_PS\r\n      File \"/usr/local/lib/python3.5/site-packages/twitter/common/process/process_provider_ps.py\", line 2, in <module>\r\n        from process_handle_ps import ProcessHandlePs\r\n    ImportError: No module named 'process_handle_ps'\r\n\r\nAnd here is what's installed:\r\n\r\n    $ pip-3.5 freeze\r\n    twitter.common.app==0.3.9\r\n    twitter.common.collections==0.3.9\r\n    twitter.common.contextutil==0.3.9\r\n    twitter.common.dirutil==0.3.9\r\n    twitter.common.lang==0.3.9\r\n    twitter.common.log==0.3.9\r\n    twitter.common.options==0.3.9\r\n    twitter.common.process==0.3.9\r\n    twitter.common.string==0.3.9\r\n    twitter.common.util==0.3.9\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dslztx": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/438", "title": "I find a bug in src/java/com/twitter/common/objectsize/ObjectSizeCalculator.java", "body": "There are some classes as follows:\n\n```\nclass A {\n    int a;\n}\n\n\nclass B extends A {\n    long b;\n}\n\n\nclass C extends B {\n    char c;\n}\n\npublic class Main\n{\npublic static void main(String[] args)\n{\n    C c=new C();\n    System.out.println(ObjectSizeCalculator.getObjectSize(c));\n}\n}\n```\n\nIn 32 bits JDK,the result of your program execution is **24**,but the exact result is **32**.\nI also write a program for calculating java object size,please take a look at [java-object-size](https://github.com/dslztx/java-object-size)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwlzn": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/437", "title": "Kill twitter.common.python vestiges", "body": "a while back, `twitter.common.python` became `pex`. there are still references to `twitter.common.python` scattered in the code base - particularly, a failure in the release script:\n\n```\n                   Running register sdist upload against /Users/kwilson/dev/commons/dist/twitter.common.python-0.7.0**** Failed to install twitter.common.python-0.7.0. stdout:\nrunning register\nrunning egg_info\ncreating src/twitter.common.python.egg-info\nwriting requirements to src/twitter.common.python.egg-info/requires.txt\nwriting src/twitter.common.python.egg-info/PKG-INFO\nwriting namespace_packages to src/twitter.common.python.egg-info/namespace_packages.txt\nwriting top-level names to src/twitter.common.python.egg-info/top_level.txt\nwriting dependency_links to src/twitter.common.python.egg-info/dependency_links.txt\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwriting manifest file 'src/twitter.common.python.egg-info/SOURCES.txt'\nrunning check\nRegistering twitter.common.python to https://pypi.python.org/pypi\nServer response (200): OK\nrunning sdist\ncreating twitter.common.python-0.7.0\ncreating twitter.common.python-0.7.0/src\ncreating twitter.common.python-0.7.0/src/twitter\ncreating twitter.common.python-0.7.0/src/twitter.common.python.egg-info\ncreating twitter.common.python-0.7.0/src/twitter/common\ncreating twitter.common.python-0.7.0/src/twitter/common/python\ncreating twitter.common.python-0.7.0/src/twitter/common/python/http\nmaking hard links in twitter.common.python-0.7.0...\nhard linking MANIFEST.in -> twitter.common.python-0.7.0\nhard linking setup.py -> twitter.common.python-0.7.0\nhard linking src/twitter/__init__.py -> twitter.common.python-0.7.0/src/twitter\nhard linking src/twitter.common.python.egg-info/PKG-INFO -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/SOURCES.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/dependency_links.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/namespace_packages.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/requires.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/top_level.txt -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter.common.python.egg-info/zip-safe -> twitter.common.python-0.7.0/src/twitter.common.python.egg-info\nhard linking src/twitter/common/__init__.py -> twitter.common.python-0.7.0/src/twitter/common\nhard linking src/twitter/common/python/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/base.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/common.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/compatibility.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/environment.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/fetcher.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/finders.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/installer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/interpreter.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/marshaller.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/obtainer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/orderedset.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/package.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pep425.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_bootstrapper.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_builder.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/pex_info.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/platforms.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/resolver.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/testing.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/translator.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/util.py -> twitter.common.python-0.7.0/src/twitter/common/python\nhard linking src/twitter/common/python/http/__init__.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/crawler.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/http.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/link.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nhard linking src/twitter/common/python/http/tracer.py -> twitter.common.python-0.7.0/src/twitter/common/python/http\nWriting twitter.common.python-0.7.0/setup.cfg\ncreating dist\nCreating tar archive\nremoving 'twitter.common.python-0.7.0' (and everything under it)\nrunning upload\nSubmitting dist/twitter.common.python-0.7.0.tar.gz to https://pypi.python.org/pypi\n\n**** Failed to install twitter.common.python-0.7.0. stderr:\nwarning: check: missing meta-data: either (author and author_email) or (maintainer and maintainer_email) must be supplied\n\nwarning: sdist: standard file not found: should have one of README, README.rst, README.txt\n\nUpload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\nerror: Upload failed (400): A file named \"twitter.common.python-0.7.0.tar.gz\" already exists for  twitter.common.python-0.7.0. To fix problems with that file you should create a new release.\n```\n\nwe should clean this up.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/issues/430", "title": "Flaky test: tests/python/twitter/common/metrics/test_sampling.py:test_sampler_base", "body": "this can manifest in CI as:\n\n```\n                     tests/python/twitter/common/metrics/test_sampling.py F..\n                     tests/python/twitter/common/metrics/test_gauges.py ......\n\n                     ==================== FAILURES ====================\n                     _______________ test_sampler_base ________________\n\n                         def test_sampler_base():\n                           class TestSampler(SamplerBase):\n                             def __init__(self, period, clock):\n                               self.count = 0\n                               SamplerBase.__init__(self, period, clock)\n\n                             def iterate(self):\n                               self.count += 1\n\n                           test_clock = ThreadedClock()\n                           sampler = TestSampler(Amount(1, Time.SECONDS), clock=test_clock)\n                           sampler.start()\n\n                           assert test_clock.converge(threads=[sampler])\n                           test_clock.assert_waiting(sampler, 1)\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 0\n\n                           test_clock.tick(0.5)\n                           assert test_clock.converge(threads=[sampler])\n                           assert sampler.count == 1\n\n                           test_clock.tick(5)\n                           assert test_clock.converge(threads=[sampler])\n                     >     assert sampler.count == 6\n                     E     assert 2 == 6\n                     E      +  where 2 = <TestSampler(Thread-1 [TID=5876], started daemon 140429632481024)>.count\n\n                     tests/python/twitter/common/metrics/test_sampling.py:58: AssertionError\n                     -------------- Captured stderr call --------------\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 0.5\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 1.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 2.0\n                     [<twitter.common.testing.clock.ThreadedClock object at 0x2dd1990>] Time now: 6.0\n                      1 failed, 21 passed, 1 warnings in 0.44 seconds =\n```\n\nbut succeeds on rebuild.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/89bc492969d735ea177374b178e39ea6cf0d85ed", "message": "Bump VERSION"}, {"url": "https://api.github.com/repos/twitter/commons/commits/941c7b4a06048e484e21f613bc04004f3756b16f", "message": "Repair ./rbt for review posting.\n\nAs Mateo noted in https://github.com/twitter/commons/pull/428, `./rbt` in the commons repo seems to have been broken @ 146de3 due to removal of the underlying virtualenv bits.\n\nThis RB restores the requisite venv deps and bumps both `virtualenv` and `rbtools` to their latest pypi versions to get `./rbt` functional again.\n\nTesting Done:\nDogfooded for this very review + green CI @ https://travis-ci.org/twitter/commons/builds/129290520 for good measure.\n\nbefore:\n\n```\n[illuminati commons (master)]$ ./rbt --version\n./rbt: line 3: build-support/python/libvirtualenv.sh: No such file or directory\n./rbt: line 4: setup_virtualenv: command not found\n./rbt: line 6: exec: rbt: not found\n```\n\nafter:\n\n```\n[illuminati commons (kwlzn/commons/rbt_fix)]$ ./rbt --version\nBootstrapping rbt with requirements RBTools==0.7.6\nUsing /Users/kwilson/Python/CPython-2.7.11/bin/python2.7\n~/dev/commons/build-support ~/dev/commons\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1799k  100 1799k    0     0  2207k      0 --:--:-- --:--:-- --:--:-- 2205k\n...\n~/dev/commons\nNew python executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python2.7\nAlso creating executable in /Users/kwilson/dev/commons/build-support/rbt.venv/bin/python\nInstalling setuptools, pip, wheel...done.\nCollecting RBTools==0.7.6\n  Using cached RBTools-0.7.6-py2-none-any.whl\nCollecting six>=1.8.0 (from RBTools==0.7.6)\n  Using cached six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: six, RBTools\nSuccessfully installed RBTools-0.7.6 six-1.10.0\nRBTools 0.7.6\n```\n\nReviewed at https://rbcommons.com/s/twitter/r/3858/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2097ff289d8e04040a6b004d2c6ba64a061661f0", "message": "Revert Diff 2 pants.ini changes from RB #3155"}, {"url": "https://api.github.com/repos/twitter/commons/commits/32011ab5351fea23e8c70e24e752540b06d1389f", "message": "[twitter/commons] Upgrade pants from 0.0.44 -> 0.0.59\n\nUpon merging an innocuous PR after 2+ months of no merges, CI broke in the commons repo due to https://github.com/pantsbuild/pants/issues/2566 + the public release of pytest-timeout-1.0.0 (which is visible by commons via open dep resolution against pypi). This change addresses that by upgrading the entire commons repo to pants 0.0.59 wherein #2566 is repaired.\n\n- Upgrade pants to 0.0.59.\n- Fixup various symbol references and usages throughout.\n- Update excludes syntax.\n- Upgrade to contrib python checks plugin for PythonEval (which brings along checkstyle).\n- Implement repo-wide python checkstyle suppression due to numerous checkstyle errors in the codebase.\n- Sync out latest twitter.common.args from Twitter's source repo to support removal of apt-args plugin.\n- Eliminate the apt-args plugin, which is no longer needed with isolation.\n\nTesting Done:\nhttps://travis-ci.org/twitter/commons/builds/92376412\n\nBugs closed: 414\n\nReviewed at https://rbcommons.com/s/twitter/r/3155/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/811ac6c0a31e8616c3be006e3a1b5d0b728297ec", "message": "Merge pull request #407 from johnskopis/jskopis/update-kazoo\n\nUpgrade kazoo 1.3.1 -> 2.2.1"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrwilby": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/432", "title": "Am I missing something - isn't this a thread leak?", "body": "Where does this thread (below):\n\n```\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n```\n\nget cleaned up when close() is called? I see a ton of these threads lingering around in one open source project we are using. \n## \n\n public ZooKeeperClient(Amount<Integer, Time> sessionTimeout, Credentials credentials,\n      Optional<String> chrootPath, Iterable<InetSocketAddress> zooKeeperServers) {\n    this.sessionTimeoutMs = Preconditions.checkNotNull(sessionTimeout).as(Time.MILLISECONDS);\n    this.credentials = Preconditions.checkNotNull(credentials);\n\n```\nif (chrootPath.isPresent()) {\n  PathUtils.validatePath(chrootPath.get());\n}\n\nPreconditions.checkNotNull(zooKeeperServers);\nPreconditions.checkArgument(!Iterables.isEmpty(zooKeeperServers),\n    \"Must present at least 1 ZK server\");\n\nThread watcherProcessor = new Thread(\"ZookeeperClient-watcherProcessor\") {\n  @Override\n  public void run() {\n    while (true) {\n      try {\n        WatchedEvent event = eventQueue.take();\n        for (Watcher watcher : watchers) {\n          watcher.process(event);\n        }\n      } catch (InterruptedException e) { /* ignore */ }\n    }\n  }\n};\nwatcherProcessor.setDaemon(true);\nwatcherProcessor.start();\n\nIterable<String> servers =\n    Iterables.transform(ImmutableSet.copyOf(zooKeeperServers),\n        InetSocketAddressHelper.INET_TO_STR);\nthis.zooKeeperServers = Joiner.on(',').join(servers);\nthis.connectString = this.zooKeeperServers.concat(chrootPath.or(\"\"));\n```\n\n  }\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mateor": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/427", "title": "Request to update python `futures` library", "body": "The twitter.common libs depends on a pretty old version of `futures`, could you update to a more recent version?\n\nThis conflicts with the `futures` range required by some of our python libraries. `boto3-1.3.0` is the most recent example that sent me here, it requires `futures>=2.2.0,<4.0.0` for python 2.7. But this is not the first time I have seen it, just the first time I decided to try and solve the problem instead of working around it \ud83d\ude04 \n\nBoto3 requirements include [the dep here](https://github.com/boto/boto3/blob/67409f27c8e180b4e9e942fc2f795dbfc7e98c7f/setup.cfg).\n\nThe futures range above goes from 2.2.0 -> 4.0.0, but the most recent published version of `futures` is only 3.0.5, fyi.\n\nI cloned t.c. and upgraded `futures` to the minimum viable upgrade (to  `2.2.0`) and will be sending a pull request along.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/e8de9d16eda3c22c1a866178f73a12355fc5699c", "message": "Update the futures library.\n\nThis bumps futures to a more modern version,\nsome useful Python libraries are pinned to a range\nthat is later than the current t.c. `futures` version.\n\nex. boto3 is pinned to `futures>=2.2.0,<4.0.0` for python2.7\n\nThis is the minimum-viable change that makes the t.c.\nlibs compatible.\n\nTesting Done:\nRan ci.sh locally and Travis passed: https://github.com/twitter/commons/pull/428\n\nBugs closed: 427, 428\n\nReviewed at https://rbcommons.com/s/twitter/r/3857/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/431", "title": "Convert 3rdparty/python to use the python_requirements target.", "body": "Twitter commons was using a wrapper function around its python\ndependencies to create python_requirement_library targets.\nThe python_requirements library is able to understand a pip\nrequirements.txt file and convert each entry into the\npython_requirement_library target needed by Pants.\n\nThe python_requirements target uses the project name as a target\nname. The original  wrapper was maintained for a few dependencies\nwhen their name clashed with Pants BUILD file conventions.\n\nI also removed the easy_install thrift, it looks like it was\nput in place to service aurora, who was later unblocked.\n\nLet me know if you think it should be returned:\nhttps://github.com/pantsbuild/pants/issues/2533\n\nThe purpose of this change is to enable a simple interface to convert\nsome python dependencies from being hardcoded to a single rev into\nbeing able to be satisfied by a release range. I will submit\nany dependency version changes separately.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcandre": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/422", "title": "Can't find twitter common base Either in published apidocs", "body": "", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/418", "title": "Publish to Maven Central", "body": "twitter-commons has some really good stuff, especially the Zookeeper lock implementation. Could we publish twitter-commons to Maven Central, to make it easier for people to use these libs without having to link to custom artifact repos?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Abel123": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/413", "title": "bug in commons/src/java/com/twitter/common/metrics/Metrics.java", "body": "commons/src/java/com/twitter/common/metrics/Metrics.java\n\nline 39    if (gauges.containsKey(key) || counters.containsKey(key) || counters.containsKey(key)) {\n\nwhich should be     if (gauges.containsKey(key) || counters.containsKey(key) || histograms .containsKey(key)) {\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orsenthil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/411", "title": "Error while running tests. SourcePackage is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)", "body": "On master\n\n```\n$ git log origin/master -n 1 |head -n 3\ncommit d4454f233914d0a7586da8c5d07575d8b63124fe\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Mon Aug 24 15:09:53 2015\n```\n\nrunning the tests\n\n$ ./pants test tests/python/twitter/common:all\n\ngives me an error\n\n```\nException message: Package     SourcePackage(u'https://pypi.python.org/packages/source/w/wheel/wheel-0.24.0.tar.gz#md5=3b0d66f0d127ea8befaa5d11453107fd') is not translateable by ChainedTranslator(EggTranslator, SourceTranslator)\n```\n\nIf I go back to an old commit (this was the latest which succeeded for me)\n\n```\n$ git log HEAD -n 1 |head -n 6\ncommit bc7248da0974ab8a39ca36956ac6880029b85b00\nAuthor: John Sirois <john.sirois@gmail.com>\nDate:   Sun Aug 9 20:29:10 2015\n\n    Upgrade to pants 0.0.41\n```\n\nand run the tests.\n\n```\n$ ./pants test tests/python/twitter/common:all\n```\n\nThe test execution is successful.\n- The difference between these versions are only about pants version update.\n- FWIW, I tried the latest version of pants in pantsbuild/pants and **could not** reproduce this error. I am raising this against twitter/commons\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/405", "title": "checkstyle does not allow class scoped variables for staticmethod", "body": "It may be good idea to discuss this as a ticket.\n\nCheckstyle prevents the use of class scoped variables with a staticmethod. \n\n```\nclass MyClass(object):\n\n  VARIABLE = None\n\n  @staticmethod\n  def method():\n    return MyClass.VARIABLE\n```\n\n$ check.pex\n\n```\nT800:WARNING science/src/python/twitter/packer/lib/packer_client.py:046 Instead of MyClass.VARIABLE use self.VARIABLE or cls.VARIABLE with instancemethods and classmethods respectively.\n     |    return MyClass.VARIABLE\n```\n\nIt is entirely desirable to have a) staticmethod  b) have a class scoped variables in staticmethod. We do not care for subclassing in staticmethods, so enforcing the users to change it to classmethods may not be a good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7b4843fb2947ec9bc3ff7769a37d05ad2220fc48", "message": "Merge pull request #412 from landism/master\n\neliminate double slash in reviewboard urls"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923", "body": "I think, this is a typo. It should be extras_path\n\nOtherwise, it crashes with a NameError\n\nNameError: global name 'extra_paths' is not defined\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4665923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "brian-brazil": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/396", "title": "com.twitter.common.zookeeper:server-set references non-existant com.twitter.common:service-thrift:jar:0.2.21", "body": "Hi,\n\nI have the following in my POM:\n\n```\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>client</artifactId>\n                        <version>0.0.8</version>\n                </dependency>\n                <dependency>\n                        <groupId>com.twitter.common.zookeeper</groupId>\n                        <artifactId>server-set</artifactId>\n                        <version>1.0.110</version>\n                </dependency>\n```\n\nWhich results in:\n\n```\n[ERROR] Failed to execute goal on project boxever-dropwizard-extras-load-balancer: Could not resolve dependencies for project com.boxever:boxever-dropwizard-extras-load-balancer:jar:0.7.1.62-SNAPSHOT: Failure to find com.twitter.common:service-thrift:jar:0.2.21 in http://maven.twttr.com/ was cached in the local repository, resolution will not be reattempted until the update interval of twitter-twttr has elapsed or updates are forced -> [Help 1]\n\n```\n\nand indeed there is no such version at http://maven.twttr.com/com/twitter/common/service-thrift/\n\nMy guess is that the server-set pom is out of date.\n#346 may be related.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevints": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/387", "title": "Python releases exist that contain no code changes", "body": "This is a bug in the release process. It looks like releases get created as one atomic unit. This leads to a situation where there are releases of individual component libraries that don't actually contain any code changes (and nor do their parents), leaving downstream users to resolve version conflicts that don't actually exist.\n\nFor example, twitter.common.quantity==0.3.2 and twitter.common.quantity==0.3.3 have identical code, but the twitter.common.quantity==0.3.3 requires twitter.common.lang==0.3.3, so the metadata is different. Okay, that warrants releasing a new version. But wait, twitter.common.lang==0.3.2 and twitter.common.lang==0.3.3 have identical code and no dependencies. So twitter.common.lang's version should not have been incremented, and that increment should not have cascaded to its dependees.\n\nThe alternative: a version change for a component needs to \"cascade\" to its dependees, but only when there's an actual code change. This means that a change to twitter.common.quantity source files causes an increment to its version and its dependees, but not to its parent twitter.common.lang.\n\nI'm not sure how the version strategy is implemented currently but would like to start a discussion toward changing it before the next release.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsirois": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/386", "title": "Consider restructuring python targets to be 1-1-1", "body": "See #385 for the java side of this.  In java, fine grained and deep package structures are more of-the-norm.  In python, less so; so this issue is phrased as a \"consider\".  The idea though is to eliminate most or all exclude lists in sources globs in the python codebase.  This would require re-structuring packages and thus risk breaking clients imports.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/385", "title": "Restructure java targets to be 1-1-1.", "body": "Today there are many java BUILD targets that are subsets of a package.  To maintain the BUILD files for these targets in a reasonable way, constant lists of source files are defined that can be subtracted out from target sources lists using the globs exclude facility.  At some point pants will likely remove the ability to define constants in BUILD files and this mode of defining non 1-1-1 targets will be taken away, forcing duplication of file lists and the associated maintenance risk.\n\nThere are 2 complicating factors here:\n1. re-packaging will likely break clients of the java jars - they'll need to fix imports; so, this will require a deprecation cycle\n2. IIUC the official home for the java code is still inside Twitter walls; so, this refactoring really needs to occur in Twitter's repo and then be synced out here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/0c5c6e3030b3890e20f3c2e85c5628d0ab7fc3d1", "message": "Work around lockfile break.\n\nThis pins lockfile's pbr dep on lockfile's behalf as reccomended here:\n  https://groups.google.com/d/topic/pants-devel/OnPISJosUoI/discussion\n\nTesting Done:\nCI went green here:\n  https://travis-ci.org/twitter/commons/builds/125937912\n\nBugs closed: 424\n\nReviewed at https://rbcommons.com/s/twitter/r/3762/"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/342", "title": "Use Travis CIs new container based builds.", "body": "The announcement is here:\n  http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure\nThe specs here:\n  http://docs.travis-ci.com/user/workers/container-based-infrastructure\n  http://docs.travis-ci.com/user/caching/#Fetching-and-storing-caches\n\nThis also turns on caching for ~/.pants.d, ~/.ivy2\nand the current pants version bootstraped in\nbuild-support.  To make virtualenv caching work, updates\nthe virtualenv bootstrap script to use a stable directory name\nacross virtualenv versions.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768", "body": "We need to update the README and will be blogging about pants and sapling by ~end of May, but the build already works - but is custom (uses ant/ivy behind the scenes).  You need python 2.6 and ant 1.8+ installed and then, from the root of the repo, you run:\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nThis will likely fail on the 1st run and explain steps for installing a python templating library (mako) dependency.  After installing mako you should be good to go.\n\nFor example to compile all code and run all tests.\n$ ./pants tests/java/com/twitter/common:all-tests!\n\nYou can learn a bit more using:\n$ ./pants help\nTjis will list subcommands available.\n\n$ ./pants help [subcommand]\nThis will give even more info about a particular subcommand.\n\nIn short - the repo is a monolithic source tree, but it produces many jars - vs a typical gradle/buildr/maven multi-module project where there would be a top-level project directory for each artifact-producing project.  Currently pants provides 40 thin jars from its one source tree:\n$ ./pants list --provides --provides-columns=artifact_id\ncom.twitter.common#application-action\ncom.twitter.common#application\ncom.twitter.common#application-http\ncom.twitter.common#application-modules\ncom.twitter.common#args\ncom.twitter.common#base\ncom.twitter.common#collections\ncom.twitter.common#inject\ncom.twitter.common#inject-timed\ncom.twitter.common#io\ncom.twitter.common#io-thrift\ncom.twitter.common#logging\ncom.twitter.common#dynamic-host-set\ncom.twitter.common#net-util\ncom.twitter.common#net-pool\ncom.twitter.common#net-http\ncom.twitter.common#net-http-handlers-text\ncom.twitter.common#net-http-handlers-string-template\ncom.twitter.common#net-http-handlers\ncom.twitter.common#net-http-handlers-thrift\ncom.twitter.common#net-http-handlers-time-series\ncom.twitter.common#quantity\ncom.twitter#serverset\ncom.twitter.common#stats-provider\ncom.twitter.common#stats\ncom.twitter.common#stats-jvm\ncom.twitter.common#stats-time-series\ncom.twitter.common#stats-util\ncom.twitter.common#thrift\ncom.twitter.common#jdk-logging\ncom.twitter.common#util\ncom.twitter.common#util-system-mocks\ncom.twitter.common#util-sampler\ncom.twitter.common#util-testing\ncom.twitter.common#util-caching\ncom.twitter.common#zookeeper\ncom.twitter.common#zookeeper-testing\ncom.twitter.common#stats-ostrich-adapter\ncom.twitter.common#service-thrift\norg.apache.scribe#scribe_client\n\nAnd some of these jars are very thin in and of themselves, leveraging internal and external jars:\n$ ./pants files src/java/com/twitter/common/quantity\ncom/twitter/common/quantity/Amount.java\ncom/twitter/common/quantity/Data.java\ncom/twitter/common/quantity/Time.java\ncom/twitter/common/quantity/Unit.java\n\n$ ./pants depmap -m src/java/com/twitter/common/quantity\ncom.twitter.common-quantity\n  com.twitter.common-collections\n    commons-lang-commons-lang-2.4\n    com.google.guava-guava-r08\n    com.google.code.findbugs-jsr305-1.3.9\n\nThe goal is to make it _very_ easy to craft lean targets that export minimal APIs and compose these.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1030768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933", "body": "Looks good, but also needs to cover *.st and *.mk files\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952", "body": "Looks like this covers the missing transforms:\n$ find build-support/ 3rdparty/ src/ tests/  -type f | xargs grep \"Licensed\" | grep \" to \"\nsrc//python/pants/ant/templates/ivy.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/protobuf/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/src/thrift/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/java/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/ant/templates/tests/scala/build.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/index.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/doc/assets/javadoc.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/classpath-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/project-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/eclipse/templates/pydevproject-3.5.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/module-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//python/pants/commands/idea/templates/project-10.mk:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/application/http/graphview.html:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logconfig.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/logprinter.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//resources/com/twitter/common/net/http/handlers/thrift.st:Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/common/thrift/text/TTextProtocolTest.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/endpoint.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/com/twitter/thrift/twitter.thrift:// Licensed to the Apache Software Foundation (ASF) under one or more contributor license\nsrc//thrift/org/apache/scribe/0.1.2/fb303.thrift: \\* Licensed to the Apache Software Foundation (ASF) under one\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1090952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842", "body": "LGTM - thanks, merging\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1097842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395", "body": "Yes - scalability on 2 fronts:\n1.) What you see is a small slice of a much larger repo (using saplling: http://pypi.python.org/pypi/sapling https://github.com/jsirois/sapling) with >20 leaf projects and some common_internal libraries they share that are specific to internal twitter infrastucture.  In total, using a maven-like build system, we'd have > 120 top level projects in a classic maven multi-project build.  We were motivated by a strong desire to maintain a single source tree allowing for easy refactors across the global code base and easy discoverability of common code amongst 100s of developers scaling towards 1000s.\n2.) We needed to support several languages 1st class.  In particular - in this open source split you can see and use the excellent python support\n\nThe artifacts this build system exports are fully maven and ivy compatible, but a big shortcoming is that all the build documentation is still on internal wikis.  This will be remedied at some point.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477", "body": "You could vote to change to maven or anything else if it fits the requirements described.  In particular, besides the shortcoming of scant (non-existant!) docs right now on the public wiki for operating the pants build tool, what additional pain points are you encountering?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667", "body": "It does not support a single source tree though in any reasonable way afaict and does not support python.\nI understand the pain point on contribution though and its on us to update the wiki with good docs.\nThat said - if you are an eclipse or intellij user, the following works well for development:\n$ ./pants (idea|eclipse) tests/java/com/twitter/common:all -n common -c\nSee pants help (eclipse|idea) for more info.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375", "body": "Yes - the zk deps are a bit of a pain, we do the same (see: https://github.com/twitter/commons/blob/master/3rdparty/BUILD : 215).  com.twitter.common#zookeeper#0.0.24 itself depends on guava r09, see: http://maven.twttr.com/com/twitter/common/zookeeper/0.0.24/zookeeper-0.0.24.pom (or https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/BUILD).  I think the interesting thing here will be a dependency report to show what is getting pulled in by whom.  I'll run an ivy dep-report for a fake project with 1 dep on com.twitter.common#zookeeper#0.0.24 and see what that reveals...\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410", "body": "Ok, so my experiment went as follows:\n\n$ git diff\ndiff --git a/src/java/com/twitter/common/zookeeper/BUILD b/src/java/com/twitter/common/zookeeper/BUILD\nindex a83fc74..aa39954 100644\n--- a/src/java/com/twitter/common/zookeeper/BUILD\n+++ b/src/java/com/twitter/common/zookeeper/BUILD\n@@ -60,3 +60,8 @@ java_library(name = 'testing',\n   ],\n   sources = globs('testing/*.java'),\n )\n+\n+java_library(name = 'repro',\n-  dependencies = [ pants(':zookeeper') ],\n-  sources = [ '**none_hack**' ]\n  +)\n  $ ./pants src/java/com/twitter/common/zookeeper:repro compile dep-report\n  $ grep google target/src.java.com.twitter.common.zookeeper.repro/reports/ivy/internal-src.java.com.twitter.common.zookeeper.repro-default.dot\n      \"com.google.inject-guice\" [label=\"guice\\n3.0\"];\n      \"com.google.code.gson-gson\" [label=\"gson\\n1.6\"];\n      \"com.google.code.findbugs-jsr305\" [label=\"jsr305\\n1.3.9\"];\n      \"com.google.guava-guava\" [label=\"guava\\nr09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.inject-guice\" [label=\"3.0\"];\n  \"com.google.inject-guice\" -> \"org.sonatype.sisu.inject-cglib\" [label=\"2.2.1-v20090111\"];\n  \"com.google.inject-guice\" -> \"aopalliance-aopalliance\" [label=\"1.0\"];\n  \"com.twitter.common-io-json\" -> \"com.google.code.gson-gson\" [label=\"1.6\"];\n  \"com.twitter.common-util\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-stats\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-collections\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.code.findbugs-jsr305\" [label=\"1.3.9\"];\n  \"com.google.inject-guice\" -> \"javax.inject-javax.inject\" [label=\"1\"];\n  \"com.twitter.common-io-json\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-base\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-collections\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-jdk-logging\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-dynamic-host-set\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-pool\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-net-util\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-system-mocks\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-stats-provider\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-io-thrift\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-zookeeper\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-util-sampler\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-application-action\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-quantity\" -> \"com.google.guava-guava\" [label=\"r09\"];\n  \"com.twitter.common-args-apt\" -> \"com.google.guava-guava\" [label=\"r09\"];\n\nThis .dot file is generated by ivy:report (http://ant.apache.org/ivy/history/latest-milestone/use/report.html) and represents the full transitive dependency set of my fake target with its 1 dep on com.twitter.common#zookeeper.  I suspect your pom has a dependency on something elese that is pulling in the old google collections lib and you just need to exclude it.  We've run into this problem internally a few times (once this week even).  If you find new evidence please reopen.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002", "body": "Aha - ty.  The source from the last push on github is ahead of the last jar we cut.  We no longer use reflections, but instead a compile-time annotation processor, see: https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/args/BUILD\n\nI'll push the updated jars and then close.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052", "body": "I'm in process of pushing the fixed jars, but note the previous rev of 3rdparty/BUILD https://github.com/twitter/commons/blob/89ae581d728aecc39bde1e8843209a0998cd2b96/3rdparty/BUILD : 130 \nIn the old args setup we ourselves exclude old guava for the reasons you're encountering.  Afaict excludes are not transitive in ivy or maven worlds, ie: if we exclude some artifacts, users of our artifact must also choose to add the excludes (zookeeper -> log4j case in point), they won't automatically propagate.  I may be completely wrong on this point though.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748", "body": "Ok - should be good to go now: http://twitter.github.com/commons/apidocs/index.html#com.twitter.common.zookeeper.Group\nPublished @ 0.0.25 -> args 0.1.10 -> args-apt 0.0.1\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190", "body": "Sorry - just noticed this issue.   There seem to be a few bugs here:\n1.) tryLock(long, TimeUnit) clocking forever is clearly one bug.\n2.) cleanup() / the ublic methods should throw documented unchecked exceptions at the very least\n\nThe 1st issue you mention can't be fully right.  A session timeout implies the lock ephemeral node dies which release the lock.  A disconnect is expected to happen and should not affect holdig of the lock, only session expiry or explict release should relinquish the lock.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100", "body": "Thanks for the report, fixed here: https://github.com/twitter/commons/commit/faaa279231a432fef0d3613d92a769f7f432c96c\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2533100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855", "body": "There is no plan to fix this TODO in the near term - the [loadbalancing](https://github.com/twitter/commons/tree/master/src/java/com/twitter/common/net/loadbalancing) has been pure client side so far for internal use.  We've switched nearly all internal uses of ThriftFactory/Thrift internally to finagle and so this bit of code has not seen active development in ~6 months.  Consider making this switch as well, our internal effort towards RPCs is all focused here and the client builder already supports a configurable connection [max idle time](https://github.com/twitter/finagle/blob/master/finagle-core/src/main/scala/com/twitter/finagle/builder/ClientBuilder.scala#L460) that does what you want.\n\nThat said, ee'd happily accept a patch.  Taking a quick look, it seems like adding a forwarding ConnectionPool that only managed idle timeouts would be straight forward.  The messier bit would be wiring this option in through ThriftFactory/Thrift.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/3340855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/897804", "body": "testing:\n$ ./pants src/java/com/twitter/common/zookeeper:client\n$ ./pants src/java/com/twitter/common/zookeeper:node\n$ ./pants src/java/com/twitter/common/zookeeper:map\n$ ./pants src/java/com/twitter/common/zookeeper:group\n$ ./pants src/java/com/twitter/common/zookeeper:partitioner\n$ ./pants src/java/com/twitter/common/zookeeper:candidate\n$ ./pants src/java/com/twitter/common/zookeeper:lock\n$ ./pants src/java/com/twitter/common/zookeeper:server-set\n$ ./pants src/java/com/twitter/common/zookeeper:singleton-service\n$ ./pants src/java/com/twitter/common/zookeeper\n$ ./pants tests/java/com/twitter/common/zookeeper\n$ ./pants list src/java/com/twitter/common/zookeeper --provides\nsrc/java/com/twitter/common/zookeeper/BUILD:client com.twitter.common.zookeeper#client\nsrc/java/com/twitter/common/zookeeper/BUILD:node com.twitter.common.zookeeper#node\nsrc/java/com/twitter/common/zookeeper/BUILD:map com.twitter.common.zookeeper#map\nsrc/java/com/twitter/common/zookeeper/BUILD:lock com.twitter.common.zookeeper#lock\nsrc/java/com/twitter/common/zookeeper/BUILD:group com.twitter.common.zookeeper#group\nsrc/java/com/twitter/common/zookeeper/BUILD:partitioner com.twitter.common.zookeeper#partitioner\nsrc/java/com/twitter/common/zookeeper/BUILD:candidate com.twitter.common.zookeeper#candidate\nsrc/java/com/twitter/common/zookeeper/BUILD:server-set com.twitter.common.zookeeper#server-set\nsrc/java/com/twitter/common/zookeeper/BUILD:singleton-service com.twitter.common.zookeeper#singleton-service\nsrc/java/com/twitter/common/zookeeper/BUILD:testing com.twitter.common#zookeeper-testing\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/897804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109239", "body": "Thats sounds like an old pants.pex.  I'm not sure what your setup is, but you need to rebuild pants.pex.  This is done in the commons repo with:\n\n``` console\nrm pants.pex\n./pants.bootstrap\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8923242", "body": "Was there a reviewboard for this?  Standard operating procedure is to post a review to rbcommons and apply the final shipped change via `rbt patch -c [RB ID]` which avoids merges and leaves a review trail in the commit message itself.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8923242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8924057", "body": "I got here directly from a red travis build that I re-started (now green).  Thanks for the link.  So this was all kosher mod the change application to master at the very end.  I'll need to ressurrect the contirbutor guide info that went away when pants migrated out of commons.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8924057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/8939182", "body": "...and this change never made it to (twitter/commons) master.  I must have followed a _branch_ red ci to a _clone_ master merge which is all fine.  Sorry for the noise.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8939182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972", "body": "typo? src/java/com/twitter/common/commons/BUILD does not exist\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995", "body": "With a new name and some docs, I'd prefer this be elevated to the fundamental public interface for the user-supplied node value materializer.  I think anytime you have a function that takes more than 1 arg in a public interface, its more clear to create a dedicated interface.  This affords an opportunity to choose a better name than apply if one exists and also choose a more apt name for the function interface.  I think the benefits this bestows users of the api often outweigh the inconvenience to the library author and those api users that might benefit from something like Functions.compose for example. \n\nNaming suggestion:\ninterface NodeDeserializer<T> {\n  T deserialize(byte[] data, Stat stat);\n}\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/637995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270", "body": "kill extra blank line above and kill @Nullable below - looks like you never pass null\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275", "body": "Add T docs:\n[newline]\n@param <T> .....\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280", "body": "this should chain to once of the creates below\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/642280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975", "body": "Hah - this actually fixed problems with classes being examined by checkstyle that depended on thrift gen code iirc.  I'll test on our codebase to confirm.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/631975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015", "body": "you could use self.context.id\nsee context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\nIf you wan't to change that to use sha1 instead of md5 - sgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912", "body": "I think MockPantsTarget can just extend object now\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919", "body": "this fellow should have a license header too - Foursquare Labs lgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952", "body": "> 100 cols\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2733952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162", "body": "Yeah - so the translator can only in practice translate for the current platform.  If the pants.ini or python_binary asks for a non-native platform, without this fix, a SourceLink will happily build for the native platform and return success.  We ask for linux - it hands us back mac.  This in fact accounts for many surprise build on mac, deploy to linux runtime failures at Twitter today.  I tried 3 variants of the fix - the other 2 were in Obtainer and in *Link - I landed here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226", "body": "Yup - Benjy added the old eggs (https://github.com/twitter/commons/tree/binaries/pants/third_party/python/dist) so I'll fix down.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4163226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566", "body": "Oops - read better and you're right - link.platform should be Platform.current()\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4166566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ericzundel": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/380", "title": "fnmatch_translate_extended() incorrectly translates wildcard pattern", "body": "I found that the fnmatch_translate_extended translation of the pattern 'squareup/inventory/adjustment*.proto' to a regular expression did not match the string 'squareup/inventory/adjustment.proto'\n\nThis is because the re returned expects at least one character to replace '*' in the expression above:\n\n```\nfrom twitter.common.dirutil.fileset import fnmatch_translate_extended\npattern = fnmatch_translate_extended('squareup/inventory/adjustment*.proto')\n(Pdb) p pattern\nu'squareup\\\\/inventory\\\\/adjustment([^/]+)\\\\.proto\\\\Z(?ms)'\n```\n\nA better translation would be to replace the '+' with '*':\n\n```\nu'squareup\\\\/inventory\\\\/adjustment([^/]*)\\\\.proto\\\\Z(?ms)'\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/381", "title": "Bugfix for fnmatch_translate_extended() to match zero characters for '*'", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/306", "title": "Adds a DefaultOrderedDict class", "body": "This new class is meant to be a substitute for defaultdict().   I wanted to use it in pants because I'm trying to get to the bottom of what seems to be non-deterministic behavior in ordering the classpath for jvm compiles between different machines both working from head of master in the same repo.\n\nI also added some tests for OrderedDict while I was at it.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/6388651", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6388651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/6388662", "body": "There is one thing, it seems that the attribution to scottb@squareup.com might have gotten lost.  \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6388662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wanggaohang": {"issues": [{"url": "https://api.github.com/repos/twitter/commons/issues/378", "title": "TMonitoredProcessor has some problems", "body": "position\uff1acom.twitter.common.thrift.monitoring.TMonitoredProcessor\n1.when client transport is closed,code wrapped.process(in, out) will throws an exception even client donot invoke any service method.so this method can only monitor long-connect thrift client.\n2.the time computer way is wrong,because long startNanos = System.nanoTime(); will execute even no thrift client invoke any service method.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stuhood": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/06905dc0f1a26440a79ff1164831c85ce2d1bdf0", "message": "Update to pants 1.4.0rc0 (#457)\n\n* Update to 1.4.0rc0\r\n\r\n* Require JDK8.\r\n\r\n* Skip scalafix for now.\r\n\r\n* Remove newly detected cycle due to isolated python tests."}, {"url": "https://api.github.com/repos/twitter/commons/commits/2fe96bdcd69ba894a43157809a267674ad0d0a47", "message": "New binary url."}, {"url": "https://api.github.com/repos/twitter/commons/commits/edbdb602042b0fa5fb7e4bdd886ddb0ab53add11", "message": "Update to 1.3.0, and fix warnings. (#453)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/cfd86c13d32c4dc6a3c19dcba66c5f7d96ed1016", "message": "Very likely to be the final release candidate! (#452)"}, {"url": "https://api.github.com/repos/twitter/commons/commits/2de63c8032ab01d90dce47ee28263cb414943a80", "message": "Upgrade to pants 1.3.0rc1 (#451)\n\n* Upgrade to 1.3.0rc1\r\n* Remove dead target, and fix argument ordering in ci.sh\r\n* Enable storing the buildcache in travis` cache.\r\n* Merge JVM target sets, drop a bunch of unnecessary test aliases.\r\n* Drop remote_python_thrift_fileset, fix resource definitions.\r\n* Clear RootMetrics (singleton... yuck) before use, and skip flaky test."}, {"url": "https://api.github.com/repos/twitter/commons/commits/c9c275907f154aac69e2d16ed64861374e1d27c4", "message": "Bump pants to 1.3.0.dev14 and fix deprecation warnings (#449)\n\n### Problem\r\n\r\nThe 1.2.1 upgrade was incomplete, and didn't update the ci.sh script for python.\r\n\r\n### Solution\r\n\r\nBump to a newer version, allow prerelease python dependencies, raise the python version constraint, and remove deprecated flags."}, {"url": "https://api.github.com/repos/twitter/commons/commits/4360d424d66f8e2eabc8c35021994a0263eae3ef", "message": "Update to pants 1.2.1 (#448)\n\n### Problem\r\n\r\ncommons is on a >1 year old, pre-`1.0.0` version of pants.\r\n\r\n### Solution\r\n\r\nUpdated to the latest stable version and got the majority of the tests passing."}, {"url": "https://api.github.com/repos/twitter/commons/commits/02833f537fe7ad19dee71b8631acd19fc7c9e933", "message": "Drop rbcommons in favor of github reviews. (#446)\n\n### Problem\r\n\r\nTwitter has decided to move away from RBCommons for external contributions, at least partially because of the improvements to Github reviews... but also due to a unanimous decision from the pantsbuild/pants project to move away from RBCommons as well (the largest project that was using rbcommons).\r\n\r\n### Solution\r\n\r\nUpdate documentation and scripts to describe a Github-pull-request-based workflow.\r\n\r\n### Result\r\n\r\nAll future review should be accomplished via Github pull requests."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brutkin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/ea422dd91e35d302f87c80433615aa9b946b969d", "message": "Add option to sort commands names in python app help (#455)\n\n* Fix python test command in README\r\nAllow sorting of command names for help in python apps\r\n\r\n* Jcohen feedback - make sort option cleaner"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/425", "title": "[python zookeeper] Add member_id to ServiceInstance object if provided.", "body": "Add member_id to ServiceInstance object if supplied when creating it and make that the default action when creating a serverset list. This is mostly useful for reconciling issues with the serverset e.g. duplicate registration.\n\nTests all pass:\n$ ./pants test tests/python/twitter/common/zookeeper:all\n11:22:40 00:02         [chroot]============== test session starts ===============\n                     platform darwin -- Python 2.7.10 -- py-1.4.31 -- pytest-2.6.4\n                     plugins: cov, timeout\n                     collected 85 items\n\n```\n                 tests/python/twitter/common/zookeeper/kazoo_client_test.py .\n                 tests/python/twitter/common/zookeeper/group/test_active_kazoo_group.py ................................................\n                 tests/python/twitter/common/zookeeper/group/test_kazoo_group.py ..................\n                 tests/python/twitter/common/zookeeper/serverset/test_endpoint.py ............\n                 tests/python/twitter/common/zookeeper/serverset/test_kazoo_serverset.py .....\n                 tests/python/twitter/common/zookeeper/serverset/test_serverset_unit.py .\n\n                 =========== 85 passed in 23.80 seconds ===========\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maheshgaya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/45a0159a8e170baaf88103322cfacb2a0e073405", "message": "docs: updated broken link"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BobbyD-FL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/b97322f923bb75b3174693c739f7fca682d3fcd7", "message": "Bump Version to 0.3.9\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167790573\n\nBugs closed: 443\n\nReviewed at https://rbcommons.com/s/twitter/r/4313/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/fd79470188bb9a1f96c8a8f4368a25627bd03022", "message": "Bump Version to 0.3.8\n\nTesting Done:\nTravis CI: https://travis-ci.org/twitter/commons/builds/167517517\n\nBugs closed: 441\n\nReviewed at https://rbcommons.com/s/twitter/r/4307/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/18d4bbc8fb1c9fc5a2bcf9c3190aefcfcf36890b", "message": "Added CommandUtil.cmd_within_path() within twitter.common.util.command_util and patched twitter.common.fs.hdfs\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/167214107\n\nBugs closed: 440\n\nReviewed at https://rbcommons.com/s/twitter/r/4302/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chickenbellyfinn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/7a61c23cc0085329bc95e762701ea66c5050e7a7", "message": "Fix AttributeError in HDFSHelper constructor (#436)\n\nuse_hadoop_v1 isn't a member variable. \r\nhttps://github.com/twitter/commons/issues/435"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drewrothstein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/77b31021cc19410aac060887dded2319c9c62814", "message": "Bump VERSION to 0.3.6.\n\nBugs closed: 434\n\nReviewed at https://rbcommons.com/s/twitter/r/4109/"}, {"url": "https://api.github.com/repos/twitter/commons/commits/b444e9ea95a9b6f9699e57db88cdc1a15857aabd", "message": "[hadoop] change hadoop to hdfs cli\n\n[hadoop] add v1 option but default to hdfs\n\nGitHub: https://github.com/twitter/commons/pull/433/\n\nTesting Done:\nTravis: https://travis-ci.org/twitter/commons/builds/141925751\n\nUpdated Travis: https://travis-ci.org/twitter/commons/builds/143485107\n\nBugs closed: 433\n\nReviewed at https://rbcommons.com/s/twitter/r/4048/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atollena": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/commons/commits/c19dcc8820641948a079c6dfe6e463a53cb51f69", "message": "Merge pull request #426 from atollena/endpoint-ip-addresses\n\npython: Add IP addresses to serverset entries"}, {"url": "https://api.github.com/repos/twitter/commons/commits/a85b7ad9aae1150190aa8be30b83e5f0bb91508b", "message": "python: Add IP addresses to serverset entries\n\nServerSet entries contain hostnames that require a DNS lookup before\nuse. When hostnames map to a unique, fixed IP address, this additional\nlookup is unnecessary and can put strain on DNS infrastructure in large\ndeployments.\n\nThis change adds 2 optional fields to server set endpoints: `inet` and\n`inet6` respectively for a human readable representation of an IPv4 and\nof an IPv6 address.\n\nHostnames are still mandatory, for backward compatibility with clients\nthat expect those fields. Port is untouched."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "a-sahdev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/456", "title": "fixed issue #329", "body": "### Problem\r\n\r\nThis fixes issue #329 , where one process was reading a file partially written by another process.\r\n\r\n### Solution\r\n\r\nOnly open the file once the 'if onwait' is true. This is done by moving the file read operation within the if statement.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "exarus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/444", "title": "Update styleguide.md", "body": "I think that \n\n> `(a << (8 * n) + 1) | 0xFF`\n> is a bit less obvious than:\n> `(a << (8 * n + 1)) | 0xFF`\n> Because it's a bit harder to guess which has a higher precedence: `+` or `>>`.\n> But muck easier to guess that a `*` has a higher precedence than `+`. Except that, `*` is placed left, so even if the reader is confused about the precedence of `+` and `*`, than he may just apply those operations one by one from left to right just as they would be with the same precedence.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sttts": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/423", "title": "Fix Zookeeper group member listener leak in leader election", "body": "The Candidate implementation leaks GroupChangeListener objects when abdicating\nleadership. These objects are registered as watches for group members and are\nnever deregistered. Consequently, one gets more and more ugly messages like\n\n  \"Current member ID %s is not a candidate for leader, current voting: %s\"\n\nin the logs.\n\nThis change only creates one watch for the Candidate implementation and reused it\nto avoid the leak (note: there is no way to actually remove a watch that has\nbeen registered before).\n\nFixes https://github.com/mesosphere/marathon/issues/2419.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesbroadhead": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/421", "title": "[check.pex] rm UPPER_SNAKE_CASED rule", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ameya-pandilwar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/420", "title": "Updated comparisions of floating values for NaN", "body": "Fix for #322 \n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/419", "title": "Fix bug in method for checking name collision", "body": "Fix for #413 \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mandar-Shinde": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/416", "title": "Updated README.md with markup for github", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mzhaom": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/415", "title": "Switch certain usage of deprecated guava API to new ones.", "body": "IputSupplier<? extends InputStream>  has been deprecated by ByteSource.\nhttp://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/InputSupplier.html\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "santazhang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/390", "title": "fix _make_proxy_function() in twitter/common/app/__init__.py", "body": "`method_name` should be used instead of `attribute`.\n\n`attribute` is actually a global variable introduced later. Current code happen to work because calling `_make_proxy_function(attribute)` makes `method_name` equal to `attribute`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "christian-esken": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/373", "title": "Annotation based skipping of fields in ObjectSizeCalculator", "body": "This change adds annotation support to ObjectSizeCalculator. The whole object tree below a field annotated with ObjectSizeIgnoreField is ignored. \n## When to use\n\nThis is useful if there are references to other objects not of interest. For example, objects from a DB may be cached in the heap. If one measures that Cache separately, there may be no need to measure references from other places to those objects (again). Also, references to a classloader (directly or indirectly via a Thread instance) can end up with measuring the whole heap.\n## Technical details\n\nIgnoring means to ignore the whole object subtree _below the field_. The field itself is counted normally: _References_ are counted with the size of a reference in the memory model. As _primitive types_ are never shared, they are not ignored and thus always counted.\nThe annotation class can be freely chosen via setIgnoreFieldAnnotation(), to avoid hard runtime dependencies to ObjectSizeCalculator  or ObjectSizeIgnoreField.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benpoliquin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/358", "title": "Windowed.getCurrentIndex() changed int to long", "body": "When using e.g. WindowedStatistics with a time window/number of slice combination that results in a sliceDuration of less than 662 ms(currently) index calculation in Windowed.getCurrentIndex() fails because System.currentTimeMillis()/662 > Integer.MAX_VALUE and casting it to int produces unpredictable results.\n\n\"Best case\" is that getCurrentIndex() returns a negative value (as happened to me), causing an ArrayIndexOutOfBoundsException because the whole code in sync() is skipped and index will remain at the initial value of -1.\n\nThis is Issue #355 .\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinfeng": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/354", "title": "add cmdline argFileAllowed attribute to support @argfile for those options with extremely long values", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/340", "title": "Use new Travis CI container infrastructure", "body": "http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/\n\nSigned-off-by: Chris Aniszczyk zx@twitter.com\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162", "body": "Any reason Maven isn't used here? It's pretty much the standard build system for open source java stuff.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1676162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648", "body": "My pain point is that if you want people to contribute, use a standard build technology. I understand I'm saying this as an outsider though so take it like you wish.\n\nMaven3 is quite a bit faster than maven2 these days, even supports OSGi. As a person who spent migrating the majority of eclipse.org's infrastructure to maven3 it doesn't suck that bad anymore. It has a large ecosystem where you can easily integrate with tools like Hudson/Jenkins, code coverage etc... It would be nice if this would be investigated in the future again.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rgs1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/307", "title": "Allow properties dict along within a ServiceInstance", "body": "When joining a ServerSet, it can be handy to attach some extra data to\nthe published ServiceInstance (i.e.: debugging info, service version,\netc.). This is expressed in the form of a <str, str> properties dict.\n\nThis only takes effect when reading/writing JSON (for now).\n\nSigned-off-by: Raul Gutierrez S rgs@twitter.com\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simeonf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/262", "title": "Building sphinx docs for src/python/twitter/commons", "body": "I added a docs folder for the python twitter.commons stuff. The source for much documentation is an email thread from Brian Wickman so it should be mostly correct.\n\nI also did some autodocing to pull in docs in docstrings in the source. This occasionally necessitated sphinxifying the docstrings to supress warnings/errors or rendering bugs.\n\nBuild the docs by installing sphinx and running:\n\n```\nsphinx-build -b html -d ./docs/_build/doctrees  ./docs ./docs/_build/html \n```\n\nfrom the src/python/twitter/commons directory.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkwarren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/224", "title": "Add a close() method to ZooKeeperMap.", "body": "Enable a ZooKeeperMap user to signal that it no longer requires the map\nany longer by calling ZooKeeperMap.close(). This removes any persistent\nwatchers against ZooKeeperClient (allowing it to be GC'd), stops\nregistering any additional watchers against ZooKeeper, and prevents any\nadditional callbacks to the ZooKeeperMap.Listener interface.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teddziuba": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/commons/pulls/192", "title": "Staked bootstrapping distribute version", "body": "This commit stakes the version of `distribute` that Pants depends on to `0.6.34`. It also adds a guard check against failure to bootstrap `pkg_resources.py` or `setuptools` into the Pants build.\n\nThe problem with using `distribute>=0.6.24` as a requirement is that it's possible to pick up `distribute>=0.7` which is actually a meta-package, and does not contain `pkg_resources.py` or `setuptools`, it simply declares `setuptools` as a dependency. Since the iteration to choose the `distribute` package to bootstrap in is eager, and happens in no particular order, this is a thing that could happen easily (it did on my build).\n\nIn normal `pip` land, there is no problem with this, but the way that Pants bootstraps `distribute` makes it difficult, since it doesn't pull in the transitive closure of dependencies, it simply iterates over the files in the `distribute` package and copies them to chroot.\n\nIn the case that it picks up `distribute>=0.7`, this results in there being no `pkg_resources.py` or `setuptools` copied into subsequent .pex files. Normally this would not cause any obvious problems, since most environments where a .pex file would run include `setuptools` in their system Python installations.\n\nHowever, if you work where I do, the production machines are very slimly configured, and do not include a reasonable system Python. This results in the bootstrap script inside the .pex file to fail to import `pkg_resources.py`.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wfarner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085", "body": "All should be fixed, with the exception of src/thrift/org/apache/scribe/0.1.2/fb303.thrift, i'm not sure if we have the authority to re-license that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1091085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646", "body": "Just wanted to ACK that this is on the radar.  Expect some useful feedback by end of business week at the worst.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2207646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516", "body": "Remove trailing space in \"Logger Config \".\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520", "body": "Indenting is off here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545", "body": "Feel free to collapse this td tag to a one-liner: `<td>$logger.name$</td>`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558", "body": "Don't space-pad attributes, e.g. `class='selectlevels'`\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/5518558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170", "body": "Any way to vote to change it to use maven? :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ewhauser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405", "body": "Have you actually tried to compile and build with pants?  It's exponentially faster than a Maven build would be with 120 projects in a multi-project build.  \n\nStop complaining because you don't want to take the time to understand their tool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1677405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ntolia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988", "body": "Evidently, I don't have permission to reopen.\n\nThe problem is definitely on the twitter commons side as seen in the relevant part of `mvn dependency:tree` below. `com.twitter.common.args` pulls in an old version of `org.reflections` which in turn depends on `collections`. Now, the reflections package moved to Guava a little while ago - https://code.google.com/p/reflections/source/diff?spec=svn111&r=105&format=side&path=/trunk/reflections/pom.xml&old_path=/trunk/reflections/pom.xml&old=104 - but evidently the args package isn't pulling in the most recent bits.\n\n```\n[INFO] \\- com.twitter.common:zookeeper:jar:0.0.24:compile\n[INFO]    +- org.apache.zookeeper:zookeeper:jar:3.3.3:compile\n[INFO]    |  +- log4j:log4j:jar:1.2.15:compile\n[INFO]    |  |  +- javax.mail:mail:jar:1.4:compile\n[INFO]    |  |  |  \\- javax.activation:activation:jar:1.1:compile\n[INFO]    |  |  \\- javax.jms:jms:jar:1.1:compile\n[INFO]    |  \\- jline:jline:jar:0.9.94:compile\n[INFO]    +- com.twitter.common:args:jar:0.1.7:compile\n[INFO]    |  \\- org.reflections:reflections:jar:0.9.5-RC2:compile\n[INFO]    |     +- com.google.collections:google-collections:jar:1.0:compile\n[INFO]    |     +- javassist:javassist:jar:3.8.0.GA:compile\n[INFO]    |     \\- dom4j:dom4j:jar:1.6:compile\n[INFO]    |        \\- xml-apis:xml-apis:jar:1.0.b2:compile\n[INFO]    +- com.twitter.common:base:jar:0.0.17:compile\n[INFO]    +- com.twitter.common:io-json:jar:0.0.2:compile\n[INFO]    |  +- com.google.code.gson:gson:jar:1.6:compile\n[INFO]    |  \\- com.twitter.common:io:jar:0.0.10:compile\n[INFO]    +- com.twitter.common:io-thrift:jar:0.0.10:compile\n[INFO]    |  \\- org.slf4j:slf4j-jdk14:jar:1.5.10:compile\n[INFO]    +- com.twitter.common:net-util:jar:0.0.12:compile\n[INFO]    |  \\- com.twitter.common:collections:jar:0.0.16:compile\n[INFO]    +- com.twitter.common:dynamic-host-set:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:net-pool:jar:0.0.12:compile\n[INFO]    |  +- com.twitter.common:stats:jar:0.0.14:compile\n[INFO]    |  |  +- com.twitter.common:stats-provider:jar:0.0.8:compile\n[INFO]    |  |  +- com.twitter.common:application-action:jar:0.0.6:compile\n[INFO]    |  |  \\- com.twitter.common:util-sampler:jar:0.0.9:compile\n[INFO]    |  \\- com.twitter.common:util-system-mocks:jar:0.0.9:compile\n[INFO]    +- com.twitter.common:quantity:jar:0.0.14:compile\n[INFO]    +- com.twitter.common:util:jar:0.0.20:compile\n[INFO]    |  \\- com.twitter.common:jdk-logging:jar:0.0.5:compile\n[INFO]    \\- com.twitter.common:service-thrift:jar:0.0.10:compile\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1695988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090", "body": "That would be correct. Adding the following to my ZK import does seem to fix the javadoc portion of the build but I will wait for the updated jars. Thanks for the quick turnaround!\n\n```\n        <exclusion>\n          <groupId>com.google.collections</groupId>\n          <artifactId>google-collections</artifactId>\n        </exclusion>\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1696090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396", "body": "Works great. Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1704396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819", "body": "And, while we are on this issue, why does the lock convert a ZooKeeper exception into a runtime/unchecked exception in cleanup() - https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/zookeeper/DistributedLockImpl.java#L206 ? Makes it complicated to properly unlock if a disconnection happens.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1739819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047", "body": "Another unexpected thing. `tryLock(long, TimeUnit)` does not actually timeout as expected if no ZK server is found and instead seems to block forever. I believe this is because of `prepare()` which calls `ZooKeeperUtils.ensurePath()`. `ensurePath()` can block forever because it calls `ZooKeeperClient.get()`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1746047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543", "body": "About the first issue, lets say that a client creates a lock on a particular path. It manages to grab the lock but is disconnected at some future point in time. The ephemeral node gets destroyed and some other client can therefore grab the lock. However, the first client still assumes it has it and the lock will not get any notification.\n\nWith regards to the other bugs, I also found a few more issues. Would you be willing to accept a patch like https://github.com/ntolia/commons/commit/89280c50413f3b92ea142cf17e1c917dcbb119a3 ? I have a similar patch working in a private repository but cannot seem to get pants to work for me. After fixing some python incompatibility issues, it can't seem to find the ' spy#memcached;2.4.2' dependency.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/1813543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794", "body": "Bump.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2173794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556", "body": "Florian, can you give me an idea of the unit tests you are looking for? Most of my patch has to do with correctness and cleanups. The only thing I can think of right now is a test that checks that tryLock(long timeout, TimeUnit unit) does not block forever if no server is present.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2484556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "florianleibert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581", "body": "Hi - \njust got around looking at this. Thanks for your input.\n\nFor the issue that you're reporting - would you mind updating the unit test to reflect the issue you are seeing? That way, I'll be able to verify that your patch works.\n\nThanks!\nFlorian\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/issues/comments/2227581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jonboulle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/2524994", "body": "FWIW, the error was because you wanted s/zincfile/cachepath/ on line 62 :-) \n(zincfile is not defined if an exception got thrown during its assignment)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/2524994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "simonandluna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/4657759", "body": "Wow, thanks for fixing it so quickly.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/4657759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "betepahos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5109153", "body": "any idea why i am geting :  File \"/media/datastore/Projects/twitterComonns/comgit/commons/BUILD.commons\", line 25, in <module>\n          from twitter.pants.base.build_environment import get_buildroot\n      ImportError: No module named build_environment\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109293", "body": " rebuilded - the same result i have 0.0.13 installed tried both the builded pex and the pip installed one with the same result \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5109389", "body": "http://pastie.org/8645818 -- something is going on  wrong on pants.bootstrap \n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5109389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5607662", "body": "just this one and its good to go. i have builded it and has no more surpises :)\n\ncommons/src/python/twitter/common/python/translator.py\", line 114, in translate\nos.rename(dist_path, target_path)\nOSError: [Errno 18] Invalid cross-device link\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5607662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "benjyw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5459257", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5459257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5459283", "body": "LGTM\n\nIn future can we not put large style changes in the same commits as real code changes? It's difficult to review such changes when you don't know if you're supposed to be looking for meaningful differences or not.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5459283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697", "body": "I _think_ the pull request now contains a revert for the checkstyle\nthing. It also contains other commits that are already in your repo,\nnot sure why.\n\nOn Tue, Apr 3, 2012 at 2:26 AM, John Sirois\nreply@reply.github.com\nwrote:\n\n> > @@ -120,18 +121,39 @@ def execute(self, targets):\n> > \u00a0 \u00a0 \u00a0 \u00a0of (conf, jar path).\n> > \u00a0 \u00a0 \u00a0\"\"\"\n> > - \u00a0 \u00a0def dirname_for_requested_targets(targets):\n> \n> you could use self.context.id\n> see context.identify: https://github.com/twitter/commons/blob/master/src/python/twitter/pants/goal/context.py#L32\n> If you wan't to change that to use sha1 instead of md5 - sgtm\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/twitter/commons/pull/22/files#r638015\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/653697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599", "body": "Fixed as requested.\n\nOn Tue, Sep 11, 2012 at 7:42 PM, brian wickman notifications@github.comwrote:\n\n> In src/python/twitter/pants/targets/internal.py:\n> \n> > @@ -62,7 +62,7 @@ def sort_targets(cls, internal_targets):\n> >      def invert(target):\n> >        if target not in visited:\n> >          visited.add(target)\n> > -        if target.internal_dependencies:\n> > -        if hasattr(target, 'internal_dependencies') and target.internal_dependencies:\n> \n> if getattr(target, 'internal_dependencies', None):\n> ...\n> \n> achieves the same thing\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/twitter/commons/pull/80/files#r1582996.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1589599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380", "body": "Changed this to use isinstance(), but will leave the larger change for a separate commit, if that's OK?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2021380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wickman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/5462997", "body": "FYI this is fixed in my rework_dependency_resolution branch:\n\n```\n--- a/src/python/twitter/pants/targets/python_target.py\n+++ b/src/python/twitter/pants/targets/python_target.py \n@@ -42,3 +42,10 @@ class PythonTarget(TargetWithDependencies, TargetWithSources):\n       except ValueError as e:\n         raise TargetDefinitionException(str(e))\n\n+  def resolve(self):\n+    for dep in super(PythonTarget, self).resolve():\n+      yield dep\n+    if self.provides:\n+      for binary in self.provides.binaries.values():\n+        for dep in binary.resolve():\n+          yield dep\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5462997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/comments/5607866", "body": "damn!  ok.  i'll audit the code on monday and replace all the os.renames with safe_rename.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/5607866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996", "body": "if getattr(target, 'internal_dependencies', None):\n  ...\n\nachieves the same thing\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/1582996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724", "body": "in general you want to avoid type(foo) == concrete_type and instead use isinstance, e.g. isinstance(classifiers, list).  of course, there are other iterable things that are not lists, so to be fully compatible, you might want something like:\n\n``` python\ndef maybe_list(value, expected_type=str):\n  from collections import Iterable\n  if isinstance(value, expected_type):\n    return [value]\n  elif isinstance(value, Iterable):\n    real_values = list(iter(value))\n    if not all(isinstance(v, expected_type) for v in real_values):\n      raise ValueError('Element of list is not of type %r' % expected_type)\n    return real_values\n  else:\n    raise ValueError('Value must be a %r or iterable of %r' % (expected_type, expected_type))\n```\n\nthen in several places in twitter-commons, we should just be doing, e.g.\n\nself.classifiers = maybe_list(classifiers)\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2012724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447", "body": "Please build artifacts for macosx-10.4-x86_64\n\nAs it stands, 10.8-intel won't work with most Twitter laptops, including mine, whereas 10.4-x86_64 should include everything we've had in the last four years.\n\nSee https://gist.github.com/wickman/5550908 for a bootstrapper script for rolling your own set of Python interpreters that build 10.4-x86_64.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479", "body": "This doesn't make sense to me.  'platform' is never populated for SourceLinks -- how could this ever be used?  SourceLinks are only e.g. .zip, .tar.gz, .tgz.  Am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/4162479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "marcottedan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/6015799", "body": "Do you avoid static import for performance issues or to ensure readable code and enforce standards?\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/6015799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Yasumoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/commons/comments/8923996", "body": "Did you get here from #335 ? If so, see #334 and https://rbcommons.com/s/twitter/r/1460/\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/comments/8923996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "leothekim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406", "body": "Indeed. I meant to type \"collections\" there.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427", "body": "Sounds sensible. I think I'll rename 'createWithStat' to 'create'. I don't like the name, and only chose it because the compiler would use type erasure to translate Function&lt;byte[], T&gt;.\n\nI'll add NodeDeserializer to the zookeeper package.\n\nUpdate: Looks like github doesn't html-escape arrow brackets.\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/638427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ryan-williams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185", "body": "good point. done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/twitter/commons/pulls/comments/2734197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}