{"_default": {"1": {"ehoogerbeets": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206", "title": "Formatting a full datetime with a time zone always gives \"UTC\" as the timezone name", "body": "This code:\r\n\r\n```ruby\r\nTime.now.to_datetime.localize.with_timezone(\"America/Los_Angeles\").to_full_s\r\n```\r\n\r\ngives:\r\n\r\n```\r\n\"Wednesday, July 26, 2017 at 1:03:23 PM UTC -08:00\"\r\n```\r\n\r\nNote that it says \"UTC\" even though I made it clear that the time zone is America/Los_Angeles (ie. PST). The time itself is correct so the offset is working. Just the time zone identifier string is wrong.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemueller": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201", "title": "Date formatting is incorrect for en_GB", "body": "It looks like eee886e5 reversed month/date order for en_GB.  We noticed that yMd switched from \"dd/MM/y\" to \"M/d/y\" and it looks like other date formats changed as well.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4357e3f853f6b0e9a7c5d8bf319bf604a8ca2ab4", "message": "Fixed parent locales (#202)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ptarjan": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186", "title": "Do you support locales with countries?", "body": "For example:\n\n```\n[1] pry(main)> 500.localize(:\"fr-FR\").to_currency().to_s(:currency => \"USD\")\n=> \"$500.00\"\n[2] pry(main)> 500.localize(:\"fr-CA\").to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n[3] pry(main)> 500.localize(:fr).to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n```\n\nWhat is going on with `fr-FR`? That doesn't seem to be how french write currency numbers.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KL-7": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124", "title": "Build is failing on jruby-head", "body": "JRuby-head builds were failing for a while now ([first failed build](https://travis-ci.org/twitter/twitter-cldr-rb/builds/30679612)). It might be related to [this JRuby issue](https://github.com/jruby/jruby/issues/985).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110", "title": "Add support for script reordering", "body": "[CLDR 21.0](http://cldr.unicode.org/index/downloads/cldr-21) uses a new concept of [script reordering](http://site.icu-project.org/design/collation/script-reordering) that allows putting native scripts (e.g., Cyrillic for Russian) before Latin characters. \n\nThis feature changes the sorting order of native and Latin characters, causing TwitterCLDR to [fail](https://github.com/twitter/twitter-cldr-rb/commit/0a9399d51616815e300b25fa9765743ab54aa560#diff-6b92832f104a8d5704aafe7ef6fd4456R2) some of the tailoring specs. \n\nIt's probably not a critical issue, because script reordering changes sorting order of scripts relative to each other and not the order of separate characters inside a script, but still it'd be nice to support this tailoring feature in TwitterCLDR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95", "title": "Switch from the XML tailoring rules syntax to the basic one.", "body": "It's not urgent, but most likely something will need to be done since they plan to remove tailoring rules in XML format from the CLDR data. See [this CLDR ticket](http://unicode.org/cldr/trac/ticket/5551) for more information.\n\nAccording to the ticket they plan these changes for CLDR version 24, so when we decide to upgrade to this version, we'll need to update [this part](http://unicode.org/cldr/trac/ticket/5551) of `TailoringImporter` to extract a list of tailored characters for a specific locale not from XML like this:\n\n``` xml\n<rules>\n  <reset>AE</reset>\n  <s>\u00e4</s>\n  <t>\u00c4</t>\n  <reset>OE</reset>\n  <s>\u00f6</s>\n  <t>\u00d6</t>\n  <reset>UE</reset>\n  <s>\u00fc</s>\n  <t>\u00dc</t>\n</rules>\n```\n\nbut from something like this:\n\n``` xml\n<basic_rules>\n  @\u00e6,\u00c6;\u00e4,\u00c4;\u0119,\u0118.\u00f8,\u00d8;\u00f6,\u00d6;\u0151,\u0150;\u0153,\u0152\n</basic_rules>\n```\n\nAs I said, these changes are not required right now, because we use CLDR 21 at the moment and CLDR 24 is nor even released yet (in fact, it's not yet decided what exactly the new syntax for tailoring rules would be), but I'll leave this issue here as a reminder about the upcoming changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52", "title": "Tailoring: denormalized Japanese code points in the default FCE table", "body": "It turned out that some code points occur in the default FCE table in denormalized form. As we always normalize given code points to NFD form, we completely ignore denormalized elements of the FCE table. If processing normalized and denormalized forms results in different collation elements, we get wrong collation order in the end.\n\nThis issue affects only one test for Japanese tailoring, but it's possible that we simply don't have enough tests to reveal a bigger impact of this problem.\n\nMore details in the [gist](https://gist.github.com/f4ee3bd280a2257c5641/5064b6596eda287e302ffa52c61c05764d7322c9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672", "body": "@camertron, afaik `return` statement inside a block in Ruby returns from the enclosing method. \n\nIn this particular case we return from the method (with `nil` as a default return value) as soon as we encounter a situation when current node is a `Hash` but doesn't include desired key or it's not a `Hash` at all. \n\nI never had `LocalJumpErorr` with such use of `return`. Though, it definitely causes such an error if you use it inside a block that is not wrapped by any method. E.g., like that:\n\n```\n1.8.7 :008 > (1..10).each do |i|\n1.8.7 :009 >     return if i > 5\n1.8.7 :010?>   end\nLocalJumpError: unexpected return\n```\n\nDoes that make sense?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085", "body": "For some reason it works flawlessly for me on 1.8, but on 1.9 I get same problems as @imkmf. Specifying encoding for everything source file is not the funniest thing to do, but for the project that heavily uses UTF-8 in its code base I think it should be mandatory.\n\n@imkmf, if you don't want to rebase or add magic comments from scratch again I can send a PR from [this](https://github.com/KL-7/twitter-cldr-rb/tree/fix-source-encoding) branch in my fork.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458", "body": "I see there is already one of twitter projects [on travis](http://travis-ci.org/#!/twitter/scalding). You can make `twitter-cldr-rb` be the second one ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962", "body": "If you decide to merge this you'll have to setup travis-ci hook manually as this repository belongs to an organization and not to your github user. [Here](http://about.travis-ci.org/docs/user/how-to-setup-and-trigger-the-hook-manually/) you can find out how to do that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543", "body": "Looks like none of the files will be required for `= 1.9.0`. Is that intended? Btw, it seems to be a best-practice to avoid `unless` when `if` with the opposite condition would work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556", "body": "Ok, I'll include that into the PR I'm preparing. Just to be sure: `rake/rdoctask` for `1.8` and `rdoc/task` for `1.9`, right?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568", "body": "Hm, but I'm not quite sure whether these requires are necessary at all. As for me `RDoc` is not used in the `Rakefile` anyway and looks like simple requiring doesn't automatically add any rdoc generation tasks. Should we just remove those for now?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705", "body": "Is that necessary? There's a already `rake build` task provided by [Bundler::GemHelper](https://github.com/twitter/twitter-cldr-rb/blob/64ff9e1ecd0ea7cfa68a8448642eb793424bc96e/Rakefile#L10). Just type `rake -T` to see both `build` and `install` tasks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230", "body": "I'm not the biggest fan of explicit `self` unless it's absolutely necessary. It's not python after all :smirk: Same for the methods below.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243", "body": "Why `StringIO.new` instead of an empty string here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846", "body": "As far as I understand unlike `StringBuffer` from C# or Java, that provides optimization for concatenation of a big number of strings, Ruby's `StringIO` is a wrapper around `String` that makes it possible to use it in places, where a real IO object, like a file, is expected. If that's correct using this wrapper doesn't give any benefit in this case and only creates (not sure about that) some unnecessary additional IO object around the string itself. The same applies to [this](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L12).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877", "body": "I agree that sometimes it's not very clear at first glance whether you use a local variable or some accessor (or call a method without arguments), but things are much simpler when you call a method with parameters as in these cases. Plus if you keep your methods small (as it is in this case) it's pretty easy to spot all the locals and parameters instantly so you can clearly distinguish them from some accessors or methods calls.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850", "body": "No worries. It's not a big deal and I'm not entitled to force any kind of style on you, quite the opposite ;) Just felt like sharing what I see as the most popular (not necessarily the right one, though) approach and explaining why it makes sense.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831", "body": "If I understand it correctly this method can be simplified to `TWITTER_LOCALE_MAP.invert.fetch(locale, locale)`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842", "body": "If it happens to often it might be useful to define another constant equal to `TWITTER_LOCALE_MAP.invert` and then use it instead of inverting the hash every time.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891", "body": "Wouldn't `@@output_dir ||= build_dir` work here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922", "body": "Btw, inside class (or module) methods current class is treated as an instance and you can use smth called class-level instance variables here. You just replace `@@output_dir` with `@output_dir` and everything still works. Class variable might cause no troubles in this case, but I'm just trying to avoid them at all in my own code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714", "body": "@camertron, I still don't understand how is this `unless defined?` thing is different from a simpler `@output_dir ||= build_dir`. Can you explain?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448", "body": "This part is a bit confusing, at least it was for me. Somehow I've completely forgotten about classes re-opening and was wondering for a while why this struct is not confused with the class that is defined below. Finally, I realized that what is going below is just adding methods to this struct. What if we do it a bit more explicit? For example, we can move fields array into a separate `ATTRIBUTES_FILEDS` constant and define the struct along with all its methods like this:\n\n``` ruby\nAttributes = Struct.new(*ATTRIBUTES_FIELDS) do\n  def hangul_type\n    Attributes.hangul_type(code_point)\n  end\n\n  # ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463", "body": "Another thing that was bothering me for a while is that `Attributes` (if you take it without context) is too general name. And besides this generally named struct we have a nice `UnicodeData` module filled with some methods, half of which return instances of this struct. What if we combine `Attributes` struct with `UnicodeData` module into a single `TwitterCldr::Shared::UnicodeData` class?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476", "body": "I think returning straight from the method with `return type.to_sym if range.include?(code_point_int)` at this point will be simpler that storing the value into a variable, breaking and returning after the loop. And `return nil` in the first line is a bit too explicit because regular `return unless code_point` will return `nil` anyway. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491", "body": "While removing `KeyPath` class and working with tokenizers I was wondering why we join with `|` here when usually paths are joined with dots. Is it for handling some special cases when we need to distinguish `foo.bar|baz` from `foo|bar.baz`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959", "body": "@camertron, thanks. I should definitely learn to respect backward compatibility. Added a couple of specs to make sure next guy who deletes this method will get punished =) \n\nRegarding delegation I replaced variable length arguments list in `get_resourse` with the same arguments list as in `resource_for`. Though, I'm still not sure which solution is better. Unlike it was before `get_resource` has a meaningful signature now, but it'll be broken if someone changes arguments list of `resource_for`. On the other hand that's why we have specs and thanks to them broken `resource_for` won't be unnoticed in that case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680", "body": "@camertron, I thought it over and decided that delegating method should not care about signature of the method it delegates to as its role is to pass everything along to the actual method. With that in mind delegating method should look like\n\n``` ruby\ndef self.get_resource(*args, &block)\n  resources.resource_for(*args, &block)\nend\n```\n\nFinally, I came across `SingleForwardable` module from the standard library and used it instead of writing delegating method manually. Hope you wouldn't mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868", "body": "Are you familiar with a block form of `Hash` [constructor](http://ruby-doc.org/core-1.9.3/Hash.html#method-c-new)? It's just a way of defining default value for a hash, in that case on both levels. Though, it might be a bit tricky, so I'd understand if you reject that PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892", "body": "I just don't like those local variables that are created only to be passed somewhere else in the next moment. But you're probably right, it might be a bit less readable that way. I'll remove that if you decide to merge the other part of this PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472", "body": "Totally agree on that: it depends on the project. I can easily imagine people that won't be very happy if some untranslated text will get unnoticed into production because of some mistake or typo that was silently skipped by the formatter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563", "body": "I see, but what if we gradually change this convention across the project? I used to use instance variables myself but recently decided to learn what rspec's `let` actually is and eventually started using it in my projects. The reason is that `let` has a number of advantages over instance variables. If you're interested you can find most of them in the answers and comments to [this question](http://stackoverflow.com/questions/5359558/when-to-use-rspec-let) at StackOverflow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573", "body": "Ok, I'll keep that in mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581", "body": "Didn't know either, just googled it and was very pleased when found this solution.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760", "body": "I see most of the formatters use [`Formatters::Base#extract_locale`](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L33-35) and `TwitterCldr.get_locale` (that also takes `FastGettext` locale into consideration) is mostly used in `localize` methods. Is that on purpose? Would it be more consistent to use `extract_locale` here as in other formatters?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849", "body": "When I add interpolation utility function from gettext this line will be replaced with a call to this function.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612", "body": "If I restructure directories a bit as I suggested [here](https://github.com/twitter/twitter-cldr-rb/pull/14#issuecomment-5188319) this file will live under `lib/twitter_cldr`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237", "body": "Wouldn't it be better to do smth like `code_point = '0' * (4 - code_point.size) + code_point if code_point.size < 4` instead of looping and maybe extract that `4` into some constant with a meaningful name? \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "reiz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/31dfda36ad404dceb0858d73f39af04fa02f012d", "message": "Add license info to the gemspec. (#208)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "camertron": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/db7c7b3bf1d169b337cb3dcb6a3650be10c0387a", "message": "Fix list formatter"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d10df4b2581fff14ac22ad2878fcedb20b455eb9", "message": "Fix titlecasing of Japanese text"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0f1f13b203955c8ad012dfdf8471ffd7416470b4", "message": "Address several more Ruby 2.4 deprecation warnings; upgrade to RSpec 3, drop rr"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/85674c19a654b60ab29187f58a122e92e343d644", "message": "Bump version/changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/464a33f718ed43f3199e30442a2a13ac6ad0ab07", "message": "Bump version and changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b58fb89c4a305f269c785c207337ea055435928", "message": "Bumping version and history"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/02b723b20ef0c152edff960daab8a769ef7f59e3", "message": "Bump version and add entry to changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e0b58e2745acbbf60c56fbc198707a67beb968a9", "message": "Adding Tibetan locale (#199)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1d77b997456e8616b697fcce2c998efa8b50b60a", "message": "Adjust loader to not preload non-existent locale resources"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9f16d15ae23e8ec573b45096a2f90d13466ea940", "message": "Skip RBNF rules for unsupported locales"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/13706c4b29f3d30d5148e8838411c3990492837e", "message": "Update transforms"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1b4ea290abe8bbd11cc21a0772086c3da06e4360", "message": "Adding script to add locales; adding alias to Rakefile"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c5741a32932201a524dc6e61b81137fe5563af53", "message": "Fix readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b53e35caf5a75303edec4645103ab68e5313525c", "message": "Not quite ready for bo yet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/34f798cfea25e92d18248f4e9a3b1cbc3f50765d", "message": "Adding a few missing locale components"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/35fffc4cace9b0ed4e8527e2f78528ce753927bc", "message": "Update transform test importer"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d9f24faf4320ce0e2f17c819ca3237d973ac61da", "message": "Isolate different versions of ICU"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c26610edd5ffea44b6fff24c160fe976cf90ee6a", "message": "Use IO#each_line instead of the deprecated IO#lines"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7f836dfe5f055b7f59c26c0ff5aece105d2fd86d", "message": "Disable ULI importer since service is down"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/03f5b6a92fc92f22b4a7c73fdc3e91730bfdc007", "message": "Use methods instead of constants for importer constants"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5ff5562d98a578d777daaa50fcffd70b5fab3f3a", "message": "Refactor update rake task"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/47c8488f147630c20c802068600d830c8df3d903", "message": "Small fixes, includes 1.9 fix"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/718eec263f641f72d1bd694e778d156a8b01aa49", "message": "Fix ruby 1.9"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d010582a436f1af91d71a856ddfb6f27405f1b64", "message": "Small fixes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/738bbdea83cdb183506c88a79e9998f995730e1d", "message": "Refactoring the hyphenation importer"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/168", "title": "[WIP] Update collation", "body": "This PR is meant to address updating our current collation implementation to CLDR v26 and ICU 54.1.1. At the moment, there are several hurdles that need to be overcome:\n1. As @KL-7 mentioned in [this issue](https://github.com/twitter/twitter-cldr-rb/issues/95), as of CLDR v24, the data format for collation rules has changed. Instead of a series of XML tags, the rules are now composed of a sequence of significant characters, one rule per line. I've already addressed this in the PR, i.e. the tailoring importer now parses and correctly interprets these lines.\n2. As of CLDR v22, collation test data is no longer published. Our collation implementation relies on these test data for validation, so we'll have to find some alternative way of doing this. I've tried to address the issue by using ICU to re-sort the test data in v21 before using it to validate our implementation, but I got quite a few test failures. Speaking of which...\n3. It looks like @KL-7 marked a bunch of tailoring tests as \"pending\" in the test files, which is done by prefixing the test case with two forward slashes, eg. \"//\". I couldn't figure out how he determined which tests to mark as pending, as there wasn't any corresponding importer. I've written an importer that grabs the (old) test data from CLDR v21 and re-sorts it using ICU. I would really appreciate some help figuring out which of these new tests to mark as pending. It's surprising to me that _any_ tests fail, since my test importer uses ICU to _re-sort_ all the test cases. Isn't our collator doing the same thing as ICU?\n\nWith this branch checked out, if you run `bundle exec rake clean_vendored update:tailoring_data update:collation_tries update:tailoring_tests` and then run `FULL_SPEC=true bundle exec rspec spec/collation/tailoring_spec.rb` quite a few locales report a bunch of failures. The most alarming of these is Japanese, which has 1007 failures out of 3339 active. I know that we haven't yet addressed things like stroke order in our collation implementation, so maybe that's the reason. Other locales like Spanish have 1 failure out of 402, which I don't understand either.\n\nAnyway, I would really appreciate some help on this.\n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051", "body": "The command to run tests should be `bundle exec rake` not `build exec rake`. Which one are you running? This doesn't happen on my development machine. What version of Ruby are you using and on what OS? If the problem is indeed a bad encoding issue, adding `$KCODE = \"UTF-8\"` to twitter_cldr should do the trick.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073", "body": "Published!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348", "body": "Actually, I think $KCODE is supported in 1.8 and 1.9 - at least, it's working for us using Ruby 1.8.7 on Lion (and CentOS).  The magic encoding comment is great, thanks for bringing it to my attention.  The problem with it is it's not supported in Ruby 1.8 (afaik), and we'd like to make TwitterCLDR backwards compatible with both of those versions of Ruby.  I think the fix for this is to simply add `$KCODE = \"utf-8` at the top of twitter_cldr.rb as I mentioned before.  I'll give it a try on 1.9 and get back to you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573", "body": "Looks like this is a Ruby 1.8 vs 1.9 issue.  I verified that the gem is unusable on 1.9, but works under 1.8.  It's annoying, but  it looks like you really do have to declare the encoding at the top of each file.  My question is this: it looks like you've added Emacs-style magic comments - any reason why you didn't use the regular `# coding: utf-8` instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244", "body": "The example stuff looks ok but I'm not sure I understand the purpose for it - can you elaborate?  The US-ASCII issue looks good too, but I think we're going to need to add the `$KCODE` thing for Ruby 1.8 users and integrate your magic comments for Ruby 1.9 users.  We'll also have to add some logic that only sets `$KCODE` if you're using 1.8, otherwise you get an annoying warning.\n\nWould you mind submitting two separate pull requests for these fixes?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362", "body": "It's acceptable for all tree nodes to be hashes because the CLDR data is all in hashes.\n\nHave you tested that return statement?  I was doing a little playing around to verify your changes, and I don't think you're allowed to `return` inside a block like this.  I get a LocalJumpError.\n\nIt's cool that you want to avoid on error catching to handle the case where the given path doesn't exist, and you're right to question why `NameError` is the only rescued exception.  It would probably be better to make sure the next segment of the path exists before forging ahead, and that `final` isn't `nil`.  That way, we can remove our reliance on error catching.  I think we are going to still want to return nil to the caller if the path can't be found.  I think there are a few tests that rely on that.\n\nWould you mind investigating the `return` issue?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413", "body": "Yes!  Ok, I understand.  I definitely just learned something new about Ruby, thanks for that.  I hadn't realized `return` returns from the enclosing method.  Your solution is better, I'll merge it right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456", "body": "Cool, nice catch.  That's what I get for only testing in my timezone :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600", "body": "The languages that have \"unfinished\" number sections don't specify number formats as the others do.  For example, in resources/hu/numbers.yml, the key `hu.numbers.formats.percent.patterns.default` contains just an empty hash instead of an actual pattern whereas German has `\"#,##0\u00a0%\"`  Tests for this sound awesome, good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172", "body": "I'll talk to our open-source lead about adding ci support.  Great idea!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505", "body": "Ok, twitter-cldr-rb has been hooked up to travis thanks to @KL-7 's suggestions!  I won't merge this pull request because I changed the URL for the travis build status icon, but otherwise all credit goes to @KL-7.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109", "body": "A few questions for ya:\n1.  How much memory does this take up when the whole file has been loaded in?\n2.  Is your goal to use this data for normalization some time in the future (what you have now is not full normalization).\n3.  We should really cache the result of `unicode_data` in memory instead of rebuilding the hash from disk every time someone calls it.  I would suggest using a class variable (something like `@@unicode_data`) and only loading the data from disk if that variable is nil or undefined.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157", "body": "Should we leave this ticket open until you've written the tests, or can we close it?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705", "body": "Ok, just spent a good 15 minutes talking about this with a co-worker, trying to do the most efficient thing.  Here's what we think:\n\n~90ms load time and 25mb of memory isn't great, but what else can you do?  The best way to answer that is to define the most common use case.  Normalization is usually done in concert with sorting (i.e. alphabetization) and usually done on a list of phrases in a single language.  For each batch of phrases therefore, we're likely to only need fast access to a small subset of the Unicode data at a time.\n\nKnowing this, it makes more sense to break up the data into individual files by character set.  When normalizing a set of phrases, we can load into memory the files containing only the ranges we need, and cache them for future lookups.  We figured the extra round-trips to disk would be acceptable, and wouldn't be loading in a huge file all at once.\n\nWhat do you think @timothyandrew?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798", "body": "@timothyandrew that's how I would have done it.  It must be the yml uses more memory for some reason... kinda weird.  In any case, the memory usage is a bit high considering we don't need access to the entire spectrum of codepoints all at once.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311", "body": "Lulz I totally didn't know `rake build` existed.  We used to run `rake gem`, probably before Bundler got all fancy with its rake tasks and I was trying to emulate that functionality.  Looks like I can remove this.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792", "body": "This is probably a holdover from my C# days (StringBuffer) but I was also trying to make it obvious that the string could be quite large.  You're absolutely right however, a literal string here is exactly the same.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804", "body": "`self` makes it obvious that you're calling in the class or instance context, and doesn't cause you confuse the call with a variable name.  That may not be a big issue to the seasoned Rubyist, but I've found it helpful more than once when I re-read my code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237", "body": "Yeah, I guess it's just a matter of style.  I can remove 'em, but I can't promise I won't slip one in every once and a while by accident :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239", "body": "Oh yeah, that's totally true, my reasoning behind using `StringIO` was just to tell the reader that a large string is being concatenated here.  If they come from C#/Java land, that reasoning makes sense, but if they come from Ruby land they'll probably just go \"WTF\".  Changed to a literal string ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441", "body": "Oh man I knew there had to be a better way.  Ruby to the rescue once again ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388", "body": "Yes, I agree about changing `@@output_dir` to a class-level instance variable.\n\nI kept `@@output_dir` and `build_dir` separate because I was trying to follow the `./configure` - `make` - `make install` paradigm that builds the project in a temporary directory and moves it into place during the install step.  Additionally, `build_dir` is used during tests when it doesn't make sense to \"output\" the files anywhere.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295", "body": "Ah sorry, I misunderstood your comment.  You're absolutely right, I'll make the change right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125", "body": "Let's keep `self.resources` and add `self.get_resource` for backwards compatibility :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818", "body": "Where is `locale` defined here?  I don't see any way that the body of this block will ever be executed.  Also, only one instance of `TwitterCldr::Shared::Resources` is ever created... I guess maybe I'm missing the point of this change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828", "body": "These changes feel less readable to me than the previous solution, albeit more compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040", "body": "There's not much reason to use File.join unless you're joining more than one sub-path.  Try this instead:\n\n`data_path = File.join(File.dirname(__FILE__), \"data\")`\n\nAlso, data files are all stored in the `/resources` directory.  Unless they pertain to specific locales, they're put in `/resources/shared`.  It would be great if UnicodeData.txt could live there too and be accessed by the `TwitterCldr::Shared::Resources` class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062", "body": "At Twitter, it's standard to use the `do ... end` syntax instead of curly braces for multi-line blocks.  Also, this is another great place to use File.join:\n\n```\nIO.readlines(File.join(data_path, \"UnicodeData.txt\")).map do |line|\n  ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703", "body": "Just looked this up.  You're passing it a block that handles initialization - that's actually super cool.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710", "body": "Yeah I completely understand what you mean.  Really, it's not that much more unreadable.  I think we can keep your changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281", "body": "Ah, I see what you mean.  No, I don't think an error should be thrown here.  Instead I think we should leave the original text in the string, so instead of `\"5 houses\"` you get `\"%{houses_count:houses}\"` without any replacements.\n\nHowever!  I've been considering for a while whether to include a global option to raise errors instead of just letting things slide.  It really depends on the use case.  At Twitter, we would most likely not want TwitterCLDR to raise errors because we occasionally launch features that aren't 100% translated anyway, but other projects (or other companies) might feel differently.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284", "body": "The convention used throughout the rest of the specs is to assign instance variables for objects used across multiple tests:\n\n``` ruby\n@patterns = { :one => '\u043c\u0435\u0434\u0432\u0435\u0434\u044c', :few => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f', :many => '\u043c\u0435\u0434\u0432\u0435\u0434\u0435\u0439', :other => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f' }\n@plurals = ...\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292", "body": "Although this line will likely change, the convention used at Twitter (and in these specs) is to use a lambda and .should raise_error:\n\n``` ruby\nlambda { subject.format(2, patterns) }.should raise_error(ArgumentError, \"Missing pattern for :few.\")\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296", "body": "LOVE these refactors - much better, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297", "body": "Didn't know you could do this.  Very cool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768", "body": "Hmm... well, I suppose it couldn't hurt.  Thanks for the SO question, that helped explain things.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728", "body": "Better to accept a hash of options here and use `TwitterCldr.get_locale` if no locale is specified.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827", "body": "Ah, right you are.  `extract_locale` is better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830", "body": "Cool, very compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339", "body": "This file should probably not be hanging out right inside `lib` - consider moving it into a child directory.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "eigilsagafos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/54913ee6fa49feabf1bff865b5c1221378785078", "message": "Use Integer instead of Bignum/Fixnum in core_ext for Ruby 2.4.0 (#205)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viroulep": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ae997baa1901d4688ac17e19f11ff2578bf84f5", "message": "Add Slovenian locale (#204)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muirrn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f022e78f4f736ce06e6c97b03a1f0594eb1be976", "message": "Pass along locale when formatting currencies. (#203)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "severin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/209", "title": "Add missing postal code for Liechtenstein", "body": "Postal codes in Liechtenstein go to `9498`, see https://en.wikipedia.org/wiki/Postal_codes_in_Switzerland_and_Liechtenstein#Liechtenstein", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imkmf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382", "body": "Yup. Typo there - I was running `bundle exec rake`. \n\nIn regards to the coding, I'm running Ruby 1.9.3p125 on Lion 10.7.3. Managed through RVM, etc.\n\n`$KCODE`, as far as I can tell, isn't supported in versions < 1.9.0.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615", "body": "I'm going to redo these comments once again -- the `# coding: utf-8` is the correct form, I grabbed the wrong code and wrote a quick script to push it out to all the `.rb` files. I've resolved that, and only added it to the files that need it. The commits, and thus the pull request should be a lot cleaner.\n\nWant me to submit a new one? Also, how did the other areas of the pull request look? Tests and example locale?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880", "body": "Heh, beat me to it. I've been working on some other stuff at the same time as the magic comments :)\n\nAccept this one, not mine!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014", "body": "This is the coolest thing I've learned about today. Hot damn.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662", "body": "I'll be working on it this weekend, so if you could keep it open, that'd be great!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728", "body": "I like @camertron's solution - in terms of uniformity, it fits with having each locale or character set in its own separate file.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545", "body": "Wow, not sure how I didn't catch that. Feel free to submit a pull request here - not feeling very smart. _(walk of shame)_\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559", "body": "Yep. Excited to see it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611", "body": "Yeah, bizarre. I haven't used Rdoc at all so I'm not sure where that came from. If I'm the only one with this problem, then taking it off is fine by me! I'm not the final deciding factor but it was my pull... so sounds good!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846", "body": "Thanks, great to have this out the door finally.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230", "body": "+1, we do this already for scalding\n\nJust go here @camertron - https://github.com/twitter/twitter-cldr-rb/admin/hooks\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "timothyandrew": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431", "body": "I tried serializing this to a YAML file, and reading it from there, but that seems to be slower.\n\n``` bash\n0.089785 seconds. # to parse UnicodeData.txt and retrieve a single code point.\n0.124981 seconds. # to parse UnicodeData.yml (pre-generated) and retrieve a single code point.\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261", "body": "1. Oops, looks like it's about 25 megs on my system. Hadn't noticed that; somehow I was convinced that it was 5MB the last time I tried. Maybe we can just read the file for every request?\n2. Yes, I'm planning to implement the normalization algorithms, starting with NFC. As far as I know, the Decomposition_Mapping field in UnicodeData.txt is required for the algorithm.\n3. If we _are_ holding the entire thing in memory, then yeah, this sounds good. Let me just see how much slower it is to read from the file for every call to unicode_data. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702", "body": "Maybe I'm not using the right method to measure the memory usage, but I'm getting inconsistent results. I just checked, and a script that loads a YAML or JSON version of UnicodeData.txt is using around 70MB (!) more memory than a script that loads twitter_cldr but not the UnicodeData file.\n\nI'm just running the two programs at the same time and comparing their memory usage in OS X's Activity Monitor. Is there a better way to measure memory usage?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335", "body": "Should be `line[0] =~ /(@|#)/`\nSince all lines in [`NormalizationTest.txt`](https://github.com/twitter/twitter-cldr-rb/blob/master/spec/normalizers/NormalizationTest.txt) contain trailing comments, `line =~ /@|#/` evaluates to a non-zero value for a line like:\n\n```\nC8C4 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE; # (\uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; ) HANGUL SYLLABLE JOE, COMBINING TILDE OVERLAY, HANGUL JONGSEONG TIKEUT\n```\n\nand so the tests aren't run on it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952", "body": "I'm not too sure if the `sort_by` is required here.\n@KL-7 @camertron Since Ruby 1.8 doesn't maintain the hash keys in the insertion order, is it better to leave it in?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"ehoogerbeets": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206", "title": "Formatting a full datetime with a time zone always gives \"UTC\" as the timezone name", "body": "This code:\r\n\r\n```ruby\r\nTime.now.to_datetime.localize.with_timezone(\"America/Los_Angeles\").to_full_s\r\n```\r\n\r\ngives:\r\n\r\n```\r\n\"Wednesday, July 26, 2017 at 1:03:23 PM UTC -08:00\"\r\n```\r\n\r\nNote that it says \"UTC\" even though I made it clear that the time zone is America/Los_Angeles (ie. PST). The time itself is correct so the offset is working. Just the time zone identifier string is wrong.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemueller": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201", "title": "Date formatting is incorrect for en_GB", "body": "It looks like eee886e5 reversed month/date order for en_GB.  We noticed that yMd switched from \"dd/MM/y\" to \"M/d/y\" and it looks like other date formats changed as well.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4357e3f853f6b0e9a7c5d8bf319bf604a8ca2ab4", "message": "Fixed parent locales (#202)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ptarjan": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186", "title": "Do you support locales with countries?", "body": "For example:\n\n```\n[1] pry(main)> 500.localize(:\"fr-FR\").to_currency().to_s(:currency => \"USD\")\n=> \"$500.00\"\n[2] pry(main)> 500.localize(:\"fr-CA\").to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n[3] pry(main)> 500.localize(:fr).to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n```\n\nWhat is going on with `fr-FR`? That doesn't seem to be how french write currency numbers.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KL-7": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124", "title": "Build is failing on jruby-head", "body": "JRuby-head builds were failing for a while now ([first failed build](https://travis-ci.org/twitter/twitter-cldr-rb/builds/30679612)). It might be related to [this JRuby issue](https://github.com/jruby/jruby/issues/985).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110", "title": "Add support for script reordering", "body": "[CLDR 21.0](http://cldr.unicode.org/index/downloads/cldr-21) uses a new concept of [script reordering](http://site.icu-project.org/design/collation/script-reordering) that allows putting native scripts (e.g., Cyrillic for Russian) before Latin characters. \n\nThis feature changes the sorting order of native and Latin characters, causing TwitterCLDR to [fail](https://github.com/twitter/twitter-cldr-rb/commit/0a9399d51616815e300b25fa9765743ab54aa560#diff-6b92832f104a8d5704aafe7ef6fd4456R2) some of the tailoring specs. \n\nIt's probably not a critical issue, because script reordering changes sorting order of scripts relative to each other and not the order of separate characters inside a script, but still it'd be nice to support this tailoring feature in TwitterCLDR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95", "title": "Switch from the XML tailoring rules syntax to the basic one.", "body": "It's not urgent, but most likely something will need to be done since they plan to remove tailoring rules in XML format from the CLDR data. See [this CLDR ticket](http://unicode.org/cldr/trac/ticket/5551) for more information.\n\nAccording to the ticket they plan these changes for CLDR version 24, so when we decide to upgrade to this version, we'll need to update [this part](http://unicode.org/cldr/trac/ticket/5551) of `TailoringImporter` to extract a list of tailored characters for a specific locale not from XML like this:\n\n``` xml\n<rules>\n  <reset>AE</reset>\n  <s>\u00e4</s>\n  <t>\u00c4</t>\n  <reset>OE</reset>\n  <s>\u00f6</s>\n  <t>\u00d6</t>\n  <reset>UE</reset>\n  <s>\u00fc</s>\n  <t>\u00dc</t>\n</rules>\n```\n\nbut from something like this:\n\n``` xml\n<basic_rules>\n  @\u00e6,\u00c6;\u00e4,\u00c4;\u0119,\u0118.\u00f8,\u00d8;\u00f6,\u00d6;\u0151,\u0150;\u0153,\u0152\n</basic_rules>\n```\n\nAs I said, these changes are not required right now, because we use CLDR 21 at the moment and CLDR 24 is nor even released yet (in fact, it's not yet decided what exactly the new syntax for tailoring rules would be), but I'll leave this issue here as a reminder about the upcoming changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52", "title": "Tailoring: denormalized Japanese code points in the default FCE table", "body": "It turned out that some code points occur in the default FCE table in denormalized form. As we always normalize given code points to NFD form, we completely ignore denormalized elements of the FCE table. If processing normalized and denormalized forms results in different collation elements, we get wrong collation order in the end.\n\nThis issue affects only one test for Japanese tailoring, but it's possible that we simply don't have enough tests to reveal a bigger impact of this problem.\n\nMore details in the [gist](https://gist.github.com/f4ee3bd280a2257c5641/5064b6596eda287e302ffa52c61c05764d7322c9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672", "body": "@camertron, afaik `return` statement inside a block in Ruby returns from the enclosing method. \n\nIn this particular case we return from the method (with `nil` as a default return value) as soon as we encounter a situation when current node is a `Hash` but doesn't include desired key or it's not a `Hash` at all. \n\nI never had `LocalJumpErorr` with such use of `return`. Though, it definitely causes such an error if you use it inside a block that is not wrapped by any method. E.g., like that:\n\n```\n1.8.7 :008 > (1..10).each do |i|\n1.8.7 :009 >     return if i > 5\n1.8.7 :010?>   end\nLocalJumpError: unexpected return\n```\n\nDoes that make sense?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085", "body": "For some reason it works flawlessly for me on 1.8, but on 1.9 I get same problems as @imkmf. Specifying encoding for everything source file is not the funniest thing to do, but for the project that heavily uses UTF-8 in its code base I think it should be mandatory.\n\n@imkmf, if you don't want to rebase or add magic comments from scratch again I can send a PR from [this](https://github.com/KL-7/twitter-cldr-rb/tree/fix-source-encoding) branch in my fork.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458", "body": "I see there is already one of twitter projects [on travis](http://travis-ci.org/#!/twitter/scalding). You can make `twitter-cldr-rb` be the second one ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962", "body": "If you decide to merge this you'll have to setup travis-ci hook manually as this repository belongs to an organization and not to your github user. [Here](http://about.travis-ci.org/docs/user/how-to-setup-and-trigger-the-hook-manually/) you can find out how to do that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543", "body": "Looks like none of the files will be required for `= 1.9.0`. Is that intended? Btw, it seems to be a best-practice to avoid `unless` when `if` with the opposite condition would work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556", "body": "Ok, I'll include that into the PR I'm preparing. Just to be sure: `rake/rdoctask` for `1.8` and `rdoc/task` for `1.9`, right?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568", "body": "Hm, but I'm not quite sure whether these requires are necessary at all. As for me `RDoc` is not used in the `Rakefile` anyway and looks like simple requiring doesn't automatically add any rdoc generation tasks. Should we just remove those for now?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705", "body": "Is that necessary? There's a already `rake build` task provided by [Bundler::GemHelper](https://github.com/twitter/twitter-cldr-rb/blob/64ff9e1ecd0ea7cfa68a8448642eb793424bc96e/Rakefile#L10). Just type `rake -T` to see both `build` and `install` tasks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230", "body": "I'm not the biggest fan of explicit `self` unless it's absolutely necessary. It's not python after all :smirk: Same for the methods below.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243", "body": "Why `StringIO.new` instead of an empty string here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846", "body": "As far as I understand unlike `StringBuffer` from C# or Java, that provides optimization for concatenation of a big number of strings, Ruby's `StringIO` is a wrapper around `String` that makes it possible to use it in places, where a real IO object, like a file, is expected. If that's correct using this wrapper doesn't give any benefit in this case and only creates (not sure about that) some unnecessary additional IO object around the string itself. The same applies to [this](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L12).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877", "body": "I agree that sometimes it's not very clear at first glance whether you use a local variable or some accessor (or call a method without arguments), but things are much simpler when you call a method with parameters as in these cases. Plus if you keep your methods small (as it is in this case) it's pretty easy to spot all the locals and parameters instantly so you can clearly distinguish them from some accessors or methods calls.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850", "body": "No worries. It's not a big deal and I'm not entitled to force any kind of style on you, quite the opposite ;) Just felt like sharing what I see as the most popular (not necessarily the right one, though) approach and explaining why it makes sense.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831", "body": "If I understand it correctly this method can be simplified to `TWITTER_LOCALE_MAP.invert.fetch(locale, locale)`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842", "body": "If it happens to often it might be useful to define another constant equal to `TWITTER_LOCALE_MAP.invert` and then use it instead of inverting the hash every time.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891", "body": "Wouldn't `@@output_dir ||= build_dir` work here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922", "body": "Btw, inside class (or module) methods current class is treated as an instance and you can use smth called class-level instance variables here. You just replace `@@output_dir` with `@output_dir` and everything still works. Class variable might cause no troubles in this case, but I'm just trying to avoid them at all in my own code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714", "body": "@camertron, I still don't understand how is this `unless defined?` thing is different from a simpler `@output_dir ||= build_dir`. Can you explain?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448", "body": "This part is a bit confusing, at least it was for me. Somehow I've completely forgotten about classes re-opening and was wondering for a while why this struct is not confused with the class that is defined below. Finally, I realized that what is going below is just adding methods to this struct. What if we do it a bit more explicit? For example, we can move fields array into a separate `ATTRIBUTES_FILEDS` constant and define the struct along with all its methods like this:\n\n``` ruby\nAttributes = Struct.new(*ATTRIBUTES_FIELDS) do\n  def hangul_type\n    Attributes.hangul_type(code_point)\n  end\n\n  # ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463", "body": "Another thing that was bothering me for a while is that `Attributes` (if you take it without context) is too general name. And besides this generally named struct we have a nice `UnicodeData` module filled with some methods, half of which return instances of this struct. What if we combine `Attributes` struct with `UnicodeData` module into a single `TwitterCldr::Shared::UnicodeData` class?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476", "body": "I think returning straight from the method with `return type.to_sym if range.include?(code_point_int)` at this point will be simpler that storing the value into a variable, breaking and returning after the loop. And `return nil` in the first line is a bit too explicit because regular `return unless code_point` will return `nil` anyway. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491", "body": "While removing `KeyPath` class and working with tokenizers I was wondering why we join with `|` here when usually paths are joined with dots. Is it for handling some special cases when we need to distinguish `foo.bar|baz` from `foo|bar.baz`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959", "body": "@camertron, thanks. I should definitely learn to respect backward compatibility. Added a couple of specs to make sure next guy who deletes this method will get punished =) \n\nRegarding delegation I replaced variable length arguments list in `get_resourse` with the same arguments list as in `resource_for`. Though, I'm still not sure which solution is better. Unlike it was before `get_resource` has a meaningful signature now, but it'll be broken if someone changes arguments list of `resource_for`. On the other hand that's why we have specs and thanks to them broken `resource_for` won't be unnoticed in that case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680", "body": "@camertron, I thought it over and decided that delegating method should not care about signature of the method it delegates to as its role is to pass everything along to the actual method. With that in mind delegating method should look like\n\n``` ruby\ndef self.get_resource(*args, &block)\n  resources.resource_for(*args, &block)\nend\n```\n\nFinally, I came across `SingleForwardable` module from the standard library and used it instead of writing delegating method manually. Hope you wouldn't mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868", "body": "Are you familiar with a block form of `Hash` [constructor](http://ruby-doc.org/core-1.9.3/Hash.html#method-c-new)? It's just a way of defining default value for a hash, in that case on both levels. Though, it might be a bit tricky, so I'd understand if you reject that PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892", "body": "I just don't like those local variables that are created only to be passed somewhere else in the next moment. But you're probably right, it might be a bit less readable that way. I'll remove that if you decide to merge the other part of this PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472", "body": "Totally agree on that: it depends on the project. I can easily imagine people that won't be very happy if some untranslated text will get unnoticed into production because of some mistake or typo that was silently skipped by the formatter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563", "body": "I see, but what if we gradually change this convention across the project? I used to use instance variables myself but recently decided to learn what rspec's `let` actually is and eventually started using it in my projects. The reason is that `let` has a number of advantages over instance variables. If you're interested you can find most of them in the answers and comments to [this question](http://stackoverflow.com/questions/5359558/when-to-use-rspec-let) at StackOverflow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573", "body": "Ok, I'll keep that in mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581", "body": "Didn't know either, just googled it and was very pleased when found this solution.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760", "body": "I see most of the formatters use [`Formatters::Base#extract_locale`](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L33-35) and `TwitterCldr.get_locale` (that also takes `FastGettext` locale into consideration) is mostly used in `localize` methods. Is that on purpose? Would it be more consistent to use `extract_locale` here as in other formatters?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849", "body": "When I add interpolation utility function from gettext this line will be replaced with a call to this function.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612", "body": "If I restructure directories a bit as I suggested [here](https://github.com/twitter/twitter-cldr-rb/pull/14#issuecomment-5188319) this file will live under `lib/twitter_cldr`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237", "body": "Wouldn't it be better to do smth like `code_point = '0' * (4 - code_point.size) + code_point if code_point.size < 4` instead of looping and maybe extract that `4` into some constant with a meaningful name? \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "reiz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/31dfda36ad404dceb0858d73f39af04fa02f012d", "message": "Add license info to the gemspec. (#208)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "camertron": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/db7c7b3bf1d169b337cb3dcb6a3650be10c0387a", "message": "Fix list formatter"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d10df4b2581fff14ac22ad2878fcedb20b455eb9", "message": "Fix titlecasing of Japanese text"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0f1f13b203955c8ad012dfdf8471ffd7416470b4", "message": "Address several more Ruby 2.4 deprecation warnings; upgrade to RSpec 3, drop rr"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/85674c19a654b60ab29187f58a122e92e343d644", "message": "Bump version/changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/464a33f718ed43f3199e30442a2a13ac6ad0ab07", "message": "Bump version and changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b58fb89c4a305f269c785c207337ea055435928", "message": "Bumping version and history"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/02b723b20ef0c152edff960daab8a769ef7f59e3", "message": "Bump version and add entry to changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e0b58e2745acbbf60c56fbc198707a67beb968a9", "message": "Adding Tibetan locale (#199)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1d77b997456e8616b697fcce2c998efa8b50b60a", "message": "Adjust loader to not preload non-existent locale resources"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9f16d15ae23e8ec573b45096a2f90d13466ea940", "message": "Skip RBNF rules for unsupported locales"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/13706c4b29f3d30d5148e8838411c3990492837e", "message": "Update transforms"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1b4ea290abe8bbd11cc21a0772086c3da06e4360", "message": "Adding script to add locales; adding alias to Rakefile"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c5741a32932201a524dc6e61b81137fe5563af53", "message": "Fix readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b53e35caf5a75303edec4645103ab68e5313525c", "message": "Not quite ready for bo yet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/34f798cfea25e92d18248f4e9a3b1cbc3f50765d", "message": "Adding a few missing locale components"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/35fffc4cace9b0ed4e8527e2f78528ce753927bc", "message": "Update transform test importer"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d9f24faf4320ce0e2f17c819ca3237d973ac61da", "message": "Isolate different versions of ICU"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c26610edd5ffea44b6fff24c160fe976cf90ee6a", "message": "Use IO#each_line instead of the deprecated IO#lines"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7f836dfe5f055b7f59c26c0ff5aece105d2fd86d", "message": "Disable ULI importer since service is down"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/03f5b6a92fc92f22b4a7c73fdc3e91730bfdc007", "message": "Use methods instead of constants for importer constants"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5ff5562d98a578d777daaa50fcffd70b5fab3f3a", "message": "Refactor update rake task"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/47c8488f147630c20c802068600d830c8df3d903", "message": "Small fixes, includes 1.9 fix"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/718eec263f641f72d1bd694e778d156a8b01aa49", "message": "Fix ruby 1.9"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d010582a436f1af91d71a856ddfb6f27405f1b64", "message": "Small fixes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/738bbdea83cdb183506c88a79e9998f995730e1d", "message": "Refactoring the hyphenation importer"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/168", "title": "[WIP] Update collation", "body": "This PR is meant to address updating our current collation implementation to CLDR v26 and ICU 54.1.1. At the moment, there are several hurdles that need to be overcome:\n1. As @KL-7 mentioned in [this issue](https://github.com/twitter/twitter-cldr-rb/issues/95), as of CLDR v24, the data format for collation rules has changed. Instead of a series of XML tags, the rules are now composed of a sequence of significant characters, one rule per line. I've already addressed this in the PR, i.e. the tailoring importer now parses and correctly interprets these lines.\n2. As of CLDR v22, collation test data is no longer published. Our collation implementation relies on these test data for validation, so we'll have to find some alternative way of doing this. I've tried to address the issue by using ICU to re-sort the test data in v21 before using it to validate our implementation, but I got quite a few test failures. Speaking of which...\n3. It looks like @KL-7 marked a bunch of tailoring tests as \"pending\" in the test files, which is done by prefixing the test case with two forward slashes, eg. \"//\". I couldn't figure out how he determined which tests to mark as pending, as there wasn't any corresponding importer. I've written an importer that grabs the (old) test data from CLDR v21 and re-sorts it using ICU. I would really appreciate some help figuring out which of these new tests to mark as pending. It's surprising to me that _any_ tests fail, since my test importer uses ICU to _re-sort_ all the test cases. Isn't our collator doing the same thing as ICU?\n\nWith this branch checked out, if you run `bundle exec rake clean_vendored update:tailoring_data update:collation_tries update:tailoring_tests` and then run `FULL_SPEC=true bundle exec rspec spec/collation/tailoring_spec.rb` quite a few locales report a bunch of failures. The most alarming of these is Japanese, which has 1007 failures out of 3339 active. I know that we haven't yet addressed things like stroke order in our collation implementation, so maybe that's the reason. Other locales like Spanish have 1 failure out of 402, which I don't understand either.\n\nAnyway, I would really appreciate some help on this.\n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051", "body": "The command to run tests should be `bundle exec rake` not `build exec rake`. Which one are you running? This doesn't happen on my development machine. What version of Ruby are you using and on what OS? If the problem is indeed a bad encoding issue, adding `$KCODE = \"UTF-8\"` to twitter_cldr should do the trick.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073", "body": "Published!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348", "body": "Actually, I think $KCODE is supported in 1.8 and 1.9 - at least, it's working for us using Ruby 1.8.7 on Lion (and CentOS).  The magic encoding comment is great, thanks for bringing it to my attention.  The problem with it is it's not supported in Ruby 1.8 (afaik), and we'd like to make TwitterCLDR backwards compatible with both of those versions of Ruby.  I think the fix for this is to simply add `$KCODE = \"utf-8` at the top of twitter_cldr.rb as I mentioned before.  I'll give it a try on 1.9 and get back to you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573", "body": "Looks like this is a Ruby 1.8 vs 1.9 issue.  I verified that the gem is unusable on 1.9, but works under 1.8.  It's annoying, but  it looks like you really do have to declare the encoding at the top of each file.  My question is this: it looks like you've added Emacs-style magic comments - any reason why you didn't use the regular `# coding: utf-8` instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244", "body": "The example stuff looks ok but I'm not sure I understand the purpose for it - can you elaborate?  The US-ASCII issue looks good too, but I think we're going to need to add the `$KCODE` thing for Ruby 1.8 users and integrate your magic comments for Ruby 1.9 users.  We'll also have to add some logic that only sets `$KCODE` if you're using 1.8, otherwise you get an annoying warning.\n\nWould you mind submitting two separate pull requests for these fixes?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362", "body": "It's acceptable for all tree nodes to be hashes because the CLDR data is all in hashes.\n\nHave you tested that return statement?  I was doing a little playing around to verify your changes, and I don't think you're allowed to `return` inside a block like this.  I get a LocalJumpError.\n\nIt's cool that you want to avoid on error catching to handle the case where the given path doesn't exist, and you're right to question why `NameError` is the only rescued exception.  It would probably be better to make sure the next segment of the path exists before forging ahead, and that `final` isn't `nil`.  That way, we can remove our reliance on error catching.  I think we are going to still want to return nil to the caller if the path can't be found.  I think there are a few tests that rely on that.\n\nWould you mind investigating the `return` issue?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413", "body": "Yes!  Ok, I understand.  I definitely just learned something new about Ruby, thanks for that.  I hadn't realized `return` returns from the enclosing method.  Your solution is better, I'll merge it right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456", "body": "Cool, nice catch.  That's what I get for only testing in my timezone :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600", "body": "The languages that have \"unfinished\" number sections don't specify number formats as the others do.  For example, in resources/hu/numbers.yml, the key `hu.numbers.formats.percent.patterns.default` contains just an empty hash instead of an actual pattern whereas German has `\"#,##0\u00a0%\"`  Tests for this sound awesome, good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172", "body": "I'll talk to our open-source lead about adding ci support.  Great idea!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505", "body": "Ok, twitter-cldr-rb has been hooked up to travis thanks to @KL-7 's suggestions!  I won't merge this pull request because I changed the URL for the travis build status icon, but otherwise all credit goes to @KL-7.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109", "body": "A few questions for ya:\n1.  How much memory does this take up when the whole file has been loaded in?\n2.  Is your goal to use this data for normalization some time in the future (what you have now is not full normalization).\n3.  We should really cache the result of `unicode_data` in memory instead of rebuilding the hash from disk every time someone calls it.  I would suggest using a class variable (something like `@@unicode_data`) and only loading the data from disk if that variable is nil or undefined.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157", "body": "Should we leave this ticket open until you've written the tests, or can we close it?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705", "body": "Ok, just spent a good 15 minutes talking about this with a co-worker, trying to do the most efficient thing.  Here's what we think:\n\n~90ms load time and 25mb of memory isn't great, but what else can you do?  The best way to answer that is to define the most common use case.  Normalization is usually done in concert with sorting (i.e. alphabetization) and usually done on a list of phrases in a single language.  For each batch of phrases therefore, we're likely to only need fast access to a small subset of the Unicode data at a time.\n\nKnowing this, it makes more sense to break up the data into individual files by character set.  When normalizing a set of phrases, we can load into memory the files containing only the ranges we need, and cache them for future lookups.  We figured the extra round-trips to disk would be acceptable, and wouldn't be loading in a huge file all at once.\n\nWhat do you think @timothyandrew?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798", "body": "@timothyandrew that's how I would have done it.  It must be the yml uses more memory for some reason... kinda weird.  In any case, the memory usage is a bit high considering we don't need access to the entire spectrum of codepoints all at once.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311", "body": "Lulz I totally didn't know `rake build` existed.  We used to run `rake gem`, probably before Bundler got all fancy with its rake tasks and I was trying to emulate that functionality.  Looks like I can remove this.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792", "body": "This is probably a holdover from my C# days (StringBuffer) but I was also trying to make it obvious that the string could be quite large.  You're absolutely right however, a literal string here is exactly the same.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804", "body": "`self` makes it obvious that you're calling in the class or instance context, and doesn't cause you confuse the call with a variable name.  That may not be a big issue to the seasoned Rubyist, but I've found it helpful more than once when I re-read my code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237", "body": "Yeah, I guess it's just a matter of style.  I can remove 'em, but I can't promise I won't slip one in every once and a while by accident :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239", "body": "Oh yeah, that's totally true, my reasoning behind using `StringIO` was just to tell the reader that a large string is being concatenated here.  If they come from C#/Java land, that reasoning makes sense, but if they come from Ruby land they'll probably just go \"WTF\".  Changed to a literal string ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441", "body": "Oh man I knew there had to be a better way.  Ruby to the rescue once again ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388", "body": "Yes, I agree about changing `@@output_dir` to a class-level instance variable.\n\nI kept `@@output_dir` and `build_dir` separate because I was trying to follow the `./configure` - `make` - `make install` paradigm that builds the project in a temporary directory and moves it into place during the install step.  Additionally, `build_dir` is used during tests when it doesn't make sense to \"output\" the files anywhere.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295", "body": "Ah sorry, I misunderstood your comment.  You're absolutely right, I'll make the change right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125", "body": "Let's keep `self.resources` and add `self.get_resource` for backwards compatibility :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818", "body": "Where is `locale` defined here?  I don't see any way that the body of this block will ever be executed.  Also, only one instance of `TwitterCldr::Shared::Resources` is ever created... I guess maybe I'm missing the point of this change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828", "body": "These changes feel less readable to me than the previous solution, albeit more compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040", "body": "There's not much reason to use File.join unless you're joining more than one sub-path.  Try this instead:\n\n`data_path = File.join(File.dirname(__FILE__), \"data\")`\n\nAlso, data files are all stored in the `/resources` directory.  Unless they pertain to specific locales, they're put in `/resources/shared`.  It would be great if UnicodeData.txt could live there too and be accessed by the `TwitterCldr::Shared::Resources` class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062", "body": "At Twitter, it's standard to use the `do ... end` syntax instead of curly braces for multi-line blocks.  Also, this is another great place to use File.join:\n\n```\nIO.readlines(File.join(data_path, \"UnicodeData.txt\")).map do |line|\n  ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703", "body": "Just looked this up.  You're passing it a block that handles initialization - that's actually super cool.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710", "body": "Yeah I completely understand what you mean.  Really, it's not that much more unreadable.  I think we can keep your changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281", "body": "Ah, I see what you mean.  No, I don't think an error should be thrown here.  Instead I think we should leave the original text in the string, so instead of `\"5 houses\"` you get `\"%{houses_count:houses}\"` without any replacements.\n\nHowever!  I've been considering for a while whether to include a global option to raise errors instead of just letting things slide.  It really depends on the use case.  At Twitter, we would most likely not want TwitterCLDR to raise errors because we occasionally launch features that aren't 100% translated anyway, but other projects (or other companies) might feel differently.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284", "body": "The convention used throughout the rest of the specs is to assign instance variables for objects used across multiple tests:\n\n``` ruby\n@patterns = { :one => '\u043c\u0435\u0434\u0432\u0435\u0434\u044c', :few => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f', :many => '\u043c\u0435\u0434\u0432\u0435\u0434\u0435\u0439', :other => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f' }\n@plurals = ...\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292", "body": "Although this line will likely change, the convention used at Twitter (and in these specs) is to use a lambda and .should raise_error:\n\n``` ruby\nlambda { subject.format(2, patterns) }.should raise_error(ArgumentError, \"Missing pattern for :few.\")\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296", "body": "LOVE these refactors - much better, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297", "body": "Didn't know you could do this.  Very cool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768", "body": "Hmm... well, I suppose it couldn't hurt.  Thanks for the SO question, that helped explain things.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728", "body": "Better to accept a hash of options here and use `TwitterCldr.get_locale` if no locale is specified.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827", "body": "Ah, right you are.  `extract_locale` is better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830", "body": "Cool, very compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339", "body": "This file should probably not be hanging out right inside `lib` - consider moving it into a child directory.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "eigilsagafos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/54913ee6fa49feabf1bff865b5c1221378785078", "message": "Use Integer instead of Bignum/Fixnum in core_ext for Ruby 2.4.0 (#205)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viroulep": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ae997baa1901d4688ac17e19f11ff2578bf84f5", "message": "Add Slovenian locale (#204)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muirrn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f022e78f4f736ce06e6c97b03a1f0594eb1be976", "message": "Pass along locale when formatting currencies. (#203)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "severin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/209", "title": "Add missing postal code for Liechtenstein", "body": "Postal codes in Liechtenstein go to `9498`, see https://en.wikipedia.org/wiki/Postal_codes_in_Switzerland_and_Liechtenstein#Liechtenstein", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imkmf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382", "body": "Yup. Typo there - I was running `bundle exec rake`. \n\nIn regards to the coding, I'm running Ruby 1.9.3p125 on Lion 10.7.3. Managed through RVM, etc.\n\n`$KCODE`, as far as I can tell, isn't supported in versions < 1.9.0.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615", "body": "I'm going to redo these comments once again -- the `# coding: utf-8` is the correct form, I grabbed the wrong code and wrote a quick script to push it out to all the `.rb` files. I've resolved that, and only added it to the files that need it. The commits, and thus the pull request should be a lot cleaner.\n\nWant me to submit a new one? Also, how did the other areas of the pull request look? Tests and example locale?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880", "body": "Heh, beat me to it. I've been working on some other stuff at the same time as the magic comments :)\n\nAccept this one, not mine!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014", "body": "This is the coolest thing I've learned about today. Hot damn.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662", "body": "I'll be working on it this weekend, so if you could keep it open, that'd be great!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728", "body": "I like @camertron's solution - in terms of uniformity, it fits with having each locale or character set in its own separate file.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545", "body": "Wow, not sure how I didn't catch that. Feel free to submit a pull request here - not feeling very smart. _(walk of shame)_\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559", "body": "Yep. Excited to see it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611", "body": "Yeah, bizarre. I haven't used Rdoc at all so I'm not sure where that came from. If I'm the only one with this problem, then taking it off is fine by me! I'm not the final deciding factor but it was my pull... so sounds good!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846", "body": "Thanks, great to have this out the door finally.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230", "body": "+1, we do this already for scalding\n\nJust go here @camertron - https://github.com/twitter/twitter-cldr-rb/admin/hooks\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "timothyandrew": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431", "body": "I tried serializing this to a YAML file, and reading it from there, but that seems to be slower.\n\n``` bash\n0.089785 seconds. # to parse UnicodeData.txt and retrieve a single code point.\n0.124981 seconds. # to parse UnicodeData.yml (pre-generated) and retrieve a single code point.\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261", "body": "1. Oops, looks like it's about 25 megs on my system. Hadn't noticed that; somehow I was convinced that it was 5MB the last time I tried. Maybe we can just read the file for every request?\n2. Yes, I'm planning to implement the normalization algorithms, starting with NFC. As far as I know, the Decomposition_Mapping field in UnicodeData.txt is required for the algorithm.\n3. If we _are_ holding the entire thing in memory, then yeah, this sounds good. Let me just see how much slower it is to read from the file for every call to unicode_data. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702", "body": "Maybe I'm not using the right method to measure the memory usage, but I'm getting inconsistent results. I just checked, and a script that loads a YAML or JSON version of UnicodeData.txt is using around 70MB (!) more memory than a script that loads twitter_cldr but not the UnicodeData file.\n\nI'm just running the two programs at the same time and comparing their memory usage in OS X's Activity Monitor. Is there a better way to measure memory usage?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335", "body": "Should be `line[0] =~ /(@|#)/`\nSince all lines in [`NormalizationTest.txt`](https://github.com/twitter/twitter-cldr-rb/blob/master/spec/normalizers/NormalizationTest.txt) contain trailing comments, `line =~ /@|#/` evaluates to a non-zero value for a line like:\n\n```\nC8C4 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE; # (\uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; ) HANGUL SYLLABLE JOE, COMBINING TILDE OVERLAY, HANGUL JONGSEONG TIKEUT\n```\n\nand so the tests aren't run on it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952", "body": "I'm not too sure if the `sort_by` is required here.\n@KL-7 @camertron Since Ruby 1.8 doesn't maintain the hash keys in the insertion order, is it better to leave it in?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "3": {"ehoogerbeets": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206", "title": "Formatting a full datetime with a time zone always gives \"UTC\" as the timezone name", "body": "This code:\r\n\r\n```ruby\r\nTime.now.to_datetime.localize.with_timezone(\"America/Los_Angeles\").to_full_s\r\n```\r\n\r\ngives:\r\n\r\n```\r\n\"Wednesday, July 26, 2017 at 1:03:23 PM UTC -08:00\"\r\n```\r\n\r\nNote that it says \"UTC\" even though I made it clear that the time zone is America/Los_Angeles (ie. PST). The time itself is correct so the offset is working. Just the time zone identifier string is wrong.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemueller": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201", "title": "Date formatting is incorrect for en_GB", "body": "It looks like eee886e5 reversed month/date order for en_GB.  We noticed that yMd switched from \"dd/MM/y\" to \"M/d/y\" and it looks like other date formats changed as well.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4357e3f853f6b0e9a7c5d8bf319bf604a8ca2ab4", "message": "Fixed parent locales (#202)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ptarjan": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186", "title": "Do you support locales with countries?", "body": "For example:\n\n```\n[1] pry(main)> 500.localize(:\"fr-FR\").to_currency().to_s(:currency => \"USD\")\n=> \"$500.00\"\n[2] pry(main)> 500.localize(:\"fr-CA\").to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n[3] pry(main)> 500.localize(:fr).to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n```\n\nWhat is going on with `fr-FR`? That doesn't seem to be how french write currency numbers.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KL-7": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124", "title": "Build is failing on jruby-head", "body": "JRuby-head builds were failing for a while now ([first failed build](https://travis-ci.org/twitter/twitter-cldr-rb/builds/30679612)). It might be related to [this JRuby issue](https://github.com/jruby/jruby/issues/985).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110", "title": "Add support for script reordering", "body": "[CLDR 21.0](http://cldr.unicode.org/index/downloads/cldr-21) uses a new concept of [script reordering](http://site.icu-project.org/design/collation/script-reordering) that allows putting native scripts (e.g., Cyrillic for Russian) before Latin characters. \n\nThis feature changes the sorting order of native and Latin characters, causing TwitterCLDR to [fail](https://github.com/twitter/twitter-cldr-rb/commit/0a9399d51616815e300b25fa9765743ab54aa560#diff-6b92832f104a8d5704aafe7ef6fd4456R2) some of the tailoring specs. \n\nIt's probably not a critical issue, because script reordering changes sorting order of scripts relative to each other and not the order of separate characters inside a script, but still it'd be nice to support this tailoring feature in TwitterCLDR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95", "title": "Switch from the XML tailoring rules syntax to the basic one.", "body": "It's not urgent, but most likely something will need to be done since they plan to remove tailoring rules in XML format from the CLDR data. See [this CLDR ticket](http://unicode.org/cldr/trac/ticket/5551) for more information.\n\nAccording to the ticket they plan these changes for CLDR version 24, so when we decide to upgrade to this version, we'll need to update [this part](http://unicode.org/cldr/trac/ticket/5551) of `TailoringImporter` to extract a list of tailored characters for a specific locale not from XML like this:\n\n``` xml\n<rules>\n  <reset>AE</reset>\n  <s>\u00e4</s>\n  <t>\u00c4</t>\n  <reset>OE</reset>\n  <s>\u00f6</s>\n  <t>\u00d6</t>\n  <reset>UE</reset>\n  <s>\u00fc</s>\n  <t>\u00dc</t>\n</rules>\n```\n\nbut from something like this:\n\n``` xml\n<basic_rules>\n  @\u00e6,\u00c6;\u00e4,\u00c4;\u0119,\u0118.\u00f8,\u00d8;\u00f6,\u00d6;\u0151,\u0150;\u0153,\u0152\n</basic_rules>\n```\n\nAs I said, these changes are not required right now, because we use CLDR 21 at the moment and CLDR 24 is nor even released yet (in fact, it's not yet decided what exactly the new syntax for tailoring rules would be), but I'll leave this issue here as a reminder about the upcoming changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52", "title": "Tailoring: denormalized Japanese code points in the default FCE table", "body": "It turned out that some code points occur in the default FCE table in denormalized form. As we always normalize given code points to NFD form, we completely ignore denormalized elements of the FCE table. If processing normalized and denormalized forms results in different collation elements, we get wrong collation order in the end.\n\nThis issue affects only one test for Japanese tailoring, but it's possible that we simply don't have enough tests to reveal a bigger impact of this problem.\n\nMore details in the [gist](https://gist.github.com/f4ee3bd280a2257c5641/5064b6596eda287e302ffa52c61c05764d7322c9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672", "body": "@camertron, afaik `return` statement inside a block in Ruby returns from the enclosing method. \n\nIn this particular case we return from the method (with `nil` as a default return value) as soon as we encounter a situation when current node is a `Hash` but doesn't include desired key or it's not a `Hash` at all. \n\nI never had `LocalJumpErorr` with such use of `return`. Though, it definitely causes such an error if you use it inside a block that is not wrapped by any method. E.g., like that:\n\n```\n1.8.7 :008 > (1..10).each do |i|\n1.8.7 :009 >     return if i > 5\n1.8.7 :010?>   end\nLocalJumpError: unexpected return\n```\n\nDoes that make sense?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085", "body": "For some reason it works flawlessly for me on 1.8, but on 1.9 I get same problems as @imkmf. Specifying encoding for everything source file is not the funniest thing to do, but for the project that heavily uses UTF-8 in its code base I think it should be mandatory.\n\n@imkmf, if you don't want to rebase or add magic comments from scratch again I can send a PR from [this](https://github.com/KL-7/twitter-cldr-rb/tree/fix-source-encoding) branch in my fork.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458", "body": "I see there is already one of twitter projects [on travis](http://travis-ci.org/#!/twitter/scalding). You can make `twitter-cldr-rb` be the second one ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962", "body": "If you decide to merge this you'll have to setup travis-ci hook manually as this repository belongs to an organization and not to your github user. [Here](http://about.travis-ci.org/docs/user/how-to-setup-and-trigger-the-hook-manually/) you can find out how to do that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959", "body": "@camertron, thanks. I should definitely learn to respect backward compatibility. Added a couple of specs to make sure next guy who deletes this method will get punished =) \n\nRegarding delegation I replaced variable length arguments list in `get_resourse` with the same arguments list as in `resource_for`. Though, I'm still not sure which solution is better. Unlike it was before `get_resource` has a meaningful signature now, but it'll be broken if someone changes arguments list of `resource_for`. On the other hand that's why we have specs and thanks to them broken `resource_for` won't be unnoticed in that case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680", "body": "@camertron, I thought it over and decided that delegating method should not care about signature of the method it delegates to as its role is to pass everything along to the actual method. With that in mind delegating method should look like\n\n``` ruby\ndef self.get_resource(*args, &block)\n  resources.resource_for(*args, &block)\nend\n```\n\nFinally, I came across `SingleForwardable` module from the standard library and used it instead of writing delegating method manually. Hope you wouldn't mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868", "body": "Are you familiar with a block form of `Hash` [constructor](http://ruby-doc.org/core-1.9.3/Hash.html#method-c-new)? It's just a way of defining default value for a hash, in that case on both levels. Though, it might be a bit tricky, so I'd understand if you reject that PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892", "body": "I just don't like those local variables that are created only to be passed somewhere else in the next moment. But you're probably right, it might be a bit less readable that way. I'll remove that if you decide to merge the other part of this PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472", "body": "Totally agree on that: it depends on the project. I can easily imagine people that won't be very happy if some untranslated text will get unnoticed into production because of some mistake or typo that was silently skipped by the formatter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563", "body": "I see, but what if we gradually change this convention across the project? I used to use instance variables myself but recently decided to learn what rspec's `let` actually is and eventually started using it in my projects. The reason is that `let` has a number of advantages over instance variables. If you're interested you can find most of them in the answers and comments to [this question](http://stackoverflow.com/questions/5359558/when-to-use-rspec-let) at StackOverflow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573", "body": "Ok, I'll keep that in mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581", "body": "Didn't know either, just googled it and was very pleased when found this solution.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760", "body": "I see most of the formatters use [`Formatters::Base#extract_locale`](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L33-35) and `TwitterCldr.get_locale` (that also takes `FastGettext` locale into consideration) is mostly used in `localize` methods. Is that on purpose? Would it be more consistent to use `extract_locale` here as in other formatters?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849", "body": "When I add interpolation utility function from gettext this line will be replaced with a call to this function.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612", "body": "If I restructure directories a bit as I suggested [here](https://github.com/twitter/twitter-cldr-rb/pull/14#issuecomment-5188319) this file will live under `lib/twitter_cldr`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237", "body": "Wouldn't it be better to do smth like `code_point = '0' * (4 - code_point.size) + code_point if code_point.size < 4` instead of looping and maybe extract that `4` into some constant with a meaningful name? \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "reiz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/31dfda36ad404dceb0858d73f39af04fa02f012d", "message": "Add license info to the gemspec. (#208)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "camertron": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/db7c7b3bf1d169b337cb3dcb6a3650be10c0387a", "message": "Fix list formatter"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d10df4b2581fff14ac22ad2878fcedb20b455eb9", "message": "Fix titlecasing of Japanese text"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0f1f13b203955c8ad012dfdf8471ffd7416470b4", "message": "Address several more Ruby 2.4 deprecation warnings; upgrade to RSpec 3, drop rr"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/85674c19a654b60ab29187f58a122e92e343d644", "message": "Bump version/changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/464a33f718ed43f3199e30442a2a13ac6ad0ab07", "message": "Bump version and changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b58fb89c4a305f269c785c207337ea055435928", "message": "Bumping version and history"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/02b723b20ef0c152edff960daab8a769ef7f59e3", "message": "Bump version and add entry to changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e0b58e2745acbbf60c56fbc198707a67beb968a9", "message": "Adding Tibetan locale (#199)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1d77b997456e8616b697fcce2c998efa8b50b60a", "message": "Adjust loader to not preload non-existent locale resources"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9f16d15ae23e8ec573b45096a2f90d13466ea940", "message": "Skip RBNF rules for unsupported locales"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/13706c4b29f3d30d5148e8838411c3990492837e", "message": "Update transforms"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1b4ea290abe8bbd11cc21a0772086c3da06e4360", "message": "Adding script to add locales; adding alias to Rakefile"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c5741a32932201a524dc6e61b81137fe5563af53", "message": "Fix readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b53e35caf5a75303edec4645103ab68e5313525c", "message": "Not quite ready for bo yet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/34f798cfea25e92d18248f4e9a3b1cbc3f50765d", "message": "Adding a few missing locale components"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/35fffc4cace9b0ed4e8527e2f78528ce753927bc", "message": "Update transform test importer"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d9f24faf4320ce0e2f17c819ca3237d973ac61da", "message": "Isolate different versions of ICU"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c26610edd5ffea44b6fff24c160fe976cf90ee6a", "message": "Use IO#each_line instead of the deprecated IO#lines"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7f836dfe5f055b7f59c26c0ff5aece105d2fd86d", "message": "Disable ULI importer since service is down"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/03f5b6a92fc92f22b4a7c73fdc3e91730bfdc007", "message": "Use methods instead of constants for importer constants"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5ff5562d98a578d777daaa50fcffd70b5fab3f3a", "message": "Refactor update rake task"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/47c8488f147630c20c802068600d830c8df3d903", "message": "Small fixes, includes 1.9 fix"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/718eec263f641f72d1bd694e778d156a8b01aa49", "message": "Fix ruby 1.9"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d010582a436f1af91d71a856ddfb6f27405f1b64", "message": "Small fixes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/738bbdea83cdb183506c88a79e9998f995730e1d", "message": "Refactoring the hyphenation importer"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/168", "title": "[WIP] Update collation", "body": "This PR is meant to address updating our current collation implementation to CLDR v26 and ICU 54.1.1. At the moment, there are several hurdles that need to be overcome:\n1. As @KL-7 mentioned in [this issue](https://github.com/twitter/twitter-cldr-rb/issues/95), as of CLDR v24, the data format for collation rules has changed. Instead of a series of XML tags, the rules are now composed of a sequence of significant characters, one rule per line. I've already addressed this in the PR, i.e. the tailoring importer now parses and correctly interprets these lines.\n2. As of CLDR v22, collation test data is no longer published. Our collation implementation relies on these test data for validation, so we'll have to find some alternative way of doing this. I've tried to address the issue by using ICU to re-sort the test data in v21 before using it to validate our implementation, but I got quite a few test failures. Speaking of which...\n3. It looks like @KL-7 marked a bunch of tailoring tests as \"pending\" in the test files, which is done by prefixing the test case with two forward slashes, eg. \"//\". I couldn't figure out how he determined which tests to mark as pending, as there wasn't any corresponding importer. I've written an importer that grabs the (old) test data from CLDR v21 and re-sorts it using ICU. I would really appreciate some help figuring out which of these new tests to mark as pending. It's surprising to me that _any_ tests fail, since my test importer uses ICU to _re-sort_ all the test cases. Isn't our collator doing the same thing as ICU?\n\nWith this branch checked out, if you run `bundle exec rake clean_vendored update:tailoring_data update:collation_tries update:tailoring_tests` and then run `FULL_SPEC=true bundle exec rspec spec/collation/tailoring_spec.rb` quite a few locales report a bunch of failures. The most alarming of these is Japanese, which has 1007 failures out of 3339 active. I know that we haven't yet addressed things like stroke order in our collation implementation, so maybe that's the reason. Other locales like Spanish have 1 failure out of 402, which I don't understand either.\n\nAnyway, I would really appreciate some help on this.\n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051", "body": "The command to run tests should be `bundle exec rake` not `build exec rake`. Which one are you running? This doesn't happen on my development machine. What version of Ruby are you using and on what OS? If the problem is indeed a bad encoding issue, adding `$KCODE = \"UTF-8\"` to twitter_cldr should do the trick.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073", "body": "Published!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348", "body": "Actually, I think $KCODE is supported in 1.8 and 1.9 - at least, it's working for us using Ruby 1.8.7 on Lion (and CentOS).  The magic encoding comment is great, thanks for bringing it to my attention.  The problem with it is it's not supported in Ruby 1.8 (afaik), and we'd like to make TwitterCLDR backwards compatible with both of those versions of Ruby.  I think the fix for this is to simply add `$KCODE = \"utf-8` at the top of twitter_cldr.rb as I mentioned before.  I'll give it a try on 1.9 and get back to you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573", "body": "Looks like this is a Ruby 1.8 vs 1.9 issue.  I verified that the gem is unusable on 1.9, but works under 1.8.  It's annoying, but  it looks like you really do have to declare the encoding at the top of each file.  My question is this: it looks like you've added Emacs-style magic comments - any reason why you didn't use the regular `# coding: utf-8` instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244", "body": "The example stuff looks ok but I'm not sure I understand the purpose for it - can you elaborate?  The US-ASCII issue looks good too, but I think we're going to need to add the `$KCODE` thing for Ruby 1.8 users and integrate your magic comments for Ruby 1.9 users.  We'll also have to add some logic that only sets `$KCODE` if you're using 1.8, otherwise you get an annoying warning.\n\nWould you mind submitting two separate pull requests for these fixes?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362", "body": "It's acceptable for all tree nodes to be hashes because the CLDR data is all in hashes.\n\nHave you tested that return statement?  I was doing a little playing around to verify your changes, and I don't think you're allowed to `return` inside a block like this.  I get a LocalJumpError.\n\nIt's cool that you want to avoid on error catching to handle the case where the given path doesn't exist, and you're right to question why `NameError` is the only rescued exception.  It would probably be better to make sure the next segment of the path exists before forging ahead, and that `final` isn't `nil`.  That way, we can remove our reliance on error catching.  I think we are going to still want to return nil to the caller if the path can't be found.  I think there are a few tests that rely on that.\n\nWould you mind investigating the `return` issue?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413", "body": "Yes!  Ok, I understand.  I definitely just learned something new about Ruby, thanks for that.  I hadn't realized `return` returns from the enclosing method.  Your solution is better, I'll merge it right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456", "body": "Cool, nice catch.  That's what I get for only testing in my timezone :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600", "body": "The languages that have \"unfinished\" number sections don't specify number formats as the others do.  For example, in resources/hu/numbers.yml, the key `hu.numbers.formats.percent.patterns.default` contains just an empty hash instead of an actual pattern whereas German has `\"#,##0\u00a0%\"`  Tests for this sound awesome, good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172", "body": "I'll talk to our open-source lead about adding ci support.  Great idea!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505", "body": "Ok, twitter-cldr-rb has been hooked up to travis thanks to @KL-7 's suggestions!  I won't merge this pull request because I changed the URL for the travis build status icon, but otherwise all credit goes to @KL-7.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109", "body": "A few questions for ya:\n1.  How much memory does this take up when the whole file has been loaded in?\n2.  Is your goal to use this data for normalization some time in the future (what you have now is not full normalization).\n3.  We should really cache the result of `unicode_data` in memory instead of rebuilding the hash from disk every time someone calls it.  I would suggest using a class variable (something like `@@unicode_data`) and only loading the data from disk if that variable is nil or undefined.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157", "body": "Should we leave this ticket open until you've written the tests, or can we close it?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705", "body": "Ok, just spent a good 15 minutes talking about this with a co-worker, trying to do the most efficient thing.  Here's what we think:\n\n~90ms load time and 25mb of memory isn't great, but what else can you do?  The best way to answer that is to define the most common use case.  Normalization is usually done in concert with sorting (i.e. alphabetization) and usually done on a list of phrases in a single language.  For each batch of phrases therefore, we're likely to only need fast access to a small subset of the Unicode data at a time.\n\nKnowing this, it makes more sense to break up the data into individual files by character set.  When normalizing a set of phrases, we can load into memory the files containing only the ranges we need, and cache them for future lookups.  We figured the extra round-trips to disk would be acceptable, and wouldn't be loading in a huge file all at once.\n\nWhat do you think @timothyandrew?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798", "body": "@timothyandrew that's how I would have done it.  It must be the yml uses more memory for some reason... kinda weird.  In any case, the memory usage is a bit high considering we don't need access to the entire spectrum of codepoints all at once.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125", "body": "Let's keep `self.resources` and add `self.get_resource` for backwards compatibility :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818", "body": "Where is `locale` defined here?  I don't see any way that the body of this block will ever be executed.  Also, only one instance of `TwitterCldr::Shared::Resources` is ever created... I guess maybe I'm missing the point of this change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828", "body": "These changes feel less readable to me than the previous solution, albeit more compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040", "body": "There's not much reason to use File.join unless you're joining more than one sub-path.  Try this instead:\n\n`data_path = File.join(File.dirname(__FILE__), \"data\")`\n\nAlso, data files are all stored in the `/resources` directory.  Unless they pertain to specific locales, they're put in `/resources/shared`.  It would be great if UnicodeData.txt could live there too and be accessed by the `TwitterCldr::Shared::Resources` class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062", "body": "At Twitter, it's standard to use the `do ... end` syntax instead of curly braces for multi-line blocks.  Also, this is another great place to use File.join:\n\n```\nIO.readlines(File.join(data_path, \"UnicodeData.txt\")).map do |line|\n  ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703", "body": "Just looked this up.  You're passing it a block that handles initialization - that's actually super cool.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710", "body": "Yeah I completely understand what you mean.  Really, it's not that much more unreadable.  I think we can keep your changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281", "body": "Ah, I see what you mean.  No, I don't think an error should be thrown here.  Instead I think we should leave the original text in the string, so instead of `\"5 houses\"` you get `\"%{houses_count:houses}\"` without any replacements.\n\nHowever!  I've been considering for a while whether to include a global option to raise errors instead of just letting things slide.  It really depends on the use case.  At Twitter, we would most likely not want TwitterCLDR to raise errors because we occasionally launch features that aren't 100% translated anyway, but other projects (or other companies) might feel differently.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284", "body": "The convention used throughout the rest of the specs is to assign instance variables for objects used across multiple tests:\n\n``` ruby\n@patterns = { :one => '\u043c\u0435\u0434\u0432\u0435\u0434\u044c', :few => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f', :many => '\u043c\u0435\u0434\u0432\u0435\u0434\u0435\u0439', :other => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f' }\n@plurals = ...\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292", "body": "Although this line will likely change, the convention used at Twitter (and in these specs) is to use a lambda and .should raise_error:\n\n``` ruby\nlambda { subject.format(2, patterns) }.should raise_error(ArgumentError, \"Missing pattern for :few.\")\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296", "body": "LOVE these refactors - much better, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297", "body": "Didn't know you could do this.  Very cool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768", "body": "Hmm... well, I suppose it couldn't hurt.  Thanks for the SO question, that helped explain things.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728", "body": "Better to accept a hash of options here and use `TwitterCldr.get_locale` if no locale is specified.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827", "body": "Ah, right you are.  `extract_locale` is better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830", "body": "Cool, very compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339", "body": "This file should probably not be hanging out right inside `lib` - consider moving it into a child directory.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "eigilsagafos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/54913ee6fa49feabf1bff865b5c1221378785078", "message": "Use Integer instead of Bignum/Fixnum in core_ext for Ruby 2.4.0 (#205)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viroulep": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ae997baa1901d4688ac17e19f11ff2578bf84f5", "message": "Add Slovenian locale (#204)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muirrn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f022e78f4f736ce06e6c97b03a1f0594eb1be976", "message": "Pass along locale when formatting currencies. (#203)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "severin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/209", "title": "Add missing postal code for Liechtenstein", "body": "Postal codes in Liechtenstein go to `9498`, see https://en.wikipedia.org/wiki/Postal_codes_in_Switzerland_and_Liechtenstein#Liechtenstein", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imkmf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382", "body": "Yup. Typo there - I was running `bundle exec rake`. \n\nIn regards to the coding, I'm running Ruby 1.9.3p125 on Lion 10.7.3. Managed through RVM, etc.\n\n`$KCODE`, as far as I can tell, isn't supported in versions < 1.9.0.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615", "body": "I'm going to redo these comments once again -- the `# coding: utf-8` is the correct form, I grabbed the wrong code and wrote a quick script to push it out to all the `.rb` files. I've resolved that, and only added it to the files that need it. The commits, and thus the pull request should be a lot cleaner.\n\nWant me to submit a new one? Also, how did the other areas of the pull request look? Tests and example locale?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880", "body": "Heh, beat me to it. I've been working on some other stuff at the same time as the magic comments :)\n\nAccept this one, not mine!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014", "body": "This is the coolest thing I've learned about today. Hot damn.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662", "body": "I'll be working on it this weekend, so if you could keep it open, that'd be great!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728", "body": "I like @camertron's solution - in terms of uniformity, it fits with having each locale or character set in its own separate file.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846", "body": "Thanks, great to have this out the door finally.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230", "body": "+1, we do this already for scalding\n\nJust go here @camertron - https://github.com/twitter/twitter-cldr-rb/admin/hooks\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "timothyandrew": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431", "body": "I tried serializing this to a YAML file, and reading it from there, but that seems to be slower.\n\n``` bash\n0.089785 seconds. # to parse UnicodeData.txt and retrieve a single code point.\n0.124981 seconds. # to parse UnicodeData.yml (pre-generated) and retrieve a single code point.\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261", "body": "1. Oops, looks like it's about 25 megs on my system. Hadn't noticed that; somehow I was convinced that it was 5MB the last time I tried. Maybe we can just read the file for every request?\n2. Yes, I'm planning to implement the normalization algorithms, starting with NFC. As far as I know, the Decomposition_Mapping field in UnicodeData.txt is required for the algorithm.\n3. If we _are_ holding the entire thing in memory, then yeah, this sounds good. Let me just see how much slower it is to read from the file for every call to unicode_data. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702", "body": "Maybe I'm not using the right method to measure the memory usage, but I'm getting inconsistent results. I just checked, and a script that loads a YAML or JSON version of UnicodeData.txt is using around 70MB (!) more memory than a script that loads twitter_cldr but not the UnicodeData file.\n\nI'm just running the two programs at the same time and comparing their memory usage in OS X's Activity Monitor. Is there a better way to measure memory usage?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952", "body": "I'm not too sure if the `sort_by` is required here.\n@KL-7 @camertron Since Ruby 1.8 doesn't maintain the hash keys in the insertion order, is it better to leave it in?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "4": {"ehoogerbeets": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206", "title": "Formatting a full datetime with a time zone always gives \"UTC\" as the timezone name", "body": "This code:\r\n\r\n```ruby\r\nTime.now.to_datetime.localize.with_timezone(\"America/Los_Angeles\").to_full_s\r\n```\r\n\r\ngives:\r\n\r\n```\r\n\"Wednesday, July 26, 2017 at 1:03:23 PM UTC -08:00\"\r\n```\r\n\r\nNote that it says \"UTC\" even though I made it clear that the time zone is America/Los_Angeles (ie. PST). The time itself is correct so the offset is working. Just the time zone identifier string is wrong.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemueller": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201", "title": "Date formatting is incorrect for en_GB", "body": "It looks like eee886e5 reversed month/date order for en_GB.  We noticed that yMd switched from \"dd/MM/y\" to \"M/d/y\" and it looks like other date formats changed as well.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4357e3f853f6b0e9a7c5d8bf319bf604a8ca2ab4", "message": "Fixed parent locales (#202)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ptarjan": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186", "title": "Do you support locales with countries?", "body": "For example:\n\n```\n[1] pry(main)> 500.localize(:\"fr-FR\").to_currency().to_s(:currency => \"USD\")\n=> \"$500.00\"\n[2] pry(main)> 500.localize(:\"fr-CA\").to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n[3] pry(main)> 500.localize(:fr).to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n```\n\nWhat is going on with `fr-FR`? That doesn't seem to be how french write currency numbers.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KL-7": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124", "title": "Build is failing on jruby-head", "body": "JRuby-head builds were failing for a while now ([first failed build](https://travis-ci.org/twitter/twitter-cldr-rb/builds/30679612)). It might be related to [this JRuby issue](https://github.com/jruby/jruby/issues/985).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110", "title": "Add support for script reordering", "body": "[CLDR 21.0](http://cldr.unicode.org/index/downloads/cldr-21) uses a new concept of [script reordering](http://site.icu-project.org/design/collation/script-reordering) that allows putting native scripts (e.g., Cyrillic for Russian) before Latin characters. \n\nThis feature changes the sorting order of native and Latin characters, causing TwitterCLDR to [fail](https://github.com/twitter/twitter-cldr-rb/commit/0a9399d51616815e300b25fa9765743ab54aa560#diff-6b92832f104a8d5704aafe7ef6fd4456R2) some of the tailoring specs. \n\nIt's probably not a critical issue, because script reordering changes sorting order of scripts relative to each other and not the order of separate characters inside a script, but still it'd be nice to support this tailoring feature in TwitterCLDR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95", "title": "Switch from the XML tailoring rules syntax to the basic one.", "body": "It's not urgent, but most likely something will need to be done since they plan to remove tailoring rules in XML format from the CLDR data. See [this CLDR ticket](http://unicode.org/cldr/trac/ticket/5551) for more information.\n\nAccording to the ticket they plan these changes for CLDR version 24, so when we decide to upgrade to this version, we'll need to update [this part](http://unicode.org/cldr/trac/ticket/5551) of `TailoringImporter` to extract a list of tailored characters for a specific locale not from XML like this:\n\n``` xml\n<rules>\n  <reset>AE</reset>\n  <s>\u00e4</s>\n  <t>\u00c4</t>\n  <reset>OE</reset>\n  <s>\u00f6</s>\n  <t>\u00d6</t>\n  <reset>UE</reset>\n  <s>\u00fc</s>\n  <t>\u00dc</t>\n</rules>\n```\n\nbut from something like this:\n\n``` xml\n<basic_rules>\n  @\u00e6,\u00c6;\u00e4,\u00c4;\u0119,\u0118.\u00f8,\u00d8;\u00f6,\u00d6;\u0151,\u0150;\u0153,\u0152\n</basic_rules>\n```\n\nAs I said, these changes are not required right now, because we use CLDR 21 at the moment and CLDR 24 is nor even released yet (in fact, it's not yet decided what exactly the new syntax for tailoring rules would be), but I'll leave this issue here as a reminder about the upcoming changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52", "title": "Tailoring: denormalized Japanese code points in the default FCE table", "body": "It turned out that some code points occur in the default FCE table in denormalized form. As we always normalize given code points to NFD form, we completely ignore denormalized elements of the FCE table. If processing normalized and denormalized forms results in different collation elements, we get wrong collation order in the end.\n\nThis issue affects only one test for Japanese tailoring, but it's possible that we simply don't have enough tests to reveal a bigger impact of this problem.\n\nMore details in the [gist](https://gist.github.com/f4ee3bd280a2257c5641/5064b6596eda287e302ffa52c61c05764d7322c9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672", "body": "@camertron, afaik `return` statement inside a block in Ruby returns from the enclosing method. \n\nIn this particular case we return from the method (with `nil` as a default return value) as soon as we encounter a situation when current node is a `Hash` but doesn't include desired key or it's not a `Hash` at all. \n\nI never had `LocalJumpErorr` with such use of `return`. Though, it definitely causes such an error if you use it inside a block that is not wrapped by any method. E.g., like that:\n\n```\n1.8.7 :008 > (1..10).each do |i|\n1.8.7 :009 >     return if i > 5\n1.8.7 :010?>   end\nLocalJumpError: unexpected return\n```\n\nDoes that make sense?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085", "body": "For some reason it works flawlessly for me on 1.8, but on 1.9 I get same problems as @imkmf. Specifying encoding for everything source file is not the funniest thing to do, but for the project that heavily uses UTF-8 in its code base I think it should be mandatory.\n\n@imkmf, if you don't want to rebase or add magic comments from scratch again I can send a PR from [this](https://github.com/KL-7/twitter-cldr-rb/tree/fix-source-encoding) branch in my fork.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458", "body": "I see there is already one of twitter projects [on travis](http://travis-ci.org/#!/twitter/scalding). You can make `twitter-cldr-rb` be the second one ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962", "body": "If you decide to merge this you'll have to setup travis-ci hook manually as this repository belongs to an organization and not to your github user. [Here](http://about.travis-ci.org/docs/user/how-to-setup-and-trigger-the-hook-manually/) you can find out how to do that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543", "body": "Looks like none of the files will be required for `= 1.9.0`. Is that intended? Btw, it seems to be a best-practice to avoid `unless` when `if` with the opposite condition would work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556", "body": "Ok, I'll include that into the PR I'm preparing. Just to be sure: `rake/rdoctask` for `1.8` and `rdoc/task` for `1.9`, right?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568", "body": "Hm, but I'm not quite sure whether these requires are necessary at all. As for me `RDoc` is not used in the `Rakefile` anyway and looks like simple requiring doesn't automatically add any rdoc generation tasks. Should we just remove those for now?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705", "body": "Is that necessary? There's a already `rake build` task provided by [Bundler::GemHelper](https://github.com/twitter/twitter-cldr-rb/blob/64ff9e1ecd0ea7cfa68a8448642eb793424bc96e/Rakefile#L10). Just type `rake -T` to see both `build` and `install` tasks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230", "body": "I'm not the biggest fan of explicit `self` unless it's absolutely necessary. It's not python after all :smirk: Same for the methods below.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243", "body": "Why `StringIO.new` instead of an empty string here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846", "body": "As far as I understand unlike `StringBuffer` from C# or Java, that provides optimization for concatenation of a big number of strings, Ruby's `StringIO` is a wrapper around `String` that makes it possible to use it in places, where a real IO object, like a file, is expected. If that's correct using this wrapper doesn't give any benefit in this case and only creates (not sure about that) some unnecessary additional IO object around the string itself. The same applies to [this](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L12).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877", "body": "I agree that sometimes it's not very clear at first glance whether you use a local variable or some accessor (or call a method without arguments), but things are much simpler when you call a method with parameters as in these cases. Plus if you keep your methods small (as it is in this case) it's pretty easy to spot all the locals and parameters instantly so you can clearly distinguish them from some accessors or methods calls.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850", "body": "No worries. It's not a big deal and I'm not entitled to force any kind of style on you, quite the opposite ;) Just felt like sharing what I see as the most popular (not necessarily the right one, though) approach and explaining why it makes sense.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831", "body": "If I understand it correctly this method can be simplified to `TWITTER_LOCALE_MAP.invert.fetch(locale, locale)`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842", "body": "If it happens to often it might be useful to define another constant equal to `TWITTER_LOCALE_MAP.invert` and then use it instead of inverting the hash every time.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891", "body": "Wouldn't `@@output_dir ||= build_dir` work here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922", "body": "Btw, inside class (or module) methods current class is treated as an instance and you can use smth called class-level instance variables here. You just replace `@@output_dir` with `@output_dir` and everything still works. Class variable might cause no troubles in this case, but I'm just trying to avoid them at all in my own code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714", "body": "@camertron, I still don't understand how is this `unless defined?` thing is different from a simpler `@output_dir ||= build_dir`. Can you explain?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448", "body": "This part is a bit confusing, at least it was for me. Somehow I've completely forgotten about classes re-opening and was wondering for a while why this struct is not confused with the class that is defined below. Finally, I realized that what is going below is just adding methods to this struct. What if we do it a bit more explicit? For example, we can move fields array into a separate `ATTRIBUTES_FILEDS` constant and define the struct along with all its methods like this:\n\n``` ruby\nAttributes = Struct.new(*ATTRIBUTES_FIELDS) do\n  def hangul_type\n    Attributes.hangul_type(code_point)\n  end\n\n  # ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463", "body": "Another thing that was bothering me for a while is that `Attributes` (if you take it without context) is too general name. And besides this generally named struct we have a nice `UnicodeData` module filled with some methods, half of which return instances of this struct. What if we combine `Attributes` struct with `UnicodeData` module into a single `TwitterCldr::Shared::UnicodeData` class?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476", "body": "I think returning straight from the method with `return type.to_sym if range.include?(code_point_int)` at this point will be simpler that storing the value into a variable, breaking and returning after the loop. And `return nil` in the first line is a bit too explicit because regular `return unless code_point` will return `nil` anyway. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491", "body": "While removing `KeyPath` class and working with tokenizers I was wondering why we join with `|` here when usually paths are joined with dots. Is it for handling some special cases when we need to distinguish `foo.bar|baz` from `foo|bar.baz`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959", "body": "@camertron, thanks. I should definitely learn to respect backward compatibility. Added a couple of specs to make sure next guy who deletes this method will get punished =) \n\nRegarding delegation I replaced variable length arguments list in `get_resourse` with the same arguments list as in `resource_for`. Though, I'm still not sure which solution is better. Unlike it was before `get_resource` has a meaningful signature now, but it'll be broken if someone changes arguments list of `resource_for`. On the other hand that's why we have specs and thanks to them broken `resource_for` won't be unnoticed in that case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680", "body": "@camertron, I thought it over and decided that delegating method should not care about signature of the method it delegates to as its role is to pass everything along to the actual method. With that in mind delegating method should look like\n\n``` ruby\ndef self.get_resource(*args, &block)\n  resources.resource_for(*args, &block)\nend\n```\n\nFinally, I came across `SingleForwardable` module from the standard library and used it instead of writing delegating method manually. Hope you wouldn't mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868", "body": "Are you familiar with a block form of `Hash` [constructor](http://ruby-doc.org/core-1.9.3/Hash.html#method-c-new)? It's just a way of defining default value for a hash, in that case on both levels. Though, it might be a bit tricky, so I'd understand if you reject that PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892", "body": "I just don't like those local variables that are created only to be passed somewhere else in the next moment. But you're probably right, it might be a bit less readable that way. I'll remove that if you decide to merge the other part of this PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472", "body": "Totally agree on that: it depends on the project. I can easily imagine people that won't be very happy if some untranslated text will get unnoticed into production because of some mistake or typo that was silently skipped by the formatter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563", "body": "I see, but what if we gradually change this convention across the project? I used to use instance variables myself but recently decided to learn what rspec's `let` actually is and eventually started using it in my projects. The reason is that `let` has a number of advantages over instance variables. If you're interested you can find most of them in the answers and comments to [this question](http://stackoverflow.com/questions/5359558/when-to-use-rspec-let) at StackOverflow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573", "body": "Ok, I'll keep that in mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581", "body": "Didn't know either, just googled it and was very pleased when found this solution.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760", "body": "I see most of the formatters use [`Formatters::Base#extract_locale`](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L33-35) and `TwitterCldr.get_locale` (that also takes `FastGettext` locale into consideration) is mostly used in `localize` methods. Is that on purpose? Would it be more consistent to use `extract_locale` here as in other formatters?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849", "body": "When I add interpolation utility function from gettext this line will be replaced with a call to this function.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612", "body": "If I restructure directories a bit as I suggested [here](https://github.com/twitter/twitter-cldr-rb/pull/14#issuecomment-5188319) this file will live under `lib/twitter_cldr`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237", "body": "Wouldn't it be better to do smth like `code_point = '0' * (4 - code_point.size) + code_point if code_point.size < 4` instead of looping and maybe extract that `4` into some constant with a meaningful name? \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "reiz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/31dfda36ad404dceb0858d73f39af04fa02f012d", "message": "Add license info to the gemspec. (#208)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "camertron": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/db7c7b3bf1d169b337cb3dcb6a3650be10c0387a", "message": "Fix list formatter"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d10df4b2581fff14ac22ad2878fcedb20b455eb9", "message": "Fix titlecasing of Japanese text"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0f1f13b203955c8ad012dfdf8471ffd7416470b4", "message": "Address several more Ruby 2.4 deprecation warnings; upgrade to RSpec 3, drop rr"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/85674c19a654b60ab29187f58a122e92e343d644", "message": "Bump version/changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/464a33f718ed43f3199e30442a2a13ac6ad0ab07", "message": "Bump version and changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b58fb89c4a305f269c785c207337ea055435928", "message": "Bumping version and history"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/02b723b20ef0c152edff960daab8a769ef7f59e3", "message": "Bump version and add entry to changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e0b58e2745acbbf60c56fbc198707a67beb968a9", "message": "Adding Tibetan locale (#199)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1d77b997456e8616b697fcce2c998efa8b50b60a", "message": "Adjust loader to not preload non-existent locale resources"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9f16d15ae23e8ec573b45096a2f90d13466ea940", "message": "Skip RBNF rules for unsupported locales"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/13706c4b29f3d30d5148e8838411c3990492837e", "message": "Update transforms"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1b4ea290abe8bbd11cc21a0772086c3da06e4360", "message": "Adding script to add locales; adding alias to Rakefile"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c5741a32932201a524dc6e61b81137fe5563af53", "message": "Fix readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b53e35caf5a75303edec4645103ab68e5313525c", "message": "Not quite ready for bo yet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/34f798cfea25e92d18248f4e9a3b1cbc3f50765d", "message": "Adding a few missing locale components"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/35fffc4cace9b0ed4e8527e2f78528ce753927bc", "message": "Update transform test importer"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d9f24faf4320ce0e2f17c819ca3237d973ac61da", "message": "Isolate different versions of ICU"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c26610edd5ffea44b6fff24c160fe976cf90ee6a", "message": "Use IO#each_line instead of the deprecated IO#lines"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7f836dfe5f055b7f59c26c0ff5aece105d2fd86d", "message": "Disable ULI importer since service is down"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/03f5b6a92fc92f22b4a7c73fdc3e91730bfdc007", "message": "Use methods instead of constants for importer constants"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5ff5562d98a578d777daaa50fcffd70b5fab3f3a", "message": "Refactor update rake task"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/47c8488f147630c20c802068600d830c8df3d903", "message": "Small fixes, includes 1.9 fix"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/718eec263f641f72d1bd694e778d156a8b01aa49", "message": "Fix ruby 1.9"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d010582a436f1af91d71a856ddfb6f27405f1b64", "message": "Small fixes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/738bbdea83cdb183506c88a79e9998f995730e1d", "message": "Refactoring the hyphenation importer"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/168", "title": "[WIP] Update collation", "body": "This PR is meant to address updating our current collation implementation to CLDR v26 and ICU 54.1.1. At the moment, there are several hurdles that need to be overcome:\n1. As @KL-7 mentioned in [this issue](https://github.com/twitter/twitter-cldr-rb/issues/95), as of CLDR v24, the data format for collation rules has changed. Instead of a series of XML tags, the rules are now composed of a sequence of significant characters, one rule per line. I've already addressed this in the PR, i.e. the tailoring importer now parses and correctly interprets these lines.\n2. As of CLDR v22, collation test data is no longer published. Our collation implementation relies on these test data for validation, so we'll have to find some alternative way of doing this. I've tried to address the issue by using ICU to re-sort the test data in v21 before using it to validate our implementation, but I got quite a few test failures. Speaking of which...\n3. It looks like @KL-7 marked a bunch of tailoring tests as \"pending\" in the test files, which is done by prefixing the test case with two forward slashes, eg. \"//\". I couldn't figure out how he determined which tests to mark as pending, as there wasn't any corresponding importer. I've written an importer that grabs the (old) test data from CLDR v21 and re-sorts it using ICU. I would really appreciate some help figuring out which of these new tests to mark as pending. It's surprising to me that _any_ tests fail, since my test importer uses ICU to _re-sort_ all the test cases. Isn't our collator doing the same thing as ICU?\n\nWith this branch checked out, if you run `bundle exec rake clean_vendored update:tailoring_data update:collation_tries update:tailoring_tests` and then run `FULL_SPEC=true bundle exec rspec spec/collation/tailoring_spec.rb` quite a few locales report a bunch of failures. The most alarming of these is Japanese, which has 1007 failures out of 3339 active. I know that we haven't yet addressed things like stroke order in our collation implementation, so maybe that's the reason. Other locales like Spanish have 1 failure out of 402, which I don't understand either.\n\nAnyway, I would really appreciate some help on this.\n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051", "body": "The command to run tests should be `bundle exec rake` not `build exec rake`. Which one are you running? This doesn't happen on my development machine. What version of Ruby are you using and on what OS? If the problem is indeed a bad encoding issue, adding `$KCODE = \"UTF-8\"` to twitter_cldr should do the trick.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073", "body": "Published!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348", "body": "Actually, I think $KCODE is supported in 1.8 and 1.9 - at least, it's working for us using Ruby 1.8.7 on Lion (and CentOS).  The magic encoding comment is great, thanks for bringing it to my attention.  The problem with it is it's not supported in Ruby 1.8 (afaik), and we'd like to make TwitterCLDR backwards compatible with both of those versions of Ruby.  I think the fix for this is to simply add `$KCODE = \"utf-8` at the top of twitter_cldr.rb as I mentioned before.  I'll give it a try on 1.9 and get back to you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573", "body": "Looks like this is a Ruby 1.8 vs 1.9 issue.  I verified that the gem is unusable on 1.9, but works under 1.8.  It's annoying, but  it looks like you really do have to declare the encoding at the top of each file.  My question is this: it looks like you've added Emacs-style magic comments - any reason why you didn't use the regular `# coding: utf-8` instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244", "body": "The example stuff looks ok but I'm not sure I understand the purpose for it - can you elaborate?  The US-ASCII issue looks good too, but I think we're going to need to add the `$KCODE` thing for Ruby 1.8 users and integrate your magic comments for Ruby 1.9 users.  We'll also have to add some logic that only sets `$KCODE` if you're using 1.8, otherwise you get an annoying warning.\n\nWould you mind submitting two separate pull requests for these fixes?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362", "body": "It's acceptable for all tree nodes to be hashes because the CLDR data is all in hashes.\n\nHave you tested that return statement?  I was doing a little playing around to verify your changes, and I don't think you're allowed to `return` inside a block like this.  I get a LocalJumpError.\n\nIt's cool that you want to avoid on error catching to handle the case where the given path doesn't exist, and you're right to question why `NameError` is the only rescued exception.  It would probably be better to make sure the next segment of the path exists before forging ahead, and that `final` isn't `nil`.  That way, we can remove our reliance on error catching.  I think we are going to still want to return nil to the caller if the path can't be found.  I think there are a few tests that rely on that.\n\nWould you mind investigating the `return` issue?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413", "body": "Yes!  Ok, I understand.  I definitely just learned something new about Ruby, thanks for that.  I hadn't realized `return` returns from the enclosing method.  Your solution is better, I'll merge it right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456", "body": "Cool, nice catch.  That's what I get for only testing in my timezone :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600", "body": "The languages that have \"unfinished\" number sections don't specify number formats as the others do.  For example, in resources/hu/numbers.yml, the key `hu.numbers.formats.percent.patterns.default` contains just an empty hash instead of an actual pattern whereas German has `\"#,##0\u00a0%\"`  Tests for this sound awesome, good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172", "body": "I'll talk to our open-source lead about adding ci support.  Great idea!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505", "body": "Ok, twitter-cldr-rb has been hooked up to travis thanks to @KL-7 's suggestions!  I won't merge this pull request because I changed the URL for the travis build status icon, but otherwise all credit goes to @KL-7.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109", "body": "A few questions for ya:\n1.  How much memory does this take up when the whole file has been loaded in?\n2.  Is your goal to use this data for normalization some time in the future (what you have now is not full normalization).\n3.  We should really cache the result of `unicode_data` in memory instead of rebuilding the hash from disk every time someone calls it.  I would suggest using a class variable (something like `@@unicode_data`) and only loading the data from disk if that variable is nil or undefined.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157", "body": "Should we leave this ticket open until you've written the tests, or can we close it?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705", "body": "Ok, just spent a good 15 minutes talking about this with a co-worker, trying to do the most efficient thing.  Here's what we think:\n\n~90ms load time and 25mb of memory isn't great, but what else can you do?  The best way to answer that is to define the most common use case.  Normalization is usually done in concert with sorting (i.e. alphabetization) and usually done on a list of phrases in a single language.  For each batch of phrases therefore, we're likely to only need fast access to a small subset of the Unicode data at a time.\n\nKnowing this, it makes more sense to break up the data into individual files by character set.  When normalizing a set of phrases, we can load into memory the files containing only the ranges we need, and cache them for future lookups.  We figured the extra round-trips to disk would be acceptable, and wouldn't be loading in a huge file all at once.\n\nWhat do you think @timothyandrew?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798", "body": "@timothyandrew that's how I would have done it.  It must be the yml uses more memory for some reason... kinda weird.  In any case, the memory usage is a bit high considering we don't need access to the entire spectrum of codepoints all at once.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311", "body": "Lulz I totally didn't know `rake build` existed.  We used to run `rake gem`, probably before Bundler got all fancy with its rake tasks and I was trying to emulate that functionality.  Looks like I can remove this.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792", "body": "This is probably a holdover from my C# days (StringBuffer) but I was also trying to make it obvious that the string could be quite large.  You're absolutely right however, a literal string here is exactly the same.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804", "body": "`self` makes it obvious that you're calling in the class or instance context, and doesn't cause you confuse the call with a variable name.  That may not be a big issue to the seasoned Rubyist, but I've found it helpful more than once when I re-read my code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237", "body": "Yeah, I guess it's just a matter of style.  I can remove 'em, but I can't promise I won't slip one in every once and a while by accident :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239", "body": "Oh yeah, that's totally true, my reasoning behind using `StringIO` was just to tell the reader that a large string is being concatenated here.  If they come from C#/Java land, that reasoning makes sense, but if they come from Ruby land they'll probably just go \"WTF\".  Changed to a literal string ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441", "body": "Oh man I knew there had to be a better way.  Ruby to the rescue once again ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388", "body": "Yes, I agree about changing `@@output_dir` to a class-level instance variable.\n\nI kept `@@output_dir` and `build_dir` separate because I was trying to follow the `./configure` - `make` - `make install` paradigm that builds the project in a temporary directory and moves it into place during the install step.  Additionally, `build_dir` is used during tests when it doesn't make sense to \"output\" the files anywhere.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295", "body": "Ah sorry, I misunderstood your comment.  You're absolutely right, I'll make the change right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125", "body": "Let's keep `self.resources` and add `self.get_resource` for backwards compatibility :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818", "body": "Where is `locale` defined here?  I don't see any way that the body of this block will ever be executed.  Also, only one instance of `TwitterCldr::Shared::Resources` is ever created... I guess maybe I'm missing the point of this change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828", "body": "These changes feel less readable to me than the previous solution, albeit more compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040", "body": "There's not much reason to use File.join unless you're joining more than one sub-path.  Try this instead:\n\n`data_path = File.join(File.dirname(__FILE__), \"data\")`\n\nAlso, data files are all stored in the `/resources` directory.  Unless they pertain to specific locales, they're put in `/resources/shared`.  It would be great if UnicodeData.txt could live there too and be accessed by the `TwitterCldr::Shared::Resources` class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062", "body": "At Twitter, it's standard to use the `do ... end` syntax instead of curly braces for multi-line blocks.  Also, this is another great place to use File.join:\n\n```\nIO.readlines(File.join(data_path, \"UnicodeData.txt\")).map do |line|\n  ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703", "body": "Just looked this up.  You're passing it a block that handles initialization - that's actually super cool.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710", "body": "Yeah I completely understand what you mean.  Really, it's not that much more unreadable.  I think we can keep your changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281", "body": "Ah, I see what you mean.  No, I don't think an error should be thrown here.  Instead I think we should leave the original text in the string, so instead of `\"5 houses\"` you get `\"%{houses_count:houses}\"` without any replacements.\n\nHowever!  I've been considering for a while whether to include a global option to raise errors instead of just letting things slide.  It really depends on the use case.  At Twitter, we would most likely not want TwitterCLDR to raise errors because we occasionally launch features that aren't 100% translated anyway, but other projects (or other companies) might feel differently.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284", "body": "The convention used throughout the rest of the specs is to assign instance variables for objects used across multiple tests:\n\n``` ruby\n@patterns = { :one => '\u043c\u0435\u0434\u0432\u0435\u0434\u044c', :few => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f', :many => '\u043c\u0435\u0434\u0432\u0435\u0434\u0435\u0439', :other => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f' }\n@plurals = ...\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292", "body": "Although this line will likely change, the convention used at Twitter (and in these specs) is to use a lambda and .should raise_error:\n\n``` ruby\nlambda { subject.format(2, patterns) }.should raise_error(ArgumentError, \"Missing pattern for :few.\")\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296", "body": "LOVE these refactors - much better, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297", "body": "Didn't know you could do this.  Very cool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768", "body": "Hmm... well, I suppose it couldn't hurt.  Thanks for the SO question, that helped explain things.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728", "body": "Better to accept a hash of options here and use `TwitterCldr.get_locale` if no locale is specified.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827", "body": "Ah, right you are.  `extract_locale` is better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830", "body": "Cool, very compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339", "body": "This file should probably not be hanging out right inside `lib` - consider moving it into a child directory.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "eigilsagafos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/54913ee6fa49feabf1bff865b5c1221378785078", "message": "Use Integer instead of Bignum/Fixnum in core_ext for Ruby 2.4.0 (#205)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viroulep": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ae997baa1901d4688ac17e19f11ff2578bf84f5", "message": "Add Slovenian locale (#204)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muirrn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f022e78f4f736ce06e6c97b03a1f0594eb1be976", "message": "Pass along locale when formatting currencies. (#203)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "severin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/209", "title": "Add missing postal code for Liechtenstein", "body": "Postal codes in Liechtenstein go to `9498`, see https://en.wikipedia.org/wiki/Postal_codes_in_Switzerland_and_Liechtenstein#Liechtenstein", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imkmf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382", "body": "Yup. Typo there - I was running `bundle exec rake`. \n\nIn regards to the coding, I'm running Ruby 1.9.3p125 on Lion 10.7.3. Managed through RVM, etc.\n\n`$KCODE`, as far as I can tell, isn't supported in versions < 1.9.0.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615", "body": "I'm going to redo these comments once again -- the `# coding: utf-8` is the correct form, I grabbed the wrong code and wrote a quick script to push it out to all the `.rb` files. I've resolved that, and only added it to the files that need it. The commits, and thus the pull request should be a lot cleaner.\n\nWant me to submit a new one? Also, how did the other areas of the pull request look? Tests and example locale?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880", "body": "Heh, beat me to it. I've been working on some other stuff at the same time as the magic comments :)\n\nAccept this one, not mine!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014", "body": "This is the coolest thing I've learned about today. Hot damn.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662", "body": "I'll be working on it this weekend, so if you could keep it open, that'd be great!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728", "body": "I like @camertron's solution - in terms of uniformity, it fits with having each locale or character set in its own separate file.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545", "body": "Wow, not sure how I didn't catch that. Feel free to submit a pull request here - not feeling very smart. _(walk of shame)_\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559", "body": "Yep. Excited to see it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611", "body": "Yeah, bizarre. I haven't used Rdoc at all so I'm not sure where that came from. If I'm the only one with this problem, then taking it off is fine by me! I'm not the final deciding factor but it was my pull... so sounds good!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846", "body": "Thanks, great to have this out the door finally.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230", "body": "+1, we do this already for scalding\n\nJust go here @camertron - https://github.com/twitter/twitter-cldr-rb/admin/hooks\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "timothyandrew": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431", "body": "I tried serializing this to a YAML file, and reading it from there, but that seems to be slower.\n\n``` bash\n0.089785 seconds. # to parse UnicodeData.txt and retrieve a single code point.\n0.124981 seconds. # to parse UnicodeData.yml (pre-generated) and retrieve a single code point.\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261", "body": "1. Oops, looks like it's about 25 megs on my system. Hadn't noticed that; somehow I was convinced that it was 5MB the last time I tried. Maybe we can just read the file for every request?\n2. Yes, I'm planning to implement the normalization algorithms, starting with NFC. As far as I know, the Decomposition_Mapping field in UnicodeData.txt is required for the algorithm.\n3. If we _are_ holding the entire thing in memory, then yeah, this sounds good. Let me just see how much slower it is to read from the file for every call to unicode_data. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702", "body": "Maybe I'm not using the right method to measure the memory usage, but I'm getting inconsistent results. I just checked, and a script that loads a YAML or JSON version of UnicodeData.txt is using around 70MB (!) more memory than a script that loads twitter_cldr but not the UnicodeData file.\n\nI'm just running the two programs at the same time and comparing their memory usage in OS X's Activity Monitor. Is there a better way to measure memory usage?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335", "body": "Should be `line[0] =~ /(@|#)/`\nSince all lines in [`NormalizationTest.txt`](https://github.com/twitter/twitter-cldr-rb/blob/master/spec/normalizers/NormalizationTest.txt) contain trailing comments, `line =~ /@|#/` evaluates to a non-zero value for a line like:\n\n```\nC8C4 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE; # (\uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; ) HANGUL SYLLABLE JOE, COMBINING TILDE OVERLAY, HANGUL JONGSEONG TIKEUT\n```\n\nand so the tests aren't run on it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952", "body": "I'm not too sure if the `sort_by` is required here.\n@KL-7 @camertron Since Ruby 1.8 doesn't maintain the hash keys in the insertion order, is it better to leave it in?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}