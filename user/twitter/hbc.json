{"_default": {"1": {"nilsga": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/184", "title": "Create release with support for powertrack 2", "body": "As described here: http://support.gnip.com/articles/updating-hbc-for-ptv2.html\r\n\r\nThe code seems to be available, so hopefully, all there is to do is merge and create a new release.", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mfirry": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/183", "title": "Broken link on README", "body": "First line of `README.md` still links to [Streaming API](https://developer.twitter.com/docs/streaming-apis) which has moved somewhere else.", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jzb3db": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/182", "title": "ClientBuilder error caused by deprecation of SchemeRegistryFactory", "body": "Trying to initialize a ClientBuilder results in the following error:\r\n\r\n```\r\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/http/impl/conn/SchemeRegistryFactory\r\n\tat com.twitter.hbc.ClientBuilder.<init>(ClientBuilder.java:102)\r\n\tat twitter.Main.streamTwitterData(Main.java:101)\r\n\tat twitter.Main.main(Main.java:75)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\r\nCaused by: java.lang.ClassNotFoundException: org.apache.http.impl.conn.SchemeRegistryFactory\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\r\n\t... 8 more\r\n```\r\n\r\norg/apache/http/impl/conn/SchemeRegistryFactory has been deprecated and [HttpClientBuilder](https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html) looks to be the replacement.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rakshitcr7": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/181", "title": "Incomplete Streaming of tweets", "body": "The problem I am facing is that while tweets are streaming, some of the tweets are left incomplete (the long tweets). \r\n\r\nFor Example:\r\n**Original Tweet:** \"Another Silent revolution of Modi govt - Streets lights being replaced with LED bulbs, saving energy consumption & stopping toxic emissions.\"\r\n\r\n**Tweet Shown :** \"RT @BJP4India: Another Silent revolution of Modi govt - Streets lights being replaced with LED bulbs, saving energy consumption &\u2026\"\r\n\r\nNot able to understand why its happening. This becomes a problem during sentiment analysing as it also considers \"...\" as a word.", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GoSkyLine": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/178", "title": "Enhanced URL enrichment in Twitter/GNIP volume stream 2.0 causing DelimitedStreamReader's buffer to overflow", "body": "We have been testing hbc client [(jimmoffitt's fork)](https://github.com/jimmoffitt/hbc) with Twitter/GNIP volume stream 2.0 for a while, our connections got disconnected few times a day with the exception\r\n`java.lang.ArrayIndexOutOfBoundsException\r\n        at com.twitter.hbc.common.DelimitedStreamReader.copyToStrBuffer(DelimitedStreamReader.java:130)\r\n        at com.twitter.hbc.common.DelimitedStreamReader.readLine(DelimitedStreamReader.java:110)\r\n        at com.twitter.hbc.common.DelimitedStreamReader.readLine(DelimitedStreamReader.java:56)\r\n        at com.twitter.hbc.core.processor.LineStringProcessor.processNextMessage(LineStringProcessor.java:42)\r\n        at com.twitter.hbc.core.processor.LineStringProcessor.processNextMessage(LineStringProcessor.java:27)\r\n        at com.twitter.hbc.co\r\nre.processor.AbstractProcessor.process(AbstractProcessor.java:44)\r\n        at com.twitter.hbc.httpclient.Connection.processResponse(Connection.java:51)\r\n        at com.twitter.hbc.httpclient.ClientBase.processConnectionData(ClientBase.java:254)\r\n        at com.twitter.hbc.httpclient.ClientBase.run(ClientBase.java:154)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\nPartition-2 - EVENT [DISCONNECTED] - null - java.lang.ArrayIndexOutOfBoundsException`\r\n\r\nAfter some debugging, finally we were able to find a sample tweet that triggered the error, json file is attached below, please pay attention to the title field, which has html source code of a whole web page.\r\n[bad_tweet.json.txt](https://github.com/twitter/hbc/files/616694/bad_tweet.json.txt)\r\n\r\nThe above stack trace shows error happened at this line [DelimitedStreamReader.java#L130](https://github.com/twitter/hbc/blob/master/hbc-core/src/main/java/com/twitter/hbc/common/DelimitedStreamReader.java#L130)\r\nValues at runtime were:\r\noffset:0 strBufferIndex:500046 length:64 Math.min(length, MAX_ALLOWABLE_BUFFER_SIZE - strBufferIndex):-46\r\n\r\nNow, we can see where the issue is, MAX_ALLOWABLE_BUFFER_SIZE = 500000,  enrichment was bringing in most of the HTML page into the \"Title\" field, which overflowed the max buffer size in HBC.\r\n\r\nCould we make this MAX_ALLOWABLE_BUFFER_SIZE configurable? so we can overwrite it when necessary?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nevi-me": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/177", "title": "Site Streams", "body": "This is more for people who will waste a lot of time trying to use site streams. It appears that per #43 site streams require permissions, which Twitter isn't granting.\r\n\r\nI used the `SitestreamExample`, and wasted some time trying to figure out why nothing was happening, only to find that I was getting `HTTP/1. 403 Forbidden` errors, for which I had to add an event queue to find. Perhaps it's my fault for not noticing that I needed permissions which I can't get, but heck ... Developing on Twitter certainly hasn't been pleasant for me.", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "boosh": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/173", "title": "Fix BasicAuth when using PowerTrack 2.0", "body": "This looks like it should work, but I get a 401 \"Authorization Required\" response when I use it with PowerTrack 2.0:\n\n```\nval auth = new BasicAuth(username, password)\nval client = new ClientBuilder()\n  .name(\"GnipClient\")\n  .hosts(\"https://gnip-stream.twitter.com\")\n  .endpoint(endpoint)\n  .authentication(auth)\n  .processor(new LineStringProcessor(queue))\n  .gzipEnabled(true)\n  .build()\n```\n\nDebugging shows no auth header is sent with the request:\n\n> DEBUG [org.apache.http.impl.conn.DefaultClientConnectionOperator] Connecting to gnip-stream.twitter.com:443\n> DEBUG [org.apache.http.client.protocol.RequestAddCookies] CookieSpec selected: best-match\n> DEBUG [org.apache.http.client.protocol.RequestAuthCache] Auth cache not set in the context\n> DEBUG [org.apache.http.client.protocol.RequestTargetAuthentication] Target auth state: UNCHALLENGED\n> DEBUG [org.apache.http.client.protocol.RequestProxyAuthentication] Proxy auth state: UNCHALLENGED\n> DEBUG [org.apache.http.impl.client.DefaultHttpClient] Attempt 1 to execute request\n> DEBUG [org.apache.http.impl.conn.DefaultClientConnection] Sending request: GET /stream/powertrack/accounts/MY_ACC/publishers/twitter/prod.json HTTP/1.1\n> DEBUG [org.apache.http.wire] >> \"GET /stream/powertrack/accounts/MY_ACC/publishers/twitter/prod.json HTTP/1.1[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] >> \"Accept-Encoding: gzip,deflate[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] >> \"Host: gnip-stream.twitter.com[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] >> \"Connection: Keep-Alive[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] >> \"User-Agent: Hosebird-Client 2.2.0[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] >> \"[\\r][\\n]\"\n> DEBUG [org.apache.http.headers] >> GET /stream/powertrack/accounts/MY_ACC/publishers/twitter/prod.json HTTP/1.1\n> DEBUG [org.apache.http.headers] >> Accept-Encoding: gzip,deflate\n> DEBUG [org.apache.http.headers] >> Host: gnip-stream.twitter.com\n> DEBUG [org.apache.http.headers] >> Connection: Keep-Alive\n> DEBUG [org.apache.http.headers] >> User-Agent: Hosebird-Client 2.2.0\n> DEBUG [org.apache.http.wire] << \"HTTP/1.1 401 Authorization Required[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] << \"connection: close[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] << \"content-length: 138[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] << \"content-type: application/json; charset=utf-8[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] << \"date: Tue, 19 Jul 2016 14:18:21 GMT[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] << \"server: tsa[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] << \"x-connection-hash: 2473a62afd5d8bf2163f1e3259091fb1[\\r][\\n]\"\n> DEBUG [org.apache.http.wire] << \"[\\r][\\n]\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/172", "title": "Update EnterpriseStreamingEndpoint for compatibility with PowerTrack 2.0", "body": "The new URL pattern is:\n\n```\nhttps://gnip-stream.twitter.com/stream/powertrack/accounts/<ACCOUNT_NAME>/publishers/twitter/<LABEL>.json\n```\n\nThe `EnterpriseStreamingEndpoint` class should be updated to support this.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/172/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amitabhi": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/171", "title": "Backfill in PT2.0 is not supported.", "body": "Hi,\nEarlier for backfill in PT1.0 we need to pass clientId to get last 5 mins of backfill data. Now in documentation it is mentioned that we need to pass **backfillMinutes** variable. Can you please add in hbc-module so that we can pass the backfillMinutes as parameter. \n\nThanks in advance\nAmit \n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/171/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tommcintyre": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/170", "title": "BasicReconnectionManager does not respect backoff policy for 420 errors", "body": "Twitter's reconnection backoff policies are set out here, under the **Reconnecting** section: https://dev.twitter.com/streaming/overview/connecting\n\n`BasicReconnectionManager` handles two of the scenarios described - linear backoff for network errors, and exponential backoff for HTTP errors. However, it does not correctly handle HTTP 420 errors. The correct behaviour should be:\n\n> Back off exponentially for HTTP 420 errors. Start with a 1 minute wait and double each attempt. Note that every HTTP 420 received increases the time you must wait until rate limiting will no longer will be in effect for your account.\n\nInstead, these errors are treated the same as any other HTTP errors (backoff starts at 5 seconds, then doubles up to 320 seconds; rather than starting at 1 minute, and no upper limit).\n\nI am observing that Twitter never allows some clients to reconnect after getting a 420 (\"Enhance your calm\") error, since it does not consider the current backoff strategy sufficient. It will continue issuing 420 errors until the client is shut down for a while and then manually restarted.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FernandoDoming": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/167", "title": "BasicReconnectionManager Integer overflow", "body": "The `calculateExponentialBackoffMillis` function from `BasicReconnectionManager` calculates the backoff time as follows:\n\n```\nINITIAL_EXPONENTIAL_BACKOFF_MILLIS << (exponentialBackoffCount - 1)\n```\n\nIf `exponentialBackoffCount` is a big enough number `(>= 20)` the integer will overflow and return a negative number. The negative number is then compared with `MAX_EXPONENTIAL_BACKOFF_MILLIS (320000)` and the minimum is returned. As the negative number is the lower one it is returned and used as a parameter for `Thread.sleep()`, which fails due to the negative integer.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/168", "title": "Fix for Issue/167", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexott": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/164", "title": "language & filter_level parameters are passed incorrectly", "body": "According to specification (https://dev.twitter.com/streaming/overview/request-parameters#filter_level) the `language` & `filter_level` parameters could be used on the all stream types, but the current implementation pass them as the `POST` parameter, instead of `GET`, so they don't work on the sample stream.\n\nP.S. I'll try to provide fix for it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/165", "title": "Fix for issue #164", "body": "Pass `language` & `filter_level` parameters as query parameters.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hakrnirmal": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/163", "title": "NoClassDefFoundError: com/google/common/io/BaseEncoding while running SampleStreamExample", "body": "Did not receive a message in 5 seconds\nClient connection closed unexpectedly: java.lang.NoClassDefFoundError: com/google/common/io/BaseEncoding\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "powerofviva": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/162", "title": "any full docimentation about how hbc works?", "body": "Hello everybody,\nI am trying to understand after the authentication by hbc (Oauth) , what happening inside the hbc in detail.\ncan anyone please share with me if you have any more explanation or document about hbc ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/161", "title": "dataStream connection protocol", "body": "Hello, \nI am trying to do research about stream protocol , i interested in  hbc , would you please let me know how to made connection to the twitter API , i am interesting to know about the protocol that has beed used . WebSocket , Rest , Http ..?  \nit is appreciated to let me have access to source code in connection part . \n\nthanks in advance\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mhelal": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/160", "title": "Trying to use hbc with apache storm on Eclipse on Windows", "body": "Hello, \n\nI need support trying to use your hpc APIs, to connect to twitter streams as a spout in apache storm.  The java file below is what I am trying, using the pom.xml below.\n\nI am getting a runtime exception from line 106:\n\ncluster.submitTopology(\"test\", conf, builder.createTopology());\n\nsays: \n\njava.lang.RuntimeException: java.io.NotSerializableException: com.twitter.hbc.core.event.ConnectionEvent\n\nwith traceback:\n\njava.lang.RuntimeException: java.io.NotSerializableException: com.twitter.hbc.core.event.ConnectionEvent\n    at backtype.storm.utils.Utils.javaSerialize(Utils.java:91) ~[storm-core-0.10.0.jar:0.10.0]\n    at backtype.storm.topology.TopologyBuilder.createTopology(TopologyBuilder.java:112) ~[storm-core-0.10.0.jar:0.10.0]\n    at storm.starter.TwitterTopology.main(TwitterTopology.java:106) ~[classes/:?]\nCaused by: java.io.NotSerializableException: com.twitter.hbc.core.event.ConnectionEvent\n    at java.io.ObjectOutputStream.writeObject0(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeObject(Unknown Source) ~[?:1.7.0_76]\n    at java.util.concurrent.LinkedBlockingQueue.writeObject(Unknown Source) ~[?:1.7.0_76]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_76]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_76]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_76]\n    at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectStreamClass.invokeWriteObject(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeSerialData(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeObject0(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.defaultWriteFields(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeSerialData(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeObject0(Unknown Source) ~[?:1.7.0_76]\n    at java.io.ObjectOutputStream.writeObject(Unknown Source) ~[?:1.7.0_76]\n    at backtype.storm.utils.Utils.javaSerialize(Utils.java:87) ~[storm-core-0.10.0.jar:0.10.0]\n    ... 2 more\n\n---\n\nAs far as I see, I have made the spout and bolt themselves serializable. Not sure how to make the ConnectionEvent serializable, or how to get it to accept it as is. \n\nI appreciate your support very much\n\n---\n\nThe Java File:\n\n---\n\n/**\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n  *\n- http://www.apache.org/licenses/LICENSE-2.0\n  *\n- Unless required by applicable law or agreed to in writing, software\n- distributed under the License is distributed on an \"AS IS\" BASIS,\n- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- See the License for the specific language governing permissions and\n- limitations under the License.\n  */\n  package storm.starter;\n\nimport backtype.storm.Config;\nimport backtype.storm.LocalCluster;\nimport backtype.storm.StormSubmitter;\nimport backtype.storm.task.OutputCollector;\nimport backtype.storm.task.TopologyContext;\nimport backtype.storm.topology.OutputFieldsDeclarer;\nimport backtype.storm.topology.TopologyBuilder;\nimport backtype.storm.topology.base.BaseRichBolt;\nimport backtype.storm.tuple.Fields;\nimport backtype.storm.tuple.Tuple;\nimport backtype.storm.tuple.Values;\nimport backtype.storm.utils.Utils;\n\nimport java.util.Map;\nimport backtype.storm.spout.SpoutOutputCollector;\nimport backtype.storm.topology.base.BaseRichSpout;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.common.collect.Lists;\nimport com.twitter.hbc.ClientBuilder;\nimport com.twitter.hbc.core._;\nimport com.twitter.hbc.core.endpoint._;\nimport com.twitter.hbc.core.event.*;\nimport com.twitter.hbc.core.processor.StringDelimitedProcessor;\nimport com.twitter.hbc.httpclient.auth.Authentication;\nimport com.twitter.hbc.httpclient.auth.OAuth1;\n\n/**\n- This is a basic example of a Storm topology.\n  */\n  public class TwitterTopology {\n  \n  public static class TwitterBolt extends BaseRichBolt {\n  \n    /**\n  - */\n    private static final long serialVersionUID = 4099225039441092308L;\n    OutputCollector _collector;\n    \n    @Override\n    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {\n      _collector = collector;\n    }\n    \n    @Override\n    public void execute(Tuple tuple) {\n      _collector.emit(tuple, new Values(tuple.getString(0) + \"!!!\"));\n      _collector.ack(tuple);\n    }\n    \n    @Override\n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n      declarer.declare(new Fields(\"word\"));\n    }\n  \n  }\n  \n  public static void main(String[] args) throws Exception {\n    TopologyBuilder builder = new TopologyBuilder();\n  \n    builder.setSpout(\"twitterSpout\", new TwitterSpout(), 10);\n    builder.setBolt(\"twitterBolt\", new TwitterBolt(), 3).shuffleGrouping(\"twitterSpout\");\n  \n    Config conf = new Config();\n    //conf.setDebug(true);\n  \n    if (args != null && args.length > 0) {\n      conf.setNumWorkers(3);\n  \n  ```\n  StormSubmitter.submitTopologyWithProgressBar(args[0], conf, builder.createTopology());\n  ```\n  \n    }\n    else {\n  \n  ```\n  LocalCluster cluster = new LocalCluster();\n  cluster.submitTopology(\"test\", conf, builder.createTopology());\n  Utils.sleep(10000);\n  cluster.killTopology(\"test\");\n  cluster.shutdown();\n  ```\n  \n    }\n  }\n  }\n\nclass TwitterSpout extends BaseRichSpout {\n\n```\n/**\n * \n */\nprivate static final long serialVersionUID = -5695079926219121864L;\npublic static Logger LOG = LoggerFactory.getLogger(TwitterSpout.class);\nboolean _isDistributed;\nSpoutOutputCollector _collector;\nBlockingQueue<String> msgQueue;\nBlockingQueue<Event> eventQueue;\n\npublic TwitterSpout() {\n    this(true);\n\n    /** Set up your blocking queues: Be sure to size these properly based on expected TPS of your stream */\n    msgQueue = new LinkedBlockingQueue<String>(100000);\n    eventQueue = new LinkedBlockingQueue<Event>(1000);\n\n    /** Declare the host you want to connect to, the endpoint, and authentication (basic auth or oauth) */\n    Hosts hosebirdHosts = new HttpHosts(Constants.STREAM_HOST);\n    StatusesFilterEndpoint hosebirdEndpoint = new StatusesFilterEndpoint();\n    // Optional: set up some followings and track terms\n    List<Long> followings = Lists.newArrayList(1234L, 566788L);\n    List<String> terms = Lists.newArrayList(\"twitter\", \"api\");\n    hosebirdEndpoint.followings(followings);\n    hosebirdEndpoint.trackTerms(terms);\n\n    // These secrets should be read from a config file\n    Authentication hosebirdAuth = new OAuth1(\"fffff\", \"eeee\", \"eee\", \"cccc\");\n    //Authentication hosebirdAuth = new BasicAuth(\"username\", \"password\");\n\n    ClientBuilder builder = new ClientBuilder()\n              .name(\"Hosebird-Client-01\")                              // optional: mainly for the logs\n              .hosts(hosebirdHosts)\n              .authentication(hosebirdAuth)\n              .endpoint(hosebirdEndpoint)\n              .processor(new StringDelimitedProcessor(msgQueue))\n              .eventMessageQueue(eventQueue);                          // optional: use this if you want to process client events\n\n            Client hosebirdClient = builder.build();\n            // Attempts to establish a connection.\n            hosebirdClient.connect();\n\n\n}\n\npublic TwitterSpout(boolean isDistributed) {\n    _isDistributed = isDistributed;\n}\n\npublic void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n    _collector = collector;\n}\n\npublic void close() {\n\n}\n\npublic void nextTuple() {\n    Utils.sleep(100);\n```\n\n//        final String[] words = new String[] {\"nathan\", \"mike\", \"jackson\", \"golda\", \"bertels\"};\n//        final Random rand = new Random();\n//        final String word = words[rand.nextInt(words.length)];\n\n```\n    String msg;\n    try {\n        msg = msgQueue.take();\n        _collector.emit(new Values(msg));\n    } catch (InterruptedException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n\n}\n\npublic void ack(Object msgId) {\n\n}\n\npublic void fail(Object msgId) {\n\n}\n\npublic void declareOutputFields(OutputFieldsDeclarer declarer) {\n    declarer.declare(new Fields(\"tweet\"));\n}\n\n@Override\npublic Map<String, Object> getComponentConfiguration() {\n    if(!_isDistributed) {\n        Map<String, Object> ret = new HashMap<String, Object>();\n        ret.put(Config.TOPOLOGY_MAX_TASK_PARALLELISM, 1);\n        return ret;\n    } else {\n        return null;\n    }\n}    \n```\n\n}\n\n---\n\nThe pom file:\n\n---\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n Licensed to the Apache Software Foundation (ASF) under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The ASF licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n      <artifactId>storm</artifactId>\n      <groupId>org.apache.storm</groupId>\n      <version>0.10.0</version>\n      <relativePath>../../pom.xml</relativePath>\n  </parent>\n\n  <groupId>org.apache.storm</groupId>\n  <artifactId>storm-starter</artifactId>\n  <packaging>jar</packaging>\n\n  <name>storm-starter</name>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.testng</groupId>\n      <artifactId>testng</artifactId>\n      <version>6.8.5</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-all</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.easytesting</groupId>\n      <artifactId>fest-assert-core</artifactId>\n      <version>2.0M8</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jmock</groupId>\n      <artifactId>jmock</artifactId>\n      <version>2.6.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n     <groupId>org.twitter4j</groupId>\n     <artifactId>twitter4j-stream</artifactId>\n     <version>3.0.3</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.storm</groupId>\n      <artifactId>storm-core</artifactId>\n      <version>0.10.0</version>\n      <!-- keep storm out of the jar-with-dependencies -->\n      <scope>compile</scope>\n    </dependency>\n      <dependency>\n          <groupId>org.apache.storm</groupId>\n          <artifactId>multilang-javascript</artifactId>\n          <version>${project.version}</version>\n      </dependency>\n      <dependency>\n          <groupId>org.apache.storm</groupId>\n          <artifactId>multilang-ruby</artifactId>\n          <version>${project.version}</version>\n      </dependency>\n      <dependency>\n          <groupId>org.apache.storm</groupId>\n          <artifactId>multilang-python</artifactId>\n          <version>${project.version}</version>\n      </dependency>\n    <dependency>\n      <groupId>commons-collections</groupId>\n      <artifactId>commons-collections</artifactId>\n      <version>3.2.1</version>\n    </dependency>\n    <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava</artifactId>\n    </dependency>\n\n```\n <dependency>\n  <groupId>com.twitter</groupId>\n  <artifactId>hbc-core</artifactId> <!-- or hbc-twitter4j -->\n  <version>2.2.0</version> <!-- or whatever the latest version is -->\n</dependency>\n```\n\n  </dependencies>\n\n  <build><defaultGoal>install</defaultGoal>\n    <sourceDirectory>src/jvm</sourceDirectory>\n    <testSourceDirectory>test/jvm</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>${basedir}/multilang</directory>\n      </resource>\n    </resources>\n\n```\n<plugins>\n    <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-shade-plugin</artifactId>\n        <version>1.4</version>\n        <configuration>\n            <createDependencyReducedPom>true</createDependencyReducedPom>\n        </configuration>\n        <executions>\n            <execution>\n                <phase>package</phase>\n                <goals>\n                    <goal>shade</goal>\n                </goals>\n                <configuration>\n                    <transformers>\n                        <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n                        <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                        </transformer>\n                    </transformers>\n                </configuration>\n            </execution>\n        </executions>\n    </plugin>\n\n     <plugin>\n    <groupId>com.theoryinpractise</groupId>\n    <artifactId>clojure-maven-plugin</artifactId>\n    <extensions>true</extensions>\n    <configuration>\n      <sourceDirectories>\n        <sourceDirectory>src/clj</sourceDirectory>\n      </sourceDirectories>\n    </configuration>\n    <executions>\n      <execution>\n        <id>build</id>\n        <phase>build</phase>\n        <goals>\n          <goal>build</goal>\n        </goals>\n      </execution>\n    </executions>\n  </plugin>\n\n\n  <plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>exec-maven-plugin</artifactId>\n    <version>1.2.1</version>\n    <executions>\n      <execution>\n        <goals>\n          <goal>exec</goal>\n        </goals>\n      </execution>\n    </executions>\n    <configuration>\n      <executable>java</executable>\n      <includeProjectDependencies>true</includeProjectDependencies>\n      <includePluginDependencies>false</includePluginDependencies>\n      <classpathScope>compile</classpathScope>\n      <mainClass>${storm.topology}</mainClass>\n    </configuration>\n  </plugin>\n</plugins>\n```\n\n  </build>\n</project>\n\n---\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ronagrawal": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/158", "title": "Flag to check the status of the connection", "body": "I am unable to find a flag through which I can check the status of the connection.\n\nIs there any variable which checks if it is connected to the Streaming API or not. In addition, If we fail to connect to the streaming API, error is logged, however how can I retrieve that error to a variable\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RobertBakic": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/157", "title": "API Homogeneity", "body": "Constructors for objects Twitter4jSitestreamClient and  Twitter4jUserstreamClient should accept :\n\n```\nList<? extends SiteStreamsListener> listeners\n```\n\nand \n\n```\nList<? extends UserStreamListener> listeners \n```\n\nrespectively, like  Twitter4jStatusClient does with : \n\n```\nList<? extends StatusListener> listeners\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nageshbhattu": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/156", "title": "sampleExampleClient Error ", "body": "Hi,\n  I am running hbc example application. mvn install was successful. I am running this on two different machines. One running CentOS and another running ubuntu. I ran it on the ubuntu machine and it worked fine dumping the tweets from the stream. But when I did similar setup on CentOS, I am getting the following error.\n\nsampleExampleClient Error connecting w/ status code - 401, reason - Authorization Required\nI am using the same quadruplet of acces-token,secret combo.\n\nThank you for any help\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rowanseymour": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/155", "title": "Exception when parsing FOLLOWS_OVER_LIMIT warnings", "body": "This type of warning doesn't have the \"percent_full\" field, thus the following error:\n\n```\nWARN com.twitter.hbc.twitter4j.BaseTwitter4jClient: Exception thrown during parsing msg {\"warning\":{\"code\":\"FOLLOWS_OVER_LIMIT\",\"message\":\"The requested user follows more accounts than the maximum supported by this streaming endpoint. Only a subset of 10000 followed accounts are included in this stream.\",\"user_id\":????????,\"timestamp_ms\":\"1439407322431\"}}\n\n! twitter4j.JSONException: JSONObject[\"percent_full\"] not found.\n! at twitter4j.JSONObject.get(JSONObject.java:390)\n! at twitter4j.JSONObject.getInt(JSONObject.java:428)\n! at com.twitter.hbc.twitter4j.BaseTwitter4jClient.processStallWarning(BaseTwitter4jClient.java:255)\n! at com.twitter.hbc.twitter4j.BaseTwitter4jClient.processMessage(BaseTwitter4jClient.java:215)\n! at com.twitter.hbc.twitter4j.BaseTwitter4jClient.parseMessage(BaseTwitter4jClient.java:129)\n! at com.twitter.hbc.twitter4j.BaseTwitter4jClient$1.run(BaseTwitter4jClient.java:76) \n! at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n! at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n! at java.lang.Thread.run(Thread.java:745)\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/176", "title": "Fix #155: parsing exception when processing FOLLOWS_OVER_LIMIT stall warnings", "body": "Fixes https://github.com/twitter/hbc/issues/155 by ensuring stall warning message parsing doesn't blow up if \"percent_full\" field is not present.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mgurenko": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/153", "title": "HBC with spring and tomcat", "body": "Im using \ntomcat 7.0.56\nspring version 4.1.6.RELEASE \nspring security version 3.2.7.RELEASE\n\nThat simple code works in my test app(like public static main). But when i use it in my spring app, i not receive any message.\n\n```\nimport com.google.common.collect.Lists;\nimport com.twitter.hbc.ClientBuilder;\nimport com.twitter.hbc.core.Constants;\nimport com.twitter.hbc.core.endpoint.UserstreamEndpoint;\nimport com.twitter.hbc.core.processor.StringDelimitedProcessor;\nimport com.twitter.hbc.httpclient.BasicClient;\nimport com.twitter.hbc.httpclient.auth.Authentication;\nimport com.twitter.hbc.httpclient.auth.OAuth1;\nimport com.twitter.hbc.twitter4j.Twitter4jStatusClient;\nimport twitter4j.DirectMessage;\nimport twitter4j.StallWarning;\nimport twitter4j.Status;\nimport twitter4j.StatusDeletionNotice;\nimport twitter4j.User;\nimport twitter4j.UserList;\nimport twitter4j.UserStreamListener;\n\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n\n    private String key = \"xxx\";\n    private String secret = \"xxx\";\n    private String token = \"xxx\";\n    private String tokenSecret = \"xxx\";\n\n    private UserStreamListener  statusListener = new UserStreamListener() {\n        @Override\n        public void onStatus(Status status) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n            System.out.println(status.getGeoLocation());\n            System.out.println(status.getUser());\n        }\n\n        @Override\n        public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onTrackLimitationNotice(int numberOfLimitedStatuses) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onScrubGeo(long userId, long upToStatusId) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onStallWarning(StallWarning warning) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onException(Exception ex) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onDeletionNotice(long directMessageId, long userId) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onFriendList(long[] friendIds) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onFavorite(User source, User target, Status favoritedStatus) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUnfavorite(User source, User target, Status unfavoritedStatus) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onFollow(User source, User followedUser) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUnfollow(User source, User unfollowedUser) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onDirectMessage(DirectMessage directMessage) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserListMemberAddition(User addedMember, User listOwner, UserList list) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserListMemberDeletion(User deletedMember, User listOwner, UserList list) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserListSubscription(User subscriber, User listOwner, UserList list) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserListUnsubscription(User subscriber, User listOwner, UserList list) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserListCreation(User listOwner, UserList list) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserListUpdate(User listOwner, UserList list) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserListDeletion(User listOwner, UserList list) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUserProfileUpdate(User updatedUser) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onBlock(User source, User blockedUser) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n\n        @Override\n        public void onUnblock(User source, User unblockedUser) {\n            System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n        }\n    };\n    private void openStreamAPI() {\n        BlockingQueue<String> queue = new LinkedBlockingQueue<String>(10000);\n\n        // Define our endpoint: By default, delimited=length is set (we need this for our processor)\n        // and stall warnings are on.\n        UserstreamEndpoint endpoint = new UserstreamEndpoint();\n\n\n        Authentication auth = new OAuth1(key, secret, token, tokenSecret);\n        // Authentication auth = new BasicAuth(username, password);\n\n        // Create a new BasicClient. By default gzip is enabled.\n        BasicClient client = new ClientBuilder()\n                .hosts(Constants.USERSTREAM_HOST)\n                .endpoint(endpoint)\n                .authentication(auth)\n                .processor(new StringDelimitedProcessor(queue))\n                .build();\n\n        // Create an executor service which will spawn threads to do the actual work of parsing the incoming messages and\n        // calling the listeners on each message\n        int numProcessingThreads = 4;\n        ExecutorService service = Executors.newFixedThreadPool(numProcessingThreads);\n\n        // Wrap our BasicClient with the twitter4j client\n        Twitter4jStatusClient t4jClient = new Twitter4jStatusClient(\n                client, queue, Lists.newArrayList(statusListener), service);\n\n        // Establish a connection\n        t4jClient.connect();\n        for (int threads = 0; threads < numProcessingThreads; threads++) {\n            // This must be called once per processing thread\n            t4jClient.process();\n        }\n    }\n    public static void main(String[] args) {\n        Main main = new Main();\n        main.openStreamAPI();\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "riteshkapadia": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/152", "title": "Changes required to adapt the new REST changes for DM increased to more than 140 Characters.", "body": "Hi Team,\n\nAs the twitter is changing the REST API to adapt the more than 140 characters in DM change, will this impact the projects using hbc?\n\nIf it is a major impact, what steps should we take to adapt it. Also, are we planing a next release to adapt this changes to support more than 140 character limit.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sohussain": {"issues": [{"url": "https://api.github.com/repos/twitter/hbc/issues/151", "title": "Move to Twitter4J 4.0.3 ?", "body": "Any plans for this? \n\nEDIT: it's almost no work, I have done it locally, can make a pull request...\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grimreaper": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/ce61517be1e726fb4f5809786af86e14a559a4d7", "message": "Merge pull request #146 from bw-tom/set-publisher-configurable\n\nAdding a new constructor to utilise non-twitter gnip endpoints"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/5c4e59739dcb047898703f4c1b80d4d7fa2ecbd1", "message": "Merge pull request #149 from kutsal/http-proxy-support\n\nImprovement: Adding HTTP/S proxy support"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kutsal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/6c20add1a1df5bf1fdb0dc9e6dd2ccaae539df27", "message": "Improvement: Adding HTTP/S proxy support\n\nThis commit adds HTTP/S proxy support to ClientBuilder."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bw-tom": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/7f00e4820854cb0c3a501d993ce45043f1a39051", "message": "Adding a new constructor to utilise non-twitter gnip endpoints"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevinoliver": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/ac4cbdf561961fba9c6ea655c5f334cce4f7d5a9", "message": "Merge pull request #142 from twitter/new-travisci-infra\n\nUse the new Travis CI container infrastructure"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/b9939e3d5589cbec706b9dd5c531b0bbfeefda8c", "message": "Merge pull request #140 from gengel/master\n\nREADME: client.shutdown() should be client.stop()"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/602944b2bb3f23f3f8661d43239648f0ae25a0f7", "message": "Merge pull request #136 from pheuter/patch-1\n\nUpdate Twitter4jClient interface to be public"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/40e8f29a83f7980cd51de7a69359b4e66021db31", "message": "Merge pull request #129 from twitter/readme-update\n\nupdate README to reflect latest maven version number 2.2.0"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/a008fe4e58bdfc5427647315340fafbac5dc231c", "message": "Merge pull request #123 from twitter/add-coveralls\n\nAdd coveralls code coverage support"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/5043d570710b04a6cd4f0a6fd576bd5f94e3b57a", "message": "Merge pull request #121 from twitter/powertrack-support\n\nAdd support for Gnip's Powertrack"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/3ec90185be5bc5785c6931139e243e0660c59869", "message": "Merge pull request #118 from hootsuitemike/sitestream_message_filtering\n\nFix user and message extraction from Sitestream message envelopes"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14209308", "body": "added some feedback.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14209308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14212095", "body": "lgtm\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14212095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14252974", "body": "Hold off on this, some cruft snuck in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14252974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14253308", "body": "Ok, merged master and reverted the failed pom attempts at this fix. Please take a look now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14253308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14264666", "body": "Most likely you need to recompile after that change. I'll update the docs to make this more obvious.\n\nTry running:\nmvn compile && mvn exec:java -pl hbc-example\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14264666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14265102", "body": "and did you successfully connect to the api?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14265102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14266398", "body": "So, what kind of app do you have? hbc wasn't designed to be used as a command line tool, though you can probably make it work like that. It uses slf4j as a logging facade and you can configure that as you see fit.\n\nIf you are using the example code for this, I definitely do not recommend that. Instead rework the example code into something that writes the output where you need it, perhaps you don't even need to write to stdout at all and instead your app can just consume the messages internally.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14266398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14266540", "body": "Think of hbc as a library that you can use to build your streaming application. The is no \"app\" in hbc, perhaps the closest we get is the example code, but there is nothing in hbc that should prevent you from killing your application via control-c or a kill signal.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14266540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14300464", "body": "Try using java 7 to compile. We compile to a 1.6 compatible so you'll be fine running the code with java 6. \n\nWe don't know what the issue is, but we've been unable to get this simple looking bit of code to compile with javac from both 1.6 and 1.7. Its quite a mystery\u2026\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14300464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14300649", "body": "I'd love it we could add some unit tests, but we don't currently have tests with in-process http servers that would let us test this. Might be something to think about in the future.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14300649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14300750", "body": "@graysky thanks for the bug report. we don't have any internal clients of sitestreams, so this hasn't gotten as much testing as the rest of the code. i merged in the fix from @xsl so hopefully this is fixed for you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14300750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/hbc/comments/3261182", "body": "Yes, hbc-twitter4j depends on twitter4j version 2.x which is no longer being developed. At some point, we will remove this module from hbc, but not yet. If you want to use twitter4j with hbc, I recommend using the hbc-twitter4j-v3 module.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/comments/3261182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3085347", "body": "looks like you are using tabs instead of spaces? please indent just 2 spaces.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3085347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3085351", "body": "s/tab/2 spaces/g\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3085351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3085378", "body": "s/tabs/2 spaces/g\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3085378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3179109", "body": "a test would be good here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3179109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3179116", "body": "a test for null handling would be good here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3179116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181418", "body": "final\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181453", "body": "add short javadoc on why this class exists.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181466", "body": "just use a raw string here no need for String.format\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181490", "body": "no need for the intermediate String object. \nuse sb.append(buffer, offset, curIndex - offset)\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181569", "body": "rm intermediate String obj\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181619", "body": "does this need to take an InputStreamReader? why not just a Reader?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181653", "body": "readFully surprised me here as I thought it would exhaust the input. but this is fine.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181662", "body": "not proper json, but whatever.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181691", "body": "what happens to the \\n after the \\r? wheres it go?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181718", "body": "be nice to add a test for input with multiple lines.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3211840", "body": "rm extra colon at the end.\n\nalso, i'd just comment that you can add this to your project's maven pom.xml\n\nalso worth noting that artifacts are published to maven central.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3211840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3211843", "body": "add a comment like <!-- or whatever is latest -->\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3211843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3397831", "body": "i'd prefer the dead code was removed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3397831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3397842", "body": "final\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3397842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3415439", "body": "i think both these should be `static final`\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3415439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3415449", "body": "add some Preconditions not null\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3415449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "caniszczyk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/16b2db730c292eca59a8f761cd6231cea0e1fe1b", "message": "Use the new Travis CI container infrastructure\n\nSigned-off-by: Chris Aniszczyk <zx@twitter.com>"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/0ab9fb6cc8bae81a1b0a7880e8a16c08d381760f", "message": "Add coveralls code coverage support\n\nSigned-off-by: Chris Aniszczyk <zx@twitter.com>"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/hbc/issues/comments/13846856", "body": "What do you think @xsl or @kevinoliver ?\n\nI think this is my last item before we open this up :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/13846856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/13847792", "body": "Ok, forced push a change with indent as 2 spaces instead of tabs :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/13847792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14193907", "body": "Indeed, this breaks 1.6\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14193907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14250954", "body": "How do you feel about this @xsl and @kevinoliver ?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14250954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251960", "body": "Thanks @xsl, push additional changes to this branch.\n\nI would also tag things v1.3.0 once this change is done. After that, let's open it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14253157", "body": "Alright, pushed my .travis.yml change to run on openjdk7\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14253157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092405", "body": "Hrmm... did you maybe misspell something? It worked for me when I did it via editing the POM or via CLI args\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092424", "body": "It probably would be nice if we had some level of exception handling if any of the tokens are bad... right now you kind of get nothing in response...\n\nIf you run mvn with \"-X\" do you actually see the correct tokens being passed in? Or is a \"TODO\" being passed in for one of the args instead of the tokens?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092504", "body": "Any thoughts on exception handling?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092669", "body": "Thanks, I would also add a patch to update the README with an \"Example\" section that essentially has what I put in this original commit message (basically how to quickly get started with the example code).\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gengel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/80a4c4c42fe500b2518847bd20cec9d9110865d6", "message": "Update README.md"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/bbfb0af61916a0bc40deb27fd601784b6cd47f3b", "message": "client.shutdown should be client.close in README"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pheuter": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/d55e50d9930fa1dfb40da99510d29387130e0d79", "message": "Update Twitter4JClient interface to be public\n\nSee #135 for context"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "noonhub": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/87a34746d60c20f6c5f4ab362f1cb4856a74d9a8", "message": "update README to reflect latest maven version number 2.2.0"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/e2164d5fff40bbb679d7fc390f060f3b3d84a75a", "message": "formatting fixes"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/621cc668e992da2a6784b45eea85e165fbc2bfb1", "message": "formatting fixes"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/9b32ab07bf4c71efbb83233b6f34b9b08ea7a269", "message": "Fix example and some renames"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/f0c6b94745c58df46df504b50fdb874e7e8acac6", "message": "misc fixes"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/ceee68e528e5ca920c552db84dd57a9b7b453c93", "message": "StandardCharsets not in 1.6"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/f0fcbe82d87698614de7f1bc4c2f3297ba787375", "message": "add support for all enterprise products"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/4a0346e6a08923ae3cb63b4a4ce45539473f75a8", "message": "Merge pull request #120 from nicky-isaacs/master\n\nSupport replay powertrack stream"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/ae2b49e9bc2af012c942b155eb51719ef8bf382e", "message": "copyright header"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paradigmsort": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/70d6ced7f8e0b6d6848790d7f62cf60a4a1f11e6", "message": "next-snapshot"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/2b24ebc15b26a3af5533c185638ed13d3461cd66", "message": "stabilize"}, {"url": "https://api.github.com/repos/twitter/hbc/commits/e1c8828f7978403095c873e173d5519f87528e25", "message": "changelog for 2.2.0\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nicky-isaacs": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/hbc/commits/cfc3d20dd463bcbce602aa2e9092dc2a76237f02", "message": "AbstractEnterpriseStreamingEndpoint with Realtime and Replay concrete implementations. Add test for multi-product support on endpoints. Added new test class for LineStringProcessor."}, {"url": "https://api.github.com/repos/twitter/hbc/commits/04547a44feb054bf43d2133a422487d34cdf425c", "message": "add licence header"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jpeet": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/175", "title": "Integrate Gnip 2.0 streaming", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paulrizzo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/174", "title": "Enterprise volume and compliance streams for the GNIP v2.0 API", "body": "This adds supports for the v2 GNIP volume and compliance streams. I also added in the new host URLs for convenience. \n\nIt may be worth considering deprecating the old Twitter endpoints so we can clean up this project a bit. I'd propose releasing a final version of 2.x.x, bumping master to 3.x.x and removing all the legacy Twitter code. This will allow us to clean up the interfaces/implementations for the GNIP API's.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rj93": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/169", "title": "Fixed BasicAuth signRequest", "body": "When creating a Enterprise stream it would fail to authenticate using BasicAuth due to the `signRequest` being empty\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arankin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/166", "title": "Expose Client's 'name' to Event", "body": "This is very helpful for keeping a pulse on specific clients, or reconciling overall system health by monitoring each individual connection.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xsl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14211387", "body": "comment\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14211387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251595", "body": "we should update the docs too\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251602", "body": "and the examples\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251610", "body": "i'll work on those \n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14251610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14263022", "body": "try doing a \"mvn compile\" (or mvn install) first, and then make that exec call\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14263022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14277149", "body": "Ah yes, we need to use a PoolingClientConnectionManager in our HttpClient for this to work. I have a pull request out for this if you're interested:\n\nhttps://github.com/twitter/hbc/pull/14\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14277149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14314523", "body": "Made the changes\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14314523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14337122", "body": "can you paste the error/output?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14337122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/hbc/comments/2707756", "body": "java6 hates this:\n\n[ERROR] /Users/steven/workspace/opensource/hbc/hbc-twitter4j/src/main/java/com/twitter/hbc/twitter4j/parser/JSONObjectParser.java:[29,38] name clash: compareTo(java.lang.Object) in  and compareTo(T) in java.lang.Comparable<twitter4j.StatusDeletionNotice> have the same erasure, yet neither overrides the other\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/comments/2707756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/comments/2708923", "body": "added a test for idle probes\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/comments/2708923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3090503", "body": "For some reason when i tested this via command line, it didn't like the -Daccess.token.secret=\"secret\" argument (the value would still be TODO). Any idea why? It works if i just replace the TODO in the pom\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3090503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092487", "body": "silly me, i made a typo\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092508", "body": "will add a patch for that\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3092508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181801", "body": "The \\n isn't in the substring we grab: the actual length with the \\n is curIndex - offset + 1, so without the \\n the length is just curIndex - offset\n\nadded a comment that makes it a little clearer i hope\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181883", "body": "got a few of those: \n  testReadMultipleSmallBuffer\n  testReadMultipleHugeBuffer, + readline equivalents\n\nbut apparently the read and readlines one were the same, fixed\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/pulls/comments/3181883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "scumola": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14263441", "body": "Ahh, that worked great!  Is there a way to compile it all to a .jar file so I can move it around from machine to machine?\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14263441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14263801", "body": "Does BasicAuth work?  I commented-out the OAuth line in hbc-example/src/main/java/com/twitter/hbc/example/SampleStreamExample.java and uncommented the BasicAuth line and I'm getting:\n\nDid not receive a message in 5 seconds\nDid not receive a message in 5 seconds\n[hosebird-client-io-thread-0] INFO com.twitter.hbc.httpclient.ClientBase - sampleExampleClient Done processing, preparing to close connection\n[hosebird-client-io-thread-0] INFO com.twitter.hbc.httpclient.ClientBase - sampleExampleClient Establishing a connection\n[hosebird-client-io-thread-0] WARN com.twitter.hbc.httpclient.ClientBase - sampleExampleClient Error connecting w/ status code - 401, reason - Unauthorized\nDid not receive a message in 5 seconds\nDid not receive a message in 5 seconds\nKilled\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14263801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14264688", "body": "I had to recompile after making the changes, I guess.  I am using the BasicAuth (\"username\",\"password); now and I'm getting: \n\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:compile (default-compile) on project hbc-example: Compilation failure: Compilation failure:\n[ERROR] /root/hbc/hbc-example/src/main/java/com/twitter/hbc/example/SampleStreamExample.java:[40,30] error: cannot find symbol\n[ERROR] symbol:   class BasicAuth\n[ERROR] location: class SampleStreamExample\n[ERROR] /root/hbc/hbc-example/src/main/java/com/twitter/hbc/example/SampleStreamExample.java:[55,11] error: incompatible types\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14264688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14264789", "body": "Added: import com.twitter.hbc.httpclient.auth.BasicAuth;\nNow it compiles!  Yea!  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14264789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14265950", "body": "Yea, it's working.  I'm getting the stream output now.  I'm trying to turn off all of the extra output though or send that to stderr instead of stdout so I can pipe stdout to my app.  Also, hitting ctrl-c doesn't really stop and disconnect hbc, but those are different errors than this one.  I will close this issue.  Thanks for the help!\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/issues/comments/14265950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lzheng": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/hbc/comments/3157441", "body": "Kevin:\n\nCan you explain the purpose of hbc-twitter4j-v3? It is suppose to replace hbc-twitter4j?\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/hbc/comments/3157441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}