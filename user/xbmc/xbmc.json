{"_default": {"1": {"peak3d": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/19b82f92235b1fb469d77b0b2cd0723edaf7cb7d", "message": "Merge pull request #13387 from peak3d/effective\n\n[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d19ef91b59ad064b3677e4bc60ba0866522c377b", "message": "[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0ca1bd7d00174131202dd2a8be1c56899918972a", "message": "[depends] let caller control target build options and ffmpeg options"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "afedchin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/2ee04b62dae1dc139497255e7ac7bac6874173c3", "message": "Merge pull request #13386 from CrystalP/fix-multiplegpus\n\n[Windows] fix adapters enumeration for multiple GPU"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/be4ddb24bfb8638dbc2bb1bc7d5480bd905c2d00", "message": "Merge pull request #13375 from afedchin/win10-fixes-store\n\n[win10] fixes store failures."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/79b7bdfd249a1d81be3fab4b48f868c45bff8082", "message": "[xbmc] Save de-init order of services if manager is destructed not in designed manner (on closing application forcibly)."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f0dbb026005c45f08286b239c945b1d5f367cd08", "message": "[win10] this is a try to resolve forcibly closing app by inactivity reason.\n\nWindows OS may decide to close an app by inactivity reason if the main thread does not pumping messages for a long time."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13388", "title": "[win10] make the uwp app working in background and handles media butt\u2026", "body": "see title", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13258", "title": "[xbmc] refactor instantiation of storage provider and power manager syscalls", "body": "this follows tendantion for removing ifdefs and implementing design patterns\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ksooo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c8e69045fe7d3e3dd72f011d535c256bfbe29998", "message": "Merge pull request #13384 from ksooo/pvr-guide-channel-group-selector-refactor\n\n[PVR] Guide window: put channel group selector implementation into own class"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c778e5b7f553e255db0c53ad72c93b57313f9cfe", "message": "[PVR] Guide window: put channel group selector implementation into own class."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a462148dd3f9a01d799db30a6ed9bb89838af80a", "message": "Merge pull request #13379 from ksooo/pvr-fix-osd-close\n\n[PVR] Fix: Do not auto close OSD if it was opened manually by the user."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a1e83b88d42ea15f4ef764d84f18142ebe6b7484", "message": "Merge pull request #13382 from ksooo/pvr-guide-channel-groups-selector-back-to-square-one\n\n[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9c13af596aa8de10097e87bcf170e81ecfcbede7", "message": "[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a42a8fa4a403a0a89252a0f73632964616c08e5c", "message": "Merge pull request #13380 from ksooo/pvr-ksooo-never-ever-will-become-a-good-skinner\n\nAdd missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/dea106e71df88138e717f6a784bf4d7a4659487d", "message": "Add missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2e2c752c0f0b5a476bf2163698172fd3b56426b3", "message": "[PVR] Fix: Do not auto close OSD if it was openened manually by the user using ACTION_SHOW_INFO."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13389", "title": "[video] Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (on\u2026", "body": "Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (one more 75 missed)\r\n\r\n![screenshot000](https://user-images.githubusercontent.com/3226626/35103954-b9a131e4-fc67-11e7-8790-d98c4aa5cd25.png)\r\n\r\nI recently stumbled over wrong \"Resume from xx:xx:xx\" time values in the context menus of in-progress videos / pvr recordings and found another forgotten \"75\" after #13288 \r\n\r\nI have runtime-tested the change on macOS, latest kodi master.\r\n\r\n@Voyager1 good to go?", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FernetMenta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/69a6725a4269a69744feb8465540b07e8510a375", "message": "Merge pull request #13383 from FernetMenta/paplayer\n\npaplayer: fix playcount for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/62ff2eb0a6da0bf25c9ea5a0e3ba531869b36b75", "message": "paplayer: fix playcount for cue sheets"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MartijnKaijser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/e4074d84d1809f7959e19df12ac3d23950f39a49", "message": "Merge pull request #13377 from kszaq/aml_nativewindow\n\nWinSystemAmlogic: don't strictly depend on fbdev_window"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c2e8a2ba831df7516539df95fc410f706f62df75", "message": "Merge pull request #13381 from lrusak/android-network\n\n[cmake] android: add HAS_LINUX_NETWORK to system defines"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/97ec14b71c79ee8903f73a688980427d044562a1", "message": "Merge pull request #13378 from koying/fixdroidarm\n\nFIX: [droid;amc] arm issue under libc++"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveTBlake": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f71ba23c0d7adb8a1c9e43fdd5a221b13df61cb1", "message": "Merge pull request #13358 from DaveTBlake/WinMilkdropFix\n\n[Fix]Visualisation none as default for all platforms"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13352", "title": "Music Artwork Consistently Availlable To GUI", "body": "Continuing the \"liberation\" of music library art by making the extended artwork consistently availlable to skins.\r\n\r\nAs long wanted #13101 added parameters to JSON API to get/set _any_ type of artwork for artists, albums and songs, and brought it inline with video library functionality.  However the range of artwork presented by Kodi to the skins and API remained very inconsistent e.g. some places getting art for a song would also get artist thumb too, but not other types of artist art, and only album thumb when the song had none etc. The way the art was queried was also inefficient. \r\n\r\nThe main change has been to `CMusicThumbloader::FillLibraryArt` to get _all_ types of art, using one efficient db query per music item. So for example getting song art also gets all related artist and album art. This is then used to make all relevent art available to skins in all places.\r\n\r\nAlso taken the opportunity to make art for **multiple artists** available where the song has  guest/featured artists or an album is a collaboration e.g. composer, conductor, orchestra. Done in a backwards compatible way, numbering subsequent artists \"artist1\", \"artist2\" etc. . Hence using `Listitem.Art(...)` for a song item the possible type parameters include:\r\n\"thumb\", \"album.thumb\",... \"artist.thumb\", \"artist.fanart\", \"artist.logo\",... \"artist1.thumb\",  \"artist1.fanart\",... \"albumartist.thumb\", \"albumartist.fanart\",... \"albumartist1.thumb\" etc.\r\n\r\nFor consistency `Listitem.Property(artistthumbs)` and `Listitem.Property(artistthumb)` have been deprecated. They were only availlable on the music info dialogs, I believe little used by skins,  and  superceded by `Listitem.Art(artist.thumb)`\r\n\r\nA small fix too for the album/artist info dialog:  `Container.Art()` will return the same art as `Listitem.Art()` - the artist or album art. The control list art for each item is access by `Container(50).Listitem.Art()`\r\n\r\nHence **all** the art for an item is consistently availlable for display on both music library navigation window for every media type, and the music information dialogs. It is up to the skinner if they want to show the secondary artist art, or work inconjunction with an art addon that adds spines, logos or backcovers etc., Kodi  just makes it possible.\r\n\r\nNote: In all places I talk about \"getting art\" what I mean is getting the original location of the art from the music database not the actual art from the texture DB or cache. Fetching more art is just a few more text strings per item (if that type of art exists), not lumping lots of images about. That only happens when a skin requests actually specific images.\r\n\r\n@ronie thanks for the help with some of the skin interface stuff.\r\n@rmrector sorted as promised, I will get a test build up\r\nNot sure who else might know about thumbloader, @notspiff perhaps (it is ancient).\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wsnipex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/8bd867a3f11b51bedc512ec78fe6b77e70ef5c68", "message": "Merge pull request #13320 from peak3d/amlbuild\n\nBuild changes for ARM"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/85167dcc23f6897b1276f482a168e34b73a78122", "message": "Merge pull request #13376 from pkerling/wayland-xdg_shell-waylandpp\n\n[wayland] Use xdg-shell.xml from waylandpp"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lrusak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c53bd94e2b3fbfd58016e854bd24d6498e194bd7", "message": "[cmake] android: add HAS_LINUX_NETWORK to system defines"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13274", "title": "Mode whitelist", "body": "@FernetMenta wanted me to PR this to get some more visibility. I'll add what I had already posted to the internal boards.\r\n\r\n---\r\n\r\nJust wanted to start a discussion that won't get lost in slack.\r\n\r\nFor those that don't know the display and refresh rate switching logic in kodi is rather complex yet it doesn't quite fit everyone's needs. @FernetMenta proposed that we create a set of `whitelisted` resolutions that one can select and create a logic for kodi to switch to only these `whitelisted` modes.\r\n\r\nSome reasons to do this is as follows:\r\n 1. Some people want to switch to a lower resolution when watching 720P content however some people do not want this because when watching live TV the refresh rate switching would happen too often.\r\n 2. We can disable modes that have too high of refresh rate ie. 120HZ.\r\n 3. We can use the exact refresh rate (for low bandwidth systems playing 30hz content at 60hz on a 4k display is difficult)\r\n\r\nThe problem with this come down to adding yet another setting. More settings generally decrease the user experience. So how can we make things simpler not more complex?\r\n 1. Pre define `whitelisted` modes. (add all refresh rates from the desktop resolution automatically)\r\n 2. Revert to the old behaviour if no `whitelisted` modes are defined.\r\n 3. Hide option at the same settings level as the refresh rate switching option\r\n\r\nCurrently the logic is this:\r\n 1. for all the methods below remember that it will only select from the whitelist!\r\n 2. the order goes from fuzziest match towards exact match\r\n 3. allow resolutions that are larger than required but have double the refresh rate\r\n 4. allow resolutions that are larger than required but have the correct refresh rate\r\n 5. allow resolutions that are exact and have double the refresh rate\r\n 6. allow resolutions that are exact and have the correct refresh rate\r\n\r\nSample GUI\r\n![Imgur](https://i.imgur.com/1LOp0RO.png)\r\n\r\nSample outputs below.\r\n```\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 50.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 59.940201 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 59.94Hz (19)\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 24.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 23.976080 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1280 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656  NOTICE: Display resolution ADJUST : DVI-1: 1920x1080 @ 59.94Hz (19) (weight: 0.000)\r\n```\r\n---\r\n```\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 60.00Hz (17)\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 50.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 59.940201 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 24.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 23.976080 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1280 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched exact whitelisted Resolution DVI-1: 1280x720 @ 60.00Hz (26)\r\n11:00:03.307 T:140082496567680  NOTICE: Display resolution ADJUST : DVI-1: 1280x720 @ 60.00Hz (26) (weight: 0.000)\r\n```\r\n\r\nPlease comment to explain why you :heart: or :skull: this idea and any further logic or comments about usability below", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13257", "title": "Macro cleanup", "body": "most of this was done with sed commands but I took a look at the diff after and had to fixup some stuff but there might be some minor formatting issues.\r\n\r\nI did a build and run test on linux but it seems that this touches a lot of windows stuff.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13176", "title": "[RFC] [Linux] add libinput backend for non window system platforms", "body": "I'm expecting to get a bit of push back here but let me explain.\r\n\r\nPositives:\r\n\r\n1. Better (and simpler) input handling\r\n2. Lower maintenance due to offloading to a support library\r\n3. Future features including keymap selection and other options (natural scrolling, mouse acceleration, etc)\r\n3. Improved hotplugging (no more 10 second delay)\r\n4. Following mainstream standards (wayland input handling, new x11 input handling)\r\n\r\nNegatives:\r\n\r\n1. Adding dependencies on external libraries\r\n2. Possible higher CPU load (unmeasured)\r\n\r\n---\r\n\r\nSo far this PR adds feature parity to the current code. I did not want to extend the feature set in the initial PR as that may add complexity to the testing and code review. This input handling should be the same or better (I've noticed an improvement in touchscreen accuracy).\r\n\r\nThis input handling doesn't support remotes you must use something like eventlircd for that.\r\n\r\nIn the future (outside the scope of this PR) I'd like to add a settings selection for things like keymap selection, input options (input tapping, mouse acceleration, natural scrolling, left handed, etc).\r\n\r\nThis PR now builds for any projects that use CLinuxInputDevices so GBM, RPi, and AML are the candidates. This does not apply to any other platforms.\r\n\r\nI've separated the commits into semi-logical groups for easier review. I plan to squash into one commit if this is merged.\r\n\r\nThis PR has a dependency on libinput and libxkbcommon (for keyboard handling).\r\n\r\nRelevant changes to LE are here, https://github.com/LibreELEC/LibreELEC.tv/compare/master...lrusak:libinput-kodi\r\n\r\nIf this is approved then we probably need to add libinput and it's dependencies to the build depends.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kszaq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/53d9c08eabcc5c1fbded48d47bf2c26e109b04a7", "message": "WinSystemAmlogic: don't strictly depend on fbdev_window\n\nFixes building for systems that do not have fbdev_window, e.g. working with libhybris."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13078", "title": "DVDVideoCodecAmlogic: remove pts-based frame rate tracking", "body": "In most cases frame tracking based on pts provided by amcodec is wrong, causing unnecessary frame rate switch. We can simply rely on frame rate provided by ffmpeg.\r\n\r\n<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\nLibreELEC community builds with Kodi Krypton and Kodi master branch.\r\nThe incorrect behaviour without the patch applied can be reproduced with first samples from Kodi Wiki: http://kodi.wiki/view/Samples#Codecs.2C_Framerates_and_Subtitles\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koying": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/330a57399863141c3e16cb4d2731d759008f8d57", "message": "FIX: [droid;amc] arm issue under libc++"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13307", "title": "[WIP]: websocket does not handle frames > 1024 bytes", "body": "@Montellese @topfs2 There is a bug in our websocket implementation that it assumes that a whole websocket frame will hold in a socket buffer (currently 1024B)\r\n\r\nIf not mistaken, the RFC does not set a max value, so ideally, we should buffer on the websocket side until we get a full frame.\r\nWould one of you have time to properly fix this?\r\n\r\nFor my use case (a batch of 20 media details retrieval request, leading to a request of ~4KB), I just increased the tcp buffer, which is just a quick hack, ofc.\r\n\r\nThanks", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13191", "title": "CHG: Allow to downgrade resolution", "body": "Kodi already allows to \"upgrade\" resolution, eg from 1080p to 2160p.\r\n\r\nThis also allows Kodi to \"downgrade\" the resolution, eg from 1080p to 720p.\r\nReasoning is that the TV will always do a better job at upscaling than we do, so better switch to a resolution closest to the one of the video.\r\n\r\nI'm not sure of the reasoning for the 3D specific handling, tbh, so that might need rework.\r\nMy only personal use case is HTAB/HSBS, whose format is always 1080p.\r\nThe HDMI ref only define a 1080p 3D mode, so we might want to force to 1080p, possibly.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "notspiff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/7249e1b7f06a6a7a335fd6777320b5fe3ad9eaed", "message": "Merge pull request #13364 from ksooo/pvr-guide-channelgroups\n\n[PVR][Estuary] Guide window: Channel groups selector"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13371", "title": "fixed: show the actual set poster/fanart for sets", "body": "only show relevant art types in the Choose art dialog. @olympia", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13234", "title": "Refactor ServiceManager/ServiceBroker", "body": "This is the start of my service container refactor. see first commit for why I believe this approach is an improvement.\r\n\r\nIt's early, feel free to review but some things you can skip\r\n- yes, i'm initing services directly in Application right now. I wil change this in the end, but I want to see how things work out first. Ultimately, I hope to make this a map of types registered in one spot, and then have a separate call to bring services up. Bu to do this we need to change constructors to not do stuff before StartService is called so right now I do not try to factor it nicely into a function.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkerling": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/27a2e3d362b6ba04e5f1a558ad30a519a3d5a8bb", "message": "Revert \"[cmake] [wayland] Require wayland-protocols >= 1.12 for xdg_wm_base\"\n\nThis reverts commit 6b1e800e11ab82b544b4ff1883b789547d5cc01c."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2292165445877e56ba70d3607510662b18f62d6d", "message": "[wayland] Use xdg-shell.xml from waylandpp\n\nUbuntu 17.10 does not have recent enough wayland-protocols for building\nwith xdg-shell stable. To avoid having to package it or adding ifdefs\nto support building with older wayland-protocols, use xdg-shell.xml\nfrom waylandpp."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13333", "title": "Support for vaExportSurfaceHandle", "body": "\r\n## Description\r\nReorganize Vaapi EGL interop so we can also render with vaExportSurfaceHandle\r\n\r\nThis is WIP, but open for discussion.\r\n\r\nTODO:\r\n- [ ] Check whether this still works on intel, especially HEVC10\r\n- [ ] Modify interop check name to deep color instead of hevc (since it doesn't really check anything hevc-related)\r\n- [ ] Find out if this works reliably on AMD due to possibly missing vaSyncSurface support\r\n- [ ] Check vaapi and ffmpeg postprocessing/deinterlacing\r\n\r\n## Motivation and Context\r\nHardware decoding with AMD GPUs is only supported with this new method\r\n\r\n## How Has This Been Tested?\r\nRun-tested with H.264 and HEVC10 on Linux/Wayland/AMD GPU\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xhaggi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13390", "title": "[pm] resume last played media after sleep", "body": "Follow-up of #13138. I just want to push things forward and @Falcosc didn't find time to adjust his PR.\r\n\r\n> Auto resume the media which was used during enter sleep mode and resumes it on wake with forced play (playerstate handling is already implemented as part of resume point but I don't know why the player state is allways empty, this issue does force play on my PR)\r\nBut this is only the first step, a very basic solution which could be improved step by step.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ronie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13385", "title": "xbmcgui - add option to define listitem as folder", "body": "allow python scripts to define a listitem as a folder (python plugins can already do this).\r\n\r\nreasoning:\r\nin the globalsearch addon i create a list of tv shows and set content to tv shows.\r\nbut due to this code https://github.com/xbmc/xbmc/blob/c8e69045fe7d3e3dd72f011d535c256bfbe29998/xbmc/video/windows/GUIWindowVideoBase.cpp#L322-L330\r\nkodi will try to fetch episode info for those items from the db, unless you define the listitem as a folder.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13306", "title": "addonsettings - don't lowercase condition value", "body": "the addon settings migration (PR #12125) broke a few things, one of them being enable/visible conditions for addon setting.\r\n\r\nthis fixes the bug reported here: https://forum.kodi.tv/showthread.php?tid=321370", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "garbear": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13374", "title": "Games: Keyboard remapping support", "body": "This adds support for remapping keyboard keys in games. Similar to joysticks, keyboards are given a controller profile and mapped to libretro keys via the add-on's buttonmap.xml.\r\n\r\nFor reviewability, this PR has been split into 4 main commits that either add or remove something:\r\n\r\n* Keyboards added to Peripheral API (8e6a9ba6bd04b4f0cdfddbd364f925cdea0c5501)\r\n* Emulated joysticks removed (12e47eb9f6401d864d23ba65821145d5d45665cb)\r\n* Keyboards added to Controller Dialog (d2206e7a3f950a3e01f696ffbcf9ba61dba872d6)\r\n* Keyboards added to Game API (313bd8b3168f8e25aab1de04881189a90999caec)\r\n\r\nButtonmaps have been created for 13 emulator keyboards totaling 1,485 keys.\r\n\r\nNOTE:\r\n\r\nDue to a conflict, emulated joysticks have been dropped. This breaks devices that use keyboard drivers, like the X-Arcade Tankstick.\r\n\r\n## Motivation and Context\r\nFirst piece of the new Player Manager. Once keyboards have been abstracted on this level, they can easily emulate and by emulated by other controller types.\r\n\r\n## Screenshots (if appropriate):\r\n\r\nKeyboards have been added to the Controller Dialog. The first button in the features list is a \"Select key\" button:\r\n\r\n![screen shot 2018-01-15 at 4 58 36 pm 2](https://user-images.githubusercontent.com/531482/34967163-876b184c-fa15-11e7-96c2-035d3fe47756.png)\r\n\r\nPressing it will prompt the user to press a key:\r\n\r\n![screen shot 2018-01-15 at 4 58 52 pm 2](https://user-images.githubusercontent.com/531482/34967182-aba10276-fa15-11e7-976e-fd3fbdad518a.png)\r\n\r\nWhen the user presses the key, they'll be prompted to map it to a button or another key:\r\n\r\n![screen shot 2018-01-15 at 4 59 06 pm 2](https://user-images.githubusercontent.com/531482/34967196-bdd4d01c-fa15-11e7-8ddb-21d4c8c8303a.png)\r\n\r\n## How Has This Been Tested?\r\nTested with DOSBox on OSX. Most keys work.\r\n\r\nTesting needed for the following add-ons:\r\n\r\n- [ ] game.libretro.dosbox\r\n- [ ] game.libretro.fsuae\r\n- [ ] game.libretro.fuse\r\n- [ ] game.libretro.hatari\r\n- [ ] game.libretro.mame\r\n- [ ] game.libretro.o2em\r\n- [ ] game.libretro.pcem\r\n- [ ] game.libretro.prboom\r\n- [ ] game.libretro.scummvm\r\n- [ ] game.libretro.tyrquake\r\n- [ ] game.libretro.uae\r\n- [ ] game.libretro.uae4arm\r\n- [ ] game.libretro.vice\r\n\r\nTest builds have been launched for all platforms: http://jenkins.kodi.tv/view/Automation/job/BuildMulti-Choice/31/\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Associated PRs\r\n\r\nRequires API changes:\r\n\r\n- [ ] Peripheral API v1.3.6: https://github.com/xbmc/peripheral.joystick/pull/136\r\n- [ ] Game API v1.0.34: https://github.com/kodi-game/game.libretro/pull/29\r\n- [x] libretro API: https://github.com/libretro/RetroArch/pull/6119\r\n\r\nRequires controller profiles:\r\n\r\n- [x] https://github.com/kodi-game/kodi-game-controllers/pull/19\r\n\r\nRequire buttonmaps:\r\n\r\n- [ ] game.libretro.dosbox (https://github.com/kodi-game/game.libretro.dosbox/pull/6)\r\n- [ ] game.libretro.fsuae (https://github.com/kodi-game/game.libretro.fsuae/pull/1)\r\n- [ ] game.libretro.fuse (https://github.com/kodi-game/game.libretro.fuse/pull/5)\r\n- [ ] game.libretro.hatari (https://github.com/kodi-game/game.libretro.hatari/pull/4)\r\n- [ ] game.libretro.mame (https://github.com/kodi-game/game.libretro.mame/pull/3)\r\n- [ ] game.libretro.o2em (https://github.com/kodi-game/game.libretro.o2em/pull/2)\r\n- [ ] game.libretro.pcem (https://github.com/kodi-game/game.libretro.pcem/pull/2)\r\n- [ ] game.libretro.prboom (https://github.com/kodi-game/game.libretro.prboom/pull/4)\r\n- [ ] game.libretro.scummvm (https://github.com/kodi-game/game.libretro.scummvm/pull/14)\r\n- [ ] game.libretro.tyrquake (https://github.com/kodi-game/game.libretro.tyrquake/pull/2)\r\n- [ ] game.libretro.uae (https://github.com/kodi-game/game.libretro.uae/pull/1)\r\n- [ ] game.libretro.uae4arm (https://github.com/kodi-game/game.libretro.uae4arm/pull/1)\r\n- [ ] game.libretro.vice (https://github.com/kodi-game/game.libretro.vice/pull/1)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13151", "title": "Fix two skin-related crashes", "body": "This PR contains two fixes:\r\n\r\n* Fix segfault in guilib when `<itemlayout>` or `<focuslayout>` are missing or incomplete\r\n* Fix segfault on skin reload due to accessing items after their owner has been destroyed\r\n\r\n## How Has This Been Tested?\r\nFixes have been in my branch through most of the game OSD development.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lobermann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13373", "title": "fix segfault on palyback failed", "body": "As discussed in slack with @FernetMenta and @notspiff .\r\n\r\n> A quick explanation on the issue:\r\n> \r\n> In CApplication, on the GUI_MSG_PLAYBACK_STARTED Message \r\n> https://github.com/xbmc/xbmc/blob/master/xbmc/Application.cpp#L3879\r\n> There is the call to  g_infoManager.SetCurrentItem(*m_itemCurrentFile) which then in turn runs the CSetCurrentItemJob.\r\n> \r\n> Now, this job is accessing the member CGUIInfoManager::m_currentFile directly in that thread.\r\n> When in CApplication a GUI_MSG_PLAYBACK_STOPPED is happening (in case the playback fails) this is in turn calling g_infoManager.ResetCurrentItem() which \r\n> is then resetting the m_currentFile that is used by the CSetCurrentItemJob. \r\n> \r\n> So if there are any delays in the CSetCurrentItemJob, due to database access or anything else, we end up in a segfault within CGUIInfoManager::SetCurrentMovie.\r\n> I assume this also applies to CGUIInfoManager::SetCurrentSong and CGUIInfoManager::SetCurrentGame as they do it in more or less the same way.\r\n\r\n\r\nThis was fixed now by inheriting CJobQueue in CGUIInfoManager so there is a dedicated job queue with one worker for this. ResetCurrentItem() was also moved into a job to prevent it from running at the same time with SetCurrentItemJob(). A type was added to the jobs so that we only have one of the jobs in the queue at any time. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Paxxi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13366", "title": "[xbmc][windows] Fix a bunch of warnings for windows x64", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis takes us from ~1260 warnings to ~1030.\r\n\r\nLeft them as a few separate commits for now for easier review, should be squashed before merge.\r\n\r\nthis touches on your stuff @tamland  and @garbear so please have a look.\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13361", "title": "[xbmc] Added clang-format that roughly matches our current style", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis adds a .clang-format that tries to match our current style guidelines. One change is that it does wrap long lines so applying it on a whole file does result in a lot of changes.\r\n\r\nWe've discussed a few times how to go about changing the whole codebase and not come to any consensus so this PR isn't trying to solve that.\r\n\r\nHaving a .clang-format in the repo does make things simpler without large scale reformatting as it can be applied to a single file when it's being touched or using various IDE/extensions it can be applied to parts of a file being edited.\r\n\r\nI've used https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat for Visual Studio with good results.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nTo make it easy to review the style I did apply it to CApplication.\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13360", "title": "[xbmc] Link against curl instead of using dlopen.", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis replaces our dlopen usage of curl with regular linking\r\n\r\nRuntime tested on windows x64\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unbroken75": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13327", "title": "Defaults to release build", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nAdded --disable-debug to .configure in README.raspberrypi\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nStandard user does not need to build for debug. \r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Razzeee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13323", "title": "Add history table", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nThis is heavily work in progress and while it works at the moment it probably has some cases that re broken.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nThis replaces the old files `playCount` and `lastPlayed` columns with a `history` table. It has `dateWatched` and a reference to a file. For every time watched, we add a new row. \r\nSo this is much richer than the old fields, as we can have multiple lastPlayed/dateWatched entries for the same file. We're basically emulating the old fields while adding the new table to use in the future.\r\n\r\nThis first implementation however will focus on only having this internal and handling it correctly in core. We will need to expose it to the outer world in a later PR.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nVery little. It seems to work fine on migration and leanback. And it also seems to safe fine on `Set as watched`.\r\nIt also sets playCount to 0 instead of `null` at the moment, not sure if this causes regressions.\r\n\r\n- MySQL is completely untested as of now (might be broken due to me using subqueries, can't remember if those were bad for MySQL)\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n\r\n  \r\n  ", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "InuSasha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13318", "title": "sql-client: add support for mariadb-client", "body": "make it possible to link against mariadb-client instead of mysql\r\n\r\n## Description\r\nSearch explicit for libmariadb and mysql-header under include/mariadb/.\r\nAdditional added a test, to protect against using of mysql & mariadb at the same time \r\n\r\n## Motivation and Context\r\nmost distributions switch to mariadb, this follows up.\r\n\r\n## How Has This Been Tested?\r\ntested on top of LibreELEC master with MariaDB 10.2 and MySQL 5.7 as sql-server.\r\ntest-cases: \r\n - database migration from Video108 -> Video109\r\n - database migration from Music66 -> Music69\r\n - list movies\r\n - mark movie as seen\r\n - builds against mysql-client and mariadb-client and against both (as negative test)\r\n\r\nreallife test on top of KRYTON (LE 8.2.2), is started.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [X] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n\r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samnazarko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13290", "title": "CWinSystemRpi: ensure that we register the ALSA sink as well as PiSink is needed for external DACs", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n\r\nIt seems that after c0064a99d4cb13fbb77f6f411cba48a12ef50669, the AESink is tied to the windowing system. The ALSA sink does not seem to be registered elsewhere on RBP, which means that external DACs (USB and I2S) are not enumerated. \r\n\r\nThe patch was necessary to re-register ALSA sinks on RBP.\r\n\r\n## How Has This Been Tested?\r\n\r\nTested in OSMC v18 nightlies for Raspberry Pi with positive reports: https://discourse.osmc.tv/t/testing-kodi-18-leia-builds-for-raspberry-pi/20631/632\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ace20022": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13144", "title": "[videoplayer] DVDInputStream: Add an interface for stream selection.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13109", "title": "Do not scan archived volumes for external subs or audio.", "body": "This pr superseeds #9929", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tirithen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13139", "title": "Add mapping codes for the wiimote", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nAdd mappings for wiimote keys.\r\n\r\n## Motivation and Context\r\nIn multiple forums people are having problems with the wiimote in kodi, namely that only the d-poad works but it's not possible to use A/B/-/Home/+/1/2 buttons. The logs when pushing these buttons gives the following:\r\n\r\n```\r\n22:03:45.696 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:45.696 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(304)\r\n22:03:47.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:47.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(305)\r\n22:03:49.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:49.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(412)\r\n22:03:50.230 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:50.230 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(316)\r\n22:03:51.080 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:51.080 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(407)\r\n22:03:52.513 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:52.513 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(257)\r\n22:03:53.563 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:53.564 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(258)\r\n\r\n``` \r\nThe conclusion from several of the forum threads is that those codes was not mapped in LinuxInputDevices.cpp, hence this change.\r\n\r\nFirst time contributing here, so tell me if something more is needed.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkortstiege": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13088", "title": "[infoscanner] ensure we're only checking for .nomedia in folders (fixes #17651)", "body": "Ensure we're not doing pointless .nomedia checks on files. Regression was introduced with https://github.com/xbmc/xbmc/pull/12772\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nhttps://trac.kodi.tv/ticket/17651\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nBriefly tested on Linux.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835", "body": "Fixed in fadf1cd0da739e9cd14c5b70d9dc90d8d6dd8403\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732", "body": "congrats - the first xbmc repo pull processed :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000", "body": "friendly tip. you want to use git pull --rebase when you fetch upstream.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048", "body": "even if osx requires them for something else, this is correct. we need to have these under control. so test on osx, if it requires them for some other reason, put it under osx only...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790", "body": "please rebase your branch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636", "body": "Any particular reason? Can't see any drawbacks to doing this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953", "body": "DISPLAY is only ever unset if a) X server isn't running, or b) user has ssh'ed into a remote machine and attempted to start XBMC without setting DISPLAY first\n\nCurrently in these cases, XBMC segfaults with a fairly unintelligible (to the average user) python backtrace\n\n```\n$ xbmc\n/usr/lib/pymodules/python2.6/gtk-2.0/gtk/__init__.py:57: GtkWarning: could not open display\n  warnings.warn(str(e), _gtk.Warning)\nError: unable to open display \n/usr/share/xbmc/FEH.py:69: Warning: invalid (NULL) pointer instance\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:69: Warning: g_signal_connect_data: assertion `G_TYPE_CHECK_INSTANCE (instance)' failed\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:83: GtkWarning: IA__gtk_settings_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:83: Warning: g_object_get: assertion `G_IS_OBJECT (object)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:88: GtkWarning: Screen for GtkWindow not set; you must always set\na screen for a GtkWindow before using the window\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_pango_context_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_font_description: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_base_dir: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_language: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_new: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_text: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_alignment: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_ellipsize: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_single_paragraph_mode: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_width: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_get_extents: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_default_colormap: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_colormap_get_visual: assertion `GDK_IS_COLORMAP (colormap)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_root_window: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_window_new: assertion `GDK_IS_WINDOW (parent)' failed\n  window.show_all ()\nSegmentation fault\n```\n\nIf you prefer, we could just immediately return the error message \"xbmc: no DISPLAY variable set\" from xbmc.sh (and not try to set it to :0), hence avoiding the backtrace. That would at least make it easier for the user to find their mistake.\n\nHowever, it likely fixes the issue in 50% of the cases if we do also set it to :0 and attempt to continue, and it doesn't do any harm?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hudokkow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758", "body": "Thanks.\n\n;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986", "body": "Thanks for the tips, guys. I'm not used to git, so it's kinda 'learn as you go' for me.\n\nIt seems you're not so grumpy after all, spiff. :))\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "theuni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348", "body": "What spiff said. Also, if you're going to submit a request for a few commits, may as well do them all at once.\n\nThanks for the contributions, and for our first pull requests!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823", "body": "I agree with Bob, patching FEH is the way to go.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593", "body": "Please do not push needless merge commits into git. You should always be using 'git pull --rebase' for mainline.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115", "body": "For future reference, it would have been nice to have these commits as a real merge, where the merge commit references the ticket number.\n\nIf git merge detects that it can be merged as a fast-forward, it will. So need to use 'git merge --no-ff'.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201", "body": "Sure, though having a real merge commit allows for much easier bisection. It also makes it clear that the series of commits should be seen as a group.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "davilla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072", "body": "did you check that none of the dyloaded libs need libssl or libcrypto ? \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sraue": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181", "body": "i have build xbmc yesterday with this and without an installed openssl. it works here (except ssl support in my external python for sure). an grep over the xbmc sources shows me thats needed only for python.\n\nfor sure it would be nice if anyone can test this patch with windows/macos etc too...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "CrystalP": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266", "body": "Don't worry about Windows, it doesn't use configure and always has an internal Python.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538", "body": "Pulled & merged as 5e6d3fd, see details in ticket.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284", "body": "All that commit did was move files that were dumped at the root of the xbmc project, due to a weird merge. The rest is untouched, and vastly different than before the reshuffle.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040", "body": "oops, the second file wasn't supposed to be committed. Sure that can go in MathUtils but there will still be #ifdefery. The function is already defined for MSVC and that one conflicts.\n\nExcept for the inline keyword I fail to see the difference between the current code and what you wrote.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681", "body": "Why the effort? System libraries already have abs() for most interesting types. This one is the exception.\nSeems to me the function belongs to some linux-specific header. MSVC already has the function.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Voyager1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043", "body": "rebase done, thanks for the tip.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158", "body": "corrected cosmetics\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213", "body": "closing and replacing with another pull request from separate branch.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918", "body": "who's currently responsible for the dvdplayer code? (haven't seen elupus contributing lately).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bobo1on1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085", "body": "Sorry, I'd rather not do this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823", "body": "If DISPLAY is not set, something is wrong, the user should fix that instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906", "body": "DISPLAY is something the system should set, I'm fine with a big fat warning if it's not, but we shouldn't set it ourselves, it's not our job.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009", "body": "Why not make abs a template function instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "topfs2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068", "body": "I don't see the reason for this? You can just call stopClient() followed by startClient if you need to reconnect. It makes more sense also to enforce stop before start IMO\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076", "body": "I agree with Bob also, setting it randomly is a hack at best\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jmarshallnz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837", "body": "A couple of points:\n1.  Nice :)\n2.  I don't like using AppendFormat/Format when FormatSQL is safer for db actions.  eg your where and order clauses would have to be PrepareSQL'd before sending them to this method.  This either needs documenting or dropped in favour of PrepareSQL.\n3.  bReturn is not required in DeleteValues or ExecuteQuery, QueueInsertQuery, CommitInsertQueries - just return directly.\n4.  iReturn is not required in ResultQuery\n5.  I prefer m_multiWrite, but don't really care ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977", "body": "Any particular reason why you don't like return statements in the middle of methods (or specifically try/catch blocks?) or just a coding style thing?  I don't really mind either way - just interested :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437", "body": "<= might be safer?  It's correct as-is though (I'm not 100 what SplitString does on failure)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140", "body": "Right, well I can definitely see the point of having the ticket number in the commit msg, though I could have popped that into the last one and it still would be fine, right?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841", "body": "I suggest we remove any direct usage of OutputDebugString outside of CLog as much as is feasible - no reason to have it if CLog::Log() does the same thing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907", "body": "Agreed - almost all of them can be removed.  CGUITextureManager::Dump and CueDocument ones can be switched to CLog.  All others other than sqlite collision one can be dropped as far as I'm concerned (not sure what mp_msg is doing...)  Not sure what to do with the sqlite collision one - perhaps dump it to the log if _DEBUG is enabled?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "opdenkamp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290", "body": "I don't like return statements in the middle of a methods. that's what the bReturn/iReturn vars are for. bit overkill in the QueueInsertQuery() to do it like that, so I'll change it to return directly, but for the other ones, I don't like the return to be within the try-catch block.\n\nI'll have a look at the rest. thanks for the review.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101", "body": "coding style, and not just for try-catch but for all methods. code is usually easier to read if you don't return in the middle of methods. 1 entry point, 1 exit point. doesn't really matter for these little methods, but in bigger ones it does.\n\nit's been hammered into my head by a teacher at the uni :-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368", "body": "... yes, I won the first gitwtf award :(\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "halorgium": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003", "body": "startClient() requires all the arguments to be passed in. \nI agree that it should guard against starting the client twice. \nThis makes me think that restarting overcomplicates the client. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "firnsy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189", "body": "Saviq, nice work.\n\nI've pulled into my tree for further and will push into mainline once completed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Saviq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938", "body": "Here's a bug I reported about the issue - http://trac.xbmc.org/ticket/11120 - please comment / close when applicable.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450", "body": "This commit breaks ./configure on Linux (at least openSUSE Factory and Gentoo). It only happens in a clean environment, though:\n\n```\n$ git-clean -dxff # this removes all the files that don't belong to the git repo, ignored or not\n$ ./bootstrap\n$ ./configure\n[...]\nUsage: dvdnav-config [OPTIONS] [LIBRARIES]\nOptions:\n    [--prefix[=DIR]]\n    [--exec-prefix[=DIR]]\n    [--version]\n        [--libs]\n[--cflags]\n/home/michal/dev/xbmc/xbmc/lib/libdvd/libdvdnav/../libdvdread/obj/dvdread-config returned an error. Can't proceed\nconfigure: error: Submodule lib/libdvd/libdvdnav failed to configure\n```\n\nThe $MAKE isn't set and `dvdread-config` from $PATH is executed as a consequence. Exporting $MAKE makes the problem go away.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630", "body": "Just make it a\n    MAKE=${MAKE:-make}\notherwise this commit won't have any effect.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "taxigps": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640", "body": "Ah, forget to set user.name in my new installed git\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "queeup": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527", "body": "To bad for Turkish users. It supposed to scan for folder names but I made a mistake and translate scan for file names :( But now corrected.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530", "body": "Are you planning to release new Dharma for bugs fix or something? I correct my big mistake on string.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wsoltys": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313", "body": "worked fine for me on a clean build but this one is nicer ofc. :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879", "body": "ah didn't check. They don't do it anymore?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986", "body": "Haha, ok. So time for another wtf git award :)\n<git rant on>\nCan't remember similar things with svn. But now we might have enough devs for doing things twice :P\n<git rant off>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821", "body": "Anssi is right. please use the file provided in include-xbmc-win32.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "chadoe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855", "body": "hm they had a home, they were matching the reshuffle filesystem layout...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001", "body": "just would like to find files in the project in the same place as on disk now that files have been moved around on disk thats all.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Fneufneu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540", "body": "oops sorry,\ni think we can define MAKE=make in top of case $host part\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sitzm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529", "body": "with your changes, linux does not compile anymore with the follwing error:\nIn file included from karaokelyrics.cpp:26:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:137: error: \u2018int64_t\u2019 does not name a type\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h: In function \u2018void MathUtils::hack()\u2019:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:149: error: \u2018abs\u2019 is not a member of \u2018MathUtils\u2019\nmake[2]: **\\* [karaokelyrics.o] Error 1\n\nThis can be fixed with including stdint.h in MathUtils.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "elupus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119", "body": "Could you tell me why? We shouldn't need it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "anssih": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151", "body": "It is needed for LATM AAC. It can be removed once we update ffmpeg, but I'm waiting for some Windows developer to test it. (https://github.com/xbmc/xbmc/pull/18)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716", "body": "Hmm, \"lib\\ffmpeg\\include\\libavutil\\avconfig.h\" was a static file, while \"lib\\ffmpeg\\libavutil\\avconfig.h\" is generated by ffmpeg configure. I was told that ffmpeg configure might not have been run when the XBMC project is build in VS, which prevented the use of \"lib\\ffmpeg\\libavutil\\avconfig.h\".\n\nIf that is correct, you'll need to use \"lib\\ffmpeg\\include-xbmc-win32\\libavutil\\avconfig.h\" instead. If not, I'll just remove the static version, then.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "blinkseb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720", "body": "I was not aware of that, sorry! o\nI' ve built ffmpeg right before building xbmc that's why i've found the file here!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "vkosh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644", "body": "I actually wonder why do recordings have string IDs? Maybe for some backend-specific historical reasons. But 1024 is the length of PVR_RECORDING.strRecordingId.\nI propose to use VARCHAR(255) with value length check during serialization to prevent overflow, or maybe just to use TEXT type.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682", "body": "++\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695", "body": "Yes it does work because boost:shared_ptr overloads operator*, and epgTag->foo() - doesn't because CFileItem hasn't constructors for *Ptr types.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697", "body": "++ for storing epg tag pointer.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492", "body": "It doesn't work this way actually because item is of CGUIListItemPtr type, which sould be casted to CFileItem to get epg info.\nThe only alternative to the cast is to create fileItem explicitly and get the tag from it, e.g.:\n<code>CFileItemPtr fileItem(new CFileItem(*item));</code>\nor\n<code>CFileItemPtr fileItem(new CFileItem(item.get()));</code>\nand then\n<code>fileItem->GetEPGInfoTag()->GenreType()</code>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333", "body": "It's just here for readability. The code is similar to one for playing channel by id above (see line 515).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921", "body": "IMO the separate buttons is better in two reasons: usability of shift button and ability of symbols charset extention (e.g. separate charsets for symbols and for shift+symbols).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959", "body": "Added onlyCheckLanguage check (not used though).\nAs for moving main layout loading down the locale specific langinfo.xml check - the main layout must be loaded in any case otherwise keyboard dialog will not work.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975", "body": "Yes. The keyboard dialog don't work without layouts, so at least main one should present. The previous layouts should remain in case of error. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983", "body": "I need std::wstring's to get utf8 character by its index. std::string works with bytes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012", "body": "There are two fixed layouts because they are related to languages: main - for default language (English) and alternative - for user language. So user can't select more than two layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019", "body": "Removed pair and renamed map. Map type can be used outside by calling static LoadKeyboardLayouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035", "body": "I tried to implement the layouts in less invasive way for skins in the start of the PR. But in current concept I can't see a way to implement layouts without breaking skins.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046", "body": "Removed operator!= and added HasAltKeyboardLayout.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051", "body": "Yep\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060", "body": "This leads to errors of passing \"this\" as const (even with const modifier for related KeyboardLayout getters).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748", "body": "Good point, but I still think that shift and symbols are quite a different kind of modifiers to merge them on one button. Shift just changes letters case while symbols turns on sublayout with totally different charset (so it's not a modifier actually).\nI've found two kinds of virtual keyboards: with (for example http://goo.gl/B946t6) and without (http://goo.gl/LbwHGC) symbols switch. The first kind used when there is no much space to place digits and symbols with letters (that's our case), and the second one uses shift as the symbols switch for digits row.\nWe could add more symbols sets in the future (e.g. smiles or whatever) and use cycling for \"symbols\" button. But \"true\" modifiers should be represented as standalone buttons I think.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779", "body": "I agree, but all loaded layouts should be accesible from the one place (e.g. for settings). On the other hand the second instance of CLangInfo is redundant for loading layouts only except of using separate method for this. The implementation will depend on chosen solution between two fixed/multiple user selected layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911", "body": "Ok. I'm not a C++ programmer as you have probably noticed :) So if you suggest a solution I will appreciate.\nI have utf8 string in std::string and I need to have utf8 std::string on output containing i'th character of s. Something like code below but for utf8:\nstd::string strIn = \"...\";\nstd::string strOut;\nstrOut = strIn.substr(i, 1);\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001", "body": "I agree, cycling is better in UI. As for more than two layouts (more than one per language) - I just can't imagine the use case. Why user whould want to switch between ABC and QWERTY or even more within one language layouts set?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147", "body": "Thanks for the aiming. I'll think about this when we come to solution with modifiers and layouts switching.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897", "body": "Such an initialization is everywhere in pvr code. Should I change it for the PR related code or everywhere?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917", "body": "tag can't be null here otherwise a lot of stuff will break. But ok, I'all add the check.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959", "body": "Just removed the ITR types ) As @jmarshallnz mentioned in https://github.com/xbmc/xbmc/pull/4242#discussion-diff-12038835 map typedefs have CamelCase style. So what's the naming convention for iterator types? Is there any coding style document?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976", "body": "See https://github.com/xbmc/xbmc/pull/3900#discussion-diff-8560519\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981", "body": "CPVRRecordingUid used as a key in std::map\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039", "body": "Yep there is PVR_VIRTUAL_CLIENT_ID (-1) in PVRClient.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "diederich": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624", "body": "Thanks for jumping in @Memphiz - and yes, sounds sane what memphiz says.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"peak3d": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/19b82f92235b1fb469d77b0b2cd0723edaf7cb7d", "message": "Merge pull request #13387 from peak3d/effective\n\n[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d19ef91b59ad064b3677e4bc60ba0866522c377b", "message": "[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0ca1bd7d00174131202dd2a8be1c56899918972a", "message": "[depends] let caller control target build options and ffmpeg options"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "afedchin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/2ee04b62dae1dc139497255e7ac7bac6874173c3", "message": "Merge pull request #13386 from CrystalP/fix-multiplegpus\n\n[Windows] fix adapters enumeration for multiple GPU"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/be4ddb24bfb8638dbc2bb1bc7d5480bd905c2d00", "message": "Merge pull request #13375 from afedchin/win10-fixes-store\n\n[win10] fixes store failures."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/79b7bdfd249a1d81be3fab4b48f868c45bff8082", "message": "[xbmc] Save de-init order of services if manager is destructed not in designed manner (on closing application forcibly)."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f0dbb026005c45f08286b239c945b1d5f367cd08", "message": "[win10] this is a try to resolve forcibly closing app by inactivity reason.\n\nWindows OS may decide to close an app by inactivity reason if the main thread does not pumping messages for a long time."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13388", "title": "[win10] make the uwp app working in background and handles media butt\u2026", "body": "see title", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13258", "title": "[xbmc] refactor instantiation of storage provider and power manager syscalls", "body": "this follows tendantion for removing ifdefs and implementing design patterns\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ksooo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c8e69045fe7d3e3dd72f011d535c256bfbe29998", "message": "Merge pull request #13384 from ksooo/pvr-guide-channel-group-selector-refactor\n\n[PVR] Guide window: put channel group selector implementation into own class"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c778e5b7f553e255db0c53ad72c93b57313f9cfe", "message": "[PVR] Guide window: put channel group selector implementation into own class."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a462148dd3f9a01d799db30a6ed9bb89838af80a", "message": "Merge pull request #13379 from ksooo/pvr-fix-osd-close\n\n[PVR] Fix: Do not auto close OSD if it was opened manually by the user."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a1e83b88d42ea15f4ef764d84f18142ebe6b7484", "message": "Merge pull request #13382 from ksooo/pvr-guide-channel-groups-selector-back-to-square-one\n\n[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9c13af596aa8de10097e87bcf170e81ecfcbede7", "message": "[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a42a8fa4a403a0a89252a0f73632964616c08e5c", "message": "Merge pull request #13380 from ksooo/pvr-ksooo-never-ever-will-become-a-good-skinner\n\nAdd missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/dea106e71df88138e717f6a784bf4d7a4659487d", "message": "Add missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2e2c752c0f0b5a476bf2163698172fd3b56426b3", "message": "[PVR] Fix: Do not auto close OSD if it was openened manually by the user using ACTION_SHOW_INFO."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13389", "title": "[video] Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (on\u2026", "body": "Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (one more 75 missed)\r\n\r\n![screenshot000](https://user-images.githubusercontent.com/3226626/35103954-b9a131e4-fc67-11e7-8790-d98c4aa5cd25.png)\r\n\r\nI recently stumbled over wrong \"Resume from xx:xx:xx\" time values in the context menus of in-progress videos / pvr recordings and found another forgotten \"75\" after #13288 \r\n\r\nI have runtime-tested the change on macOS, latest kodi master.\r\n\r\n@Voyager1 good to go?", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FernetMenta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/69a6725a4269a69744feb8465540b07e8510a375", "message": "Merge pull request #13383 from FernetMenta/paplayer\n\npaplayer: fix playcount for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/62ff2eb0a6da0bf25c9ea5a0e3ba531869b36b75", "message": "paplayer: fix playcount for cue sheets"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MartijnKaijser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/e4074d84d1809f7959e19df12ac3d23950f39a49", "message": "Merge pull request #13377 from kszaq/aml_nativewindow\n\nWinSystemAmlogic: don't strictly depend on fbdev_window"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c2e8a2ba831df7516539df95fc410f706f62df75", "message": "Merge pull request #13381 from lrusak/android-network\n\n[cmake] android: add HAS_LINUX_NETWORK to system defines"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/97ec14b71c79ee8903f73a688980427d044562a1", "message": "Merge pull request #13378 from koying/fixdroidarm\n\nFIX: [droid;amc] arm issue under libc++"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveTBlake": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f71ba23c0d7adb8a1c9e43fdd5a221b13df61cb1", "message": "Merge pull request #13358 from DaveTBlake/WinMilkdropFix\n\n[Fix]Visualisation none as default for all platforms"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13352", "title": "Music Artwork Consistently Availlable To GUI", "body": "Continuing the \"liberation\" of music library art by making the extended artwork consistently availlable to skins.\r\n\r\nAs long wanted #13101 added parameters to JSON API to get/set _any_ type of artwork for artists, albums and songs, and brought it inline with video library functionality.  However the range of artwork presented by Kodi to the skins and API remained very inconsistent e.g. some places getting art for a song would also get artist thumb too, but not other types of artist art, and only album thumb when the song had none etc. The way the art was queried was also inefficient. \r\n\r\nThe main change has been to `CMusicThumbloader::FillLibraryArt` to get _all_ types of art, using one efficient db query per music item. So for example getting song art also gets all related artist and album art. This is then used to make all relevent art available to skins in all places.\r\n\r\nAlso taken the opportunity to make art for **multiple artists** available where the song has  guest/featured artists or an album is a collaboration e.g. composer, conductor, orchestra. Done in a backwards compatible way, numbering subsequent artists \"artist1\", \"artist2\" etc. . Hence using `Listitem.Art(...)` for a song item the possible type parameters include:\r\n\"thumb\", \"album.thumb\",... \"artist.thumb\", \"artist.fanart\", \"artist.logo\",... \"artist1.thumb\",  \"artist1.fanart\",... \"albumartist.thumb\", \"albumartist.fanart\",... \"albumartist1.thumb\" etc.\r\n\r\nFor consistency `Listitem.Property(artistthumbs)` and `Listitem.Property(artistthumb)` have been deprecated. They were only availlable on the music info dialogs, I believe little used by skins,  and  superceded by `Listitem.Art(artist.thumb)`\r\n\r\nA small fix too for the album/artist info dialog:  `Container.Art()` will return the same art as `Listitem.Art()` - the artist or album art. The control list art for each item is access by `Container(50).Listitem.Art()`\r\n\r\nHence **all** the art for an item is consistently availlable for display on both music library navigation window for every media type, and the music information dialogs. It is up to the skinner if they want to show the secondary artist art, or work inconjunction with an art addon that adds spines, logos or backcovers etc., Kodi  just makes it possible.\r\n\r\nNote: In all places I talk about \"getting art\" what I mean is getting the original location of the art from the music database not the actual art from the texture DB or cache. Fetching more art is just a few more text strings per item (if that type of art exists), not lumping lots of images about. That only happens when a skin requests actually specific images.\r\n\r\n@ronie thanks for the help with some of the skin interface stuff.\r\n@rmrector sorted as promised, I will get a test build up\r\nNot sure who else might know about thumbloader, @notspiff perhaps (it is ancient).\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wsnipex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/8bd867a3f11b51bedc512ec78fe6b77e70ef5c68", "message": "Merge pull request #13320 from peak3d/amlbuild\n\nBuild changes for ARM"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/85167dcc23f6897b1276f482a168e34b73a78122", "message": "Merge pull request #13376 from pkerling/wayland-xdg_shell-waylandpp\n\n[wayland] Use xdg-shell.xml from waylandpp"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lrusak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c53bd94e2b3fbfd58016e854bd24d6498e194bd7", "message": "[cmake] android: add HAS_LINUX_NETWORK to system defines"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13274", "title": "Mode whitelist", "body": "@FernetMenta wanted me to PR this to get some more visibility. I'll add what I had already posted to the internal boards.\r\n\r\n---\r\n\r\nJust wanted to start a discussion that won't get lost in slack.\r\n\r\nFor those that don't know the display and refresh rate switching logic in kodi is rather complex yet it doesn't quite fit everyone's needs. @FernetMenta proposed that we create a set of `whitelisted` resolutions that one can select and create a logic for kodi to switch to only these `whitelisted` modes.\r\n\r\nSome reasons to do this is as follows:\r\n 1. Some people want to switch to a lower resolution when watching 720P content however some people do not want this because when watching live TV the refresh rate switching would happen too often.\r\n 2. We can disable modes that have too high of refresh rate ie. 120HZ.\r\n 3. We can use the exact refresh rate (for low bandwidth systems playing 30hz content at 60hz on a 4k display is difficult)\r\n\r\nThe problem with this come down to adding yet another setting. More settings generally decrease the user experience. So how can we make things simpler not more complex?\r\n 1. Pre define `whitelisted` modes. (add all refresh rates from the desktop resolution automatically)\r\n 2. Revert to the old behaviour if no `whitelisted` modes are defined.\r\n 3. Hide option at the same settings level as the refresh rate switching option\r\n\r\nCurrently the logic is this:\r\n 1. for all the methods below remember that it will only select from the whitelist!\r\n 2. the order goes from fuzziest match towards exact match\r\n 3. allow resolutions that are larger than required but have double the refresh rate\r\n 4. allow resolutions that are larger than required but have the correct refresh rate\r\n 5. allow resolutions that are exact and have double the refresh rate\r\n 6. allow resolutions that are exact and have the correct refresh rate\r\n\r\nSample GUI\r\n![Imgur](https://i.imgur.com/1LOp0RO.png)\r\n\r\nSample outputs below.\r\n```\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 50.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 59.940201 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 59.94Hz (19)\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 24.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 23.976080 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1280 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656  NOTICE: Display resolution ADJUST : DVI-1: 1920x1080 @ 59.94Hz (19) (weight: 0.000)\r\n```\r\n---\r\n```\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 60.00Hz (17)\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 50.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 59.940201 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 24.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 23.976080 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1280 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched exact whitelisted Resolution DVI-1: 1280x720 @ 60.00Hz (26)\r\n11:00:03.307 T:140082496567680  NOTICE: Display resolution ADJUST : DVI-1: 1280x720 @ 60.00Hz (26) (weight: 0.000)\r\n```\r\n\r\nPlease comment to explain why you :heart: or :skull: this idea and any further logic or comments about usability below", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13257", "title": "Macro cleanup", "body": "most of this was done with sed commands but I took a look at the diff after and had to fixup some stuff but there might be some minor formatting issues.\r\n\r\nI did a build and run test on linux but it seems that this touches a lot of windows stuff.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13176", "title": "[RFC] [Linux] add libinput backend for non window system platforms", "body": "I'm expecting to get a bit of push back here but let me explain.\r\n\r\nPositives:\r\n\r\n1. Better (and simpler) input handling\r\n2. Lower maintenance due to offloading to a support library\r\n3. Future features including keymap selection and other options (natural scrolling, mouse acceleration, etc)\r\n3. Improved hotplugging (no more 10 second delay)\r\n4. Following mainstream standards (wayland input handling, new x11 input handling)\r\n\r\nNegatives:\r\n\r\n1. Adding dependencies on external libraries\r\n2. Possible higher CPU load (unmeasured)\r\n\r\n---\r\n\r\nSo far this PR adds feature parity to the current code. I did not want to extend the feature set in the initial PR as that may add complexity to the testing and code review. This input handling should be the same or better (I've noticed an improvement in touchscreen accuracy).\r\n\r\nThis input handling doesn't support remotes you must use something like eventlircd for that.\r\n\r\nIn the future (outside the scope of this PR) I'd like to add a settings selection for things like keymap selection, input options (input tapping, mouse acceleration, natural scrolling, left handed, etc).\r\n\r\nThis PR now builds for any projects that use CLinuxInputDevices so GBM, RPi, and AML are the candidates. This does not apply to any other platforms.\r\n\r\nI've separated the commits into semi-logical groups for easier review. I plan to squash into one commit if this is merged.\r\n\r\nThis PR has a dependency on libinput and libxkbcommon (for keyboard handling).\r\n\r\nRelevant changes to LE are here, https://github.com/LibreELEC/LibreELEC.tv/compare/master...lrusak:libinput-kodi\r\n\r\nIf this is approved then we probably need to add libinput and it's dependencies to the build depends.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kszaq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/53d9c08eabcc5c1fbded48d47bf2c26e109b04a7", "message": "WinSystemAmlogic: don't strictly depend on fbdev_window\n\nFixes building for systems that do not have fbdev_window, e.g. working with libhybris."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13078", "title": "DVDVideoCodecAmlogic: remove pts-based frame rate tracking", "body": "In most cases frame tracking based on pts provided by amcodec is wrong, causing unnecessary frame rate switch. We can simply rely on frame rate provided by ffmpeg.\r\n\r\n<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\nLibreELEC community builds with Kodi Krypton and Kodi master branch.\r\nThe incorrect behaviour without the patch applied can be reproduced with first samples from Kodi Wiki: http://kodi.wiki/view/Samples#Codecs.2C_Framerates_and_Subtitles\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koying": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/330a57399863141c3e16cb4d2731d759008f8d57", "message": "FIX: [droid;amc] arm issue under libc++"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13307", "title": "[WIP]: websocket does not handle frames > 1024 bytes", "body": "@Montellese @topfs2 There is a bug in our websocket implementation that it assumes that a whole websocket frame will hold in a socket buffer (currently 1024B)\r\n\r\nIf not mistaken, the RFC does not set a max value, so ideally, we should buffer on the websocket side until we get a full frame.\r\nWould one of you have time to properly fix this?\r\n\r\nFor my use case (a batch of 20 media details retrieval request, leading to a request of ~4KB), I just increased the tcp buffer, which is just a quick hack, ofc.\r\n\r\nThanks", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13191", "title": "CHG: Allow to downgrade resolution", "body": "Kodi already allows to \"upgrade\" resolution, eg from 1080p to 2160p.\r\n\r\nThis also allows Kodi to \"downgrade\" the resolution, eg from 1080p to 720p.\r\nReasoning is that the TV will always do a better job at upscaling than we do, so better switch to a resolution closest to the one of the video.\r\n\r\nI'm not sure of the reasoning for the 3D specific handling, tbh, so that might need rework.\r\nMy only personal use case is HTAB/HSBS, whose format is always 1080p.\r\nThe HDMI ref only define a 1080p 3D mode, so we might want to force to 1080p, possibly.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "notspiff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/7249e1b7f06a6a7a335fd6777320b5fe3ad9eaed", "message": "Merge pull request #13364 from ksooo/pvr-guide-channelgroups\n\n[PVR][Estuary] Guide window: Channel groups selector"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13371", "title": "fixed: show the actual set poster/fanart for sets", "body": "only show relevant art types in the Choose art dialog. @olympia", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13234", "title": "Refactor ServiceManager/ServiceBroker", "body": "This is the start of my service container refactor. see first commit for why I believe this approach is an improvement.\r\n\r\nIt's early, feel free to review but some things you can skip\r\n- yes, i'm initing services directly in Application right now. I wil change this in the end, but I want to see how things work out first. Ultimately, I hope to make this a map of types registered in one spot, and then have a separate call to bring services up. Bu to do this we need to change constructors to not do stuff before StartService is called so right now I do not try to factor it nicely into a function.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkerling": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/27a2e3d362b6ba04e5f1a558ad30a519a3d5a8bb", "message": "Revert \"[cmake] [wayland] Require wayland-protocols >= 1.12 for xdg_wm_base\"\n\nThis reverts commit 6b1e800e11ab82b544b4ff1883b789547d5cc01c."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2292165445877e56ba70d3607510662b18f62d6d", "message": "[wayland] Use xdg-shell.xml from waylandpp\n\nUbuntu 17.10 does not have recent enough wayland-protocols for building\nwith xdg-shell stable. To avoid having to package it or adding ifdefs\nto support building with older wayland-protocols, use xdg-shell.xml\nfrom waylandpp."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13333", "title": "Support for vaExportSurfaceHandle", "body": "\r\n## Description\r\nReorganize Vaapi EGL interop so we can also render with vaExportSurfaceHandle\r\n\r\nThis is WIP, but open for discussion.\r\n\r\nTODO:\r\n- [ ] Check whether this still works on intel, especially HEVC10\r\n- [ ] Modify interop check name to deep color instead of hevc (since it doesn't really check anything hevc-related)\r\n- [ ] Find out if this works reliably on AMD due to possibly missing vaSyncSurface support\r\n- [ ] Check vaapi and ffmpeg postprocessing/deinterlacing\r\n\r\n## Motivation and Context\r\nHardware decoding with AMD GPUs is only supported with this new method\r\n\r\n## How Has This Been Tested?\r\nRun-tested with H.264 and HEVC10 on Linux/Wayland/AMD GPU\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xhaggi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13390", "title": "[pm] resume last played media after sleep", "body": "Follow-up of #13138. I just want to push things forward and @Falcosc didn't find time to adjust his PR.\r\n\r\n> Auto resume the media which was used during enter sleep mode and resumes it on wake with forced play (playerstate handling is already implemented as part of resume point but I don't know why the player state is allways empty, this issue does force play on my PR)\r\nBut this is only the first step, a very basic solution which could be improved step by step.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ronie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13385", "title": "xbmcgui - add option to define listitem as folder", "body": "allow python scripts to define a listitem as a folder (python plugins can already do this).\r\n\r\nreasoning:\r\nin the globalsearch addon i create a list of tv shows and set content to tv shows.\r\nbut due to this code https://github.com/xbmc/xbmc/blob/c8e69045fe7d3e3dd72f011d535c256bfbe29998/xbmc/video/windows/GUIWindowVideoBase.cpp#L322-L330\r\nkodi will try to fetch episode info for those items from the db, unless you define the listitem as a folder.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13306", "title": "addonsettings - don't lowercase condition value", "body": "the addon settings migration (PR #12125) broke a few things, one of them being enable/visible conditions for addon setting.\r\n\r\nthis fixes the bug reported here: https://forum.kodi.tv/showthread.php?tid=321370", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "garbear": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13374", "title": "Games: Keyboard remapping support", "body": "This adds support for remapping keyboard keys in games. Similar to joysticks, keyboards are given a controller profile and mapped to libretro keys via the add-on's buttonmap.xml.\r\n\r\nFor reviewability, this PR has been split into 4 main commits that either add or remove something:\r\n\r\n* Keyboards added to Peripheral API (8e6a9ba6bd04b4f0cdfddbd364f925cdea0c5501)\r\n* Emulated joysticks removed (12e47eb9f6401d864d23ba65821145d5d45665cb)\r\n* Keyboards added to Controller Dialog (d2206e7a3f950a3e01f696ffbcf9ba61dba872d6)\r\n* Keyboards added to Game API (313bd8b3168f8e25aab1de04881189a90999caec)\r\n\r\nButtonmaps have been created for 13 emulator keyboards totaling 1,485 keys.\r\n\r\nNOTE:\r\n\r\nDue to a conflict, emulated joysticks have been dropped. This breaks devices that use keyboard drivers, like the X-Arcade Tankstick.\r\n\r\n## Motivation and Context\r\nFirst piece of the new Player Manager. Once keyboards have been abstracted on this level, they can easily emulate and by emulated by other controller types.\r\n\r\n## Screenshots (if appropriate):\r\n\r\nKeyboards have been added to the Controller Dialog. The first button in the features list is a \"Select key\" button:\r\n\r\n![screen shot 2018-01-15 at 4 58 36 pm 2](https://user-images.githubusercontent.com/531482/34967163-876b184c-fa15-11e7-96c2-035d3fe47756.png)\r\n\r\nPressing it will prompt the user to press a key:\r\n\r\n![screen shot 2018-01-15 at 4 58 52 pm 2](https://user-images.githubusercontent.com/531482/34967182-aba10276-fa15-11e7-976e-fd3fbdad518a.png)\r\n\r\nWhen the user presses the key, they'll be prompted to map it to a button or another key:\r\n\r\n![screen shot 2018-01-15 at 4 59 06 pm 2](https://user-images.githubusercontent.com/531482/34967196-bdd4d01c-fa15-11e7-8ddb-21d4c8c8303a.png)\r\n\r\n## How Has This Been Tested?\r\nTested with DOSBox on OSX. Most keys work.\r\n\r\nTesting needed for the following add-ons:\r\n\r\n- [ ] game.libretro.dosbox\r\n- [ ] game.libretro.fsuae\r\n- [ ] game.libretro.fuse\r\n- [ ] game.libretro.hatari\r\n- [ ] game.libretro.mame\r\n- [ ] game.libretro.o2em\r\n- [ ] game.libretro.pcem\r\n- [ ] game.libretro.prboom\r\n- [ ] game.libretro.scummvm\r\n- [ ] game.libretro.tyrquake\r\n- [ ] game.libretro.uae\r\n- [ ] game.libretro.uae4arm\r\n- [ ] game.libretro.vice\r\n\r\nTest builds have been launched for all platforms: http://jenkins.kodi.tv/view/Automation/job/BuildMulti-Choice/31/\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Associated PRs\r\n\r\nRequires API changes:\r\n\r\n- [ ] Peripheral API v1.3.6: https://github.com/xbmc/peripheral.joystick/pull/136\r\n- [ ] Game API v1.0.34: https://github.com/kodi-game/game.libretro/pull/29\r\n- [x] libretro API: https://github.com/libretro/RetroArch/pull/6119\r\n\r\nRequires controller profiles:\r\n\r\n- [x] https://github.com/kodi-game/kodi-game-controllers/pull/19\r\n\r\nRequire buttonmaps:\r\n\r\n- [ ] game.libretro.dosbox (https://github.com/kodi-game/game.libretro.dosbox/pull/6)\r\n- [ ] game.libretro.fsuae (https://github.com/kodi-game/game.libretro.fsuae/pull/1)\r\n- [ ] game.libretro.fuse (https://github.com/kodi-game/game.libretro.fuse/pull/5)\r\n- [ ] game.libretro.hatari (https://github.com/kodi-game/game.libretro.hatari/pull/4)\r\n- [ ] game.libretro.mame (https://github.com/kodi-game/game.libretro.mame/pull/3)\r\n- [ ] game.libretro.o2em (https://github.com/kodi-game/game.libretro.o2em/pull/2)\r\n- [ ] game.libretro.pcem (https://github.com/kodi-game/game.libretro.pcem/pull/2)\r\n- [ ] game.libretro.prboom (https://github.com/kodi-game/game.libretro.prboom/pull/4)\r\n- [ ] game.libretro.scummvm (https://github.com/kodi-game/game.libretro.scummvm/pull/14)\r\n- [ ] game.libretro.tyrquake (https://github.com/kodi-game/game.libretro.tyrquake/pull/2)\r\n- [ ] game.libretro.uae (https://github.com/kodi-game/game.libretro.uae/pull/1)\r\n- [ ] game.libretro.uae4arm (https://github.com/kodi-game/game.libretro.uae4arm/pull/1)\r\n- [ ] game.libretro.vice (https://github.com/kodi-game/game.libretro.vice/pull/1)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13151", "title": "Fix two skin-related crashes", "body": "This PR contains two fixes:\r\n\r\n* Fix segfault in guilib when `<itemlayout>` or `<focuslayout>` are missing or incomplete\r\n* Fix segfault on skin reload due to accessing items after their owner has been destroyed\r\n\r\n## How Has This Been Tested?\r\nFixes have been in my branch through most of the game OSD development.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lobermann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13373", "title": "fix segfault on palyback failed", "body": "As discussed in slack with @FernetMenta and @notspiff .\r\n\r\n> A quick explanation on the issue:\r\n> \r\n> In CApplication, on the GUI_MSG_PLAYBACK_STARTED Message \r\n> https://github.com/xbmc/xbmc/blob/master/xbmc/Application.cpp#L3879\r\n> There is the call to  g_infoManager.SetCurrentItem(*m_itemCurrentFile) which then in turn runs the CSetCurrentItemJob.\r\n> \r\n> Now, this job is accessing the member CGUIInfoManager::m_currentFile directly in that thread.\r\n> When in CApplication a GUI_MSG_PLAYBACK_STOPPED is happening (in case the playback fails) this is in turn calling g_infoManager.ResetCurrentItem() which \r\n> is then resetting the m_currentFile that is used by the CSetCurrentItemJob. \r\n> \r\n> So if there are any delays in the CSetCurrentItemJob, due to database access or anything else, we end up in a segfault within CGUIInfoManager::SetCurrentMovie.\r\n> I assume this also applies to CGUIInfoManager::SetCurrentSong and CGUIInfoManager::SetCurrentGame as they do it in more or less the same way.\r\n\r\n\r\nThis was fixed now by inheriting CJobQueue in CGUIInfoManager so there is a dedicated job queue with one worker for this. ResetCurrentItem() was also moved into a job to prevent it from running at the same time with SetCurrentItemJob(). A type was added to the jobs so that we only have one of the jobs in the queue at any time. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Paxxi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13366", "title": "[xbmc][windows] Fix a bunch of warnings for windows x64", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis takes us from ~1260 warnings to ~1030.\r\n\r\nLeft them as a few separate commits for now for easier review, should be squashed before merge.\r\n\r\nthis touches on your stuff @tamland  and @garbear so please have a look.\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13361", "title": "[xbmc] Added clang-format that roughly matches our current style", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis adds a .clang-format that tries to match our current style guidelines. One change is that it does wrap long lines so applying it on a whole file does result in a lot of changes.\r\n\r\nWe've discussed a few times how to go about changing the whole codebase and not come to any consensus so this PR isn't trying to solve that.\r\n\r\nHaving a .clang-format in the repo does make things simpler without large scale reformatting as it can be applied to a single file when it's being touched or using various IDE/extensions it can be applied to parts of a file being edited.\r\n\r\nI've used https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat for Visual Studio with good results.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nTo make it easy to review the style I did apply it to CApplication.\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13360", "title": "[xbmc] Link against curl instead of using dlopen.", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis replaces our dlopen usage of curl with regular linking\r\n\r\nRuntime tested on windows x64\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unbroken75": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13327", "title": "Defaults to release build", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nAdded --disable-debug to .configure in README.raspberrypi\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nStandard user does not need to build for debug. \r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Razzeee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13323", "title": "Add history table", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nThis is heavily work in progress and while it works at the moment it probably has some cases that re broken.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nThis replaces the old files `playCount` and `lastPlayed` columns with a `history` table. It has `dateWatched` and a reference to a file. For every time watched, we add a new row. \r\nSo this is much richer than the old fields, as we can have multiple lastPlayed/dateWatched entries for the same file. We're basically emulating the old fields while adding the new table to use in the future.\r\n\r\nThis first implementation however will focus on only having this internal and handling it correctly in core. We will need to expose it to the outer world in a later PR.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nVery little. It seems to work fine on migration and leanback. And it also seems to safe fine on `Set as watched`.\r\nIt also sets playCount to 0 instead of `null` at the moment, not sure if this causes regressions.\r\n\r\n- MySQL is completely untested as of now (might be broken due to me using subqueries, can't remember if those were bad for MySQL)\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n\r\n  \r\n  ", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "InuSasha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13318", "title": "sql-client: add support for mariadb-client", "body": "make it possible to link against mariadb-client instead of mysql\r\n\r\n## Description\r\nSearch explicit for libmariadb and mysql-header under include/mariadb/.\r\nAdditional added a test, to protect against using of mysql & mariadb at the same time \r\n\r\n## Motivation and Context\r\nmost distributions switch to mariadb, this follows up.\r\n\r\n## How Has This Been Tested?\r\ntested on top of LibreELEC master with MariaDB 10.2 and MySQL 5.7 as sql-server.\r\ntest-cases: \r\n - database migration from Video108 -> Video109\r\n - database migration from Music66 -> Music69\r\n - list movies\r\n - mark movie as seen\r\n - builds against mysql-client and mariadb-client and against both (as negative test)\r\n\r\nreallife test on top of KRYTON (LE 8.2.2), is started.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [X] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n\r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samnazarko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13290", "title": "CWinSystemRpi: ensure that we register the ALSA sink as well as PiSink is needed for external DACs", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n\r\nIt seems that after c0064a99d4cb13fbb77f6f411cba48a12ef50669, the AESink is tied to the windowing system. The ALSA sink does not seem to be registered elsewhere on RBP, which means that external DACs (USB and I2S) are not enumerated. \r\n\r\nThe patch was necessary to re-register ALSA sinks on RBP.\r\n\r\n## How Has This Been Tested?\r\n\r\nTested in OSMC v18 nightlies for Raspberry Pi with positive reports: https://discourse.osmc.tv/t/testing-kodi-18-leia-builds-for-raspberry-pi/20631/632\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ace20022": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13144", "title": "[videoplayer] DVDInputStream: Add an interface for stream selection.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13109", "title": "Do not scan archived volumes for external subs or audio.", "body": "This pr superseeds #9929", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tirithen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13139", "title": "Add mapping codes for the wiimote", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nAdd mappings for wiimote keys.\r\n\r\n## Motivation and Context\r\nIn multiple forums people are having problems with the wiimote in kodi, namely that only the d-poad works but it's not possible to use A/B/-/Home/+/1/2 buttons. The logs when pushing these buttons gives the following:\r\n\r\n```\r\n22:03:45.696 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:45.696 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(304)\r\n22:03:47.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:47.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(305)\r\n22:03:49.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:49.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(412)\r\n22:03:50.230 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:50.230 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(316)\r\n22:03:51.080 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:51.080 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(407)\r\n22:03:52.513 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:52.513 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(257)\r\n22:03:53.563 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:53.564 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(258)\r\n\r\n``` \r\nThe conclusion from several of the forum threads is that those codes was not mapped in LinuxInputDevices.cpp, hence this change.\r\n\r\nFirst time contributing here, so tell me if something more is needed.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkortstiege": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13088", "title": "[infoscanner] ensure we're only checking for .nomedia in folders (fixes #17651)", "body": "Ensure we're not doing pointless .nomedia checks on files. Regression was introduced with https://github.com/xbmc/xbmc/pull/12772\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nhttps://trac.kodi.tv/ticket/17651\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nBriefly tested on Linux.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835", "body": "Fixed in fadf1cd0da739e9cd14c5b70d9dc90d8d6dd8403\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732", "body": "congrats - the first xbmc repo pull processed :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000", "body": "friendly tip. you want to use git pull --rebase when you fetch upstream.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048", "body": "even if osx requires them for something else, this is correct. we need to have these under control. so test on osx, if it requires them for some other reason, put it under osx only...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790", "body": "please rebase your branch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636", "body": "Any particular reason? Can't see any drawbacks to doing this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953", "body": "DISPLAY is only ever unset if a) X server isn't running, or b) user has ssh'ed into a remote machine and attempted to start XBMC without setting DISPLAY first\n\nCurrently in these cases, XBMC segfaults with a fairly unintelligible (to the average user) python backtrace\n\n```\n$ xbmc\n/usr/lib/pymodules/python2.6/gtk-2.0/gtk/__init__.py:57: GtkWarning: could not open display\n  warnings.warn(str(e), _gtk.Warning)\nError: unable to open display \n/usr/share/xbmc/FEH.py:69: Warning: invalid (NULL) pointer instance\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:69: Warning: g_signal_connect_data: assertion `G_TYPE_CHECK_INSTANCE (instance)' failed\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:83: GtkWarning: IA__gtk_settings_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:83: Warning: g_object_get: assertion `G_IS_OBJECT (object)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:88: GtkWarning: Screen for GtkWindow not set; you must always set\na screen for a GtkWindow before using the window\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_pango_context_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_font_description: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_base_dir: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_language: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_new: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_text: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_alignment: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_ellipsize: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_single_paragraph_mode: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_width: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_get_extents: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_default_colormap: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_colormap_get_visual: assertion `GDK_IS_COLORMAP (colormap)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_root_window: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_window_new: assertion `GDK_IS_WINDOW (parent)' failed\n  window.show_all ()\nSegmentation fault\n```\n\nIf you prefer, we could just immediately return the error message \"xbmc: no DISPLAY variable set\" from xbmc.sh (and not try to set it to :0), hence avoiding the backtrace. That would at least make it easier for the user to find their mistake.\n\nHowever, it likely fixes the issue in 50% of the cases if we do also set it to :0 and attempt to continue, and it doesn't do any harm?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hudokkow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758", "body": "Thanks.\n\n;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986", "body": "Thanks for the tips, guys. I'm not used to git, so it's kinda 'learn as you go' for me.\n\nIt seems you're not so grumpy after all, spiff. :))\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "theuni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348", "body": "What spiff said. Also, if you're going to submit a request for a few commits, may as well do them all at once.\n\nThanks for the contributions, and for our first pull requests!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823", "body": "I agree with Bob, patching FEH is the way to go.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593", "body": "Please do not push needless merge commits into git. You should always be using 'git pull --rebase' for mainline.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115", "body": "For future reference, it would have been nice to have these commits as a real merge, where the merge commit references the ticket number.\n\nIf git merge detects that it can be merged as a fast-forward, it will. So need to use 'git merge --no-ff'.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201", "body": "Sure, though having a real merge commit allows for much easier bisection. It also makes it clear that the series of commits should be seen as a group.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "davilla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072", "body": "did you check that none of the dyloaded libs need libssl or libcrypto ? \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sraue": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181", "body": "i have build xbmc yesterday with this and without an installed openssl. it works here (except ssl support in my external python for sure). an grep over the xbmc sources shows me thats needed only for python.\n\nfor sure it would be nice if anyone can test this patch with windows/macos etc too...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "CrystalP": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266", "body": "Don't worry about Windows, it doesn't use configure and always has an internal Python.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538", "body": "Pulled & merged as 5e6d3fd, see details in ticket.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284", "body": "All that commit did was move files that were dumped at the root of the xbmc project, due to a weird merge. The rest is untouched, and vastly different than before the reshuffle.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040", "body": "oops, the second file wasn't supposed to be committed. Sure that can go in MathUtils but there will still be #ifdefery. The function is already defined for MSVC and that one conflicts.\n\nExcept for the inline keyword I fail to see the difference between the current code and what you wrote.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681", "body": "Why the effort? System libraries already have abs() for most interesting types. This one is the exception.\nSeems to me the function belongs to some linux-specific header. MSVC already has the function.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Voyager1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043", "body": "rebase done, thanks for the tip.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158", "body": "corrected cosmetics\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213", "body": "closing and replacing with another pull request from separate branch.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918", "body": "who's currently responsible for the dvdplayer code? (haven't seen elupus contributing lately).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bobo1on1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085", "body": "Sorry, I'd rather not do this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823", "body": "If DISPLAY is not set, something is wrong, the user should fix that instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906", "body": "DISPLAY is something the system should set, I'm fine with a big fat warning if it's not, but we shouldn't set it ourselves, it's not our job.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009", "body": "Why not make abs a template function instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "topfs2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068", "body": "I don't see the reason for this? You can just call stopClient() followed by startClient if you need to reconnect. It makes more sense also to enforce stop before start IMO\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076", "body": "I agree with Bob also, setting it randomly is a hack at best\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jmarshallnz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837", "body": "A couple of points:\n1.  Nice :)\n2.  I don't like using AppendFormat/Format when FormatSQL is safer for db actions.  eg your where and order clauses would have to be PrepareSQL'd before sending them to this method.  This either needs documenting or dropped in favour of PrepareSQL.\n3.  bReturn is not required in DeleteValues or ExecuteQuery, QueueInsertQuery, CommitInsertQueries - just return directly.\n4.  iReturn is not required in ResultQuery\n5.  I prefer m_multiWrite, but don't really care ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977", "body": "Any particular reason why you don't like return statements in the middle of methods (or specifically try/catch blocks?) or just a coding style thing?  I don't really mind either way - just interested :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437", "body": "<= might be safer?  It's correct as-is though (I'm not 100 what SplitString does on failure)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140", "body": "Right, well I can definitely see the point of having the ticket number in the commit msg, though I could have popped that into the last one and it still would be fine, right?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841", "body": "I suggest we remove any direct usage of OutputDebugString outside of CLog as much as is feasible - no reason to have it if CLog::Log() does the same thing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907", "body": "Agreed - almost all of them can be removed.  CGUITextureManager::Dump and CueDocument ones can be switched to CLog.  All others other than sqlite collision one can be dropped as far as I'm concerned (not sure what mp_msg is doing...)  Not sure what to do with the sqlite collision one - perhaps dump it to the log if _DEBUG is enabled?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "opdenkamp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290", "body": "I don't like return statements in the middle of a methods. that's what the bReturn/iReturn vars are for. bit overkill in the QueueInsertQuery() to do it like that, so I'll change it to return directly, but for the other ones, I don't like the return to be within the try-catch block.\n\nI'll have a look at the rest. thanks for the review.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101", "body": "coding style, and not just for try-catch but for all methods. code is usually easier to read if you don't return in the middle of methods. 1 entry point, 1 exit point. doesn't really matter for these little methods, but in bigger ones it does.\n\nit's been hammered into my head by a teacher at the uni :-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368", "body": "... yes, I won the first gitwtf award :(\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "halorgium": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003", "body": "startClient() requires all the arguments to be passed in. \nI agree that it should guard against starting the client twice. \nThis makes me think that restarting overcomplicates the client. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "firnsy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189", "body": "Saviq, nice work.\n\nI've pulled into my tree for further and will push into mainline once completed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Saviq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938", "body": "Here's a bug I reported about the issue - http://trac.xbmc.org/ticket/11120 - please comment / close when applicable.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450", "body": "This commit breaks ./configure on Linux (at least openSUSE Factory and Gentoo). It only happens in a clean environment, though:\n\n```\n$ git-clean -dxff # this removes all the files that don't belong to the git repo, ignored or not\n$ ./bootstrap\n$ ./configure\n[...]\nUsage: dvdnav-config [OPTIONS] [LIBRARIES]\nOptions:\n    [--prefix[=DIR]]\n    [--exec-prefix[=DIR]]\n    [--version]\n        [--libs]\n[--cflags]\n/home/michal/dev/xbmc/xbmc/lib/libdvd/libdvdnav/../libdvdread/obj/dvdread-config returned an error. Can't proceed\nconfigure: error: Submodule lib/libdvd/libdvdnav failed to configure\n```\n\nThe $MAKE isn't set and `dvdread-config` from $PATH is executed as a consequence. Exporting $MAKE makes the problem go away.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630", "body": "Just make it a\n    MAKE=${MAKE:-make}\notherwise this commit won't have any effect.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "taxigps": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640", "body": "Ah, forget to set user.name in my new installed git\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "queeup": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527", "body": "To bad for Turkish users. It supposed to scan for folder names but I made a mistake and translate scan for file names :( But now corrected.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530", "body": "Are you planning to release new Dharma for bugs fix or something? I correct my big mistake on string.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wsoltys": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313", "body": "worked fine for me on a clean build but this one is nicer ofc. :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879", "body": "ah didn't check. They don't do it anymore?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986", "body": "Haha, ok. So time for another wtf git award :)\n<git rant on>\nCan't remember similar things with svn. But now we might have enough devs for doing things twice :P\n<git rant off>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821", "body": "Anssi is right. please use the file provided in include-xbmc-win32.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "chadoe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855", "body": "hm they had a home, they were matching the reshuffle filesystem layout...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001", "body": "just would like to find files in the project in the same place as on disk now that files have been moved around on disk thats all.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Fneufneu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540", "body": "oops sorry,\ni think we can define MAKE=make in top of case $host part\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sitzm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529", "body": "with your changes, linux does not compile anymore with the follwing error:\nIn file included from karaokelyrics.cpp:26:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:137: error: \u2018int64_t\u2019 does not name a type\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h: In function \u2018void MathUtils::hack()\u2019:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:149: error: \u2018abs\u2019 is not a member of \u2018MathUtils\u2019\nmake[2]: **\\* [karaokelyrics.o] Error 1\n\nThis can be fixed with including stdint.h in MathUtils.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "elupus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119", "body": "Could you tell me why? We shouldn't need it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "anssih": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151", "body": "It is needed for LATM AAC. It can be removed once we update ffmpeg, but I'm waiting for some Windows developer to test it. (https://github.com/xbmc/xbmc/pull/18)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716", "body": "Hmm, \"lib\\ffmpeg\\include\\libavutil\\avconfig.h\" was a static file, while \"lib\\ffmpeg\\libavutil\\avconfig.h\" is generated by ffmpeg configure. I was told that ffmpeg configure might not have been run when the XBMC project is build in VS, which prevented the use of \"lib\\ffmpeg\\libavutil\\avconfig.h\".\n\nIf that is correct, you'll need to use \"lib\\ffmpeg\\include-xbmc-win32\\libavutil\\avconfig.h\" instead. If not, I'll just remove the static version, then.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "blinkseb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720", "body": "I was not aware of that, sorry! o\nI' ve built ffmpeg right before building xbmc that's why i've found the file here!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "vkosh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644", "body": "I actually wonder why do recordings have string IDs? Maybe for some backend-specific historical reasons. But 1024 is the length of PVR_RECORDING.strRecordingId.\nI propose to use VARCHAR(255) with value length check during serialization to prevent overflow, or maybe just to use TEXT type.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682", "body": "++\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695", "body": "Yes it does work because boost:shared_ptr overloads operator*, and epgTag->foo() - doesn't because CFileItem hasn't constructors for *Ptr types.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697", "body": "++ for storing epg tag pointer.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492", "body": "It doesn't work this way actually because item is of CGUIListItemPtr type, which sould be casted to CFileItem to get epg info.\nThe only alternative to the cast is to create fileItem explicitly and get the tag from it, e.g.:\n<code>CFileItemPtr fileItem(new CFileItem(*item));</code>\nor\n<code>CFileItemPtr fileItem(new CFileItem(item.get()));</code>\nand then\n<code>fileItem->GetEPGInfoTag()->GenreType()</code>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333", "body": "It's just here for readability. The code is similar to one for playing channel by id above (see line 515).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921", "body": "IMO the separate buttons is better in two reasons: usability of shift button and ability of symbols charset extention (e.g. separate charsets for symbols and for shift+symbols).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959", "body": "Added onlyCheckLanguage check (not used though).\nAs for moving main layout loading down the locale specific langinfo.xml check - the main layout must be loaded in any case otherwise keyboard dialog will not work.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975", "body": "Yes. The keyboard dialog don't work without layouts, so at least main one should present. The previous layouts should remain in case of error. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983", "body": "I need std::wstring's to get utf8 character by its index. std::string works with bytes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012", "body": "There are two fixed layouts because they are related to languages: main - for default language (English) and alternative - for user language. So user can't select more than two layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019", "body": "Removed pair and renamed map. Map type can be used outside by calling static LoadKeyboardLayouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035", "body": "I tried to implement the layouts in less invasive way for skins in the start of the PR. But in current concept I can't see a way to implement layouts without breaking skins.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046", "body": "Removed operator!= and added HasAltKeyboardLayout.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051", "body": "Yep\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060", "body": "This leads to errors of passing \"this\" as const (even with const modifier for related KeyboardLayout getters).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748", "body": "Good point, but I still think that shift and symbols are quite a different kind of modifiers to merge them on one button. Shift just changes letters case while symbols turns on sublayout with totally different charset (so it's not a modifier actually).\nI've found two kinds of virtual keyboards: with (for example http://goo.gl/B946t6) and without (http://goo.gl/LbwHGC) symbols switch. The first kind used when there is no much space to place digits and symbols with letters (that's our case), and the second one uses shift as the symbols switch for digits row.\nWe could add more symbols sets in the future (e.g. smiles or whatever) and use cycling for \"symbols\" button. But \"true\" modifiers should be represented as standalone buttons I think.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779", "body": "I agree, but all loaded layouts should be accesible from the one place (e.g. for settings). On the other hand the second instance of CLangInfo is redundant for loading layouts only except of using separate method for this. The implementation will depend on chosen solution between two fixed/multiple user selected layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911", "body": "Ok. I'm not a C++ programmer as you have probably noticed :) So if you suggest a solution I will appreciate.\nI have utf8 string in std::string and I need to have utf8 std::string on output containing i'th character of s. Something like code below but for utf8:\nstd::string strIn = \"...\";\nstd::string strOut;\nstrOut = strIn.substr(i, 1);\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001", "body": "I agree, cycling is better in UI. As for more than two layouts (more than one per language) - I just can't imagine the use case. Why user whould want to switch between ABC and QWERTY or even more within one language layouts set?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147", "body": "Thanks for the aiming. I'll think about this when we come to solution with modifiers and layouts switching.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897", "body": "Such an initialization is everywhere in pvr code. Should I change it for the PR related code or everywhere?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917", "body": "tag can't be null here otherwise a lot of stuff will break. But ok, I'all add the check.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959", "body": "Just removed the ITR types ) As @jmarshallnz mentioned in https://github.com/xbmc/xbmc/pull/4242#discussion-diff-12038835 map typedefs have CamelCase style. So what's the naming convention for iterator types? Is there any coding style document?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976", "body": "See https://github.com/xbmc/xbmc/pull/3900#discussion-diff-8560519\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981", "body": "CPVRRecordingUid used as a key in std::map\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039", "body": "Yep there is PVR_VIRTUAL_CLIENT_ID (-1) in PVRClient.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "diederich": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624", "body": "Thanks for jumping in @Memphiz - and yes, sounds sane what memphiz says.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "3": {"peak3d": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/19b82f92235b1fb469d77b0b2cd0723edaf7cb7d", "message": "Merge pull request #13387 from peak3d/effective\n\n[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d19ef91b59ad064b3677e4bc60ba0866522c377b", "message": "[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0ca1bd7d00174131202dd2a8be1c56899918972a", "message": "[depends] let caller control target build options and ffmpeg options"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "afedchin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/2ee04b62dae1dc139497255e7ac7bac6874173c3", "message": "Merge pull request #13386 from CrystalP/fix-multiplegpus\n\n[Windows] fix adapters enumeration for multiple GPU"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/be4ddb24bfb8638dbc2bb1bc7d5480bd905c2d00", "message": "Merge pull request #13375 from afedchin/win10-fixes-store\n\n[win10] fixes store failures."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/79b7bdfd249a1d81be3fab4b48f868c45bff8082", "message": "[xbmc] Save de-init order of services if manager is destructed not in designed manner (on closing application forcibly)."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f0dbb026005c45f08286b239c945b1d5f367cd08", "message": "[win10] this is a try to resolve forcibly closing app by inactivity reason.\n\nWindows OS may decide to close an app by inactivity reason if the main thread does not pumping messages for a long time."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13388", "title": "[win10] make the uwp app working in background and handles media butt\u2026", "body": "see title", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13258", "title": "[xbmc] refactor instantiation of storage provider and power manager syscalls", "body": "this follows tendantion for removing ifdefs and implementing design patterns\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ksooo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c8e69045fe7d3e3dd72f011d535c256bfbe29998", "message": "Merge pull request #13384 from ksooo/pvr-guide-channel-group-selector-refactor\n\n[PVR] Guide window: put channel group selector implementation into own class"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c778e5b7f553e255db0c53ad72c93b57313f9cfe", "message": "[PVR] Guide window: put channel group selector implementation into own class."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a462148dd3f9a01d799db30a6ed9bb89838af80a", "message": "Merge pull request #13379 from ksooo/pvr-fix-osd-close\n\n[PVR] Fix: Do not auto close OSD if it was opened manually by the user."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a1e83b88d42ea15f4ef764d84f18142ebe6b7484", "message": "Merge pull request #13382 from ksooo/pvr-guide-channel-groups-selector-back-to-square-one\n\n[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9c13af596aa8de10097e87bcf170e81ecfcbede7", "message": "[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a42a8fa4a403a0a89252a0f73632964616c08e5c", "message": "Merge pull request #13380 from ksooo/pvr-ksooo-never-ever-will-become-a-good-skinner\n\nAdd missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/dea106e71df88138e717f6a784bf4d7a4659487d", "message": "Add missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2e2c752c0f0b5a476bf2163698172fd3b56426b3", "message": "[PVR] Fix: Do not auto close OSD if it was openened manually by the user using ACTION_SHOW_INFO."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13389", "title": "[video] Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (on\u2026", "body": "Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (one more 75 missed)\r\n\r\n![screenshot000](https://user-images.githubusercontent.com/3226626/35103954-b9a131e4-fc67-11e7-8790-d98c4aa5cd25.png)\r\n\r\nI recently stumbled over wrong \"Resume from xx:xx:xx\" time values in the context menus of in-progress videos / pvr recordings and found another forgotten \"75\" after #13288 \r\n\r\nI have runtime-tested the change on macOS, latest kodi master.\r\n\r\n@Voyager1 good to go?", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FernetMenta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/69a6725a4269a69744feb8465540b07e8510a375", "message": "Merge pull request #13383 from FernetMenta/paplayer\n\npaplayer: fix playcount for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/62ff2eb0a6da0bf25c9ea5a0e3ba531869b36b75", "message": "paplayer: fix playcount for cue sheets"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MartijnKaijser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/e4074d84d1809f7959e19df12ac3d23950f39a49", "message": "Merge pull request #13377 from kszaq/aml_nativewindow\n\nWinSystemAmlogic: don't strictly depend on fbdev_window"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c2e8a2ba831df7516539df95fc410f706f62df75", "message": "Merge pull request #13381 from lrusak/android-network\n\n[cmake] android: add HAS_LINUX_NETWORK to system defines"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/97ec14b71c79ee8903f73a688980427d044562a1", "message": "Merge pull request #13378 from koying/fixdroidarm\n\nFIX: [droid;amc] arm issue under libc++"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveTBlake": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f71ba23c0d7adb8a1c9e43fdd5a221b13df61cb1", "message": "Merge pull request #13358 from DaveTBlake/WinMilkdropFix\n\n[Fix]Visualisation none as default for all platforms"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13352", "title": "Music Artwork Consistently Availlable To GUI", "body": "Continuing the \"liberation\" of music library art by making the extended artwork consistently availlable to skins.\r\n\r\nAs long wanted #13101 added parameters to JSON API to get/set _any_ type of artwork for artists, albums and songs, and brought it inline with video library functionality.  However the range of artwork presented by Kodi to the skins and API remained very inconsistent e.g. some places getting art for a song would also get artist thumb too, but not other types of artist art, and only album thumb when the song had none etc. The way the art was queried was also inefficient. \r\n\r\nThe main change has been to `CMusicThumbloader::FillLibraryArt` to get _all_ types of art, using one efficient db query per music item. So for example getting song art also gets all related artist and album art. This is then used to make all relevent art available to skins in all places.\r\n\r\nAlso taken the opportunity to make art for **multiple artists** available where the song has  guest/featured artists or an album is a collaboration e.g. composer, conductor, orchestra. Done in a backwards compatible way, numbering subsequent artists \"artist1\", \"artist2\" etc. . Hence using `Listitem.Art(...)` for a song item the possible type parameters include:\r\n\"thumb\", \"album.thumb\",... \"artist.thumb\", \"artist.fanart\", \"artist.logo\",... \"artist1.thumb\",  \"artist1.fanart\",... \"albumartist.thumb\", \"albumartist.fanart\",... \"albumartist1.thumb\" etc.\r\n\r\nFor consistency `Listitem.Property(artistthumbs)` and `Listitem.Property(artistthumb)` have been deprecated. They were only availlable on the music info dialogs, I believe little used by skins,  and  superceded by `Listitem.Art(artist.thumb)`\r\n\r\nA small fix too for the album/artist info dialog:  `Container.Art()` will return the same art as `Listitem.Art()` - the artist or album art. The control list art for each item is access by `Container(50).Listitem.Art()`\r\n\r\nHence **all** the art for an item is consistently availlable for display on both music library navigation window for every media type, and the music information dialogs. It is up to the skinner if they want to show the secondary artist art, or work inconjunction with an art addon that adds spines, logos or backcovers etc., Kodi  just makes it possible.\r\n\r\nNote: In all places I talk about \"getting art\" what I mean is getting the original location of the art from the music database not the actual art from the texture DB or cache. Fetching more art is just a few more text strings per item (if that type of art exists), not lumping lots of images about. That only happens when a skin requests actually specific images.\r\n\r\n@ronie thanks for the help with some of the skin interface stuff.\r\n@rmrector sorted as promised, I will get a test build up\r\nNot sure who else might know about thumbloader, @notspiff perhaps (it is ancient).\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wsnipex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/8bd867a3f11b51bedc512ec78fe6b77e70ef5c68", "message": "Merge pull request #13320 from peak3d/amlbuild\n\nBuild changes for ARM"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/85167dcc23f6897b1276f482a168e34b73a78122", "message": "Merge pull request #13376 from pkerling/wayland-xdg_shell-waylandpp\n\n[wayland] Use xdg-shell.xml from waylandpp"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lrusak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c53bd94e2b3fbfd58016e854bd24d6498e194bd7", "message": "[cmake] android: add HAS_LINUX_NETWORK to system defines"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13274", "title": "Mode whitelist", "body": "@FernetMenta wanted me to PR this to get some more visibility. I'll add what I had already posted to the internal boards.\r\n\r\n---\r\n\r\nJust wanted to start a discussion that won't get lost in slack.\r\n\r\nFor those that don't know the display and refresh rate switching logic in kodi is rather complex yet it doesn't quite fit everyone's needs. @FernetMenta proposed that we create a set of `whitelisted` resolutions that one can select and create a logic for kodi to switch to only these `whitelisted` modes.\r\n\r\nSome reasons to do this is as follows:\r\n 1. Some people want to switch to a lower resolution when watching 720P content however some people do not want this because when watching live TV the refresh rate switching would happen too often.\r\n 2. We can disable modes that have too high of refresh rate ie. 120HZ.\r\n 3. We can use the exact refresh rate (for low bandwidth systems playing 30hz content at 60hz on a 4k display is difficult)\r\n\r\nThe problem with this come down to adding yet another setting. More settings generally decrease the user experience. So how can we make things simpler not more complex?\r\n 1. Pre define `whitelisted` modes. (add all refresh rates from the desktop resolution automatically)\r\n 2. Revert to the old behaviour if no `whitelisted` modes are defined.\r\n 3. Hide option at the same settings level as the refresh rate switching option\r\n\r\nCurrently the logic is this:\r\n 1. for all the methods below remember that it will only select from the whitelist!\r\n 2. the order goes from fuzziest match towards exact match\r\n 3. allow resolutions that are larger than required but have double the refresh rate\r\n 4. allow resolutions that are larger than required but have the correct refresh rate\r\n 5. allow resolutions that are exact and have double the refresh rate\r\n 6. allow resolutions that are exact and have the correct refresh rate\r\n\r\nSample GUI\r\n![Imgur](https://i.imgur.com/1LOp0RO.png)\r\n\r\nSample outputs below.\r\n```\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 50.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 59.940201 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 59.94Hz (19)\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 24.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 23.976080 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1280 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656  NOTICE: Display resolution ADJUST : DVI-1: 1920x1080 @ 59.94Hz (19) (weight: 0.000)\r\n```\r\n---\r\n```\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 60.00Hz (17)\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 50.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 59.940201 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 24.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 23.976080 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1280 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched exact whitelisted Resolution DVI-1: 1280x720 @ 60.00Hz (26)\r\n11:00:03.307 T:140082496567680  NOTICE: Display resolution ADJUST : DVI-1: 1280x720 @ 60.00Hz (26) (weight: 0.000)\r\n```\r\n\r\nPlease comment to explain why you :heart: or :skull: this idea and any further logic or comments about usability below", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13257", "title": "Macro cleanup", "body": "most of this was done with sed commands but I took a look at the diff after and had to fixup some stuff but there might be some minor formatting issues.\r\n\r\nI did a build and run test on linux but it seems that this touches a lot of windows stuff.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13176", "title": "[RFC] [Linux] add libinput backend for non window system platforms", "body": "I'm expecting to get a bit of push back here but let me explain.\r\n\r\nPositives:\r\n\r\n1. Better (and simpler) input handling\r\n2. Lower maintenance due to offloading to a support library\r\n3. Future features including keymap selection and other options (natural scrolling, mouse acceleration, etc)\r\n3. Improved hotplugging (no more 10 second delay)\r\n4. Following mainstream standards (wayland input handling, new x11 input handling)\r\n\r\nNegatives:\r\n\r\n1. Adding dependencies on external libraries\r\n2. Possible higher CPU load (unmeasured)\r\n\r\n---\r\n\r\nSo far this PR adds feature parity to the current code. I did not want to extend the feature set in the initial PR as that may add complexity to the testing and code review. This input handling should be the same or better (I've noticed an improvement in touchscreen accuracy).\r\n\r\nThis input handling doesn't support remotes you must use something like eventlircd for that.\r\n\r\nIn the future (outside the scope of this PR) I'd like to add a settings selection for things like keymap selection, input options (input tapping, mouse acceleration, natural scrolling, left handed, etc).\r\n\r\nThis PR now builds for any projects that use CLinuxInputDevices so GBM, RPi, and AML are the candidates. This does not apply to any other platforms.\r\n\r\nI've separated the commits into semi-logical groups for easier review. I plan to squash into one commit if this is merged.\r\n\r\nThis PR has a dependency on libinput and libxkbcommon (for keyboard handling).\r\n\r\nRelevant changes to LE are here, https://github.com/LibreELEC/LibreELEC.tv/compare/master...lrusak:libinput-kodi\r\n\r\nIf this is approved then we probably need to add libinput and it's dependencies to the build depends.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kszaq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/53d9c08eabcc5c1fbded48d47bf2c26e109b04a7", "message": "WinSystemAmlogic: don't strictly depend on fbdev_window\n\nFixes building for systems that do not have fbdev_window, e.g. working with libhybris."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13078", "title": "DVDVideoCodecAmlogic: remove pts-based frame rate tracking", "body": "In most cases frame tracking based on pts provided by amcodec is wrong, causing unnecessary frame rate switch. We can simply rely on frame rate provided by ffmpeg.\r\n\r\n<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\nLibreELEC community builds with Kodi Krypton and Kodi master branch.\r\nThe incorrect behaviour without the patch applied can be reproduced with first samples from Kodi Wiki: http://kodi.wiki/view/Samples#Codecs.2C_Framerates_and_Subtitles\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koying": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/330a57399863141c3e16cb4d2731d759008f8d57", "message": "FIX: [droid;amc] arm issue under libc++"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13307", "title": "[WIP]: websocket does not handle frames > 1024 bytes", "body": "@Montellese @topfs2 There is a bug in our websocket implementation that it assumes that a whole websocket frame will hold in a socket buffer (currently 1024B)\r\n\r\nIf not mistaken, the RFC does not set a max value, so ideally, we should buffer on the websocket side until we get a full frame.\r\nWould one of you have time to properly fix this?\r\n\r\nFor my use case (a batch of 20 media details retrieval request, leading to a request of ~4KB), I just increased the tcp buffer, which is just a quick hack, ofc.\r\n\r\nThanks", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13191", "title": "CHG: Allow to downgrade resolution", "body": "Kodi already allows to \"upgrade\" resolution, eg from 1080p to 2160p.\r\n\r\nThis also allows Kodi to \"downgrade\" the resolution, eg from 1080p to 720p.\r\nReasoning is that the TV will always do a better job at upscaling than we do, so better switch to a resolution closest to the one of the video.\r\n\r\nI'm not sure of the reasoning for the 3D specific handling, tbh, so that might need rework.\r\nMy only personal use case is HTAB/HSBS, whose format is always 1080p.\r\nThe HDMI ref only define a 1080p 3D mode, so we might want to force to 1080p, possibly.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "notspiff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/7249e1b7f06a6a7a335fd6777320b5fe3ad9eaed", "message": "Merge pull request #13364 from ksooo/pvr-guide-channelgroups\n\n[PVR][Estuary] Guide window: Channel groups selector"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13371", "title": "fixed: show the actual set poster/fanart for sets", "body": "only show relevant art types in the Choose art dialog. @olympia", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13234", "title": "Refactor ServiceManager/ServiceBroker", "body": "This is the start of my service container refactor. see first commit for why I believe this approach is an improvement.\r\n\r\nIt's early, feel free to review but some things you can skip\r\n- yes, i'm initing services directly in Application right now. I wil change this in the end, but I want to see how things work out first. Ultimately, I hope to make this a map of types registered in one spot, and then have a separate call to bring services up. Bu to do this we need to change constructors to not do stuff before StartService is called so right now I do not try to factor it nicely into a function.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkerling": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/27a2e3d362b6ba04e5f1a558ad30a519a3d5a8bb", "message": "Revert \"[cmake] [wayland] Require wayland-protocols >= 1.12 for xdg_wm_base\"\n\nThis reverts commit 6b1e800e11ab82b544b4ff1883b789547d5cc01c."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2292165445877e56ba70d3607510662b18f62d6d", "message": "[wayland] Use xdg-shell.xml from waylandpp\n\nUbuntu 17.10 does not have recent enough wayland-protocols for building\nwith xdg-shell stable. To avoid having to package it or adding ifdefs\nto support building with older wayland-protocols, use xdg-shell.xml\nfrom waylandpp."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13333", "title": "Support for vaExportSurfaceHandle", "body": "\r\n## Description\r\nReorganize Vaapi EGL interop so we can also render with vaExportSurfaceHandle\r\n\r\nThis is WIP, but open for discussion.\r\n\r\nTODO:\r\n- [ ] Check whether this still works on intel, especially HEVC10\r\n- [ ] Modify interop check name to deep color instead of hevc (since it doesn't really check anything hevc-related)\r\n- [ ] Find out if this works reliably on AMD due to possibly missing vaSyncSurface support\r\n- [ ] Check vaapi and ffmpeg postprocessing/deinterlacing\r\n\r\n## Motivation and Context\r\nHardware decoding with AMD GPUs is only supported with this new method\r\n\r\n## How Has This Been Tested?\r\nRun-tested with H.264 and HEVC10 on Linux/Wayland/AMD GPU\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xhaggi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13390", "title": "[pm] resume last played media after sleep", "body": "Follow-up of #13138. I just want to push things forward and @Falcosc didn't find time to adjust his PR.\r\n\r\n> Auto resume the media which was used during enter sleep mode and resumes it on wake with forced play (playerstate handling is already implemented as part of resume point but I don't know why the player state is allways empty, this issue does force play on my PR)\r\nBut this is only the first step, a very basic solution which could be improved step by step.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ronie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13385", "title": "xbmcgui - add option to define listitem as folder", "body": "allow python scripts to define a listitem as a folder (python plugins can already do this).\r\n\r\nreasoning:\r\nin the globalsearch addon i create a list of tv shows and set content to tv shows.\r\nbut due to this code https://github.com/xbmc/xbmc/blob/c8e69045fe7d3e3dd72f011d535c256bfbe29998/xbmc/video/windows/GUIWindowVideoBase.cpp#L322-L330\r\nkodi will try to fetch episode info for those items from the db, unless you define the listitem as a folder.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13306", "title": "addonsettings - don't lowercase condition value", "body": "the addon settings migration (PR #12125) broke a few things, one of them being enable/visible conditions for addon setting.\r\n\r\nthis fixes the bug reported here: https://forum.kodi.tv/showthread.php?tid=321370", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "garbear": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13374", "title": "Games: Keyboard remapping support", "body": "This adds support for remapping keyboard keys in games. Similar to joysticks, keyboards are given a controller profile and mapped to libretro keys via the add-on's buttonmap.xml.\r\n\r\nFor reviewability, this PR has been split into 4 main commits that either add or remove something:\r\n\r\n* Keyboards added to Peripheral API (8e6a9ba6bd04b4f0cdfddbd364f925cdea0c5501)\r\n* Emulated joysticks removed (12e47eb9f6401d864d23ba65821145d5d45665cb)\r\n* Keyboards added to Controller Dialog (d2206e7a3f950a3e01f696ffbcf9ba61dba872d6)\r\n* Keyboards added to Game API (313bd8b3168f8e25aab1de04881189a90999caec)\r\n\r\nButtonmaps have been created for 13 emulator keyboards totaling 1,485 keys.\r\n\r\nNOTE:\r\n\r\nDue to a conflict, emulated joysticks have been dropped. This breaks devices that use keyboard drivers, like the X-Arcade Tankstick.\r\n\r\n## Motivation and Context\r\nFirst piece of the new Player Manager. Once keyboards have been abstracted on this level, they can easily emulate and by emulated by other controller types.\r\n\r\n## Screenshots (if appropriate):\r\n\r\nKeyboards have been added to the Controller Dialog. The first button in the features list is a \"Select key\" button:\r\n\r\n![screen shot 2018-01-15 at 4 58 36 pm 2](https://user-images.githubusercontent.com/531482/34967163-876b184c-fa15-11e7-96c2-035d3fe47756.png)\r\n\r\nPressing it will prompt the user to press a key:\r\n\r\n![screen shot 2018-01-15 at 4 58 52 pm 2](https://user-images.githubusercontent.com/531482/34967182-aba10276-fa15-11e7-976e-fd3fbdad518a.png)\r\n\r\nWhen the user presses the key, they'll be prompted to map it to a button or another key:\r\n\r\n![screen shot 2018-01-15 at 4 59 06 pm 2](https://user-images.githubusercontent.com/531482/34967196-bdd4d01c-fa15-11e7-8ddb-21d4c8c8303a.png)\r\n\r\n## How Has This Been Tested?\r\nTested with DOSBox on OSX. Most keys work.\r\n\r\nTesting needed for the following add-ons:\r\n\r\n- [ ] game.libretro.dosbox\r\n- [ ] game.libretro.fsuae\r\n- [ ] game.libretro.fuse\r\n- [ ] game.libretro.hatari\r\n- [ ] game.libretro.mame\r\n- [ ] game.libretro.o2em\r\n- [ ] game.libretro.pcem\r\n- [ ] game.libretro.prboom\r\n- [ ] game.libretro.scummvm\r\n- [ ] game.libretro.tyrquake\r\n- [ ] game.libretro.uae\r\n- [ ] game.libretro.uae4arm\r\n- [ ] game.libretro.vice\r\n\r\nTest builds have been launched for all platforms: http://jenkins.kodi.tv/view/Automation/job/BuildMulti-Choice/31/\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Associated PRs\r\n\r\nRequires API changes:\r\n\r\n- [ ] Peripheral API v1.3.6: https://github.com/xbmc/peripheral.joystick/pull/136\r\n- [ ] Game API v1.0.34: https://github.com/kodi-game/game.libretro/pull/29\r\n- [x] libretro API: https://github.com/libretro/RetroArch/pull/6119\r\n\r\nRequires controller profiles:\r\n\r\n- [x] https://github.com/kodi-game/kodi-game-controllers/pull/19\r\n\r\nRequire buttonmaps:\r\n\r\n- [ ] game.libretro.dosbox (https://github.com/kodi-game/game.libretro.dosbox/pull/6)\r\n- [ ] game.libretro.fsuae (https://github.com/kodi-game/game.libretro.fsuae/pull/1)\r\n- [ ] game.libretro.fuse (https://github.com/kodi-game/game.libretro.fuse/pull/5)\r\n- [ ] game.libretro.hatari (https://github.com/kodi-game/game.libretro.hatari/pull/4)\r\n- [ ] game.libretro.mame (https://github.com/kodi-game/game.libretro.mame/pull/3)\r\n- [ ] game.libretro.o2em (https://github.com/kodi-game/game.libretro.o2em/pull/2)\r\n- [ ] game.libretro.pcem (https://github.com/kodi-game/game.libretro.pcem/pull/2)\r\n- [ ] game.libretro.prboom (https://github.com/kodi-game/game.libretro.prboom/pull/4)\r\n- [ ] game.libretro.scummvm (https://github.com/kodi-game/game.libretro.scummvm/pull/14)\r\n- [ ] game.libretro.tyrquake (https://github.com/kodi-game/game.libretro.tyrquake/pull/2)\r\n- [ ] game.libretro.uae (https://github.com/kodi-game/game.libretro.uae/pull/1)\r\n- [ ] game.libretro.uae4arm (https://github.com/kodi-game/game.libretro.uae4arm/pull/1)\r\n- [ ] game.libretro.vice (https://github.com/kodi-game/game.libretro.vice/pull/1)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13151", "title": "Fix two skin-related crashes", "body": "This PR contains two fixes:\r\n\r\n* Fix segfault in guilib when `<itemlayout>` or `<focuslayout>` are missing or incomplete\r\n* Fix segfault on skin reload due to accessing items after their owner has been destroyed\r\n\r\n## How Has This Been Tested?\r\nFixes have been in my branch through most of the game OSD development.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lobermann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13373", "title": "fix segfault on palyback failed", "body": "As discussed in slack with @FernetMenta and @notspiff .\r\n\r\n> A quick explanation on the issue:\r\n> \r\n> In CApplication, on the GUI_MSG_PLAYBACK_STARTED Message \r\n> https://github.com/xbmc/xbmc/blob/master/xbmc/Application.cpp#L3879\r\n> There is the call to  g_infoManager.SetCurrentItem(*m_itemCurrentFile) which then in turn runs the CSetCurrentItemJob.\r\n> \r\n> Now, this job is accessing the member CGUIInfoManager::m_currentFile directly in that thread.\r\n> When in CApplication a GUI_MSG_PLAYBACK_STOPPED is happening (in case the playback fails) this is in turn calling g_infoManager.ResetCurrentItem() which \r\n> is then resetting the m_currentFile that is used by the CSetCurrentItemJob. \r\n> \r\n> So if there are any delays in the CSetCurrentItemJob, due to database access or anything else, we end up in a segfault within CGUIInfoManager::SetCurrentMovie.\r\n> I assume this also applies to CGUIInfoManager::SetCurrentSong and CGUIInfoManager::SetCurrentGame as they do it in more or less the same way.\r\n\r\n\r\nThis was fixed now by inheriting CJobQueue in CGUIInfoManager so there is a dedicated job queue with one worker for this. ResetCurrentItem() was also moved into a job to prevent it from running at the same time with SetCurrentItemJob(). A type was added to the jobs so that we only have one of the jobs in the queue at any time. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Paxxi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13366", "title": "[xbmc][windows] Fix a bunch of warnings for windows x64", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis takes us from ~1260 warnings to ~1030.\r\n\r\nLeft them as a few separate commits for now for easier review, should be squashed before merge.\r\n\r\nthis touches on your stuff @tamland  and @garbear so please have a look.\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13361", "title": "[xbmc] Added clang-format that roughly matches our current style", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis adds a .clang-format that tries to match our current style guidelines. One change is that it does wrap long lines so applying it on a whole file does result in a lot of changes.\r\n\r\nWe've discussed a few times how to go about changing the whole codebase and not come to any consensus so this PR isn't trying to solve that.\r\n\r\nHaving a .clang-format in the repo does make things simpler without large scale reformatting as it can be applied to a single file when it's being touched or using various IDE/extensions it can be applied to parts of a file being edited.\r\n\r\nI've used https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat for Visual Studio with good results.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nTo make it easy to review the style I did apply it to CApplication.\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13360", "title": "[xbmc] Link against curl instead of using dlopen.", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis replaces our dlopen usage of curl with regular linking\r\n\r\nRuntime tested on windows x64\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unbroken75": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13327", "title": "Defaults to release build", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nAdded --disable-debug to .configure in README.raspberrypi\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nStandard user does not need to build for debug. \r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Razzeee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13323", "title": "Add history table", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nThis is heavily work in progress and while it works at the moment it probably has some cases that re broken.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nThis replaces the old files `playCount` and `lastPlayed` columns with a `history` table. It has `dateWatched` and a reference to a file. For every time watched, we add a new row. \r\nSo this is much richer than the old fields, as we can have multiple lastPlayed/dateWatched entries for the same file. We're basically emulating the old fields while adding the new table to use in the future.\r\n\r\nThis first implementation however will focus on only having this internal and handling it correctly in core. We will need to expose it to the outer world in a later PR.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nVery little. It seems to work fine on migration and leanback. And it also seems to safe fine on `Set as watched`.\r\nIt also sets playCount to 0 instead of `null` at the moment, not sure if this causes regressions.\r\n\r\n- MySQL is completely untested as of now (might be broken due to me using subqueries, can't remember if those were bad for MySQL)\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n\r\n  \r\n  ", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "InuSasha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13318", "title": "sql-client: add support for mariadb-client", "body": "make it possible to link against mariadb-client instead of mysql\r\n\r\n## Description\r\nSearch explicit for libmariadb and mysql-header under include/mariadb/.\r\nAdditional added a test, to protect against using of mysql & mariadb at the same time \r\n\r\n## Motivation and Context\r\nmost distributions switch to mariadb, this follows up.\r\n\r\n## How Has This Been Tested?\r\ntested on top of LibreELEC master with MariaDB 10.2 and MySQL 5.7 as sql-server.\r\ntest-cases: \r\n - database migration from Video108 -> Video109\r\n - database migration from Music66 -> Music69\r\n - list movies\r\n - mark movie as seen\r\n - builds against mysql-client and mariadb-client and against both (as negative test)\r\n\r\nreallife test on top of KRYTON (LE 8.2.2), is started.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [X] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n\r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samnazarko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13290", "title": "CWinSystemRpi: ensure that we register the ALSA sink as well as PiSink is needed for external DACs", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n\r\nIt seems that after c0064a99d4cb13fbb77f6f411cba48a12ef50669, the AESink is tied to the windowing system. The ALSA sink does not seem to be registered elsewhere on RBP, which means that external DACs (USB and I2S) are not enumerated. \r\n\r\nThe patch was necessary to re-register ALSA sinks on RBP.\r\n\r\n## How Has This Been Tested?\r\n\r\nTested in OSMC v18 nightlies for Raspberry Pi with positive reports: https://discourse.osmc.tv/t/testing-kodi-18-leia-builds-for-raspberry-pi/20631/632\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ace20022": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13144", "title": "[videoplayer] DVDInputStream: Add an interface for stream selection.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13109", "title": "Do not scan archived volumes for external subs or audio.", "body": "This pr superseeds #9929", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tirithen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13139", "title": "Add mapping codes for the wiimote", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nAdd mappings for wiimote keys.\r\n\r\n## Motivation and Context\r\nIn multiple forums people are having problems with the wiimote in kodi, namely that only the d-poad works but it's not possible to use A/B/-/Home/+/1/2 buttons. The logs when pushing these buttons gives the following:\r\n\r\n```\r\n22:03:45.696 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:45.696 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(304)\r\n22:03:47.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:47.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(305)\r\n22:03:49.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:49.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(412)\r\n22:03:50.230 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:50.230 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(316)\r\n22:03:51.080 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:51.080 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(407)\r\n22:03:52.513 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:52.513 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(257)\r\n22:03:53.563 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:53.564 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(258)\r\n\r\n``` \r\nThe conclusion from several of the forum threads is that those codes was not mapped in LinuxInputDevices.cpp, hence this change.\r\n\r\nFirst time contributing here, so tell me if something more is needed.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkortstiege": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13088", "title": "[infoscanner] ensure we're only checking for .nomedia in folders (fixes #17651)", "body": "Ensure we're not doing pointless .nomedia checks on files. Regression was introduced with https://github.com/xbmc/xbmc/pull/12772\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nhttps://trac.kodi.tv/ticket/17651\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nBriefly tested on Linux.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732", "body": "congrats - the first xbmc repo pull processed :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000", "body": "friendly tip. you want to use git pull --rebase when you fetch upstream.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048", "body": "even if osx requires them for something else, this is correct. we need to have these under control. so test on osx, if it requires them for some other reason, put it under osx only...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790", "body": "please rebase your branch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636", "body": "Any particular reason? Can't see any drawbacks to doing this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953", "body": "DISPLAY is only ever unset if a) X server isn't running, or b) user has ssh'ed into a remote machine and attempted to start XBMC without setting DISPLAY first\n\nCurrently in these cases, XBMC segfaults with a fairly unintelligible (to the average user) python backtrace\n\n```\n$ xbmc\n/usr/lib/pymodules/python2.6/gtk-2.0/gtk/__init__.py:57: GtkWarning: could not open display\n  warnings.warn(str(e), _gtk.Warning)\nError: unable to open display \n/usr/share/xbmc/FEH.py:69: Warning: invalid (NULL) pointer instance\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:69: Warning: g_signal_connect_data: assertion `G_TYPE_CHECK_INSTANCE (instance)' failed\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:83: GtkWarning: IA__gtk_settings_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:83: Warning: g_object_get: assertion `G_IS_OBJECT (object)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:88: GtkWarning: Screen for GtkWindow not set; you must always set\na screen for a GtkWindow before using the window\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_pango_context_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_font_description: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_base_dir: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_language: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_new: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_text: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_alignment: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_ellipsize: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_single_paragraph_mode: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_width: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_get_extents: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_default_colormap: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_colormap_get_visual: assertion `GDK_IS_COLORMAP (colormap)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_root_window: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_window_new: assertion `GDK_IS_WINDOW (parent)' failed\n  window.show_all ()\nSegmentation fault\n```\n\nIf you prefer, we could just immediately return the error message \"xbmc: no DISPLAY variable set\" from xbmc.sh (and not try to set it to :0), hence avoiding the backtrace. That would at least make it easier for the user to find their mistake.\n\nHowever, it likely fixes the issue in 50% of the cases if we do also set it to :0 and attempt to continue, and it doesn't do any harm?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hudokkow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758", "body": "Thanks.\n\n;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986", "body": "Thanks for the tips, guys. I'm not used to git, so it's kinda 'learn as you go' for me.\n\nIt seems you're not so grumpy after all, spiff. :))\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "theuni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348", "body": "What spiff said. Also, if you're going to submit a request for a few commits, may as well do them all at once.\n\nThanks for the contributions, and for our first pull requests!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823", "body": "I agree with Bob, patching FEH is the way to go.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "davilla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072", "body": "did you check that none of the dyloaded libs need libssl or libcrypto ? \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sraue": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181", "body": "i have build xbmc yesterday with this and without an installed openssl. it works here (except ssl support in my external python for sure). an grep over the xbmc sources shows me thats needed only for python.\n\nfor sure it would be nice if anyone can test this patch with windows/macos etc too...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "CrystalP": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266", "body": "Don't worry about Windows, it doesn't use configure and always has an internal Python.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538", "body": "Pulled & merged as 5e6d3fd, see details in ticket.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Voyager1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043", "body": "rebase done, thanks for the tip.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158", "body": "corrected cosmetics\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213", "body": "closing and replacing with another pull request from separate branch.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918", "body": "who's currently responsible for the dvdplayer code? (haven't seen elupus contributing lately).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bobo1on1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085", "body": "Sorry, I'd rather not do this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823", "body": "If DISPLAY is not set, something is wrong, the user should fix that instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906", "body": "DISPLAY is something the system should set, I'm fine with a big fat warning if it's not, but we shouldn't set it ourselves, it's not our job.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "topfs2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068", "body": "I don't see the reason for this? You can just call stopClient() followed by startClient if you need to reconnect. It makes more sense also to enforce stop before start IMO\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076", "body": "I agree with Bob also, setting it randomly is a hack at best\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jmarshallnz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837", "body": "A couple of points:\n1.  Nice :)\n2.  I don't like using AppendFormat/Format when FormatSQL is safer for db actions.  eg your where and order clauses would have to be PrepareSQL'd before sending them to this method.  This either needs documenting or dropped in favour of PrepareSQL.\n3.  bReturn is not required in DeleteValues or ExecuteQuery, QueueInsertQuery, CommitInsertQueries - just return directly.\n4.  iReturn is not required in ResultQuery\n5.  I prefer m_multiWrite, but don't really care ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977", "body": "Any particular reason why you don't like return statements in the middle of methods (or specifically try/catch blocks?) or just a coding style thing?  I don't really mind either way - just interested :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "opdenkamp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290", "body": "I don't like return statements in the middle of a methods. that's what the bReturn/iReturn vars are for. bit overkill in the QueueInsertQuery() to do it like that, so I'll change it to return directly, but for the other ones, I don't like the return to be within the try-catch block.\n\nI'll have a look at the rest. thanks for the review.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101", "body": "coding style, and not just for try-catch but for all methods. code is usually easier to read if you don't return in the middle of methods. 1 entry point, 1 exit point. doesn't really matter for these little methods, but in bigger ones it does.\n\nit's been hammered into my head by a teacher at the uni :-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "halorgium": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003", "body": "startClient() requires all the arguments to be passed in. \nI agree that it should guard against starting the client twice. \nThis makes me think that restarting overcomplicates the client. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "firnsy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189", "body": "Saviq, nice work.\n\nI've pulled into my tree for further and will push into mainline once completed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Saviq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938", "body": "Here's a bug I reported about the issue - http://trac.xbmc.org/ticket/11120 - please comment / close when applicable.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}, "4": {"peak3d": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/19b82f92235b1fb469d77b0b2cd0723edaf7cb7d", "message": "Merge pull request #13387 from peak3d/effective\n\n[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d19ef91b59ad064b3677e4bc60ba0866522c377b", "message": "[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0ca1bd7d00174131202dd2a8be1c56899918972a", "message": "[depends] let caller control target build options and ffmpeg options"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "afedchin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/2ee04b62dae1dc139497255e7ac7bac6874173c3", "message": "Merge pull request #13386 from CrystalP/fix-multiplegpus\n\n[Windows] fix adapters enumeration for multiple GPU"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/be4ddb24bfb8638dbc2bb1bc7d5480bd905c2d00", "message": "Merge pull request #13375 from afedchin/win10-fixes-store\n\n[win10] fixes store failures."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/79b7bdfd249a1d81be3fab4b48f868c45bff8082", "message": "[xbmc] Save de-init order of services if manager is destructed not in designed manner (on closing application forcibly)."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f0dbb026005c45f08286b239c945b1d5f367cd08", "message": "[win10] this is a try to resolve forcibly closing app by inactivity reason.\n\nWindows OS may decide to close an app by inactivity reason if the main thread does not pumping messages for a long time."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13388", "title": "[win10] make the uwp app working in background and handles media butt\u2026", "body": "see title", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13258", "title": "[xbmc] refactor instantiation of storage provider and power manager syscalls", "body": "this follows tendantion for removing ifdefs and implementing design patterns\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ksooo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c8e69045fe7d3e3dd72f011d535c256bfbe29998", "message": "Merge pull request #13384 from ksooo/pvr-guide-channel-group-selector-refactor\n\n[PVR] Guide window: put channel group selector implementation into own class"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c778e5b7f553e255db0c53ad72c93b57313f9cfe", "message": "[PVR] Guide window: put channel group selector implementation into own class."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a462148dd3f9a01d799db30a6ed9bb89838af80a", "message": "Merge pull request #13379 from ksooo/pvr-fix-osd-close\n\n[PVR] Fix: Do not auto close OSD if it was opened manually by the user."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a1e83b88d42ea15f4ef764d84f18142ebe6b7484", "message": "Merge pull request #13382 from ksooo/pvr-guide-channel-groups-selector-back-to-square-one\n\n[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9c13af596aa8de10097e87bcf170e81ecfcbede7", "message": "[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a42a8fa4a403a0a89252a0f73632964616c08e5c", "message": "Merge pull request #13380 from ksooo/pvr-ksooo-never-ever-will-become-a-good-skinner\n\nAdd missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/dea106e71df88138e717f6a784bf4d7a4659487d", "message": "Add missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2e2c752c0f0b5a476bf2163698172fd3b56426b3", "message": "[PVR] Fix: Do not auto close OSD if it was openened manually by the user using ACTION_SHOW_INFO."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13389", "title": "[video] Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (on\u2026", "body": "Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (one more 75 missed)\r\n\r\n![screenshot000](https://user-images.githubusercontent.com/3226626/35103954-b9a131e4-fc67-11e7-8790-d98c4aa5cd25.png)\r\n\r\nI recently stumbled over wrong \"Resume from xx:xx:xx\" time values in the context menus of in-progress videos / pvr recordings and found another forgotten \"75\" after #13288 \r\n\r\nI have runtime-tested the change on macOS, latest kodi master.\r\n\r\n@Voyager1 good to go?", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FernetMenta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/69a6725a4269a69744feb8465540b07e8510a375", "message": "Merge pull request #13383 from FernetMenta/paplayer\n\npaplayer: fix playcount for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/62ff2eb0a6da0bf25c9ea5a0e3ba531869b36b75", "message": "paplayer: fix playcount for cue sheets"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MartijnKaijser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/e4074d84d1809f7959e19df12ac3d23950f39a49", "message": "Merge pull request #13377 from kszaq/aml_nativewindow\n\nWinSystemAmlogic: don't strictly depend on fbdev_window"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c2e8a2ba831df7516539df95fc410f706f62df75", "message": "Merge pull request #13381 from lrusak/android-network\n\n[cmake] android: add HAS_LINUX_NETWORK to system defines"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/97ec14b71c79ee8903f73a688980427d044562a1", "message": "Merge pull request #13378 from koying/fixdroidarm\n\nFIX: [droid;amc] arm issue under libc++"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveTBlake": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f71ba23c0d7adb8a1c9e43fdd5a221b13df61cb1", "message": "Merge pull request #13358 from DaveTBlake/WinMilkdropFix\n\n[Fix]Visualisation none as default for all platforms"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13352", "title": "Music Artwork Consistently Availlable To GUI", "body": "Continuing the \"liberation\" of music library art by making the extended artwork consistently availlable to skins.\r\n\r\nAs long wanted #13101 added parameters to JSON API to get/set _any_ type of artwork for artists, albums and songs, and brought it inline with video library functionality.  However the range of artwork presented by Kodi to the skins and API remained very inconsistent e.g. some places getting art for a song would also get artist thumb too, but not other types of artist art, and only album thumb when the song had none etc. The way the art was queried was also inefficient. \r\n\r\nThe main change has been to `CMusicThumbloader::FillLibraryArt` to get _all_ types of art, using one efficient db query per music item. So for example getting song art also gets all related artist and album art. This is then used to make all relevent art available to skins in all places.\r\n\r\nAlso taken the opportunity to make art for **multiple artists** available where the song has  guest/featured artists or an album is a collaboration e.g. composer, conductor, orchestra. Done in a backwards compatible way, numbering subsequent artists \"artist1\", \"artist2\" etc. . Hence using `Listitem.Art(...)` for a song item the possible type parameters include:\r\n\"thumb\", \"album.thumb\",... \"artist.thumb\", \"artist.fanart\", \"artist.logo\",... \"artist1.thumb\",  \"artist1.fanart\",... \"albumartist.thumb\", \"albumartist.fanart\",... \"albumartist1.thumb\" etc.\r\n\r\nFor consistency `Listitem.Property(artistthumbs)` and `Listitem.Property(artistthumb)` have been deprecated. They were only availlable on the music info dialogs, I believe little used by skins,  and  superceded by `Listitem.Art(artist.thumb)`\r\n\r\nA small fix too for the album/artist info dialog:  `Container.Art()` will return the same art as `Listitem.Art()` - the artist or album art. The control list art for each item is access by `Container(50).Listitem.Art()`\r\n\r\nHence **all** the art for an item is consistently availlable for display on both music library navigation window for every media type, and the music information dialogs. It is up to the skinner if they want to show the secondary artist art, or work inconjunction with an art addon that adds spines, logos or backcovers etc., Kodi  just makes it possible.\r\n\r\nNote: In all places I talk about \"getting art\" what I mean is getting the original location of the art from the music database not the actual art from the texture DB or cache. Fetching more art is just a few more text strings per item (if that type of art exists), not lumping lots of images about. That only happens when a skin requests actually specific images.\r\n\r\n@ronie thanks for the help with some of the skin interface stuff.\r\n@rmrector sorted as promised, I will get a test build up\r\nNot sure who else might know about thumbloader, @notspiff perhaps (it is ancient).\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wsnipex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/8bd867a3f11b51bedc512ec78fe6b77e70ef5c68", "message": "Merge pull request #13320 from peak3d/amlbuild\n\nBuild changes for ARM"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/85167dcc23f6897b1276f482a168e34b73a78122", "message": "Merge pull request #13376 from pkerling/wayland-xdg_shell-waylandpp\n\n[wayland] Use xdg-shell.xml from waylandpp"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lrusak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c53bd94e2b3fbfd58016e854bd24d6498e194bd7", "message": "[cmake] android: add HAS_LINUX_NETWORK to system defines"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13274", "title": "Mode whitelist", "body": "@FernetMenta wanted me to PR this to get some more visibility. I'll add what I had already posted to the internal boards.\r\n\r\n---\r\n\r\nJust wanted to start a discussion that won't get lost in slack.\r\n\r\nFor those that don't know the display and refresh rate switching logic in kodi is rather complex yet it doesn't quite fit everyone's needs. @FernetMenta proposed that we create a set of `whitelisted` resolutions that one can select and create a logic for kodi to switch to only these `whitelisted` modes.\r\n\r\nSome reasons to do this is as follows:\r\n 1. Some people want to switch to a lower resolution when watching 720P content however some people do not want this because when watching live TV the refresh rate switching would happen too often.\r\n 2. We can disable modes that have too high of refresh rate ie. 120HZ.\r\n 3. We can use the exact refresh rate (for low bandwidth systems playing 30hz content at 60hz on a 4k display is difficult)\r\n\r\nThe problem with this come down to adding yet another setting. More settings generally decrease the user experience. So how can we make things simpler not more complex?\r\n 1. Pre define `whitelisted` modes. (add all refresh rates from the desktop resolution automatically)\r\n 2. Revert to the old behaviour if no `whitelisted` modes are defined.\r\n 3. Hide option at the same settings level as the refresh rate switching option\r\n\r\nCurrently the logic is this:\r\n 1. for all the methods below remember that it will only select from the whitelist!\r\n 2. the order goes from fuzziest match towards exact match\r\n 3. allow resolutions that are larger than required but have double the refresh rate\r\n 4. allow resolutions that are larger than required but have the correct refresh rate\r\n 5. allow resolutions that are exact and have double the refresh rate\r\n 6. allow resolutions that are exact and have the correct refresh rate\r\n\r\nSample GUI\r\n![Imgur](https://i.imgur.com/1LOp0RO.png)\r\n\r\nSample outputs below.\r\n```\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 50.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 59.940201 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 59.94Hz (19)\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 24.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 23.976080 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1280 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656  NOTICE: Display resolution ADJUST : DVI-1: 1920x1080 @ 59.94Hz (19) (weight: 0.000)\r\n```\r\n---\r\n```\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 60.00Hz (17)\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 50.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 59.940201 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 24.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 23.976080 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1280 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched exact whitelisted Resolution DVI-1: 1280x720 @ 60.00Hz (26)\r\n11:00:03.307 T:140082496567680  NOTICE: Display resolution ADJUST : DVI-1: 1280x720 @ 60.00Hz (26) (weight: 0.000)\r\n```\r\n\r\nPlease comment to explain why you :heart: or :skull: this idea and any further logic or comments about usability below", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13257", "title": "Macro cleanup", "body": "most of this was done with sed commands but I took a look at the diff after and had to fixup some stuff but there might be some minor formatting issues.\r\n\r\nI did a build and run test on linux but it seems that this touches a lot of windows stuff.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13176", "title": "[RFC] [Linux] add libinput backend for non window system platforms", "body": "I'm expecting to get a bit of push back here but let me explain.\r\n\r\nPositives:\r\n\r\n1. Better (and simpler) input handling\r\n2. Lower maintenance due to offloading to a support library\r\n3. Future features including keymap selection and other options (natural scrolling, mouse acceleration, etc)\r\n3. Improved hotplugging (no more 10 second delay)\r\n4. Following mainstream standards (wayland input handling, new x11 input handling)\r\n\r\nNegatives:\r\n\r\n1. Adding dependencies on external libraries\r\n2. Possible higher CPU load (unmeasured)\r\n\r\n---\r\n\r\nSo far this PR adds feature parity to the current code. I did not want to extend the feature set in the initial PR as that may add complexity to the testing and code review. This input handling should be the same or better (I've noticed an improvement in touchscreen accuracy).\r\n\r\nThis input handling doesn't support remotes you must use something like eventlircd for that.\r\n\r\nIn the future (outside the scope of this PR) I'd like to add a settings selection for things like keymap selection, input options (input tapping, mouse acceleration, natural scrolling, left handed, etc).\r\n\r\nThis PR now builds for any projects that use CLinuxInputDevices so GBM, RPi, and AML are the candidates. This does not apply to any other platforms.\r\n\r\nI've separated the commits into semi-logical groups for easier review. I plan to squash into one commit if this is merged.\r\n\r\nThis PR has a dependency on libinput and libxkbcommon (for keyboard handling).\r\n\r\nRelevant changes to LE are here, https://github.com/LibreELEC/LibreELEC.tv/compare/master...lrusak:libinput-kodi\r\n\r\nIf this is approved then we probably need to add libinput and it's dependencies to the build depends.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kszaq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/53d9c08eabcc5c1fbded48d47bf2c26e109b04a7", "message": "WinSystemAmlogic: don't strictly depend on fbdev_window\n\nFixes building for systems that do not have fbdev_window, e.g. working with libhybris."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13078", "title": "DVDVideoCodecAmlogic: remove pts-based frame rate tracking", "body": "In most cases frame tracking based on pts provided by amcodec is wrong, causing unnecessary frame rate switch. We can simply rely on frame rate provided by ffmpeg.\r\n\r\n<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\nLibreELEC community builds with Kodi Krypton and Kodi master branch.\r\nThe incorrect behaviour without the patch applied can be reproduced with first samples from Kodi Wiki: http://kodi.wiki/view/Samples#Codecs.2C_Framerates_and_Subtitles\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koying": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/330a57399863141c3e16cb4d2731d759008f8d57", "message": "FIX: [droid;amc] arm issue under libc++"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13307", "title": "[WIP]: websocket does not handle frames > 1024 bytes", "body": "@Montellese @topfs2 There is a bug in our websocket implementation that it assumes that a whole websocket frame will hold in a socket buffer (currently 1024B)\r\n\r\nIf not mistaken, the RFC does not set a max value, so ideally, we should buffer on the websocket side until we get a full frame.\r\nWould one of you have time to properly fix this?\r\n\r\nFor my use case (a batch of 20 media details retrieval request, leading to a request of ~4KB), I just increased the tcp buffer, which is just a quick hack, ofc.\r\n\r\nThanks", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13191", "title": "CHG: Allow to downgrade resolution", "body": "Kodi already allows to \"upgrade\" resolution, eg from 1080p to 2160p.\r\n\r\nThis also allows Kodi to \"downgrade\" the resolution, eg from 1080p to 720p.\r\nReasoning is that the TV will always do a better job at upscaling than we do, so better switch to a resolution closest to the one of the video.\r\n\r\nI'm not sure of the reasoning for the 3D specific handling, tbh, so that might need rework.\r\nMy only personal use case is HTAB/HSBS, whose format is always 1080p.\r\nThe HDMI ref only define a 1080p 3D mode, so we might want to force to 1080p, possibly.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "notspiff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/7249e1b7f06a6a7a335fd6777320b5fe3ad9eaed", "message": "Merge pull request #13364 from ksooo/pvr-guide-channelgroups\n\n[PVR][Estuary] Guide window: Channel groups selector"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13371", "title": "fixed: show the actual set poster/fanart for sets", "body": "only show relevant art types in the Choose art dialog. @olympia", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13234", "title": "Refactor ServiceManager/ServiceBroker", "body": "This is the start of my service container refactor. see first commit for why I believe this approach is an improvement.\r\n\r\nIt's early, feel free to review but some things you can skip\r\n- yes, i'm initing services directly in Application right now. I wil change this in the end, but I want to see how things work out first. Ultimately, I hope to make this a map of types registered in one spot, and then have a separate call to bring services up. Bu to do this we need to change constructors to not do stuff before StartService is called so right now I do not try to factor it nicely into a function.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkerling": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/27a2e3d362b6ba04e5f1a558ad30a519a3d5a8bb", "message": "Revert \"[cmake] [wayland] Require wayland-protocols >= 1.12 for xdg_wm_base\"\n\nThis reverts commit 6b1e800e11ab82b544b4ff1883b789547d5cc01c."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2292165445877e56ba70d3607510662b18f62d6d", "message": "[wayland] Use xdg-shell.xml from waylandpp\n\nUbuntu 17.10 does not have recent enough wayland-protocols for building\nwith xdg-shell stable. To avoid having to package it or adding ifdefs\nto support building with older wayland-protocols, use xdg-shell.xml\nfrom waylandpp."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13333", "title": "Support for vaExportSurfaceHandle", "body": "\r\n## Description\r\nReorganize Vaapi EGL interop so we can also render with vaExportSurfaceHandle\r\n\r\nThis is WIP, but open for discussion.\r\n\r\nTODO:\r\n- [ ] Check whether this still works on intel, especially HEVC10\r\n- [ ] Modify interop check name to deep color instead of hevc (since it doesn't really check anything hevc-related)\r\n- [ ] Find out if this works reliably on AMD due to possibly missing vaSyncSurface support\r\n- [ ] Check vaapi and ffmpeg postprocessing/deinterlacing\r\n\r\n## Motivation and Context\r\nHardware decoding with AMD GPUs is only supported with this new method\r\n\r\n## How Has This Been Tested?\r\nRun-tested with H.264 and HEVC10 on Linux/Wayland/AMD GPU\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xhaggi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13390", "title": "[pm] resume last played media after sleep", "body": "Follow-up of #13138. I just want to push things forward and @Falcosc didn't find time to adjust his PR.\r\n\r\n> Auto resume the media which was used during enter sleep mode and resumes it on wake with forced play (playerstate handling is already implemented as part of resume point but I don't know why the player state is allways empty, this issue does force play on my PR)\r\nBut this is only the first step, a very basic solution which could be improved step by step.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ronie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13385", "title": "xbmcgui - add option to define listitem as folder", "body": "allow python scripts to define a listitem as a folder (python plugins can already do this).\r\n\r\nreasoning:\r\nin the globalsearch addon i create a list of tv shows and set content to tv shows.\r\nbut due to this code https://github.com/xbmc/xbmc/blob/c8e69045fe7d3e3dd72f011d535c256bfbe29998/xbmc/video/windows/GUIWindowVideoBase.cpp#L322-L330\r\nkodi will try to fetch episode info for those items from the db, unless you define the listitem as a folder.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13306", "title": "addonsettings - don't lowercase condition value", "body": "the addon settings migration (PR #12125) broke a few things, one of them being enable/visible conditions for addon setting.\r\n\r\nthis fixes the bug reported here: https://forum.kodi.tv/showthread.php?tid=321370", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "garbear": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13374", "title": "Games: Keyboard remapping support", "body": "This adds support for remapping keyboard keys in games. Similar to joysticks, keyboards are given a controller profile and mapped to libretro keys via the add-on's buttonmap.xml.\r\n\r\nFor reviewability, this PR has been split into 4 main commits that either add or remove something:\r\n\r\n* Keyboards added to Peripheral API (8e6a9ba6bd04b4f0cdfddbd364f925cdea0c5501)\r\n* Emulated joysticks removed (12e47eb9f6401d864d23ba65821145d5d45665cb)\r\n* Keyboards added to Controller Dialog (d2206e7a3f950a3e01f696ffbcf9ba61dba872d6)\r\n* Keyboards added to Game API (313bd8b3168f8e25aab1de04881189a90999caec)\r\n\r\nButtonmaps have been created for 13 emulator keyboards totaling 1,485 keys.\r\n\r\nNOTE:\r\n\r\nDue to a conflict, emulated joysticks have been dropped. This breaks devices that use keyboard drivers, like the X-Arcade Tankstick.\r\n\r\n## Motivation and Context\r\nFirst piece of the new Player Manager. Once keyboards have been abstracted on this level, they can easily emulate and by emulated by other controller types.\r\n\r\n## Screenshots (if appropriate):\r\n\r\nKeyboards have been added to the Controller Dialog. The first button in the features list is a \"Select key\" button:\r\n\r\n![screen shot 2018-01-15 at 4 58 36 pm 2](https://user-images.githubusercontent.com/531482/34967163-876b184c-fa15-11e7-96c2-035d3fe47756.png)\r\n\r\nPressing it will prompt the user to press a key:\r\n\r\n![screen shot 2018-01-15 at 4 58 52 pm 2](https://user-images.githubusercontent.com/531482/34967182-aba10276-fa15-11e7-976e-fd3fbdad518a.png)\r\n\r\nWhen the user presses the key, they'll be prompted to map it to a button or another key:\r\n\r\n![screen shot 2018-01-15 at 4 59 06 pm 2](https://user-images.githubusercontent.com/531482/34967196-bdd4d01c-fa15-11e7-8ddb-21d4c8c8303a.png)\r\n\r\n## How Has This Been Tested?\r\nTested with DOSBox on OSX. Most keys work.\r\n\r\nTesting needed for the following add-ons:\r\n\r\n- [ ] game.libretro.dosbox\r\n- [ ] game.libretro.fsuae\r\n- [ ] game.libretro.fuse\r\n- [ ] game.libretro.hatari\r\n- [ ] game.libretro.mame\r\n- [ ] game.libretro.o2em\r\n- [ ] game.libretro.pcem\r\n- [ ] game.libretro.prboom\r\n- [ ] game.libretro.scummvm\r\n- [ ] game.libretro.tyrquake\r\n- [ ] game.libretro.uae\r\n- [ ] game.libretro.uae4arm\r\n- [ ] game.libretro.vice\r\n\r\nTest builds have been launched for all platforms: http://jenkins.kodi.tv/view/Automation/job/BuildMulti-Choice/31/\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Associated PRs\r\n\r\nRequires API changes:\r\n\r\n- [ ] Peripheral API v1.3.6: https://github.com/xbmc/peripheral.joystick/pull/136\r\n- [ ] Game API v1.0.34: https://github.com/kodi-game/game.libretro/pull/29\r\n- [x] libretro API: https://github.com/libretro/RetroArch/pull/6119\r\n\r\nRequires controller profiles:\r\n\r\n- [x] https://github.com/kodi-game/kodi-game-controllers/pull/19\r\n\r\nRequire buttonmaps:\r\n\r\n- [ ] game.libretro.dosbox (https://github.com/kodi-game/game.libretro.dosbox/pull/6)\r\n- [ ] game.libretro.fsuae (https://github.com/kodi-game/game.libretro.fsuae/pull/1)\r\n- [ ] game.libretro.fuse (https://github.com/kodi-game/game.libretro.fuse/pull/5)\r\n- [ ] game.libretro.hatari (https://github.com/kodi-game/game.libretro.hatari/pull/4)\r\n- [ ] game.libretro.mame (https://github.com/kodi-game/game.libretro.mame/pull/3)\r\n- [ ] game.libretro.o2em (https://github.com/kodi-game/game.libretro.o2em/pull/2)\r\n- [ ] game.libretro.pcem (https://github.com/kodi-game/game.libretro.pcem/pull/2)\r\n- [ ] game.libretro.prboom (https://github.com/kodi-game/game.libretro.prboom/pull/4)\r\n- [ ] game.libretro.scummvm (https://github.com/kodi-game/game.libretro.scummvm/pull/14)\r\n- [ ] game.libretro.tyrquake (https://github.com/kodi-game/game.libretro.tyrquake/pull/2)\r\n- [ ] game.libretro.uae (https://github.com/kodi-game/game.libretro.uae/pull/1)\r\n- [ ] game.libretro.uae4arm (https://github.com/kodi-game/game.libretro.uae4arm/pull/1)\r\n- [ ] game.libretro.vice (https://github.com/kodi-game/game.libretro.vice/pull/1)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13151", "title": "Fix two skin-related crashes", "body": "This PR contains two fixes:\r\n\r\n* Fix segfault in guilib when `<itemlayout>` or `<focuslayout>` are missing or incomplete\r\n* Fix segfault on skin reload due to accessing items after their owner has been destroyed\r\n\r\n## How Has This Been Tested?\r\nFixes have been in my branch through most of the game OSD development.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lobermann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13373", "title": "fix segfault on palyback failed", "body": "As discussed in slack with @FernetMenta and @notspiff .\r\n\r\n> A quick explanation on the issue:\r\n> \r\n> In CApplication, on the GUI_MSG_PLAYBACK_STARTED Message \r\n> https://github.com/xbmc/xbmc/blob/master/xbmc/Application.cpp#L3879\r\n> There is the call to  g_infoManager.SetCurrentItem(*m_itemCurrentFile) which then in turn runs the CSetCurrentItemJob.\r\n> \r\n> Now, this job is accessing the member CGUIInfoManager::m_currentFile directly in that thread.\r\n> When in CApplication a GUI_MSG_PLAYBACK_STOPPED is happening (in case the playback fails) this is in turn calling g_infoManager.ResetCurrentItem() which \r\n> is then resetting the m_currentFile that is used by the CSetCurrentItemJob. \r\n> \r\n> So if there are any delays in the CSetCurrentItemJob, due to database access or anything else, we end up in a segfault within CGUIInfoManager::SetCurrentMovie.\r\n> I assume this also applies to CGUIInfoManager::SetCurrentSong and CGUIInfoManager::SetCurrentGame as they do it in more or less the same way.\r\n\r\n\r\nThis was fixed now by inheriting CJobQueue in CGUIInfoManager so there is a dedicated job queue with one worker for this. ResetCurrentItem() was also moved into a job to prevent it from running at the same time with SetCurrentItemJob(). A type was added to the jobs so that we only have one of the jobs in the queue at any time. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Paxxi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13366", "title": "[xbmc][windows] Fix a bunch of warnings for windows x64", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis takes us from ~1260 warnings to ~1030.\r\n\r\nLeft them as a few separate commits for now for easier review, should be squashed before merge.\r\n\r\nthis touches on your stuff @tamland  and @garbear so please have a look.\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13361", "title": "[xbmc] Added clang-format that roughly matches our current style", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis adds a .clang-format that tries to match our current style guidelines. One change is that it does wrap long lines so applying it on a whole file does result in a lot of changes.\r\n\r\nWe've discussed a few times how to go about changing the whole codebase and not come to any consensus so this PR isn't trying to solve that.\r\n\r\nHaving a .clang-format in the repo does make things simpler without large scale reformatting as it can be applied to a single file when it's being touched or using various IDE/extensions it can be applied to parts of a file being edited.\r\n\r\nI've used https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat for Visual Studio with good results.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nTo make it easy to review the style I did apply it to CApplication.\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13360", "title": "[xbmc] Link against curl instead of using dlopen.", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis replaces our dlopen usage of curl with regular linking\r\n\r\nRuntime tested on windows x64\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unbroken75": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13327", "title": "Defaults to release build", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nAdded --disable-debug to .configure in README.raspberrypi\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nStandard user does not need to build for debug. \r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Razzeee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13323", "title": "Add history table", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nThis is heavily work in progress and while it works at the moment it probably has some cases that re broken.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nThis replaces the old files `playCount` and `lastPlayed` columns with a `history` table. It has `dateWatched` and a reference to a file. For every time watched, we add a new row. \r\nSo this is much richer than the old fields, as we can have multiple lastPlayed/dateWatched entries for the same file. We're basically emulating the old fields while adding the new table to use in the future.\r\n\r\nThis first implementation however will focus on only having this internal and handling it correctly in core. We will need to expose it to the outer world in a later PR.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nVery little. It seems to work fine on migration and leanback. And it also seems to safe fine on `Set as watched`.\r\nIt also sets playCount to 0 instead of `null` at the moment, not sure if this causes regressions.\r\n\r\n- MySQL is completely untested as of now (might be broken due to me using subqueries, can't remember if those were bad for MySQL)\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n\r\n  \r\n  ", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "InuSasha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13318", "title": "sql-client: add support for mariadb-client", "body": "make it possible to link against mariadb-client instead of mysql\r\n\r\n## Description\r\nSearch explicit for libmariadb and mysql-header under include/mariadb/.\r\nAdditional added a test, to protect against using of mysql & mariadb at the same time \r\n\r\n## Motivation and Context\r\nmost distributions switch to mariadb, this follows up.\r\n\r\n## How Has This Been Tested?\r\ntested on top of LibreELEC master with MariaDB 10.2 and MySQL 5.7 as sql-server.\r\ntest-cases: \r\n - database migration from Video108 -> Video109\r\n - database migration from Music66 -> Music69\r\n - list movies\r\n - mark movie as seen\r\n - builds against mysql-client and mariadb-client and against both (as negative test)\r\n\r\nreallife test on top of KRYTON (LE 8.2.2), is started.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [X] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n\r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samnazarko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13290", "title": "CWinSystemRpi: ensure that we register the ALSA sink as well as PiSink is needed for external DACs", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n\r\nIt seems that after c0064a99d4cb13fbb77f6f411cba48a12ef50669, the AESink is tied to the windowing system. The ALSA sink does not seem to be registered elsewhere on RBP, which means that external DACs (USB and I2S) are not enumerated. \r\n\r\nThe patch was necessary to re-register ALSA sinks on RBP.\r\n\r\n## How Has This Been Tested?\r\n\r\nTested in OSMC v18 nightlies for Raspberry Pi with positive reports: https://discourse.osmc.tv/t/testing-kodi-18-leia-builds-for-raspberry-pi/20631/632\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ace20022": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13144", "title": "[videoplayer] DVDInputStream: Add an interface for stream selection.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13109", "title": "Do not scan archived volumes for external subs or audio.", "body": "This pr superseeds #9929", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tirithen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13139", "title": "Add mapping codes for the wiimote", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nAdd mappings for wiimote keys.\r\n\r\n## Motivation and Context\r\nIn multiple forums people are having problems with the wiimote in kodi, namely that only the d-poad works but it's not possible to use A/B/-/Home/+/1/2 buttons. The logs when pushing these buttons gives the following:\r\n\r\n```\r\n22:03:45.696 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:45.696 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(304)\r\n22:03:47.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:47.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(305)\r\n22:03:49.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:49.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(412)\r\n22:03:50.230 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:50.230 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(316)\r\n22:03:51.080 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:51.080 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(407)\r\n22:03:52.513 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:52.513 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(257)\r\n22:03:53.563 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:53.564 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(258)\r\n\r\n``` \r\nThe conclusion from several of the forum threads is that those codes was not mapped in LinuxInputDevices.cpp, hence this change.\r\n\r\nFirst time contributing here, so tell me if something more is needed.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkortstiege": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13088", "title": "[infoscanner] ensure we're only checking for .nomedia in folders (fixes #17651)", "body": "Ensure we're not doing pointless .nomedia checks on files. Regression was introduced with https://github.com/xbmc/xbmc/pull/12772\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nhttps://trac.kodi.tv/ticket/17651\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nBriefly tested on Linux.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835", "body": "Fixed in fadf1cd0da739e9cd14c5b70d9dc90d8d6dd8403\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732", "body": "congrats - the first xbmc repo pull processed :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000", "body": "friendly tip. you want to use git pull --rebase when you fetch upstream.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048", "body": "even if osx requires them for something else, this is correct. we need to have these under control. so test on osx, if it requires them for some other reason, put it under osx only...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790", "body": "please rebase your branch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636", "body": "Any particular reason? Can't see any drawbacks to doing this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953", "body": "DISPLAY is only ever unset if a) X server isn't running, or b) user has ssh'ed into a remote machine and attempted to start XBMC without setting DISPLAY first\n\nCurrently in these cases, XBMC segfaults with a fairly unintelligible (to the average user) python backtrace\n\n```\n$ xbmc\n/usr/lib/pymodules/python2.6/gtk-2.0/gtk/__init__.py:57: GtkWarning: could not open display\n  warnings.warn(str(e), _gtk.Warning)\nError: unable to open display \n/usr/share/xbmc/FEH.py:69: Warning: invalid (NULL) pointer instance\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:69: Warning: g_signal_connect_data: assertion `G_TYPE_CHECK_INSTANCE (instance)' failed\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:83: GtkWarning: IA__gtk_settings_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:83: Warning: g_object_get: assertion `G_IS_OBJECT (object)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:88: GtkWarning: Screen for GtkWindow not set; you must always set\na screen for a GtkWindow before using the window\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_pango_context_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_font_description: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_base_dir: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_language: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_new: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_text: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_alignment: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_ellipsize: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_single_paragraph_mode: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_width: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_get_extents: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_default_colormap: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_colormap_get_visual: assertion `GDK_IS_COLORMAP (colormap)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_root_window: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_window_new: assertion `GDK_IS_WINDOW (parent)' failed\n  window.show_all ()\nSegmentation fault\n```\n\nIf you prefer, we could just immediately return the error message \"xbmc: no DISPLAY variable set\" from xbmc.sh (and not try to set it to :0), hence avoiding the backtrace. That would at least make it easier for the user to find their mistake.\n\nHowever, it likely fixes the issue in 50% of the cases if we do also set it to :0 and attempt to continue, and it doesn't do any harm?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hudokkow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758", "body": "Thanks.\n\n;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986", "body": "Thanks for the tips, guys. I'm not used to git, so it's kinda 'learn as you go' for me.\n\nIt seems you're not so grumpy after all, spiff. :))\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "theuni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348", "body": "What spiff said. Also, if you're going to submit a request for a few commits, may as well do them all at once.\n\nThanks for the contributions, and for our first pull requests!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823", "body": "I agree with Bob, patching FEH is the way to go.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593", "body": "Please do not push needless merge commits into git. You should always be using 'git pull --rebase' for mainline.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115", "body": "For future reference, it would have been nice to have these commits as a real merge, where the merge commit references the ticket number.\n\nIf git merge detects that it can be merged as a fast-forward, it will. So need to use 'git merge --no-ff'.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201", "body": "Sure, though having a real merge commit allows for much easier bisection. It also makes it clear that the series of commits should be seen as a group.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "davilla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072", "body": "did you check that none of the dyloaded libs need libssl or libcrypto ? \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sraue": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181", "body": "i have build xbmc yesterday with this and without an installed openssl. it works here (except ssl support in my external python for sure). an grep over the xbmc sources shows me thats needed only for python.\n\nfor sure it would be nice if anyone can test this patch with windows/macos etc too...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "CrystalP": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266", "body": "Don't worry about Windows, it doesn't use configure and always has an internal Python.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538", "body": "Pulled & merged as 5e6d3fd, see details in ticket.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284", "body": "All that commit did was move files that were dumped at the root of the xbmc project, due to a weird merge. The rest is untouched, and vastly different than before the reshuffle.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040", "body": "oops, the second file wasn't supposed to be committed. Sure that can go in MathUtils but there will still be #ifdefery. The function is already defined for MSVC and that one conflicts.\n\nExcept for the inline keyword I fail to see the difference between the current code and what you wrote.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681", "body": "Why the effort? System libraries already have abs() for most interesting types. This one is the exception.\nSeems to me the function belongs to some linux-specific header. MSVC already has the function.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Voyager1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043", "body": "rebase done, thanks for the tip.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158", "body": "corrected cosmetics\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213", "body": "closing and replacing with another pull request from separate branch.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918", "body": "who's currently responsible for the dvdplayer code? (haven't seen elupus contributing lately).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bobo1on1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085", "body": "Sorry, I'd rather not do this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823", "body": "If DISPLAY is not set, something is wrong, the user should fix that instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906", "body": "DISPLAY is something the system should set, I'm fine with a big fat warning if it's not, but we shouldn't set it ourselves, it's not our job.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009", "body": "Why not make abs a template function instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "topfs2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068", "body": "I don't see the reason for this? You can just call stopClient() followed by startClient if you need to reconnect. It makes more sense also to enforce stop before start IMO\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076", "body": "I agree with Bob also, setting it randomly is a hack at best\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jmarshallnz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837", "body": "A couple of points:\n1.  Nice :)\n2.  I don't like using AppendFormat/Format when FormatSQL is safer for db actions.  eg your where and order clauses would have to be PrepareSQL'd before sending them to this method.  This either needs documenting or dropped in favour of PrepareSQL.\n3.  bReturn is not required in DeleteValues or ExecuteQuery, QueueInsertQuery, CommitInsertQueries - just return directly.\n4.  iReturn is not required in ResultQuery\n5.  I prefer m_multiWrite, but don't really care ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977", "body": "Any particular reason why you don't like return statements in the middle of methods (or specifically try/catch blocks?) or just a coding style thing?  I don't really mind either way - just interested :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437", "body": "<= might be safer?  It's correct as-is though (I'm not 100 what SplitString does on failure)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140", "body": "Right, well I can definitely see the point of having the ticket number in the commit msg, though I could have popped that into the last one and it still would be fine, right?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841", "body": "I suggest we remove any direct usage of OutputDebugString outside of CLog as much as is feasible - no reason to have it if CLog::Log() does the same thing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907", "body": "Agreed - almost all of them can be removed.  CGUITextureManager::Dump and CueDocument ones can be switched to CLog.  All others other than sqlite collision one can be dropped as far as I'm concerned (not sure what mp_msg is doing...)  Not sure what to do with the sqlite collision one - perhaps dump it to the log if _DEBUG is enabled?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "opdenkamp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290", "body": "I don't like return statements in the middle of a methods. that's what the bReturn/iReturn vars are for. bit overkill in the QueueInsertQuery() to do it like that, so I'll change it to return directly, but for the other ones, I don't like the return to be within the try-catch block.\n\nI'll have a look at the rest. thanks for the review.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101", "body": "coding style, and not just for try-catch but for all methods. code is usually easier to read if you don't return in the middle of methods. 1 entry point, 1 exit point. doesn't really matter for these little methods, but in bigger ones it does.\n\nit's been hammered into my head by a teacher at the uni :-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368", "body": "... yes, I won the first gitwtf award :(\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "halorgium": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003", "body": "startClient() requires all the arguments to be passed in. \nI agree that it should guard against starting the client twice. \nThis makes me think that restarting overcomplicates the client. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "firnsy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189", "body": "Saviq, nice work.\n\nI've pulled into my tree for further and will push into mainline once completed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Saviq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938", "body": "Here's a bug I reported about the issue - http://trac.xbmc.org/ticket/11120 - please comment / close when applicable.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450", "body": "This commit breaks ./configure on Linux (at least openSUSE Factory and Gentoo). It only happens in a clean environment, though:\n\n```\n$ git-clean -dxff # this removes all the files that don't belong to the git repo, ignored or not\n$ ./bootstrap\n$ ./configure\n[...]\nUsage: dvdnav-config [OPTIONS] [LIBRARIES]\nOptions:\n    [--prefix[=DIR]]\n    [--exec-prefix[=DIR]]\n    [--version]\n        [--libs]\n[--cflags]\n/home/michal/dev/xbmc/xbmc/lib/libdvd/libdvdnav/../libdvdread/obj/dvdread-config returned an error. Can't proceed\nconfigure: error: Submodule lib/libdvd/libdvdnav failed to configure\n```\n\nThe $MAKE isn't set and `dvdread-config` from $PATH is executed as a consequence. Exporting $MAKE makes the problem go away.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630", "body": "Just make it a\n    MAKE=${MAKE:-make}\notherwise this commit won't have any effect.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "taxigps": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640", "body": "Ah, forget to set user.name in my new installed git\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "queeup": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527", "body": "To bad for Turkish users. It supposed to scan for folder names but I made a mistake and translate scan for file names :( But now corrected.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530", "body": "Are you planning to release new Dharma for bugs fix or something? I correct my big mistake on string.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wsoltys": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313", "body": "worked fine for me on a clean build but this one is nicer ofc. :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879", "body": "ah didn't check. They don't do it anymore?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986", "body": "Haha, ok. So time for another wtf git award :)\n<git rant on>\nCan't remember similar things with svn. But now we might have enough devs for doing things twice :P\n<git rant off>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821", "body": "Anssi is right. please use the file provided in include-xbmc-win32.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "chadoe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855", "body": "hm they had a home, they were matching the reshuffle filesystem layout...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001", "body": "just would like to find files in the project in the same place as on disk now that files have been moved around on disk thats all.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Fneufneu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540", "body": "oops sorry,\ni think we can define MAKE=make in top of case $host part\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sitzm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529", "body": "with your changes, linux does not compile anymore with the follwing error:\nIn file included from karaokelyrics.cpp:26:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:137: error: \u2018int64_t\u2019 does not name a type\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h: In function \u2018void MathUtils::hack()\u2019:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:149: error: \u2018abs\u2019 is not a member of \u2018MathUtils\u2019\nmake[2]: **\\* [karaokelyrics.o] Error 1\n\nThis can be fixed with including stdint.h in MathUtils.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "elupus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119", "body": "Could you tell me why? We shouldn't need it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "anssih": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151", "body": "It is needed for LATM AAC. It can be removed once we update ffmpeg, but I'm waiting for some Windows developer to test it. (https://github.com/xbmc/xbmc/pull/18)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716", "body": "Hmm, \"lib\\ffmpeg\\include\\libavutil\\avconfig.h\" was a static file, while \"lib\\ffmpeg\\libavutil\\avconfig.h\" is generated by ffmpeg configure. I was told that ffmpeg configure might not have been run when the XBMC project is build in VS, which prevented the use of \"lib\\ffmpeg\\libavutil\\avconfig.h\".\n\nIf that is correct, you'll need to use \"lib\\ffmpeg\\include-xbmc-win32\\libavutil\\avconfig.h\" instead. If not, I'll just remove the static version, then.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "blinkseb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720", "body": "I was not aware of that, sorry! o\nI' ve built ffmpeg right before building xbmc that's why i've found the file here!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "vkosh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644", "body": "I actually wonder why do recordings have string IDs? Maybe for some backend-specific historical reasons. But 1024 is the length of PVR_RECORDING.strRecordingId.\nI propose to use VARCHAR(255) with value length check during serialization to prevent overflow, or maybe just to use TEXT type.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682", "body": "++\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695", "body": "Yes it does work because boost:shared_ptr overloads operator*, and epgTag->foo() - doesn't because CFileItem hasn't constructors for *Ptr types.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697", "body": "++ for storing epg tag pointer.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492", "body": "It doesn't work this way actually because item is of CGUIListItemPtr type, which sould be casted to CFileItem to get epg info.\nThe only alternative to the cast is to create fileItem explicitly and get the tag from it, e.g.:\n<code>CFileItemPtr fileItem(new CFileItem(*item));</code>\nor\n<code>CFileItemPtr fileItem(new CFileItem(item.get()));</code>\nand then\n<code>fileItem->GetEPGInfoTag()->GenreType()</code>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333", "body": "It's just here for readability. The code is similar to one for playing channel by id above (see line 515).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921", "body": "IMO the separate buttons is better in two reasons: usability of shift button and ability of symbols charset extention (e.g. separate charsets for symbols and for shift+symbols).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959", "body": "Added onlyCheckLanguage check (not used though).\nAs for moving main layout loading down the locale specific langinfo.xml check - the main layout must be loaded in any case otherwise keyboard dialog will not work.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975", "body": "Yes. The keyboard dialog don't work without layouts, so at least main one should present. The previous layouts should remain in case of error. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983", "body": "I need std::wstring's to get utf8 character by its index. std::string works with bytes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012", "body": "There are two fixed layouts because they are related to languages: main - for default language (English) and alternative - for user language. So user can't select more than two layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019", "body": "Removed pair and renamed map. Map type can be used outside by calling static LoadKeyboardLayouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035", "body": "I tried to implement the layouts in less invasive way for skins in the start of the PR. But in current concept I can't see a way to implement layouts without breaking skins.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046", "body": "Removed operator!= and added HasAltKeyboardLayout.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051", "body": "Yep\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060", "body": "This leads to errors of passing \"this\" as const (even with const modifier for related KeyboardLayout getters).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748", "body": "Good point, but I still think that shift and symbols are quite a different kind of modifiers to merge them on one button. Shift just changes letters case while symbols turns on sublayout with totally different charset (so it's not a modifier actually).\nI've found two kinds of virtual keyboards: with (for example http://goo.gl/B946t6) and without (http://goo.gl/LbwHGC) symbols switch. The first kind used when there is no much space to place digits and symbols with letters (that's our case), and the second one uses shift as the symbols switch for digits row.\nWe could add more symbols sets in the future (e.g. smiles or whatever) and use cycling for \"symbols\" button. But \"true\" modifiers should be represented as standalone buttons I think.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779", "body": "I agree, but all loaded layouts should be accesible from the one place (e.g. for settings). On the other hand the second instance of CLangInfo is redundant for loading layouts only except of using separate method for this. The implementation will depend on chosen solution between two fixed/multiple user selected layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911", "body": "Ok. I'm not a C++ programmer as you have probably noticed :) So if you suggest a solution I will appreciate.\nI have utf8 string in std::string and I need to have utf8 std::string on output containing i'th character of s. Something like code below but for utf8:\nstd::string strIn = \"...\";\nstd::string strOut;\nstrOut = strIn.substr(i, 1);\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001", "body": "I agree, cycling is better in UI. As for more than two layouts (more than one per language) - I just can't imagine the use case. Why user whould want to switch between ABC and QWERTY or even more within one language layouts set?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147", "body": "Thanks for the aiming. I'll think about this when we come to solution with modifiers and layouts switching.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897", "body": "Such an initialization is everywhere in pvr code. Should I change it for the PR related code or everywhere?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917", "body": "tag can't be null here otherwise a lot of stuff will break. But ok, I'all add the check.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959", "body": "Just removed the ITR types ) As @jmarshallnz mentioned in https://github.com/xbmc/xbmc/pull/4242#discussion-diff-12038835 map typedefs have CamelCase style. So what's the naming convention for iterator types? Is there any coding style document?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976", "body": "See https://github.com/xbmc/xbmc/pull/3900#discussion-diff-8560519\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981", "body": "CPVRRecordingUid used as a key in std::map\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039", "body": "Yep there is PVR_VIRTUAL_CLIENT_ID (-1) in PVRClient.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "diederich": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624", "body": "Thanks for jumping in @Memphiz - and yes, sounds sane what memphiz says.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}