{"_default": {"1": {"bedge": {"issues": [{"url": "https://api.github.com/repos/facebook/sparts/issues/109", "title": "No flask inregration?", "body": "Would be nice to use with existing flask apps that need additional services.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fmoo": {"issues": [{"url": "https://api.github.com/repos/facebook/sparts/issues/107", "title": "Flaky daemonize test", "body": "test_daemon.py is failing sporadically on my linux desktop:\n\n```\n===================================================================================================== FAILURES ======================================================================================================\n___________________________________________________________________________________________ SimpleTestCase.test_daemonize ___________________________________________________________________________________________\n\nself = <tests.test_daemon.SimpleTestCase testMethod=test_daemonize>\n\n    def test_daemonize(self):\n        if not HAS_DAEMONIZE:\n            raise Skip(\"need `daemonize` for this test case\")\n\n        def daemon_helper():\n            time.sleep(100)\n            self.fail()\n\n        with NamedTemporaryFile() as tf:\n            # Fork so daemonizing the current process does not mess up with the\n            # test suite.\n            child_pid = os.fork()\n            if child_pid == 0:\n                try:\n                    daemon.daemonize(daemon_helper, name='sparts_unittest',\n                                     pidfile=tf.name, logger=self.logger)\n                except SystemExit:\n                    # Catch the daemonize library's attempt to sys.exit()\n                    pass\n            else:\n\n                def checkdaemon():\n                    try:\n                        return daemon.status(tf.name, self.logger)\n                    except ValueError:\n                        return False\n\n                # Eliminate the race condition waiting for\n                # daemonize.Daemonize() to create *and* write the pid to the\n                # pidfile.\n                timer.run_until_true(checkdaemon, timeout=1.0)\n\n                self.assertTrue(daemon.status(tf.name, self.logger))\n>               self.assertTrue(daemon.kill(tf.name, self.logger))\n\ntests/test_daemon.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python2.7/tempfile.py:427: in __exit__\n    self.close()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <closed file '<fdopen>', mode 'w+b' at 0x7f03d84dfed0>\n\n    def close(self):\n        if not self.close_called:\n            self.close_called = True\n            self.file.close()\n            if self.delete:\n>               self.unlink(self.name)\nE               OSError: [Errno 2] No such file or directory: '/tmp/tmpRNzIO8'\n\n/usr/lib/python2.7/tempfile.py:418: OSError\n----------------------------------------------------------------------------------------------- Captured stderr call ------------------------------------------------------------------------------------------------\nDEBUG:TestService:All tasks started\nDEBUG:TestService:VService Active.  Awaiting graceful shutdown.\n============================================================================================== short test summary info ==============================================================================================\nFAIL tests/test_daemon.py::SimpleTestCase::test_daemonize\nSKIP [1] /home/pete/src/sparts/tests/test_fb303.py:13: Skip: thrift is required to run this test\nSKIP [1] /home/pete/src/sparts/tests/thrift/test_compiler.py:12: Skip: Unable to find thrift binary on this system\nSKIP [1] /home/pete/src/sparts/tests/thrift/test_client.py:11: Skip: Need thrift language bindings to run this test\nSKIP [1] /home/pete/src/sparts/tests/tasks/thrift/test_multiplexed.py:18: Skip: Need thrift language bindings to run this test\nSKIP [1] /home/pete/src/sparts/tests/tasks/test_thrift.py:15: Skip: Need thrift language bindings to run this test\n============================================================================ 1 failed, 70 passed, 5 skipped, 2 warnings in 4.91 seconds =============================================================================\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/99", "title": "Race condition in failed process handling", "body": "... causes TestSelectTask.test_popen_communicate_fail to be flaky\n\n```\n=================================== FAILURES ===================================\n__________________ TestSelectTask.test_popen_communicate_fail __________________\n\nself = <tests.tasks.test_select.TestSelectTask testMethod=test_popen_communicate_fail>\n\n\u001b[1m    def test_popen_communicate_fail(self):\u001b[0m\n\u001b[1m        future = self.task.popen_communicate(\u001b[0m\n\u001b[1m>           'false', shell=True)\u001b[0m\n\ntests/tasks/test_select.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsparts/tasks/select.py:146: in popen_communicate\n\u001b[1m    h = ProcessCommunicateHandler(proc, self)\u001b[0m\nsparts/tasks/select.py:265: in __init__\n\u001b[1m    self.future.set_running_or_notify_cancel()\u001b[0m\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Future at 0x7f44c23c3690 state=finished raised ProcessFailed>\n\n\u001b[1m    def set_running_or_notify_cancel(self):\u001b[0m\n\u001b[1m        \"\"\"Mark the future as running or process any cancel notifications.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            Should only be used by Executor implementations and unit tests.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            If the future has been cancelled (cancel() was called and returned\u001b[0m\n\u001b[1m            True) then any threads waiting on the future completing (though calls\u001b[0m\n\u001b[1m            to as_completed() or wait()) are notified and False is returned.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            If the future was not cancelled then it is put in the running state\u001b[0m\n\u001b[1m            (future calls to running() will return True) and True is returned.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            This method should be called by Executor implementations before\u001b[0m\n\u001b[1m            executing the work associated with this future. If this method returns\u001b[0m\n\u001b[1m            False then the work should not be executed.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            Returns:\u001b[0m\n\u001b[1m                False if the Future was cancelled, True otherwise.\u001b[0m\n\u001b[1m    \u001b[0m\n\u001b[1m            Raises:\u001b[0m\n\u001b[1m                RuntimeError: if this method was already called or if set_result()\u001b[0m\n\u001b[1m                    or set_exception() was called.\u001b[0m\n\u001b[1m            \"\"\"\u001b[0m\n\u001b[1m        with self._condition:\u001b[0m\n\u001b[1m            if self._state == CANCELLED:\u001b[0m\n\u001b[1m                self._state = CANCELLED_AND_NOTIFIED\u001b[0m\n\u001b[1m                for waiter in self._waiters:\u001b[0m\n\u001b[1m                    waiter.add_cancelled(self)\u001b[0m\n\u001b[1m                # self._condition.notify_all() is not necessary because\u001b[0m\n\u001b[1m                # self.cancel() triggers a notification.\u001b[0m\n\u001b[1m                return False\u001b[0m\n\u001b[1m            elif self._state == PENDING:\u001b[0m\n\u001b[1m                self._state = RUNNING\u001b[0m\n\u001b[1m                return True\u001b[0m\n\u001b[1m            else:\u001b[0m\n\u001b[1m                LOGGER.critical('Future %s in unexpected state: %s',\u001b[0m\n\u001b[1m>                               id(self.future),\u001b[0m\n\u001b[1m                                self.future._state)\u001b[0m\n\u001b[1m\u001b[31mE               AttributeError: 'Future' object has no attribute 'future'\u001b[0m\n\n.eggs/futures-2.2.0-py2.7.egg/concurrent/futures/_base.py:500: AttributeError\n----------------------------- Captured stderr call -----------------------------\nDEBUG:TestService:All tasks started\nDEBUG:TestService:VService Active.  Awaiting graceful shutdown.\nINFO:TestService:Waiting for tasks to shutdown gracefully...\nDEBUG:TestService:Waiting for <sparts.tasks.select.SelectTask object at 0x7f44c23b5fd0> to stop...\nDEBUG:TestService.SelectTask:Thread SelectTask exited\n=========================== short test summary info ============================\nFAIL tests/tasks/test_select.py::TestSelectTask::test_popen_communicate_fail\nSKIP [1] /home/travis/build/facebook/sparts/tests/tasks/test_dbus.py:12: Skip: dbus support is required to run this test\n\u001b[1m\u001b[31m================ 1 failed, 71 passed, 1 skipped in 6.05 seconds ================\u001b[0m\ntravis_time:end:1aface40:start=1427833958142321795,finish=1427833992678561482,duration=34536239687\n\u001b[0K\n\u001b[31;1mThe command \"python setup.py test\" exited with 1.\u001b[0m\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/94", "title": "Support persistence in PollerTask", "body": "Add a flag that will enable writing fetched values to disk, restore on startup.\n\nadd a validate hook to verify the contents in case the format changed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/94/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/93", "title": "gflags support", "body": "It's common to use py wrapped cpp libraries that use gflags.\n\nBuild a bridge to expose any gflags defined in this way theough argparse, and preferably the options interfaces as well\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/93/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/92", "title": "Support for triggering in-thread execution of `PeriodicTask`", "body": "Maybe called `trigger()`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/92/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/90", "title": "Switch from `six` to `python-future`", "body": "`six` is nice, but `python-future` provides more compatibility (e.g., backports), useful for obsoleting some other modules/dependencies like ordereddict, and futures\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/90/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/85", "title": "-W (--warnings) option with default to error", "body": "Support a flag like python's -W\n\nDefault should be -Werror instead of -Wdefault\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/85/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/82", "title": "Thrift usage statistics", "body": "fbthrift's python implementation provides `TProcessorEventHandler` hooks; this allows us to monitor thrift server method usage and errors, and potentially even call duration.\n\nLet's figure out how to get this functionality for sparts, either by switching to fbthrift, conditionally using the API (if present), or emulating it with some kind of dynamic TProcessor subclass or wrapper.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/82/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/81", "title": "thrift libraries incompatible with py3k", "body": "Currently, sparts' thrift support depends on [apache thrift](https://github.com/apache/thrift), which (to my knowledge) does not generate py3k compatible code.\n\n[fbthrift](github.com/facebook/fbthrift)'s compiler is capable of generating py3k compatible code, but (a) its different command line arguments are incompatible with `sparts.thrift.compiler` and (b) the fbthrift Python bindings are not appropriately packaged (e.g., on pypi)\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/81/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/80", "title": "Unittest logspew in tests/tasks/test_tornado.py with python-3.4", "body": "Since effectively enabling -Wall in unit test runs, the following logs appear when running: `py.test tests/tasks/test_tornado.py` with python-3.4.0.\n\n```\nException ignored in: <_io.FileIO name=11 mode='wb'>\nResourceWarning: unclosed file <_io.FileIO name=11 mode='wb'>\nException ignored in: <_io.FileIO name=10 mode='rb'>\nResourceWarning: unclosed file <_io.FileIO name=10 mode='rb'>\n```\n\nThis does not repro with python 3.3.5:\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/80/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/79", "title": "Automatic man-page generator", "body": "Provide some hooks to generate a man page file for the configured arguments and docstrings.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/79/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/77", "title": "Enable OSX travis support", "body": "Might be tricky since we build the thrift compiler from source\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/73", "title": "Rate limit helpers / hooks for QueueTask", "body": "", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/73/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/71", "title": "Declarative, bindable events", "body": "We use `threading.Event()`s in a couple of places in code.  Making these `_Bindable` class attributes will allow us to define them declaratively and enable them to be more easily exported.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/69", "title": "Published documentation", "body": "As part of the build process, publish documentation.  Possibly to https://pythonhosted.org/ ?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/69/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/63", "title": "Auto-Reconnect support for ThriftClient", "body": "If we're re-using the client and it gets timed out, let's reconnect automatically.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/63/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/61", "title": "Fb303++", "body": "fb303 only provides so much extra value.  A base sparts service can build on top of this:\n- clearWarnings, getWarnings\n- exportedValues\n- getTaskTracebacks\n- getMemTypeStats\n- getCpuUsage\n- remote/local debug hooks\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/61/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/58", "title": "Unittests for dbus", "body": "", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/58/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/54", "title": "Make it easier / better to work with tornado web", "body": "Tornado's http object model is fairly verbose.  On top of that, it's not super easy to transparently integrate in a way that results in good monitoring / metrics\n\nDo something about this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/54/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/52", "title": "CronTask", "body": "Like PeriodicTask, but supporting cron spec.  Maybe a parent class of Periodic?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/49", "title": "Thread safe counters", "body": "Currently they're not really thread safe\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/49/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/48", "title": "Infinite windows for samples", "body": "Add ability for samples to export an \"infinite\" time window.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/48/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/42", "title": "Allow setting per-task log levels", "body": "", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/42/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/41", "title": "Thrown TryLater should support a delay/backoff", "body": "Right now, TryLater's work or periodic and queue executions by re-running and/or re-inserting the work into the queue instantly.\n\nSupport setting an attribute on TryLater() that contains the time to wait in ms before trying again.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/39", "title": "inotify task", "body": "A common use case is watching a directory / tree for changes and acting on changes.\n\ninotify (e.g., pyinotify) is the proper way of handling this.\n\nCreate a task for monitoring a filesystem path for changes.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/39/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/35", "title": "Configuration helpers", "body": "Support auto-configuration (e.g., of command line arguments' defaults) in a sensible and/or intuitive way.\n\nThat is, provide some API for a service to specify that it should have its configuration auto-loaded from some well-defined set of locations.  This should use well-known native or opensource APIs.\n\nThe configuration should be in a format that is intuitive to read/set-up but should also be comprehensive.  Ultimately, it should translate to specifying defaults for command line arguments (e.g., sparts \"options\").\n\nWhen running with -h, the %(default)s in the helptext should reflect the results of found configuration files.  Additionally there should be some log message or stderr output that indicates what configuration file is being used during startup.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/34", "title": "scribe integration?", "body": "Support logging messages directly to scribe.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/28", "title": "Documentation", "body": "generate proper pydocs for everything.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/28/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/c03df928677444ad638d10fa96f4144ca4d644e1", "message": "Merge pull request #110 from tiagmoraismorgado/patch-1\n\nfixing minor spelling typos"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/046ea44920f90e494a81e2a21bd8a27577e12fe2", "message": "Merge pull request #108 from djipko/master\n\nQueuTask: prevent unhandled exception from tearing the main loop down"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/abd52e9c11bd4ddb1172fb4eee409c9653deb568", "message": "Attempt to fix race in SelectTask\n\nLet's mark the future as running as soon as we create it.  By the time\nProcessStreamHandler() is instantiated, the caller has passed us an\nalready running Popen, so it doesn't make much sense to create the\nadapter before setting this.\n\nThis should fix #106 and #99"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/591fa3c18a129112d565c5a28f78c270f397aa6e", "message": "Officially add 3.5 support"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/3ad41380cb17493a3b63648c75d3d522bdf58016", "message": "Remove python 3.2 support"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9a51c65377510d459ca757b7cdb5a7c51f8225a1", "message": "Merge pull request #104 from chantra/fix_nargs\n\n[option] handle nargs properly"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e4ea791b566d0f33660fde8b3f22a11da9427b8c", "message": "More thrift.compiler tweaks\n\n- whitespace fix\n- use six.iteritems instead of .iteritems() method\n- explicitly pass mode='w' when writing to NamedTemporaryFile for importThriftStr"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/46804af8c730ff3165fcce0408e1a12d5920b5fb", "message": "Make compiler.{get|require}_executable public\n\nSome internal functions in thrift.compiler are reusable in unit tests.\nExplicitly expose them and use them."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f52d73ad775d0062e665a5647f6d808bcaabae9f", "message": "Version bump to 0.7.3"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/53307a2c35a1351a69606290693ce9ef777995eb", "message": "Correctly skip test_multiplexed when thrift bindings not present"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e5f869066501d429618e82725c04c8bd1b627fbd", "message": "Fix bug in file unittest exposed by mock changes\n\nPreviously, Mock was returning a mock object on accesses to all\nundefined attributes, so when calling `assert_called`, we'd get\nback a mock object which is implicitly True.\n\nNewer versions of mock seem to correctly raise an AttributeError,\nso we need to use the correct function."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/9906c90b2c5455ffc7702c8cb99cf8cde55a3bd8", "message": "Include TMultiplexedServer, CppServer CHANGES"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/ca0037e4e7d5983017c169a3d8ae0a5d7a31cddf", "message": "Add a test case to verify Multiplexed server/client functionality"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/2e999a817fbe4867151640b828c7010bcf6354ae", "message": "[thrift] Add more useful error for multiple processors when MULTIPLEX=False\n\nSuggest setting MULTIPLEX = True on your server"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e7b956fa16e575ac58f9d703334c13dff4956259", "message": "TMultiplexed{Service|Protocol} Proof of Concept\n\nFixes #102"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/f1187e90c611a1bc64aa3cc26d0898e86a44db67", "message": "Some comment updates in ThriftServerTask"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/c7a26a1798dc56f7eab849be0f5ccff9dd2231bd", "message": "Initial version of TCppServer-based ThriftServerTask"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/421d29f9108537fa492950f8e8ca2b9c2bc2dbea", "message": "Prefer thrift1 (fbthrift) compiler when available"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/267db13f50da433cb0a28bb1e2c47deb788c53be", "message": "Refactor sparts/tasks/thrift.py into submodules"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/e4e2ac67b1b74925c5d4effac955db1dafb549a9", "message": "Updated CHANGES.txt for recent changes"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/7b7eee3493ffd806fb148794c984a7892f156eaf", "message": "ThriftClient should throw during constructor on invalid module\n\nWhen the compiled thrift module is passed instead of the service module,\nthrow in the constructor with a helpful error message."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/84dd4b80716c406b03d6843b7431e21920e4ff05", "message": "Fix sparts.thrift.compiler convenience compile method"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/a95c6b430cbeea5262de58e74f6ef6733daf2cd5", "message": "Merge pull request #101 from bboozzoo/bboozzoo/sdist-license\n\nmanifest: add manifest"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9840610", "body": "Twisted.mail provides an IMAP server implementation.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9840610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853424", "body": "I renamed this to keep just the service framework.  Invalid.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853428", "body": "I renamed this to keep just the service framework. Invalid.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/9853428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10047344", "body": "that wasn't so bad.\n\nfixed by 6b6f1350494cabb5782be058a2eff60279e8d07c\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10047344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048364", "body": "implemented via 5d0f6744eeaece6663f062e3bc04a878b0aa815b\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048470", "body": "http://nagios.sourceforge.net/docs/3_0/pluginapi.html\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10048470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050420", "body": "Done in 4a9079882ac7ff36aecb0559c0615573e21484cc\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050652", "body": "done.  Also added TryLater support.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10050652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077610", "body": "This is almost ready for primetime (see my \"dbus\" branch).  I'm having trouble with signal handling after restarting the server once due to some weird interactions with the glib / gobject MainLoop.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077642", "body": "This is also for compatibility with fb303.\n\nWant to make it declarative, like with \"options\"\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10077642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10113577", "body": "Done and pushed\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10113577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10265101", "body": "https://github.com/fmoo/facebook-dbus\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/10265101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22370337", "body": "Fixed by 4db3c5447be3891e0beecc8e5ba17ead422e9ff5\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22370337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22579802", "body": "--install is done, but this still needs --uninstall.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22579802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22580070", "body": "This should possibly depend on / subclass #38 \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/22580070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39630181", "body": "Can you rebase?  I just made a couple of refactors to the initialization flow in 80a406557e9b7e249d35e21aa1bf1a72a38b351e, 40212976734e20aeb3be64f1109bd73127727f03, and 97b562a0ab1fb1be379c5941abeb1f45861d49ce\n\nAlso, I messed up and forgot to commit 8304ef012c51e9eadfa761ba73d450ff4b261196\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39630181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39699640", "body": "I've merged / tweaked most of the commits except for the (last) vfb303 bugfix because I believe I'm (ab)using it in the dbus implementation and casting to str() will eliminate the native types / variant support.\n\nThat might be fine, but I should change the method from variant to str.  There might need to be some changes to the corresponding `setOption()` path if I do that though.\n\nI'll take another look at it tomorrow night.\n\nI don't think dbus works well on anything other than Linux\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39699640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39774227", "body": "I cut #65 to fix the getOption thing long term.  I'll close this out.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39774227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39791195", "body": "Looks good!\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39791195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802897", "body": "oops!\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802997", "body": "Deadlocks (or rather, unexpected blocking) can occur if you set the queue size too low and do a blocking queue.put() in a place where you are not expecting to block.\n\nIt's a good way to put backpressure on other tasks, but will require folks to take care is all.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39802997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40174166", "body": "landed python 3.3 for core sparts and tornado.\n\nthrift or twisted support are currently not working.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40174166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40176637", "body": "Seeing similar issues with getCounter for a nonexistent value:\n\n```\nTraceback (most recent call last):\n  File \"/home/pete/src/sparts/externals/thrift/lib/py/thrift/server/TNonblockingServer.py\", line 54, in run\n    processor.process(iprot, oprot)\n  File \"/home/pete/src/sparts/sparts/fb303/FacebookService.py\", line 509, in process\n    self._processMap[name](self, seqid, iprot, oprot)\n  File \"/home/pete/src/sparts/sparts/fb303/FacebookService.py\", line 572, in process_getCounter\n    result.success = self._handler.getCounter(args.key)\n  File \"/home/pete/src/sparts/sparts/vfb303.py\", line 66, in getCounter\n    raise ValueError(\"%s is None\" % (name))\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40176637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361721", "body": "Can you call this option, attribute, etc \"max_items\" instead of \"max_qsize\"?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361793", "body": "Better help text would be ideal as well.  Something like:\n\n``` python\n  help=\"Set a bounded queue length.  This may \"\n       \"cause unexpected deadlocks. [%(default)s]\"\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11361793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27424569", "body": "minor nit,  it's not clear from `getBus` that this is instantiating a new private Bus (vs. returning the existing local).  Also prefer an underscore prefix for things that are not meant to be called externally.\n\nCall this `_makeBus` or `_getNewBus` or `_createBus` instead (I like `_makeBus` the most)\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27424569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425056", "body": "You shouldn't need to specify `name=...` in your option.\n\nEDIT: Is there some issue with overrides not working if you don't specify the name?\nIn general we prefer to do this with class attributes, e.g., in the parent set `USE_SYSTEM_BUS=False`, then in the parent option, set `default=(lambda cls: cls.USE_SYSTEM_BUS)`\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425615", "body": "Will this test fail if two tests are run at the same time (and try to grab the same bus name from the SessionBus)?\n\nMight be worth appending a random 64-bit number + timestamp to the end of the `BUS_NAME` to avoid this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425661", "body": "Remove trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27425661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27527810", "body": "I'm thinking something like this might be cleaner / more easier to reuse:\n\n``` python\ndef asyncRun(self, cb, *args, **kwargs):\n\n    def _future_execute(f, cb, *args, **kwargs):\n        try:\n            # Only execute `cb` if the future wasn't cancelled\n            if f.set_running_or_notify_cancel():\n                f.set_result(cb(*args, **kwargs))\n        except Exception as e:\n            f.set_exception(e)\n\n    def _future_cancel(f, handle):\n        if f.cancelled():\n            glib.source_remove(handle)\n\n    f = Future()\n    handle = glib.idle_add(partial(_future_execute, f, cb, *args, **kwargs))\n    f.add_done_callback(partial(_future_cancel, f, handle))\n    return f\n```\n\nThis seems good because:\n- The caller can choose to call `f.result()` on their own,  with or without a timeout as desired\n- Callers don't have to implement future semantics in their callbacks or wrapping cb with the try:/except: blocks. \n- It support callers cancelling the idle-added function with native glib apis to remove the event source id as appropriate as well.\n- It allows for **kwargs as well as *args since the wrapped callback passed to glib is a partial\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27527810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722078", "body": "Move this comment to inside `_asyncStopCb`\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722239", "body": "Is there a way to leave this in DBusMainLoopTask?  Dependency resolution should force its' initTask() to execute first before any other tasks' (who might depend on it?) \n\nInitializing stuff like this in module scope is problematic for a variety of reasons and I'd like to avoid it if possible.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27722239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/63987900", "body": "Add a comment above, like:\n\n``` python\n# For future-based work, let's allow the submitter to handle the exception\n# gracefully.  Since we can't know if that was successful, just assume the\n# exception will be handled (or re-raised) by someone awaiting the future.\n# This isn't guaranteed, but is a reasonable assumption.\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/63987900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "chantra": {"issues": [{"url": "https://api.github.com/repos/facebook/sparts/issues/105", "title": "test_tornado's test_execute_async flaky", "body": "It seems this test may be flaky given that it succeeded on all other python flavors.\nhttps://travis-ci.org/facebook/sparts/jobs/119671018\n\n```\ntests/tasks/test_settaskoption.py ..\ntests/tasks/test_tornado.py .\n=================================== FAILURES ===================================\n________________________ TestMyTask.test_execute_async _________________________\nself = <tests.tasks.test_periodic.TestMyTask testMethod=test_execute_async>\n    def test_execute_async(self):\n        f = self.task.execute_async()\n        res = f.result(3.0)\n        self.assertNotNone(res)\n        self.assertGreater(res, 0)\n\n        # Verify exception path\n        self.task.fail_async = True\n        with self.assertRaises(Exception) as ctx:\n            # Call this twice, since there's a race condition where setting\n            # fail_async and getting the future from execute_async is called\n            # when execute is between the self.fail_async check and the return\n            self.task.execute_async().result(1.0)\n>           self.task.execute_async().result(1.0)\nE           AssertionError: Exception not raised\ntests/tasks/test_periodic.py:60: AssertionError\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/b5a36a57bd130aa5c3238f21d84a11cb41ced3ef", "message": "[travis] Force running in containers, not VM\n\n* Add support for IPv6 loopback\n* speed up test spin up"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/b4ef9548d9cc8ef2af999b8940928462ad4bca6f", "message": "[tests] Fix test_daemon to not abort the rest of the test suite\n\nIf we do not fork within the test where we daemonize, the current\nprocess will get daemonize and the test suite will stop."}, {"url": "https://api.github.com/repos/facebook/sparts/commits/5b8c061c4c2d1597d261d9e61b8cc256bdc93450", "message": "Enforce Twisted<15.5.0 for python 2.6\n\n15.5.0 is the last release supporting python 2.6 [0]... but actually\ndoesn't support it [1].\nLet's make it <15.5.0\n[0] https://twistedmatrix.com/trac/browser/tags/releases/twisted-15.5.0/NEWS?format=raw\n[1] https://twistedmatrix.com/trac/browser/tags/releases/twisted-15.5.0/twisted/__init__.py#L16"}, {"url": "https://api.github.com/repos/facebook/sparts/commits/825a4861f6f6801e719a0c78a6a3777915c0213f", "message": "[option] handle nargs properly\n\nFixes #103"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmm2018": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/d07245547373db3a51079d5d446c949b3a729bf8", "message": "fixing minor spelling typos"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djipko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/15037b273fa17532fa79d73d66f4d3407706aca8", "message": "QueuTask: prevent unhandled exception from tearing the main loop down\n\nPrior to this patch - raising an exception inside an execute() of a\nqueued\ntask when using futures instead of deferreds, would tear down the whole\nservice thread. This is almost certainly not what we want.\n\nThe cleanest way to fix this seems to be in the ExecutionContext, where\nwe consider an exception handled if it's set on a future, and let the\nsubmitter worry about it."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/64010354", "body": "Will do - thanks! In case of QueueTask - this decision makes sense since submit() returns a future instance so it's basically a part of it's public API.\n\nAlso in QueueTask.map() we rely on the future to throw to the caller as we call result() on it.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/64010354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bboozzoo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/sparts/commits/0de788eedabe4e4b671bb9fda945f723a6b9daa4", "message": "manifest: add manifest\n\nAdding MANIFEST so that both LICENSE and PATENTS will be picked up for\nsource dist. Although not required this is generally useful when\npackaging for Linux distributions.\n\nSigned-off-by: Maciek Borzecki <maciek.borzecki@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27426455", "body": "Ok, `_makeBus` seems like a good name\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27426455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27427125", "body": "Good catch.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27427125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27550432", "body": "Fair points. I'll update the code and push patches.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27550432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27729231", "body": "> Initializing stuff like this in module scope is problematic for a variety of reasons and I'd like to avoid it if possible.\n\nOk. I guess anyone using the old glib bindings would call threads_init() somewhere at the beginning of the program anyway, so it's fine to move these changes back to where they were originally.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/27729231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hobson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/12531178", "body": "`pip install sparts` worked for me on Ubuntu 12.04.\n\n`pip freeze` below for reference:\n\n```\nargparse==1.2.1\ndistribute==0.6.24\nsparts==0.2.2.1\nwsgiref==0.1.2\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/12531178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joeldodge79": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39687487", "body": "@fmoo rebased and split apart the commits.\n\nI was manually testing get/setOption with demo/tnonblock_thrift.py and that seemed to work fine (after a bugfix):\n\n```\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'True',\n  'level': 'DEBUG',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '0',\n  'thrift_threads': '10'}\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f setOption dryrun ''\nNone\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'False',\n  'level': 'DEBUG',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '0',\n  'thrift_threads': '10'}\n# now added \"foo = counter(default='asdf') to the service\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'True',\n  'foo': 'asdf',\n  'level': 'INFO',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '33333',\n  'thrift_threads': '10'}\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f setOption foo qewr\nNone\n> ./sparts/gen/fb303/FacebookService-remote -H localhost:33333 -f getOptions\n{ 'dryrun': 'True',\n  'foo': 'qewr',\n  'level': 'INFO',\n  'tasks': '__None__',\n  'thrift_host': '0.0.0.0',\n  'thrift_port': '33333',\n  'thrift_threads': '10'}\n```\n\n I spent some time trying to get demo/dbus_service.py to launch on my machine (laptop osx 10.9.2) and got to the point where this was happening:\n\n```\n> PYTHONPATH='/Users/joeldodge/joel_sparts:/Users/joeldodge/joel_sparts/externals/thrift/lib/py/src' python demo/dbus_service.py\nDynamic session lookup supported but failed: launchd did not provide a socket path, verify that org.freedesktop.dbus-session.plist is loaded!\nERROR:MyDBusService:Unexpected Exception during init\nTraceback (most recent call last):\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 204, in _runloop\n    instance._startTasks()\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 118, in _startTasks\n    t.start()\n  File \"/Users/joeldodge/joel_sparts/sparts/tasks/dbus.py\", line 144, in start\n    self.bus = dbus.SessionBus(private=True)\n  File \"/Users/joeldodge/joel_sparts/sparts-venv/lib/python2.7/site-packages/dbus/_dbus.py\", line 211, in __new__\n    mainloop=mainloop)\n  File \"/Users/joeldodge/joel_sparts/sparts-venv/lib/python2.7/site-packages/dbus/_dbus.py\", line 100, in __new__\n    bus = BusConnection.__new__(subclass, bus_type, mainloop=mainloop)\n  File \"/Users/joeldodge/joel_sparts/sparts-venv/lib/python2.7/site-packages/dbus/bus.py\", line 122, in __new__\n    bus = cls._new_for_bus(address_or_type, mainloop=mainloop)\nDBusException: org.freedesktop.DBus.Error.NoMemory: Not enough memory\nINFO:MyDBusService:Received graceful shutdown request\nDEBUG:MyDBusService:VService Active.  Awaiting graceful shutdown.\nTraceback (most recent call last):\n  File \"demo/dbus_service.py\", line 16, in <module>\n    MyDBusService.initFromCLI()\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 187, in initFromCLI\n    instance = cls.initFromOptions(ns, name=name)\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 197, in initFromOptions\n    return cls._runloop(instance)\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 209, in _runloop\n    instance._wait()\n  File \"/Users/joeldodge/joel_sparts/sparts/vservice.py\", line 165, in _wait\n    t.stop()\n  File \"/Users/joeldodge/joel_sparts/sparts/tasks/dbus.py\", line 158, in stop\n    del(self.dbus_service)\nAttributeError: dbus_service\n```\n\nI guess I could try to run it on a centos box in EC2 but before I do that could you give me some instruction on how I'd test it? While familiar with thrift rpc I don't know anything about dbus.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39687487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39735874", "body": "awesome! I don't need the getOption fix any time soon, just needed to hack it for manual testing. should I close this PR?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39735874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39743154", "body": "@fmoo here's what I'm doing in my service:\n\nread some messages off an aws sqs queue (up to 10 at a time) with a PeriodicTask (interval 0). Iterate through them and use a blocking put on my QueueTask's queue. That iteration of adding to the queue will only go as fast as the workers can pull stuff off. If the workers get backed up, I'll have up to 10 messages in memory but won't pick up anymore from sqs till I have capacity to process them. The real choke point is a downstream api call to a system that can get way bogged down.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39743154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39796272", "body": "@fmoo I don't see this commit in master, were u gonna merge?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39796272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39811121", "body": "got it (that's exactly what I'm doing with it). I thought you meant something scarier\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/39811121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40027068", "body": "This is ok with me.\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/issues/comments/40027068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/sparts/comments/6045511", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/comments/6045511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11101423", "body": "not too sure how this plays with the stuff in `BaseSpartsTestCase.tearDown` but since you wrote it @fmoo I figured I'd run it by you first. If you're not sure either then I'll investigate more fully. In any case, I ran these tests in a virtualenv w/out unittest2 installed and they seemed to work as expected\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11101423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365550", "body": "will do\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365555", "body": "will do. deadlocks how?\n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/pulls/comments/11365555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "agargiulo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/sparts/comments/6782000", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/facebook/sparts/comments/6782000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}}}}