{"_default": {"1": {"geekscrapy": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4069", "title": "\"Recursive\" searches on results", "body": "Looking for a way to perform recursive searches on results. End result is to have a query which will provide file table results for values in services.path and/or services.module_path columns. We're intending to use OSQuery as a snapshotting tool, but not for continious monitoring. Therefore we need to collect everything we want to in one go, then analyse later.\r\n\r\nAn example of this is to enumerate all .services and upon each of the services.path results, query the path column with the .file table. Hence the recursion.\r\n\r\nFor example given the following query:\r\nSELECT file.filename, file.uid, file.gid FROM file INNER JOIN services ON file.path=services.path;\r\n\r\nWhilst this provides some output when the services.path is soley a path to a binary, when it contains command arguments or environment variables that row is ignored. For example, this is completly useless with the services.module_path column where most of the values start %systemroot%.\r\n\r\nHow may I go about doing this internally? Could a table be created in which if JOINed upon it would parse the input, expand the path (if environment variables are used) and allow you to then JOIN with another table, like .file?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/4067", "title": "Use of decorators with the shell", "body": "Are decorators currently implemented with the shell? I'm looking for the decorator to be present with each query result when running a pack, or even the same type of output (including the pack name, hostIdentifier calendar time etc.) when running queries from the shell.\r\n\r\nTIA", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theopolis": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4059", "title": "Build version 2.11+ on FreeBSD", "body": "FreeBSD's port is a little behind. Here are the things we need to get it going again.\r\n\r\n1. The `rocksdb-lite` port will need the following environment variables defined when building. `USE_RTTI=1`, `DISABLE_JEMALLOC=1`.\r\n2. The `cpp-netlib` and `linenoise-ng` ports are no longer needed, `asio` is no longer needed either, if it is used.\r\n3. The thrift library should be at version `0.11` or greater, it may be way behind, at something like `0.9.3` or `0.10.0`.\r\n\r\n/cc @lxcode ", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/4038", "title": "deps: Be on the lookout for a new version of librpm for OpenSSL support", "body": "The current version of librpm (4.14) only supports NSS or BeeCrypt, and we use BeeCrypt.\r\n\r\nThe version in `master` has added support for OpenSSL.\r\n\r\nhttps://github.com/rpm-software-management", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3999", "title": "tables: Report process limits on darwin and linux", "body": "This seems easy on Linux, the `/proc/PID/limits` reports hard and soft limits for each process. These are usually defined by `/etc/security/limits.conf` but a process may also use the C APIs/syscalls.\r\n\r\nThese are the limits reported by `ulimit` too.\r\n\r\nI am not sure how to report this information on Darwin. \r\n\r\nThe system may also have hard limits, so another non-user or non-system table may be needed.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3998", "title": "sql: getQueryColumns fails on UNIONed aggregation columns", "body": "Check out the following behavior:\r\n```\r\n>>> i.client.getQueryColumns('SELECT count(1) as c from time union select count (1) as c from time');\r\nExtensionResponse(status=ExtensionStatus(message=u'OK', code=0, uuid=0), response=[{u'c': u'UNKNOWN'}])\r\n>>> i.client.getQueryColumns('SELECT seconds from time union select seconds from time');\r\nExtensionResponse(status=ExtensionStatus(message=u'OK', code=0, uuid=0), response=[{u'seconds': u'INTEGER'}])\r\n>>> i.client.getQueryColumns('SELECT count(1) as c from time');\r\nExtensionResponse(status=ExtensionStatus(message=u'OK', code=0, uuid=0), response=[{u'c': u'BIGINT'}])\r\n```\r\n\r\nThe failing query:\r\n\r\n```sql\r\nSELECT count(1) as c from time union select count (1) as c from time\r\n```\r\n\r\nThis API is very important and is used to determine the types for data. This is a complex use case but is practical (aka we have scheduled queries). We'll need to enhance the SQLite virtual machine parsing to determine the types.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/597b60d5ebd29e5fc350f167be728802e0dfcd07", "message": "website: Upload dark version of logo for README (#4065)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/e8c0601ffe92ad9f4704fe69e8523beb80c79b5a", "message": "tables: Parse interface flags from sysfs on Linux (#4063)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/181d2f9dbc8ab4e45d2b208150738e7e3b75d383", "message": "build: Fix OSQUERY_BUILD_SHARED linkage (#4062)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/3591d221e81c1d263ef2814fbaa5fad0d70fe7ee", "message": "tables: Add pcid to cpuid table (#4061)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/193de0c818f90a70d291bb6d85d3ebf179d7d069", "message": "deps: Improve native (non-deps) builds (#4060)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/82235e3c1317dafa8fcef69ee11faf9d2edeb910", "message": "deps: Build linenoise locally (third-party) (#4058)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8272c028ddc1e2b10dd3492e879d52d85d602f84", "message": "macOS: Link with no-weak-imports (#4056)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/541f28d397531926532eacd0f8d2518c396a37c7", "message": "deps: Build librdkafka 0.11.3 without clock_gettime (#4054)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/adad4ee8deb726d43626cd85f92c4f679a31eea7", "message": "build: Set default macOS SDK to 10.11 (#4053)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/b8a25429a5e2094f2bb23b3a1a01e4029c7275f6", "message": "tables: Remove apt-pkg linking on Linux (#4049)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/687070352d1d9c72abb81840cca0d9ba3000f844", "message": "website: Add 2.11.2 release (#4050)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/f2f6b8d5f4d47e51eb2bc3eec810bf44c7e531f2", "message": "vagrant: Add win10 target for Vagrant (#4040)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/5777efffb4c2a75339e6fa541b9c2be3ba9667b2", "message": "deps: Add SKIP_DEPS control to CMake (#4036)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/de19f0b6c2cf97dc978b8ca32b7f44ce518079e3", "message": "tables: Replace apt_sources with crude string parsing (#4034)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/00040c6c1a7abbe8ed2ff3549eef8bb4a986b97d", "message": "feature: URI parsing from folly (#4035)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/551e1043b4a5d1032a1599b7b24844c3cf2fd647", "message": "tests: Interrupt subprocesses of test_osqueryd (#4032)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/ecf06772c838559b89724b6a7c2fac3ea4648aa5", "message": "windows: deps: Install thrift module on Windows only (#4033)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4028", "title": "tables: Add cpu_microcode to system_info", "body": "This attempts to list the CPU microcode version on Windows and Linux, it's not clear how to find this on macOS.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/3910", "title": "Replace most of boost::property_tree with rapidjson", "body": "There are lots of changes included in this pull request.\r\n\r\nThe goal is to eventually replace all unneeded uses of `boost::property_tree::ptree` with `rapidjson` (or our wrapper `JSON` document manager).\r\n\r\nIn the course of this porting I found several places where data input/output was not tested. The expected default state of configuration parsers (before a config is loaded) is a good example. Loggers and the actual config parsers and tables using parsers are also troubling.\r\n\r\nThis actually represents a 'minimum change'. This data structure is core to osquery and replacing the `Query` methods created a cascading effect leading to `Config` and there into `ConfigParsers` and finally tests, and events.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/2947", "title": "Ordered query results", "body": "Towards ordered scheduled query results.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/119016406", "body": "Hey @0xdabbad00, I never looked at KnocKnock's implementation but are you interested in a specific source of data? The paths @marpaia listed above are included in:\n- `/Library/StartupItems/` => `select * from startup_items`\n- `/System/Library/StartupItems/` same\n- `/Library/ScriptingAdditions/` => missing\n- `/Library/Internet Plug-Ins/` => `select * from browser_plugins`\n- `/Applications/Mail.app/Contents/PlugIns/` => missing\n- `/var/root/` not sure about context here\n- `/Library/Scripts/Folder Action Scripts` => missing\n\nI think startup items are well covered. We might benefit from a scripting addons table and a mail-app plugins table. There are precedent tables for chrome/firefox/safari and opera specifically that list their respective \"extensions\" types.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/119016406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349339", "body": "I'll suggest another vtable with the entire route table for the host. If there are routes with GWs then their MAC can be included too.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/52349339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861316", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51880708", "body": "https://github.com/facebook/osquery/pull/44\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51880708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861385", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861408", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/66429147", "body": "Got this with https://github.com/facebook/osquery/blob/master/osquery/tables/system/logged_in_users.cpp and last.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/66429147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861425", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60799354", "body": "This is a little advanced, it will expect a path selector at least. The injected selector functionality needs love.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60799354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861453", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861566", "body": "Using a master task of issues: https://github.com/facebook/osquery/issues/619\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69861566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/7375763", "body": "In the API it looks like this will throw an exception on non-valid JSON. Add a [isValidJSONObject](https://developer.apple.com/library/ios/documentation/foundation/reference/nsjsonserialization_class/Reference/Reference.html#//apple_ref/occ/clm/NSJSONSerialization/isValidJSONObject:) call before?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7375763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7393388", "body": "For loop is useless if this fails, works though.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7393388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7393428", "body": "Is there a way to \"discover\" this list of services at querytime?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7393428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7397506", "body": "Nit, iterator variable name could be more descriptive.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7397506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7397519", "body": "This list _might_ be important later, can it be more accessible? How about kHomeDirSearchPaths ;)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7397519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7397542", "body": "From every app bundle and then Info.plist I've seen this will work. Just wondering if there's some documentation from Apple confirming this? \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7397542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7409263", "body": "Nit, should there be a NL here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7409263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7409274", "body": "Nit, can this location (/Library/LaunchAgents) be somewhere easier to audit/change?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7409274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7684573", "body": "This outcome is something like:\n\n```\nreed@win8-vm:~/git/github/osquery-linux$ ls -l ./build/osquery/\ntotal 5\ndrwxr-xr-x 1 329559041 1876110778      306 Sep  5 17:33 CMakeFiles\n-rw-r--r-- 1 329559041 1876110778     2805 Sep  5 17:25 cmake_install.cmake\ndrwxr-xr-x 1 329559041 1876110778      238 Sep  5 17:33 config\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 core\n-rw-r--r-- 1 329559041 1876110778      460 Sep  5 17:25 CTestTestfile.cmake\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 database\ndrwxr-xr-x 1 329559041 1876110778      238 Sep  5 17:33 devtools\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 examples\ndrwxr-xr-x 1 329559041 1876110778      238 Sep  5 17:33 filesystem\n-rw-r--r-- 1 329559041 1876110778     3078 Sep  5 17:26 libosquery.a\n-rw-r--r-- 1 329559041 1876110778 12490976 Sep  5 17:33 libosquery_sparse.a\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 logger\n-rw-r--r-- 1 329559041 1876110778    11203 Sep  5 17:25 Makefile\n-rwxr-xr-x 1 329559041 1876110778  4308050 Sep  5 17:33 osqueryd\n-rwxr-xr-x 1 329559041 1876110778  4284756 Sep  5 17:33 osqueryi\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 scheduler\ndrwxr-xr-x 1 329559041 1876110778      204 Sep  5 17:33 tables\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7684573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7709546", "body": "The darwin `processes.cpp` needs to be updated too.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7709546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7883961", "body": "unwind? ![notsureaboutthisone](https://cloud.githubusercontent.com/assets/981645/4367311/66ee67d8-42d3-11e4-8952-b0f44be0a4a8.gif)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7883961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7964940", "body": "Interested in comments on this workflow (removing the TestPath within main), as a cleanup.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7964940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/7964961", "body": "This is moved to a `destroy` method that is never called. It COULD be called as a cleanup when the daemon or shell is exiting. I'd imagine if the app is managing multiple `DBHandle` instances then a \"recycle\" or similar convention could be used. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7964961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8283167", "body": "Think it's worth `trim`ing the beginning/end of each `split` line?\n\n```\n _launchservicesd:*:239:239:_launchservicesd:/var/empty:/usr/bin/false                               \n```\n\nCan you sense the whitespace?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8283167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8302107", "body": "Here's a small change that should work nicely with both systems. `view.column`, `table.column`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8302107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8355976", "body": "Solid, but, osquery should avoid \"shelling out\" to commands and parsing the stdout/stderr. Is it possible to parse the information using net-related OS X C/C++ APIs? The Linux implementation that uses `/proc` is awesome!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8355976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8399206", "body": "Where are the release, source, and size columns?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8399206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8399207", "body": "If these error logs are no longer needed, just nix the code instead of commenting it out. :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8399207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8608958", "body": "Why compare to 1? `if (exists.ok()) {` is super clear.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8608958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8608963", "body": "Can a brother get clear/concise flag names? `pidfile` is a file with a pid in it!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8608963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "reedloden": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4042", "title": "Add additional OS X malware/adware from EtreCheck", "body": "https://github.com/etresoft/EtreCheck has a pretty long list of OS X malware/adware, and I don't think `osx-attacks.conf` covers it all. Should see what needs to be added.\r\n\r\nhttps://github.com/etresoft/EtreCheck/blob/master/EtreCheck/adware.plist", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/4041", "title": "Add unwanted Safari extensions pack", "body": "Similar to https://github.com/facebook/osquery/blob/master/packs/unwanted-chrome-extensions.conf, should have an `unwanted-safari-extensions.conf`.\r\n\r\nGood starting place:\r\nhttps://github.com/etresoft/EtreCheck/blob/0f66005ad3b16981eadf00d5841982e8494d8d32/EtreCheck/adware.plist#L5-L19", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NickTitle": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4030", "title": "Include HMAC of each added/removed row's content in diff q logs?", "body": "We are using diff q logs to keep track of device state over time in a data store. In my implementation, I decorate result rows with hashes so that it's simple to upsert/update/delete without searching for rows that match these +/- logs to add/delete.\r\n\r\nAdditionally, this hash serves as decent primitive lookup key, rather than querying by the whole set of matching fields. For example, if you see a rogue process disappear in result logs for a process query, you can use the same hash to look back when it was added.\r\n\r\nDo you think it would be useful to include this in the logs themselves?", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rodionos": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/4026", "title": "Identify Linux servers that require Spectre/Meltdown upgrade", "body": "Service Providers started releasing [notes](https://wiki.hetzner.de/index.php/Spectre_and_Meltdown/en) on Spectre and Meltdown issues. \r\n\r\nIt's early in the process, however is there a way using osquery to check if these attacks have taken place?\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/4026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muffins": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3996", "title": "tests: Integration and unit tests for Windows Event Log plugin", "body": "#3887 brings the capability for osquery to log directly to the Windows Event Log. This capability is pretty neat, but it living in core requires we build out testing around this capability for stability of the core platform. Let's use this issue to track building out both integration and unit tests around this capability. ", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3959", "title": "windows: provisioning still fails if multiple Python installations exist", "body": "our provisioning scripting has issues if Python either already exists on the system, or is not present in the default path. The attempt to install python is fine but adding to our system path is failing.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3954", "title": "extensions: Windows extensions either go away or do not start from cold boot", "body": "There seems to be some stability issues around Windows C++ extensions. We've seen first hand that extensions seem to \"disappear\", and go away after starting properly. Further, it was mentioned in the #windows slack that it seems that extensions _might_ be failing to start alongside the Windows service from Cold Boot.\r\n\r\nLet's use this issue to track robustness and stability issues around osquery extensions on Windows to ensure this feature is robustly supported, and not causing issues.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/d73222326f41f83092aee186ff06b93f7f800f3a", "message": "tables: updating row description for kva_speculative_info (#4044)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/21b257beb6842a0befffe5a76ac56f6d19fda69a", "message": "deps: Updating windows to boost 1.66.0 (#4031)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/85133d8ad0da5bbe9e36e292ec151019a6d84707", "message": "tables: adding windows table for KVA and speculative exec info (#4027)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3583", "title": "carver: adding dynamic block retry", "body": "This updates the carver block POST logic to retry POSTing blocks that fail up to `carver_max_block_retries=3` times. We still need integration tests for the carver logic, which I have en-route, but I'm not sure I'll have them done and ready before we tag a new release. Below is a sample of testing the carves with our setup:\r\n```\r\n/tmp \u276f unzip 10000000_226051611257155_5300564889708789760_n.zip\r\nArchive:  10000000_226051611257155_5300564889708789760_n.zip\r\n[10000000_226051611257155_5300564889708789760_n.zip] s2AGDs password:\r\n  inflating: s2AGDs\r\n/tmp \u276f tar -xvf s2AGDs\r\nx big3.bin\r\n/tmp \u276f shasum -a big3.bin\r\nValue \"big3.bin\" invalid for option a (number expected)\r\nType shasum -h for help\r\n/tmp \u276f shasum -a 256 big3.bin                                                                                                                 \r\n\r\n19637a00559c22bac79a282e00c8c877a03a2fe2bdc79dc7209f15bd4e291e1f  big3.bin\r\n/tmp \u276f shasum -a 256 ~/Downloads/big3.bin\r\n19637a00559c22bac79a282e00c8c877a03a2fe2bdc79dc7209f15bd4e291e1f  /Users/thor/Downloads/big3.bin\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "clong": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3990", "title": "Increase in osqueryd crashes after upgrade to 2.10.2", "body": "After monitoring our graph of crashes by application, we saw a fairly sharp increase in osqueryd crashes after upgrading to 2.10.2. There are two specific crashes that are occurring across our entire Mac fleet:\r\n\r\nOsquery Version: 2.10.2\r\nOSX Version 10.12.6\r\n\r\n**Crash 1**\r\nException Type: EXC_CRASH (SIGABRT)\r\nRegisters:\r\n```\r\nrax:0x0000000000000000   \r\nrbx:0x0000000000000006 \r\nrcx:0x000070000d012a28 \r\nrdx:0x0000000000000000   \r\nrdi:0x0000000000001e0b \r\nrsi:0x0000000000000006 \r\nrbp:0x000070000d012a50   \r\nrsp:0x000070000d012a28 \r\nr8:0x0000000000000000 \r\nr9:0x0000000000989680   \r\nr10:0x0000000008000000 \r\nr11:0x0000000000000206 \r\nr12:0x000070000d012be0   \r\nr13:0x0000000000000030 \r\nr14:0x000070000d014000 \r\nr15:0x0000000000000008   \r\nrip:0x00007fff92dbdd42 \r\nrfl:0x0000000000000206 \r\ncr2:0x000000000457d000\r\n```\r\nStack Trace: \r\n```\r\n0   libsystem_kernel.dylib 0x00007fff92dbdd42 __pthread_kill + 10\r\n```\r\n\r\n---\r\n\r\n**Crash 2**\r\nException Type: EXC_BAD_ACCESS   (SIGSEGV)\r\nRegisters:\r\n```\r\nrax:0x0000000000000018\r\nrbx:0x000070000e57fa01\r\nrcx:0xffffffffffffffff\r\nrdx:0x000000000000000c\r\nrdi:0x000070000e57f990\r\nrsi:0x0000000000000000\r\nrbp:0x000070000e57fd60\r\nrsp:0x000070000e57f968\r\nr8:0x0000000000000000\r\nr9:0x0000000000000100\r\nr10:0x0000000000000100\r\nr11:0xffffffff00000000\r\nr12:0x000070000e57fa38\r\nr13:0x0000000000000000\r\nr14:0x0000000000000000\r\nr15:0x000070000e57fe20\r\nrip:0x00007fffbd42a84d\r\nrfl:0x0000000000010246\r\ncr2:0x0000000000000000\r\n```\r\nStack Trace: \r\n```\r\n0 libc++.1.dylib   0x00007fffbd42a84d std::__1::basic_string<char,   std::__1::char_traits<char>, std::__1::allocator<char>   >::basic_string(std::__1::basic_string<char,   std::__1::char_traits<char>, std::__1::allocator<char> >   const&, unsigned long, unsigned long, std::__1::allocator<char>   const&) + 23\r\n```\r\n\r\nHappy to provide any other info that might assist in debugging this!", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3957", "title": "Windows: Service should fail to start if encountering fatal error", "body": "The windows service for osquery will start, even when certain \"fatal\" conditions occur. \r\n\r\nFor example, even if the daemon reports:\r\n`E1122 10:34:19.965873  7876 init.cpp:603] [Ref #1629] osqueryd initialize failed: Could not initialize database`\r\n\r\nThe service will start \"successfully\" and not report any problems.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4068", "title": "Updating build docs to include make packages", "body": "The package instructions are located on the custom-packages page, but I think it's likely people will want to know how to do this while building from source", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pmav99": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3988", "title": "osqueryi and non-latin characters", "body": "OS: Windows 2012\r\n```\r\nPS C:\\Users\\Administrator> osqueryi --version\r\nosqueryi.exe version 2.10.2\r\n```\r\nI installed the greek and the french spellchecking tools for microsoft office but when I run the following query:\r\n```select name from programs where name LIKE '%Microsoft Office%'```\r\nthe greek spellchecker appears as ??? (the french is gibberish too, but that can be fixed by e.g. changing the codepage):\r\n```\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> chcp 437\r\nActive code page: 437\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> osqueryi --json \"select name from programs where name LIKE '%Microsoft\r\n Office%'\"\r\n[\r\n  {\"name\":\"???a?e?a ???ss???? e?????? t?? Microsoft Office 2013 - ????????\"},\r\n  {\"name\":\"Outils de v\u0398rification linguistique 2013 de Microsoft Office\u00e1- Fran\u03c4ais\"}\r\n]\r\n```\r\n```\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> chcp 1252\r\nActive code page: 1252\r\nPS C:\\Program Files\\Conmon\\Conmon Agent\\embedded> osqueryi --json \"select name from programs where name LIKE '%Microsoft\r\n Office%'\"\r\n[\r\n  {\"name\":\"???a?e?a ???ss???? e?????? t?? Microsoft Office 2013 - ????????\"},\r\n  {\"name\":\"Outils de v\u00e9rification linguistique 2013 de Microsoft Office - Fran\u00e7ais\"}\r\n]\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zbuc": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3984", "title": "\"Too many open files\" from clients running OS X", "body": "I'm seeing this happening widely across our fleet of OS X machines with OSQuery deployed:\r\n\r\n```\r\nlibc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error> >: kqueue: Too many open files\r\nE1204 15:20:39.108371 2711286592 registry.cpp:423] enroll registry tls plugin caused exception: kqueue: Too many open files\r\nE1204 15:20:39.109400 2711286592 registry.cpp:423] enroll registry tls plugin caused exception: kqueue: Too many open files\r\nI1204 15:20:39.109446 2711286592 events.cpp:825] Event publisher not enabled: event_tapping: Publisher disabled via configuration\r\nI1204 15:20:39.109468 2711286592 events.cpp:825] Event publisher not enabled: openbsm: Publisher disabled via configuration\r\nI1204 15:20:39.109488 2711286592 events.cpp:825] Event publisher not enabled: scnetwork: Publisher not used\r\nE1204 15:20:39.119313 2711286592 registry.cpp:423] sql registry sql plugin caused exception: map::at:  key not found\r\n2017-12-04 15:20 r[31417] (FSEvents.framework) FSEventStreamCreate: _FSEventStreamCreate: ERROR: could not open kqueue\r\nE1204 15:20:39.137084 29614080 fsevents.cpp:114] Cannot create FSEvent stream: FSEventStreamCreate failed\r\nE1204 15:20:39.138051 30687232 registry.cpp:423] enroll registry tls plugin caused exception: kqueue: Too many open files\r\nE1204 15:20:39.138152 30687232 registry.cpp:423] distributed registry tls plugin caused exception: kqueue: Too many open files\r\nlibc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error> >: kqueue: Too many open files\r\nE1204 15:21:11.088346 2711286592 registry.cpp:423] enroll registry tls plugin caused exception: kqueue: Too many open files\r\nE1204 15:21:11.089359 2711286592 registry.cpp:423] enroll registry tls plugin caused exception: kqueue: Too many open files\r\nI1204 15:21:11.089404 2711286592 events.cpp:825] Event publisher not enabled: event_tapping: Publisher disabled via configuration\r\nI1204 15:21:11.089432 2711286592 events.cpp:825] Event publisher not enabled: openbsm: Publisher disabled via configuration\r\nI1204 15:21:11.089452 2711286592 events.cpp:825] Event publisher not enabled: scnetwork: Publisher not used\r\nE1204 15:21:11.099494 2711286592 registry.cpp:423] sql registry sql plugin caused exception: map::at:  key not found\r\n```\r\n\r\n\r\n**Invocation of **`osqueryd`**:**\r\n\r\n`/usr/local/bin/osqueryd --database_path=/usr/local/zentral/osquery/db --tls_hostname=censored --enroll_tls_endpoint=/osquery/enroll --enroll_secret_path=/usr/local/zentral/osquery/enroll_secret.txt --config_plugin=tls --config_tls_endpoint=/osquery/config --config_tls_refresh 120 --logger_plugin=aws_kinesis,aws_firehose --logger_tls_endpoint=/osquery/log --logger_tls_period 60 --disable_distributed=false --distributed_plugin=tls --distributed_tls_read_endpoint=/osquery/distributed/read --distributed_tls_write_endpoint=/osquery/distributed/write --distributed_interval 60 --tls_server_certs=/usr/local/zentral/tls_server_certs.crt --aws_kinesis_stream=censored-endpoints_stream_alert_kinesis --aws_firehose_stream=censored-endpoints_stream_alert_firehose --aws_access_key_id=censored --aws_secret_access_key=censored --aws_region=censored`\r\n\r\n**Versions:**\r\n\r\n```\r\n$ /usr/local/bin/osqueryd --version\r\nosqueryd version 2.10.2\r\n```\r\n\r\nOS X 10.13.1\r\n\r\nPlease let me know if there's any other information I can include to assist in debugging.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "straffin": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3949", "title": "Windows: osqueryd \"--install\" switch creates pathless service, doesn't run", "body": "Running `osqueryd.exe --install` creates an \"osqueryd\" service with an ImagePath of `osqueryd.exe --flagfile=\\ProgramData\\osquery\\osquery.flags` which then fails due to osqueryd.exe not being in the path. \r\nInstalling via chocolatey with the `--params='/InstallService'` flag creates a service with an ImagePath of `C:\\ProgramData\\osquery\\osqueryd\\osqueryd.exe --flagfile=\\ProgramData\\osquery\\osquery.flags` which runs successfully. \r\n`osqueryd.exe --install` should either add osqueryd.exe to the path or (better) create the ImagePath with the fill path to osqueryd.exe intact.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "groob": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3942", "title": "macOS preferences not checking the by-host level(part 2) ", "body": "This is a followup from #3501, which looked fixed in #3681 but values are still not reported correctly. \r\n\r\nTake this domain/key as an example:\r\n\r\n`com.apple.notificationcenterui` / `doNotDisturb`\r\n\r\nThe `doNotDisturb` key will flip to true/false depending on the notification center flag. \r\n<img width=\"181\" alt=\"screenshot 2017-11-17 18 21 16\" src=\"https://user-images.githubusercontent.com/1526945/32973180-203010a8-cbc4-11e7-9d9b-0855701cb2b0.png\">\r\n\r\nI can observe this change with CFPreferences by using \r\n```\r\n    from Foundation import (CFPreferencesSetValue,\r\n                            kCFPreferencesCurrentUser,\r\n                            kCFPreferencesCurrentHost,\r\n                            CFPreferencesSynchronize,\r\n                            CFPreferencesCopyAppValue)\r\n    from SystemConfiguration import SCDynamicStoreCopyConsoleUser\r\n    cfuser = SCDynamicStoreCopyConsoleUser(None, None, None)\r\n    consoleUser = cfuser[0]\r\n    userUID = pwd.getpwnam(consoleUser).pw_uid\r\n    os.setuid(userUID)\r\n    bundleID = 'com.apple.notificationcenterui'\r\n    doNotDisturb = CFPreferencesCopyAppValue('doNotDisturb', bundleID)\r\n\r\n```\r\n or the handy script form the original issue\r\n\r\n```\r\npython fancy_defaults_read.py com.apple.notificationcenterui doNotDisturb\r\ndoNotDisturb: True\r\nType: boolean\r\nDefined: /Users/victor/Library/Preferences/ByHost/com.apple.notificationcenterui.xxxx.plist\r\n```\r\n\r\nNow If I run `osqueryi` as myself, I also get the value as true\r\n```\r\nosquery> select * from preferences where domain=\"com.apple.notificationcenterui\" AND key=\"doNotDisturb\" and username=\"victor\";\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| domain                         | key          | subkey | value | forced | username | host    |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| com.apple.notificationcenterui | doNotDisturb |        | true  | 0      | victor   | current |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n```\r\n\r\nbut running as root shows the incorrect value. \r\n\r\n```\r\n~ \u276f\u276f\u276f sudo osqueryi\r\nUsing a virtual database. Need help, type '.help'\r\nosquery> select * from preferences where domain=\"com.apple.notificationcenterui\" AND key=\"doNotDisturb\" and username=\"victor\";\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| domain                         | key          | subkey | value | forced | username | host    |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n| com.apple.notificationcenterui | doNotDisturb |        | false | 0      | victor   | current |\r\n+--------------------------------+--------------+--------+-------+--------+----------+---------+\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marpaia": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3940", "title": "[RFC] Discussion about 3.0.0 breaking changes", "body": "As discussed in today's (Nov 17, 2017) osquery office hours, if we had the opportunity to cut a new major version and make some breaking changes, what would be on our shortlist of things that we could change that would make working with osquery more intuitive. This issue serves as a forum that allows people from throughout the community to discuss what changes they would like to see. I will continuously edit the description of this issue with ideas that need more discussion, ideas that people are largely in support of, and ideas that people are largely opposed to.\r\n\r\nWhen someone proposes an idea below, please consider reacting to the comment with \ud83d\udc4d or :-1: based on how you feel about such a change being introduced into osquery.", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/3930", "title": "[RFC] Osquery Website Redesign", "body": "In an effort to make the https://osquery.io a fun, beautiful website for the osquery community, we have been reasoning about and planning a redesign of the website that is tailored to a set of specific requirements that embody the openness that is so critical to the DNA of the osquery project.\r\n\r\nThe following issue outlines the requirements of the website redesign, which were enumerated by talking to stakeholders throughout the osquery community. Also included are an enumeration of \"MVP\" features (get these out quickly and #shipit) and \"Post-MVP\" features (features that don't currently exist on the website that will improve the communities ability to collaborate).\r\n\r\nFinally, the actual designs of the new osquery site are included as well. Please note that the copy and the text in the buttons are subject to change, the designs are more of a visual representation of page structure. Scroll down to the end of this document to see all of them and comment on this issue with your feedback if you have concerns about the usability of the application that we can address!\r\n\r\n## Requirements\r\n\r\n### Openness of data, accessible to contribute to\r\n\r\nThe site should be interactive and fun to use, but not at the expense of making the data that powers the website feel opaque. Whenever possible, ensure that data (schema specifications, blog content, etc) can be statically compiled into included JSON files and, most importantly, easily updated via a GitHub PR from a member of the osquery community.\r\n\r\n### Minimize hosting, maximize usability\r\n\r\nThe site should continue to be as static as possible. It should, however, also easily support effective interaction with APIs if such features become necessary or desired. Additionally, you should be able to browse the site easily in adverse network conditions.\r\n\r\nTo this end, we will be creating the site with React as a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/). The documentation for the [Create React App](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#making-a-progressive-web-app) project say the following about Progressive Web Apps:\r\n\r\nProgressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:\r\n\r\n- All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.\r\n- Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.\r\n- On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web push notifications. This eliminates the need for the app store.\r\n\r\n### Beautiful, useful user experience\r\n\r\nThe site should be static, it should be progressive, it should be easy to contribute to, but it also must be beautiful, fun, and useful! We should take the requisite steps and spend time to create a beautiful application user-experience for the osquery community. Emphasis will be spent on effective web design and usability. If the application does not feel usable once the site starts to come to life, please provide feedback early and often!\r\n\r\n## Development Plan\r\n\r\nThe plan for the redesign is for work to happen in the open. Development will take place in the [osquery/osquery-site](https://github.com/osquery/osquery-site) repo. When the new site is deployable, we will ship it and host it at https://beta.osquery.io. When the site is feature complete and adding value, we will cut it over to https://osquery.io.\r\n\r\nWe will be creating several GitHub issues in the `osquery-site` repo, so be sure to \"Watch\" that repo if you're interested in keeping up with development.\r\n\r\n## MVP Features\r\n\r\nWe are limiting the MVP feature-set to the following features.\r\n\r\n- Homepage\r\n- Osquery Schema Browser\r\n- Downloads Page\r\n- Blog\r\n\r\nA first implementation of the website containing just the above pages will be used as a minimum cut-off point to make sure we're shipping early and often.\r\n\r\n## Post-MVP Features\r\n\r\nOnce \"MVP\" features are developed and shipped, development will begin on the following additional features:\r\n\r\n- Integrated Wiki (deprecating https://osquery.readthedocs.io)\r\n- Integrated Query Pack intelligence sharing\r\n\r\nThese features represent functionality not currently offered by the website, but we believe that features will add value to the osquery community and add utility to the osquery project as a whole\r\n\r\n## Designs\r\n\r\n### Home Page\r\n\r\n![osquery-io-again-again](https://user-images.githubusercontent.com/927168/32960580-a66cf290-cb82-11e7-98f3-3acaf1788a8b.png)\r\n\r\n### Schema Browser\r\n\r\n![osqueryio-schema-flatter](https://user-images.githubusercontent.com/927168/32960586-ad3b16f6-cb82-11e7-8ac9-389ebbed911f.png)\r\n\r\n### Downloads Page\r\n\r\n![osqueryio-downloads-new](https://user-images.githubusercontent.com/927168/32963758-3852655e-cb8e-11e7-94a9-e3658ca6a88e.png)\r\n\r\n### Pack Sharing\r\n\r\n![osqueryio-packs-revised](https://user-images.githubusercontent.com/927168/32960594-b89de820-cb82-11e7-8bf7-a3d9efc908aa.png)\r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3930/reactions", "total_count": 6, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50915164", "body": "Working on this here: https://github.com/facebook/osquery/pull/1\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50915164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54119007", "body": "Perhaps vagrant isn't the best way to approach this. We should try to set up TravisCI or something so that, when you're developing on a platform, you can run your own tests locally and Travis can run all the platform's tests on PR's and commits.\n\nTravis looks like it would be flexible enough for our use-case. It works on OS X and Linux, has access to package managers on all platforms.\n- RocksDB uses it: https://github.com/facebook/rocksdb/blob/master/.travis.yml\n- Installing deps is easy: http://docs.travis-ci.com/user/installing-dependencies/\n\nI'm thinking a build script should just be something like:\n\n```\nmake deps\nmake runtests\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/54119007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56761814", "body": "Closed in #165 \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/56761814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50923432", "body": "In addition, some places to check on OS X:\n- /Library/StartupItems/\n- /System/Library/StartupItems/\n- /Library/ScriptingAdditions/\n- /Library/Internet Plug-Ins/\n- /Applications/Mail.app/Contents/PlugIns/\n- /var/root/\n- /Library/Scripts/Folder Action Scripts\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50923432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/64109620", "body": "@wxsBSD we have vagrant VMs to make that easy: https://github.com/facebook/osquery/wiki/install-linux\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/64109620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/63238333", "body": "There really aren't any hard and fast details as to what this would contain, since it's just a concept issue. Feel free to run with it if you have an idea of how this should look!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/63238333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925022", "body": "I like this a lot. I want a `select * from running_processes` vtable anyway; adding the parent-child relationship is a nice additional touch.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410915", "body": "the `processes` table has a `parent` column which has the pid of the parent (which should also exist in the `processes` table with additional info.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/51410915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925110", "body": "May share functionality with https://github.com/facebook/osquery/issues/7\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/50925110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60473539", "body": "It's preferable if this doesn't just shell out to `strings`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60473539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60473549", "body": "@cmc87 adding you to this in case you have any insight to add to the task. for example, what do you think the columns should be?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60473549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/7710265", "body": "What do you mean?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7710265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8302948", "body": "what does a log sting look like out of this?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8302948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8352339", "body": "sigh, clang-format, we need to change `make format` to https://llvm.org/svn/llvm-project/cfe/trunk/tools/clang-format/git-clang-format one day soon. do you mind git reseting / git checkouting this file so that it doesn't get committed in this commit?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8352339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/comments/8352359", "body": "literally the first do/while in the codebase :) I was just chatting with someone last week about how it was surprising that we didn't have a do/while yet!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8352359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15708574", "body": "This is gross\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15708574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794509", "body": "This is rather arbitrarily chosen right now. Look into this being a more logically calculated value.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794518", "body": "const auto&\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794524", "body": "`<= 0` to remove negatives?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794526", "body": "remove duplicates\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15794526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909208", "body": "`line` is actually a list of whitespace separated items on a line. So the line \"`# foo bar`\" would be  split to `{\"#\", \"foo\", \"bar\"}`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909274", "body": "As you can see in line 203, this is where certain aspects of the table get 0 initialized. I added this because I had forgotten to initialize the column data stores to empty vectors on query startup, which was surfaced while writing this table.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "cryps1s": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3924", "title": "Include root/default namespace for wmi tables", "body": "The current WMI tables only look at the root/subscription namespace for consumers, filters, and bindings. Attackers, however, can also use the root/default namespace for their persistence. \r\n\r\nCan we please update the following tables to also look in the root/default namespace: \r\n\r\n- wmi_cli_event_consumers\r\n- wmi_event_filters\r\n- wmi_filter_consumer_binding\r\n- wmi_script_event_consumers\r\n\r\nSource: \r\nhttps://gist.github.com/mattifestation/e55843eef6c263608206", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "keeleysam": {"issues": [{"url": "https://api.github.com/repos/facebook/osquery/issues/3923", "title": "aws kinesis max record size can be too much for slow connections", "body": "I fly a lot, which means I experience a lot of internet connections which are fairly stable but have a lot of latency, jitter, packet loss, etc.  Basically these connections can range anywhere from something like dialup with low latency but limited bandwidth to 4G like connections but with high latency.\r\n\r\nThe kinesis plugins don't like this when there's a lot to send up, and I end up seeing things like this in my logs:\r\n\r\n```\r\nI1114 08:03:23.299619 153759744 scheduler.cpp:135] Found results for query: pack_mac_os_x_asl\r\nE1114 08:03:44.971904 150003712 aws_util.cpp:207] Exception making HTTP request to URL (https://firehose.us-east-1.amazonaws.com): std::exception\r\nE1114 08:03:46.869402 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nE1114 08:04:01.052817 150003712 aws_util.cpp:207] Exception making HTTP request to URL (https://firehose.us-east-1.amazonaws.com): std::exception\r\nE1114 08:04:02.936187 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nI1114 08:04:15.411522 150003712 aws_log_forwarder.h:217] aws_firehose: Successfully sent 500 out of 500 log records\r\nE1114 08:04:19.054230 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nI1114 08:04:33.451310 150540288 aws_log_forwarder.h:217] aws_kinesis: Successfully sent 500 out of 500 log records\r\nE1114 08:04:41.840770 150003712 aws_util.cpp:207] Exception making HTTP request to URL (https://firehose.us-east-1.amazonaws.com): std::exception\r\nI1114 08:04:55.824175 150003712 aws_log_forwarder.h:217] aws_firehose: Successfully sent 500 out of 500 log records\r\nE1114 08:05:02.480053 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nI1114 08:05:14.894963 150003712 aws_log_forwarder.h:217] aws_firehose: Successfully sent 252 out of 252 log records\r\nE1114 08:05:18.534128 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\nE1114 08:05:34.713716 150540288 aws_util.cpp:207] Exception making HTTP request to URL (https://kinesis.us-east-1.amazonaws.com): std::exception\r\n```\r\n\r\nEventually the logs get uploaded, but osquery spends a lot of time trying to upload blobs of data which are going to error out, and then retrying over and over which eats up the limited bandwidth where it shouldn't be doing this.\r\n\r\nI think that osquery should catch this exception and back off on the number of records during this time so they go through successfully.\r\n\r\nFrom my extremely unscientific observations, I've never seen any bundle of under 50 records error out, but on poor connections the bundles in the hundreds error out at least 90 percent of the time.\r\n\r\nThis would also probably apply to people tethering on their phones and in other poor internet situations.\r\n\r\nOn a good connection, the current batching works just fine, so I wouldn't want to cap it at 50 instead of 500 as that has implications on the other end.\r\n\r\ncc @jacknagz @mimeframe \r\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/3923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alessandrogario": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/44e03bada9150c31e52dcbd04fc24630660dd1b3", "message": "process_file_events: Add fields euid and egid and cleanup logs"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/02caa9577412af1a1d0ee1c1fa6bd2cc35e30ca2", "message": "audit: Rename audit_fim_events to process_file_events"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/4a478f1ea17093d317d4f04ec3502cf3a4058add", "message": "audit: Ignore operations on PF_NETLINK sockets"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/8829c9f0de43e67eb4ab0fa41dc152ad86933a4f", "message": "audit: Improve responsiveness when terminating and set name"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/d72779c784d677d7494b629bf72d276227c35174", "message": "Update column names, add switch to clear Audit config on startup (#3611)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/9c0bd4abfb6122b85e7c37d69330de2c2f043185", "message": "audit-based file integrity monitoring (#3492)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4024", "title": "List all sockets (host and containers) in process_open_sockets", "body": "This PR modifies the process_open_sockets to actually show all sockets active inside all processes (both on the host and inside containers). A new column named \"net_namespace\" has been added, showing the network namespace that owns each socket.\r\n\r\nI would like to make one last change: turn the protocol and family column types from integer to text, and use the actual protocol and family labels rather than numbers (which should make the table mor readable).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/4019", "title": "Port the 'services' table to Linux", "body": "This PR adds support for enumerating SysVinit, Upstart (Ubuntu 14.04, CentOS 6) and Systemd services.\r\n\r\nI would like some feedback on this PR, since it makes use of a system library that may or may not be installed by default (libsystemd-dev on Ubuntu).\r\n\r\nRight now I'm using a define in \"osquery/tables/system/linux/services.cpp\" to decide whether to enable or disable systemd support (when it is active, it will disable Upstart and SysVinit).\r\n\r\nI would really love to remove this limitation, any suggestion on how we can deal with the systemd library?", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dallendoug": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/bf0eb6f36fae168e482534ddf8a2217600ef4205", "message": "added IOCs to query for OSX_MaMi malware (#4055)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "exFill": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/979330efbb935c5e1f576da09ebb6ead92a6b857", "message": "Fix on_disk detection for Linux (#4047)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "obelisk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/osquery/commits/fa8d267ad852a34225220e5223c5ef9c748c2e6a", "message": "Fix a crash in the extended_attributes table (#4051)"}, {"url": "https://api.github.com/repos/facebook/osquery/commits/099fb39af7c642548744fc87deafc93ad4961079", "message": "Add signing functionality to make_osx_package (#4045)"}], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3256", "title": "Signing for OnDemand (ad-hoc) queries", "body": "Adding the ability to sign queries for particular hosts and have an optional counter so queries cannot be replayed at a later date. You can get information about the current state of strict mode using the new table `osquery_strict_mode`. If a query that requires signing is successfully run, the counter is incremented. You can either keep track of this on the backend, or issue a query to host itself to pull back the current counter value.\r\n\r\nI've also updated the test_http_server to support optional query signing and a helper script to generate signatures for the protected tables in the osquery configuration.\r\n\r\nIn previous versions of this diff, osquery would warn you if it wasn't starting in strict mode, this has been changed in favour of a table that you can query against to know if it's enabled on a host.\r\n\r\nHere is an example of the configuration blob to configure strict_mode\r\n```json\r\n\"strict_mode\" : {\r\n    \"public_key\" : \"MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEuN+ZqVndrMy5npAg6TJP6LtdZBeGmICRKD4uluz9C3MdqXbe1PMqFYovXVHrlNbdv+E9/Bqbub+ITB+4zpnAGg==\",\r\n    \"protected_tables\" : [\"osquery_info\", \"osquery_flags\"],\r\n    \"protected_tables_signature\" : \"MEUCIQCfbuYrDi2eB0ANpVgAO27i+9Nr0ex476jA8FerWf2JbgIgTIkp7m3fzS1uAfHAnFttU/nLhSCsHk+W3WCZ+iK9jDI=\",\r\n    \"uuid_signing\" : \"true\",\r\n    \"counter_mode\" : \"false\"\r\n  }\r\n```\r\nThe configuration sets the pub key and requires signatures for OnDemand queries containing the tables `osquery_info` or `osquery_flags`. It also requires that the signature for that query also contain the UUID of the machine, preventing taking one signature and running it on another machine.\r\n\r\nIf you are using discovery queries for OnDemand, those will also require signatures and will also increase the query count when successfully executed.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zcatbear": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/4046", "title": "Add in support for flagfile switches when building", "body": "We always package with a custom flagfile. This adds in support (but not required) switches for flagfiles as well as support for custom TLS certificates in the linux package. ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diptanu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3983", "title": "Added support for listing debian packages in running docker containers", "body": "This PR adds a new table `docker_container_deb_packages` which shows Debian packages in a running container. The implementation for this table is done in a generic manner by switching into the container's namespace and using the dpkg C lib to extract package metadata, so this could be extended to any other container implementation, such as ocid/lxc/rkt in the future.\r\n\r\nThe following could be improved -\r\na. Add an abstraction like Folly's Scope_Exit to remove redundant clean ups like closing file descriptors.\r\nb. Use some form of Expected<T> in place of Status where we expect to return Exceptions \r\nc. Possibly better abstractions to make the table implementation cleaner.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "uptycs-nishant": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3948", "title": "TLS persistent transport support", "body": "With TLS persistent transport support, once a secured connection is established it can be used to send multiple HTTPS requests to TLS server.  \r\n\r\nIntroducing two new flags -\r\n    --tls_persist_transport                   Persistent TLS transport\r\n    --tls_persist_transport_timeout VALUE     Persistent TLS transport timeout in seconds(default 3600 seconds)\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/3482", "title": "Forwarding events to tls logger, by-passing schedule query layer", "body": "This change enables the event subscribers to push the events to log/buffer forwarder, by-passing the expensive processing of schedule query layer.\r\nPlease see how to use this functionality in the updated docs of this patch.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iBigQ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3919", "title": "Bro integration 2.10.0", "body": "Make the bro integration branch to be based on the latest stable osquery version (2.10.0)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/3732", "title": "Update Broker Version", "body": "Update to new broker version\r\n\r\n- [x] Write new formulas for caf and broker\r\n- [x] Use new broker API in osquery\r\n- [x] Pass osquery tests\r\n- [x] Use new broker API in bro scripts\r\n- [x] Integration tests\r\n\r\nTODO:\r\n\r\n- [ ] Update bro-osquery (bro scripts) and installation guide\r\n- [ ] Link specific git commit in formulas once caf and broker are released\r\n- [ ] Set correct version in formulas", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/3453", "title": "Connection events from conntrack", "body": "This adds a new event publisher named `conntrack` that uses the netfilter subsystem of netlink to retrieve status changes of network connections. \r\nThe table `connection_events` tags connections (IP and port combinations of source and destination) with labels NEW, UPDATE or DESTROYED. Connections are matched with /proc/net/<protocol> to find the corresponding inode and /proc/<pid>/fd is browsed to find the respective PID.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lxcode": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3697", "title": "Add OpenBSM support for FreeBSD.", "body": "This is copied wholesale from Darwin, save for adding includes for socket.h and in.h. Someday we should figure out a way to deduplicate.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "allanliu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/3563", "title": "ipmi tables: initial IPMI table implementations", "body": "This PR consists of the initial table implementations for `ipmi_mc`, `ipmi_fru`, `ipmi_lan`, and `ipmi_threshold_sensors`.  It utilizes OpenIPMI as the client to the system's IPMI interface.  The implementation uses OpenIPMI in a single threaded manor,  therefore all IPMI related calls are executed within a single thread.  In order for OpenIPMI to read available threshold sensors, it needs to be in the \"fully up\", which takes in the magnitude of minutes (up to ~5m within our infrastructure).  To get around this, the implemented `IPMIClient` is lazily loaded on the first query attempt to any of the ipmi tables, and kept as a singleton obj throughout the lifecycle of the process.  Because of the variability in how long it takes to reach this state, and an optional configuration parameter is exposed: \r\n```json\r\n{\r\n  \"options\": {\r\n    ...\r\n  },\r\n  \"packs\": {\r\n    \"some-system-snapshot\": {\r\n      \"queries\": {\r\n         ...\r\n      }\r\n    }\r\n  },\r\n  \"ipmi\": {\r\n     \"timeout\": 180000\r\n  }\r\n}\r\n```\r\n\r\nIf not configured, the timeout duration default to 3 minutes.  In the event that the timeout deadline has been exceeded and the condition the client accepts as \"fully up\" is not reached, the client considers the system to not to be in a working ipmi state, and will not attempt to initialize again for the lifecycle of the process.  So far,  I have not observed anything within our infra without some kind of intervention that osquery has no control over. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zwass": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60836764", "body": "Going to start looking through the knocknock stuff and replicating it in OSQuery.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60836764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/68958433", "body": "I'm going to take this one on. Looks like getfsstat can be used cross-platform to get some of this info.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/68958433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69264022", "body": "Turns out this is already implemented by the mounts table.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/69264022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901284", "body": "Why is this var name upper?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901421", "body": "Comment should be updated to explain what this means, or just eliminated.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901595", "body": "Why not std::unordered_set?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901615", "body": "Why not std::unordered_map?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901699", "body": "Is this zeroing necessary? Won't `proc_listpids` null terminate the array correctly?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901713", "body": "Same here re zeroing\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901776", "body": "And here\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901873", "body": "It's not intuitive to me why you set it like this, but it seems like you've thought it out...\n\n(Is there any way to comment on multiple lines?)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901892", "body": "here\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901992", "body": "If you are going to use `r[\"path\"]` below anyway, why not use the constant time length method?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15901992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905774", "body": "I don't think this is going to do what you expect. Per some Stackoverflow discussion (http://stackoverflow.com/questions/13368220/how-does-the-c11-range-based-for-loop-know-the-array-size, http://stackoverflow.com/questions/7939399/how-does-the-range-based-for-work-for-plain-arrays) it's going to iterate through the entire array including the zeros you set at the end.\n\nPerhaps the answer is to use a normal `for (int i = 0; i < num_pids; ++i)`\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905781", "body": "Similar problem here.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905892", "body": "same here.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905919", "body": "If the below function is giving you a valid string, zeroing this is unnecessary. If it isn't giving you a valid string, there are bigger problems.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15905919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15907636", "body": "This will use the O(n) `std::find` when you really want the O(1) `unordered_set::find`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15907636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908502", "body": "Can this just be `std::isspace`?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908563", "body": "Why not use the boost functions for this and below?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908622", "body": "Also I find it strange that this function both modifies the string in place, and returns a reference to it. I worry it might be misused not realizing that it modifies in place.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908669", "body": "I'm worried this name could be misleading since it's not actually used as a regex.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908696", "body": "This would be a nice use of raw strings.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908796", "body": "I know this is just a test, but I believe this will cause things to be copy-constructed. Prefer references unless you explicitly want to copy.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908945", "body": "No need for `starts_with` if you're going to use just line[0]\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15908945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909044", "body": "Definitely not familiar with what's going on here, but seems suspicious that the `{}` is at the end of the line. If this is intended, please ignore ;)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/pulls/comments/15909044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "0xdabbad00": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/119014520", "body": "Is anything still happening with this?  Seems like only a subset of KnockKnock was implemented.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/119014520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "martin-majlis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60884422", "body": "Source code for w command is here - http://procps.cvs.sourceforge.net/viewvc/procps/procps/w.c?view=markup\n\nI have figured it out with command - rpm -qf /usr/bin/w\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60884422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60885684", "body": "Doesn't look like something that I would be to do in few hours.\n\nhttp://procps.cvs.sourceforge.net/viewvc/procps/procps/proc/readproc.h?view=markup\nhttp://procps.cvs.sourceforge.net/viewvc/procps/procps/proc/readproc.c?view=markup\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/60885684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wxsBSD": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/64106797", "body": "I've got the start of this, just need to make sure it works under Linux and write some tests. Guess I need to find a Linux box somewhere. ;)\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/64106797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mgoffin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/osquery/issues/comments/63235505", "body": "Would this be the table to include disk info (like 'df' fstab-type info), or would that be something separate?\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/issues/comments/63235505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "lbrandy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/7766837", "body": "heh @ this. This can probably be slightly clarified to use lambdas, again assuming C++11, instead of needing boost::bind and the dummy functions. \n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/7766837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "eastebry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8019574", "body": "Does this dependency need to be added to tools/provision.sh as well?\n\nEdit: just saw your last commit. Nevermind!\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8019574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wizzat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8348262", "body": "make format did this.\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8348262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pstorralba": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8356103", "body": "I would like to change the OS X implementation, but I couldn't find any\nnetwork API to do it. Pointers are welcome!\n\nOn Wed, Oct 29, 2014 at 11:21 AM, Teddy Reed notifications@github.com\nwrote:\n\n> Solid, but, osquery should avoid \"shelling out\" to commands and parsing\n> the stdout/stderr. Is it possible to parse the information using\n> net-related OS X C/C++ APIs? The Linux implementation that uses /proc is\n> awesome!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/osquery/commit/c660f077d1cef578f5f3381553dce46fdc249a89#commitcomment-8355976\n> .\n## \n\n\"Las monta\u00f1as no son estadios donde satisfacer nuestra ambici\u00f3n de logros,\nson las catedrales donde practicar nuestra religi\u00f3n.\"\nAnatoli Bukr\u00e9yev\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8356103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "TonyFo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8390111", "body": "Samsung\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8390111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "citylights": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/osquery/comments/8401419", "body": "How dose this work? ?????\n", "reactions": {"url": "https://api.github.com/repos/facebook/osquery/comments/8401419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}