{"_default": {"1": {"teraPacket": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/84", "title": "compile error with the latest libphenom and concurrencyKit", "body": "I got the following compile error when doing `./autogen.sh; ./configure; make`.\r\nI did a git clone on this repo and the github repo on concurrencyKit.\r\n\r\nAny ideas?  Thanks.\r\n```\r\nlibtool: compile:  gcc -DHAVE_CONFIG_H -Ithirdparty/ck/include -Iinclude -I. -DPHENOM_IMPL=1 -Werror -m64 -fno-omit-frame-pointer -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D__x86_64__ -I/usr/local/include -std=gnu1x -pedantic -Wall -Wextra -Wno-declaration-after-statement -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wno-nested-externs -Winline -Wdisabled-optimization -fstrict-aliasing -pipe -Wno-parentheses -O2 -g -gdwarf-2 -MT corelib/libphenom_la-counter.lo -MD -MP -MF corelib/.deps/libphenom_la-counter.Tpo -c corelib/counter.c  -fPIC -DPIC -o corelib/.libs/libphenom_la-counter.o\r\nIn file included from include/phenom/counter.h:81:0,\r\n                 from corelib/counter.c:17:\r\ninclude/phenom/defs.h:368:41: error: static assertion failed: \"counter_iterator_definition_bad\"\r\n #  define ph_static_assert(expr, msg)   _Static_assert(expr, #msg)\r\n                                         ^\r\ncorelib/counter.c:170:1: note: in expansion of macro 'ph_static_assert'\r\n ph_static_assert(sizeof(struct ph_counter_scope_iterator)\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bfontaine": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/82", "title": "Tag a (stable) release?", "body": "Hello,\n\nIt\u2019d be very helpful if you could tag a release so we know the code there is stable and can be used. I work on [Homebrew](http://brew.sh/) and we provide a way to install `libphenom` but we rely on the git HEAD so can\u2019t provide checksums and can\u2019t ensure users will always get the same code depending on the time they install it, making it harder for us to debug issues.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/82/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kev009": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/48", "title": "tests/timer failures on FreeBSD", "body": "I haven't dug into this yet.  I'm not getting these consistently, sometime the run will be successful.  The affinity failed message is always present (\"nbio\" and \"job\" in the message were added by me).\n\n<pre>\n1387793688.893 err: /1 nbio failed to set thread 0x80240e200 affinity\n1387793688.893 err: /2 nbio failed to set thread 0x80280e200 affinity\n1387793688.893 err: /3 nbio failed to set thread 0x802c0e200 affinity\n1387793688.894 err: /4 nbio failed to set thread 0x80300e200 affinity\n1387793688.894 err: /5 nbio failed to set thread 0x80340e200 affinity\n1387793688.894 err: /6 nbio failed to set thread 0x80380e200 affinity\n1387793688.894 err: /7 nbio failed to set thread 0x803c0e200 affinity\n1387793688.894 err: /8 nbio failed to set thread 0x80400e200 affinity\n1387793688.894 err: /9 nbio failed to set thread 0x80440e200 affinity\n1387793688.894 err: /10 nbio failed to set thread 0x80480e200 affinity\n1387793688.894 err: /11 nbio failed to set thread 0x804c0e200 affinity\n1387793688.895 err: dns/13 job failed to set thread 0x80540e200 affinity\n1387793688.895 err: dns/12 job failed to set thread 0x80500e200 affinity\n1387793688.893 err: phenom:sched/0 nbio failed to set thread 0x80209a200 affinity\n#     Failed test (tests/timer.c:record_tick() at line 38)\n#     Failed test (tests/timer.c:record_tick() at line 38)\n# Looks like you failed 2 tests of 8.\n# ELAPSED: 749ms\n\n1..8\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&timer)\nok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)\nok 4 - 100ms resolution: diff=106\nok 5 - 100ms resolution: diff=106\nnot ok 6 - 100ms resolution: diff=213\nnot ok 7 - 100ms resolution: diff=214\nok 8 - PH_OK == ph_sched_run()\n</pre>\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/48/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/comments/5289555", "body": "\"The equivalent to this should also be applied to the other nbio implementations.\"\nShould there be issues created for this?  Seems like an easy thing to lose track of.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/comments/5289555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wez": {"issues": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/27", "title": "add libcurl integration using curl_multi_socket_action", "body": "Make it easy to create a multi-handle that is wired up to our event handling.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/27/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/26", "title": "profile and optimize find_record", "body": "Throwing this one out there for folks that want to dive in.\n\nIn the bufq API we have `ph_bufq_consume_record` which searches the bufq for a matching record delimiter.\n\nFor many internet protocols this delimiter is CRLF.  For many other applications, we're likely to be looking for LF.\n\nThere are a couple of optimizations that could be investigated.\n- Can we accelerate the `memmem` call using the `sse3_memchr` function from here? http://repnop.org/carte/snippets/simd/.  The performance.data file indicates that this performs consistently better than the darwin libc.  To adopt this, we'd need to detect sse3 either at runtime or compile time\n- are there specializations of `sse3_memchr` that can be made for detecting CRLF?\n- are there specializations of string matching algorithms with a constant, known needle that we could use?\n- is there a more efficient way to match needles across the \"straddle\" point in cases where the delimiter straddles discontiguous memory regions?\n- for long records, we make repeated calls and search across the same memory regions repeatedly.  We can surely cache the last searched offset and improve efficiency.  We'd need to make sure that we invalidate this offset in the appropriate circumstances (mostly when we've consumed past that point)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/26/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/1", "title": "Add BSER load/dump support for variants", "body": "BSER is a local-IPC only serialization format for dynamic data:\nhttps://github.com/facebook/watchman/blob/master/BSER.markdown\n\nAdding support for this to Phenom requires adding load/dump APIs similar to the JSON load/dump API.\n\nIt also means adding API support for \"Array of Templated Objects\".  In Watchman, this is achieved simply by storing the template definition as a special property of the object type.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/1/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/b93da641dd8f678b49692bcdfb6407bea7bdbca3", "message": "Bump up minimum CK version to 0.5.0"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/8bb10c25bbcb8fc68aa67e949399c84aa1e93050", "message": "mechanical change to allow compilation with CK 0.5.x"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c371263ec2df0d485a2c5e0bbefda2a94c89f707", "message": "linting: Default to pwd if the .git dir is missing\n\nThe cause of the build failure in https://github.com/facebook/libphenom/issues/72\nis that the brew build checks out the repo without the .git dir.\n\nThe linter is looking to make paths relative to the root, and it was\nfinding the .git dir to determine where the root was.  Without the git\ndir being present, it ends up being relative to `/` and fails the build\nbecause the include guards don't match that scheme.\n\nIf the .git dir is missing, we'll now just assume that we're being run\nfrom the root, which is the only way that this script is run in\nlibphenom."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/3da7cc622b6a33a0c6522e826804953b67bb36a1", "message": "Re-point travis to the CK repo"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/01c39330cd856b8ab05a3799ebbc30a34994e09a", "message": "Make epoll_ctl errors fatal errors\n\nWe see this every so often and they result in a bad state, so it is\nbest to terminate."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/4eebc82ec0969ed3c9852bd50cd3dd1af150cecf", "message": "libphenom: test and fix bufq ad-hoc size buf\n\nSummary:\nThe bug was caused by calling `select_size` to determine which\nof the pre-defined buffer buckets to use and passing the result down\nto the buffer constructor, which itself calls `select_size`.\n\nIf the desired buffer to be appended is larger than 64k, we'll try to use a\nsingle ad-hoc buffer that exactly matches the size to be appended.  In this\ncase, `select_size` will return zero.\n\nWhen `select_size` is called with 0 as the size, it will pick a default size of\n8192 bytes.  When calling `ph_bufq_append` with a len > 64k we actually end up\nallocating 8192 bytes instead and end up writing only 8192 but recording the original size,\nand subsequently read off the end of the buffer space :-(\n\nIn the environment where this was detected, ASAN didn't catch the invalid\nmemory accesses.\n\nThe resolution is to simply pass the length down to the buf constructor\nfunction; the intermediate assignment to the `buflen` is not needed and is a\nremnant of an earlier incarnation of this function.\n\nTest Plan:\nAdded a unit test to verify memory integrity with a range of buffer sizes.\n\n```\nbrew install concurrencykit  # or otherwise install locally\n./autogen.sh\n./configure\nmake check\n```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/18cefb23a97befdccede96a88a1cd6b48cef253b", "message": "Remove ares from pkg-config deps"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/93f9015d2aaa1a7253bbbd3e9fa9c2aa8a3c02e6", "message": "Fixup install rule for ck unbundling\n\nAlso add `make install` to travis to try to catch this sort of issue\nfaster in the future."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/d929042db682b5d297df1e417b7dbc162f45e3af", "message": "update readme about CK dependency"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/2203f9e3a3de1b94c0b5db0bb217c25a92db9bb8", "message": "Fixup travis build for CK upgrade\n\nBump the CK version that we pull in for travis builds.\n\nCan't use unlikely in this code branch, because the code branch is already\nunlikely and the code size would grow:\n\n```\nthirdparty/ck/include/ck_ring.h:243:1: error: inlining failed in call to 'ck_ring_enqueue_spmc': call is unlikely and code size would grow [-Werror=inline]\ncorelib/job.c:539:12: error: called from here [-Werror=inline]\n```"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/95f47d376ce6663ffd9932452a5d7417fdd64771", "message": "remove ares from travis build config too"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/e2894dff7ae11cdc3a18dd6d818de370b664844f", "message": "Remove libcares support\n\nSee https://github.com/facebook/libphenom/issues/57 for context\n\nThe future is most likely http://getdnsapi.net/"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6e88a904cf0fae84d2d0c81ca123a4fc9702f3ae", "message": "Fix up travis build for unbundled CK\n\nSince we don't bundle the library, we need to fetch and build it as part\nof the travis run."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/bc0153bff605b52f6c2301fddf652dcef48ca3b0", "message": "Allow listeners to opt out of SSL_CTX_free for ph_sock_t\n\nSummary: SSL server contexts are relatively more expensive to create\nthan client contexts because they have to load certificates, keys and\nperhaps also DH parameters for PFS.  The unilateral SSL_CTX_free in\nsock_dtor forces a more expensive (and likely blocking!) operation for\nthese sorts of contexts.\n\nThis diff allows disabling the the SSL_CTX_free; when disabled, the\napplication is solely responsible for managing the lifetime of the\nSSL_CTX associated with the SSL object that was enabled on the sock\nobject.\n\nI've modified `examples/echo.c` to show how to use it in this fashion\nfor listeners.  The `sclient` example code remains unchanged.\n\nAddresses https://github.com/facebook/libphenom/issues/58"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/5ba4197e20594e9755f81b67a64a639757d8e4db", "message": "Make it clearer that you need defs.h first\n\nAddresses https://github.com/facebook/libphenom/pull/55"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24565604", "body": "Do you only see this with clang?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24565604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24567938", "body": "I think https://github.com/facebook/libphenom/commit/75a11cb7fc73c649d56267a39177025c03977da0 will get you up and running\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24567938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568507", "body": "That's a weird one; the call isn't actually marked as likely or unlikely; sounds like a compiler bug.\nI think you told me your kernel version and not your distro version; can you provide the output from:\n\n```\ncat /etc/redhat-release\ngcc -v\n```\n\nCan you also check to see if you have any pending updates to install?\n\nRemoving the inline is the way to resolve it in this case, although I'd probably go with changing it to a define if this is a mainstream version of gcc with no easy upgrade path.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24569903", "body": "Thanks; reproduced on CentOS 6.3, fixed in https://github.com/facebook/libphenom/commit/b23ae9e4edebc4bf503f0a977bf3532d6008f34f\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24569903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24636564", "body": "Thanks for diving in!\n\nph_socket_connect() shouldn't close() the socket because it doesn't create it.\nThe idea is that the ph_socket_connect_func that you provide will take care of releasing that resource when it notices that the connect failed.\n\nHow are you triggering this code path?  Perhaps we're missing the close in a different spot (maybe connected_sock?)\n\nAlso, before I can accept a pull request from you, I need to confirm that you've signed our CLA--take a look at http://facebook.github.io/libphenom/#README--Contributing for more details.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24636564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637359", "body": "ae1968f3f35cd70077d177aafe489b80efbda327 should help with this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637926", "body": "You need to install c-ares; this is mentioned in the System Requirements section of the docs:\nhttp://facebook.github.io/libphenom/\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24637926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640911", "body": "Thanks!\nWe prefer to have a linear history, so I applied your changes using:\n\n```\n$ hub am https://github.com/facebook/libphenom/pull/8\n$ git rebase -i 'HEAD^^^^'\n```\n\nand used 'fixup' to squash them together\n\nThe result is 6bcb020c5801af990cb80b43cfb424a1debff176\n\nthanks for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24685838", "body": "I'll close this crash issue, and open a separate one to track the potential leak; thanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24685838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24716538", "body": "Thanks for diving in!\n\nThe Solaris FILE limitation is one I feel quite strongly about.  Also: using the posix functions direct avoids some additional heap overhead that we just don't need in this case.\n\nOne thing I had in mind in this area is factoring this code out into a linux specific utility function called something like `ph_procfs_get_int` that takes a path relative to /proc and extracts an int64_t value.\n\nOne last thing: before I can accept a pull request from you, I'll need you to sign our CLA; http://facebook.github.io/libphenom/#README--Contributing has more details on this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24716538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744569", "body": "Please share:\n- Which OS/Distribution you're using (eg: Ubuntu 12.04)\n- `uname -a` (so we know which architecture you're using)\n- `gcc -v` (so we know which compiler you're using)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744643", "body": "You need to install autoconf and automake\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24744643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24757260", "body": "We have other ways to accept the CLA (I can send you a PDF via email), so don't let the online form stop you :-)\n\nRegarding your company: if your contribution is trivial enough that your employer wouldn't be concerned about it, then I don't see why they'd have an objection to you signing the CLA as an individual contributor; the CLA basically says that you have the right to contribute the code you're contributing and that you grant us the rights to use it.  IANAL, so you should do what you need to do to make sure you understand it! :)\n\nLet me know how you'd like to proceed!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24757260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24787955", "body": "Added a note in the docs to make this clearer\nhttps://github.com/facebook/libphenom/commit/a728f7f33e5d62f2d4d71e29cf9169d1f835ac6d\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24787955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24866799", "body": "This is an issue with 32-bit platforms.  I can take a look at making this work, but recommend that you consider installing and using a 64-bit system if possible.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24866799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24867345", "body": "Should be resolved by: https://github.com/facebook/libphenom/commit/b00674ade800ad1a8a216435138fd39b5bb6f618\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24867345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24870684", "body": "I just added https://github.com/facebook/libphenom/commit/3d05d804ed1e73f4ee9ef285892f11df0927860d to help with this\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24870684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24875934", "body": "Regarding the compilation error, try turning on optimization:\n\n```\ngcc -O2 -o main main.c `pkg-config libphenom --cflags --libs`\n```\n\nI'll update the README to add the make install step and add the compiler flag.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24875934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24887274", "body": "Thanks for diving in!  Also: thanks for adding tests :)\n\nI'd like to understand the use case a bit better; can you describe the problem scenario you're working to avoid here?  Are you aiming to avoid heap fragmentation or allocator contention?  Can you tell me a bit more about a specific issue you've hit where you've needed this?\n\nHave you considered using an alternative general purpose allocator such as jemalloc, or using a slab allocator such as https://github.com/MessageSystems/umem?  Both of these perform bucketing to reduce the contended allocator sections, and both of these can replace all malloc usage in your program.\n\nOne thing we should be careful about is how this performs and scales; can you try adapting tpool.c into a benchmark for this?  I think you can have the `busyjob` function allocate and free the memtype and then sample the memory counters for it at the bottom and print out the allocation/free rates.  It would be interesting to vary the number of jobs and the num_cores value we pass in here:\n\n```\notherpool = ph_thread_pool_define(\"other\", NUM_BUSY_JOBS, num_cores);\n```\n\nWhat I'm thinking is that, at least in the umem allocator, there is allocator level machinery to reduce cross-cpu contention.  By adding the pre-allocation feature in libphenom we'd be taking on some of that burden so we should make sure that we understand how well that works.  You should compare a memtype with preallocation to one without.  You probably should also make the preallocation size configurable in the benchmark too, as I suspect the performance characteristics will vary if we can satisfy most requests in the preallocated region vs. outside it.\n\nAPI wise, I think I'd prefer that the pre-allocation quantity be a field in the memtype definition struct; that way we can pre-allocate once at definition time and avoid placing restrictions or limitations on calling the preallocation function (it becomes effectively a static or part of initialization).\n\nOne last thing: per http://facebook.github.io/libphenom/index.html#README--Contributing I'll need you to sign our CLA before I can apply your work to our tree.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24887274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893471", "body": "re: jemalloc (and umem): it exports malloc/free/realloc symbols, so you should be able to just add -ljemalloc to your link line and make use of it.  Alternatively, you can LD_PRELOAD=libjemalloc.so to force it in ahead of the regular allocator.\n\nDo you have a system with multiple cores to test this on?  I think the biggest difference will be when there are multiple threads contending over the same mem type.\n\nI'm not 100% sure about the CLA; I'll check with folks tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893961", "body": "Updated the readme in https://github.com/facebook/libphenom/commit/7068b7b463c91f3edab220fedcfd73452ac0c043\nthanks!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/comments/5291391", "body": "I'm going to make a pass to follow-up for the other platforms in the near future; if you want to file an issue to keep me honest, feel free :)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/comments/5291391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425024", "body": "I think this should be:\n\n```\n}\nif (status != 0 && rac->s != -1) {\n  close(rac->s);\n}\n```\n\nso that we catch both connection errors and allocation failures and clean up the socket in both cases\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453127", "body": "We can't use FILE in phenom: Solaris FILE's can only represent fds whose value fits in 8bits and we're intended to run with many thousands.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453164", "body": "fscanf (you'd probably switch this to sscanf due to the FILE comment above) has much more overhead than strtol.\nIf you want to cover this case off, I'd be amenable to a pull request that handles the various error scenarios.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453223", "body": "I meant: handles the various error scenarios in strtol, rather than switch to the scanf family of functions\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6453223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505912", "body": "rather than hard-coding to 8, please make this align to `CK_MD_CACHELINE`.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505918", "body": "I think we can just put these fields in `struct mem_type` and save some extra de-referencing, both cognitive and in terms of CPU activity.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505938", "body": "prefer `ph_panic` instead of `abort` so that we can capture both a human generated reason and a stack trace\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505958", "body": "make sure you apply this same logic (eg: discounting the number of bytes allocated to 0) in the free code too, otherwise the bytes counter will skew\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505961", "body": "fixup the number-of-bytes adjustment to 0 down here if this is in our preallocated region\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6505961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564126", "body": "in the event that realloc() fails, this will wipe out the memtypes array and lead to a crash.\nThe safe pattern is to use a temporary variable and do something like this:\n\n```\nuint32_t newsize = memtypes_size * 2;\nstruct mem_type *newtypes = realloc(memtypes, newsize * sizeof(*memtypes));\nif (newtypes) {\n    memtypes = newtypes;\n    memtypes_size = newsize;\n    return true;\n}\nreturn false;\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564128", "body": "let's have this return a boolean to indicate success/failure\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564139", "body": "can we do something like `UINT_MAX / 2` instead of the hard-coded value here?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564156", "body": "indentation seems weird; should be 4 spaces\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564158", "body": "indentation here too\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6564158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645691", "body": "Can you use `ck_pr_faa_8` (see http://concurrencykit.org/doc/ck_pr_faa.html) and then make this like the other checks in the rest of this pull request?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645694", "body": "please wrap this to 80 characters :-)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645695", "body": "same comment here about line length!\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6645695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673311", "body": "if we're generating the right stuff in the php, do we need this in the JS?\nI'd prefer to have just one place that canonicalizes the data and it feels like that should be in mkdoc.php\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673371", "body": "should this just be:\n\n```\n   'raw_content' => htmlspecialchars($incfile, ENT_QUOTES, 'utf-8'),\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789058", "body": "The prototype and a documentation comment need to go in `include/phenom/string.h`; this is needed for two reasons:\n- The compilation flags for libphenom are intentionally very strict: without a function prototype in the header, the build won't succeed.  Function prototypes are very important on 64-bit platforms, as they affect register allocation and missing prototypes can result in broken executables\n- The docs on the website are built from the documentation comments in the header.  Without the docs, it is difficult for folks to discover and use your new API functions.\n\nTake a look at the other docs in `include/phenom/string.h` for examples on the convention and styling of docs\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789061", "body": "Returning the string itself isn't especially useful in procedural code, so I'd rather that this simply have a `void` return type\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789065", "body": "please remove this blank line: the opening brace on its own line is enough of a visual break\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789068", "body": "prefer whitespace around operators:\n\n```\n  uint32_t i = 0;\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789072", "body": "space around operators here too.  The parenthesis are redundant, so please remove them:\n\n```\n  uint32_t j = str->len - 1;\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789076", "body": "space after the if and around operators, but no redundant space.  Pull the opening brace up to this line (provided it fits in 80 characters):\n\n```\n  if (str->len == 0) {\n```\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789082", "body": "remove parentheses from the return statement; prefer this:\n\n```\n    return str;\n```\n\nhowever, if we're making this a void function, that line is simply `return;`\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6789082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tyrellj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/d187b1163ee9ed05f632dff014e6aff014055963", "message": "fix warning for implicit declaration of function 'ph_snprintf' in tests/buf.c"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6c14c49bd5e864285cb496c6e0c207d9ca6599cc", "message": "Mark static assert type as unused."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6f4094821ef32a27d79ee2b9b11a42631728c1e7", "message": "Cleanup leftover ph_stm_init() prototype.\n\nThe method was removed in commit 07b55a27.\n\nfixes issue #77."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "richardjrossiii": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/4d56a10b2c7f36a169400a85dbb76397bc1f11d5", "message": "Added support for buffer queue max_record_size.\n\nSummary: Added max_record_size for buffer queues to limit memory and CPU usage when scanning extremely large buffers in an append -> consume_record loop.\n\nTest Plan: Create a new buffer queue, note that it will truncate itself after exceeding its max record size limit and set errno to EOVERFLOW.\n\nReviewers: wez\n\nReviewed By: wez\n\nDifferential Revision: https://phabricator.fb.com/D2046371\n\nTasks: 4455985\n\nSignature: t1:2046371:1431547070:fe2b6de6deffbf1d901199ed8584f792199f4bf7"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcaneill": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/38811e3a44f62ee78deb1a04d8a154460487f4a9", "message": "docs/phenom: minor add some missing semicolons and variable declaration"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/7360fea43b49fd89a1a8c02e3f41eefa383b81c1", "message": "fixed: l_isxdigit macro should only allow hexadecimal characters"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/22d5c0952b60be40073b0dd1874a37f6cf55b4eb", "message": "new test case around unicode escaping in json parser"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sbahra": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/5c8704755e21861ed555d3d379cd9ef04f62aa95", "message": "corelib/counter: Correctly handle NULL case."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/c432aa6b49859a47bce3aaf3f59153235a22ef28", "message": "corelib/counter: Fix ck_malloc wrapper functions.\n\nReturn NULL on allocation failure and do not ignore\ndeferral flag. This avoids unnecessary deferrals if\npossible."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abelmathew": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/883c11fd83fc3d2bcf496dd8d07d497c24cacb43", "message": "Correctly set EVFILT_WRITE for nbio emitters when using kqueue.\n\nSummary: Fixes a typo in corelib/nbio/kqueue.c:ph_nbio_emitter_apply_io_mask\nthat incorrectly set EVFILT_READ when the mask parameter specified interest in\nwrite events."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saghul": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/99abee7da7b66091a03234c4bd2d83d82312f50a", "message": "update readme about c-ares dependency"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brucespang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/facebook/libphenom/commits/01b3837258eaf5e86d833c5985a94ce71129d663", "message": "Upgrade concurrency-kit to 0.4.1\n\nThis includes a breaking api change for ck_ring (introduced in ck\n0.3.3). Applications that use both libphenom and ck_ring will need to\nmodify their use of ck_ring."}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/31803b9acee83e22cb81fc579211cc0b39d33762", "message": "Remove thirdparty/ck references in Makefile"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/18e1a9a0346f6104bdd31519fb1544949eb70bfa", "message": "Use pkg-config to build concurrency-kit"}, {"url": "https://api.github.com/repos/facebook/libphenom/commits/6008e942802c9166d525ba4bd308de8712e0eedc", "message": "Remove bundled ck"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "udaykkumar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/86", "title": "--max-version for ck can now be at 0.6.0", "body": "[#84](https://github.com/facebook/libphenom/issues/84)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flowly": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568922", "body": "The source is the newest, there is nothing to update. \n\ncat /etc/redhat-release\uff1a\nRed Hat Enterprise Linux Server release 6.2 (Santiago)\n\ngcc -v\nUsing built-in specs.\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 4.4.6 20110731 (Red Hat 4.4.6-3) (GCC) \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24568922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24638624", "body": "Yes, it is more reasonable close() the socket in connected_sock. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24638624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425147", "body": "It looks better. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6425147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jbergstroem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24631508", "body": "Can only reproduce this with clang. Thought it was some kind of optimisation error (auto\\* seems to imply `CFLAGS=-O2`), but that doesn't seem to be the case either. Here's the latest bt from b23ae9e4edebc4bf503f0a977bf3532d6008f34f:\n\n```\nStarting program: /Users/jbergstroem/Work/libphenom/tests/iobasic.t\n1..13\nok 1 - PH_OK == ph_nbio_init(0)\nok 2 - PH_OK == ph_job_init(&pipe_job)\nok 3 - 0 == ph_pipe(pipe_fd, PH_PIPE_NONBLOCK)\nok 4 - set up ping\nok 5 - 100ms resolution: diff=100\nok 6 - 1 == read(pipe_fd[0], &buf, sizeof(buf))\nok 7 - 100ms resolution: diff=101\n\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x0000000000000004\n[Switching to process 10997 thread 0x10b]\n0x000000010002678f in ck_epoch_synchronize (global=0x100034710, record=0x0) at thirdparty/ck/src/ck_epoch.c:395\n395     record->epoch = delta;\n(gdb) bt\n#0  0x000000010002678f in ck_epoch_synchronize (global=0x100034710, record=0x0) at thirdparty/ck/src/ck_epoch.c:395\n#1  0x000000010002694d in ck_epoch_barrier (global=0x100034710, record=0x0) at thirdparty/ck/src/ck_epoch.c:403\n#2  0x0000000100014705 in ph_thread_epoch_barrier () at corelib/thread.c:353\n#3  0x0000000100014175 in ph_thread_boot (arg=0x101184ab8) at corelib/thread.c:223\n#4  0x0000000100127772 in _pthread_start ()\n#5  0x00000001001141a1 in thread_start ()\n```\n\nFeel free to ping me at IRC (jbergstroem@freenode) if you want to chat.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24631508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640559", "body": "(confirmed that it does)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24640559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lpereira": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24728919", "body": "I wasn't aware about the Solaris case.\n\nYes, I know about the overhead (on Linux at least, it calls `fstat()`, `mmap()`, etc), but given that this should be called just once, I don't think that's really a problem; but then, I don't know how this is being used inside your infrastructure :)\n\nI do like the `ph_procfs_get_int()` suggestion.\n\nHowever, I won't be able to sign the CLA as that requires me to have a Facebook account (which I deleted a few weeks ago). Also, my company lets me contribute to open source without bureaucracy from their part as long as the contributions are trivial -- I don't know, however, if I'd have to consult legal before signing a CLA.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24728919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Bumanji": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24863375", "body": "The same error happened in my computer.\nOS:Ubuntu 12.04\nuname -a\nLinux bruce-desktop 3.5.0-40-generic #62~precise1-Ubuntu SMP Fri Aug 23 17:59:10 UTC 2013 i686 i686 i386 GNU/Linux\ngcc -v\ngcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5)\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24863375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "maiah": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24876091", "body": "It worked! This is very quick response and resolution. And now I need to know that \"-O\" option.\nBTW, thanks for updating README.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24876091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "maz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24889325", "body": "In terms of my use case, I was planning on preallocating client states to cut down on the number of system calls required by the memory allocator to increase the number of pages the program is assigned, in addition to reducing heap fragmentation. My guess, and I can write a benchmark to test this, is that if the number of clients/items increases very quickly, it will be faster to preallocate.\nIn terms of the API, originally I did have an additional field in the `ph_memtype_def` struct to indicate how many items ought to be preallocated. However, since this ended up breaking other parts of the library, I decided against it. However, if this function does end up getting included in the library, it would make sense to make it a field in the struct.\nIn terms of the CLA, I'm under 18, so should I or one of my parents sign the CLA, or is there some other legal process that I should go through?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24889325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893306", "body": "Additionally, I'm unsure as to how I could switch libphenom to use jemalloc, without modifying the source code since, I think, it'd require including jemalloc.h, telling jemalloc.h to mangle `malloc()` and friends, and implementing a new version of `strdup()` which uses jemalloc instead of the glibc allocator. \n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/issues/comments/24893306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wilsonwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6566125", "body": "By the way, is this line thread-safe?\nWhat if two threads happen to get this line while next_memtype equals to 1022, then they both return false.\nAfter that ,memtypes may overflow.\n\nIs that right?\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6566125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "deepak1556": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673436", "body": "oops, sorry.. this isnt needed.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673601", "body": "cool! this should do it. thanks didnt knw abt that function.\n", "reactions": {"url": "https://api.github.com/repos/facebook/libphenom/pulls/comments/6673601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}