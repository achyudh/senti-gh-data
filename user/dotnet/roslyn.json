{"_default": {"1": {"mazhou-msft": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24311", "title": "QuickInfo should indicate \"ref\" for ref properties", "body": "**Version Used**: \r\n\r\nVisual Studio 2017 27317.1.d15.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# project\r\n2. Add reference to `System.Memory` from NuGet\r\n3. Create an instance of `Span<int>` and access it's indexer, QuickInfo should display the definition of the indexer.\r\n\r\n**Expected Behavior**:\r\n\r\nThe QuickInfo should display the indexer definition as follow, or similar (with `ref`):\r\n\r\n```C#\r\nref int Span<int>[int index]\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nQuickInfo does not indicate `ref`, developer may not know this is a ref return.\r\n \r\n![span](https://user-images.githubusercontent.com/12908526/35114268-052bcb80-fc39-11e7-9dc8-eca9a6d5a2a1.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlekseyTs": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24310", "title": "Public APIs exposing Flow Graph should be guarded with a feature flag before we merge to master.", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/b252b48a5960a54853e2724857626da451f0853b", "message": "Restore correct SemanticModel behavior for Default Property Transformation scenarios. (#24196)\n\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=548762"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24292", "title": "Allow expression variables in field/property initializers and in queries.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24263", "title": " An initial prototype to build a flow graph", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OliverNET": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24308", "title": "ProjectReference to .vbproj should be loaded", "body": "**Version Used**: Microsoft.CodeAnalysis 2.6.1 and Visual Studio 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n\r\nSee attached file for sample code.\r\n[example.zip](https://github.com/dotnet/roslyn/files/1643172/example.zip)\r\n\r\n1. Create a new VB.NET console application \"ConsoleApp\" and add a new VB.NET Class Library project \"ClassLibrary\"\r\n2. Create a new VB.NET console application \"CodeAnalysis\" and install nuget package Microsoft.CodeAnalysis\r\n3. Add following code to CodeAnalysis Module1 to compile the ConsoleApp.sln:\r\n```vb\r\nImports Microsoft.CodeAnalysis\r\nImports Microsoft.CodeAnalysis.MSBuild\r\n\r\nModule Module1\r\n\r\n  Sub Main()\r\n\r\n    Dim solution As Solution\r\n\r\n    Using workspace = MSBuildWorkspace.Create()\r\n      workspace.SkipUnrecognizedProjects = False\r\n      workspace.LoadMetadataForReferencedProjects = True\r\n\r\n      solution = workspace.OpenSolutionAsync(\"C:\\source\\bug\\CodeAnalysis.sln\").Result()\r\n\r\n      For Each projectId In solution.GetProjectDependencyGraph().GetTopologicallySortedProjects()\r\n        Dim project As Project\r\n        Dim compilation As Compilation\r\n        Dim compileErrors As List(Of Diagnostic)\r\n\r\n        project = solution.GetProject(projectId)\r\n\r\n        compilation = project.GetCompilationAsync().Result\r\n\r\n        compileErrors = (From qItem In compilation.GetDiagnostics() Where qItem.Severity = DiagnosticSeverity.Error).ToList()\r\n        If compileErrors.Count > 0 Then\r\n          Throw New Exception(\"Compile error in project\")\r\n        End If\r\n      Next\r\n    End Using\r\n\r\n\r\n  End Sub\r\n\r\nEnd Module\r\n```\r\n\r\n4. Run the code - it works as expected\r\n5. Now add a reference in ConsoleApp to ClassLibrary. This will generate the following in ConsoleApp.vbproj\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ClassLibrary\\ClassLibrary.vbproj\">\r\n      <Project>{f303af39-f355-4ad6-874d-bce3c832bde1}</Project>\r\n      <Name>ClassLibrary</Name>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n```\r\nProject can still be built in Visual Studio.\r\n\r\n6. Run project CodeAnalysis again. Now there are lot of compileErrors. Property MetaReferences in failing \"project\" is not loaded completly.\r\n\r\nThanks for any hint how to build the project.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jskeet": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24306", "title": "Back compat issue: ref conditional expression allowed without explicit 7.2", "body": "**Version Used**: Multiple, see below\r\n\r\n**Steps to Reproduce**:\r\n\r\nCreate a new library project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nEdit `Class1.cs` (or create a new file):\r\n\r\n```csharp\r\nclass BugDemo\r\n{\r\n    static ref int Valid70(bool condition, ref int x, ref int y)\r\n    {\r\n        if (condition)\r\n        {\r\n            return ref x;\r\n        }\r\n        else\r\n        {\r\n            return ref y;\r\n        }\r\n    }\r\n\r\n    static ref int Invalid70(bool condition, ref int x, ref int y)\r\n    {\r\n        return ref condition ? ref x : ref y;\r\n    }\r\n}\r\n```\r\n\r\nBuild on the 2.0.0 SDK and 2.1.4 SDK.\r\n\r\n(I happened to use 2.0.0 in Bash under WSL and 2.1.4 on Windows 10; I don't expect that to make any difference.)\r\n\r\n**Expected Behavior**:\r\n\r\nShouldn't build on either, without `LangVersion` being explicitly set.\r\n\r\n**Actual Behavior**:\r\n\r\nBuild with a 2.0 SDK (so C # 7.0): `Invalid70` fails to compile (several issues on the return statement).\r\n\r\nBuild with a 2.1.4 SDK (so C# 7.2): Builds fine\r\n\r\n**Reasoning**\r\n\r\nPerhaps the fix to the conditional operator is regarded as a bugfix - but it means that a project which is intended to only require C# 7.0 will build on some machines but not others.\r\n\r\ncc @BillWagner, who I discovered this with.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alrz": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24300", "title": "Refactoring: Create extension method", "body": "This can be triggered in two places:\r\n\r\n1. On static methods with at least one parameter e.g. `static void M(object self) {}`\r\n2. On missing instance method invocations e.g. `obj.Missing();`\r\n\r\nIn both cases, we then list all extension classes (static classes that already have an extension method) for user to select and create/move the method there.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24249", "title": "Implement stackalloc initializers", "body": "Proposal: https://github.com/dotnet/csharplang/pull/1122\r\n\r\n> ```cs\r\n> stackalloc int[3]\t\t\t\t// currently allowed\r\n> stackalloc int[3] { 1, 2, 3 }\r\n> stackalloc int[] { 1, 2, 3 }\r\n> stackalloc[] { 1, 2, 3 }\r\n> ```\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chborl": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24294", "title": "Pattern Matching: Consider using VS's algorithm for merging two or more matches", "body": "As discussed in #24193 , VS has an algorithm for merging two or matches that we may want to convert to if we don't end up moving over to VS's pattern matching.\r\n\r\nLink to source for full algorithm: https://devdiv.visualstudio.com/_search?type=code&lp=apps-projects-Collection&text=patternmatchextensions.cs&result=DefaultCollection%2FDevDiv%2FVS-Platform%2FGBmaster%2F%2Fsrc%2FEditor%2FText%2FImpl%2FPatternMatching%2FPatternMatchExtensions.cs&preview=1&_a=contents\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24193", "title": "Patternmatchingapichange", "body": "fixes https://github.com/dotnet/roslyn/issues/24191\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\nWhen using NavigateTo, user can enter camel case patterns.  This fix improves the order that the matches are displayed, bringing more specific matches to the top of the list.\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/24191\r\n\r\n### Workarounds, if any\r\nCamel case search patterns may not give desired results, so use would have to search using the full name\r\n\r\n### Risk\r\nlow\r\n\r\n### Performance impact\r\nno perf impact\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nNothing missed, this is an improvement to existing feature.\r\n\r\n### How was the bug found?\r\nimprovement to existing feature\r\n\r\n### Test documentation updated?\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmat": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24290", "title": "EnC scenario: editing exception handler containing an active statement sometimes doesn't display rude edit", "body": "**Steps to Reproduce**:\r\n\r\nConsole app:\r\n\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {   \r\n        // [3]\r\n        try\r\n        {\r\n            G();\r\n        }\r\n        catch (Exception) { // breakpoint [2]\r\n            Console.WriteLine(1);\r\n            Console.WriteLine(2);\r\n            Console.WriteLine(3);\r\n        }\r\n        Console.WriteLine(4);\r\n        Console.WriteLine(5);\r\n        Console.WriteLine(6);\r\n        Console.WriteLine(7);\r\n    }\r\n\r\n    static void G()\r\n    {\r\n        throw new Exception(); // breakpoint [1]\r\n    }\r\n}\r\n```\r\n\r\n1. Start new instance of VS -- the issue seems to only reproduce the first time.\r\n1. Place breakpoints as shown above and F5\r\n1. Once Breakpoint [1] is hit insert a new line at [3] (in between ```{``` and ```// [3]```)\r\n1. F5, Breakpoint [2] is hit.\r\n1. Step (F10)\r\n1. Change ```Console.WriteLine(2);``` to ```Console.WriteLine(20);```.\r\n\r\n**Expected Behavior**:\r\n\r\nA squiggle appears on ```catch``` keyword, an error is displayed in Error List.\r\nHitting F10 shows an error dialog.\r\n\r\n**Wrong Behavior**:\r\n\r\nThe error is not reported.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/c7983cf2e9d53183bd28b7a724e66a9caaeb97cc", "message": "Add Microsoft.VisualStudio.Debugger.UI.Interfaces packaging (#24149)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24269", "title": "WIP: #23865", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24197", "title": "WIP: Active Statement Handling", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063798", "body": "These constants were protected. Made them internal.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063802", "body": "This was protected. Made internal to remove from public surface.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063813", "body": "I have swapped the arguments to the error (the error message is the same) so that code shared among both compilers can create this diagnostic -- C# has them in different order.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380207", "body": "return original.Replace('.', '_');\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380246", "body": "rename \"original\" to \"moduleName\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380255", "body": "Don't define this very specific method as an extension method on string. Instead move to MetadataHelpers or something like that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Geneticus": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24289", "title": "Codefix for Must declare namespace on aspx.cs pages causes error by not updating the Inherits attribute in the aspx page.", "body": "**Version Used**: Microsoft.CodeDom.Providers.DotNetCompilerPlatform v1.0.8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. create ASP>Net Web Application (.Net Framework) with masterpage\r\n2. add new file to solution (aspx page C#) create control on page that is set in page_load event.\r\n3. run build solution\r\n4. VS created public partial class\r\n5. roslyn warns to add to namespace\r\n6. apply quick fix\r\n7. reference to cs. file is broken in aspx file because aspx Inherits attribute wasn't updated to include Namespace.PreviousPartialClass\r\n\r\n**Expected Behavior**:\r\nQuick fix should prepend namespace added to aspx file.\r\n**Actual Behavior**:\r\nFixing Warning automatically, causes build error.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MaceWindu": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24287", "title": "\"Use pattern matching\" can introduce variable in scope that already have variable with such name", "body": "**Version Used**: 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o)\r\n        {\r\n            if (o is int)\r\n            {\r\n                var value = (int)o;\r\n            }\r\n            else if (o is Guid value)\r\n            {\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nNot sure really... but at least it shouldn't produce broken code\r\n\r\n**Actual Behavior**:\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o)\r\n        {\r\n            if (o is int value)\r\n            {\r\n            }\r\n            //  CS0136 A local or parameter named 'value' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\r\n            else if (o is Guid value)\r\n            {\r\n            }\r\n        }\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24286", "title": "invalid \"Use pattern matching\" fix for OR condition", "body": "Not sure if it is a separate issue or duplicate of #21097, as it produce the same error but with different code pattern.\r\n\r\n**Version Used**: 15.5.3, 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o1, object o2)\r\n        {\r\n            var test = o1 as Test;\r\n            if (test != null || o2 != null)\r\n            {\r\n                var o3 = test ?? o2;\r\n            }\r\n        }\r\n    }\r\n```\r\n**Expected Behavior**:\r\nno fix proposal\r\n\r\n**Actual Behavior**:\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o1, object o2)\r\n        {\r\n            if (o1 is Test test || o2 != null)\r\n            {\r\n                // CS0165: Use of unassigned local variable 'test'\r\n                var o3 = test ?? o2;\r\n            }\r\n        }\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VSadov": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24275", "title": "When forced into spilling a byref method VB compiler asserts. Should it be an error?", "body": "Testcase: SpillingByrefCall_Spilling\r\n\r\nC# class introduces ref methods\r\n```C#\r\nusing System;\r\n\r\npublic class TestClass\r\n{\r\n    int x = 0;\r\n\r\n    public ref int Save(int y)\r\n    {\r\n        x = y;\r\n        return ref x;\r\n    }\r\n\r\n    public void Write(ref int y)\r\n    {\r\n        Console.WriteLine(y);\r\n    }\r\n\r\n    public void Write(ref int y, int z)\r\n    {\r\n        Console.WriteLine(y);\r\n    }\r\n}\r\n```\r\n\r\nVB test code (references the above code):\r\n```VB\r\nImports System.Threading.Tasks\r\n\r\nModule Module1\r\n\r\n    Sub Main()\r\n        TestMethod().Wait()\r\n    End Sub\r\n\r\n    Async Function TestMethod() As Task\r\n        Dim inst = New TestClass\r\n\r\n        ' ERROR?\r\n        ' currently `ref` is spilled 'by-value' and assert fires.\r\n        inst.Write(inst.Save(Await Task.FromResult(30)), inst.Save(Await Task.FromResult(33)))\r\n    End Function\r\n\r\nEnd Module\r\n```\r\n\r\nExpected: \r\n- not sure. C# gives an error. Possibly VB should as well\r\n\r\nActual:\r\n- compiler asserts. If ignored, the `ref` argument is spilled by-value\r\n\r\nIt might actually be ok in VB to spill by-value. Not sure. \r\nIn any case there should not be asserts.\r\n\r\nAlso note - changing current behavior (ignoring the assert) might be a compat concern. This behavior existed since the last release.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/d0ccd99cec8e1c3d19139dead257df8950ce0181", "message": "Merge pull request #24164 from VSadov/blockIn\n\nBlock use of  explicit `in` arguments in dynamically dispatched expressions."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/54f324bbacfb8d9c6350273470aab7bad7888e6c", "message": "Merge pull request #24200 from dotnet/merges/dev15.6.x-to-master-20180112-080018\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6ab2391a3acd4c046eacf30b0be3f2478f0ddb88", "message": "Added more tests"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/28b182d89ebcdac76c37bb84e9d0ec65b38a9b5e", "message": "added a test with two arguments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8cc031276414977b79e604c4e2cf9d6670a15783", "message": "Merge pull request #24166 from dotnet/merges/dev15.6.x-to-master-20180111-080017\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/831323c19c9ef4172a5e0f783d9be57785233363", "message": "A better error message.  ( keyword should be in ' ' quotes )"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ac833d06b42ff03a8adae95f3fbd2130da2a02fb", "message": "Block use of  explicit `in` arguments in dynamically dispatched expressions.\n\nExplicitly marking an argument as an `in` argument has effect on overload resolution and needs to be known to the dynamic binder to be able to make appropriate decisions. For the time being there is not way to pass this additional information.\nThat would require a small expansion of APIs used by `dynamic`. When we have such API, we should predicate this scenario on the presence of such API.\n\nFor now, In order to not perpetuate accidental and likely incorrect behavior we should block this scenario.\n\nFixes:#22813"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/fee11306f08b0fe3a92d614a79e62e51d7829673", "message": "Merge pull request #24128 from VSadov/missingRef\n\nThe argument that stands for the receiver of a `ref` extension method must be always passed as `ref`"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a3f1a7920a1fa1ea6f49960fce1556e7edb5f8fd", "message": "fixed a typo"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/542daef64095e903bb18dae4c65ac16de7e48cb0", "message": "Merge pull request #24141 from dotnet/merges/dev15.6.x-to-master-20180110-080017\n\nMerge dev15.6.x to master"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24299", "title": "Makes range operators built-in operators", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24273", "title": "Fix a case where the stack spiller spills more than needed. (possibly resulting in false errors)", "body": "Fixes:#17706\r\n\r\n### Customer scenario\r\n\r\nCustomer uses code that involves a sequence of argument expressions that includes `await` - most commonly a method call with `await` among arguments. \r\nSince stack values cannot be preserved across `await` suspension, compiler turns the expressions that go before the `await` into statement forms and stores evaluation results in temporaries, which are used to rebuild the argument values after resuming from the `await` suspension.\r\n\r\nThe problem is that compiler spills one more argument value than needed. In some cases it would make no difference (when spilling is a noop like for constants), in some cases it will result in suboptimal, but correct code, and yet in some cases when argument happen to be unspillable (like a ref returning member) it may result in a **false compile error**.\r\n\r\n### Bugs this fixes\r\n\r\n#17706\r\n\r\n### Workarounds, if any\r\n\r\nIn some cases the differences are unobservable or an ignorable small degrade. No workaround is needed.\r\n\r\nIn other cases where it results in a compile error, user may refactor the code to \"spill manually\" and avoid using `await` in call arguments..\r\n\r\n### Risk\r\n\r\nRisk is low since it primarily affects cases where the difference is observable, which is a combination of method calls, `await` and ref-returning members.\r\n\r\n### Performance impact\r\n\r\nLow perf impact because no extra allocations/no complexity changes.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNO\r\n\r\n### Root cause analysis\r\n\r\nThe bug involves a combination of features and in most cases leads to suboptimal, but correct code.\r\n\r\nTests are added for cases where the difference in spilling strategy leads to error/pass distinction.\r\nThere are existing tests where the change in code quality can be observed.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n\r\n### Test documentation updated?\r\n\r\nN/A", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KirillOsenkov": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24274", "title": "Need fine-granular Cancellation in FindSymbols.DependentTypeFinder", "body": "**Version Used**: \r\naa51be5b9703a8d4acbcd4f444678d5e5f99ab2a\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use the IDE with first-chance exceptions enabled\r\n\r\nI see a whole lot of TaskCanceledExceptions originating in FindSymbols. It seems that this codepath doesn't proactively check the cancellationToken, which results in basically still doing the bulk of the work as well as throwing hundreds of exceptions along the way.\r\n\r\nStack:\r\n\r\n```\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess Line 176\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification Line 146\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.ConfiguredTaskAwaitable<System.__Canon>.ConfiguredTaskAwaiter.GetResult Line 530\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync Line 75\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync Line 61\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSyntaxTreeIndexAsync Line 173\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindImmediatelyInheritingTypesInDocumentAsync Line 625\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync.AnonymousMethod__1 Line 565\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.CombineSelectors.AnonymousMethod__0 Line 66\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.WhereSelectEnumerableIterator<Microsoft.CodeAnalysis.DocumentId, System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>>.MoveNext Line 399\tC#\tSymbols loaded.\r\n \tSystem.Linq.Buffer<System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>>.Buffer Line 2672\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.ToArray<System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>> Line 944\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync Line 565\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesInProjectAsync Line 281\tC#\tSymbols loaded.\r\n>\tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesAsync Line 211\tC#\tSymbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult Line 379\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesInProjectAsync Line 306\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult Line 379\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync Line 595\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.WhenAllPromise<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>.Invoke Line 6435\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3633\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindImmediatelyInheritingTypesInDocumentAsync Line 639\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync Line 69\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync Line 101\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.CreateIndexAsync Line 186\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.SyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Document.GetSyntaxRootAsync Line 218\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.SyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsyncCore Line 718\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.RecoverableSyntaxTree.GetRootAsync Line 112\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Host.RecoverableWeakValueSource<Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax>.GetValueAsync Line 110\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.ExecuteWorkItemHelper Line 681\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem Line 715\tC#\tSymbols loaded.\r\n \tSystem.Threading.ThreadPoolWorkQueue.Dispatch Line 820\tC#\tSymbols loaded.\r\n \tSystem.Threading._ThreadPoolWaitCallback.PerformWaitCallback Line 1161\tC#\tSymbols loaded.\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amcasey": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24268", "title": "Highlight References not symmetric in Local Function", "body": "Select \"action\" here:\r\nhttps://github.com/dotnet/roslyn/blob/6db04109879e42fbe99a3c1e8f1d44175c041e73/src/Workspaces/Core/Portable/CodeFixes/FixAllOccurrences/BatchFixAllProvider.cs#L176\r\n\r\nExpected: 4 occurrences (1 def, 3 refs)\r\nActual: 1 occurrence (selected)\r\n\r\nNote: FAR correctly shows all 4\r\nNote: Selecting any of the other three occurrences highlights all four occurrences (including the problematic one)\r\n\r\n![image](https://user-images.githubusercontent.com/10508071/35017938-293ce240-fad4-11e7-9bd2-a17575885349.png)\r\n\r\n![image](https://user-images.githubusercontent.com/10508071/35017953-37483cc2-fad4-11e7-8603-bb076d09b28c.png)\r\n\r\n(Internal) Version 27315.1.d15.6", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcouv": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24267", "title": "Definite assigning from async local function seems wonky", "body": "The first code sample is an existing test, and arguably behaves correctly (the async local function is only guaranteed to execute until the first await is reached).\r\n\r\nThe second code sample shows that this behavior doesn't change when calling the local function with await.\r\n\r\nThe third code sample shows that adding a finally inside the local function affects the definite assignment of `y`, but it's hard to see why.\r\n\r\nTagging @AlekseyTs @agocke @gafter \r\n\r\nRelates to my recent PR on async using (https://github.com/dotnet/roslyn/pull/23961).\r\n\r\n```C#\r\nusing System.Threading.Tasks;\r\nclass C\r\n{\r\n    public static void M2()\r\n    {\r\n        int a=0, x, y, z;\r\n        L1();\r\n        a++;\r\n        x++;\r\n        y++; // error CS0165: Use of unassigned local variable 'y'\r\n        z++; // error CS0165: Use of unassigned local variable 'z'\r\n\r\n        async void L1()\r\n        {\r\n            x = 0;\r\n            await Task.CompletedTask;\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```C#\r\nusing System.Threading.Tasks;\r\nclass C\r\n{\r\n    public static async Task M2()\r\n    {\r\n        int a=0, x, y, z;\r\n        await L1(); // adding await doesn't affect the warnings (is that correct?)\r\n        a++;\r\n        x++;\r\n        y++; // error CS0165: Use of unassigned local variable 'y'\r\n        z++; // error CS0165: Use of unassigned local variable 'z'\r\n\r\n        async Task L1()\r\n        {\r\n            x = 0;\r\n            await Task.CompletedTask;\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```C#\r\nusing System.Threading.Tasks;\r\nclass C\r\n{\r\n    public static void M2()\r\n    {\r\n        int a=0, x, y, z;\r\n        L1();\r\n        a++;\r\n        x++;\r\n        y++; // no error anymore. That seems wrong\r\n        z++; // error CS0165: Use of unassigned local variable 'z'\r\n\r\n        async void L1()\r\n        {\r\n            try\r\n            {\r\n            \tx = 0;\r\n            \tawait Task.CompletedTask;\r\n            }\r\n            finally\r\n            {\r\n                y = 0; // assigning y in finally removes the error on y above \r\n            }\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/183bb0096629fe1879e0c2707503171a5d6c5697", "message": "FindAllReferences on Deconstruct should consider all documents (#24223)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/005f4f63179810d7051fc6944ae488f85a68da81", "message": "Recommend \"when\" keyword after case-pattern-switch-label (#24131)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24230", "title": "Remove some unreachable code", "body": "Relates to https://github.com/dotnet/roslyn/issues/24206", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24195", "title": "Start changelog", "body": "Here's an initial take on what a checked-in changelog could look like.\r\n\r\nI'm still debating whether we should rely on the VS release notes instead (and improve those with a few useful links).\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/7150", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "heejaechang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/8554e9c180c3c19309afbe56bea6cb046e8d6f68", "message": "Oop cleanup (#24297)\n\n* Clean up RemoteHost crash info bar.\r\n\r\nthis info bars have added one by one in different places without merging those to one. and that caused sometimes similar info bar to show up multiple times.\r\n\r\nthis merge all to one and make sure it shows up only once if multiple failures are happen (ex, OOP is killed, so multiple connection gets disconnected)\r\n\r\n* added soft crash exception"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/823d9730aed86f9bba80e18b9888ca103dbee9ab", "message": "moved waiter from diagnostics.dll to features.dll where all interface\u2026 (#24120)\n\n* moved waiter from diagnostics.dll to features.dll where all interfaces are defined.\r\n\r\n* simplified listener and waiter and moved those in product.\r\n\r\n* cleaned up a bit\r\n\r\n* fixed some comments\r\n\r\n* forgot to add new AsyncListenerProvider in test export composition\r\n\r\n* fixed dead lock found on unit tests\r\n\r\n* remove all waiters left\r\n\r\n* added dispatcher event processing in one more place\r\n\r\n* added a way to enable waiter through env variable in test such as DDRIT\r\n\r\n* added env var support so that It can be used without internalvisibleTo us.\r\n\r\n* dont wait for all waiters but only onces each test used to wait.\r\n\r\n* removed dependency to Roslyn.Services.Test.Utilities in integration test. that dll is not in probing path.\r\n\r\n* fixed test failures\r\n\r\n* fixed bug in integration tests\r\n\r\n* move call to enable waiter before creating workspace so that workspace event queue get proper async listener\r\n\r\n* expose concret type as well so that it can be directly used in test for waiter\r\n\r\n* addressed PR feedbacks.\r\n\r\n* rename mess up\r\n\r\n* extra ) left out\r\n\r\n* fixed build failure"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680511", "body": "it looks like I did something wrong and pushed to master directly.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680523", "body": "it looks like I did something wrong and pushed to master directly. should I revert it back?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jaredpar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/f40bfe5886ca4c9d207ad3ac3c8f25ec70bc5db8", "message": "Merge pull request #24293 from jaredpar/fix-status\n\nUpdate language feature status"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/23a5c2566049bac4d005ff64fba3126a24737817", "message": "Updates"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/496a03a0a40deaa78f4ba2e59ce63439d5578655", "message": "Update language feature status"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/abb889838d6eac83efab9c94e7b3bb3ea088a49b", "message": "Merge pull request #24147 from Therzok/patch-1\n\n[Perf] Pre-allocate array builder sizes for loading PE members"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24214", "title": "Use NET46 for CreateStandardCompilation", "body": "This changes the CreateStandardCompilation helper to use the net46 version of\r\nmscorlib. Previously it was using the net40 version.\r\n\r\nThis method is a helper to create a minimal compilation across both our desktop\r\nand coreclr test executions. The coreclr version uses netstandard20 and hence\r\nusing net40 created a substantial API gap. This better eliminates the gap.\r\n\r\nNote: I realize net461 is a slightly more correct choice. However that ref\r\nassembly isn't checked into our code yet and I wanted to avoid a giant resource\r\nupdate here unless we need it. Our tests focus on the intersection of the\r\ntwo API sets hence it's unlikely to be an issueo here.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/69846649", "body": ":+1: Looks great!  Thanks for the help. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/69846649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70020597", "body": "I agree it would be nice if we hooked into the source and symbol information into our packages.  \n\n@agocke do we have an issue tracking this yet? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70020597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021145", "body": "@agocke i didn't know if we had an existing internal one tracking it :) \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70132348", "body": "I agree this LGTM.\n\nOnce we are in a position to merge code based PR's this will be merged in. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70132348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9589423", "body": "Yep.  I had just re-installed VS and it reset all of my settings.  A check in this morning fixed it.\n\nInternally yes we are compiling against 4.6. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9589423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "agocke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/a0865626ae9d3a5ed9b34b47e1c6ebc1e2d38241", "message": "Merge pull request #24280 from dotnet/merges/dev15.6.x-to-master-20180117-080050\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6db04109879e42fbe99a3c1e8f1d44175c041e73", "message": "Merge pull request #24240 from dotnet/merges/dev15.6.x-to-master-20180115-080017\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/148480640e256017253627c17e562d974e122671", "message": "Change local function definite assignment (#23749)\n\nThe LDM has decided that the following rules should be in effect when\r\ncalculating definite assignment for local functions:\r\n\r\n  1. The entry point to a local function is always reachable.\r\n  2. Variables captured in local functions are definitely assigned if\r\n  they are definitely assigned in all branches into the local function.\r\n\r\nIt turns out these rules were almost exactly what the compiler already\r\nimplemented, but there was a bug in captured variable detection that\r\nmeant that variables captured in lambdas within local functions were\r\nsometimes not counted as captured. This change fixes the bug around\r\ncapturing, which should cause the compiler to conform to this\r\nspecification.\r\n\r\nFixes #17829"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0a54c5ad9d711dc9875adc415e0dd64ff57bd9e4", "message": "Use correct type parameter binder for local functions (#24108)\n\nThis looks like simple oversight. The binder being used for type\r\nparameters was retrieved from the binder factory since we didn't\r\nexplicitly pass one. For members this is correct since the binder\r\nfactory can be queried for top-level binders. This is not correct for\r\nlocal functions because they use method body binders, which are not\r\naccessible from the binder factory.\r\n\r\nMostly, this doesn't matter. The exception is when you try to\r\nspeculatively bind an attribute on a type parameter. Here, you need an\r\nin-method binder and VS will crash if it's the wrong binder. This was\r\nuncommon since attributes on type parameters are not permitted in local\r\nfunctions, but VS should not crash.\r\n\r\nFixes #17814"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24265", "title": "Limit compiler server pipe name length", "body": "\r\n### Customer scenario\r\n\r\nThe current scenario: on Mac sometimes the compiler server can be left\r\nspinning in an exception loop and non-responsive and the build silently\r\nfalls back to slower csc/vbc operation.\r\n\r\nOn MacOS pipes are implemented using Unix domain sockets. Unix domain\r\nsockets must have a valid file path for their endpoint. The best place\r\nis in the temp folder. Unfortunately, domain sockets on Unix also have a\r\nvery small path length limit of 104 characters. In addition, Mac temp\r\npaths can be very long since they include randomly generated characters\r\nfrom the OS. In total, this means that Roslyn has barely 50 characters\r\nworth of space for its pipe identifiers.\r\n\r\nThis change cuts down on the bytes of the SHA256 hash used. This shouldn't\r\naffect the security of the pipe, since the hash isn't used as a security boundary,\r\nbut should fit the pipe name into the length limitations.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #24137 \r\n\r\n### Workarounds, if any\r\n\r\nOn Mac, for your `dotnet build` process, set your TMP environment variable to a short path, like `/tmp`.\r\n\r\n### Risk\r\n\r\nLow. The path name itself is not semantically meaningful to Roslyn.\r\n\r\n### Performance impact\r\n\r\nThis is a perf fix. Should improve perf quite a lot (> 100% in my test).\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nThis is a bug in a new feature that is caused by an OS peculiarity that only sometimes occurs\r\nbased on the user ID and randomized path generated by MacOS for the current session.\r\n\r\n### How was the bug found?\r\n\r\nFirst found by a developer when trying to repro a different bug, then customer reported.\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24239", "title": "Fix compiler server on CoreCLR and enable bootstrapping on CoreCLR build", "body": "### Customer scenario\r\n\r\nThis PR fixes the CoreCLR compiler server on Windows and changes our bootstrap build to act as a test case. The bug in the compiler server was we were attempting to do user ID verification on CoreCLR on Windows, but those APIs are not available on CoreCLR, so this would always fail. This fix disables user ID verification and relies only on Windows pipe ACLs, which should be enough to ensure that only properly privileged users can connect.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #20900 and #24072\r\n\r\n### Workarounds, if any\r\n\r\nThere are no workarounds for using the compiler server under CoreCLR on Windows.\r\n\r\n### Risk\r\n\r\nThis change is substantially similar to what we do on Linux, so has already been given a fair amount of coverage. \r\n\r\n### Performance impact\r\n\r\nThis should make the compiler much faster on CoreCLR.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nWe didn't bootstrap using the compiler server on CoreCLR, which I've now added.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021064", "body": "Is this not the issue? \u263a\n\nFrom: Jared Parsons [mailto:notifications@github.com]\nSent: Wednesday, January 14, 2015 4:34 PM\nTo: dotnet/roslyn\nCc: Andy Gocke\nSubject: Re: [roslyn] Add symbol files(.pdb/source) to NuGet packages (#3)\n\nI agree it would be nice if we hooked into the source and symbol information into our packages.\n\n@agockehttps://github.com/agocke do we have an issue tracking this yet?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dotnet/roslyn/issues/3#issuecomment-70020597.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021252", "body": "Nope, I asked David to file it here\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154291", "body": "I have no idea how it happened. And I think those erroneous renames are just Git being a little weird. Those files are identical, so it doesn't matter.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10170015", "body": "`git mv -f`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10170015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ivanbasov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/9ab4274db8c8f846bc7536ec3342a08822d0e7f7", "message": "Internal error in Immediate Window when trying to create an already e\u2026 (#24198)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/20c1851c2d09a5ac70285b049504f92483b83613", "message": "Consolidate 'remove unused local' fixer in Roslyn and Roslyn-analyzers (#24077)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CyrusNajmabadi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/83520a7245cf202a4f3fa4ea11996328b3fb3b81", "message": "Simplify diagnostic tagging by making it use the standard tagging model. (#23448)\n\n* Simplify diagnostic tagging by making it use the standard tagging model.\r\n\r\n* Cleanup."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sharwell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/40bb50e8b290716565cc735ba491970e85632c05", "message": "Merge pull request #22100 from sharwell/fix-warning-level\n\nMake analyzer diagnostics independent of the current warning level"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24291", "title": "Locate implementations for reference assemblies using the process binding path", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24189", "title": "Update to ILSpy 3.0.0.3447", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OmarTawfik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/591bdbad0172bb32b857edfe62701bbf267c572c", "message": "Make sure 'in' is honored in cref parsers/completion lists (#24023)\n\n* Make sure 'in' is honored in cref parsers/completion lists\r\n\r\n* Clean up\r\n\r\n* PR Comments\r\n\r\n* Document API breaking change"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24199", "title": "Support System.Enum as a valid generic type constraint", "body": "Enables using `System.Enum` as a constraint for generic parameters. Example:\r\n```csharp\r\nclass Test<T> where T : System.Enum\r\n{\r\n}\r\n```\r\nLanguage design issue: https://github.com/dotnet/csharplang/issues/104\r\nRoslyn issue: https://github.com/dotnet/roslyn/issues/262\r\n\r\n@dotnet/roslyn-compiler @dotnet/roslyn-ide @VSadov  for review", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zaytsev-victor": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/3de8a19646e7d39cf0e30655944970452d10318e", "message": "Fixed code style option 'prefer var' for delegate type. (#23718)\n\nMerging on behalf of @zaytsev-victor. Thanks for the contribution!"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dotnet-bot": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24305", "title": "Merge dev15.6.x to features/compiler", "body": "\nThis is an automatically generated pull request from dev15.6.x into features/compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.6.x-to-features/compiler-20180118-080028\ngit reset --hard upstream/features/compiler\ngit merge upstream/dev15.6.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.6.x-to-features/compiler-20180118-080028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24304", "title": "Merge master to master-vs-deps", "body": "\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps-20180118-080025\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps-20180118-080025 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24303", "title": "Merge dev15.6.x to dev15.6.x-vs-deps", "body": "\nThis is an automatically generated pull request from dev15.6.x into dev15.6.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.6.x-to-dev15.6.x-vs-deps-20180118-080023\ngit reset --hard upstream/dev15.6.x-vs-deps\ngit merge upstream/dev15.6.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.6.x-to-dev15.6.x-vs-deps-20180118-080023 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24302", "title": "Merge dev15.6.x-vs-deps to master-vs-deps", "body": "\nThis is an automatically generated pull request from dev15.6.x-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.6.x-vs-deps-to-master-vs-deps-20180118-080019\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev15.6.x-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.6.x-vs-deps-to-master-vs-deps-20180118-080019 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24301", "title": "Merge dev15.6.x to master", "body": "\nThis is an automatically generated pull request from dev15.6.x into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.6.x-to-master-20180118-080017\ngit reset --hard upstream/master\ngit merge upstream/dev15.6.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.6.x-to-master-20180118-080017 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24283", "title": "Merge master to master-vs-deps", "body": "\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps-20180117-080059\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps-20180117-080059 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "t-camaia": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24298", "title": "Await in local function inside lock is now working as expected", "body": "A new constructor was created in InMethodBinder class in order to make it possible to specify the desired BinderFlags. An InLockBody flag (as well as other flags) was being passed by mistake to InMethodBinder while visiting local functions.\r\n\r\nAlso, a test was added to assure correct behavior.\r\n\r\nFixes #18644 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasonmalinowski": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24296", "title": "Make a perf tweak in the DataTipInfoGetter", "body": "Often, these only require fetching the syntax tree, which we now do synchronously. Since this is called on the UI thread, it's good practice not to call GetSyntaxRootAsync, as if we do have to recompute it it means we're having the UI thread wait for the thread pool which might be backed up. By having the UI thread do it directly, it'll always be faster.\r\n\r\nI noticed this while working with @ivanbasov investigate some other perf issues. Awhile back we did an \"async everything\" approach, and have since learned that was perhaps overly aggressive, at least when that's stuff that's on the UI thread. We saw a user complaint of this taking longer than it should have, and this might help a lot, and won't hurt at all.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nUser mouses over an expression, and they get a dialog saying we're computing this. The user doesn't want that dialog.\r\n\r\n### Bugs this fixes\r\n\r\nObserved while investigating customer issue with @ivanbasov.\r\n\r\n### Workarounds, if any\r\n\r\nNone, but this is just a perf fix.\r\n\r\n### Risk\r\n\r\nVery low: localized fix replacing with a faster but equivalent method.\r\n\r\n### Performance impact\r\n\r\nShould improve things. Can't make things worse.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNope, this has been like this in Roslyn for awhile.\r\n\r\n### Root cause analysis\r\n\r\nA few years ago in Roslyn we did an async-pass where we converted as much as possible to async. We observed that in a few cases this made things worse for perf: if you are on the UI thread responding to a legacy API call, calling an async API and awaiting it is potentially worse for perf than doing the work synchronously: it means you're giving up your thread (which was running code!) and waiting for a thread pool that might be backed up. @ivanbasov and I were looking at this code for another bug, and I noticed this wasn't following the current best practice, and might help the customer in the case we were looking at. We don't have traces to confirm this might be their problem, but the fix is cheap and zero-risk.\r\n\r\n### How was the bug found?\r\n\r\nCustomer report.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70047045", "body": "Yep, we haven't migrated our historical branches from CodePlex yet. I think @jaredpar is working on that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70047045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70179039", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70179039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9813921", "body": "Why TaskCanceledException specifically vs. OperationCancelledException (a base type)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9813921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "tmeschter": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24295", "title": "Add a Jenkins job to determine Loc status", "body": "This is an infrastructure-only change.\r\n\r\nAdd a Jenkin's job to check that all localizable resources in a branch have, in fact, been localized. If unlocalized resources are found the job will fail. Otherwise, it will succeed. This will allow us to use Jenkins to verify that we've taken care of all the translations prior to shipping out of a release branch.\r\n\r\nBy default it is turned off for PRs (since it will, by design, fail a lot), but I leave open the option of turning it on for PRs to release branches. This would prevent unlocalized resources from slipping in.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JieCarolHu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24279", "title": "Add a link to Tools>Options>\u2026>Code Style to link to EditorConfig documentation. Bug#23513", "body": "Fixes : #23513 \r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24219", "title": "fixing EditorBrowsable bug#4434", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rchande": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24271", "title": "WIP: implement new editor completion API", "body": "Sending this out to get some eyes on it.\r\n* Still needs to formally consume editor packages once they're created\r\n* Needs tests", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851071", "body": "If only an overload of Test() took a workspace XML...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851080", "body": "Yes, this is what the formatter did.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851084", "body": "Yes, this is what the formatter did.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mavasani": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24213", "title": "Add skipped unit test for https://github.com/dotnet/roslyn/issues/24212", "body": "https://github.com/dotnet/roslyn/issues/24212", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10349830", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10349830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "v-zbsail": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24205", "title": "LOC CHECKIN | roslyn - master | 20180112", "body": null, "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Pilchie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70022110", "body": "@jasonmalinowski mentioned that it would be nice to have those PDBs stamped for source server info from github as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70022110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70132879", "body": "Wow, thos are some misleading doc comments :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70132879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "davkean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70025255", "body": "We should make sure that both corefx and Roslyn use the same mechanism here. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70025255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70043193", "body": "It would be also nice if you could make [git tag](https://github.com/dotnet/roslyn/tags) for NuGet releases.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70043193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "neuecc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70050078", "body": "Only BCL(without Rx) can't handle IObservable[T] easily.\nSo if IObservable[T] supports in language native, C# needs awaitable foreach.\n\n``` csharp\nasync Task RunAsync()\n{\n    // GetData() == IObservable<T>\n    // syntax proposal(await foreach)\n    await foreach(var item in GetData())\n    {\n        Console.WriteLine(item);\n    }\n}\n```\n\nIt is equal to following code in Rx.\n\n``` csharp\nasync Task RunAsync()\n{\n    // GetData() == IObservable<T>\n    await GetData().ForEachAsync(x =>\n    {\n        Console.WriteLine(x);\n    });\n}\n```\n\nmatrix\n\n|  | consume sync | consume async |\n| --- | --- | --- |\n| single | () | await |\n| multiple | foreach | ??? |\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70050078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "omariom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70053130", "body": "Thanks @neuecc. Completely agree with you. \nIt is worth creating a separate feature request. I will reference it here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70053130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DustinCampbell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70074620", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70074620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70105522", "body": "To be fair, this isn't a new problem. We didn't do a great job for such types in VS 2013 either:\n\n![image](https://cloud.githubusercontent.com/assets/116161/5760577/8f75f854-9c8a-11e4-82ae-00745f04e1a3.png)\n\nThe right thing to do is probably to format the type name so that the where clauses are on separate lines, which makes them easier to spot anyway.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70105522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "mirhagk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70090660", "body": "One important thing to note is that this allows you to refactor functions without breaking existing callers. This solves some of the biggest issues around a few suggested features (primary constructors) that required the parameter names to change (which only affects those who call it by name).\n\nI'm not sure how it would be exposed in the BCL. The two ways I can see that allow backwards compatibility are:\n1. Generate 1 method per combination that forwards to the correct method, ie:\n\n```\npublic static void Member1(string Initial, string secondAndHalf){Member1(Initial,secondAndHalf);}\npublic static void Member1(string first, string secondAndHalf(Member1(first,secondAndHalf);}\n....\n```\n\nThis would work, but generate a lot of clutter methods (In this case it'd be 6 methods, others could easily see much more).\n1. Generate 1 forwarding method that has all named parameters. e.g:\n\n```\npublic static void Member1(string first = null, string second=null, string Initial = null, string secondAndHalf = null, string quarterToThree = null){\n    Member1(first??Initial,second??secondAndHalf??quarterToThree)\n}\n```\n\nThis generates only a single extra method. It does rely on the user only specifying one named parameter for each real paramter, and has some extra cost, but should be easily optimized by the CLR. The method should probably have `[MethodImplAttribute(MethodImplOptions.AggressiveInlining)]` and perhaps a new attribute should be created `[Generated(GeneratedOptions.Hide)]` so that the method does not appear in intellisense (older compilers would ignore this and show it anyway, allowing consumers to use the named parameters as is, while new compilers would show the alias from the other method).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70090660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70170804", "body": "> Also, I don't think your option 1 would work.\n\nYes you are right, that's my own brain fart. \n\nThe only problem I see with letting the compiler do all the work is that previous compilers wouldn't be able to compile against the DLL anymore (it would only look at the actual parameter names). If it's okay to sacrifice that bit of backwards compatibility then I agree do everything with the compiler (and translate the named parameters at compile time).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70170804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "controlflow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70126966", "body": "And from language design perspective: this whole idea of allowing more conditional access expressions to compile in context where value is ignored (is it defined by spec?) feels awkward and ad-hoc. What kind of scenarios this solves?\n\nAs a tooling developer, I have to disable 'introduce variable' refactoring for such expressions and this may be confusing for developers. Also I have no idea of what semantic model should tell about type of such `c?.M()` expression. Is it `T` (I think so) or `void`?\n\nMaybe (I'm not sure), it's better to allow such calls of methods with non-liftable return types in any context, but simply lift unconstrained `T` type (and other non-liftable types) into `void` type?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70126966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70264327", "body": ":wink:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70264327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9697549", "body": "YAAAY!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9697549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9870657", "body": "Unfortunately, checking for outer `ParenthesizedExpression` is not enough.\nActually, counting depth of three kinds of parentheses (`()`, `[]` and `{}`) affects lexing of string interpolation argument expression and format specifier. All this expressions are valid without any extra parenthesizing:\n\n``` c#\n$\"{Invocation(b ? x : y)}\"\n$\"{checked(b ? x : y)}\"\n$\"{() => { return b ? x : y }}\"\n$\"{Indexer[b ? x : y]}\"\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9870657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "svick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70146608", "body": "> I'm not sure how it would be exposed in the BCL. The two ways I can see that allow backwards compatibility are:\n\nWhy not just keep the one method with attributes and let the compiler do all the work? The CLR doesn't need to be involved at all.\n\nAlso, I don't think your option 1 would work. In .Net, methods can't be overloaded just by parameter names, because only parameter types are specified when calling a method in IL.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70146608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "billchi-ms": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70177840", "body": "Ok, wow, after sending mail to Jared that he could ignore or delete this, and making a painfully clear title, I'm a bit surprised to see our dollars wasted debating this :-).  On a serious note, yes, it is a misconception that two spaces after punctuation is silly and out of date.  It is a misconception because of what Dustin cites which is true in almost all editors, as well as the fact that some editors have special commands for sentences and paragraphs that leverage this typography.  Also, rendering engines that consistently handle whitespace that follows punctuation creates output with lower usability due to eye tracking and visual parsing.  Anyway, to say it again, I was simply debugging e2e work flow and tried to pick the most unobservable change I could ... FAIL :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70177840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70178880", "body": "Nice!! :-)  I want a like button on your comment :-)\n\nAnd we're doing a good job of setting a comfortable tone so that customers don't have to feel all nervous about saying silly stuff here :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70178880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dpoeschl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70178319", "body": "Well, if we're stating disclaimers, I should mention that I just wanted an excuse to try out the Pull Request commenting system. :smiley:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70178319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9684620", "body": "287? :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9684620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "theoy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70202759", "body": "I think the goal is more to allow it in contexts where the normal '.' dispatching is allowed - for example method calls that return a value are allowed as statement expressions.\n\nThe user intention is to find places where a NullReferenceException would normally occur and instead allow for a graceful null-propagation (or at least a lack of throwing) to occur.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70202759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70202895", "body": "By the way, great catch! I'm thrilled for all of the valuable points that you've been able to help us find as we are trying to land Roslyn v1. :smile:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70202895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kasajian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70262885", "body": "How do I \"up\" vote this?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70262885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nosami": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70272254", "body": "I wanted to return keywords like this - https://github.com/icsharpcode/NRefactory/blob/roslyn/ICSharpCode.NRefactory.CSharp/Features/Completion/ContextHandler/KeywordContextHandler.cs.\n\nIf the Recommender could return keywords, then I wouldn't need to use CSharpSyntaxContext\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70272254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JoshVarty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70278140", "body": "Roslyn already has something like 7,000 public methods. Opening up _every_ internal type/method would grow this number substantially. \n\nI think it makes more sense to ask for individual types to be made public while explaining the problem it solves for you. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70278140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pharring": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70278144", "body": "I haven't seen any bottlenecks in this code, but the change looks reasonable.\nHowever, it should be noted that we intend to replace this C++ code with C# in the near future.\n(I thought we had an issue tracking that, but I can't find it)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70278144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "SLaks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9367079", "body": "`ContentEquals() already checks reference equality, so you don't really need to`==` check.\nhttp://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/Text/SourceText.cs,dc290adccf6f9ba7\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9367079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10334839", "body": "This should be replaced with a simple `SelectMany()`, or even just an addition `from` clause in the query comprehension.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10334839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413614", "body": "Why not `=>`?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413625", "body": "Why not make an analyzer to prevent this altogether?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9579306", "body": "looks like tabs. Also looks like you're compiling against .NET 4.6?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9579306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068220", "body": "@tmat one problem is that JSON.NET can no longer serialize CSharpCompilationOptions.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068229", "body": "```\nError: [ApplicationContext]: Error occured: System.InvalidOperationException: This operation cannot be performed on a default instance of ImmutableArray<T>.  Consider initializing the array, or checking the ImmutableArray<T>.IsDefault property.\n   at System.Collections.Immutable.ImmutableArray`1.ThrowInvalidOperationIfNotInitialized()\n   at System.Collections.Immutable.ImmutableArray`1.System.Collections.IEnumerable.GetEnumerator()\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)\n   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)\n   at Newtonsoft.Json.Linq.JToken.FromObjectInternal(Object o, JsonSerializer jsonSerializer)\n   at Newtonsoft.Json.Linq.JToken.FromObject(Object o)\n\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mstrobel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10080505", "body": "This could interfere with LINQ queries where the query provider supports `NewArrayInit` expressions but not arbitrary `Call` expressions.\n\nConsider the snippet below.\n\n```\npublic class C {\n    public void M() {\n        Expression<Action<F>> e = f => f();\n    }\n\n    public delegate void F(params int[] args);\n}\n```\n\nThe compiler would rewrite `M` as something like this:\n\n```\npublic void M()\n{\n    var p = Expression.Parameter(typeof(C.F), \"f\");\n    Expression.Lambda<Action<C.F>>(\n        Expression.Invoke(\n            p,\n            Expression.Call(null, methodof(System.Array.Empty()))),\n        p);\n}\n```\n\nWithout the `Array.Empty<T>()` optimization, the LINQ expression tree emitted would not contain any `Call` expressions.\n\nCredit to @controlflow for realizing the problem.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10080505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gafter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154237", "body": "Would love to know how you did this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154259", "body": "@agocke Were these intended?\n\nSrc/Compilers/VisualBasic/**vbc2**/packages.config \u2192 src/Compilers/CSharp/**csc2**/packages.config\nSrc/Compilers/CSharp/**csc2**/packages.config \u2192 src/Compilers/VisualBasic/**vbc2**/packages.config\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10155331", "body": "How did you fix it? Did you use a linux system?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10155331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "AArnott": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712627", "body": "This whole discussion seems to suggest I _added_ the cancellationToken to the wait function. I did not. It was already there. I merely preserved prior behavior. The `WaitAll` method took a cancellationToken. This not only allowed the async method's `Task` to complete quickly upon cancellation regardless of the tasks it is waiting on, but it increased the odds that in that event an `OperationCanceledException` would be thrown instead of some other fault.\nI'm happy to remove the `WithCancellationToken` extension method call if you would rather not have it though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712806", "body": "No worries. I just wanted to make sure we were on the same page about what would be a deviation in behavior. Is the simple change leaving the behavior as-is, or removing the cancellationToken from the WhenAll? I'll do either one.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712844", "body": "I'm not sure I understand the concern, @jasonmalinowski. Are you saying the cancellationToken should be sent to the task when it's created and it should respond quickly enough to cancellation that you don't need this? If you are, I agree. However I've found this extension method useful for those tasks you cannot guarantee will respond in an acceptable time period yet you need to ensure the caller isn't held at its mercy.\nBut if you'd rather not have this extension method, and you're OK with just calling WhenAll without cancellation, I can avoid adding this to your code base. But personally I think this extension method is more generally useful than a WhenAll specific extension method would be.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712868", "body": "It doesn't matter. All this does is allow the TCS to transition to a completed state, which completes the WhenAny. After that, if the original task isn't what completed, we know cancellation occurred.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712884", "body": "The intended contract is that if the `task` argument is already completed that the result of `task` is returned from the `Task` returned in the method, regardless of the state of the `cancellationToken`. But if the `cancellationToken` is canceled before the `task` completes, then the returned `Task` transitions to a canceled state, and yes possibly without the async method ever yielding if the token is canceled soon enough (or before entry to the method).\nWhat is strange?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712900", "body": "Doing so would increase the GC pressure from calling this method because it would require allocating another Task and usually an async state machine. I typically try to write the low-level threading functions so they are highly tuned so you can focus on program logic as the source of any GC pressure rather than the plumbing you're using.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712914", "body": "The reason is that this method should not throw `OperationCanceledException` if `task` has already completed. The `task` may have completed successfully or faulted, or even already been canceled itself. In any of those cases, we should return the result of the completed task rather than throwing as if the operation were canceled before it finished.\nI believe TPL and other .NET code follow the same guidelines, and I am trying to be consistent with that: don't report an operation is canceled if it has already completed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712930", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712963", "body": "@CyrusNajmabadi The non generic version of this is alsy an _async_ method and therefore returns an instance of `Task` not a `Task<T>`. So we can't cast it back in order to get its result. We have to implement it ourselves here.\n\n@jasonmalinowski I think your proposal would work fine if `task` completed successfully or if `cancellationToken` is canceled. But if `task` transitioned to either a canceled or faulted state, the result would not be what the caller expects. If `task` faults, `t.Result` will throw AggregateException, then the task returned from `ContinueWith` will wrap that in _another_ AggregateException. So you end up wrapping the exception in extra layers that a catch block later may not be expecting. And if `task` transitions to a canceled state, instead of WithCancellation returning a canceled Task, it would return a `Task` faulted with an AggregateException and an inner `OperationCanceledException`. These methods are implemented to preserve behavior of the original task exactly when it completes. So yes, your way is simpler, but it doesn't meet the behavior requirement.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26155434", "body": "Ooh, for what it's worth, that option sounds awesome. But if I had to choose, I'd rather have #1151 fixed than the option (for now).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26155434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248808", "body": "I suppose we could have just one bool property that is true to emit command line and false to execute the command line instead as that would fit my requirement, but it seems unnecessarily coupled. What if folks want to both compile and get the command line? That's why I separated the possibility of skipping.\nThere are plenty of ways to play practical jokes on folks. I'm not too concerned with this providing yet another way.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248919", "body": "I'm not familiar with the issue. Does the Vbc task do other work besides ExecuteTool that this doesn't effectively skip?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249130", "body": "C++ claims to have recently done this (and I imagine they scale even larger than C#). But I don't know the details.\nBut yes, the large string risk is why I have it \"off by default\".\nAlternatively, if we can produce a `string[]` of arguments I'm happy to consume that. I hope that is almost as easy as getting the full string.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249212", "body": ":) One issue with that idea though is that folks will expect the GetCommandLineInvocation target to always work (regardless of project or global properties). Yet it won't, unless we copy the entire CoreCompile target so that it can invoke the Csc task itself.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37250562", "body": "OK. It looks like I'll have to fix that then.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37250562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252203", "body": "So it seems MSBuild ToolTasks commonly throw around entire strings for this. Case in point, just below this addition, the entire commandLineCommands string is only divided into other strings when it's being sent to the resident server compiler.\n\nHowever, I like the idea of a `string[]` of arguments better anyway. I've prepared such a change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252305", "body": "I've accounted for it in the Vbc task by having it observe the `SkipCompilerExecution` property.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252352", "body": "This extra arg was required to avoid logging to the server a compilation step that would never occur.\nIt comes from mixing logging into a method simply called GetArguments. Arguably, the logging code should be moved to the caller that wants it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260336", "body": "I was divided on that point myself. I'm happy to make that change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260358", "body": "Great. I'll take care of that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88721610", "body": "Wow. 15 minutes for 60 PDBs is awful. When I wrote (some of) the PdbGit code, I remember that there was non-performant code I was writing that could be improved if necessary (the whole \"optimize after you measure\" philosophy). So given how _bad_ it is, can you please send an ETL trace of the tool running (perhaps the command line invocation on just one of your larger PDBs)? I bet we can fix it significantly (perhaps an order of magnitude).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88721610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88724502", "body": "Explicitly specifying the URL to avoid forks sounds good. But you should only need the `--baseDir` parameter if there is no .git folder. I think you can remove that from your script here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88724502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88732635", "body": "Ya, that's where I thought it would be. At the time I wrote that, I knew it was horrifically poor, but I couldn't find a more efficient way to \"walk the tree\" to normalize capitalization (which is very important, it turns out). If you know the more efficient way, yes please do send a PR. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88732635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88743390", "body": "@tmat I've been meaning to ask: I read in docs that PDBs can actually _store_ the source code itself. Is that possible? Because where the build generates code that is then compiled, no git hosted source code could work to step into. So for the generated source files, I was considering embedding the source into the PDB. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88743390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745312", "body": "Cool. Then we might even be able to use the srcsrv support in the PDB to self-extract the source. :)\nI'll mention you on an issue where I'll track the work to ask you more questions. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745623", "body": "hey, whatever the new thing is, I'm game. Just point me at the docs. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/89621411", "body": "This method seems poorly named. `IsCanceled` sounds very benign (and the exception type seems unrelated unless it were somehow included in the cancellation check). The fact that the exception crashes the product if it isn't canceled would be totally unexpected given the method name and lack of xml doc comments to help call out otherwise.\r\nPerhaps simply \"ThrowIfNotCanceled\"?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/89621411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302126", "body": "I don't know, as I'm just copying this from other scripts in your repo to make them consistent.\r\nBut my guess is that failing to uninstall doesn't help the user, and may break a chain of packages being uninstalled. And the user can see the analyzer in SE and remove it him/herself.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302344", "body": "Thanks for the approval. I don't have permission to complete the PR, BTW", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/98966359", "body": "This \"let us retry\" is *exactly* why StreamJsonRpc and HubClient don't. As we have multiple levels in our callstack here, and generally the scenario owner will have a retry, if the lower-level libraries had retries as well, they would multiply their effect, in the end making the user wait *much* longer than the scenario owner intended.\r\nWhen I was on the .NET Compact Framework we learned this. We had a 3x retry for network connections in NetCF, and some middleware lib had a 5x retry, and the app itself would retry a few times. In the end, the network connection attempt hung the app for minutes because it was retrying several dozen times.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/98966359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}