{"_default": {"1": {"dagood": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1865", "title": "Tool DLLs should have meaningful assembly versions", "body": "Right now assembly version is 1.0.0.0 for these DLLs, for example:\r\n\r\n * Microsoft.DotNet.Build.Tasks.dll\r\n * Microsoft.DotNet.Build.Tasks.Feed.dll\r\n * Microsoft.DotNet.VersionTools.dll\r\n\r\nIf their assembly versions matched up in some way to package versions, it would help figure out what's going wrong when (for example) the wrong version of VersionTools was loaded by MSBuild causing a missing API.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1864", "title": "Deprecate/remove CreateRequest.cmd symbol archiving/indexing flow", "body": "The new Microsoft.SymbolUploader.Build.Task package handles all our symbol indexing/archiving needs, using VSTS Symbol. The old flow that uses a file share and CreateRequest.cmd should be removed from BuildTools (and anywhere it's used) in favor of the new utility.\r\n\r\n/cc @mikem8361 ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1855", "title": "PushToBlobFeed error when two items have same Identity and different RelativeBlobPaths", "body": " > error : Unable to upload to [...] due to System.IO.IOException: The process cannot access the file '[...]' because it is being used by another process.\r\n\r\nThe error seems to be that `PushToBlobFeed` is trying to do both uploads at the same time and the two reads collide. The scenario is the way to upload the same file to two places. In orchestrated build, aspnet uses this.\r\n\r\n@jcagme ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1853", "title": "Create build output manifests in non-orchestrated-build scenarios", "body": "https://github.com/dotnet/core-setup/pull/3572#discussion_r160189684\r\n\r\n> [eerhardt] Would it make sense if these manifests were built during the normal build as well, not just during publish?\r\n> \r\n> That way we can use it in other places - ex. source-build, or even in normal dev box scenarios.\r\n\r\n> [dagood] It would, but the way things are factored right now this would either require some decent sized refactoring or some scenario-specific work. So that non-BuildTools repos can create manifests easily, the manifest code is in the `Feed` package and built into the `PushToBlobFeed` task. That task and the `Feed` package in general depend on some non-source-build-friendly libs.\r\n> \r\n> **The refactoring way is to create a new independent MSBuild task package that is included by both main BuildTools and Feeds.** Creating these is pretty painful with the current BuildTools structure.\r\n> \r\n> **Adding additional manifest tasks to the main BuildTools package would be the way to get the dev + source-build scenarios working quickly**, but that would be specific to the non-orchestrated-build scenarios so I haven't done it.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1839", "title": "Make new VersionTools tests run during build/CI", "body": "While working on orchestration, I added a `Microsoft.DotNet.VersionTools.Tests` project. It uses the new simplified MSBuild project style, so I only run it in Visual Studio right now. It doesn't run in CI or command line builds. We need to either:\r\n\r\n 1. Convert the project to the old test project style.\r\n    * I tried this briefly without much success. I managed to make it work at one point in command-line builds on Windows, but with an intensely degraded dev flow in VS--not what I want when working on time-sensitive orchestration features.\r\n 2. Upgrade BuildTools' CLI to support running the new test project style.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1824", "title": "Configurable init-tools restore: enable/disable certain packages", "body": "We should support turning off certain packages when they can't be used for some reason, e.g. source-build. Devs may also want to skip some to speed up init-tools time. The main BuildTools package has not been split yet, but there is a Feed Tasks package and Symbol Publisher package already. \r\n\r\nThe init-tools.msbuild should be configurable somehow:\r\nhttps://github.com/dotnet/core-setup/blob/edce50fc0abd3f5ed8db17897427e2d4b5d81ddf/init-tools.msbuild\r\n\r\nThis could be a step towards selectively restoring BuildTools packages needed by a repo.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1816", "title": "Reimplement Azure tasks using official Azure API NuGet packages", "body": "Currently we have custom implementations using the REST API: https://github.com/dotnet/buildtools/blob/f3694f40462f458f9253a3df6d333cdcfd6e17b1/src/Microsoft.DotNet.Build.CloudTestTasks/DownloadFromAzure.cs\r\n\r\nMoving to the official .NET client could make our downloads/uploads more reliable and faster, and it would give us less to maintain.\r\n\r\n/cc @MattGal ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1813", "title": "Download package version props in MSBuild, not init-tools", "body": "It might be possible to use a flow like the build version props or configuration props:\r\n\r\nhttps://github.com/dotnet/buildtools/blob/78260239e4db68ad5c2df774a27d5f9a54fd92e5/src/Microsoft.DotNet.Build.Tasks/PackageFiles/BuildVersion.targets#L6\r\n\r\nhttps://github.com/dotnet/buildtools/blob/03988127f489bcd1cf58d71131ac628620d53de9/src/Microsoft.DotNet.Build.Tasks/GenerateConfigurationProps.cs#L15\r\n\r\nThis seems fine if we don't need the static values in build.proj.\r\n\r\nSuggested by @eerhardt in https://github.com/dotnet/core-setup/pull/3433#discussion_r152067278.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1760", "title": "Figure out/clarify mirroring process for packages the BuildTools build depends on", "body": "Right now, BuildTools master is configured with a few feeds we don't control:\r\n\r\nhttps://github.com/dotnet/buildtools/blob/b68dbb06bb69535f849770c4487afe8ed6e8777c/dir.props#L89-L92\r\n\r\nTo be sure old BuildTools builds won't break if one of those feeds removes a package, we typically mirror them to the `dotnet-buildtools` feed. As things are currently, there is no way for a dev to know that these packages should be mirrored: simply upgrading package versions works because the feeds are configured, and if we removed the feeds to only depend on mirrored packages, the feeds would probably just be added back eventually.\r\n\r\nWe should figure out our strategy, and how to make it discoverable.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1709", "title": "Create a common build script auto-updater", "body": "Core repos all have a few scripts (`init-tools.cmd/sh`, `run.cmd/sh`, etc.) that are duplicated and drift apart over time. These should be automatically updated from a central source. A VersionTools updater can do this.\r\n\r\nThe complicated part of this is figuring out the \"path\" to the central source. I suggest we put the \"master copy\" of the scripts into BuildTools. Each Core repo then updates to the script version associated with the BuildTools package it's depending on. The updater would:\r\n\r\n * Download the currently-used BuildTools package\r\n * Open it and read `version.txt` for the BuildTools commit that built it\r\n * Download the scripts from BuildTools at that commit hash.\r\n\r\n(When we publish built commit hashes to dotnet/versions, the updater doesn't need to do the package download of ~5 MB.)\r\n\r\nWe planned to do this for `bootstrap.sh/ps1` initially (https://github.com/dotnet/core-eng/issues/393), but auto-updating scripts is useful independent of that.\r\n\r\nCame up in https://github.com/dotnet/core-setup/pull/3252#issuecomment-333167334. /cc @weshaggard @dleeapho @eerhardt ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1678", "title": "FilePackageUpdater (used to update BuildTools) should support CRLF and LF independent of platform", "body": "Right now the updater depends on the line ending being the same as what .NET expects on the current platform:\r\n\r\nhttps://github.com/dotnet/buildtools/blob/4a4c225ca82b08bb638b2b85beb930e5401f457e/src/Microsoft.DotNet.VersionTools/Dependencies/FilePackageUpdater.cs#L32\r\n\r\nWe should make it lenient and leave the current line ending in place to support more scenarios/environments. This is mostly a problem when building CoreCLR, which has `VerifyDependencies` enabled: if you check out with LF on Windows, the build breaks at the start of the test build.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/54f73706fc8c990ab9260ade357bdc901b9fd40b", "message": "Fix behavior when there is no CurrentRef property (#1863)\n\nAssuming the match was successful prepended the CurrentRef value to the file because Index and Length are 0 for a failed match."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/82f7170e45545f405bf9eb110f650ec7618e9711", "message": "Create final publish tooling tasks/targets (#1854)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/94af7e60b3365bf478f843ed24170cfcac19b5e4", "message": "Include manifest info properties in feed targets (#1852)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/22ab0360196acd9e6fd6f74fda4287d364a39165", "message": "Put detected symbol packages in assets/symbols/ (#1846)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1867", "title": "Synchronize manifest updates using feed lock", "body": "This prevents race conditions for builds that have multiple legs potentially pushing manifest changes.\r\n\r\nDiff is much better ignoring whitespace changes: https://gist.github.com/dagood/e8e990c675357131154ff7859e9fbdf6\r\n\r\nFYI @johnbeisner this fixes an edge case CLI could hit.\r\n\r\n---\r\n\r\nTested:\r\n * Existing Sleet feed with the lock blob initially unleased or leased. Behavior is as expected: this task will wait for me to free my lease before taking its own lease and continuing.\r\n * Virtual dir with no blobs at all. I was concerned that Sleet would require a feed to exist to lock it, but it just creates the lock blob if needed. (And *only* the lock blob, no other Sleet feed blobs.)", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weshaggard": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1851", "title": "Have ApiCompat warn about unused baseline file entries", "body": "See https://github.com/dotnet/corefx/pull/26175#discussion_r159817816.\r\n\r\nIt would be nice if APICompat would detect unnecessary baseline file entries and warn about them. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1850", "title": "Teach genapi and apicompat about tuple syntax", "body": "tuple arguments/returns: (int My1, int My2) MyMethod()\r\n\r\nWe should update the CSharp writer in CCI Extensions to understand tuple syntax. We should also update apicompat to validate parameter names for tuples with names.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1833", "title": "Move \"GenerateReferenceSource\" target into buildtools", "body": "@mellinoe commented on [Wed May 24 2017](https://github.com/dotnet/corefx/issues/20258)\n\nWe should move this new target into buildtools if we decide that the functionality is general-purpose enough to warrant it. This might involve cleaning it up, making it \"automatic\", and fixing some of the problems around multiple build configurations.\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1762", "title": "Microsoft.CCI dependency needs to be able to build from source", "body": "A lot of our tools in this repo depend on Microsoft.CCI which currently isn't fully open. We depend on a package we built internally. The source has been opened at https://github.com/microsoft/cci but that doesn't have a package build currently nor does it fully support an official build. We will need to do that in order to fully build BuildTools from source. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1762/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/b74644ab65ef2425ac2fdba5414da0e721a36296", "message": "Fix official build break\n\nOfficial builds are still on VS2015 so they are pinned to C# 6 for now."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/529953418d6568af1f41b5fb411d658ace18c792", "message": "Merge pull request #1859 from weshaggard/UpdateToolsToHandleStructFields\n\nUpdate CSharpWriter to handle private fields in structs"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2518fcaa34eafc8ea871d332b82fe4ef8a491aad", "message": "Fix typos in comments"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4b80362df58e1ef45e58ca482b718084baddbcf2", "message": "Treat ByReference<T> as a reference type\n\nThe runtime treats ByReference<T> special as a ref T, so we need the tools\nto also treat it as a reference."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7f72f683d195ad17fa002434ff86722cfa9b91a6", "message": "Use primitive field type for private fields of primitives"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f34ee45b4184e48638b3d62f0f7d016c581896e7", "message": "Escape chars from compiler generated backing fields"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/04124b36399be8aaebdb9f58072f920a50d8d144", "message": "Update IsOrContainsReferenceType function\n\nIsReferenceType is not always the inverse of IsValueType. Things like\nunmanaged pointer references aren't value types nor are they a managed\nreference type. Changed to use the logic already in CCI to detect a\nreference type but it requires a resolved type definition instead of\na type reference."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f2b02029f45cea37ed4e0b4889e5c8b02d9f75e7", "message": "Update CSharpWriter to handle private fields in structs\n\nFor compile-time compat, the following rules should work for producing a reference assembly. We drop all private fields, but add back certain synthesized private fields for a value type (struct) as follows:\n- If there are any private fields that are or contain any value type members, add a single private field of type int\n- If there are any private fields that are or contain any reference type members, add a single private field of type object.\n- If the type is generic, then for every type parameter of the type, if there are any private fields that are or contain any members whose type is that type parameter, we add a direct private field of that type.\n\nFor more details see issue https://github.com/dotnet/corefx/issues/6185\nthis blog is helpful as well http://blog.paranoidcoding.com/2016/02/15/are-private-members-api-surface.html"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6f4e224cf61fc129b58a8b833f26c974500cfafa", "message": "Merge pull request #1860 from weshaggard/UpdateBuildToolsToUseVS2017\n\nUpdate run.cmd and update CI to not call VS2015 any longer"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1ceaab865612e23b49204b9f179b20cc9381f98c", "message": "Update run.cmd and update CI to not call VS2015 any longer\n\nAlso add the dotnet cli env variables to both run.cmd/sh."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/80b4371810fed924212ece07854b588481d754f1", "message": "Merge pull request #1849 from weshaggard/UpdateToolsForNewLangFeatures\n\nUpdate CCI extensions to understand new C# lang features"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/34b8e1c4bfb3796d02895791fb52371939733d20", "message": "Fix readonly struct compat rule"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e9e80d8a37d23df10e6da2f4287f83c32abb27bb", "message": "Switch to using throw null in more method both types.\n\nAlso includes a fix for a bug in typeof expressions in attributes\nthat contain generic type parameters"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a8f2b25c051ecfde5c1d1e19c9a39a6e8c9f67ec", "message": "Update CCI extensions to understand new C# lang features\n\nWith this change our tools like genapi and apicompat will understand\n\nin params\nref readonly returns\nreadonly structs\nref structs\n\nAlso added apicompat rules to ensure the new annotations are compatible"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/796852680ccb25dd24228e83d0b7d81eb8ac5b5a", "message": "Merge pull request #1847 from weshaggard/FixDependencyPromotion\n\nFilter out empty dependencies from promotion consideration"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e8f73c0d8d8891fddacc344ddda1e702015d5dbd", "message": "Filter out empty dependencies from promotion consideration\n\nWe have a number of cases were we were incorrectly promoting\ndependencies from netstandard refs to net4x dependency groups which\naren't needed and cause extra dependencies and in some cases cause\nissue (see https://github.com/dotnet/corefx/issues/26129).\n\nA diff of corefx nuspec's before and after this change shows about\n14 different affected packages which now have correctly cleaned\nup dependency groups for net4x."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808418", "body": "Should this be a \"-\" or just a \".\"?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808423", "body": "Why is this required now?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818139", "body": "What is the \"K\" for?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818161", "body": "We should remove this default from the targets file now since we have it in the task. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818172", "body": "With our new minor version plan I don't think we actually need the time any longer correct?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818769", "body": "nit: Why do you need a local variable to captured here? Why not just put the TryParse in the if condition?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112634", "body": "This should be the full file path not just the directory. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112635", "body": "These should come from the targets not be hardcoded.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112639", "body": "I expect that this should be part of the command line being passed \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112647", "body": "Why are we using the assemblylist? Why wouldn't we just pass the items directly through msbuild item groups? We should avoid the intermediate file writing if we can. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112652", "body": "This should be set set of command lines and not just one. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112662", "body": "I don't think this should be a parameter to the script it should just be hard coded based on what we pass to our task. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112670", "body": "This should not be a script parameter it should be one of the command lines we run. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112677", "body": "Shouldn't be special cased in every script. Should just be an extra command generated when making an ILC test runner. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112719", "body": "We should simplify this and make it only take 2 parameters `RunTests.bat {PackageRoot} {ExecutionDir}` and we just `set PACKAGE_ROOT=%1` and `set EXECUTION_DIR=%2` and beyond that nothing should be needed. We can check if those are valid after you set but that is all that is needed we don't need any fancy arg parsing. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "MattGal": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1826", "title": "Add support for signing .NuPkgs to existing BuildTools workflow", "body": "Currently, files which require signing\r\n\r\n- Product assemblies pick up a default props file which specifies an AssemblyKey property.  This can be customized [like this](https://github.com/dotnet/corefx/blob/45d30e6bdf44d4a0e55df5a6064e8275cdf14d25/src/System.IO.Pipes.AccessControl/dir.props#L6) to specify different keys (PRSS / Microbuild must know these key monikers)\r\n- A task named ReadSigningRequired figures out all assemblies built by all CoreFX projects which expect to be signed and the key they will use. \r\n- A task named WriteSigningRequired places marker files adjacent to all assemblies we want to sign.\r\n- All the files with an adjacent marker are discovered into an ITaskItem group. \r\n- Microbuild signing tasks are invoked on this group of items.\r\n\r\nNow, we will need to do the same thing for nupkgs.  Potentially, we may not want to sign ALL nupkgs at once, or sign some with different keys (as the assemblies are).  So, we'll need a build-tools friendly way for a repo to specify:\r\n\r\n- Store value of desired assembly key name somewhere relevant.  An obvious place is inside the [pkgproj files](https://github.com/dotnet/corefx/blob/master/src/Microsoft.CSharp/pkg/Microsoft.CSharp.pkgproj).  \r\n- Make sure ReadSigningRequired can traverse these and produce the signing required files adjacent to nupkgs.\r\n- submit these to microbuild AFTER all other signing and packaging work happens.\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1757", "title": "Handle hitting MAX_PATH in Microsoft.DotNet.Build.CloudTestTasks.DownloadFromAzure ", "body": "We need to augment the Microsoft.DotNet.Build.CloudTestTasks.DownloadFromAzure class to check for MAX_PATH and log any file names that hit MAX_PATH, and either \r\n\r\n1) use MAX_PATH aware paths and APIs to make this just work or\r\n2) Error out with a full list of all >= MAX_PATH files that it would have liked to have written to disk.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/cb48d1119ecc33b29df16a31079a28aed0f55488", "message": "Merge pull request #1848 from MattGal/Enable_NuPkg_signing\n\nAdd WriteSigningRequired calls to Packaging (for nupkg signing in future)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3819e8e9f03fc54193af5c4a2afde264bb5e287d", "message": "Add WriteSigningRequired calls to Packaging immediately after package is created."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1457", "title": "Include Pdb for xunit console netcore", "body": "@weshaggard , @chcosta , @yizhang82 \r\n\r\nThis helps call stacks and debugging tests which use this executable.  \r\n\r\nSince we provide no way to do this on a per-nuspec basis, I just did this for the entire buildtools repo;  since in most cases (some exceptions) files are included explicitly, this adds just 176.5 KB for the entire 8 MB suite of NuPKgs to bring along all adjacent pdbs that happened to already be included by the nuspecs.\r\n\r\nIt also turned out that the packaging .targets file never actually plumbed through the ability to set the IncludeSymbolsInPackage property, so I fixed that as well.  We may want to plumb through more there in the future.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mmitche": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1822", "title": "PublishOutputLeg target doesn't exst", "body": "From https://github.com/dotnet/buildtools/blob/280705d9d12af2fe0997509474825d2c9cbe7932/src/Microsoft.DotNet.Build.Tasks.Feed/PackageFiles/Microsoft.DotNet.Build.Tasks.Feed.targets#L1\r\n\r\nThis shouldn't set the default target", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/137894bcdaa36a5481939af12dfcb0f1d0c33ee6", "message": "Filter should be appended when getting the next page of results (#1861)\n\nThe next marker is often non-empty even when the first page of blob results returned is empty.  Without adding the filter again, we will then list everything in the container"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e67995e49c659f3fddfc49aa64fede46375dcb89", "message": "Fix misbalanced parens (#1857)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/43e3b056bd7ab9bf75711ebc638bf90925983b17", "message": "Parse blob url (#1856)\n\nMake feed parsing task more generic.  Do not require the feed url to end in index.json"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maryamariyan": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1784", "title": "Problem with baselining ApiCompat error ", "body": "In corefx, System.ComponentModel.Composition project had to skip running apicompat in order to skip the following error:\r\n\r\n```\r\nApiCompat Error: 0 : Unable to resolve assembly 'Assembly(Name=System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)' referenced by the contract assembly 'Microsoft.Cci.DummyModule'.\r\n```\r\n\r\nWhen using the msbuild option /p:BaselineAllAPICompatError the src project of System.ComponentModel.Composition succeeds. \r\nBut even when the apicompat txt file exists and without the above baseline option the build will fail.\r\n\r\nNote: After this issue gets fixed we'll need to enable running apicompat again on System.ComponentModel.Composition\r\n\r\ncc: @weshaggard @danmosemsft ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maririos": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1734", "title": "Fix SkipCreateWindowsPdbsFromPortablePdbs in BuildTools", "body": "@dagood commented on [Thu Sep 28 2017](https://github.com/dotnet/core-eng/issues/1838)\n\nI tried to use this property to disable the conversion target in CoreCLR release/2.0.0 with https://github.com/dotnet/coreclr/pull/13925, but it didn't work: https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1020348.\r\n\r\nThe skip is needed because a certain CoreCLR dll/pdb is failing to convert.\r\nBuild failure issue discussing skip: https://github.com/dotnet/core-eng/issues/1769\r\nUnderlying conversion issue: https://github.com/dotnet/core-eng/issues/1771\r\n\r\n@MattGal will be working around this by turning off the whole step in the build definition json. Once we fix the Skip property (or the underlying issue) we can enable the step again.\r\n\r\nI think the issue is that the property doesn't flow through properly to the target it's meant to disable.\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eerhardt": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1730", "title": "Need to port release/2.0 changes to master", "body": "We made https://github.com/dotnet/buildtools/pull/1707 in just the release/2.0.0 branch.\r\n\r\nThis is to track getting these same changes ported to master, so repos that use buildtools can use these changes in master as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1714", "title": "run.exe should default {OSRid} to win10 when on a win10 machine", "body": "When building on a win10 machine, the `{OSRid}` parameter in config.json files should be `win10` instead of `win7`.\r\n\r\nhttps://github.com/dotnet/buildtools/blob/78260239e4db68ad5c2df774a27d5f9a54fd92e5/src/Run/SettingValueProvider.cs#L24\r\n\r\nWhen building non-portable assets on Windows (like we do in `source-build`), we are producing `runtime.win10` packages when building on `win10`.  Then later when we want to consume those packages from a higher repo (like core-setup), `run.exe` is setting the repo's `OSRid` to `win7`.  So when we are restoring the packages, it is trying to find `runtime.win7` or `runtime.win` packages, but they haven't been created.  Only `runtime.win10` packages have been created.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1708", "title": "Automatically update BuildTools for release/2.0.0 branches", "body": "BuildTools gets automatically updated in corefx, coreclr, wcf, and core-setup in the master branches.  See https://github.com/dotnet/buildtools/issues/892.\r\n\r\nWe should hook this up for the release/2.0.0 branches as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joperezr": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1726", "title": "Set checksum algorithm using csc task parameter instead of response file", "body": "Before, the csc msbuild task didn't support passing in a checksum algorithm as a parameter, so currently we are passing a response file that would set the algorithm. This may cause problems since VS won't pass in response files when building, so it could lead to having to different outputs whether you build in VS or if you don't. We should instead move and use the MSBuild task parameter to set the checksum property to fix this.\r\n\r\ncc: @weshaggard ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1697", "title": "Remove workaround that copies RID specific assets when initializing buildtools in non-Windows", "body": "On PR #1687 we had to make a workaround that manually copied a few assets that were getting published to RID specific locations into the tools directory when running init-tools on non-Windows. This issue is to track the work of removing that workaround, and instead trying publishing the tool runtime to the right RID so this is won't be required.\r\n\r\nWorkaround is here: https://github.com/dotnet/buildtools/pull/1687/files#diff-519820c77125188495c6a22d71f859ceR112\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1669", "title": "[To-Do] Remove workaround in init-tools that is renaming the compilers to have a .exe extension", "body": "In our repos we use a custom task library in order to launch the compilers, and this task will try to find them like: `csc.exe` and `vbc.exe` in order to spawn them. The problem is that newer versions of roslyn have changed the extension of the compilers to be `csc.dll` and `vbc.dll` instead. This causes the custom task library to not be able to find them anymore. As a workaround, PR #1661 added a line in init-tools that would rename the extension which will make it all work, but this issue is to track the work of removing that workaround and instead use the real task library.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724035", "body": "mmm not sure why this change was made, I'm sorry.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818226", "body": "this is for the Timezone information. For example: -07:00 for PST or Z for UTC.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818275", "body": "Actually you are right, I'll remove time from the DateFormat. We still need this format here though, because this is the format that matches what MSBuild returns as a Modified time.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818304", "body": "I still need to pass it into the task, so that if somebody overrides it it may be passed along to the task.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "danmosemsft": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1716", "title": "Cannot have multiple conditions on ConditionalFact unless they are on same type or all types are in test assembly", "body": "Right now you cannot have multiple conditions on a test attribute unless they are on the same type or on a type in the tes assembly.\r\n\r\nThis would be very useful but is not possible\r\n`[ConditionalFact(nameof(PlatformDetection.IsNotWindowsNanoServer), nameof(AdminHelpers.IsElevated))]`\r\n\r\nThe code below looks for the type PlatformDetection only in the current test assembly. If it would look in all loaded assemblies, it would find it inside xunit.netcore.extensions.dll. Same for AdminHelpers.\r\n\r\nhttps://github.com/dotnet/buildtools/blob/master/src/xunit.netcore.extensions/Discoverers/ConditionalTestDiscoverer.cs#L91\r\n\r\n/cc @safern ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johnbeisner": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1675", "title": "The 'dotnet/buildtools' repo does not build on Debian 9 Stretch", "body": "_From @bazzilic on September 9, 2017 9:19_\n\nOn Debian 9 (Stretch), do\r\n\r\n```\r\ngit clone https://github.com/dotnet/buildtools.git\r\ncd buildtools\r\n./build.sh\r\n```\r\n\r\nIt will fail due to inability to detect an OS while executing a script from this repository located at `scripts/obtain/dotnet-install.sh`.\r\n\r\nAfter taking a closer look at the script, it is clear that this function does not detect Debian 9: https://github.com/dotnet/cli/blob/8e756edce1573c30c0c5a0708ff323dda0f673fc/scripts/obtain/dotnet-install.sh#L58-L109\n\n_Copied from original issue: dotnet/cli#7622_", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ahsonkhan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/4ffe2088d14146a28e269d22a8fbd4a19677e515", "message": "Merge pull request #1862 from ahsonkhan/AddEnvVar\n\nLimit inner iteration count to a max of 2"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7098cfc9fe90e1956ce739c5e169cd1c5ca74f86", "message": "Make max iteration (and max inner iteration) a property"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8be4823c0ce762a166875022e3936dbb7333f678", "message": "Limit inner iteration count to a max of 2"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "safern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/2160838afe6f31a582d975692c2aca7792a3b971", "message": "When creating the supportedProjectConfigurations dictionary we need to make sure they are distinc elements (#1845)\n\n* When creating the supportedProjectConfigurations dictionary we need to make sure they are distinc elements, if not we would fail with an ArgumentException that the key is already present if a project duplicates a build configuration for some reason.\r\n\r\n* Remove not neccessary Dictionary's constructor call since .ToDictionary already returns one"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f3e5b5e7e8c65a09c4068dbd1d7e181e4224c883", "message": "Add osGroup scenario to placeholder build configurations to FindBestConfiguration task (#1842)\n\n* Add osGroup scenario to placeholder build configurations to FindBestConfiguration task\r\n\r\n* Cleanup to use IsPlaceHolderConfiguration flag when choosing bestConfiguration\r\n\r\n* Change to use Dictionary instead of HashSet to avoid linear searchs"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "karajas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1769", "title": "Revert \"Add PackageRestoreLogger to log restore urls\"", "body": "This reverts commit 98e4d4ebf8e6e6fa68389c71f529d29307372896.\r\n\r\nWill move the project into a separate tool.\r\n\r\n@chcosta @weshaggard ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pgavlin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1659", "title": "Add support for arch-specific `ActiveIssue`s.", "body": "This allows the user to disable a particular test when targeting a\r\nspecific platform without disabling the test for other platforms. We\r\nintend to use this in CoreCLR to disable tests that e.g. fail on x86 or\r\nARM but not on other platforms.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "StephenBonikowsky": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1627", "title": "WCF does not necessarily run tests on the same OS as it built on.", "body": "* In the case of our OSX and Linux tests, we build the projects on Windows and then in Helix run the tests on Linux or OSX.\r\n* We need to be able to override this property so it does the correct thing further down the line for when tests are run in Helix.\r\n* One specific issue this should fix...\r\nhttps://github.com/dotnet/buildtools/blob/c45406f85a56c903d02eab582db455afa98dce3d/src/Microsoft.DotNet.Build.Tasks/PackageFiles/tests.targets#L34\r\ncausing error...\r\n\r\n> 2017-08-08 00:31:43,688: INFO: proc(54): run_and_log_output: Output: chmod: cannot access '%RUNTIME_PATH%dotnet.exe': No such file or directory\r\n\r\nIn: https://mc.dot.net/#/product/components/master/source/official~2Fwcf~2Fmaster~2F/type/test~2Fscenario~2Fiishosted~2F/build/20170808.03/workItem/Binding.Custom.Tests/wilogs", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WonyoungChoi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1532", "title": "GenAPI: Add global prefix to explicit interface method and property", "body": "When use \"-global\" option, the global prefix \"global::\" should be added to name of explicit interface methods and properties as follows.\r\n\r\n```\r\nobject global::System.Collections.IEnumerator.Current { get { throw new global::System.PlatformNotSupportedException(\"Not Supported Feature\"); } }\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexGhiondea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1488", "title": "Fix assembly info generation for VB projects.", "body": "/cc @joperezr  (you were right ;) )", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/9709965", "body": "I think this fails to build because it cannot find the 1.0.25-prerelease version of the package in src\\package\\\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/9709965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "richlander": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1447", "title": "Update license for .NET Core NuGet packages", "body": "We are adopting a plan to change the license and copyright of .NET Core packages. We want to make this change for open source packages. If there are packages that are still closed source, in part of in full, they should not be affected by this change.\r\n\r\nIs this the right change to make to achieve the stated goal, above?\r\n\r\nI saw that there are [nuspecs in this repo](https://github.com/dotnet/buildtools/search?utf8=%E2%9C%93&q=329770&type=) and know that Roslyn and other components have their own approach. I thought we should start here.\r\n\r\nMore context: https://github.com/dotnet/corefx/issues/12190", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JeremyKuhne": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1227", "title": "Add WarnAsError Logger", "body": "We want to allow hard failing the build if any warnings\r\nare raised. Starting simple- we can allow configuring for\r\nspecific warnings as we hit the need.\r\n\r\n@weshaggard @ericstj ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joshfree": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62568327", "body": "LGTM; what testing did you do?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62568327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62817070", "body": "applied 67c2c561d33ca1b4eed869ab0b9072a9c16df9d9\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62817070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62819317", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62819317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "nguerrera": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62569337", "body": "Ran tests with OSS signing enabled locally.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62569337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62607291", "body": "Thanks. I'll merge it in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62607291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983313", "body": "> Also that seems to suggest another problem. Why are we including immutable and metadata reader in this package? It seems they ought to be package dependencies.\n\nThey are package dependencies at design-time, no? At runtime, however, the buildtools need their dependencies and I don't think we want to probe around in different packages. Or am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991921", "body": "I already said looks good, but seems GitHub lost the commit comment somehow.\n\nAnyhow, once more: looks good to me. Ship it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119771", "body": "+1. Let's not check in binaries. It won't scale.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119818", "body": "Can you comment that?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22135924", "body": "Note that these need to be rebased out, not deleted as a separate commit or else they'll be stuck in the history and every clone forever.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22135924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790932", "body": "Pardon my cmd/perl. My powershell is weak and perl is oh so good at regex replace. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23826620", "body": "Unless I'm missing something, I like what I have here better. I don't see the point of that import, and even less the point of moving things around to serve it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23826620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33788256", "body": "Should this be .NETFramework,Version=v4.5 and net45? We aren't set up to actually use DNX to run. Even the DNXCore part above will change I believe.\n\n/cc @ericstj \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33788256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33793310", "body": "Interesting. It looks like me like Distinct picks the first match and not the last one. I assume DistinctBy would do the same. \n\nhttps://github.com/dotnet/corefx/blob/872bb70953bcfe0a47dcc6e9789fbd330e295bc3/src/System.Linq/src/System/Linq/Enumerable.cs#L924\n\nMind you, I suppose one could reverse the input beforehand.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33793310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34815935", "body": "I see '$(DesignTimeBuild)'=='true' checks in the common targets. Why is that not enough to use here? If it truly isn't, calling that out here in the comment would be helpful.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34815935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34816006", "body": "I would not qualify this on VS version. Shouldn't we simply stop doing this everywhere?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34816006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34818002", "body": "OK.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34818002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35114977", "body": "Did you verify that VS debugging of test projects still works? I suspect the {XunitTraitOptions} will be seen by VS in the start options and xunit won't like that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35114977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35116685", "body": "It is not run through that target and I don't believe we can make it so with the simple mechanism we're using instead of test explorer integration, etc.\n\nIt was broken, but for other reasons. A big part of the last update was to get the debugging fixed. I really want to make sure we keep it that way. It's a huge pain when it breaks. I think as long as you change TestCommandLine in a way that will leave StartArguments without the placeholder, everything will work as before.\n\nSee tests.targets before 4bcb9b1, it took explicit care to make the VS start arguments not have the placeholder. Basically, I think we want to revert the placeholder to be done as before.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35116685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35259874", "body": "Ah, was about to ask how to detect host OS in msbuild, but that would be good enough for the common case of iterating on Windows.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35259874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35265765", "body": "Ugh, I'm having trouble testing that condition. When I build test projects with /p:OSGroup=Linux, it sets OS to Windows_NT (!?), and building with /p:OS=Linux fails outright (!?). \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35265765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35268208", "body": "I'm still confused about OS vs OSGroup, but OSGroup is the one that we seem to use now so updated PR using that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35268208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35269124", "body": "Is it meant to indicate the OS of the build system or the OS targeted by the binaries being compiled? If the former, then it is the right one to use and I'm just confused. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35269124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270117", "body": "OK. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270648", "body": "Oops. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/39883939", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/39883939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/78407580", "body": "IIRC, we used to filter to namespace types only and add nested forwarders with special logic to replicate the csc behavior, which included private nested types of the destination. Then we decided to change it so that we only forward to types that are actually defined in the reference assembly. See https://github.com/dotnet/buildtools/pull/275. \n\nI did not study things, but I suspect we broke something in that move. This comment does seem out of date. I'd remove it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/78407580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/137319049", "body": "IIRC, this is informational, and the real bit lives in assemblyflags. Am I misremembering or did the compiler/runtime change?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/137319049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "FiveTimesTheFun": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62588548", "body": "I've verified this by locally creating a build tools package with your PR, referencing that from CoreFX, turning on OSS signing for Immutable and running the build.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62588548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62606751", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62606751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62669202", "body": "Thanks Matt looks good!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62669202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62811824", "body": "Looks good @joshfree and @PatrickMcDonald\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62811824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982553", "body": "@davkean We are restoring packages during the build.  The issue here is that although the immutable collections package is restored to src\\packages\\System.Col....., and the Microsoft.DotNet.Build.Tasks project references that assembly, because the assembly with the same identity is also GACd, msbuild is not copying that file to the output directory.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982638", "body": "Also that seems to suggest another problem.  Why are we including immutable and metadata reader in this package?  It seems they ought to be package dependencies.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982813", "body": "@davkean is unsure that the behavior you're seeing is expected.  He expected that the GAC would be the last location we'd look, after the hint path, and that we would always copy local if we picked it up from the hint path rather than the GAC.  He'd like to see msbuild.log files for before and after to understand.\n\nEdit: He's also a lot quicker than I am and already commented about this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983839", "body": "> They are package dependencies at design-time, no? At runtime, however, the buildtools need their dependencies and I don't think we want to probe around in different packages. Or am I missing something?\n\nThank you for jogging my memory, that was it, so that our minimal build bootstrapper can simply copy everything from the build tools package to the tools folder (to remove policy from the build bootstrapper).\n\nIt seems this could also be done with some more work in the build tools if the build tools copied its own package dependencies to the tools folder the same way that \"tests.targets\" locates its package dependency in the package restore folder.\n\nSo in other words, seems like a possible low-priority opportunistic change that I probably wouldn't do yet.  Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991975", "body": "Taking this through :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63395243", "body": "Thanks @nguerrera.  I've had more time to look at this and test, and it appears you're right, this change does not appear necessary.\n\nIt makes sense that it wouldn't looking at the contents of CSharp.targets and Common.targets (CSharp just defining the core build tasks and then importing Common), since the DefineConstants property is used inside a task, and MSBuild evaluates all properties before running any tasks.\n\nIt was during my testing that I believed this was necessary, as I was bringing up the changes to corefx at the same time.  I've tested the corefx PR without this PR and it's building and OSS signing correctly, so I'm going to abandon this PR and take the other one in.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63395243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63408802", "body": "Thanks Nick :)  I'd like to hear your motivations for the fix in this way, though.  It seems like there are a couple other options as well.\n\nEither\n\nModify the individual csproj files to construct their intermediate path from the base path\n\nOr\n\nRemove forwarding BaseIntermediateOutputPath to the assembly builds in binaries.targets, removing the necessity for TreatAsLocalProperty here (? is that enough?)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63408802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "terrajobst": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653851", "body": "I like the change, except for the FWLink.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653863", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "jeremymeng": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62654425", "body": "What's the recommended way to build in command-line if I only have Visual Studio vNext installed on my machine, and don't want Visual Studio 2013 installed SxS?  Currently I am installing Microsoft.Build.Tools from http://www.microsoft.com/en-us/download/details.aspx?id=40760.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62654425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "mellinoe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62666272", "body": "Looks good to me as well. :+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62666272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112683", "body": "Condition is wrong\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112689", "body": "I'd like \"TestHostDirectory\" better, to make it obvious it's a directory\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ellismg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981075", "body": "@FiveTimesTheFun, this addresses the issue I was having earlier.  @davkean , I am sure you'll want to take a look as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983192", "body": "Yeah, I sent him a copy of the entire log, which I won't include here.  The relevant portion looks like this:\n\n```\nPrimary reference \"System.Collections.Immutable, Version=1.1.32.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". (TaskId:13)\n    Resolved file path is \"C:\\Users\\matell\\Documents\\GitHub\\buildtools\\src\\packages\\System.Collections.Immutable.1.1.32-beta\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\". (TaskId:13)\n    Reference found at search path location \"{HintPathFromItem}\". (TaskId:13)\n    Found related file \"C:\\Users\\matell\\Documents\\GitHub\\buildtools\\src\\packages\\System.Collections.Immutable.1.1.32-beta\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.xml\". (TaskId:13)\n    This reference is not \"CopyLocal\" because it's registered in the GAC. (TaskId:13)\n    The ImageRuntimeVersion for this reference is \"v4.0.30319\". (TaskId:13)\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62985141", "body": "So @davkean, do you want me to abandon this PR?  My preference here would be to check in this fix so the build works in this scenario.  I'm happy to file an issue (and even reference the issue number with a comment in the project file) to go clean things up once the relevant nuget issue is fixed, but I'd rather not wait for a fix in nuget when the build is broken today in a popular configuration.  Is that reasonable?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62985141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62988209", "body": "Thanks, all.  I submitted the fix to the CI system.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62988209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169481", "body": "If you would rather me rename the property on BuildValues.props and just include that in the Nupkg instead, I am happy to.  I don't think it's a good idea to not prefix the thing we consume with BuildTools or something to \"namespace\" it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169500", "body": "These changes will require me to spin a new build tools, then consume it here and spin another build in order to get everything up to date.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/15966741", "body": "I think you need rhel.7-x64 here as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/15966741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "davkean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981534", "body": "I haven't looked at our NuGet int in this repro, but I'm trying to understand how you would run into this. MSBuild will only pick up the one in the GAC, if and only if, the one in the hint path can't be found. @FiveTimesTheFun shouldn't we be restoring packages before build?\n\nWe should probably remove {GAC} from search paths anyway so this would have failed the build.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62984366", "body": "@nguerrera Yep, you are right and @FiveTimesTheFun and I had discussed this. \n\nThe rest of my thread is around the GAC behavior:\n\nI wanted to chase this down because it's a more general issue around NuGet packages. @JeffHandley and I discussed this, but I may have mislead him around MSBuild behavior. \n\nIn this case, MSBuild finds the file in the package location, but then does a GAC lookup to trigger determine whether CopyLocal is turned on or off. If it's already in the GAC, then they don't copy it. This is questionable behavior, not the original design and looks like it was done to fix a bug they ran into back in VS 2005. We should definitely change NuGet to make sure it always sets this bit. I believe @JeffHandley already has a bug around this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62984366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62987985", "body": "That's fine - check it in, it doesn't harm anything,.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62987985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jeffhandley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63105240", "body": "Cool. We also fixed it on the NuGet side (will be in 3.0). NuGet was already setting CopyLocal=true on the reference, **_but**_ project systems were often seeing that the _default_ value of CopyLocal was true and that wasn't triggering the property changed handler to cause it to get forced into the project file.  So NuGet will start doing: CopyLocal = false; CopyLocal = true; which will force it to get burned in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63105240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ericstj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/14723970", "body": "Any reason why you removed this?  I'm adding it back.  It's helpful when editing the targets from Visual Studio.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14723970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724048", "body": "No worries.  Could have been that VS made it for you.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14773765", "body": "It looks like you are missing GenerateAssemblyList.cs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14773765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14794447", "body": "Bug here, this just checks if there are any elements.  You need to see if any elements are true.  This is causing build failures since you are always round-tripping the project.json.  When two configurations build the same project at once you get a sharing issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14794447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "naamunds": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/15967231", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/15967231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "leemgs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/56663092", "body": "Yes. In order to handle `/etc/os-release` and `/etc/lsb-release` used as a standard file in the Linux distributions, we may use cat `file | grep` more than `grep`.  It's is portable to aware popular Linux-based most distributions. Could you tell us if you have a better approach? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/56663092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28483441", "body": "You can remove the closure and just put the top level deps now\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28483441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28484011", "body": "Not sure you want to tool that but sure :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28484011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/47259518", "body": "It's not needed ever. The dotnet CLI is using a CoreCLR based DNX so mono settings don't apply.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/47259518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dsplaisted": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158168", "body": "> native\\xunit.console.netcore.exe\n\n@ericstj I tried this, but it didn't work.  The file gets listed in project.lock.json as expected, but the ResolveNuGetPackageAssets task doesn't deploy anything from a native folder that's not specific to a runtime.  The logic is in [GetCopyLocalItems](https://github.com/dotnet/roslyn-internal/blob/275671ee97283bbff71b59e173ed9319ac415b83/Closed/MSBuildNuGet/Tasks/ResolveNuGetPackageAssets.cs#L234).\n\nI'm not sure a fix for this would go entirely in the task, either.  You'd need to define what happens when you have a native folder that's specific to a runtime a runtime-agnostic one.  Should you take all files from both (preferring the runtime-specific ones when there is the same file in both places), or should the existence of a runtime-specific native folder mean the runtime-agnostic folder isn't used at all?  That type of decision seems like maybe it should be part of NuGet instead of the ResolveNuGetPackageAssets task.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158641", "body": "> This can be removed.\n\n@ericstj What makes you say this?  When I remove this reference from project.json, I get build errors.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40380541", "body": "After some investigation, it looks like the bug is with the NuGet restore command, not the ResolveNuGetPackageAssets task.  I've filed a bug (NuGet/Home#1454) and sent a PR (NuGet/NuGet3#132) to fix it.\n\nIn the meantime we need a solution to deploy the xUnit .NET Core Console runner for MSBuild.  Can we go ahead and merge this PR to unblock us?  I think this is the cleanest solution until the NuGet bug is fixed.  NuGet v3 has improved support for .props and .targets files and no longer needs to modify your project files to include them.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40380541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40382833", "body": "@weshaggard We've added *.nuget.props and *.nuget.targets to our .gitignore.  Does that address your concerns?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40382833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40392075", "body": "@ericstj The aspnetcore50 moniker is currently still in use in [tests.targets](https://github.com/dotnet/buildtools/blob/65d93460c83bdcabfc1c0e53ff74f1f344cafa47/src/Microsoft.DotNet.Build.Tasks/Targets/tests.targets#L47)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40392075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}