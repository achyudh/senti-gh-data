{"_default": {"1": {"tannergooding": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15914", "title": "Tizen armel CI job frequently hangs", "body": "If you look at the failures for the [armel_cross_checked_tizen_prtest](https://ci.dot.net/job/dotnet_coreclr/job/master/job/armel_cross_checked_tizen_prtest/), you will see that they frequently fail due to timeout issues.\r\n\r\nOn one side, it looks like a given job will hang after some tests have hit an 'Unsupported syscall'.\r\n\r\nOn other jobs, they will succesfully execute all tests and then stall with `Perform an action if the job was performed on an Azure VM Agent. is waiting for a checkpoint on dotnet_coreclr \u00bb master \u00bb armel_cross_checked_tizen_prtest ####` (the job will be waiting on another prtest job, from the same queue, and for an unrelated PR to complete before allowing itself to finish).\r\n\r\nThe timeout on all of these jobs is currently 4 hours which can quickly cause the queue to get backed up or cause PRs to get delayed for long periods of time.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15908", "title": "Plumb support for Is4ByteSSEInstruction through the emitter", "body": "Currently, the emitter has support for emitting 4-byte AVX instructions throughout most of the `emitOutput*` code paths in the emitter.\r\n\r\nHowever, the support for emitting 4-byte SSE instructions only exists in a couple of the `emitOutput*` code paths and requires non-trivial work to enable elsewhere.\r\n\r\nWe should plumb the rest of this support through the emitter in order to enable several of the 4-byte SSE4.1 and SSE4.2 intrinsics on machines which don't support the VEX encoding (non-AVX machines).\r\n\r\nThis will also allow the `Math.Round`, `Math.Ceiling`, and `Math.Floor` intrinsics to be enabled for these architectures as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15908/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15879", "title": "Simplify the 'emit immediate' logic in emitxarch", "body": "In `emitxarch`, we have a some duplicated logic for emitting immediate values to handle the imm8 and the imm16/imm32 case (ex: https://github.com/dotnet/coreclr/pull/14736/files/59db2cef21998c9680670a95939e77ee29ebc595#diff-a51165bc1fd2c0fa3987370e2e714356R8201).\r\n\r\nIt would be useful to create a helper method and contain this logic centrally where possible.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/3e619d70d491f34fc950a7fcc635c58cb31ace92", "message": "Merge pull request #15897 from tannergooding/hwintrin-debuggerdisplay\n\nAdding a DebugView for Vector64<T>, Vector128<T>, and Vector256<T>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9133e9dc3336a2a4cbd56c0f5d9e223cffa5d342", "message": "Adding a DebugView for Vector64<T>, Vector128<T>, and Vector256<T>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/0b5e9ebc73f2bc4efdc7cfbf5c041fed2be95a54", "message": "Updating emitIns_R_R_A_I to not be defined for the legacy backend."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/e522589e0c11fa4ab9a188ba91ede5c8f728802f", "message": "Merge pull request #15538 from tannergooding/sse-intrinsics\n\nImplement the SSE hardware intrinsics."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a8db845fd2a6bd6a3e9c93ce4a4a3e523e71c205", "message": "Resolving PR feedback"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/11b6ac8f9ed2ecd8420a98e04f806829de07274a", "message": "Adding tests for the SSE Load, LoadAligned, LoadHigh, LoadLow, and LoadScalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/677c5c33ab1e4954d98df72a9658719b3b02ca65", "message": "Adding support for the SSE Load, LoadAligned, LoadHigh, LoadLow, and LoadScalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5ca94174d1d20755ef40e0a559becb6794b9bf74", "message": "Updating most of the SSE Compare intrinsics to support containment"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a15aa12827471776801fb87a4bccd69d8d64502c", "message": "Updating the SSE HWIntrinsics to share code where possible."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/51a1a5984cd5ba84813088cf29781ca42e7a0102", "message": "Adding tests for the SSE MoveMask intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/baeed0c7cd1c9924579103fc03ff52e39ff11f6d", "message": "Adding support for the SSE MoveMask intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/dee8fb7386799ee85c0e106a48400e0d9ab14661", "message": "Adding tests for the SSE Set scalar intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5ef844b0f8d003313e4dcb8502ddfe3d3c06e3aa", "message": "Adding support for the SSE Set scalar intrinsic"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15901", "title": "Resolving a few issues with the HWIntrinsic code", "body": "Bad merge between two of my PRs (https://github.com/dotnet/coreclr/pull/15538) and (https://github.com/dotnet/coreclr/pull/14736) that resulted in the `System.Math.Round`, `System.Math.Floor`, and `System.Math.Ceiling` functions asserting in `Debug`/`Checked` builds on non-AVX enabled machines.\r\n\r\n`roundss` and `roundsd` go down these code paths and are SSE4.1 instructions, and will fail the `IsThreeOperandAVXInstruction` check,\r\n\r\nAlso fixing the `LoadAlignedVector128` test, which was sometimes failing due to the stack not guaranteeing 16-byte alignment.\r\n\r\nAlso marking TYP_SIMD nodes to not undergo struct promotion if they are part of a GT_HWIntrinsic node.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15836", "title": "Refactoring emitInsBinary", "body": "Resolves https://github.com/dotnet/coreclr/issues/15829", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Gallimathias": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15906", "title": "SIMD 64 Bit Memory-Alignment Bug ", "body": "Since I was a little wrong with issue https://github.com/dotnet/roslyn/issues/24233#issuecomment-358405137 in the Roslyn repo, I apologize for that ^^, here at the right place.\r\n\r\n**Version Used**: .NET 4.7.1 C# 7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install engenious via nuget or wrote your own packed Vector3 or use a other packed Vector3\r\n2. Cast with pointer to System.Numerics.Vector3 or own unpacked Vector3\r\n3.  Just do the same thing, just put the pointer in a variable before it.\r\n4. Compare the results\r\n\r\n**A brief example:**\r\n\r\nC#-Code:\r\n\r\n````CSharp\r\n        static unsafe void Test()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var a = *(Numerics.Vector3*)(&value);\r\n        }\r\n\r\n        static unsafe void TestB()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var d = &value;\r\n            var a = *(Numerics.Vector3*)d;\r\n        }\r\n````\r\n\r\nIL-Code:\r\n\r\n````CIL\r\n                 .method private hidebysig static \r\n\t\t\tvoid Test () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2144\r\n\t\t\t// Code size 33 (0x21)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_001f: stloc.1\r\n\t\t\tIL_0020: ret\r\n\t\t} // end of method Program::Test\r\n\r\n\t\t.method private hidebysig static \r\n\t\t\tvoid TestB () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2174\r\n\t\t\t// Code size 35 (0x23)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [engenious]engenious.Vector3* d,\r\n\t\t\t\t[2] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: stloc.1\r\n\t\t\tIL_001b: ldloc.1\r\n\t\t\tIL_001c: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_0021: stloc.2\r\n\t\t\tIL_0022: ret\r\n\t\t} // end of method Program::TestB\r\n````\r\n\r\n**Expected Behavior**: Both methods should produce the same result on all systems.\r\n\r\nMethod Test: a should be <0. 0. -41>\r\nMethod TestB: a should be <0. 0. -41>\r\n\r\n**Actual Behavior**: When you cast a packed vector into an unpacked vector, the result will always be a zero vector on some computers with 64 Bit and the use of a direct assignment.\r\n\r\nMethod TestB works on all systems no matter if 32 Bit or 64 Bit.\r\nMethod Test does not work as 64 bit version on some systems. Could this be related to the CPU used?\r\n\r\nMy Results compiled as 64 Bit:\r\n\r\nMethod Test: a is <0. 0. 0>\r\nMetod TestB: a is <0. 0. -41>\r\n\r\nOn my PC, Method Test doesn't work. My CPU is Intel i7-5960X.\r\n\r\nThe only difference in CIL are the following lines:\r\n\r\nIL_001a: stloc.1\r\nIL_001b: ldloc.1\r\n\r\n**Supplementary here the assembly**\r\n\r\n__Method TestB:__\r\n````Assembly\r\n var d = &value;\r\n00007FF958820875  lea         rax,[rbp+38h]  \r\n00007FF958820879  mov         qword ptr [rbp+30h],rax  \r\n            var a = *(Numerics.Vector3*)d;\r\n00007FF95882087D  mov         rax,qword ptr [rbp+30h]  \r\n00007FF958820881  vmovss      xmm0,dword ptr [rax+8]  \r\n00007FF958820887  vmovsd      xmm1,qword ptr [rax]  \r\n00007FF95882088C  vshufps     xmm1,xmm1,xmm0,44h  \r\n00007FF958820892  vmovapd     xmmword ptr [rbp+20h],xmm1  \r\n        }\r\n````\r\n__Method Test:__\r\n````Assembly\r\n\r\nvar a = *(Numerics.Vector3*)(&value);\r\n00007FF9588207F5  mov         al,byte ptr [rbp+38h]  \r\n00007FF9588207F8  mov         byte ptr [rbp+20h],al  \r\n        }\r\n````", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tarekgh": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15896", "title": "DateTime parsing.", "body": "_From @wstaelens on January 12, 2018 15:32_\n\nNot sure if this is normal or not (tested in a solution with .NET 4.6.1 and in Visual Studio 2017 C# Interactive window):\r\n\r\n```\r\n> var a = DateTime.UtcNow.ToString(\"ffffHHMMyytssddmm\");\r\n> DateTime ts;\r\n> bool test = DateTime.TryParseExact(a, \"ffffHHMMyytssddmm\", null, System.Globalization.DateTimeStyles.None, out ts);\r\nIndex was outside the bounds of the array.\r\n  + System.DateTimeParse.MatchAbbreviatedTimeMark(ref System.__DTString, System.Globalization.DateTimeFormatInfo, ref System.DateTimeParse.TM)\r\n  + System.DateTimeParse.ParseByFormat(ref System.__DTString, ref System.__DTString, ref System.ParsingInfo, System.Globalization.DateTimeFormatInfo, ref System.DateTimeResult)\r\n  + System.DateTimeParse.DoStrictParse(string, string, System.Globalization.DateTimeStyles, System.Globalization.DateTimeFormatInfo, ref System.DateTimeResult)\r\n  + System.DateTimeParse.TryParseExact(string, string, System.Globalization.DateTimeFormatInfo, System.Globalization.DateTimeStyles, out System.DateTime)\r\n> \r\n```\n\n_Copied from original issue: Microsoft/dotnet#600_", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeremymeng": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15892", "title": "sosdocsunit.txt should not have execute permission set", "body": "## Steps to reproduce\r\n```\r\ndotnet new console\r\ndotnet public -r linux-x64 -o pub2\r\nll pub2/*.txt\r\n```\r\n\r\n## Actual behavior\r\nNote that `sosdocsunit.txt` has execution permission which doesn't seem right.\r\n\r\nIn fact many *.dll and *.so under the published folder all have the `-rwxrw-rw-`.  They can just use `-rw-rw-rw-`\r\n\r\n```\r\n-rwxrw-rw- 1 azureuser azureuser 65869 Jul 20 19:16 pub2/sosdocsunix.txt*\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  8\r\n OS Platform: Linux\r\n RID:         debian.8-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.2/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4creators": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15888", "title": "[Win/IPv6] Local build fails with server timeouts during build tools initialization", "body": "For a couple of hours I am blocked by inability to build coreclr locally. The error I am getting is as follows:\r\n\r\n```\r\ne:\\src\\ms\\dotnet\\coreclr>call \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\dotnetcli\\dotnet.exe\" restore \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj\" --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json --source https://api.nuget.org/v3/index.json  --packages \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\.\"\r\n  Restoring packages for e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj...\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microbuild.core/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microsoft.net.compilers/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microbuild.core/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microsoft.net.compilers/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\NuGet.targets(103,5): error : Failed to retrieve information about 'Microsoft.Net.Compilers' from remote source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microsoft.net.compilers/index.json'. [e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\NuGet.targets(103,5): error :   An error occurred while sending the request. [e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\NuGet.targets(103,5): error :   The operation timed out [e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj]\r\n\r\ne:\\src\\ms\\dotnet\\coreclr>set RESTORE_PORTABLETARGETS_ERROR_LEVEL=1\r\nERROR: An error ocurred when running: '\"e:\\src\\ms\\dotnet\\coreclr\\Tools\\dotnetcli\\dotnet.exe\" restore \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj\"'. Please check above for more details.\r\nBUILD: Laying out dynamically generated files consumed by the native build system\r\nBUILD: Laying out dynamically generated Event test files and etmdummy stub functions\r\n Generating Dummy Event Headers\r\n Generating Event Headers\r\nBUILD: Laying out dynamically generated EventPipe Implementation\r\nBUILD: Laying out ETW event logging interface\r\nBUILD: Commencing build of native components for Windows_NT.x64.Checked\r\nBUILD: Using environment: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\\\..\\..\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86_amd64\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/84efbc8e71fff8ccffdd637017036d2dc0f666df", "message": " Update clr-configuration-knobs.md, add new C# csi.exe based script for xplat document generation (#15858)\n\n* C# csx script to generate CoreCLR and Jit configuration knobs doc\r\n\r\n* Normalize category names, fix typos and white space in clrconfigvalues.h\r\n\r\n* Normalize category names, knobs descrptions and fix typos in jitconfigvalues.h\r\n\r\n* Remove clr-complus-conf-docgen.sh\r\n\r\n* Remove from clrconfigvalues.h CONFIG_ declarations which are already present in jitconfigvalues.h\r\n\r\n* Update clr-configuration-knobs.md with clr-configuration-knobs.csx script"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BruceForstall": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15886", "title": "Ubuntu x64 GCStress=C failure: ArrayWithThread_o", "body": "```\r\n20:15:45                BEGIN EXECUTION\r\n20:15:45                /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst_prtest/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun ArrayWithThread_o.exe\r\n20:15:45                Test 1 Failed\r\n20:15:45                Test 2 Passed\r\n20:15:45                Expected: 100\r\n20:15:45                Actual: 1\r\n20:15:45                END EXECUTION - FAILED\r\n```\r\n\r\nSeen:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_tst_prtest/23/consoleText\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_jitstress1_tst_prtest/5/consoleText\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_jitstress2_tst_prtest/5/consoleText\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15883", "title": "Native test components do not build with debug info", "body": "On Windows, I don't see PDBs for the native components in the test build, e.g. baseservices\\exceptions\\regressions\\Dev11\\147911, JIT\\jit64\\hfa\\main\\dll: hfa_*native*.dll.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/b76fdf6329aab09e21ad65d4d7497df1ce7b66cf", "message": "Merge pull request #15893 from BruceForstall/FixR2RCrossgen\n\nFix non-Windows R2R testing in CI"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ef90a3eb883ae9e1860e576c24e83d34cb8e4489", "message": "Merge pull request #15894 from BruceForstall/DisableGetGenerationInGCStress\n\nDisable GetGeneration from GCStress runs"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/17074b276f4ba82132d4e3c6b1f7eb9619e25aed", "message": "Disable GetGeneration from GCStress runs\n\nThis test has exhibited \"random\" failures during GCStress runs\n(which are believed to be due to the test itself, not some\nproduct issue). So, disable it from GCStress runs."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/18108e4306305cb2152203b6c777f799b63f76b5", "message": "Fix non-Windows R2R testing in CI\n\nThe xunit.performance.api.dll assembly depends on\nMicrosoft.3rdpartytools.MarkdownLog, which cannot\nbe found. Add xunit.performance.api.dll to the\nlist of assemblies that are not crossgen'ed\nduring R2R testing."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MichalStrehovsky": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15866", "title": "[Default interfaces] Debugger support", "body": "This tracks checking whether we need any work on the debugger side to be able to invoke default interface methods and if any work is needed, this will track the work in question.\r\n\r\nAt minimum, we'll need support for invoking shared instance methods on generic interfaces. Those are kind of special.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15865", "title": "[Default interfaces] Revise the timing of exception for ambiguous target", "body": "Throwing a `NotSupportedException` at the time the interface method is called (vs. when the problematic type was loaded) doesn't match how the CLR is doing similar kinds of validation: the type loader generally validates everything upfront and throws a `TypeLoadException` when a problem is found.\r\n\r\nNot sure what motivated this. The comments seem to indicate it's perf, but had we cared about perf, we could be validating a lot less at type load time. The precedent has been set to validate everything.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/2f3fa55c05bd4c2c60eb627d41634efaf46d20d3/src/vm/methodtablebuilder.cpp#L10689-L10691\r\n\r\nIt's not clear what kinds of failure modes this can bring (e.g. What does the GetInterfaceMap reflection API return when a type like this is loaded? What impact does this have on AOT compilation?).\r\n\r\nThis issue tracks:\r\n* Checking if this behavior was approved by the appropriate committee and if not,\r\n* This issue is going to track moving the check to the appropriate location", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndyAyersMS": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/75385b1fa21f14076f05ca1045fc487d09337064", "message": "Update perflab tests to execute in a fixed order\n\nGoal is to pin class init overhead on one test consistently. Also we were\nnot picking up the \"optimize for benchmark\" attribute and so likely risking\nhaving tests execute concurrently."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15801", "title": "Add ETL flags for ReadyToRun", "body": "Add flags to track the presence of ReadyToRun codegen in an assembly\r\nand module.\r\n\r\nAdd jitting flags to indicate when a method is jitted because the\r\nprecompiled code was rejected, either by a profiler or by ReadyToRun\r\ndependence tracking.\r\n\r\nTogether these can be used to distingish between\r\n* methods jitted because their assemblies were not precompiled\r\n* methods jitted because they were not precompiled in an otherwise\r\nprecompiled assembly", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CarolEidt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/025ba02cc5ff2df9392b28fffcad4934124589b5", "message": "Merge pull request #15869 from sdmaclea/PR-ARM64-is16Byte\n\n[Arm64] Use is16Byte"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/abe3c4635e2fcfcc928aa01903b873c2fca2a614", "message": "Merge pull request #15900 from tannergooding/sse-intrinsics\n\nUpdating emitIns_R_R_A_I to not be defined for the legacy backend."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15903", "title": "ARM: Fix morphing of struct passed on stack", "body": "If a struct is passed on the stack, it must live on the stack, unless/until we support `GT_FIELD_LIST` for these args. This is unlikely to represent a significant code quality issue, since ARM supports many register args, and this has gone undetected thus far.\r\nThis was exposed by tailcall stress on desktop.\r\nI've added a test that exposes the issue without tailcall stress (though it gets a different assert than the desktop failure).\r\n\r\nIt seemed that `fgMorphMultiregStructArg()` was the best place to fix this - and I noted that this is called for any struct that is larger than a single register. So I updated the method names & comments to reflect that.\r\n\r\nI thought about putting the test in the JIT\\Regressions test directory, but I consider that it is addressing basic missing test coverage, so I added it to JIT\\Methodical\\structs.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikem8361": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/5bcfde404803f85451cf0ee9fd6406734cb878ff", "message": "Add environment variable (COMPlus_EnableDiagnostics) to disable debugging and profiling. (#15878)\n\nTo disable the named pipes and semaphores created on linux execute \"export COMPlus_EnableDiagnostics=0\" before start the .NET Core program.\r\n\r\nOn Windows execute \"set COMPlus_EnableDiagnostics=0\" and on Linux execute \"export \"COMPlus_EnableDiagnostics=0\"\r\n\r\nRemoved the \"Telesto\" registry entry (old unnecessary Silverlight code) and Watson (always true) checks.\r\n\r\nFor issues #11769 and #8844."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benaadams": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/33ce0e2538172287ffea9ad28b5df2cde6de2f60", "message": "Skip EDI boundary for async (#15781)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/ac0e38fbdb8bf54fa0c1b4d548acfc1c5ad02758", "message": "Move public StreamReader/Writer to CoreLib (#15884)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a433a9ca4b4d7f37987db11a7e842e64517edf27", "message": "Matching non-shared Decimal changes"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15902", "title": "Cache Invariant CompareInfo", "body": "The Invariant CompareInfo is used in number of places. It is fetched via virtual method on CultureInfo. Caching it avoids the virtual method calls and extra indirections.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636374", "body": "The writebarriers are patched by WriteBarrierManager that assumes certain layout. The problem is that the Apple assembler does not use short jump encoding that throws the layout off. We had an extensive discussion about the best solution during review of this PR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9793081", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9793081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9801308", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9801308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507865", "body": "This is fixing annoying existing problem: full CoreCLR build will create a bunch of these localpkg directories that will show up in `git status`:\r\n\r\n```\r\nD:\\coreclr>git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n        src/.nuget/Microsoft.NETCore.ILAsm/localpkg/\r\n        src/.nuget/Microsoft.NETCore.ILAsm/win/localpkg/\r\n        src/.nuget/Microsoft.NETCore.ILDAsm/localpkg/\r\n        src/.nuget/Microsoft.NETCore.ILDAsm/win/localpkg/\r\n... bunch more of these ...\r\n```\r\n\r\n@weshaggard Is there more appropriate way to fix it?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mattwarren": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/8d84ea8193cad1a129385920d3982fe2de44c898", "message": "Add MDA (Managed Debugging Assistant) (#15875)\n\n* Add MDA (Managed Debugging Assistant)\r\n\r\n* Info about MDA's in .NET Core"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janvorli": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/1ae6cae97bc912cedb7284ef61a8dbe4b6de9fff", "message": "Add missing config.h.in entry for HAVE_LIBINTL_H (#15887)\n\nIn my change yesterday, I have added HAVE_LIBINTL_H to the\r\nconfigure.cmake file, but forgotten to add the corresponding define to\r\nthe config.h.in file. This fixes it."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72563072", "body": "It looks good to me too\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72563072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72645652", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72645652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785420", "body": "I'd put this ifdef out of the function so that either the WinContextToUnwindContext or WinContextToUnwindCursor are compiled.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785430", "body": "This one should be named XXXXContext, right? Based on its usage below ...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785517", "body": "There is a bug here - Setting SP to the value of winContext->Rip\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pentp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/37b14ff9bd610b9521e75a29dc9e04fcb5c9bbba", "message": "Misc Decimal optimizations\n\nSigned-off-by: dotnet-bot <dotnet-bot@microsoft.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "safern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/c9e80a7fabcf3757edd92e17ebad4189f4abb186", "message": "Update corelib shared README.md (dotnet/corefx#26366)\n\nSigned-off-by: dotnet-bot-corefx-mirror <dotnet-bot@microsoft.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danmosemsft": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/dd651509b9082f3117000e168007d5e1e1e72d32", "message": "Update filetimes to nsec (#15872)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adamsitnik": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15916", "title": "Event Pipe Developer Guide (docs)", "body": "@nategraf please review", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15871", "title": "[WIP] write pointer size to event pipe file to make x86 working", "body": "Part of https://github.com/Microsoft/perfview/issues/470\r\n\r\nInitially, the issue seemed to be trivial: one simple thing was missing in the file: pointer size.\r\n\r\nI analyzed the code and realized, that the existing version of the consumer of Event Pipe was [assuming](https://github.com/Microsoft/perfview/blob/1447751e7a22d3caff15b630903ae88f132729e4/src/TraceEvent/EventPipe/EventPipeEventSourceV1.cs#L99) that right after the initial data (time, timestamp and frequency) there is always the beginning of the events stream.\r\n\r\nSo if I add a new field, the old serializer fails because it's going to try to deserialize it as the first event.\r\n\r\nTo make the solution more future proof I decided to add a forward reference to the beginning of the events stream.\r\n\r\nSo the reader knows where to jump after reading the fields it knows. If there are some new fields, it's going to ignore them. So no breaking changes by adding new fields in the future.\r\n\r\nI had to bump the version of the object (2 => 3) in order to make the previous versions of the reader give users an easy to understand error message when they use new runtime with and old consumer lib.\r\n\r\nThe problem was that the old implementation was [ignoring](https://github.com/Microsoft/perfview/blob/1447751e7a22d3caff15b630903ae88f132729e4/src/TraceEvent/EventPipe/EventPipeEventSourceFactory.cs#L34) minimum reader version:\r\n\r\n```cs\r\n            var version = deserializer.ReadInt();\r\n\r\n            // Read the minimum reader version.\r\n            var minimumReaderVersion = deserializer.ReadInt(); <- NOT USED\r\n\r\n            switch (version)\r\n            {\r\n                case 1:\r\n                case 2: return new EventPipeEventSourceV1(deserializer, fileName, version);\r\n                default: throw new NotSupportedException($\"The version of {fileName} is {version} which is not yet supported.\");\r\n            }\r\n``` \r\nIt was a good time to add some other missing fields.\r\n\r\nI have also added the number of processors and process Id (all available in the PAL).\r\n\r\nOsVersion and Cpu Speed are still missing, because they are not a part of the PAL.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gbalykov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15915", "title": "Remove relocations for MethodTable::m_pParentMethodTable for Linux ARM", "body": "This pull request replaces absolute pointer for MethodTable::m_pParentMethodTable with relative pointer for ARM.\r\n\r\nRelated issues: #10380, #12370\r\n\r\nOn application, which is referenced in #10380 (comment), the following memory consumption changes occur for mappings of images (based on 795d9c05ad2670ae2f1d9b0353fd9d398688db99):\r\n\r\nRss: 8312 -> 8248 (0.7% improvement)\r\nPrivate_Dirty: 2060 -> 1720 (16.5% improvement)\r\nPrivate_Clean: 2368 -> 2408\r\nShared_Clean: 3884 -> 4120\r\n\r\ncc @Dmitri-Botcharnikov", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergign60": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15913", "title": "[armel tizen] Fixed CoreRT issue #4626 unwinding support", "body": "We need epilog's instructions for arm exidx section, not prolog's as for dwarf unwinding section", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmds": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15912", "title": "improve DllImport library name variation trying", "body": "Implements https://github.com/dotnet/coreclr/issues/15576\r\n\r\nThe dllName is first tried with _LoadFromNativeDllSearchDirectories_ and then with _LocalLoadLibraryHelper_, while variations are using the opposite order.\r\n\r\nThis PR uses the same order for the dllName and its variations.\r\n\r\nWhen the dllName does not contain a suffix, first variations that include a suffix are tried.\r\n\r\nCC @janvorli", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15787", "title": "Replace some ETW_TRACING_CATEGORY_ENABLED checks with ETW_EVENT_ENABLED", "body": "Contributes to https://github.com/dotnet/coreclr/issues/14327\r\n\r\n@brianrob this is replacing some ewt checks. Does this match with what you suggested here https://github.com/dotnet/coreclr/issues/14327#issuecomment-347647106?", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ufcpp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15911", "title": "CharUnicodeInfo.GetUnicodeCategory(int codePoint)", "body": "https://github.com/dotnet/corefx/issues/26173\r\n\r\n- renamed UnicodeCategory.InternalGetUnicodeCategory to GetUnicodeCategory\r\n- renamed its parameter ch to codePoint\r\n- made it public", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sandreenko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15910", "title": "[WIP][R2R] add a virtualStubParamInfo as an argument", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dotnet-bot": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15909", "title": "Mirror changes from dotnet/corefx", "body": "This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianrob": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15907", "title": "Convert BulkTypeLogger Allocations From Stack to Heap", "body": "This solves an issue observed on Linux in which enabling tracing causes a stack overflow to occur and crash the process.  The underlying cause is that when tracing is on (COMPlus_EnableEventLog=1), allocation logging machinery is enabled which results in a BulkTypeEventLogger object being created on the stack. \r\n BulkTypeEventLogger creates a stack-allocated 64KB buffer which represents the raw event - 64KB is the max event size.  On threads where stack space is constrained, or the stack size is small, this can result in a stack overflow.\r\n\r\nTo make this stack overflow much less likely to happen, we can allocate the buffer on the heap.  The rest of the BulkTypeEventLogger object is significantly smaller (less than 1KB).", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72595168", "body": "Looks good to me as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72595168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "swgillespie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15905", "title": "[Local GC] [WIP] FEATURE_EVENT_TRACE 2/n: Scaffolding for emitting known events", "body": "This PR is marked WIP because it depends on https://github.com/dotnet/coreclr/pull/15873. This branch is branched off of `swgillespie/event-spec-foundation` so you can ignore the first two commits of this PR (they are from https://github.com/dotnet/coreclr/pull/15873).\r\n\r\nThis PR implements the [Firing Events section of the standalone GC eventing spec](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md#firing-events) and verifies that it works by porting the `GCAllocationTick_V3` event to travel across the GC/EE interface.\r\n\r\nThis PR elaborates on a couple of ideas from the spec:\r\n\r\n1. Events known to the GC are listed in the new `src\\gc\\gcevents.def` file, where the `KNOWN_EVENT` xmacro is used to describe the event, its provider, its level, and its keyword set, like here: https://github.com/swgillespie/coreclr/blob/557fcb67cd64ba845732c22ea0c39201ea236781/src/gc/gcevents.def#L8\r\n2. From the information supplied in the `KNOWN_EVENT` xmacro, an \"event descriptor\" is generated that describes the known event - it's name, provider, level, and keywords. The `EVENT_ENABLED` macro can be used to query whether or not an event is enabled, like this usage in gc.cpp:\r\n\r\n```c++\r\n            // Unfortunately some of the ETW macros do not check whether the ETW feature is enabled.\r\n            // The ones that do are much less efficient.\r\n            if (EVENT_ENABLED(GCAllocationTick_V3))\r\n            {\r\n                AllocationKind allocation_kind = gen_number == 0 ? AllocationKind_Small : AllocationKind_Large;\r\n                FIRE_EVENT(GCAllocationTick_V3,\r\n                    etw_allocation_running_amount[etw_allocation_index],\r\n                    allocation_kind,\r\n                    heap_number,\r\n                    acontext->alloc_ptr);\r\n            }\r\n```\r\n\r\n3. The `FIRE_EVENT` macro accepts the name of the event and any parameters that the event accepts. `FIRE_EVENT` ultimately fires the event by invoking the GC/EE interface to send the event across the interface boundary.\r\n\r\nI chose not to re-use the existing `FireEtw*Event` and `ETW_EVENT_ENABLED` macros because I am hoping for the upcoming series of changes (porting events to use this new system) to be done incrementally. It would be difficult to be in a \"half and half\" situation where one macro delegates to ETW or `GCEventState` depending on the event. I think that it is very reasonable to convert all usages of `EVENT_ENABLED` and `FIRE_EVENT` to `FireEtw*Event` and `ETW_EVENT_ENABLED` in the future once everything has moved over to the new system.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15873", "title": "[Local GC] FEATURE_EVENT_TRACE 1/n: Tracking Event State", "body": "This PR is the first of several PRs implementing [this design](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md) bringing FEATURE_EVENT_TRACE to standalone GCs. This PR implements the portion of the design that [keeps track of what events are enabled](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md#querying-whether-events-are-enabled).\r\n\r\nThe approach taken in this PR is fundamentally the same as the one described in the design document, with some minor tweaks to `GCEventState`.\r\n\r\nThe `GCEventState` class described in the spec was simplified somewhat, based on some insights I had when experimenting with ETW. There is no need to draw any distinction between enabling\r\nor disabling a provider, since the `EtwCallback` installed by the runtime receives the level and keyword state after applying the delta that a log enabler (e.g. logman) has created. For example, for the following sequence of events:\r\n\r\n```\r\nlogman start trace1 -p {clr-provider-guid} 0x1 0x5 -ets\r\nlogman start trace2 -p {clr-provider-guid} 0x2 0x4 -ets\r\nlogman stop trace1 -ets\r\nlogman stop trace2 -ets\r\n```\r\n\r\n`EtwCallback` is invoked four times, with the following arguments:\r\n\r\n```\r\nEtwCallback(Level=5, Keyword=1, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=5, Keyword=3, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=4, Keyword=2, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=0, Keyword=0, EVENT_CONTROL_CODE_DISABLE_PROVIDER)\r\n```\r\n\r\nWe can pass the level and keyword information verbatim to the GC and no additional logic is\r\nnecessary; the ETW subsystem is already keeping track of which trace client has what level and keyword enabled so the GC doesn't need to do it. The GC doesn't even need to know if a provider\r\nis being enabled or disabled since it can just take the information ETW gives it.\r\n\r\nInstead of having separate `Enable` and `Disable` code paths on `GCEventState`, as written in the spec, this PR has a single `Set` entry point that sets the GC's level and keyword state for a provider to exactly what is given to `Set` as arguments, which in turn comes directly from ETW.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "krwq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15904", "title": "Do not throw IndexOutOfBounds when AM/PM designator is empty", "body": "Fixes: https://github.com/dotnet/coreclr/issues/15896\r\n\r\nCurrently when AM/PM designator happens to be empty we throw IndexOutOfBounds exception.\r\n\r\ntesting in progress", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sywhang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15895", "title": "Fix failfast stacktrace", "body": "This addresses issue #14867, by adding another Environment.FailFast FCall that gets passed in an UINT type that specifies the error source, to print the correct title for stack trace.\r\n\r\nThe stack getting printed twice is also addressed here.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidwrighton": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15889", "title": "[WIP] Enable testing marshalling tests for sequential layout classes", "body": "- These marshal similar to structs, but not identically\r\n  - Cannot be nested\r\n  - Appear to have behavior where it can be passed by value, but target function can modify the output. (I believe this is unreliable, and the test #ifs the changes away\r\n  - Does not support marshalling by reference", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dotnet-maestro-bot": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15882", "title": "Update BuildTools, CoreClr, CoreFx, PgoData to prerelease-02417-06, preview1-26118-03, preview1-26117-03, master-20180118-0047, respectively (master)", "body": "/cc @dotnet/coreclr-auto-update-notify", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15794", "title": "Update CoreClr, CoreFx to servicing-26109-01, servicing-26109-01, respectively (release/2.0.0)", "body": "/cc @dotnet/coreclr-auto-update-notify<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`7ab391c`](https://github.com/dotnet-maestro-bot/coreclr/commits/7ab391cf41a901a6728172c954a8058c5cee27ff) Update CoreClr, CoreFx to servicing-26109-01, servicing-25921-02, respectively\r\n   * :hourglass: **CROSS Check** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/CROSS_check_prtest/533/)\r\n   * :hourglass: **CROSS Check** Triggered. (5/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Tizen armel Cross Debug Build** Triggered. (12/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Cross Debug Build** Triggered. (13/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Cross Release Build** Triggered. (14/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Cross Release Build** Triggered. (15/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu arm Cross Release Build** Triggered. (11/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu arm Cross Release Build** Triggered. (12/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu16.04 arm Cross Debug Build** Triggered. (13/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu16.04 arm Cross Debug Build** Triggered. (14/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Windows_NT arm Cross Debug Build** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/arm_cross_debug_windows_nt_prtest/544/)\r\n   * :hourglass: **Windows_NT arm Cross Debug Build** Triggered. (4/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT arm Cross Release Build** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/arm_cross_release_windows_nt_prtest/543/)\r\n   * :hourglass: **Windows_NT arm Cross Release Build** Triggered. (5/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT arm Cross Release Build** Triggered. (8/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 CoreCLR Perf Tests Correctness** Started. [Details](https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/release_2.0.0/job/perf_perflab_Windows_NT_x64_smoketest_prtest/417/)\r\n   * :hourglass: **Windows_NT x64 CoreCLR Perf Tests Correctness** Triggered. (2/2 on win2012-20170809-elevated) [Details]()\r\n   * :hourglass: **Windows_NT x64 Debug Build and Test** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/debug_windows_nt_prtest/547/)\r\n   * :hourglass: **Windows_NT x64 Debug Build and Test** Triggered. (8/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 Formatting** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x64_windows_nt_formatting_prtest/529/)\r\n   * :hourglass: **Windows_NT x64 Formatting** Triggered. (3/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 Release Priority 1 Build and Test** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x64_release_windows_nt_pri1_prtest/540/)\r\n   * :hourglass: **Windows_NT x64 Release Priority 1 Build and Test** Triggered. (7/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 Release Priority 1 Build and Test** Triggered. (10/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x86 Checked Build and Test** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x86_checked_windows_nt_prtest/532/)\r\n   * :hourglass: **Windows_NT x86 Checked Build and Test** Triggered. (9/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x86 CoreCLR Perf Tests Correctness** Started. [Details](https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/release_2.0.0/job/perf_perflab_Windows_NT_x86_smoketest_prtest/417/)\r\n   * :hourglass: **Windows_NT x86 CoreCLR Perf Tests Correctness** Triggered. (1/2 on win2012-20170809-elevated) [Details]()\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/CROSS_check_prtest/533/)\r\n   * :heavy_check_mark: **Ubuntu x64 Formatting** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x64_ubuntu_formatting_prtest/534/)\r\n\r\n</auto-pr-discard-list></details>", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adiaaida": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15881", "title": "Convert perf.groovy to use run-xunit-perf.py", "body": "Also removes run-xunit-perf.cmd and run-xunit-perf.sh", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdmaclea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15833", "title": "[Arm64] Initial HW intrinsic framework", "body": "This is the basic framework for a table driven ARM64 HW Intrinsic framework\r\n\r\nIt has only been tested for the SIMD add case, but it does work end to end\r\n\r\n@CarolEidt @tannergooding @4creators \r\ncc/ @fiigii @dotnet/jit-contrib ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15798", "title": "[Arm64] Set Instruction set flags", "body": "@CarolEidt @RussKeldorph @dotnet/jit-contrib @dotnet/arm64-contrib PTAL", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wtgodbe": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15831", "title": " Add GetLoadLibrary function for PAL & use in TrackErrorCode", "body": "For https://github.com/dotnet/coreclr/issues/10520\r\n\r\n@danmosemsft PTAL - what's the best way for me to test this locally? Builds are succeeding on Windows & Unix\r\n\r\nCC @karelz ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138184359", "body": "The packages are left there by the publish automation. @karajas can you make the publish job clean this up itself?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138184359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138187051", "body": "What Intermediate Path do you mean? Would that be where the packages get generated in bin/Product/.nuget, or would it be where I want the publish job to leave the packages that it publishes? If it's the second, wouldn't the same problem still be present?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138187051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ahsonkhan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15821", "title": "Port S.N.Vector sources down to corelib", "body": "As part of https://github.com/dotnet/corefx/issues/25182#issuecomment-343614677, moving `Vector<T>` and friends down to CoreLib.\r\n\r\nI didn't copy over the .tt files. Are they necessary at this point?\r\n\r\nWe should attempt to keep these in sync with https://github.com/dotnet/corefx/tree/master/src/System.Numerics.Vectors/src/System/Numerics\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/26266\r\n\r\ncc @jkotas, @KrzysztofCwalina, @safern, @ViktorHofer, @eerhardt ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davmason": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15819", "title": "Debugger api to set a breakpoint on offset 0 of all methods", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jashook": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15813", "title": "Add innerloop tag for pri0 jobs", "body": "Everything that is not innerloop will run priority 1.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maryamariyan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15793", "title": "Adding TrimExcess Implementation to Dictionary", "body": "Issue is: https://github.com/dotnet/corefx/issues/24445\r\nTests and the ref changes are made in a corefx PR separately here dotnet/corefx#26239.\r\n\r\ncc: @danmosemsft @benaadams \r\n\r\nTODO Next in a separate PR:\r\n- Will add EnsureCapacity to SortedSet and HashSet\r\n- Will add TrimExcess to SortedSet\r\n  \r\n  ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ellismg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72291055", "body": "The PR for this change failed, but that's because the Jenkin's system was unable to find the correct ref to build, which I think is a configuration issue on our end.  I am going to merge this anyway.  We'll get a good read of quality from TFS and I've asked @mmitche to take a look at Jenkins when he has a chance.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72291055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72590798", "body": "One small nit, which you can disregard if there's a good reason.  LGTM otherwise.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72590798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9792781", "body": "/cc: @stephentoub \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9792781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mmitche": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72487429", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72487429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72495588", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72495588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72497466", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72497466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72499761", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72499761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72500930", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72500930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72501499", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72501499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72503128", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72503128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72508393", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72508393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72509137", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72509137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521389", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521442", "body": "@dotnet test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521470", "body": "@dotnet test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551687", "body": "@dotnet-bot test this please (odd PDB error in log)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72570766", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72570766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72681697", "body": "Hey that makes an awesome difference.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72681697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72697900", "body": "Don't worry about this, I have a PR about to go out to change the names too.  I have it fixed there.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72697900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "ramarag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72544947", "body": "this has been done as part of my earlier change see - https://github.com/dotnet/coreclr/pull/4\nmore specifically - https://github.com/dotnet/coreclr/pull/4/files#diff-adec353b8bdbfa8c549ed738939291e8R107\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72544947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "gkhanna79": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72547815", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72547815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72548734", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72548734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551049", "body": "@janvorli Can you please review as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551251", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72643120", "body": "@janvorli Please have a look at this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72643120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842240", "body": "Were you able to validate that this fixes the issue?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122074583", "body": "Please elaborate on the fix :) ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122074583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075582", "body": "Thanks - is this issue only in master?\r\n\r\nCC @wtgodbe ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24154818", "body": "I would suggest removing the \"(UPPERCASE_CMAKE_BUILD_TYPE STREQUAL RELWITHDEBINFO)\" from the \"else\" so that the change is inline with what @mathstuf is working upon.\n\nOtherwise, LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24154818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "xyziemba": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72699512", "body": "Thanks. Abandoning this PR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72699512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24184261", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24184261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jaredpar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72706972", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72706972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "AlexGhiondea": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707133", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "Fireboyd78": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9600809", "body": "Shouldn't that say \"Failed to authenticate\" instead? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9600809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "F03SD": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9630695", "body": "ussles CoreFX fork . e.g microsoft is su*k\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9630695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "praeclarum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9635644", "body": "Why the bytes?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9635644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9637959", "body": "Thank you. Yes I caught the discussion just 5 mins after posting this comment. Sad to see ugly code, happy to know it's fast. :-)\n\nSent from my iPhone\n\n> On Feb 7, 2015, at 3:08 AM, Jan Kotas notifications@github.com wrote:\n> \n> The writebarriers are patched by WriteBarrierManager that assumes certain layout. The problem is that the Apple assembler does not use short jump encoding that throws the layout off. We had an extensive discussion about the best solution during review of this PR.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9637959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "steipete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636807", "body": "The second semicolon can be removed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mathstuf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9639111", "body": "FWIW, this doesn't work as intended (or it should be `NOT WIN32`). `CMAKE_BUILD_TYPE` isn't defined for Visual Studio. See #101.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9639111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771947", "body": "So this won't work portably.  lib unwind declares the unw_context_t as:\n\nstruct unw_context_t { uint64_t data[128]; };\n\nWe can just use unw_set_reg here tho?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771951", "body": "UNW_X86_64_RIP and UNW_X86_64_RSP are not part of the base API.  We should use:\n\nUNW_REG_IP\nUNW_REG_SP\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771958", "body": "This API also isn't available on mac.  From the lower context it looks like we're trying to see a register spill to a stack slot, and ensure we load from there instead.\n\nShouldn't unw_get_reg take care of this internally?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785451", "body": "Fixed in d40d797\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786163", "body": "Yes, thats already fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786178", "body": "Good catch -- fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968269", "body": "Is this tested on OS X?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968569", "body": "So this won't work out of the box on OSX.\n\nYou have message(ERROR ...), and the LLDB headers don't exist, and the probing will fail by default, since find_library doesn't look in the private frameworks.\n\nCould you please rework it so that the message(ERROR ...) cases are message(WARNING ...) and fail to set ENABLE_SOSPLUGIN until we figure out the long term strategy for lldb on OS X?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968576", "body": "Also, you removed the $ENV{} probe fallbacks, which will always be required on OS X dues to what I said above, can you please restore them as a fallback path?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968625", "body": "Oh I missed the build.sh changes, they might work for the ENV{} fallback case.  The ERROR message still remains tho :+1: \n\nI'll test the build.sh flags in a bit -- need to head to the airport now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968649", "body": "Just checked quick, the build.sh env->cmake defines is not working :(\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pgavlin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968287", "body": "It isn't--I'm pretty sure that it will work, but I don't have an OS X machine with which to test.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968616", "body": "I had hoped that would be handled by the changes in build.sh. I'll look into this a bit more (and see if I can scrounge up a Mac to test with :)).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mikedn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10417448", "body": "@cmckinsey Unfortunately this change accidentally reverted the fix for the `isinst` null check \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10417448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10581653", "body": ":clap: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10581653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jehovahgodoath": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676803", "body": "I am going to be able to do this for the next couple of months after that I am going on a new phone and email address to receive your Electronic mail message and any attachments are believed, I will have more to say about this topic and I will be able to make sure that you have received my email address to use. Please contact me for more information on every conceivable ability I just want us to be able to get to the next step for more options available and i can provide immediate access control over their own personal email account for all types of transactions for more info available, please immediately notify me by my Android app, and I am sure we can provide any additional pictures and videos to get some more details about how much is going on and off, I'm gonna need some advice from you guys. I'll post comments and ideas, please follow these instructions below or copy this message and notify sender immediately following link from my Android app store and share my thoughts exactly as well but I'm pretty flexible with my life and I have been trying to figure things out there that will allow you to create opened access to all my life and I am not going to try to avoid them and let me explain why I haven't done anything to stop you from receiving control over my IP address and phone calls over your computers and mobile devices and I was wondering why I am being tracked and you know you can use my phone number for future projects,  I went to my Google dashboard history. I'm sorry to have taken command.  But I gave you back control by merging and by letting you have my email address, well I am going to bed. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676807", "body": "Hello\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sharwell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/29564159", "body": ":bulb: The new exclusion above can _replace_ the items currently listed under `Roslyn stuff`. Visual Studio \"14\" CTPs used to create a folder **{SolutionName}.sln.ide**, but starting with CTP 6 it creates a folder just called **.vs**.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/29564159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "adityamandaleeka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31189736", "body": "I'd move this into the CMake section above.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31189736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "weshaggard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507287", "body": "Why is this needed?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94508055", "body": "I don't even know where those are coming from. @karajas do you think this is a side-effect of your build tools change?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94508055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183209", "body": "No longer needed. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183277", "body": "Why is this tmp folder needed?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138186117", "body": "I believe you can pass the intermediate path to the task to avoid this. https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Feed/PushToBlobFeed.cs#L31 I suggest doing that.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138186117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138208603", "body": "IndexDirectory is essentially the temp directory where index files get written so you can pass it a path under intermediate root to keep those files isolated out of the source tree. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138208603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139015722", "body": "I don't you passing in the IndexDirectory yet. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139015722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139039055", "body": "This ignore shouldn't be needed any longer. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139039055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149804446", "body": "Updating. Thanks Davis. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149804446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "SedarG": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94509548", "body": "It's somewhat unrelated with this change. build.sh creates localpkg folder under src (for reasons that I didn't dig into). It does so even on the baseline. It's producing an annoying `git status`, and even more annoying when you try to do `git add -A`. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94509548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "karajas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94514279", "body": "Possibly because of https://github.com/dotnet/buildtools/blob/08573119630248c2ee1b636ceaf3ca8fc8a2ecda/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L69, this would in the bin dir in corefx and hence not required to be added in gitignore.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94514279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "chcosta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842904", "body": "This is a known issue which was fixed in CoreFx.  I haven't done any explicit validation for this in CoreClr though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842904/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87898653", "body": "I've validated on a Linux Vm running Fedora 23, that this fixes the issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87898653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075352", "body": "https://github.com/dotnet/buildtools/pull/1572\r\n\r\nCoreClr is the first repo to consume BuildTools after a recent refactoring and is the only repo making use of BlobNamePrefix to trim down to a specific filename prefix (other repos are either not using BlobNamePrefix or use it to trim to a specific folder within a container).  The fix made to buildtools is to ensure that we trim folder structure on a folder level, and still maintain compatibility with how other repo's are using the task.  \r\n\r\nI've validated this locally for common coreclr, corefx, and core-setup usage of the downloadfromazure task.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122077152", "body": "I believe this is the only actionable issue.  If there are other issues, then they are hiding behind this one.  I noticed another failure, but it appeared to be network related, or a similar infrastructure problem.  Next, I'm going to start looking at the cleanup task to determine if we have a problem there.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122077152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dagood": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149430663", "body": "This doesn't work for me locally. In init-tools.log:\r\n\r\n```\r\nERROR: An error occured when running: '\"C:\\git\\coreclr\\Tools\\dotnetcli\\dotnet.exe\" restore \"C:\\git\\coreclr\\packages\\microsoft.dotnet.buildtools\\2.0.0-servicing-02104-04\\lib\\\\tool-runtime\\project.json\"'. Please check above for more details.\r\n```\r\n\r\nPretty sure it's because this version doesn't include https://github.com/dotnet/buildtools/pull/1744. (And CLI 2.0.0 `--version` returns **1**5.5.0-preview-007044.) Updating to BuildTools 2.0.0-servicing-02201-03 (latest) works for me.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149430663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jcagme": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149571618", "body": "Just make sure we update this to the version that has the new download logic", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149571618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/150698189", "body": "Latest version which includes the parallel download of files from Azure is 2.0.0-servicing-02213-03", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/150698189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/151271387", "body": "Version with added logging is 2.0.0-servicing-02215-02", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/151271387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "shahid-pk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24232415", "body": "i think here also should be a message like detected darwin.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24232415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}