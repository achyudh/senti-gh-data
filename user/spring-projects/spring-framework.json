{"_default": {"1": {"jhoeller": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2096676b3f40e357d689d46b5c929f38448cb882", "message": "Upgrade to Apache Johnzon 1.1.7 and JRuby 9.1.16"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d4a8f76bf9c73598662f860f86b6c3674c254b40", "message": "Consistent volatile access to running flag in Lifecycle implementations\n\nIssue: SPR-16488"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/58011f71e9764a6be762101b708847d1f6de9437", "message": "Consistent assertions for template method result vs servlet registration"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c4e9ce8d0ead9a02679ebf262fd8d57b7658619c", "message": "Clarified repeatable PropertySource annotation vs use as meta-annotation\n\nIssue: SPR-16592"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3988dd9ebb976dce8d79ba31bcc515c5e62154de", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/356ef45e99c9d1e409f3d04330c44e43d2b45811", "message": "ConcurrentReferenceHashMap properly handles getOrDefault for null values\n\nIssue: SPR-16584"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41730220f4e5ef89024f3fbcf20b1f8362a56565", "message": "InterceptingClientHttpRequest adapts to StreamingHttpOutputMessage\n\nIssue: SPR-16582"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/499128dae748ff5643d27b72b72bd830eb6b1305", "message": "URIEditor uses straight ClassPathResource.getURI() access\n\nIssue: SPR-16581"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99bb97388e23599c81b730fe6b69adf9ebbd7490", "message": "Upgrade to Tomcat 8.5.29 and Selenium 3.11"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/04a8f817108c2d3bce636b36ba869c858d152ba0", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/967a2ef2d20b7bc6f6bf79463ee15d7c3e2ec607", "message": "Validate Class attributes as well as Class array attributes\n\nIssue: SPR-16564"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50e980c02f0dba610303e064289be0420d1f6ce1", "message": "Validate declared annotations before deciding between reflection and ASM\n\nIssue: SPR-16564"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1b1a69a144f657d46c752f1c017f64d3302891d2", "message": "SimpleAliasRegistry fully synchronizes registerAlias and removeAlias\n\nIssue: SPR-16577"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2a3f90dc7b1a3a071af97e39f7c8a8bbe144dffe", "message": "Upgrade to Hibernate ORM 5.2.15 and Hibernate Validator 6.0.8"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/df8061494cec95d0b61cbac5dfbb04e58deba9d5", "message": "TransactionTemplate equality for same transaction manager only\n\nIssue: SPR-16572"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf74b1b8bea86194a64bb6b1a8b8350fb65ea827", "message": "Consistent result synchronization in WebAsyncManager\n\nIssue: SPR-16571"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50253f670ef9cf894fe8c077d4d58c562951cd41", "message": "Quick access to volatile field (full synchronization only for lazy init)\n\nIssue: SPR-16570"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/139dc1d373cc6e32ee6b516504064a2c87e0008a", "message": "Polishing (collapsed if checks, consistent downcasts, refined javadoc)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a02aafe5fefacc57ab0a5707fb9afa3056d2ab09", "message": "Regular getBeanInfo call for interfaces (enabling Introspector's cache)\n\nIssue: SPR-16568"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/20287e0cb07f557634efe9366d9115525e70cc80", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/934a995acb724fa5cd359d7d8a8d3e1b10c45ca8", "message": "Strong recommendation for OpenPDF 1.0.5 instead of iText 2.1.7\n\nIssue: SPR-16107\n\n(cherry picked from commit b70d400)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f57fcdee3c29707ef5e5fd7570a51a06432684da", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb9c43dcbcefee27509d0e1707ed67ca699f6fe1", "message": "Reliably expose nested cause exception message for PersistenceException\n\nIssue: SPR-16559"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/90d768bb7f36819893db968bd87daba81abbffb2", "message": "Overloaded convenience setters: setCacheControl(CacheControl), setExpires(ZonedDateTime)\n\nIssue: SPR-16562"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/82515a3f01190a9c401ab257a40f320b811d04b5", "message": "Consistent incrementer arrangement for PostgreSQL, DB2 and SAP HANA\n\nIncludes related polishing in core.metadata and datasource.embedded and a revision of the corresponding database definitions in sql-error-codes.\n\nIssue: SPR-16558"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a4f2c2f0810416b25165545988690d84b55347c", "message": "Drop version check in isGetGeneratedKeysSimulated (for PostgreSQL 10)\n\nIssue: SPR-16556"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4f8c4546f1eccdc05247b8972935f0ad8c99c97c", "message": "Upgrade to SnakeYAML 1.20 and Selenium 3.10"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0cc80063dfa15cd7898855e5c98c416aca5b258", "message": "Concurrency and exception message refinements for test transactions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ff818d56a484cff403bb41668aeddea6b47c8fa9", "message": "Correct description for class-level @Transactional with AspectJ\n\nIncludes proper quoting of AspectJ expressions in Asciidoc.\n\nIssue: SPR-16552\nIssue: SPR-16549"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c543368aade1914e5a7c553d0cd414437b992bc1", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cec7204fca11dfe9b3f5961da97b55a2db719c8a", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2e164787dbf78d480da1000511bf0f93387c384f", "message": "Upgrade to Groovy 2.4.14 and Undertow 1.4.23"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd4f0935c5756358d9857c0093d0944e47a58629", "message": "Revised deprecation markers"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf1d162e1cf494ac1138be175894c3ee7c704d09", "message": "Upgrade to Kotlin 1.2.30"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fa670dd07d630e94ae1b0e7487906adf79f31749", "message": "Indexer enforces target descriptor only after non-null target check\n\nIssue: SPR-16544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bfddbbe7314c9a9ed74d1ce75f2280c055e26c2c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/478162741df63d5516fa7e730c977472867fde7d", "message": "WebApplicationContextFacesELResolver.isReadOnly returns true for WAC\n\nIssue: SPR-16543"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f7ad0304c6362718ed8e97eb4952a794695fbea", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a19d4deb24f65a4fb238575a034ffcf33bf2a827", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33cd160861e46f06638945176ac758c0a9c123bf", "message": "Upgrade to Reactor Bismuth SR7, Hibernate ORM 5.2.14, Common Annotations 1.3.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9962df65272e6208676b1e5cdd944dcfa974fe31", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95aad9cdc2eb3a9811d117a97bb1e96cf9787017", "message": "Interrupt listener invoker threads on shutdown (after initial wait step)\n\nIssue: SPR-16536"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6663d0ff0775465ea9b3e4f5931a07290207caeb", "message": "Support for ResolvableType.getType().getTypeName() on Java 8\n\nIssue: SPR-16535"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c2d5ca9811683409ed44dfc6371189bc5f8c9cd3", "message": "Proper nullable return declaration for AbstractValueAdaptingCache.lookup\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7d89de06e396d2d8c135b44552865c3703b9fc73", "message": "Enforce GMT timezone for testBindInstantFromJavaUtilDate\n\nIssue: SPR-16534"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/15c97b753ef32cd4bf000148f9dddbfc89ddab47", "message": "Revised URI building in http.server (consistently use raw attributes)\n\nIssue: SPR-16434"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2a379e099cc19f002b5513c7d6ea0100c18b5591", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8a56cd0e8b05ce1517b346f654af5ff707c54282", "message": "Revised URI building in http.server (avoid package cycle with web.util)\n\nIssue: SPR-16434"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3732032ee44009ed14dd5eca8140f57f4a56632f", "message": "Customizable PreparedStatementCreator in NamedParameterJdbcTemplate\n\nIssue: SPR-16050"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ef9568c06ed073e3beb8e8c4375a711ff249480", "message": "Upgrade to OkHttp 3.10 (as well as RxJava 2.1.10 and Caffeine 2.6.2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e554223349de6b56f692d8a9cc610521ecc2090", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/01d9475bcc4ad615649fbd358ace0dcc31bac0ef", "message": "Turn registered controller classes into controller instances on the fly\n\nIssue: SPR-16520"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/85984f3b7270a9ca6029c0b60c8b4941b4bb0321", "message": "Mark Castor tests as deprecated\n\nIssue: SPR-16219"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f58d9ede03ac3817fa45d3baace3bca9a01202d", "message": "Efficiently merge bean name result with parent result (possibly empty)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3531c104b061dbad021fef239eae5ac2cc2f0380", "message": "Prefer Collections.addAll call with array over Set.addAll(Arrays.asList)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eeecbaef2c88db5a4d08b93b13505d694bfeaa51", "message": "Gson/JsonbHttpMessageConverter keeps output stream open (for SseEmitter)\n\nIssue: SPR-16529"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/578c078082f79ca29b8b063928f0609e01c16cb7", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f740527c14b2bc876777d55248cb4b04bc688a6", "message": "Deprecated StringUtils.mergeStringArrays"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1278459ad536126a7c707e4b69a0a359f54bb556", "message": "ReactorHttpHandlerAdapter logs bad request at warn level only\n\nIssue: SPR-16524"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d6483873f97f92300d91b00cbbbb7f1821dc026", "message": "Upgrade to Netty 4.1.22"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0939492966ca45a6a0c03c0c657137b20ad7d7ad", "message": "Upgrade to Apache Johnzon 1.1.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a5cbf5fe246e362c939db006cb44793b22bdc741", "message": "Consistent use of Collection.toArray with zero-sized array argument\n\nIncludes consistent use of ClassUtils.toClassArray (as non-null variant)\n\nIssue: SPR-16523"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f316f6a46a86030dd7e6797d8fdc575a908cf106", "message": "Remove unnecessary assertions from annotation resolution code paths\n\nIssue: SPR-16514"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3ba858213f50edd4ce7e3fe743f81624bb39ca71", "message": "Upgrade to RxJava 1.3.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0de36d2883124ef52ea1040a3e0022dcaa57f4e2", "message": "Consistent HttpMethod identity comparisons"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ea233ac5668c63f02decf0162f5811eca7f0fc6", "message": "Upgrade to Reactor Bismuth SR6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d7cab23e6d60de4d5d8d940d57b0b24e974bc77d", "message": "Consistent use of StringUtils.toStringArray\n\n(cherry picked from commit 6d11b40)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9d08bff4199adb42f138076cc91a3990c0515c4", "message": "DefaultListableBeanFactory only calls getPriority for non-null instance\n\nIssue: SPR-16508"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8d3264f680018ccbec6a40253b477283aa3a7e6e", "message": "Prefer List.sort(Comparator) over Collections.sort(List, Comparator)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b35274f5a725181f1253426b442cb63b50c58fa6", "message": "WebSocket callbacks need to remain inner classes (retaining generics)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd8a1bdb8bcf3fb903c7c88bdfd5c49c194f0c65", "message": "AcceptHeaderLocaleContextResolver leniently handles invalid header value\n\nAlso falls back to language-only match among its supported locales now.\n\nIssue: SPR-16500\nIssue: SPR-16457"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7baf33fea0aa55251c549ef36ad32abddab8fcd9", "message": "Avoid multiple warnings related to jackson-module-kotlin\n\nIssue: SPR-16497"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d7573262e604b5c8e58cd97309bd2486c478016", "message": "FormTag skips rendering of hidden fields in case of empty Map\n\nIssue: SPR-16498"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de7ff556d994ca9ebc6a5bd12e3084d71cd97538", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95f7180298337ec9f140d4f6bb81ffd0e0e1dff2", "message": "Explicit documentation notes on transacted sessions vs AUTO_ACKNOWLEDGE\n\nIssue: SPR-16487"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3b810f3544ce9de0783336580c1d818bf43cd8a2", "message": "Consistent Class array vs vararg declarations (and related polishing)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/46cbdff5c3c2ad896cb9747b26726211b8787484", "message": "Consistent ControllerAdvice applicability against user-declared class\n\nIssue: SPR-16496"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/766e6028d7fa648ce83113d9ee6325b1ac90b50e", "message": "Defensively handle DatabaseMetaData.getConnection() returning null\n\nIssue: SPR-16495"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99662bc702ee90a7ca34a84166ca50aaabff9646", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37609e4eded86b0dd01763e93b5cb38774cc3f8d", "message": "Object/FieldError exposes source object through unwrap/contains methods\n\nIssue: SPR-16372"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0c78c9c6f7f03b0583a86b5742fa8d7bff85344a", "message": "Refined javadoc and exception messages"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3cee45f30c95d1c17acc101434f586400ca9bae", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9aede3727504c02c48cd0741984cd0e9931358a", "message": "Upgrade to Tomcat 8.5.28 (and Selenium HtmlUnit Driver 2.29.2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b449928691553ba791adf20850e9179730b4b3a2", "message": "Avoid unused arguments for internal delegates"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3c631f8ea063262c6b496d7bc2732fcb6a8cb957", "message": "SubProtocolWebSocketHandler closes sessions outside of lifecycle monitor\n\nIssue: SPR-16488"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a5a069c5b169e695cc66308741ce13b7f540cb30", "message": "Upgrade to JavaMail 1.6.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b089ded5b04d9565401671d46f8264ae051c9548", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d5cabca2f7495583b8731e8cdf41b5b9501ac210", "message": "Internal adaptation to Deque semantics"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3cbb2b76163047b062130f52ebc02f24c019bfe2", "message": "Upgrade to Hibernate ORM 5.1.12 (for integration tests)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d00e1c5e4fbf0c9affa1fa8314be172e4666e5a9", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b5bd977d9a4dd1f21ca2d1db6626fd5dbb68ad24", "message": "Revised assertion refactoring in AbstractExpressionTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91965500cbc7f683c9943cb10cdb0c312ff96758", "message": "Upgrade to TestNG 6.14.2 and Selenium 3.9.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55ee25065976780b58cbce8078a976851f1dbbaf", "message": "Object/FieldError stores source object as transient (not serialized)\n\nIssue: SPR-16372"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/39201adca461f374f1ee4328c75354f559fb301e", "message": "Consistent handling of InterruptedException\n\nIssue: SPR-16479"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9bb7fcd9971b7785622dfee359fcdf14873ffb92", "message": "Object/FieldError provides access to source object (exception/violation)\n\nIssue: SPR-16372"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e873b18f4354a5f7bd60f92c784f0157da541fd3", "message": "ResolvableType.forClassWithGenerics retains original TypeVariables\n\nIssue: SPR-16456"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a639535f33ffb009ec0477fac86cac5116c63371", "message": "Upgrade to Netty 4.1.21"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c8b860c4b84fa64743ac28544151a37ab1c6b679", "message": "Streamlined BeanFactory access within DefaultLifecycleProcessor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc93f99f539afb812a839e48ef9160b92da913b6", "message": "Relaxed procedure existence check on Oracle (for non-exposed synonyms)\n\nIssue: SPR-16478"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4318710b9b9af717a76093a62e748832d944fda4", "message": "Upgrade to Hibernate 5.2.13"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/285b01fc795a8c90561900eb655b5fc9067ea172", "message": "Test with all-negated profile condition\n\nIssue: SPR-16465"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac7a6993567fcd2c2935f73129b3936409eebf60", "message": "NamedParameterUtils.isParameterSeparator checks for non-ASCII characters\n\nIssue: SPR-16472"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41a4bdea55dd3cdbbb7e73374017b4a2bfa7fb36", "message": "Upgrade to Kotlin 1.2.21"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c813a366b97f5c4125d5443de0cea9eeb6b7d47", "message": "Consistent use of @throws instead of @exception"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ac117ff270ae9b95f6fc00cf01e8145ec7bb7a4", "message": "Explicit notes on isolation level handling in participating transactions\n\nIssue: SPR-16463"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/817a8369605766b44ecd829f29dd393d602cc026", "message": "Consistent object type exposure for JSON rendering (workaround for Gson)\n\nIssue: SPR-16461"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cfe7ff1c819b3b6d624ca524b489faab099ba2dd", "message": "MimeType.compareTo uses case-insensitive Charset (analogous to equals)\n\nIssue: SPR-16458"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4dc964544ff98fbe1a9bb53864bc5f1525107655", "message": "AcceptHeaderLocaleResolver falls back to language-only match among its supported locales\n\nIssue: SPR-16457"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c5a33d62dd475626ddd0dab3132be20878995cea", "message": "TypeVariablesVariableResolver compares variables by full equality again\n\nIssue: SPR-16456"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30f6e447d5abcb44aa88cd11619fbe3524ea1c5c", "message": "TypeVariablesVariableResolver compares variables by name\n\nIssue: SPR-16456"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3e21ec737938ea3a412d9027c9f6d6c0c780ba7", "message": "MockHttpServletRequest leniently handles invalid Accept-Language header\n\nIssue: SPR-16454"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f96827ade8f2bb0f86dd8abf339a85ca30f4e05", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a1cc9ced789a73e34b153f5eff76267bfdf1f87", "message": "Constructor-provided field values get recorded for failed binding result\n\nAlso, TypeMismatchExceptions get registered via BindingErrorProcessor.\n\nIssue: SPR-16449"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c069f6cb1a58ea0861200e2a70fda6dde0ce70a", "message": "Avoid String concatenation for not-null assertion in BeanProperty/DirectFieldBindingResult\n\nIssue: SPR-16455"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6ecfcf9ecf263e9226493e26abbe632f3b838f6", "message": "CachingConnectionFactory makes its Session caching inactive during reset\n\nIssue: SPR-16450"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c7f60d17998c7791f1acd4d31a92b2f5bb3f6bff", "message": "SchedulerFactoryBean always ignores local factory settings in case of an external SchedulerFactory instance (expecting it to be fully initialized)\n\nThis commit includes various javadoc fixes and related refinements.\n\nIssue: SPR-16439"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd57335e46bb91accb82f64eaa122ec78184075a", "message": "SchedulerFactoryBean ignores local factory settings in case of external SchedulerFactory instance (unless it extends from StdSchedulerFactory)\n\nIssue: SPR-16439"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/857a5b03b76cb44e1873abc449a14fb8f5055ac5", "message": "SchedulerFactoryBean accepts external Quartz SchedulerFactory instance\n\nIssue: SPR-16439"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/637e09f9954fd0324a4bfddbc5702d65e6b48315", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef2e16912daf0e4ca2ed00c0de32ea3b84991b32", "message": "Formatting support for java.time.Year and java.time.Month\n\nIssue: SPR-16437"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/89d2bd954ab99cc4ad93ccb15f632693675ef712", "message": "Properly analyze Java 9 class cast messages for lambda event listeners\n\nIssue: SPR-16435"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8d42888476e892dfa1b099684c9a381bbd26f916", "message": "Upgrade to RxJava 1.3.5 and WebJars Locator 0.35\n\nIncludes Rhino 1.7.8 and JRuby 9.1.15 as well."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7772b914c694b5b16d6e9c9f56acf7b03b47f9d4", "message": "Deep BeanCurrentlyInCreationException check in getTypeForFactoryBean\n\nIssue: SPR-16427"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e1fa65a37c36a9d81ee6f2f4eeb5e51ae1145a49", "message": "Notes about HibernateJpaVendorAdapter settings vs native Hibernate rules\n\nIssue: SPR-16428"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4e194c3fbe472261051811fee1c3a4389c782aef", "message": "Deprecate outdated HibernateTemplate operations in favor of lambdas\n\nIssue: SPR-16426"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e734d83d5c6351aa17c42922a0a667bb838552b", "message": "@EnableAspectJAutoProxy: per application context, requires aspectjweaver\n\nIssue: SPR-14753\nIssue: SPR-15801"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37ab8a700bd790ed9428a0c707ded7766f674772", "message": "Doc: no \"useCodeAsDefaultMessage\" for setValidationMessageSource\n\nIssue: SPR-15986"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e49198d49fa235186f10817dd93bbee53950ddb4", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13c735442cc126ba2cc2c8b7518f6246afffc6b3", "message": "@Scheduled supports java.time.Duration format for its delay attributes\n\nIssue: SPR-15455"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef3f93e84aa75ae5c70aff0c4a42dc6e3bd55498", "message": "Language tag parsing support in StringUtils and StringToLocaleConverter\n\nIssue: SPR-16188"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c6b0d85a7c1fa28ce46bcc7c87ab6c0afaeb276f", "message": "Consistent available() support in DelegatingServletInputStream\n\nIssue: SPR-16416"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf100d4d039e78d4e6c2d3683d8ec51759af4ec5", "message": "AbstractClientSockJsSession.close propagates IOException from disconnect\n\nIssue: SPR-16415"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8e2be91353ae64e4cbfadc427a058595f504fb1f", "message": "Fine-tuned logging of WebSocket close exceptions\n\nIssue: SPR-16409"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9ef0465c34992da6ebb5394e3e9fc2013fd2d91d", "message": "Upgrade to Jackson 2.9.4 and RxJava 2.1.9"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e6f8df0a8ad0aed9046884cb06313ba7165feae", "message": "ServletServerHttpRequest.getURI() ignores malformed query string\n\nThe resolved URI instance is also being cached now. This should not make a difference in a real Servlet environment but does affect tests which assumed they could modify an HttpServletRequest path behind a pre-created ServletServerHttpRequest instance. Our WebSocket test base class has been revised accordingly, re-creating the ServletServerHttpRequest in such a case.\n\nIssue: SPR-16414"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91e6274b7d0fd13ce94e793f514841f12478f67f", "message": "Upgrade to Apache HttpClient 4.5.5 and Tomcat 8.5.27"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61579ffe7b8dc60c69224b71073da4255012311b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d0e62ef68f3ed465b31d035c2588cf3942a8b2f", "message": "Javadoc format and related polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3dd6c19c6db60809a3736f3d932aa429c4d2b03c", "message": "Upgrade to Netty 4.1.20"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b2ce98e881d687dbddbf3fdf416aa509d61fa1dc", "message": "Upgrade to CGLIB 3.2.6\n\nIssue: SPR-16267"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/395c9bd723eb89534d62e21d665541bea318576a", "message": "Consistently call HttpURLConnection.setFixedLengthStreamingMode(long)\n\nIssue: SPR-16404"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/572c6687262aa1fb2e15e9ed6b74f1e688c170c2", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/40127bd9adde6f44963c47edd3ed57c623980c26", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4c7414833beacab66957c12df52bffe58df60709", "message": "ResolvableType returns clone for cached state with original local source\n\nIssue: SPR-16210"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea5f8f5a7c2ad8053e8cf38fbc3d326abc1d3958", "message": "Consistently handle NoClassDefFoundError in BeanUtils and related places\n\nIssue: SPR-16369"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/214576673af42928b0f8271e5b12e36094213ed0", "message": "Proper NoClassDefFoundError check against BeanUtils.instantiateClass\n\nIssue: SPR-16369"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/32b427992962f848820b6af998268caeff6e7e2f", "message": "Upgrade to Kotlin 1.2.20 (and Undertow 1.4.22)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/65a167f7fd902b587fba49116203bd8836920a15", "message": "JmsListenerAnnotationBeanPostProcessor properly deals with nested proxies\n\nIssue: SPR-16196"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0270808b3c02b97d68f703a1ba01016b315fbe22", "message": "Upgrade to EclipseLink 2.7.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b160f93495f762b1f59519b66c3e07fe6bf387fd", "message": "CacheProxyFactoryBean exposes all relevant CacheInterceptor callbacks\n\nIssue: SPR-16295"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44fd2d96cc0af01266b7af8eeefa7a524ff6f0ac", "message": "Restore original separator set (but keep new isParameterSeparator impl)\n\nIssue: SPR-16340"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9623cdec4883e134c2691cec56c39e59e1b4b80a", "message": "Functional response builders allow for non-standard HTTP status codes\n\nIssue: SPR-16366"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4c9ed0d87edc23a49dcc84499246c80a2070345d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/06e6386dc9d99498930314927cbaecd2a0766093", "message": "CollectionUtils.lastElement for common Set/List extraction\n\nIssue: SPR-16374"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13a8f90e08c7e832e8a3f9b9cfe9fd2578e9f7cb", "message": "ScheduledAnnotationBeanPostProcessor properly deals with nested proxies\n\nIssue: SPR-16196"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a15975d94d104a1c09130fa9a6538c3d8544d9f3", "message": "Log non-loadable TestExecutionListener classes at debug level only\n\nIssue: SPR-16369"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/93f645800b09917be14b0f2a0cf614f495b87c93", "message": "Test for non-equality after URI normalization\n\nIssue: SPR-16364"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/347c2daa2c83f061bb53e089e4b64e5ef031d5c1", "message": "Test for multiple interfaces at BridgeMethodResolver level\n\nIssue: SPR-16288"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8f6d3feaa0280261497042a9c2bc746d2d7f2f68", "message": "Tests for non-required MultipartFile parameters\n\nIssue: SPR-16329"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/121f9e3734d8998e62c65cb7f230cd88680888b6", "message": "BridgeMethodResolver properly resolves all declared interfaces\n\nIssue: SPR-16288"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c8bdb3c60248c3c8940f8d5ff9755f068d9d8450", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e43439c6c336888917fd99c937e8abe7f4ae41ce", "message": "SqlParameterSource interface exposes parameter names\n\nIncludes default implementations of getSqlType and getTypeName.\n\nIssue: SPR-16361"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b2322e58d99888acdca7fad0dba6a43323675e8b", "message": "Support for PostgreSQL array syntax\n\nIncludes efficient separator determination.\n\nIssue: SPR-16340"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45828cb934174479a230a10bb5d5b64d0d56867b", "message": "Check BeanInfoFactory for interface introspection as well\n\nIssue: SPR-16322"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73cad470e5b16603eb19023f7d87f9e9ad4a8b0c", "message": "Upgrade to HtmlUnit 2.29 and Selenium 3.8.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4adc820714bc363b909a2107e57069aadb21f757", "message": "Warning instead of error for non-present type filter class\n\nIssue: SPR-16356"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/72590dbb21048245e0af2ea507e7b0896330e89d", "message": "CachingConnectionFactory does not cache producer for temporary queue/topic\n\nIssue: SPR-16353"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7a55d932f96c69d38bed767d099fd4c8ad5e847e", "message": "Build against OpenPDF 1.0.5 instead of outdated iText 2.1.7\n\nIssue: SPR-16352"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a57e26d76bf6263098785bcc050e4bf7c29212c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6191f605736aaeafd567cf8b53afab02aac8e78", "message": "Direct reference to JPA 2.1 SynchronizationType enum\n\nIssue: SPR-13481"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d187cbce73cf8d84a2d95b96f0d4e52a94be84f4", "message": "LoadTimeWeaver detection differentiates between WebSphere and Liberty\n\nIssue SPR-16248"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6a1fe0b1d06efe894a035451b733a3da3b0b1b45", "message": "FunctionReference's method field is volatile\n\nIssue: SPR-16255"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0a06bce3a6aae37c154e18615de9ef2ca25b3cd9", "message": "Relaxed BeanFactory assertion in resolveInterceptorNames\n\nIssue: SPR-16347"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/977550f9560f6ce7670aae883261f412fbba02f4", "message": "Properly handle null bean instance in getLifecycleBeans\n\nIssue: SPR-16343"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/18d90ec14046c6b6c8d6e4bd1f6535df5fb46d06", "message": "Properly handle null FactoryBean instance\n\nIssue: SPR-16250"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3e0f4dd912db2b4244a116b4d36f17dc4dbb0c8", "message": "Consider enum subclasses as simple value types as well\n\nIssue: SPR-16278"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9beb97880fe1668f59fbc9715739357c130b0522", "message": "Support for static field access on non-public enums\n\nIssue: SPR-16284"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ad69bfc20ae6a4c02b5bdf06952f045ddd4f9ce", "message": "Avoid extra existence check in SimpleMetadataReaderFactory\n\nIssue: SPR-16281"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1a154c3e4c2296940e2c3920c664b4999d8dc368", "message": "Consistently throw FileNotFoundException even for NIO access\n\nIssue: SPR-16334"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a49123a72bd5773310572a74ef67eda4da1917a8", "message": "Upgrade to RxJava 2.1.8 (and Protobuf 3.5.1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dd4f91523418c31024a6b8b356e1483827f384f1", "message": "Upgrade to JCache 1.1 (and Caffeine 2.6.1)\n\nIssue: SPR-13574"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d27e869510065defbc35e14828d8f0bbdcd1a0f", "message": "Upgrade to Hibernate Validator 6.0.7"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4577a19190b085514959b6729637880138ea1956", "message": "Upgrade to Commons Pool 2.5 (and Jackson Kotlin Module 2.9.3)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/425a999d5e3b98ea7e607b2b100e1aa567e372d4", "message": "Upgrade to Gradle 4.4.1 (and Netty 4.1.19)\n\nIssue: SPR-16237"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3a51b5a9d23f7f6089450a7ac5881c4550914c35", "message": "Upgrade to Hibernate Validator 6.0.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/05988193b71601e2dede9f1aae062fedfc02f8d2", "message": "Upgrade to Jackson 2.9.3 and Netty 4.1.18"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d421841d56e3ee0817b995185b3c72e83281b14", "message": "Merge pull request #1622 from dreis2211/SPR-16293\n\nImprove performance of some string operations\r\n\r\nIssue: SPR-16293"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d198626618b0cc744de9a11ad13c328e8e69a2ff", "message": "Upgrade to Gradle 4.4 (and Apache HttpClient 4.5.4)\n\nIssue: SPR-16237"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf8831157d2c5e4b402b0fea758ad1d38c63ce41", "message": "Merge pull request #1614 from dreis2211/SPR-16264\n\nReduce access on user in SimpleBrokerMessageHandler.handleMessageInternal"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ef117ff11fc0485f456068c19140a29a31b457e", "message": "Upgrade to Tomcat 8.5.24 and Jetty 9.4.8"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/873cb4e58b5103c2e901ceaf75fad38f4edc5c82", "message": "Remove unnecessary deprecation suppression"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b55a2631ba07beb143d30563e9b72c364a6e473a", "message": "NamedParameterJdbcTemplate provides accessor for classic JdbcTemplate\n\nIssue: SPR-16241"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2e8171bfb5a0af95a656ee260792c03aa6486ab", "message": "Latest dependency updates (RxJava 2.1.7, TestNG 6.13.1, Selenium HtmlUnit Driver 2.28.2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1c657fa4b81bc0d6ca9289beddc7b2c35d41457", "message": "Consistent nullability in DataAccessUtils through nullableSingleResult\n\nIssue: SPR-16225"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8323f6a2765cfa7e08a8edf5dbb8ebc9f96f197", "message": "Latest dependency updates (OkHttp 3.9.1, JRuby 9.1.14, Rome 1.9)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/81052cd27ad6b86764526001a6ebcf0df34dee10", "message": "Upgrade to Kotlin 1.1.61\n\nIssue: SPR-16194"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/35dd8db8921e71eb9828209b7e995193df061faa", "message": "Correct number of web-specific scopes\n\nIssue: SPR-16230"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edf22a3e2541d60531359da3ef5ef2c5484f02aa", "message": "Upgrade to Log4J 2.10 (and Groovy 2.4.13)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/93f17dae47757d4d562cffc788250bee6ca7b0b5", "message": "Log4jLog explicitly passes String argument (avoiding argument expansion)\n\nIssue: SPR-16226"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/604017894eff442dbb68ef1d8e8215071b0b1ade", "message": "Upgrade to Tiles 3.0.8 (and Selenium HtmlUnit Driver 2.28.1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0cc644f61fc3bad92c7cf5131411f5cc9350c1f8", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5843173567579183b511ad9ebb48942748785658", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08c95fbcb38645486309074eaef7fcf42b846e38", "message": "Unit tests for configuration superclass inclusion\n\nIssue: SPR-16217"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f24c0de1790ddb85f1fb35e997ac8ac3d95604b", "message": "Consistent use of tabs for sample code in the reference documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08c78554b9564e2024e7068b4cce55736b73dbb2", "message": "Deprecate Castor support\n\nIssue: SPR-16219"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/40dacd3c1c3a396832f904dcc5a491fa25fcb015", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73b9aaa7ff5d7c8350644fad69ac16a13b560c56", "message": "Upgrade to RxJava 1.3.4"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/27bbb73583c6b6c030c6628656921fef600c46aa", "message": "Expose all HttpResource header values (even if commonly not multi-value)\n\nIssue: SPR-14264"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/84699c8b9b7bd6660ad897df54fdce244b5b50e0", "message": "Document common use cases for @Order vs @Priority vs @DependsOn\n\nIssue: SPR-16213"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/040aae530967035f590fe25d850d7f5c1bb3dc12", "message": "Upgrade to Protobuf 3.5 and Apache Johnzon 1.1.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/daee6eeaad4dc063a33482d70406673524f032bb", "message": "ParameterMetaData.getParameterType performance on Oracle 12c\n\nIssue: SPR-16139"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8b48848b9354c277f032c35a0adf1ea5cbef50a", "message": "SqlParameterSourceUtils.createBatch with Collection support\n\nIssue: SPR-16215"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/20fcefc6477f2f3d9aa88cc8b8c3686e5b5cf28b", "message": "ResourceHttpRequestHandler uses EmbeddedValueResolverAware"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14a7da8183cb119fa6d7137ab209c592b9157b70", "message": "Upgrade to Hibernate Validator 6.0.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cc7c90cca567e41958da1e031520b7662a9ec579", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7af99102446480dd774406776e75e39409218534", "message": "Restored support for placeholders in mvc namespace resource locations\n\nWith the recent charset mechanism in place, we cannot rely on implicit placeholder parsing during String-to-Resource conversion anymore."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7bcbdbbc62215543a6193f650506f2829a117b45", "message": "Upgrade to AspectJ 1.8.13 (and 1.9 RC2)\n\nIssue: SPR-16161"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7697b398d5e830f5f3485fde1afef8ab90351b12", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/85baba33bf89de4fc642dea68a759e1e0553faa4", "message": "Accessors for PeriodicTrigger properties\n\nIssue: SPR-15982"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c30145d6f965ce7a5c9a6898874cf296fa7269cc", "message": "MethodReference treats proxy-targeting expressions as non-compilable\n\nIssue: SPR-16191"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7406f5993ac00b97cf7970a852a5a66669599f1b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3e5209bea5be0a7772ab40ea62b6815afceeff16", "message": "Test dependency updates (Mockito 2.12, HtmlUnit 2.28, Selenium 3.7.1, XMLUnit 2.5.1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b5cedd43eb2b70510729696554bbc1f99003ac10", "message": "Consistent and efficient access to BeanDefinition argument values\n\nIssue: SPR-16192"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2bb06edbdd23716df7c265db28f65e6c432a2aa", "message": "Unit tests for unresolvable generics with partial mismatch\n\nIssue: SPR-16179"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3091feee231bf4f5b129e88ba371dd40f8d9a474", "message": "SpringValidatorAdapter skips value retrieval for Set field without index\n\nIssue: SPR-16177"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2018e6b723916396e1b9074ce84deade8535bd7", "message": "HibernateJpaVendorAdapter sets connection release mode ON_CLOSE in non-PersistenceUnitInfo bootstrap scenario\n\nIssue: SPR-16162"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/72f20e8d4f6ce1000bc59662ba235ab56094b0e4", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/780993ce75a29003e54aea5d4f14b7496eda920a", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a80fd9994af6fabeb36b75ca7d0bcfe5700e6106", "message": "HibernateJpaVendorAdapter preserves connection release mode for JTA\n\nIssue: SPR-16162"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de782026c459d2357ba06b108fd3e2f3e2784924", "message": "Explicitly document UriTemplate as thread-safe\n\nIssue: SPR-16173"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a5da05c3dc4a557dbebeeb5ffb2b728ce2ef08dd", "message": "Comprehensive documentation on injection point matching\n\nIssue: SPR-16142"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/423af674cda54a257832d22391c05e4dff9f39ec", "message": "Upgrade to Gradle 4.3.1 (and Netty 4.1.17)\n\nIssue: SPR-16080"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/457c70cf33ab2e909ff5a4dcca3a35469eaf59a7", "message": "Merge pull request #1588 from benbenw/SPR-16170\n\nImprove memory allocations when substituting named parameters\r\n\r\nIssue: SPR-16170"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4ec60f08ad8f6b9c6da68c09bdccfcc4cdc92eae", "message": "PrintingResultHandler defensively accesses session.getAttributeNames()\n\nIssue: SPR-16164"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/899994e7c1d928e32993e8cfe4156d01fd5e8c74", "message": "Merge pull request #1587 from dreis2211/SPR-16165\n\nReduce access on headers for STOMP messaging\r\n\r\nIssue: SPR-16165"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ffd6eff369014f49102bacaa84c0826235c01ee5", "message": "Scheduled task introspection through ScheduledTaskHolder interface\n\nIssue: SPR-15982"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9511d29adb10e8c5da674c66bcdc8b83c04142b9", "message": "Updated bean count expectations in ClassPathBeanDefinitionScannerTests\n\nIssue: SPR-16152"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9649b0cb25b9f5e16f4734f28bc40b7b83b9f80f", "message": "Properly resolve null beans as getBeansOfType result entries\n\nIssue: SPR-16163"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b7af8b5aaabbca31c6c89e635febd7577ba187a", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/07b479e264a4167d07916c125f1f4e5a7f059e1b", "message": "FileUrlResource creates same class from createRelative\n\nIssue: SPR-16140"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a75dd2dd3e8be9cc7fa239a68d1a10e86096bafb", "message": "Consistent getDateHeader checks in spring-webmvc unit tests\n\nIssue: SPR-16160"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5c1deea637ca8b2ab4352857615e53b4cb07e87", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80a0cf71f4b7d244e1832656a76810d4c79b3f1a", "message": "MockHttpServletResponse.getDateHeader returns -1 for non-existent header\n\nIncludes consistent getDateHeader results in both MockHttpServletResponse variants (spring-test and spring-web)\n\nIssue: SPR-16160"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0edf4d6509a7a4d43b70a408e4ff40e9c0d083fe", "message": "MockHttpServletRequest.getRequestURL aligns with getServerName/Port\n\nIssue: SPR-16138"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/db050ac38c9db3a0893949f6c8d8610d75c84c4d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/996d747aed919784b61b43c468647e9500ec2027", "message": "Upgrade to Mockito 2.11\n\nIncludes fixes for invalid exception declarations in Mockito-based unit tests. Also includes FreeMarker 2.3.27, Commons Pool 2.4.3, JSON-P 1.1.2.\n\nIssue: SPR-16157"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a37fce854fffb7002420a62bbf115fce100b8359", "message": "Merge pull request #1586 from jmax01/master\n\nCorrectly handle NVARCHAR, LONGNVARCHAR and NCLOBs\r\n\r\nIssue: SPR-16154"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1611ce7180b985084e60abc116f32d5db886808d", "message": "AbstractApplicationContext silently ignores non-initialized ApplicationEventMulticaster/LifecycleProcessor on destruction\n\nIssue: SPR-16149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d00e4f17ec35d44a50e1737bd8e8e8db9992769e", "message": "ClassPathResource uses specific constructors in createRelative\n\nIssue: SPR-16146"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b921d564d26f7eab53171c53c660397461de0ec2", "message": "DefaultResourceLoader resolves writable FileUrlResource for \"file:\" URL\n\nIssue: SPR-16140"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/da9f138a65079105eeb5b4f88c119791c4f31543", "message": "Upgrade to Caffeine 2.6 and Undertow 1.4.21"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d06129debdfd7dad3a446355773dbbf9276875bb", "message": "InterceptingHttpAccessor uses internal ArrayList for sorting\n\nAlso caches InterceptingClientHttpRequestFactory (if applicable)\n\nIssue: SPR-16137"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5c8dc0d6594494cc8f2a3e638295ceef3e4db8b", "message": "MessageSource.getMessage returns null default message as-is (again)\n\nIssue: SPR-16127"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/295e3b6a994b91c815481c104af47f2d120d743d", "message": "MockRestServiceServer test for follow-up request after failure\n\nIssue: SPR-16132"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3c07afc5be29210d6a363f51453ce1d511b8621c", "message": "Merge pull request #1580 from epabst/SPR-16132\n\nMove requests.add(request) into finally block."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/70ed45020b116118fed38424694e5b37eb5c773b", "message": "Add StatusAssertions.isForbidden\n\nIncludes aligned quoting for header assertion messages.\nAlso aligns HeaderAssertionTests class name.\n\nIssue: SPR-16129"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80fc85067e8b6e4dbc1377b4457a0f69634494b1", "message": "Upgrade to RxJava 2.1.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/78284a62e2f1bc28d7920f157492df72b9ff07fb", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/419b4440a726201c21d545aa05014cfe669faa7d", "message": "Introspect interface-declared methods in case of proxy (for varargs)\n\nIssue: SPR-16122"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd6f2bd6a42ff385f2cc6bbd213ee14a7c40c10d", "message": "Test for null value against boolean property\n\nIssue: SPR-16123"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee7b9283003386856222109ed833853ba7ed148b", "message": "Upgrade to Derby 10.14.1.0"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a2f5e1254e3ccf190ec559492a33ca87c47e54d3", "message": "Drive letter case alignment in addClassPathManifestEntries\n\nIssue: SPR-16117"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7e8c8f0b76955e5af74d86a736c902a41170e282", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f965123513bfa04780404abb19bd66bbaa5a655f", "message": "Correct SpEL example (matching its comment)\n\nIssue: SPR-16111"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9bab7a2708d00c6213a22616fd04222bfe0c5912", "message": "Upgrade to Java Activation Framework 1.2 for test runtime\n\nIncludes upgrade to Hibernate Validator 6.0.4 (where applicable)\n\nIssue: SPR-16115"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d963597ec076da41a238659271ada292f3540275", "message": "Test with hasError for unknown status code\n\nIssue: SPR-16108"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9cfa9291ccbaa00d16194a214111f12b46252151", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d0ab4740c2cf4d6a79fa79bce9c603106c5a22c", "message": "Consistent hasText checks for CharSequence vs String\n\nDirectly inlined hasLength implementations for proper nullability detection in IntelliJ, assuming a hasText checked value is never null afterwards. Since the JVM is going to do this at runtime anyway, this is effectively equivalent but more indicative for source code introspection algorithms.\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9efdadcdcaf8e9b13ef6cf27a6646e528198a7af", "message": "Compatibility with OpenPDF as alternative to iText 2.1.7\n\nIssue: SPR-16107"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/efe943df721fd0f39d82ef32db41c4da964a1a3c", "message": "WebSphereUowTransactionManager logs overridden application exceptions\n\nIssue: SPR-16102"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a4f8ce75538c9c4148ed31bc77cc60ca0a1f9b5c", "message": "Upgrade to AspectJ 1.9 RC1\n\nIssue: SPR-16077"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/182da1590821a0b621c8721e325b5bfc17755fec", "message": "BridgeMethodResolver properly resolves interface hierarchies\n\nIssue: SPR-16103"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55b0c2f243fd1dc5bad98611b17b441af6cb58c6", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ecea82d3a557614aba454ea3ed79817febc596f7", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f31069ac05af221baefc909963f037421a86b248", "message": "Upgrade to Selenium 3.6 and XMLUnit 2.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c7100f771cea9e6982d84ac2665deb42b1aa3995", "message": "Explicit notes on advice mode proxy vs aspectj\n\nIssue: SPR-16092"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75ec973bae4b06bd6aed18463507c22170e73dca", "message": "Refined tests for StringUtils.starts/endsWithIgnoreCase\n\nIssue: SPR-16095"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5d41e0f0121d710cf2e0f90fac3920057004d254", "message": "Avoid temporary String creation in StringUtils.starts/endsWithIgnoreCase\n\nIssue: SPR-16095"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9a88ebdeba8455bf5fdb3076f0e7eca4d6acbde2", "message": "Consistent hasText checks for CharSequence vs String\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9288990603e5167f2f430ca22536691897610f47", "message": "Varargs and consistent nullability in MailMessage implementations\n\nIssue: SPR-15756"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5809f5b8ebd66f1dd4589f7f326a24c10762e24f", "message": "SubProtocolWebSocketHandler provides protected decorateSession method\n\nIssue: SPR-16089"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d418ba1b5d714951960f31cac64af46dd8b39dd0", "message": "Remove snapshot repository (after Reactor Bismuth-SR1 upgrade)\n\nIssue: SPR-16085"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e17ad551f3103514db82da677624fcded58dd726", "message": "Latest dependency updates (RxJava 1.3.3, Hibernate ORM 5.2.12, Hibernate Validator 5.4.2 & 6.0.3)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1fac36e3ea03bda44fb44174ce07c521d4bdb82", "message": "SchedulingConfigurer and JmsListenerConfigurer respect @Order\n\nIssue: SPR-16090"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a4537b1b6dfef03fb2c004ca1fab5d2019ab52fb", "message": "Accessors for configured send-time and buffer-size limit\n\nIssue: SPR-16089"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a3eeda99e0a81c6fc51dbafe201f550a395c139b", "message": "Consistent separation between chapters and after chapter titles"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9df6f3e6b852e642d7d631e8004e003d6cebfba8", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c3378fda33474e1b4c40d12eb725fb5e2b3d36fe", "message": "AbstractMessageSource properly interacts with non-AbstractMessageSource parent\n\nIssue: SPR-16047"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bec1fc18523e518caa62d4a952b759fe3d5f02e1", "message": "ModelAttributeMethodProcessor detects re-enabled binding declaration\n\nIssue: SPR-16083"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea00c7c6c881885d65c8799737fb9cd86eb0c3e7", "message": "Explicit notes on ExceptionHandler root vs cause resolution\n\nIssue: SPR-16074"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba74e428088ddf4c54505357c333f5cbd76056c2", "message": "Upgrade to Gradle 4.2.1\n\nIssue: SPR-15985"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f270bc432157c48506427ccd6effa675b9754e5", "message": "Upgrade to SnakeYAML 1.19"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d1023be8c37e81f2dee2ff58ad1ca06210c2f98", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef6aef91077901a5ed532ec3e7a55f5e0e554080", "message": "Allow PropertyEditor conversion as fallback for enums\n\nIssue: SPR-16082"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/16a08cb4653c674d43a4d377048d949163a97a29", "message": "Upgrade to Jackson 2.9.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/be9c0967467ba2e0dda4aa7f2ae72bd9bbc7ab99", "message": "Extended coverage of full vs lite mode for configuration classes\n\nIssue: SPR-16076\n(cherry picked from commit 17fb4fed098d95bfdb6609c138afb14c38c0b0ab)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1b5b5d2f7cdc12df404648b673adcc073838dd5", "message": "Clarify destroy method suppression for DisposableBean vs (Auto)Closeable\n\nIssue: SPR-16078\n\n(cherry picked from commit dff2c84)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c3cf0840b7944430bd40ee6a0916026f87bb2972", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c29b6f5b5565f8103faa288f3708cb9c736d7ee7", "message": "Consistent handling of null array for arguments\n\nIssue: SPR-16075"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3890d4c9eb12341e4a3051b1dac110f96dd9cae7", "message": "AbstractServerHttpResponse stores HTTP status code as integer value\n\nIssue: SPR-16073"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/43b5e21947f3ad9682ae39cd8b8b5ae4b8f72c14", "message": "Consistent alias declarations for value attribute on stereotypes\n\nIssue: SPR-16066"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/625737f90ad07b08a301252a8b5a4d2f8652817d", "message": "Controller/Repository/Service declare value attribute as alias for Component\n\nIssue: SPR-16066"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/682186a20deaa121425f17570ebc8a233b774389", "message": "Refactored CodecConfigurer creation for clearer subpackage interdependencies\n\nIncludes redeclaration of CodecConfigurer.DefaultCodecs without concrete Jackson decoder/encoder references in order to avoid hard Jackson dependency.\n\nIssue: SPR-16064"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91a899389575755f89760d9cd21c564632c15394", "message": "Skip init/destroy method check for null beans\n\nIssue: SPR-16063"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d611486978a04c584b8fec427fd7caebf8b769ec", "message": "HandlerMappingIntrospector.getHandlerMappings() never returns null"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/699fde91db889bdb0d0d09267871de6f21a8d53c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d3fa4eb70bbd17734a1519a3dbb8816b4f74b20", "message": "Upgrade to Apache Johnzon 1.1.4"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6ef7dd4d5e864007d12494087773f34ce743990f", "message": "Notes on classpath scanning and exports vs opens with Jigsaw\n\nIssue: SPR-14579"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc3299152c306845f77c953360ffe68a07f36a6b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/28e2dd0487303deba88562284ab0e46da193a61a", "message": "Upgrade to RxJava 2.1.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cc6e6490d228a590d9163fa5c56731fa704940c0", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ad4c8e7c0d8b35b633c08255603a2e5a3acf8fd2", "message": "Consistently sort BeanDefinitionRegistryPostProcessors\n\nIssue: SPR-16043"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/53091c76bf2f1a3c772c3b9dc24f57526dffb2df", "message": "Convenient forType methods for ParameterizedTypeReference\n\nIssue: SPR-16054"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/66a6fdaccab4aeffef5b3beed34ad5a0fcf2b386", "message": "Deprecate HibernateJpaSessionFactoryBean (against Hibernate 5.2)\n\nIssue: SPR-16016"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03b68286a215e96d4706efe1c6fdcbf48169c930", "message": "Tokenizer uses single process step and length-based exhaustion check\n\nIssue: SPR-16032"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3eebdb389b4a18df3d742942184df1a06d1f7569", "message": "Upgrade to JUnit 5.0.1 and Tomcat 8.5.23"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9d3c2690d5010f6cafe8fb98ae8e9c0b6d92d9b", "message": "Properly resolve null candidates for collection injection\n\nIssue: SPR-16033"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95fdfac1281b7c54755890a43ccc9a4f617a69c9", "message": "Upgrade to Gradle 4.2 (and Netty 4.1.16)\n\nIssue: SPR-15985"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c078e2eb1deb8b86db64e303d1d263249d0b3d5b", "message": "Overview with explicit JDK 9 (Jigsaw) and Java EE 8 references"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/255ccf58e0f78320badb96ba1a08004c88c1ff0a", "message": "Remove snapshot repository from build setup"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec345bf162285e397df774bdc2ad756e3aba155a", "message": "Revised handling of missing data class arguments\n\nIncludes unified detection of Kotlin's optional parameters in MethodParameter.isOptional(), reduces BeanUtils.findPrimaryConstructor to Kotlin semantics (for reuse in AutowiredAnnotationBeanPostProcessor), and finally introduces a common KotlinDetector delegate with an isKotlinType(Class) check.\n\nIssue: SPR-15877\nIssue: SPR-16020"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a1a7c6212731d7eff716021e7543272f2b9c72dc", "message": "Consistent configurer access in WebMvcConfigurationSupport\n\nIssue: SPR-16017\n\n(cherry picked from commit 40ba95f)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75bd5162514a3e3f21d53f16a5835e61779b7bb7", "message": "Refined TemporaryLobCreator null handling (from 4.3.x)\n\nIssue: SPR-15656"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/efce7902c40e55d907baaa10b2dc071322e7be11", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a4b2ae583e38666220d9cb1d19491806c6cb45b3", "message": "Expose AspectJ 1.8.11 in POMs (and use it for all tests)\n\nIssue: SPR-15974"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d8e3d4185b9f1158de31c4f9a53f2a036a041df", "message": "Explicit check for duplicates in addClassPathManifestEntries\n\nIssue: SPR-15989"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e927cae4763788d5ea43ff7cde5bb025234f1eae", "message": "ObjectProvider offers ifAvailable/ifUnique variants with Consumer\n\nIssue: SPR-16001"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9ff4c0bff8d7d9b223986daaf74bfb98f9939386", "message": "DispatcherServlet.getHandlerMappings() accessor declared as final\n\nIssue: SPR-15934"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac45aa202235bfc9826017fe7f37d043b59a75c7", "message": "Upgrade to AspectJ 1.9 beta 7 (with 1.8.10 exposed in POMs)\n\nIssue: SPR-15974"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/65f556c0e2dd9c3e3c7055e4356d2772d2721de9", "message": "Downgrade xjc to 2.2.11 (while keeping JAXB at 2.3.0 general)\n\nIssue: SPR-15996"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2882fe1db6ff343c6f7aacf2792d3d34407ddbe", "message": "Build against EE 8 API level wherever possible\n\nUpgrade to JAXB 2.3, JAX-WS 2.3, Annotations 1.3.1, Interceptor 1.2.1.\nAlso includes Log4J 2.9.1 and Asciidoctor 1.5.6."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9190b76ab9967b03a9eed9cb979393e684ed2a47", "message": "Latest dependency updates (POI 3.17, Rome 1.8, EhCache 3.4, Caffeine 2.5.6, RxJava 2.1.4, Tomcat 8.5.21, JRuby 9.1.13, Rhino 1.7.7.2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ae59d0c2a5313ad96ba10f9d8ee4e7f77c45c85", "message": "Nullability refinements on private and static methods\n\nBased on IntelliJ IDEA 2017.3 introspection results.\n\nIssue: SPR-15756"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9afdce54bb702a5f60da1a7d83152ed7f8b8e1b", "message": "Merge pull request #1532 from aahlenst/spr-15988\n\nProtobufHttpMessageConverter: Ensure that JSON is written to response body"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/15c82afc1cdedc95b453e8f4ca61fd72f4a3ae82", "message": "Consistent conversion of Optional array/list arrangements\n\nIssue: SPR-15918\nIssue: SPR-15919\nIssue: SPR-15676"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea01c4113af22099755de763e9fb1dddb7691c0b", "message": "Revisit MockPart constructors\n\nIssue: SPR-15854"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4cbef27f90ded887af9ae9639550999aa81f3847", "message": "Consistent tolerance of unknown HTTP status codes behind RestTemplate\n\nIssue: SPR-15978"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/215e5f5682cd9aaf9c95105f3d2069298a364a0e", "message": "Defensively call getParameterType (which might fail for certain statements)\n\nIssue: SPR-15977"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ffe80ff0029d5d0cc2cb66ebf7ad023f4792d356", "message": "Clarify @Bean return type recommendation in case of multiple interfaces\n\nIssue: SPR-15973"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80134d2e0cbb71255f6b04046b4d5be71548d00a", "message": "Automatic-Module-Name manifest entries for Jigsaw\n\nIncludes upgrade to Jetty 9.4.7 GA.\n\nIssue: SPR-13716"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/185c2bf5b6b114788c20d789a113455da3ad57fe", "message": "Upgrade to ASM 6.0\n\nIssue: SPR-14514"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac9cfefaffb78cb26c3a755f4594b1a113a97144", "message": "TaskExecutorRegistration does not apply its default settings to a user-provided executor\n\nAlso, ChannelRegistration.setInterceptors is deprecated now: in favor of a fluently named interceptors(...) method which is documented to add the given interceptors to the channel's current list.\n\nIssue: SPR-15962\nIssue: SPR-15976"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5bdcb895c077468ca70bfb51780a0ec6d8d5a46a", "message": "HttpEntityMethodProcessor lets entity headers override existing headers (again)\n\nIssue: SPR-15952"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3bd215404699d362c58af75e18d3831dd0ef3269", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f42f38336694c8e3e0fea01f873e2737a3e9f6e", "message": "Drop Animal Sniffer setup (and upgrade to RxJava 1.3.2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/346d2edce1727ab47fbbeb9b0d8e2dcb700d5666", "message": "Revised org.springframework.lang javadoc\n\nIssue: SPR-15756"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f3967cb3c1097ae2584c81a7361990a8190864e", "message": "spring-jcl provides NoOpLog and SimpleLog as well\n\nIssue: SPR-15957"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69af698ceb316ebdf3bead083d725d9528afdee4", "message": "Latest dependency updates (EclipseLink 2.7 final, Hibernate ORM 5.2.11, Selenium 3.5.3)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4371350b5d85f96243f2dd78b359036ea9074e85", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30d67f7c4232a99d7c0317f8386761e0468cb7dc", "message": "Tests for @Lazy Validator setup\n\nIssue: SPR-15807"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6dcf2e3c5b340acbda7cd69f800974039ce64bc0", "message": "Upgrade to RxJava 1.3.1\n\nIssue: SPR-15497"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/04765b6202c049ea8ac921cd11d1a160b2772daf", "message": "Upgrade to OkHttp 3.9 and removal of superfluous spring-jcl reference"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd0132c7e63c0ea497c357d352865df6ac72ae5d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa4ae7a750cfc4b024dcec3d411f7e8d083fbee7", "message": "Heart-beat log message potentially without session id\n\nIssue: SPR-15937"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/496223a927862603570b6d832a8e88953581552b", "message": "WebFlux supports field default/marker parameters for data classes as well\n\nIssue: SPR-15871"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f0198f375601a1ca670654f8dba181ac7f05f1b9", "message": "Upgrade to Apache Johnzon 1.1.3\n\nIssue: SPR-15590"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/26284cac4f86a4e6aeead19d8676f6459f422fbb", "message": "Hibernate Validator 5 compatible support for element constraints\n\nIssue: SPR-15916\nIssue: SPR-15839"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6cae219d824f4990d77cac61477316ec678a09b", "message": "Upgrade to Log4J 2.9 (and Undertow 1.4.20)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97ded1dcc7763b785022f4e1ab8688a001195cc3", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30bd5827b0d7f5ed57a4270c22b3dc6f7ba8b792", "message": "ConfigurationClassEnhancer leniently allows for null bean references\n\nIssue: SPR-15829"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/204ddebd68c37c49fd95acb2265ef98859afcf99", "message": "SimpleAsyncTaskExecutor properly respects NO_CONCURRENCY\n\nIssue: SPR-15895"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b44e6e21c9e96ca329be8c5a2f7a9e62a318fc4", "message": "Strong references to mapped exception handler methods\n\nIssue: SPR-15907"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b122bc6dcc510c22e411df8b57c7be6632ba24d3", "message": "Upgrade to Hibernate Validator 6.0.2\n\nIncludes latest dependency updates (Netty 4.1.15, Undertow 1.4.19)\n\nIssue: SPR-15808"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b61c055e438bea575be9b9c5bc151f830899e4e3", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fac1f236c312ebffe9662d209ac67f0dc6238332", "message": "Upgrade to Servlet API 4.0 for MVC and merge EhCache 3 tests into spring-context-support\n\nIncludes general streamlining of dependency declarations with reduced version variables, direct use of EclipseLink 2.7 and its implicit JPA 2.2 dependency in spring-orm, mixed use of Hibernate 5.2.10 and 5.1.10 for integration tests, as well as an upgrade to Jetty 9.4.7 RC0 and a downgrade to Groovy 2.4.12 (since Groovy 2.5 won't be final in time for Spring Framework 5.0).\n\nIssue: SPR-15879\nIssue: SPR-15880"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3991ab4a2382418eb834802ed387ba293cadc7ca", "message": "Efficient Kotlin metadata detection\n\nIssue: SPR-15673"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9aa369f40222527f7f0f864b53659d8b585dcd7b", "message": "Data class construction supports field default/marker parameters\n\nIssue: SPR-15871"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47a7475898fc918e2f945206e3364bdaab2bb39f", "message": "Resolve remaining nullability warnings\n\nIssue: SPR-15869"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac5e2599f7c8ae5082871919852e5e3518c85410", "message": "Consistent overriding for all variants of init/destroy method inheritance\n\nIssue: SPR-15532"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b94302b5bde7475b9926dacb9fb69f3c8c894444", "message": "Enforce non-null value from getBean and at injection points\n\nBean-derived null values may still get passed into bean properties and injection points but only if those are declared as non-required. Note that getBean will never return null; a manual bean.equals(null) / \"null\".equals(bean.toString()) check identifies expected null values now.  This will only ever happen with custom FactoryBeans or factory methods returning null - and since all common cases are handled by autowiring or bean property values in bean definitions, there should be no need to ever manually check for such a null value received from getBean.\n\nIssue: SPR-15829"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6b6c1d3e537d4cfe3b7f3cb3649a199ca356475c", "message": "Build and test against JPA 2.2 and EclipseLink 2.7 (while retaining compatibility with JPA 2.1)\n\nIncludes latest dependency updates (Tomcat 8.5.20, Protobuf 3.4, RxJava 2.1.3, Caffeine 2.5.5)\n\nIssue: SPR-15870"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec1eafc46fe088c9ba3805969507b6e92f89458b", "message": "@Lazy falls back to empty map/list/set for non-required collection dependency\n\nIssue: SPR-15858"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61cdc842e08f468c8aec9d10a900f3ba087f348e", "message": "BindingResult support for constructor argument mismatch on immutable data object\n\nIssue: SPR-15542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b8f5e97ae5d6f3fae7932a85f533c5b7006b344f", "message": "Properly retrieve and expose HttpServletResponse for async requests\n\nIssue: SPR-15867"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/adeb521ce4770360e6fad3977d149f378532f0a3", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/09f5c71374a45c2e8d2f72c0503c72161eccdf98", "message": "Consistent nullability for BeanDefinitionBuilder setters\n\nIssue: SPR-15841"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de09f8ca1f6cc5727e4507c4c5ad65caae649dc0", "message": "Support for Bean Validation 2.0 container elements (with BV 2.0 test setup)\n\nIncludes latest dependency updates (Hibernate Validator 6.0.1, Caffeine 2.5.4, Netty 4.1.14, Tomcat 8.5.19, Johnzon 1.1.2, JsonPath 2.4, Jython 2.7.1)\n\nIssue: SPR-15839\nIssue: SPR-15808"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/48f95e9b969c3bfa40b90f6eb1a70fcc07be906f", "message": "Upgrade to Gradle 4.1\n\nIssue: SPR-15667"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fabc9c28d7e115431e25da81a0dca47787a683aa", "message": "Align new FileSystemUtils NIO implementation with original behavior\n\nIssue: SPR-15845\nIssue: SPR-15846"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ca0983cd850717a23b714f98dbfbb40aaebec45c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/697d14a02899a7217e7ed8f8fe2eb3f0b753846b", "message": "Unit tests for transaction annotations on parent interfaces\n\nIssue: SPR-15833"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dd2bbcb3ec119287f1c814a1c18dde235a81f167", "message": "Leniently handle lambda-defined listeners with ErrorHandler as well\n\nIssue: SPR-15838"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1fbd04700355dfe91a73965d47ee4dadccb8e80b", "message": "checkConfigurationClassCandidate explicitly skips factory method definitions\n\nIssue: SPR-14603"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce0bce28da0254ee86f5a586a35b3e8cf85f5cee", "message": "Upgrade to JUnit 5.0 RC2\n\nIssue: SPR-15737"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/26de6268aa2fcad138a156e70856de908a64f710", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fac83b2e7c01c25869f069f9f90e4ca2327de4a4", "message": "Consistent logging in Environment and PropertySource implementations\n\nIssue: SPR-15825"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c5fc4005344ddb355c4a9b66640d46373ad3f353", "message": "(AnnotationAware)OrderComparator supports null values again\n\nIssue: SPR-15823"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/25e6a2da646c9a465fabf1c73796a1ae01886857", "message": "StompSubProtocolHandler consistently accesses current user\n\nIssue: SPR-15822"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d904e9ed500929fdd3d201e415cf0355bd7125bf", "message": "Latest dependency updates (RxJava 2.1.2, Rome 1.7.4, JRuby 9.1.12)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/af93503a090a4c592c9dba98f64ef67dc99903b8", "message": "TemplateAwareExpressionParser treats null as non-template ParserContext\n\nIssue: SPR-15810"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4651d6b50c5bc85c84ff537859c212ac4e33434", "message": "XmlEventDecoder uses common defensive XMLInputFactory (now in StaxUtils)\n\nIssue: SPR-15797"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/40df7b6eca32b068e2ba7ffa7ec209dd6f396219", "message": "Polishing\n\nIssue: SPR-15673"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d6d772f31bb9349f163a23c7a278559f58dffda", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/118d1470fdaf65f4f8ef2dff5c2212f0ab2fd607", "message": "Ignore (Auto)Closeable for interface-based proxy decisions\n\nIssue: SPR-15779"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13080f04f405f5692646fe1bdf8b887ca8147848", "message": "UriUtils.extractFileExtension properly handles all fragments\n\nIssue: SPR-15786"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac1d3b22c9d092cd7d093cca9bbe4feede134fca", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/46eba3dbfad310bbafbf0a1002a386246288df1c", "message": "Nullability fine-tuning around declaration inconsistencies\n\nIssue: SPR-15720\nIssue: SPR-15792"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9fc4fb10b0da0d625dd7dff0bf2bd3e6b42b5684", "message": "Nullability fine-tuning around bean properties\n\nIssue: SPR-15720\nIssue: SPR-15792"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c292a89b24fbf955fd0eecf00b837212909f0e7e", "message": "Http(Async)Client not actually nullable, plus MethodInterceptor nullability\n\nIssue: SPR-15720"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/704d4c34be07f53d16f9f57854a77a39a98f0182", "message": "Upgrade to Reactor Bismuth M3 (and JavaMail 1.6 final)\n\nIssue: SPR-15787"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bca5a362168e2dad27f273966857fb2f6b9fcd88", "message": "Explicit error message for bean name clash with containing configuration class\n\nIssue: SPR-15775"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12114a9d4c55e86cb0669d9c66d423b8d07c20b0", "message": "Consistent use of NIO.2 for file read/write interactions\n\nIssue: SPR-15748"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/efc5b47b9ad524d73380c3a6e1d9bdb319195dd2", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ad61800191597719bbf7ab7b29a4aa5a5feeb07", "message": "Expression javadoc alignment"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bcf9f21ecc17687ce285fa2e1e62b2ed1dfab614", "message": "PropertyOrFieldReference checks cached PropertyAccessor against current EvaluationContext\n\nIssue: SPR-15769"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/57f961e36beaf69951d7e92af5db1f4edae11d93", "message": "No nullability declarations in AOP Alliance sources\n\nIssue: SPR-15720"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/301e2ea493e218b4d40125ccc0b9ff32797e50ff", "message": "Nullability fine-tuning and related polishing\n\nIssue: SPR-15720"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50493a0f5f61bf6b7ee40dd10d0dec4cac26de64", "message": "Missing abstract declaration on ReflectionTestUtils\n\nIssue: SPR-15757"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd2b4f242788c53351bfa1d4dfddc5a6d4bd3651", "message": "DefaultListableBeanFactory falls back to empty DLBF instance on deserialization\n\nIssue: SPR-15766\n(cherry picked from commit c9ffa64)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d7612e052bfb2ac5d6f7c6721d82d9187c8b8c5", "message": "AbstractTraceInterceptor provides logExceptionStackTrace flag and writeToLog delegates\n\nIssue: SPR-15763\n(cherry picked from commit aa0d7a6)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/25f3aef1ab7aa2b6832dac637cb9d29a014909d7", "message": "Latest dependency updates (Caffeine 2.5.3, Netty 4.1.13, XPP3 1.1.6)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/19a8efc717ddc9ced322cb4bc41b29c3c88ad54d", "message": "Revised assertions and $[invocationTime] support for exceptionMessage\n\nIssue: SPR-15763"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f767a86f556fe04171483f3ec598a22a78f073c", "message": "Always invoke Jackson serialization with AtomicReference cause\n\nIssue: SPR-15760"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/122ee3096c3c83023af3a4c8d023dcdd04c4a2f8", "message": "Efficient log checks in STOMP encoder/decoder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dd43b6aabe2cf1b77f955c2f57e2af363e5c787b", "message": "ReflectionTestUtils does not require spring-aop on the classpath\n\nIssue: SPR-15757"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3714e7b044d1651280e2e6bbcc23123aa8b846d8", "message": "Deprecate FileSystemUtils\n\nIssue: SPR-15748"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b5132ce5386ecf1fade727bd52cc9b4fb99814e", "message": "LinkedCaseInsensitiveMap exposes its locale for key conversion\n\nIssue: SPR-15752"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e7b77cb2b6c699b759a55cd81b345cca00ec5b64", "message": "Drop legacy DisposableBean declaration on AbstractApplicationContext\n\nIssue: SPR-15154"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d55b3a592547fc335c73e7d071e511fea8f89b9", "message": "Perform onException delegation outside of connection monitor\n\nIssue: SPR-15738"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00f4c36d7a08710f489d1bd901ce0cd9e9ab274d", "message": "Nullability fine-tuning (RequestContext, LocaleResolver)\n\nIncludes page-level JSTL time zone support for JSP tags.\n\nIssue: SPR-15720\nIssue: SPR-15746"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/398322139a41118dcadeacd2bf442476d7a8bff8", "message": "StringUtils.uncapitalize is not actually nullable\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/59c26f65ba5bd5a20438d52f7dc44b498e89b4e9", "message": "AbstractValueAdaptingCache subclasses may reuse NullValue.INSTANCE\n\nIssue: SPR-15693"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb928ce456a77cb0cb932aa76aeb67e2ae2b5379", "message": "Reliably detect event listener conditions on proxied beans\n\nIssue: SPR-15678"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a6d616d8444fb29626df15a1e4943203ad030fe1", "message": "Exception handler methods may receive original as well as cause\n\nIssue: SPR-15701"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45d376b6af82215a841ca0236b258a068d117aa7", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1306bb99826fb8b8473798257a1ce4b42b87871c", "message": "Declare spring-context as optional in web, webflux, messaging, jms\n\nIssue: SPR-15733"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e35b63f813fa4b49b138cbb9d5b8abaf6138a8df", "message": "Latest dependency updates (Kotlin 1.1.3-2, Undertow 1.4.18, JsonPath 2.3)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6c0ae1ec9b94ce3daa531e99b246a78d34079bd2", "message": "Clarified role of postProcessAfterInstantiation\n\nIssue: SPR-15732"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6534359473b72e6a4dfa602bf99a0a2359a160f4", "message": "FactoryBean object cache cleared on shutdown\n\nIssue: SPR-15722"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9afce23845e043c57cf6fef425963fb26bc4f586", "message": "WebSocketSession.getUri() may return null\n\nIssue: SPR-15721"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b33d8c6aded6f20359958713adc66806ea895fe4", "message": "Merge pull request #1467 from violetagg/deferred-result-handle-error\n\nPolish - the flag continueProcessing is not needed"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f4d1a4628513ab34098fa3f92ba03aa20fc4204", "message": "CronSequenceGenerator.isValidExpression actually validates cron fields\n\nIssue: SPR-15604"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cc74a2891a4d2a4c7bcec059f20c35aa80bcf668", "message": "@Nullable all the way: null-safety at field level\n\nThis commits extends nullability declarations to the field level, formalizing the interaction between methods and their underlying fields and therefore avoiding any nullability mismatch.\n\nIssue: SPR-15720"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c4694c3f5c8e7ac94b92251249ad4d9b08d209e2", "message": "WebAsyncManager defensively ignores attribute type mismatch\n\nIssue: SPR-15709"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/af69c5b6a9dbd113f8125ac016b5004774ff7f17", "message": "Upgrade to AspectJ 1.9 beta 6\n\nIssue: SPR-15686"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/87430f3cd30b401fbb10cf212cb437ff41b058f6", "message": "ListenableFuture provides CompletableFuture adaptation via completable()\n\nIssue: SPR-15696"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/98642c7e29eb9596533341411b311c83c6aa5aa7", "message": "Consistent ScriptTemplateView locale resolution via request\n\nIssue: SPR-15064"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41eaf03bc85c61e0c10a9aef9ef922882245efdd", "message": "Compatibility with covariant return type on JDK 9's ByteBuffer\n\nIssue: SPR-15686"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/140542e8b1f555d622578994b6c4f1b31b602238", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/098ff6f0f8ef8e9e6288279f0cf96f43e076d425", "message": "Compatibility with JDK 9 release candidate build (175)\n\nIncludes upgrade to Objenesis 2.6, Gradle 3.5.1, RxJava 2.1.1, JSON Binding API 1.0 final.\n\nIssue: SPR-15686\nIssue: SPR-15600"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/155a1c6c71c9ea06b58c2be49d6e3ed4db51c700", "message": "AsyncHandlerInterceptor.afterConcurrentHandlingStarted declared as default method\n\nIssue: SPR-15702"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03133630cb442fd2ee5b775002a1d995fded06df", "message": "Missing @Nullable annotations in WebFlux, in particular around locale resolution\n\nIssue: SPR-15036\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/535103cd52b58f36618f0facbe938cca4628d32f", "message": "Fine-tune HTTP/RMI Invoker exception handling\n\nIssue: SPR-15684"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c244f33f84c1d976f0a7c99b258f872e278118c3", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/018cc454832ae52275b7b8b98f9a6a8730310974", "message": "Upgrade to Groovy 2.5 beta 1\n\nIncludes latest dependency updates (Commons FileUpload 1.3.3, OkHttp 3.8.1, XStream 1.4.10)\n\nIssue: SPR-15407"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/efb735aa9989e9c3337daf9b91b8eab7e4e1f08a", "message": "SimpleRequestExpectationManager properly handles sequential requests with different count\n\nIssue: SPR-15672"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7e251274ee574589d53e98a2042e731de4b8ac9c", "message": "Consistent nullability of headers Map and MessagePostProcessor\n\nIssue: SPR-15670"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b5f96c804fcb34fe0157d6709ca6e25be91e5c3", "message": "HttpComponentsAsyncClientHttpRequestFactory supports plain HttpAsyncClient as well\n\nIssue: SPR-15664"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/137fc48cc294db667ea880c6261d92e01812a01f", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/72a8868f844f7a15900497915cf507ad908fbce6", "message": "FreeMarker macros based on HTML output format (requires FreeMarker 2.3.24+)\n\nIssue: SPR-14740"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0cea9a86f7cfb7131290f8815cc2d1f38a55c8c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/779deb0fa786d57b67afa91c8b0164364982e679", "message": "Cleanup of duplicate semicolons\n\nIssue: SPR-15654"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7dd8dc62a5fa08e3cc99d2388ff62f5825151fb9", "message": "Fixes for ignored tests after last week's nullability commit\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/738160538eab258deacbacac873e53647fb40abb", "message": "TargetSource.getTarget() is nullable again (for compatibility with MethodInvocation.getThis)\n\nIssue: SPR-15651"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47ec9667571e3af8bb29fbdd5ce447461b5b0571", "message": "TargetSource.getTarget() is nullable again (for compatibility with MethodInvocation.getThis)\n\nIssue: SPR-15651"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3ae84d6dd8af742f1fcf90e4bd3972a4dc66aa68", "message": "Consistent support for Charset/StandardCharsets in UriUtils etc\n\nIssue: SPR-15613"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14161d1dbf922f6fbaa9ca7a5ac54bbce3387281", "message": "Protected applyLifecycleMethods in UrlBasedViewResolver\n\nIssue: SPR-15219"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6320976669d3a71339ca517697076940bacf3418", "message": "Latest dependency updates (H2 1.4.196, Apache JSTL 1.2.5, HtmlUnit 2.27)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2e04105706954429747f04e05c8f7c066c87108", "message": "Method-level javadoc on XmlReaderContext etc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f43ea96dd99e5528bd6f76cfed91ee1295e07ca6", "message": "Upgrade to Apache Johnzon 1.1.1\n\nIssue: SPR-15590"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c0550f7eb6c2a669a8bd945c49a16ef2fe8d96a4", "message": "Documented AbstractBeanFactory nullability warning\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a1ce3244b06e0598e370a25003ee4bfce7e37cef", "message": "Latest dependency updates (EclipseLink 2.6.5 RC2, JSON-B 1.0 RC2, Gson 2.8.1, Jetty 9.4.6, Netty 4.1.12)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd53d2a51a4de263ac18d2f698abeab7afabce75", "message": "Consistent use of @Nullable in spring-test\n\nThis commit also removes nullability from two common spots: ResolvableType.getType() and TargetSource.getTarget(), both of which are never effectively null with any regular implementation. For such scenarios, a non-null empty type/target is the cleaner contract.\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee5fa2633a79025a1af56365abf9a36501aa6bbc", "message": "Protect against null return value from DataSource.getConnection()\n\nIssue: SPR-15641"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e6f195095283beaf1637b8230e64cb324e96fe33", "message": "Missing @Nullable annotations for findAnnotation/getValue/getDefaultValue\n\nNote that synthesizeAnnotation has an assertion now, keeping its non-null policy.\n\nIssue: SPR-15642"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7eaedf29161b08c9fbb30d7cb410b79f7b5e12d2", "message": "Debug-level log entry for any Jackson exception during canConvert\n\nIssue: SPR-15582"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55b0fe10271b197af65ff2a05fdc973a0432a4f9", "message": "Unwrap SpringValidatorAdapter (e.g. CustomValidatorBean) to native Validator\n\nIssue: SPR-15629\n(cherry picked from commit 8330134)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0bce618c2f51d8af1fc00ee2c3868ba2c8e0045", "message": "Latest dependency updates (Undertow 1.4.16, Caffeine 2.5.2, JavaMail 1.6 RC2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f813712f5b413b354560cd7cc006352e9defa9a3", "message": "Consistent use of @Nullable across the codebase (even for internals)\n\nBeyond just formally declaring the current behavior, this revision actually enforces non-null behavior in selected signatures now, not tolerating null values anymore when not explicitly documented. It also changes some utility methods with historic null-in/null-out tolerance towards enforced non-null return values, making them a proper citizen in non-null assignments.\n\nSome issues are left as to-do: in particular a thorough revision of spring-test, and a few tests with unclear failures (ignored as \"TODO: NULLABLE\") to be sorted out in a follow-up commit.\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e7b41bc30a4db84bdaad719dd12b0a162231e5bf", "message": "Use Apache Johnzon 1.1 for JSON-B integration tests\n\nIssue: SPR-15590"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3cc94ae8b53c5d71c3cc4fc453e8569843dd2e26", "message": "Consistently accept \"taskExecutor\" bean of type Executor (as stated in @EnableAsync's javadoc)\n\nIssue: SPR-15566"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6fcf3a104f05718cf34255af9fcfebd47b8358a7", "message": "SharedEntityManagerCreator detects JPA 2.2's getResultStream method as query-terminating\n\nThis commit also changes \"hibval5Version\" to the more general \"hibvalVersion\" build variable, and includes dependency updates to Caffeine 2.5.1 and JRuby 9.1.9.\n\nIssue: SPR-13482"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/01835762158511e57d8ec8aa1c54ce6d2979f542", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/db69a082d9449ecb13f615316a382c100cab1f23", "message": "Avoid java.util.Optional signatures for simple field access\n\nIssue: SPR-15576"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce5e2b94c4403b176051e8b3b8be50b5fd5ddd03", "message": "ProtobufJsonFormatHttpMessageConverter for configurable JSON processing\n\nIssue: SPR-15550"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/113f0fb13f08c465f8ae03c893d62a6ef1c4349d", "message": "Javadoc suggests Jackson 2.9\n\nIssue: SPR-14925"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c59e192b0f448ff15ca2bc22229b1d49d612ce72", "message": "Upgrade to Kotlin 1.1.2-4 (and Undertow 1.4.15)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb3d1befcd3f057c215ce206740ce616c20e041e", "message": "LocalValidatorFactoryBean properly supports unwrap at ValidatorFactory level\n\nAlso documents limitation for Bean Validation 2.0's getClockProvider() method.\n\nIssue: SPR-15561\nIssue: SPR-13482"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67881a57262c98fee38eec47452afd8f1e4347fa", "message": "Polish PathPattern parser (including package change to web.util.pattern)\n\nIssue: SPR-15531"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eaac348c05d2ac2a6e9ea5627e7d46b8a821c87a", "message": "Close InputStreams in writeResourceRegionCollection (analogous to writeResourceRegion)\n\nIssue: SPR-15559"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39", "message": "ResourceUtils.extractArchiveURL properly deals with top-level war URLs\n\nIssue: SPR-15556"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e835f4d0258b8b3067cd5d121e5826247a69b88e", "message": "Revised png and jpeg mappings\n\nIssue: SPR-15546\nIssue: SPR-15557"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/94efbe26879193d85384484559b7ee91334c4210", "message": "Latest dependency updates (OkHttp 3.8, Protobuf 3.3.1, Rome 1.7.3, Tomcat 8.5.15)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e3f4ccce95b76e5c43a07a226871e0c5f7612d4", "message": "Merge pull request #1394 from alexander-riss/keySet\n\nFix inefficient use of keySet operators in messaging classes\r\n\r\nIssue: SPR-15553"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f985f71daf905fb20d54a62865458a9ebf4439ad", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/650a682659afa17818ec6c149535794801091185", "message": "Upgrade to Netty 4.1.11"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9273197f110f62b0404ca0ae496e7eb6f6463b5c", "message": "Latest dependency updates (Common Annotations 1.3, Caffeine 2.5, Selenium 3.4, JSONassert 1.5)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5497416c2d9e30a9517c721eeb39783d4c8ff160", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f25c6ba9bc40fa9e950b957597f040b9892efc5b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c735eec08b29b414dac28c5f27e7660c1fd3f2b4", "message": "Merge pull request #1421 from kazuki43zoo/patch-javadoc\n\nFix javadoc of AbstractHandlerMapping#setPathMatcher"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/92f18a4985f2eb66551883a77aba5e38a6ddd0a0", "message": "HandlerExecutionChain.toString() includes reliable interceptor number\n\nIssue: SPR-15525"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/25aef4d3ccd050c2b7d177f6156d74d2db1a9e43", "message": "ResponseStatusException reason is optional (with lazily constructed message)\n\nIssue: SPR-15524"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edbf9fa74edc287750d143a7ef767cedb5219036", "message": "Upgrade to Kotlin 1.1.2-3\n\nAlso removes JDK 9 build support for the time being since Gradle 3.5 still doesn't run on JDK 9."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/39f8bd663ee944d92ecd8b1e33b5315807419c94", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4fdd85324d8f10c7dc851c0ad21ac50f48ae18ef", "message": "Aligned exception handling in Jackson and JAXB codecs\n\nIssue: SPR-15516"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba501791c94dcccfe1eb81acbe257e6462724b3a", "message": "Consistent use of WebFlux terminology over Web Reactive"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/429d6ac67d05a0c0537695fc5d19b4c6529036e0", "message": "Defensive handling of test timeouts with RxNetty and Reactor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1083fe6f3fd30a8cacead6a958c727bae8ee2d16", "message": "Upgrade to RxJava 1.3\n\nIssue: SPR-15497"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/652266bcc23f6d5f70e8e7dc7a3265172497f942", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f5eaf20b0353dece9df2d81b309ea6fe1e72d14", "message": "Basic test for functional bean registration within a configuration class\n\nIssue: SPR-13779"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de35ff1198912269c323706f729c995a329adde7", "message": "Latest dependency updates (Quartz 2.3, Protobuf 3.3, Jetty 9.4.5, Undertow 1.4.14)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d43dfc7bae5aa5e81bc51dfb26c1ae1ff1ecc52e", "message": "Properly extract jar file from Tomcat war URL\n\nIssue: SPR-15485"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d86515fa55dbc4ff9ff434effc3a73c1a04c2fa", "message": "Overridable Commons Logging bridge in separate spring-jcl jar\n\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/27057889f88ff523a52739147537d0a06c1f6175", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d74542ed21b5a6c2b93547c73e86e1a85954ca9d", "message": "Honor @Autowired(required=false) at parameter level\n\nIncludes a revision of the AutowireCandidateResolver SPI with default methods.\n\nIssue: SPR-15268"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d8e9cf24372bfe1aae8b93f23c41e19ee7a3483", "message": "Common root cause introspection algorithm in NestedExceptionUtils\n\nIssue: SPR-15510"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f19e57d9d23df3ffa77fa2881b8dd5cf7dc2013", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b709c77329528d98f94716994e98f3feb5ff5d1f", "message": "Multipart file tests reliably pass on Windows as well\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/817e80c56b8efe40e3dc28c68586b1412589d064", "message": "Property actually throws exception for no write method found\n\nIssue: SPR-15507"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ca0094fa1d83de72e8cbaaea3ff8538ae8796d6", "message": "ResolvableType.clearCache() clears SerializableTypeWrapper cache as well\n\nIssue: SPR-15503"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/057e388b6b68f7354f971d90d0c3b6122f90ea80", "message": "Streamlined JAF dependencies (plus upgrade to Netty 4.1.10)\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12a95d8c689e35f180fff59efa6d08d3e7a9f7c8", "message": "Upgrade to RxJava 2.1\n\nIssue: SPR-15497"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f1fa225fe147971ac0345abb7b33aa17053499a", "message": "Latest dependency updates (Groovy 2.4.11, RxJava 1.2.10, H2 1.4.195)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ea54eb2c6dd058501a1806becd7f5acf57197af", "message": "GenericFilterBean lazily initializes its default environment\n\nAlignment with HttpServletBean; consistent use of EnvironmentCapable.\n\nIssue: SPR-15469"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/04f0f137e69a8256078e3a6b1637decb7166cd76", "message": "Aligned exception message for httpOnly\n\nIssue: SPR-15488"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/baa7b1c6c84f64465cecdf6ad2e2bf90371cbd7b", "message": "Simplified match condition checks\n\nIssue: SPR-15477"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/17f274fd6a9d4e73dd505594735a286557dc5127", "message": "Debug log messages for value retrieval exceptions\n\nIssue: SPR-15481"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd95f346662148b6bb9d2c9a2b11eee334b3d441", "message": "Merge pull request #1399 from dreis2211/SPR-15477\n\nOptimize AntPathMatcher when checking for potential matches"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9bde0812fdd1ecfc4091eb6027f7fa649cf55ba", "message": "Merge pull request #1373 from lc-nyovchev/master\n\nHttpOnly Cookie Result Matcher"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0479dc96c43aaccef3217e866eb3523f85e1522f", "message": "Correct attributeHasNoErrors message in ModelResultMatchers\n\nIncludes consistent name quoting and use of Java 8 lambdas.\n\nIssue: SPR-15487"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c668d9a473c3ea3f5c663c481ed60473f3e3099b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3daf626842713178f4f396524865da18850467b0", "message": "Defensive fallback for file system resolution in lastModified()\n\nIssue: SPR-15485"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8b50f887dbf7c18a48b4be8c00eec90265bf7b20", "message": "Caching annotations on interface methods with CGLIB proxies\n\nIssue: SPR-15271"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6c43d14a77287bbf3272251f6e50563357a6c8c3", "message": "Async annotations on interface methods with CGLIB proxies\n\nIssue: SPR-14949"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/42d6d7ec4e2ddabc9c50dab6d6ac572ef46d2a6a", "message": "Transaction annotations on interface methods with CGLIB proxies\n\nIssue: SPR-14322"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/140379fe7e8a7cb5e0d6a5ec934f2174d5e41efd", "message": "Upgrade to Kotlin 1.1.2 GA"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61a4eaf3cfd3f4d21d9f999415e0907f37d25b6a", "message": "Upgrade to Jackson 2.9 PR3\n\nIssue: SPR-14925"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3ffe7a283f237e5b7864b4c21ec977a4d49206cd", "message": "Latest dependency updates (RxJava 2.0.9, Undertow 1.4.13, JSON-B 1.0 M2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/62584a53370a321b2a082abad33c1096b464d65a", "message": "Latest dependency updates (Tomcat 8.5.14, Jetty 9.4.4, OkHttp 3.7, POI 3.16, Rome 1.7.2, EhCache 2.10.4)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e93e49f268ce93ba67d33e71a79f05dc3a195ba9", "message": "ErrorMessage.toString() includes original message at top level\n\nIssue: SPR-15459"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c16c8f26f55ed68f1446b04e165281d883948ecb", "message": "Merge pull request #1395 from garyrussell/SPR-15459\n\nAdd originalMessage to ErrorMessage\r\n\r\nIssue: SPR-15459"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a49a0007b2bf9edd850114b1a1e7a6f4ac7d1e93", "message": "Revised overview (aligned with the 4.3.x line)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/43e806c7333e09419c6db3ada28aeb0960299e70", "message": "Refined log message for interface-implementing method\n\nIssue: SPR-15436\n(cherry picked from commit 665e6cf)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91df0653fe5e22477ec2ed6dbe7e44b835c99038", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d0b879a2313b73bf85abfe45ff0a59897aa6a3e", "message": "CglibAopProxy logs explicit warning for interface-implementing method marked as final\n\nIssue: SPR-15436"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5d3249f6925f841f5b3e1395d81a78b239df0f1a", "message": "Recommendation for consistent @Profile declarations on overloaded @Bean methods\n\nIssue: SPR-15266"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/022aefdfe8656f0aa315dbbd8c84a2e3a816e762", "message": "Explicit note about @Profile declarations on overloaded @Bean methods\n\nAlso marks @Conditional as @Documented, aligned with other annotations.\n\nIssue: SPR-15266"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9abf249cee58f1a23ff6f2f99ab56082a65aa617", "message": "Explicitly replace target ApplicationListener with singleton proxy, if any (avoiding double registration/invocation)\n\nIssue: SPR-15452"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2ba4a224a68b5ff05fb36071d36ada003faa6d0a", "message": "Upgrade to HSQLDB 2.4 and Hibernate ORM 5.2.10"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/29f2c96a3d0754576c64fe4956b55afc75e912ed", "message": "Drop unnecessary modifiers for constants in JmsHeaders interface"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d50dab6ea975a1af1c343bd68f32d0af8e87f006", "message": "Suppress deprecation warning on JDK 9 (for LogRecord.setMillis)\n\nIncludes revised Log methods in log level order, with consistent delegation of fatal->error for log level checks in SLF4J and JUL, a JavaUtilDelegate for defensive access to java.logging on JDK 9, support for LogRecord message objects, as well as revised log setup recommendations.\n\nIssue: SPR-15453\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0b118322b09e7f8b54f63007985fe244ce9c6645", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cec36fe784285b4ec27692f9e4f005c09893b7a6", "message": "Configurable locale/timezone attribute name for SessionLocaleResolver\n\nIssue: SPR-15450"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e55e8f8a6f0fae13e1d04de968c2c7ecce9fd00", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a55a0f26cb5192d7f88ea4f227d62aa2e7311866", "message": "FreeMarkerConfigurationFactory falls back to SpringTemplateLoader on any exception\n\nIssue: SPR-15445"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4838f06d5d06c2e2cf7a437de4eae78a4980f347", "message": "ASM annotation visitor logs IllegalAccessException at debug level only\n\nIssue: SPR-15442"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/093e573aceda50f4e94d35ceec465a3532094f22", "message": "ASM annotation visitor defensively accesses enum constants\n\nIssue: SPR-15442"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1735ba22cb1b3691d6a4a25d80058805d24902aa", "message": "ShadowingClassLoader can be constructed without default excludes\n\nIssue: SPR-15439"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b061556f68798b9cc4b95daa42a6251a04f05528", "message": "LogFactory enforces lazy resolution of non-String messages for SLF4J as well\n\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f162a033bb3bdefe5650eae327b673017bf0ddc", "message": "AbstractGenericHttpMessageConverter calls two-arg variants of canRead/canWrite again\n\nIssue: SPR-15434"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c4e0d6c2a235fe4896276844d20a60f8510acf09", "message": "UnknownHostException as resource-not-found for properties files\n\nPlus first-class declaration of FileNotFoundException in Resource javadoc.\n\nIssue: SPR-15433"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce4eff321cd976df4ba26fe3971642259af891d2", "message": "Optimize StringUtils.replace for larger replacement pattern\n\nIssue: SPR-15430"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3a1d431c7df30cffd70174c635879b0d9dd9f745", "message": "Optimize StringUtils.replace/deleteAny for common no-op case\n\nIssue: SPR-15430"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7fbc20e2251b5afe716361ddeda5a4db6af1d884", "message": "Undeprecate TypeVariableMap methods on GenericTypeResolver\n\nIssue: SPR-15429"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/15b5dd9f1268c84bc16a8f1f5f39f17ba2ab909d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf306037b5be019eaf6876e7271902d05854e7e9", "message": "Support for JSON Binding API (JSON-B)\n\nIssue: SPR-14923"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5fdd4cd1de76303842e47646213054d25242f4f", "message": "Extracted AbstractJsonHttpMessageConverter from GsonHttpMessageConverter\n\nGeneric type resolution algorithm in GenericTypeResolver shared between Jackson and Gson.\n\nIssue: SPR-15381"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea98ee820a34ffcf4cad744ed00a0b921b026363", "message": "AcceptHeaderLocaleResolver returns default locale in case of no supported locale found\n\nIssue: SPR-15426"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5986f881d02e9281862844fb9f2a131be71a2f10", "message": "HandlerMethod evaluates ResponseStatus annotation for early caching\n\nIssue: SPR-15227"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a95843a0684585e09dcb63c7ce06a04c7f16d72a", "message": "Dependency tracking for Supplier-created beans\n\nIssue: SPR-15417"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea5cb26d750f4bd3a1d7c21ce5b46ce677dd99b2", "message": "LogFactory obtains ClassLoader-specific LoggerContext for Log4J\n\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/32bda47ed160f6aa155fb5a4c0fb0a3bbb032f6e", "message": "Latest dependency updates (EhCache 3.3.1, FreeMarker 2.3.26, Log4J 2.8.2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8cb24e0d93c9a073fc9a8b50692c90c2e19a5b43", "message": "SettableTask.checkCompletingThread() only resets marker after match\n\nIssue: SPR-15409"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2566d6f5c89b090eafbd6f1b1df3bb0b976d704e", "message": "LogFactory differentiates between SLF4J API and SPI presence\n\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/702e01ad52c308a2a3197a589b4b83db01ed86fb", "message": "UrlResource applies StringUtils.getFilename against cleaned URL path\n\nIssue: SPR-15411"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67ea4b3a050af3db5545f58ff85a0d132ee91c2a", "message": "package-info for repackaged libraries (and other polishing)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75dd8d9c0688331c0ca06b2e5cd497be49af0d3a", "message": "UrlResource applies StringUtils.getFilename against URL path\n\nIssue: SPR-15411"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3037277d0ed225895fe28e90e1ca3e7436c4c306", "message": "Minimize reflective interaction with annotation instances during retrieval\n\nIssue: SPR-15387"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/699064870fa4eec03154f8be908c53c4b3c3b02d", "message": "Applicable commons-logging excludes for libraries (HtmlUnit, Castor XML, Apache HttpClient)\n\nIncludes upgrade to HtmlUnit 2.26 and Selenium 3.3.1.\n\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45e7b350bdc16ced83ea7607420117a7e550edb0", "message": "LogFactory provides getFactory() with getInstance methods as well\n\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47277f43da050e5f7caa30449a104082333fa318", "message": "spring-core provides custom variant of Commons Logging\n\nIncludes dependency updates (JavaMail 1.6 RC1, RxJava 2.0.8, Tomcat 8.5.13, Undertow 1.4.12, XNIO 3.4.5)\n\nIssue: SPR-14512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/af6f688196856af93412e3a3d694c854cf1d14a4", "message": "Test for BeanPropertySqlParameterSource with collection\n\nIssue: SPR-15390"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f29ffb37f71e09bc1ec98633a87b49875b611f8b", "message": "Compatibility with Servlet 4.0 b05\n\nIssue: SPR-15379"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/917207b7aebfb67f5026254b52e75fa2043ed29f", "message": "Support for @Order on nested configuration classes\n\nIssue: SPR-15384"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e9627a10c7fdbc263601fdd9f0f783b41389ff5d", "message": "Deprecate ObjectUtils.hashCode for primitives in favor of JDK 8's hashCode methods\n\nIssue: SPR-15395"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ddcce4169dd9c885b02cba1180d49d1d5c366e0", "message": "Merge pull request #1366 from arturgspb/master\n\nSpring JDBC not correctly processing Postgresql ?| and ?& operator"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e644c557e7785a9499124572eac236f8ec127f7b", "message": "Latest dependency updates (RxJava 1.2.9, JiBX 1.3.1, H2 1.4.194, JBoss Logging 3.3.1, WebJars Locator 0.32-1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/65ba865d7058a7beb54d9d9dfd519678c93641ec", "message": "Support for populating model attributes through data class constructors\n\nIncludes a new overloaded ModelAndView constructor with an HttpStatus argument, as well as a HandlerMethodArgumentResolverSupport refactoring (revised checkParameterType signature, actually implementing the HandlerMethodArgumentResolver interface).\n\nIssue: SPR-15199"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3154357f0e67034e08e9aae3bfb936d36bead67", "message": "Latest dependency updates (Jetty 9.4.3, Joda-Time 2.9.9, SLF4J 1.7.25)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2236262fc67996b3cde59703e70a76d0e5a6cf2e", "message": "Up-to-date guidelines for serialization-based endpoints\n\nIssue: SPR-15317"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b90d3d0e88eabe4e0bfd42c793cf193c5e1088f0", "message": "Clarification: Spring AOP pointcuts may match non-public methods\n\nIssue: SPR-15354"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b2a6a572d3855699752b54e44a3415f902da952f", "message": "Drop outdated DeferredQueryInvocationHandler.finalize() implementation\n\nIssue: SPR-15363"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/15bff8f9111306812acc992b953d03aebea0af71", "message": "HeaderValueHolder.toString() exposes underlying list of header values\n\nIssue: SPR-15375"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ea4abdb85431e474a0da8219b63155890c36f4a", "message": "Revised supportedMethods null handling in HttpRequestMethodNotSupportedException\n\nIssue: SPR-15377"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b73153cd7c88acf89efcc48500af8f971d6cac83", "message": "StandardMultipartFile.transferTo falls back to manual copy\n\nIssue: SPR-15257"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e892e02f41031ae18f09aef34bf82d31ddbb12c7", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/85f64706a80d53bb340a5d90e3b73920ab934552", "message": "Latest dependency updates (Groovy 2.4.10, Hibernate ORM 5.2.9, Hibernate Validator 5.4.1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ab7db413c69f81e8bdf68c90e560208e366fb9ea", "message": "DefaultResponseErrorHandler delegate methods declared as protected\n\nAlso revises copyToByteArray/String in FileCopyUtils/StreamUtils for lenient null handling.\n\nIssue: SPR-15329"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/012c56a1f071d4ce14b78ce73f287cfb4582b624", "message": "Avoid pattern misdetection in Tomcat \"war:\" URL separator\n\nIssue: SPR-15332"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/79ea77908ac3f68103d06935a0e2100621df988a", "message": "Process NULLABLE column as integer instead of boolean\n\nIssue: SPR-15333"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/899f2359984c4fbf396bfc74a824541b6332eb2f", "message": "Detect Tomcat's \"war\" protocol as jar URL\n\nIssue: SPR-15332"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4e82bf30c6b1fe144f9581cf277c381f03f8a2f9", "message": "TransactionSynchronization declared with default methods\n\nIssue: SPR-14432"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4741b8e42cf8f1d2ca6b83db7fecd8d844b2262", "message": "SpringExtension.getApplicationContext declared as public\n\nIssue: SPR-15340"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e999da0eb0e34c1766ac39b547d294e1a9ec0637", "message": "Upgrade to TestNG 6.11 (and Netty 4.1.9)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cea3a078b2a35677c07137c4cc67010fc3fa1049", "message": "Upgrade to RxJava 2.0.7"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/94a7624c1f6cc7ea26acd41ceaaba7fea01ad6e5", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f30c49816281c62e63433300309d85e0a0786fe9", "message": "Retrieve newly created attribute from underlying request (marking it for update)\n\nIssue: SPR-15300"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc2e635c05ea20076235d1d147117988abbb0ca5", "message": "Lookup methods work on configuration classes as well\n\nIssue: SPR-15316"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8b741508a68472f4cce0d86cc9a82a90f1252091", "message": "Explicit notes on transaction phase processing\n\nIssue: SPR-15323"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9aaed2bcefc5fbdd16c073e679822aeccfb74b24", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f85cbf0d95f5deffa7164db29473e636b54f37e", "message": "Upgrade to Protobuf 3.2 and JRuby 9.1.8"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d7b25f324e3df7c51a9b9cde6247bab2c4255b5", "message": "Upgrade to CGLIB 3.2.5\n\nIssue: SPR-15147"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eeb01db88821b988edbda405d6726149c12dc8bc", "message": "Support for new ServletContext methods in Servlet 4.0 b03\n\nIssue: SPR-12674"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e61e8d5062de28dee0c57707a1f478f2ce96aa53", "message": "Upgrade to HtmlUnit 2.25 and Jackson 2.9 PR1\n\nIncludes Log4J 2.8.1 and Selenium 3.2 as well.\n\nIssue: SPR-15319"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47c4cf7abf231018e102bf51d83dd92c656f8996", "message": "Drop support for Jetty 9.3 and OkHttp 2.x\n\nIssue: SPR-15038"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb47f4c4e23fe422247fe252f5d3d06123e526d8", "message": "Upgrade to EhCache 3.3 and SLF4J 1.7.24"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b3fb2f5cc64b914759f2bdc83f4eb9847a91172", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6556b40c2bec8dbb79b24f5ba337a70adecbc82e", "message": "Upgrade to SnakeYAML 1.18 (with updated duplicate key tests)\n\nIncludes updates to Caffeine 2.4, Jetty 9.4.2, Undertow 1.4.11, RxJava 1.2.7 and Groovy 2.4.9."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d6cf01a421d8f78a1e83a2680f570faef8c098b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d003f6614b2456b50c574f1579e5e97efd4d5b06", "message": "Tests for annotation lookups in interfaces (currently ignored for CGLIB proxies)\n\nIssue: SPR-15271\nIssue: SPR-14949\nIssue: SPR-14322"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d4a1b59b4c02852432814f467bce857bd9f799e6", "message": "Skip transaction/caching metadata retrieval for java.lang.Object methods\n\nAlso retrieves CacheConfig as merged annotation now, aligned with other caching annotations.\n\nIssue: SPR-15296"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8992f5924f37b69e3ecf976ddd97c5714a91e6f8", "message": "AnnotationUtils makes use of Java 8 getDeclaredAnnotation method\n\nIssue: SPR-15287"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d7742b2145833dfbf6e107d8427724b26120ae9", "message": "Latest dependency updates (RxJava 2.0.6, HtmlUnit Driver 2.24, Selenium 3.1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cbd19153c48b8570a2b46e052e549d82ea316a53", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6357c5167aa02c8e3dfe24c761a999411eadb60b", "message": "Upgrade to Jackson 2.8.7 and Dependency Management Plugin 1.0.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f4de1ea1472f6c7ca9b34067d58e2d9a08ad1b5f", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7fb0ad37da156ae9a2c9c236eaa0f0e2a512c462", "message": "ConfigurationClassEnhancer explicitly handles non-interceptable FactoryBeans\n\nIssue: SPR-15275"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6108ab1c31a059777c1c35cc37dddd508285353a", "message": "Test for expected behavior of getAllMergedAnnotations vs findAllMergedAnnotations\n\nIssue: SPR-15271"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d2cc97af47cce39a41bac4b4d73c6f8e76f26cbd", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6242e30539334a04524090d5d1fd142d408085c8", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ddf8ec625c9dbc733ae2a6701b5725283232523", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73493bc490f4cf2010cb5583a286f94678514f64", "message": "Revised imports in tests (org.jetbrains.annotations.NotNull etc)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/370e3d683a648db506056fcb2af3394e5fea70ea", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc113210104082f96ec6516a66d2397f9d23554a", "message": "ServletRequestMethodArgumentResolver passes null references through (again)\n\nIssue: SPR-15214"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3ad4229f5317b9665003d54e20ccfa80e45a80b", "message": "Upgrade to Gradle 3.4 final (and Hibernate ORM 5.2.8)\n\nIssue: SPR-15207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45df1d9feaa1a2d5067d226308a51d362c2e5de4", "message": "Javadoc fixes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/214d0d76a5e149b0b848fd7fcc6b94863cb15ebe", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f51ff5ebc33201218be6616e7eb3600f24f1960", "message": "Reset global rollback-only status when rolling back to savepoint\n\nIssue: SPR-6568"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ee0626c94e6862fc21c99257e53433ee7ce4d36", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74bdcd8ed4553a8b36f7ae44000bd887089118d6", "message": "MutableMessageHeaders serializes itself as regular MessageHeaders\n\nIssue: SPR-15262"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0da8dee289e4cbe353d4bd6cc0935cd62ab27901", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8d707eb5304e42babe3d680c5cd3880869cfabe2", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9543384d9e3b7c51aa997a47b3758a0284ff72d4", "message": "Avoid deprecated comparators in tests\n\nIssue: SPR-14779"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f90cd7705f99c4b3bc34c8b3b4c023d0bc960bde", "message": "Consistent ordering of Assert variants\n\nIssue: SPR-15196"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/22322fde264d8f0cdfce6b0ac2083dcc966d9b0d", "message": "Revised isInstanceOf/isAssignable message concatenation\n\nIssue: SPR-15196"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c04a65eb1db736f1bcbf6b348bec0f6888da187", "message": "Merge pull request #1329 from kmiya/patch-1\n\nFix typo in Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50d93d37943f08b692f740a563eff3030165a62c", "message": "Consistently support CompletionStage next to CompletableFuture\n\nIssue: SPR-15258"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dbf5b1e5730e790f4356e8bd6cec069126f20acf", "message": "Latest dependency updates (Apache HttpAsyncClient 4.1.3, SLF4J 1.7.23, BeanShell 2.0b5)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/599c1ba73e5e4b0097dd290af4abc67b3283a69c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f531a7a7d0a6d2c3ad099ca8014192af847a94e", "message": "Comparators entry point with generically typed factory methods\n\nIssue: SPR-14779"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/07dd61eabdfe73a816cc71b44191afc8bbafcb51", "message": "Drop NativeJdbcExtractor mechanism in favor of JDBC 4 unwrap\n\nIssue: SPR-14670"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54f01cffaf6bb68e5f9adf5029ded0f9da9ee581", "message": "Drop weaving support for pre-Servlet-3.1 servers\n\nIssue: SPR-14467"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a3561168b091cd03b104f7af6d85d063fe2a9d58", "message": "Merge pull request #1326 from JanespenCerpus/fix-resttemplate-mockmvc-encoded-uri\n\nSPR-15254 RestTemplate with MockMvcClientHttpRequestFactory double encodes URIs"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44ec6e003762b8bf571b0735746249f4697440e0", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/199aa776c96d9a50ff4fcbf18673eb59960c6d48", "message": "Support for Servlet 4.0 (PushBuilder argument, MockServletContext)\n\nIssue: SPR-12674"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d44325ec91e7245f55c7c637fe9d473fdf194ddf", "message": "Defensively ignore multipart parsing failure in case of error dispatch\n\nIssue: SPR-15231"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5b98a54c9b9f8c2f4332734ee23cd483b7df0d22", "message": "Latest dependency updates (RxJava 1.2.6 & 2.0.5, RxNetty 0.5.2 GA, Tyrus 1.13.1, Undertow 1.4.10)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e9019cd7d108edbdd46a53fed18ccb5904a0abe7", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e1bb697cf9d7dcc5eae95d3f2ae00326ca1546c6", "message": "Correct explanation of example patterns\n\nIssue: SPR-15240"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c0f4d78ef9b9e03836baa31ac3ada0b4c48197e7", "message": "Use Map.getOrDefault in getSqlType implementation\n\nIssue: SPR-15238"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/81aca78579df061e08aa0e6a6488b3e4d3ebb3dc", "message": "Delegate to common ClassUtils.getQualifiedName\n\nIssue: SPR-15237"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed853379019eae3f6d2b0429a9d2ba4530dcdc3e", "message": "MockHttpServletRequest exposes \"HTTP/1.1\" as default protocol\n\nIssue: SPR-15232"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/65d8d698cded8e8222170907e55eee8d2582ff36", "message": "Test for ObjectFactory injection at constructor level\n\nIssue: SPR-15222"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/448ea4cdfe30c732f4c5dee0ce020ddb5d64dceb", "message": "Consistent logging in ignoreResourceNotFound scenarios\n\nIssue: SPR-15218"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b630c9bea77e211d4078a58fabd6ece0b0998790", "message": "Clear synchronization before triggering afterCompletion callbacks\n\nIssue: SPR-15194\nIssue: SPR-11590"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50156139348d744811390ff8e62d7a831ab57fda", "message": "Enforce delegation through single overridable registerBean method\n\nIssue: SPR-14832"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/caf11a49ffd86be8856466d1fd8e3887fbca256f", "message": "Drop unused LobCreator synchronization utilities\n\nIssue: SPR-13827"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ab50f7b0d583565f9428a1d917524c6bbe1e4237", "message": "Merge pull request #1320 from dreis2211/SPR-15237\n\nUse Class.getTypeName() where appropriate"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/acf511ac0ef2f3151a0662a1d0437bf70d5463cb", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/02195f5abfdfe6e99588446bbcad3046113bcacb", "message": "Support for read-only transactions through explicit SET TRANSACTION statement\n\nIssue: SPR-15210"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b3131ffbaa7a4bb312dfad66d685a348ee7e61f", "message": "Skip default Content-Length if Transfer-Encoding header has been set\n\nIssue: SPR-15212"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e44533f4c21a7dba303ac075363f26e054b0c5bf", "message": "ServletRequestMethodArgumentResolver validates argument type match\n\nIssue: SPR-15214"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0da964f0a76a1e1b5ea95210081f5bac2a2fc603", "message": "MockHttpServletRequest returns empty BufferedReader in case of no content\n\nIssue: SPR-15215"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9b99daa740ffe029a25b6ff46cb29a891ea097b", "message": "SettableListenableFuture centralizes state in ListenableFutureTask subclass\n\nIssue: SPR-15216"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ebaf6e1c24aee961a852998645c9c1fc527c025e", "message": "Upgrade to Hibernate Validator 5.4 final (and Netty 4.1.8)\n\nIssue: SPR-14998"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9666fcc41dca4c8014c40736527d9eacf91893ed", "message": "SettableListenableFuture consistently tracks cancellation state\n\nIssue: SPR-15202"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b26fcd7d2f9df2ec5cfc584f27e4d70431d7942", "message": "Refined assertion messages\n\nIssue: SPR-15196"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f84907a1fc8180c121593ac52c1cd28dec28899c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9243a147946405e0bad69b7430104753dbfc34a1", "message": "Test for correct handling of multiple header values\n\nIssue: SPR-15166"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/23aac2de8c53903e91f74c2fd16f332eb77b5326", "message": "Retain single-arg assert methods in deprecated form\n\nIssue: SPR-15196"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1b2dc3638f90508dbc98dcd8a518153fb0db62d0", "message": "Revisit Assert to avoid single-arg assert methods (with refined messages)\n\nIssue: SPR-15196"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/768802fa96afc641ce69e2d72cf9a994b411fd2e", "message": "ResourceHttpMessageConverter reads Content-Disposition header to expose filename through Resource\n\nIssue: SPR-15191"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f51b896bd92c4f1d56afcdc982ebafec37eed275", "message": "Latest dependency updates (OkHttp 3.6, Apache HttpClient 4.5.3, Log4J 2.8)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8038fb9c8b211278e0ce1c8e20f43743dff869ce", "message": "HandlerMethod pre-resolves parameter types at construction time\n\nIssue: SPR-15186"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a57d4512e82aa05dc7a92a0686a6736ae38bfe7", "message": "Reset cached ResolvableType on increaseNestingLevel/setContainingClass\n\nIssue: SPR-15160"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5e946c270018c71bf25778bc2dc25e5a9dd809b0", "message": "Consistent type variable resolution for arrays/collections (in particular at field level)\n\nDropping GenericCollectionTypeResolver in favor of direct ResolvableType usage.\n\nIssue: SPR-15160"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e8776f80dab416517a2ffeb2e55517eeee32e80b", "message": "Revised CookieLocaleResolver parse exception handling\n\nIssue: SPR-15182"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12973ac702d2262c3ea5c785a332ebc6fce0391a", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb242894a9efaa3b02894a623900f161d4aa7570", "message": "Upgrade to Jetty 9.4.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f095aa20eb8da585f05c772a17518a7fe40b3ed1", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e94fa3f34d95a788c94218285fdbb80a7e0398d4", "message": "WebSocketSession.getExtensions consistently exposes unmodifiable/empty list\n\nIssue: SPR-15180"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0df36dddab474971db0b211a62603ce712c3b29", "message": "HiddenHttpMethodFilter defensively proceeds with original request in case of error dispatch\n\nIssue: SPR-15179"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ecc22f717970a1dea1e76d5c0ea633bd29a84232", "message": "DispatcherServet.checkMultipart considers MultipartException cause as well\n\nIssue: SPR-15178"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7d3fcaa934ad0fefd4a7097e659caa60a9bac856", "message": "Consider abstract classes with @Lookup methods as candidate components\n\nIssue: SPR-14550"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed40b1c8ee2c86a2e2055c6d54f34cb0d7207ecc", "message": "Remove outdated abstractions/delegates from core/util\n\nIssue: SPR-15159"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6fe7e56598e7ad8fad52d7bec6c2f07d2483e3e5", "message": "Document further configuration class restrictions\n\nIssue: SPR-14602"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/253060c21c8fc2de0ee0fab0bbc56ff6624d1517", "message": "Only expose ASM-driven method order if the methods match\n\nIssue: SPR-14505"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a9ae2c34020c291cb374030989671fb50d72317c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e566e25b6f7702858ae7d1ed6b3cbeae6bf95122", "message": "Clear nonAnnotatedClasses cache in afterSingletonsInstantiated\n\nIssue: SPR-15175"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55554143d70d3ef5a8fa8df039e4f67b46dc6a21", "message": "Upgrade to Objenesis 2.5.1\n\nIssue: SPR-15146"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54e2d63d6f6f4e9467fe4bcba0c83306c6d60ba4", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69326dbf9ae7f8ec908bedd97cc52d0035f9edba", "message": "Upgrade to Hibernate ORM 5.2.7 and Rome 1.7.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee71e7bae1fe7039dd3ad994cf501d3b4df5ebbd", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bea934b5bdf2988bbc088ebd8ba9edff4c70158a", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d21b6e596fd54381c8bbbb5cf80d28d302faf6a6", "message": "Revised Charset handling and common StringUtils.uriDecode delegate\n\nIssue: SPR-14492"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/af7289d6e9879f7494c1c18b8e2112afa5890dd4", "message": "Clarify WebContentInterceptor path mappings and efficiently match them\n\nIssue: SPR-15096\n(cherry picked from commit 801b93a)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99dc96b1a47394740b0db4bf15e67d9abd27a25a", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ad5386773e8d501215da9b2218917c97ecaa9994", "message": "ContentCachingRequestWrapper supports content cache limit\n\nIssue: SPR-14829"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/976d32fc5943a11668b12e83621feaa197677ec4", "message": "SimpleApplicationEventMulticaster defensively swallows ClassCastException without message\n\nIssue: SPR-15145"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/052014783a6f40cc231a3c56192e78a4704906c4", "message": "Remove outdated BeanFactoryLocator documentation references\n\nIssue: SPR-15154"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/874b65331435a6f7d8c81b77f4b1c80c4960d957", "message": "Clarified cookieMaxAge default\n\nIssue: SPR-15155"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2047f8d5ae4f00a1085c32251cbcde23dc2678d3", "message": "Reference documentation for Groovy bean definition DSL\n\nIssue: SPR-15153"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54da4a8c8e4e60f17f9295dc3df8ad58974f149d", "message": "Correct reference to XJC classpath"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac6aa53031b361e4ea8c74c6bdb4035715f37fb4", "message": "Drop outdated BeanFactoryLocator / beanRefContext.xml mechanism\n\nIssue: SPR-15154"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d96738d61337e52398d7bfd5cf8a066142637ccc", "message": "Revised indexer implementation\n\nIssue: SPR-11890"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c42d44a42c83ee44d91f99bf41072bdc62cb9d48", "message": "Polishing and documentation fixes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5471d6a465b1e2c86942615d4112d2bdf7d04ede", "message": "Revised indexer implementation\n\nIssue: SPR-11890"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e9db4d6f96e98a3bf1cf84fdf2463612363dcae3", "message": "Proper resolution of Optional.empty() for header arguments\n\nIssue: SPR-15151"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/46fc7fba8f173b1ef2c1644e9a4c385edb6af758", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e59f4004eb896e9136e4c965184710d2ddd23663", "message": "Use MockitoJUnitRunner from Mockito 2's preferred location\n\nIssue: SPR-14880"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95330d0e44356f98b591e4c865f6864a2b2be7d9", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1922f03d24247001571e38e38ecea497c274b51f", "message": "StandardMultipartHttpServletRequest identifies MaxUploadSizeExceededException through keywords in message\n\nIssue: SPR-9294"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/62e530ec94fe2b9a60f15739356ef70065aa4371", "message": "Resolve minor 4.3.x deprecations in master\n\nIssue: SPR-15139"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/047786acef33021ef7eb5a4d063c4d588866e6bc", "message": "Revised InvocableHandlerMethod exception messages (controller vs endpoint vs handler)\n\nIntroduces dedicated MethodArgumentResolutionException for spring-messaging invocations.\n\nIssue: SPR-15139"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74596a6f1ed3bed2853d79ce1c1c228ca3400db5", "message": "Upgrade to Objenesis 2.5\n\nIssue: SPR-15146"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/153fd82946c350a0c42be2dbd13774d5ee9ffc0c", "message": "SimpleApplicationEventMulticaster defensively handles ClassCastException without message\n\nIssue: SPR-15145"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/32fc855dd1ae2485ef7a23abc7711ef620fad052", "message": "Introspect FactoryBean class declaration if no early instantiation possible\n\nIssue: SPR-15125"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e88e8f1d094351a27d2aa758459d8dbf985eda5b", "message": "MockHttpServletRequestBuilder reliably detects form body content type again\n\nIssue: SPR-15116"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb9e561934b012a65abe7e912b921700c59fe117", "message": "Upgrade to Hibernate Validator 5.4 CR1\n\n(plus Jackson 2.8.6, Netty 4.1.7, JRuby 9.1.7)\n\nIssue: SPR-14998"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d6c1d0d3fc44edce52b27b8007c9deae634bc79", "message": "Upgrade to Gradle 3.3\n\nIssue: SPR-15138"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1cb381e9a78b0f6435eb56a5066aa31a2193c41a", "message": "Consistent deprecation markers on JDK 9"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08c2fd4e7ca655cd376b3c700a61b0251d2add21", "message": "Upgrade to Groovy 2.4.8 and Mockito 2.6.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7c05b427a7e2aebbfc70af2a2de49847986f2146", "message": "MimeTypeUtils constants cleanup: removed web media types\n\nIssue: SPR-15137"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/743ce2cda6d802f6ac20bc2b251ae984b511362d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e19dff179e462d3726e0ccb1d4e7174ffd65d81e", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/02d727fd7c9f6fe7b5d610c4cb112651c2a3e4d7", "message": "MockHttpServletRequestBuilder supports multiple locales\n\nIncludes revised content type handling.\n\nIssue: SPR-15116"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d0e93284f346cb93fbb046c5915a74fda92a6b8f", "message": "SpringValidatorAdapter properly handles HV-5-style list constraint violations\n\nIssue: SPR-15082"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b06423a5f8a05318976f7c1c1340d3d4b650d922", "message": "AbstractMessageSource does not attempt to format code-as-default-message\n\nIssue: SPR-15123"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8084da59a74baee7ba8404e5c4b300a875159868", "message": "Map resolution for multiple beans applies to plain Map interface declaration only\n\nIssue: SPR-15117"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e6aa0ff59b972f7b79be8e2b964d3c0354d116a", "message": "BeanDefinitionBuilder supports factory method on factory bean\n\nIssue: SPR-15098"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de4349792b56254476f513a40948aaa998308cf2", "message": "GenericTableMetaDataProvider falls back to single schema as default\n\nIssue: SPR-15090"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50e5a65b2d76e0b62b262a6caf071698963d75b8", "message": "LinkedCaseInsensitiveMap provides case-insensitive keySet again\n\nIssue: SPR-15026"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/60882ceb4e207f9c846eacd2626a49b50307a110", "message": "Merge pull request #1286 from trisberg/SPR-15107\n\nSPR-15107 Updating MySQLMaxValueIncrementer to not rely on MYISAM"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0403fe340d2ec64474cf4cc0527bf33c2e476c62", "message": "Merge pull request #1287 from markhobson/SPR-15109\n\nIntroduce mime/media types for application/rss+xml"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/31f7860a40493f56ba71af2043d3e39a257fd830", "message": "Merge pull request #1285 from dreis2211/SPR-15094\n\nImprove performance of StringUtils.capitalize()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74fa088c7efdca272b610f26f6baf0593292d208", "message": "Latest dependency updates (HtmlUnit 2.24, Joda-Time 2.9.7, RxJava 1.2.5 & 2.0.4)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e8a082fbe1851745cf225a0062aba71231c29330", "message": "Clarified setAutowireCandidate semantics (plus attribute reordering in BeanDefinition)\n\nIssue: SPR-15072"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ccabff6ba3f89a24fe48c27ae753cb704b7f6f33", "message": "Upgrade to ASM 5.2\n\nIssue: SPR-15071"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/311522bc864b07645d31b5d62536664e108403b6", "message": "Run reactive integration tests only as part of performance group"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc629bb508f950fe4a0f62b42395299677f7819e", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a5c6658d2cc025c34c711aa90b280cefd0643f68", "message": "Track bean dependencies for calls between @Bean methods within @Configuration classes\n\nIssue: SPR-15069"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edc62be2310acbce918f742bb6960fcd69d413d2", "message": "@Scheduled reliably applies after other post-processors and shuts down before TaskScheduler\n\nIssue: SPR-14692\nIssue: SPR-15067"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e38c020535dc5d6b326d5e22f8a59dc35ba7361a", "message": "TypeDescriptor efficiently matches equal annotations as well\n\nIssue: SPR-15060"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/209e7a700dd2f0f5bf478e28c04437513161bed7", "message": "Avoid FactoryBean initialization on isSingleton check for decorated bean definition\n\nIssue: SPR-14892\nIssue: SPR-15042"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cff311b03cbd2b092269dbeef79992c675527139", "message": "Remove outdated JpaExceptionTranslatorAspect\n\nIssue: SPR-15047"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c62b1eaf7d3761c9760cf3e87b577c009a35edd", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7818c650ba3ad567cff2975b408509679d03e663", "message": "Cache ASM metadata at the context level (if supported)\n\nIncludes streamlined ClassPathBeanDefinitionScanner setup.\n\nIssue: SPR-14654"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/048098119efedbea0461539623188ed2af785bb7", "message": "PATCH does not work with the standard JDK HTTP library\n\nIssue: SPR-15052"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb94ba6e3ff8dfc053c5808d337289e8df37e935", "message": "DateFormatter's ISO patterns use XXX timezone notation (as per SimpleDateFormat's javadoc)\n\nIssue: SPR-14675"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/64d6561cbbda4d5a74cd0f3ce5983e29c9d42b89", "message": "AbstractNestablePropertyAccessor's setPropertyValue refactored into several delegate methods\n\nIssue: SPR-15053"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47be2d8786f8690efd04d12ce5ed34ced2000247", "message": "Upgrade to Undertow 1.4.8 and XNIO 3.4.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8741dd3716b54be7b65f9e722166627d67b793e", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f805427629ff00eddf511fe3356b515174f2fb17", "message": "Detect generic type match behind interface-based proxy as well\n\nIssue: SPR-14097"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/020819880404f596e6361688bf32035c4a3a6174", "message": "Expose reflection metadata with ASM-driven method order\n\nIssue: SPR-14505"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd41f63ec065b890a539451532392fa9b5bb0b28", "message": "Clarify programmatic contract (no annotation-driven injection)\n\nIssue: SPR-8704"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef5c79756911416220959a08a7dbb3de3a6dcd3c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3295a4e6ef43c3e3053f41404ccf7da6ab53f310", "message": "ConfigurationClassParser enforces @Bean declaration order through ASM metadata\n\nIssue: SPR-14505"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8147c112f542c3ec384a177c11aafe3b9603deec", "message": "LinkedCaseInsensitiveMap delegates to LinkedHashMap instead of extending it\n\nIssue: SPR-15026"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3f97e309290ea9a9654f9fe77292f833ee7f2be", "message": "ObjectProvider offers getIfAvailable/getIfUnique variants with default supplier\n\nIssue: SPR-14980"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54b8aab1c600f697b1de59df7f0400fdf1d076cd", "message": "Kotlin plugin conditionally deactivated on JDK 9"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f51fe5fd39210648ed78055eb3899c1024960b56", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e788b8467d2680ee727c9f88ceac746710eb59c8", "message": "GenericApplicationContext offers Supplier-based registration with BeanDefinitionCustomizer callback\n\nIssue: SPR-14832"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c48daa8ebf16f5ef2f6dac28ab0ffd1aaac5878", "message": "Remove unused Log object from MessageHeaderAccessor\n\nIssue: SPR-15045"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2819f7c78165d96e8e27f017bd5677c6c3844843", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ae62341fa3d0a9d8de5e0d9e2b8a8dc39fd1c4fa", "message": "Avoid deprecated Scheduler.shutdown() in favor of Scheduler.dispose()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d64d9ab370bfdeffdc185f89c33ecfb1eee7e239", "message": "Consistent ClassLoader propagation and ConcurrentHashMap setup for AspectJ pointcuts\n\nIssue: SPR-15040"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b54aee27bedda88e0c49903c16b67d035b19701b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/598122fe8a17e1ae190675ed773be5953f622dec", "message": "Avoid package cycle between http.server and web.util"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/98d306f558e85175c1af78130db012cc17078f9a", "message": "Upgrade to RxJava 2.0.3 and XMLUnit 2.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4125825cf3f45a39200baa37d387359d686d01d0", "message": "Upgrade to Hibernate ORM 5.2.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/483abfe2665ee6cc3acf92f3ccbf9a3b934cb8fa", "message": "Avoid explicit DecoratedObjectFactory setup in JettyRequestUpgradeStrategy\n\nIssue: SPR-14940\n(cherry picked from commit 709d4ba)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/82c1c859d9feee91590a9facb9d1142d074f3307", "message": "Polishing\n(cherry picked from commit 9cb4de8)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/154ef8bf10973286438a91e948ff75c2f7cd923b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9005481a4993937ec88d447c8ba3472579f5b170", "message": "Supplier registration support for annotated bean classes\n\nIssue: SPR-14832"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97ea22cb4a29b3ec683b39d8dbf5c550fb980f30", "message": "Defensively catch any exception from match attempts (for compatibility with AspectJ 1.8.10)\n\nIssue: SPR-15019"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6b2a212066c97eabdd861044cb72dca78b0f80d", "message": "ConfigurationClassPostProcessor programmatically registers unified ImportAwareBeanPostProcessor\n\nIssue: SPR-14931"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c55d22f782a86219fb263b58c77f024cc01e45f", "message": "MBeanExporter silently ignores null beans\n\nIssue: SPR-15031"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7867e564946647399bd819fd1af878e6d738f990", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3ee6286eb5d2993c66fcb468ecc48d4c7afde0a4", "message": "Support for functional instance supplier callback at BeanDefinition level\n\nIssue: SPR-14832"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12aa14ddbc9fe1699bbd0f559b15074946a1c2ed", "message": "Support @Nullable annotations as indicators for optional injection points\n\nIssue: SPR-15028"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4c005e6336e1a5a7c2b5eac83e8efe61c2ce5d29", "message": "ResolvableType-based matching respects generic factory method return type\n\nIncludes consistent use of ResolvableType.resolve() wherever applicable.\n\nIssue: SPR-15011"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e9b4cac47f37e9ddcc18b89388c3689976c1258c", "message": "Latest dependency updates (EhCache 3.2, TestNG 6.10, SLF4J 1.7.22, RxJava 1.2.4, Kotlin 1.0.5-3)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9ba4b47bee166f818484c2e2d312cb2e9acc08dc", "message": "Defensive processing of timeout callback and timeout result\n\nIssue: SPR-14978"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8a7467020f11f95bd47c55f54abc454278788407", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37c734ec90fd695c4674fd1efd13c77065c2aa9b", "message": "Consistent DeferredResultHandler invocation outside of result lock\n\nIssue: SPR-14978"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/23f0418337d14798b401009e51ada89b56c52b69", "message": "LocaleContextHolder provides support for framework-level default settings\n\nIssue: SPR-15017"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3370f41c610a0b2f600a2112a6a9ddaf6cf93796", "message": "Defensively catch IllegalStateException from match attempts (for compatibility with AspectJ 1.8.10)\n\nIssue: SPR-15019"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/29543856ec6f9eb173d796ac31b4aba8dec2452c", "message": "OkHttpClientHttpRequestFactory allows POST request without body\n\nIssue: SPR-15015"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d1cae2f577e08ef28a21143404f4db1ab12dcaf", "message": "Avoid proxy replacement for generic return type signatures\n\nIssue: SPR-15010"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/58eccfe5bdab21212c19f39a1ab635a0e5f541d6", "message": "Remove setExtractOldValueForEditor at DataBinder level (to be deprecated in 4.3.5)\n\nIssue: SPR-15009"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b366e159f82e5cfd28dad741e84d685d9f687cbf", "message": "Fine-tuned handling of running state\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/35eaeb56364d755ad2e3bf5d83f6cd982b118330", "message": "Merge pull request #1269 from moores-expedia/use-rowmapper-hook\n\nSPR-15018 - Construct RowMapper using the impl hook"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/39d2769bd0cee82e15104b7d10201a324e81656f", "message": "Autodetect Kotlin nullability for optional injection points (analogous to java.util.Optional)\n\nBuilt-in support in MethodParameter and DependencyDescriptor supersedes our separate KotlinUtils helper.\n\nIssue: SPR-14951"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/361ab6b6219b4e44908bab206b18e185d8f76bb4", "message": "Merge pull request #1266 from kazuki43zoo/SPR-15009\n\nSupport lazy initialization of BindingResult when customize a MessageCodesResolver"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5169c51a6c5a7ac3911a367bd855f574632c95c6", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eeb7ae537feb79c7ed1a585e2c76f43bd021ef06", "message": "@RequestBody supports java.util.Optional\n\nIssue: SPR-15007"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e49813f2c4c6bb645c0990b3bd0fc290fc7c9f8e", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aef1460a64628739146a0b91df708933931d0a60", "message": "TypeDescriptor properly narrows ResolvableType for non-typed collection elements\n\nIssue: SPR-14971"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8b5ee4ef9150dd3294e005225c215a1fa6f52fa1", "message": "AutowiredAnnotationBeanPostProcessor tolerates annotated no-arg constructors\n\nIssue: SPR-15005"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b825528d01c6d166118bf0cdd4f238d6b30864e1", "message": "SQLErrorCodesFactory provides unregisterDatabase method\n\nThis commit also migrates from a WeakHashMap to a ConcurrentReferenceHashMap, allowing for concurrent access to existing cache entries.\n\nIssue: SPR-15006"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/04ed5910ba7772682f506f5f82c6f44e6dff5f41", "message": "Upgrade Gradle Wrapper version to Gradle 3.2.1\n\nIssue: SPR-14906"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/66e6b35e9ff990c871d873137d1cb6e37d760378", "message": "Reliable content length check in ResourceHandlerFunctionTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f7ea469897fefa79f1da7ab7839746b8d6b49e03", "message": "Latest dependency updates (OkHttp 3.5, Tomcat 8.5.9, Undertow 1.4.7, XNIO 3.4.2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/547b9638dc851e8b25bf719abc30acc1a49b3ff6", "message": "Collection injection may refer back to factory methods on same bean again\n\nIssue: SPR-14996"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa29495d1d00d633875ed1872622fe03ed4dc600", "message": "CommonsMultipartFile.getOriginalFilename() can be configured to preserve header-specified filename as-is\n\nIssue: SPR-14613"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/39739b3157b7afc5997013e127b237853da68d12", "message": "Upgrade to Hibernate Validator 5.4 beta 1\n\nIssue: SPR-14998"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/52799c0e3d14662f01e1e381ddbbd57981d89d4e", "message": "Revised Jetty 9.3 vs 9.4 differentiation\n\nIssue: SPR-14940"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/953bc189e706950ac25cb36b95d62afb9b0d2740", "message": "Stronger explanation of default rollback rules\n\nIssue: SPR-14994"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7714eeccf322c93159c81b759f18300051a14b2b", "message": "MimeType parsing properly handles quoted semicolons\n\nIssue:  SPR-14986"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a7ec6dc0afb5ad83371ed073a26a31cb9e1dd4f1", "message": "ImportRegistry properly tracks excluded superclasses\n\nIssue: SPR-14972"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf6a5835cccf42cc8ba615998fa3f3cda10e096c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/313c89dd5c3dc144d0f43ca8b3f56930dd36c1ac", "message": "Overloaded methods with java.time.Instant/Duration parameters\n\nIssue: SPR-14875"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/278a6250e6643eaa856c62faf047b33201a7ab99", "message": "Explicit support for retrieving enum values\n\nIssue: SPR-14990"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee30ce95fe466ad239b04decde002ca095c12350", "message": "HttpInvokerClientInterceptor propagates client-side Error as-is\n\nIssue: SPR-14985"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ab977e7d143d6d3be7ccd09a94c23995ed4fbdc", "message": "Revised forClass argument names\n\nIssue: SPR-14976"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f80b8485aa3a1e3867d7cd81d30f93678a56825", "message": "JPA/Hibernate docs: transaction management, JTA setup\n\nIssue: SPR-14957"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/05579fd1b9e1e75e28d31e32b49efc5834c28186", "message": "SpEL docs: supported literals, null comparisons\n\nIssue: SPR-14361\nIssue: SPR-14987"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6517c53768851690a0fe213610cc291860ba1154", "message": "Consistent use of \"URI variables\" terminology\n\nIssue: SPR-14969"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1039fa1d34f5b2d52700646f7f4d8720dba8445f", "message": "Avoid defensive check for Servlet 3.1 Part interface\n\nIssue: SPR-14467"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6fc0a86b3d6ac499d704118612f7ec76cb2f064", "message": "Polishing\n(cherry picked from commit 0028b29)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7a8ec4f6ebf21f2c29ced3134863af8f8cc6b6c8", "message": "Consistent use of \"URI variables\" terminology\n\nIssue: SPR-14969"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/845dbf040dcff315157678efd6d8b17628266b01", "message": "Test injection point match for narrow target return type\n\nIssue: SPR-14960"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ae17c27dfc69d1a3a4bc70179ce907984c7b85a", "message": "Efficient ISO_LOCAL_* variants for printing LocalDate/LocalTime/LocalDateTime\n\nIssue: SPR-14958"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5458a427a111b293ae39c4f5d753eb4bd973a21d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/01868096a30df950a7116a7f228d5dd18ff5c9a5", "message": "Consistent catching of Throwable for introspection failures\n\nIssue: SPR-12889"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6b8b84df9f64ee8b3300695078eed39789188ea", "message": "Efficient type plus annotation comparisons during converter retrieval\n\nIssue: SPR-14926\nIssue: SPR-12926"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac5933a7acc343f3ba77e6a7a3a667ca66838a1a", "message": "Various DefaultListableBeanFactory clarifications\n\n* getBeanDefinitionNames defensively returns a copy of the bean definition names array.\n* copyConfigurationFrom provides an independent AutowireCandidateResolver instance and copies a ConversionService and dependency comparator configuration as well.\n* findAutowireCandidates only considers a self reference fallback for direct dependency declarations, not as a collection element.\n\nIssue: SPR-14897\nIssue: SPR-14921\nIssue: SPR-14965"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f9a775a8ebd77da5014a402e02377a20640e377", "message": "Upgrade to JUnit 5.0 M3\n\nIssue: SPR-14924"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8cb7e026e20b67461d084e15ccb9d5b267c9cafe", "message": "HttpRequestPathHelper in new web.server.support package\n\nIn general, web.util is supposed to remain lowest-level, not depending on any other web.* package. Since web.client also has a support package, a corresponding web.server.support package seemed appropriate for a helper class depending on ServerWebExchange in web.server itself."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/10d5926b1adc61b260bb079d08609122779aa4c2", "message": "Direct use of Bean Definition 1.1 ExecutableValidator\n\nIssue: SPR-13481"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f065589a37649b6d6ed9a04eb17c1b445b0d5532", "message": "Avoid defensive casts against Java 8 default methods\n\nIssue: SPR-13188"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4f37fdb133516608378257f984a4dcededa678f6", "message": "Latest dependency updates (Hibernate ORM 5.2.5, JOpt Simple 5.0.3, JRuby 9.1.6)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b22a59a0c4ea118147dc45c563d68234b8692d97", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0b71e3640b6626fd2be81d8f9dac184fada37ad2", "message": "Avoid defensive check for Servlet 3.1 setContentLengthLong method\n\nIssue: SPR-14467"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80931b211c372fead567b5e2eed30c91226fd660", "message": "Shared DefaultConversionService instance for simple fallback purposes\n\nIssue: SPR-14948"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14eba5034d40c04f0b7a8b2aa3d47e6fdcf31922", "message": "Consistent ExpressionException-style quoting of expression string and position\n\nIssue: SPR-14942"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f4c6de287d3022c058d8dbf5a0713f11a69671e", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/200fa5ed6733f0e5bcd5238e56a6666e933a8edc", "message": "Latest dependency updates (Hibernate Validator 5.3.3, RxJava 1.2.3, Undertow 1.4.6)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3e94dc747715b468775312458ac0c9eef6f89f8", "message": "PathMatchingResourcePatternResolver tries all root URLs (any file extension) as jar file\n\nIssue: SPR-14936"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/89802cfc11bc7b94387bf75f376dc08218e3946c", "message": "TypeDescriptor avoids merged annotations for equality comparisons\n\nIssue: SPR-14926\nIssue: SPR-14929"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8662b7773c01c710aa44b684b292335695199436", "message": "PathMatchingResourcePatternResolver converts manifest entries to absolute paths\n\nIssue: SPR-14934"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/96bfc14dba7691f0f8cd893ac90b39e09ac8ae1a", "message": "No warn logging for propagated original exception\n\nIssue: SPR-14907"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9bf4d7cf4e6a6aa303616d9e496cdad26a3c1ceb", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/85b0ce1ef78ea0aa795e80821e206cc851c9894b", "message": "Avoid defensive checks against java.time API\n\nIssue: SPR-13188"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0fee4657daf22ccdb55fdb1f2731cfcd7001bdd", "message": "JdbcUtils explicitly extracts SQL date/time for JSR-310 LocalDate/Time\n\nIssue: SPR-14898"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3b49aacb9f2d54bb16775d03302380430d2ac0a1", "message": "Merge pull request #1241 from dreis2211/registry-user-count\n\nImplement allocation-friendly method to get user count in SimpUserRegistry"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/da63898d5fdefa7fc9946791a580bb420fdc3c5d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a49809b1a4a250360426a6f59f594623dd8d8a45", "message": "WebSocketServerSockJsSession uses dedicated disconnect lock\n\nIssue: SPR-14917"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/94fd4a696f75ac83412e971bfceca0e531ea2196", "message": "Downgrade to Jetty 9.4 RC1 (since RC2 has broken HEAD handling)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fe7f4db2ae7504fb2c2d073ec34e9966d9733c32", "message": "Latest dependency updates (Jackson 2.8.5, Joda-Time 2.9.6, Jetty 9.4 RC2, RxNetty 0.5.2 RC5)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a4f18427382a941aa68853b8687298d7b2a21085", "message": "Latest dependency updates (Hibernate Validator 5.3.2, Caffeine 2.3.5, RxJava 2.0.1, Tomcat 8.5.8)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3a29daac45d9450006e5ac463e1c82e995d408af", "message": "ASM-generated class names get interned for better memory allocation\n\nIssue: SPR-14886"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc8cd4e4c0772c3fde7034735e1f4aefa8e7260d", "message": "Polishing\n\nIssue: SPR-14888"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55afb59c7a4f4e64dd34c7f02fdc263a71b5f367", "message": "Merge pull request #1233 from kazuki43zoo/SPR-14888\n\nDetect invalid configuration for autoGrowCollectionLimit on DataBinder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dda9762072bd4e1ceda3736740d25bb78de49f38", "message": "Moved WebExchangeDataBinder to web.bind.support (alongside WebRequestDataBinder)\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f0be79e0a113fc03f70f25cf8ade6d72e677b3c8", "message": "Promoted BindingContext to web.reactive root (since HandlerResult requires it there)\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c44c6075701ff46d356f09729f5c738337add39a", "message": "Consistent references to plain class names in exception messages\n\nIssue: SPR-14883"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3cd1ad7f13db8a8d495a693d35c585f148f36e8", "message": "Refined throwing of BeanCreationExceptions (and reflection exceptions)\n\nIssue: SPR-14883"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf479bf893df758b54f1a7117a7eae9a32728ab7", "message": "Consistent throwing of BeanCreationExceptions (and reflection exceptions)\n\nIssue: SPR-14883\n(cherry picked from commit b42d731)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b57437b7af7d7cdde3eb1bd1547d3859af59d00", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f4904ed22208028e9c47e3ee4802ab94186fbaa", "message": "Avoid deprecated Mockito methods\n\nIssue: SPR-14880"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/671c4e9650b0501b370a8bebd123c204b7733941", "message": "Upgrade to Tiles 3.0.7"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4936fe60880b00d99c38fc54e5efbee9f917a5f5", "message": "Upgrade to OkHttp 3.4.2, RxJava 1.2.2 and Mockito 2.2.11"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/365ecd4ccafc3d11484f7005896a344428c5d7fd", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8df45dd274b9b962b3af4d71e51256ca7d3f525d", "message": "@Async docs explicitly mention ListenableFuture and CompletableFuture\n\nIssue: SPR-14881"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd398ed9e47fcb566cdeb85ae03ba4acfcc3c09a", "message": "Upgrade to Joda-Time 2.9.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/17f5f86a54bbfb0edb1f85cf187d34d92dc0b531", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac774cdcef7b25878f075d7e3514c373880eacac", "message": "Avoid deprecated Mockito methods\n\nIssue: SPR-14880"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/84d3808b3b6107675ea4d41359fceb8156ac96d4", "message": "Upgrade to Mockito 2.2\n\nIssue: SPR-14880"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ae0bd6ea949a6685cada34d4bca92072f511f4b", "message": "ApplicationListenerDetector ignores non-managed bean instances\n\nIssue: SPR-14879"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a90e4b230f409eebaea28ae66f42e13fed63e107", "message": "Polishing\n\nIssue: SPR-14867"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8053fefea82f523b9db7ecad4b1d7317f1a28173", "message": "Consistent support for early placeholder resolution in properties locations\n\nIssue: SPR-10502"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03468fd9ed2e9b07c672897ef6fd98a0224228bd", "message": "ReloadableResourceBundleMessageSource sets file timestamp on merged holder\n\nIssue: SPR-14583"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb0d4c8ce0a8e16de2cdefb164c8c77b11e9c19a", "message": "Upgrade to Selenium 3.0.1, HtmlUnit 2.23 and JSONAssert 1.4"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/be853d466b406b7f6a66420158b5eba1de2fe267", "message": "AnnotatedElementAdapter explicitly declares isAnnotationPresent method\n\nIssue: SPR-14872\n(cherry picked from commit 17863df)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc9a8ee9330fa619e674a4f208cfe791fc9716f9", "message": "Upgrade to Caffeine 2.3.4 and XNIO 3.4.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3e419cde7d5106c66e4daa4e1063772d19426900", "message": "Polishing\n\nIssue: SPR-14863"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/82fa4ef2747a4246a0165fc7c80d89cd19e94822", "message": "Polishing\n\nIssue: SPR-14863"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b07d40cc44b5ee70c2e3fbeac534ec15d9b6b901", "message": "Polishing\n(cherry picked from commit 77e00f1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45fc4495503dc62ee96eeed2cda0f27aaeafaff5", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eaf80781e8370dc22cf39bd91491c889b39f48fe", "message": "Upgrade to H2 1.4.193 and Derby 10.13.1.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c4ee876416a336bc89e5da217fd148ba6a6f1763", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f280a3b177fb8456e036565f747cfc4b64104ed", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61d7d1621bbd8a4a86061833a548d50665ba8239", "message": "ASM-generated class names get interned for better memory allocation\n\nIssue: SPR-14862\n(cherry picked from commit d859826)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9659bc5fe7ad70811bae0b2057194b47d5a506cd", "message": "ObjectToObjectConverter properly handles constructors on non-public classes\n\nIssue: SPR-14304"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac80ac6f8bd5cfc173297d38330bd950b9c8338c", "message": "Consistent instanceof/casting of Class references"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7627c38695fbe4b2457640548cc03041abed3618", "message": "Exceptions thrown from @ExceptionHandler methods logged at warn level (instead of debug)\n\nIssue: SPR-14861"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c036e4019f2ebfbe6a94cc6b8bb0acff98c7dfa5", "message": "Upgrade to Hibernate Validator 5.3.1 (and Gson 2.8)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f9ed5917ba01b00d8ded358d1b2c17be2684921", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc080cb1be4c35398d1d995c3bb8025ccfde6dea", "message": "Revised NoSuchBeanDefinitionException message and ResolvableType handling\n\nIncludes consistent quoting of qualified type names in related classes.\n\nIssue: SPR-14831"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36332441aeb588a52272805493bafd74dee6a468", "message": "DefaultListableBeanFactory allows early type matching against ScopedProxyFactoryBean\n\nIssue: SPR-14816"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c946924431fb759af7b0be894c5d564b66c309c9", "message": "ApplicationListener detection for inner beans behind post-processors\n\nIssue: SPR-14783"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ac5ec10465948d6ce2864c5d94cfcca5af2e574", "message": "No external locking for singleton advice/aspect beans\n\nIssue: SPR-14324"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/72e1f7e898a31bdac4233fdf52a79f65eee44dfe", "message": "Avoid deadlock between SockJS heartbeat and XHR polling\n\nIssue: SPR-14833"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf9083d60f5265e055eb756f9a27d8facd49618e", "message": "TypeDescriptor supports merged annotation lookups (for composable formatting annotations)\n\nIssue: SPR-14844"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08972eff9b696fbb7089de1dc26a28979e96c71a", "message": "Local merged annotation lookup in SpringCacheAnnotationParser\n\nIssue: SPR-14781\nIssue: SPR-14801"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71d83388d44e550ebca15964566ee026c22f66e2", "message": "Test for multi-character delimiter\n\nIssue: SPR-14808"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5912d6f52af193e8bc562db80a64062394158851", "message": "LocalSessionFactoryBean clears default MetadataSources on reinitialization\n\nIssue: SPR-14815"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/20419d72ef8695b612153f40a21d5185755ed299", "message": "Tightened StringValueResolver contract\n\nIssue: SPR-14842"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13001b9affad668479ebdb924f2bd491745232a8", "message": "SimpleApplicationEventMulticaster just swallows event downcast exceptions\n\nIssue: SPR-14846"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2874066a975b28128856ee07ac44f37f83f624eb", "message": "DataSourceTransactionManager triggers flush callbacks on registered transaction synchronizations\n\nIssue: SPR-14847"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2b1dcbaca1cc618281d1308a5c24c28d4a04020", "message": "AccessorLValue reliably downcasts to CompilablePropertyAccessor in concurrent scenarios\n\nIssue: SPR-14850"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b7d3a969a4c49d894ce2ae12d9cf0c39ee16dbac", "message": "ResourceHttpRequestHandler initializes PathExtensionContentNegotiationStrategy in afterPropertiesSet\n\nIssue: SPR-14851"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dbaafdd04e026b566d93471e34f00dbe38c09df9", "message": "MessageChannel declares send(Message) as default method\n\nIssue: SPR-14854"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f1c20a8d31470a47e72ec757b77fc5e14b0dcf56", "message": "Latest dependency updates (Hibernate ORM 5.2.4, Undertow 1.4.4, Jetty 9.4 RC1)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1b0b2693708c5de003805630a1c469c50e9d9139", "message": "DefaultServerResponseBuilder uses Reactor's new thenEmpty method (fixing deprecation error)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3726c6f18d34b03f278100a06726a294672d2b98", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/be187babf9d00c5145bd43f9300eadf472a9af87", "message": "ResolvableType equals/hashCode does not consider TypeProvider source\n\nIssue: SPR-14826"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f7d740fa69397b8e998b11b13149f541d9553f9c", "message": "ConversionService detects generic type declaration on target class behind proxy as well\n\nIssue: SPR-14822"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/52b029d71d440982e6173007010cfe579fbc6191", "message": "DefaultTransactionAttribute stores descriptor (method identification)\n\nIssue: SPR-14760"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67a5ff02acf57ab34417d0ce790529319457b2cf", "message": "Latest dependency updates (EhCache 2.10.3, Jackson 2.8.4, Netty 4.1.6)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69116c2acc3881040686da594ced49cb9a964eb5", "message": "Documentation for InjectionPoint argument on @Bean method\n\nIssue:  SPR-14797"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a29188a191fa30b864785713221f780a735addcf", "message": "Upgrade to Hibernate Validator 5.3 (as well as Log4J 2.7, Protobuf 3.1, Tomcat 8.5.6)\n\nIssue: SPR-13965"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eafaaa5cb81dcf13daf102d5ba1bde73c4875f4d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a32b52555a57167b1d1e38d18d348c62ad2c63ec", "message": "@Primary not marked as inherited anymore\n\nIssue: SPR-14780"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74b6a5b6d7892200b2d4ab8418421507ff4f0ba0", "message": "BindingResult does not hold on to ConversionService when serialized in session\n\nIssue: SPR-8282"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/66722afda0ae391f0cd994e64516cc12f3807840", "message": "StompSubProtocolHandler does not insist on SimpMessageHeaderAccessor\n\nIssue: SPR-14791"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ebed7b77c356ff91e02292473c51024868feae6b", "message": "SpringValidatorAdapter declares ResolvableAttribute as serializable\n\nIssue: SPR-14778"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ffc781b1630d192100ae3b09213b54a95a369de2", "message": "Explicit calls on Buffer base type (for compatibility with covariant return type on JDK 9's ByteBuffer)\n\nIssue: SPR-14645"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2fea1f7da348ec31b7e620107c594d365da111b2", "message": "Upgrade to RxJava 2.0 RC3 (as well as EhCache 3.1.3 and Hibernate ORM 5.2.3)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cfa0f6c84bbd4fe890b753aefa7e57a57cb1d9d2", "message": "Consistent final logger fields"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/684d6ab553c86808cc29ce452d8b95c53102fab4", "message": "@Lookup reference documentation\n\nIssue: SPR-14765"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fb7ae010c867ae48ab51f48cce97fe2c07f44115", "message": "Avoid unnecessary generics on emptyMap/Set/List"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a6b0b6e27945dcf3c84f2c8ae49969470a1c8c76", "message": "Efficient STOMP content-length header check\n\nIssue: SPR-14747"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c64f39943f587dd7cd3a80e884e2fcb8f3bb115c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36f7c7a13e4a6fd3247b03c1a61a99c3b0dcf50e", "message": "Clarified that getResource never returns null"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb7d20762c0c45740319ac526c86c204bc1d18b7", "message": "DefaultPersistenceUnitManager extracts jar file from default persistence unit root URL\n\nIssue: SPR-14749"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74c618892e3d270b42369a753f2592b0564f3835", "message": "YamlPropertiesFactoryBean consistently exposes String values\n\nIssue: SPR-14737"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e188b4428e629f1dc917f868bf9cf2d5168220b8", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/94753b5e87a622751493071ec1957bfdfded199e", "message": "Merge pull request #1185 from dreis2211/stomp-encoder-improvement\n\nImprove performance of StompEncoder\r\n\r\nIssue: SPR-14747"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/099350a28ea8c26d464eb9e530f8043b04feeda1", "message": "Upgrade to Jetty 9.4.0.RC0 and POI 3.15"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/89717e1783d849210ae96ba2e9a5fb0f3a0fc0cc", "message": "Reactive setup refinements"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/129d7bef6e058904838e836ff007055905532360", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d94ce0a1b23c26088a3fc8269ba4a8369f40a90c", "message": "Avoid package dependency cycles"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/65e01eabf0535672f3cd6389d1e37fa89998c234", "message": "DispatcherHandler.toWebHandler/toHttpHandler convenience methods"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d71f6fe3661b1f7c921359c7c45c1950be8ffad0", "message": "Latest dependency updates (EclipseLink 2.6.4, Jackson 2.8.3, JavaMail 1.5.6)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf6653b837dcf27899ff3c0d333f026d66e7c0ee", "message": "Adapted to 4.3.3 backport\n\nIssue: SPR-14728"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f532de92aaf5cc64a28025adb2e9386871dc7597", "message": "Revised checkResource implementation\n\nIssue: SPR-14729\n(cherry picked from commit ca17edd)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3772398700f4ae2496fd2870fbfa189e8b8dd218", "message": "Explicit sun.nio.ch export for Netty's NioEventLoopGroup on JDK 9\n\nIssue: SPR-14645"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b60af42e23bf0d4fcc3a2e67fdb873b19e1597e8", "message": "Polishing\n(cherry picked from commit ace25d4)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3fdc11e739f4d42104bf3356794ff42f28756b31", "message": "Latest dependency updates (Undertow 1.4.3, EhCache 3.1.2, Caffeine 2.3.3, Rome 1.7, Woodstox 5.0.3, Jettison 1.3.8, JRuby 9.1.5.0, RxJava 2.0 RC2, RxNetty 0.5.2 RC4)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b2cc2d1cae2a465965b5e3a94ae0452aecc920e", "message": "Rearranged field order in RootBeanDefinition\n\nIssue: SPR-14725"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f24ce76edb4f00b6e45cd9a56cacee0aace55db1", "message": "StringUtils.parseLocaleString accepts Java 7 variants\n\nIssue: SPR-14718"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6de4b12992ba3a10b75a7ae413911da0a1fc1184", "message": "Adapted recent tests to pass on Windows"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6dc1898dbbfa34217790b136f9f6e48ffd1f8f0e", "message": "Timeout exceptions as RuntimeExceptions\n\nIssue: SPR-14669"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f5925993491cd8af55e6c9f08a12c77ac22618ec", "message": "Polishing\n(cherry picked from commit 54db496)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/782c99dfaf23f5954380dd5a47dcf760ef0d5a58", "message": "PropertySourcesPropertyResolver does not log retrieved value by default\n\nIssue: SPR-14709\n(cherry picked from commit fbe7ddb)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce42ed4d449e7fee7179275c8bacd5b902fa672e", "message": "Polishing"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4974612", "body": "Why are we even trying to support multiple servlets in AbstractDispatcherServletInitializer to begin with? Couldn't we simply keep it limited to the root context plus one DispatcherServlet scenario? After all, people can always extend AbstractContextLoaderInitializer and additionally register arbitrary servlets... I'd find that arrangement clearer.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4974612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13198178", "body": "Good catch - fixed for 3.2.2 now!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13198178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13614448", "body": "I've integrated it manually, changing some of the code anyway. So no need to resubmit it from my perspective.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13614448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15298259", "body": "Phil, I've been discussing this with Martin a few minutes ago: I'll have a look at it for 4.0 M1, and might backport the enum fix but not the public-making part to 3.2.3. We can create a JIRA for the enum fix along the way there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15298259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17933087", "body": "I'm using a different approach in ConfigurationClassParser now, tracking knownSuperclasses in terms of which configuration class they've been added for - and removing the corresponding knownSuperclasses entries when said configuration class gets overridden, before processing the new overriding configuration class - which then does fresh processing of its superclass.\n\nJuergen\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17933087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30851474", "body": "I'm in the process of revising MvcUriComponentsBuilder in a few respects, so I can deal with the getParameterCount() issue as part of that. It would be good to have a JIRA issue for this specific issue though, just to track the breakage on JDK <1.8 that people will be seeing before 4.0.1...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30851474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32216569", "body": "Alright, let's handle this as part of SPR-9771 then. Scheduled for 4.0.1 and 3.2.7, since it fits with other Quartz support refinements there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32216569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34079656", "body": "I've added this improvement to master, for release in 4.0.2. I'm reluctant to backport it to the 3.2.x branch since it's a runtime improvement and not a bug fix...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34079656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37208452", "body": "Applied to master in slightly revised form.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37208452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38706248", "body": "St\u00e9phane, I can apply this in a modified form since I'm in the build file anyway, after Andy initially raised this. There has been quite a bit of fine-tuning of the POMs for 4.0.3 already, so this fits nicely.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38706248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38708343", "body": "Indeed, just some common/shared ones are defined in properties but it's not really driven by a good rule.\n\nAs for this pull request's exclusions, I'm rolling them - in slightly rearranged form - into a commit of mine that also bumps a few minor version numbers to the most recent releases.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38708343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45147564", "body": "Implemented slightly differently in removeSubscriptionInternal through a \"destination != null\" check.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45147564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49154832", "body": "I wonder whether we should shorten the ListenableFuture*Callback names to just SuccessCallback and FailureCallback, with only ListenableFutureCallback keeping its distinct name. Those interfaces are qualified by their package name, after all, and four-word callback names seem a bit longish, in particular one after each other in the same method signature...\n\nOther than that, this approach looks fine to me!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49154832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52046826", "body": "@sdeleuze, this looks fine for a start, let's get it in. I can do another review pass once it's in master. \n\nThere's just one thing we sort out right away: AbstractJackson2View is currently in the main web.servlet.view package; I'd rather have it in web.servlet.view.json, and just the XML variant in web.servlet.view.xml. We have general Jackson setup stuff in http.converter.json as well, so it should be alright to have our common view base class in web.servlet.view.json here, interpreting the \"json\" subpackage as a place for general Jackson stuff as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52046826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56705672", "body": "The intent of this pull request is to allow for a single placeholder to specify multiple base packages in <context:component-scan base-package=\"${...}\"> which doesn't require us to change the parsing in the scanner itself, does it? Instead, it might make sense to resolve the placeholders right before the initial tokenization step in ComponentScanBeanDefinitionParser. I'll give that a try.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56705672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56950685", "body": "Good catch - thanks for raising this! Committed to master as part of a general revision of WebAsyncManager; to be backported to 4.0.x and 3.2.x as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56950685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56955569", "body": "Rolled into AnnotatedBeanDefinition itself now, as an optional getFactoryMethodMetadata() method.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56955569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58168304", "body": "Thanks for the pull request! I've applied your change and the test class as part of a slightly revised larger commit.\n\nJuergen\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58168304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/64138466", "body": "See my comment on https://jira.spring.io/browse/SPR-12462.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/64138466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/83064498", "body": "Fixed in a slightly extended revision of DefaultManagedAwareThreadFactory, to be pushed ASAP.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/83064498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/83064658", "body": "JIRA reference: https://jira.spring.io/browse/SPR-12830\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/83064658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93840098", "body": "Could you please create a JIRA issue for this one? We have quite a few equals comparisons between Class references in the codebase, so this might be worth revisiting on a wider scale. In any case, a JIRA issue will make sure it doesn't get lost...\n\nJuergen\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93840098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99905240", "body": "I've already added this as a direct commit for commaDelimitedListToSet as well as for removeDuplicateStrings. Thanks for the pull request, in any case!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99905240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124481090", "body": "Thanks for the effort to try to help with upcoming tasks. However, please note that we're usually not accepting deprecations or removals as pull requests. Such steps come with fine-tuned deprecation messages and often javadoc pointers to alternative functionality, so we prefer doing them ourselves.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124481090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124481759", "body": "Thanks for the effort to try to help with upcoming tasks. However, please note that we're usually not accepting deprecations or removals as pull requests. Such steps come with fine-tuned deprecation messages and often javadoc pointers to alternative functionality, so we prefer doing them ourselves.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124481759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/147355212", "body": "I'm picking this up in SPR-13563, clarifying getBody's contract there. I'm wondering whether the null return value is actually intended, since the interface javadoc doesn't mention it, and the only implementation ever returning null seems to be HttpComponents(Async)ClientHttpResponse. All the others seem to return an empty body instead, or am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/147355212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/147511914", "body": "Resolved through SPR-13563. Please reopen that JIRA issue if there is anything left to be addressed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/147511914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151821837", "body": "Applied as part of a slightly wider revision. Thanks for raising this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151821837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/161274943", "body": "Rolled in as part of a slightly wider revision. Thanks for raising this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/161274943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/162472648", "body": "Applied as part of slightly wider javadoc polishing. Thanks for spotting this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/162472648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/165749208", "body": "I've rolled a refactored variant of this into master now...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/165749208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/165892339", "body": "Thanks for the pull request! I've rolled this in a slightly revised fashion, including some general rearrangments in the affected tests.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/165892339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166396765", "body": "Rolled into master as part of a wider rewrite now, addressing all your concerns and reusing your unit tests. Thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166396765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192680695", "body": "Ah indeed, they're at OkHttp 3.2.0 already... I guess we should roll this into Spring Framework 4.3 still.\n@royclarkson, could please create a corresponding SPR feature ticket in JIRA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192680695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195332219", "body": "Could please create an SPR issue on our JIRA, referring to this pull request? We aim to address such consistency issues in the 4.3 timeline, so this one is certainly a candidate there...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195332219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/201743252", "body": "Coincidentally, this got fixed as part of a wider revision yesterday. Good catch in any case :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/201743252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203318747", "body": "As outlined in JIRA, I've opted for a slightly different approach. Your pull request was nevertheless very helpful; thanks for taking the time!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203318747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203328628", "body": "I meant to address this for 4.3 only since it subtly changes the applicability of class-level metadata not only for Groovy objects but also for other kinds of synthetic methods. This can be hard to debug if somebody happens to be affected by an unexpected case, so I'd rather avoid a backport here. Method-level metadata works fine on 4.2.x even with Groovy objects, after all.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203328628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203345180", "body": "I meant that the use of the Transactional annotation at the method level works fine even with Groovy objects. It's just class-level sharing of transaction metadata across all methods which doesn't work as expected since the convention over-applies it even to GroovyObject methods.\n\nI'm not a great fan of flags for such purposes. This is a typical example where the change does make sense by default; it would just be good to let it go through a release candidate phase. We have 4.3 RC1 coming up along with 4.2.6 next week, so this is by no means far away...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203345180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208408966", "body": "As discussed on SPR-14144, I've taken a slightly broader approach. Thanks for raising this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208408966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214176351", "body": "I'm in the process of implementing this slightly differently, in sync with JmsTemplate's receive timeout handling. Thanks for the pull request in any case!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214176351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222479270", "body": "I went with a slightly different implementation. Thanks for the pull request and the test case!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222479270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223016581", "body": "Rolled into 4.3 in a slightly different fashion, in particular with an overloaded Collection-based variant and without delegation to other methods from the constructors. I've also added your unit tests, just slightly revising the style towards instance-level mocks which do not need to be reset afterwards.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223016581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224242181", "body": "Thanks for the suggestion! I've raised https://jira.spring.io/browse/SPR-14337 for this, about to be included in this week's 4.3 GA release. As a side note, the change turned out to be a bit more extensive since we also need a corresponding method in our Jackson2ObjectMapperBuilder.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224242181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225023437", "body": "Rolled into 4.3 GA and 4.2.7 in a slightly revised form. Thanks for the pull request in any case, and keep them coming :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225023437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230815804", "body": "Thanks for raising this! Unfortunately I haven't noticed your pull request before... In any case, I've applied this refinement to all our actively maintained 4.x branches right away, in a slightly different way (since we prefer avoiding nested calls, we still have a variable declaration but in the latest possible place now).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230815804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231996586", "body": "@eddumelendez I share the concerns about try-with-resources. We do not just have transactional logic in `DataSourceUtils.releaseConnection` but also custom logging with no rethrowing in `closeStatement` and `closeResultSet`. Since there is no user-level benefit in changing those to try-with-resources, as far as I can see, let's rather leave this as-is.\n\nThanks for your efforts in any case!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231996586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231996731", "body": "@eddumelendez I appreciate your efforts but I share @jmithmstr's concerns about try-with-resources. We have some custom logging logic - suppressing any close exception - in all of our close delegates, not just the transactional logic in `DataSourceUtils.releaseConnection`... Since there is no user-level benefit in changing those to try-with-resources, let's rather leave this as-is.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231996731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231997989", "body": "As for SPR-13826, that issue is more about relying on JDBC 4.1 features such as `getParameterType` than about the resource handling code. Since unconditional use of such JDBC operations requires full support in all common JDBC drivers out there, it's constrained by the drivers and not by the JDBC API level in JDK 7/8.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231997989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232980106", "body": "I'm sorry, I haven't noticed the pull request going with this. In any case, this has been fixed in master and also in 4.3.x and 4.2.x in the course of a wider range of backports.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232980106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242156726", "body": "Applied in a revised fashion as per my comments on JIRA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242156726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242174600", "body": "Thanks again for the pull request! Applied in a revised form.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242174600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243064452", "body": "Thanks for your proposals! I've implemented this along the lines of the `flags` suggestion, however with three individual `boolean` values instead... for the sake of readability since `int` constants can't be forward-referenced from enum value definitions... and we're not trying to optimize the memory layout to begin with.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243064452/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246434195", "body": "Hmm, maybe shorten the method name to `readableChannel()`, along the lines of our existing `contentLength()` and `lastModified()` methods? Also, let's position it right after `getFile()`...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246434195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246468756", "body": "Thumbs up from my side, except for the now outdated title and commit comment :-)\n\n@rstoyanchev, looking good to you as well? If so, let's get it in.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246468756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254207730", "body": "I'm rather strongly opposed to adding an explicit HEAD mapping since we generally want HEAD to be handled through `@GetMapping` (considering HEAD simply as a bodyless GET variant), and since a custom HEAD mapping for special-purpose scenarios can be expressed through the general `@RequestMapping` annotation anyway.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254207730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254209858", "body": "Good points, those are indeed reasons to avoid `@GetMapping.` However, if you'd like such a custom tailored HEAD endpoint, what's wrong with `@RequestMapping(method=HEAD)`? The whole point of `@GetMapping` and co is a convenience for common cases, with `@RequestMapping` remaining as the common underlying mapping mechanism (that `@GetMapping` and co are literally composed from). I would argue that a custom ping endpoint does not qualify as such a common case, and that the common way of handling HEAD is indeed as a combined GET/HEAD endpoint along the lines of `@GetMapping.`\n\nAlso, you could easily compose a custom `@HeadMapping` annotation yourself, possibly even as a custom `@PingMapping` variant for your particular use case...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254209858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262750708", "body": "This is just a class in our tests. The production variant `StandardTypeConverter` had synchronization refined already (https://jira.spring.io/browse/SPR-14465), and we're considering general reuse of a shared `DefaultConversionService` instance now (https://jira.spring.io/browse/SPR-14948).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262750708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278498179", "body": "I've adopted your suggestion in a slightly different fashion, including alignment with `PropertiesLoaderSupport` (as used by `<context:property-placeholder>`). Thanks for raising this!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278498179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278606105", "body": "See my comment on SPR-15238. These two cases are good examples for `getOrDefault` enforcing early construction/retrieval of default values even if we're likely to encounter a cache hit where we don't need the default value in the first place.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278606105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278610852", "body": "Class loading is also pretty expensive, so that's not an ideal use there either.\r\n\r\n`AbstractSqlParameterSource.java ` with its `TYPE_UNKNOWN` constant is the only that I see as a good tradeoff. No need for a pull request for that one, I'll roll that it along with some other fine-tuning today.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278610852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278614359", "body": "I'll reopen your SPR-15238 ticket, repurposing it for this particular change. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278614359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278616810", "body": "Well, the problem is that - with Java method call semantics - all parameter values are being resolved, then passed into the target method. In order to get deferred execution of `doLoadClass(name)` here, it would have to be wrapped in a `Supplier` or the like, to be called back only when the default value is actually needed.\r\n\r\n`Map` has such a lazily called variant in `default V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)`. That's only useful for adding values to the map though, not for fallback default values.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278616810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279969405", "body": "See the JIRA issue: We're dropping the mechanism completely as of 5.0, without an intermediate deprecation step. Thanks for raising this!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279969405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280119527", "body": "See the JIRA issue: I've taken a slightly different approach.\r\nThanks for raising this and for the pull request in any case!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280119527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282785642", "body": "See my comment on JIRA: I've adopted a different variant, using `getDeclaredAnnotation` instead.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282785642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282811879", "body": "Indeed, and similar `getDeclaredAnnotation` calls returning the annotation found (if any) in other places. This seems to be the most efficient variant for our purposes, in particular when called against a `Class`.\r\n\r\nI'll push this later tonight, along with a few other commits.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282811879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284669290", "body": "I've addressed this through a slightly different revision, retaining compatibility with JRuby 1.7.x while also allowing `JRubyScriptFactory` to be used with JRuby 9.1.7+ still: see https://jira.spring.io/browse/SPR-15322\r\n\r\nNote that we primarily support JRuby 9000 through JSR-223, i.e. `StandardScriptFactory`, and that native JRuby support is deprecated since Spring Framework 4.2 already and therefore gone in 5.0.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284669290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288972841", "body": "Good catch! This entire paragraph is suboptimal, so I'll revise it wholesale instead of just fixing that typo.\r\n\r\nThanks for the PR in any case...", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288972841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289478717", "body": "I'm tracking this in https://jira.spring.io/browse/SPR-15387 now, revisiting our annotation retrieval algorithms towards minimal interaction with annotation instances.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289478717/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292134432", "body": "Thanks @violetagg, that was spot on! I've revised all those places as part of a somewhat larger overhaul, also introducing an overloaded `isInJavaLangAnnotationPackage(Class)` variant.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292134432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292150346", "body": "Thanks for the pull request! I've applied your suggestion in a slightly more extensive revision, using `StringUtils.getFilename` instead of a temporary `File` instance now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292150346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297812090", "body": "Closed in favor of a larger revision on master, as discussed on JIRA.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297812090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299727195", "body": "I ended up resolving this differently: through a `getInterceptors()` call in `toString()`, analogous to the handling of the original chain in the copy constructor. Thanks for the PR, in any case!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299727195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300479804", "body": "Sorry, this fell through the cracks here. Could you please create a JIRA issue at https://jira.spring.io/browse/SPR, which is what we're using for tracking...", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300479804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300480482", "body": "The changes themselves look fine to me. Just one small note: We usually don't import `Entry` like that but rather declare `Map.Entry` within the loops. Could you revise your PR accordingly and rebase it on current master please, then I'd be happy to merge it right away...", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300480482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308070357", "body": "@diguage, thanks for all your recent efforts! The `forEach` usage in this pull request looks fine to me as well.\r\n\r\nThat said, please note that we're not usually doing such code style refinements via pull requests. We either do them locally when touching some code for other reasons, or we use IntelliJ's refactoring tools for that purpose, minimizing the overhead involved.\r\n\r\nIf you'd like to provide further pull requests, please focus on feature tickets. For code style issues, you might simply create a JIRA task pointing out the refinement (or a whole range of refinements), with us sorting it out on our end and no pull request needed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308070357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312093476", "body": "Implemented in a slightly different fashion, as mentioned on the JIRA issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312093476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314836481", "body": "Addressed as part of a slightly larger revision.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314836481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316508920", "body": "Resolved in a slightly different implementation style (see JIRA issue).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316508920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/334106768", "body": "Superseded by a larger revision of the `Tokenizer` implementation (which was quite overdue already), as mentioned on JIRA. Thanks for the pull request, in any case!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/334106768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338466194", "body": "Those extra clauses are actual a pretty recent addition introduced in SPR-15540, meant for consistency between `hasLength` and `hasText` implementations. However, good catch, they introduced an unnecessary extra level of checks. Preserving the original purpose, I've extracted a `containsText(CharSequence)` delegate now which is called from both `hasText` implementations.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338466194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338473056", "body": "Thanks for the PR - again, a good catch there! It turns out that this can be implemented even more efficiently through direct use of `String.regionMatches', for 'endsWithIgnoreCase' as well as 'startsWithIgnoreCase', so I went with that even more streamlined version right away.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338473056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338655980", "body": "Indeed, closing this as per the resolution of https://jira.spring.io/browse/SPR-16095.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338655980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341979582", "body": "Addressed as part of a larger revision along with SPR-16160. Thanks for the pull request, in any case!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341979582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342978899", "body": "One more minor thing: Could you please squash those two commits into one? I can also squash and merge them on my end but we usually prefer a single pre-squashed pull request that we can merge as-is. Not least of it all, that allows us to preserve your contribution in its most original form...", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342978899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343583921", "body": "As discussed on JIRA, a slightly different revision with the same intent is now in master. I'll backport it to 4.3.x over the weekend; it'd be great if you give it a try before the 5.0.2 / 4.3.13 release (mid next week).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343583921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346326713", "body": "This is indeed worth discussing; however, the matter is more complicated: It all starts with the `RowMapper` callback interface here which is allowed to map a given row to `null` (as a valid return value for a row that has been found) which bubbles through to those `queryForObject` methods. For clean non-nullability here, we'd have to enforce a non-null result from `RowMapper.mapRow`... which is a backwards-compatibility issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346326713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346328822", "body": "That said, `DataAccessUtils` seems to be inconsistent in its `requiredSingleResult` vs `requiredUniqueResult` nullability declarations. I'll dig into that part for 5.0.2 still: https://jira.spring.io/browse/SPR-16225", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346328822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351070722", "body": "As per SPR-16282, I'm afraid those candidates have been declared to remain non-deprecated in 4.x on purpose, for the infrastructure support range in that generation of the framework.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351070722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356326938", "body": "Closed in favor of a slightly different implementation (see SPR-16340). Thanks for the pull request!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356326938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357059342", "body": "I'm sorry, I did notice this pull request before... I've fixed this through a commit of my own with a rather extensive MVC integration tests in the meantime. In any case, thanks for the pull request, you were right on track there!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357059342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357549361", "body": "As per my comment on SPR-16295, I went with a streamlined variant instead which I also intend to backport to 4.3.14.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357549361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2723894", "body": "Well, typesToMatch.length != 1 || !FactoryBean.class.equals(typesToMatch[0]) will only hit the second expression if the first turns out to be false - i.e. if typesToMatch.length == 1. In case of 0 or more than 1 elements, we'll simply return the predicted type as-is.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2723894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4469380", "body": "Good catch - fixed now.\n\nWe've also optimized RequestMappingInfoHandlerMapping to not pass the\nlookup path into the PathMatcher the way it did before; so we shouldn't see\nsuch AntPathMatcher cache overflowing caused by the framework itself\nanymore.\n\nJuergen\n\nOn Wed, Oct 30, 2013 at 2:17 PM, pbobruk notifications@github.com wrote:\n\n> I think, that it should be greater than or equal, because in a\n> multithreaded environment, the counter can be exceeded.\n> \n> if (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {\n>                                                            ^^^^\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/spring-projects/spring-framework/commit/326154270fa6338010a1c047044fc4a9f21e910b#commitcomment-4465463\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4469380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5777096", "body": "I've dropped tiles-request-api completely with my latest commit (the AspectJ upgrade) since it comes as a transitive dependency of Tiles anyway - which is why I dropped it in the spring-webmvc dependencies before. It just got reintroduced from the spring-test dependencies where, as far as I can see, it can be equally simply dropped.\n\nBTW, good point about Tiles version constants here, Sam! Just not for tiles-request-api if we can avoid it...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5777096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17743440", "body": "Spring Framework 4.3 GA is scheduled for release on Wednesday June 8th. No need for a further RC if we can roll it into GA right away, I'd say :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17743440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18687332", "body": "Good point, added now!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18687332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18984700", "body": "We're using the source field to intentionally preserve the `PropertyValue` resolution chain here, not just the original source object. See `getOriginalPropertyValue()` below.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18984700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20313569", "body": "This was unavoidable, unfortunately, since we couldn't lazily initialize the `ConversionService` otherwise and would let you run into an NPE... I'd rather let your code fail to compile if it talks to the `conversionService` field directly, which it was never intended to. I consider it a mistake that the field was ever `protected` to begin with.\r\n\r\nIn general, we do not intend to make such changes in maintenance releases. It was a tradeoff to do it in the 4.3.x line at this point still, in order to get the benefits of lazy initialization, while leaving 4.2.9 the way it was.\r\n\r\nIn any case, sorry for the hassle! Glad that you could resolve it so quickly.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20313569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20676377", "body": "`Objects.requireNonNull` is certainly a viable option in user code or external libraries. However, for the Spring codebase itself, I'd rather stick with our `Assert.notNull` facility since it throws an `IllegalArgumentException` instead of a `NullPointerException`, and this seems a better fit for our argument assertions that we're exclusively using it for.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20676377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20992460", "body": "A quick note here: A revised version of this change is present in 4.1.9 as well, as far as I can tell. If you got any remaining performance issues there, feel free to report them on JIRA. However, please note that we will only fix them in the 4.3.x line at this point, since 4.1.x and even 4.2.x have reached their end of maintenance already. As a consequence, it would be great if you could test against the 4.3.6 release first.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20992460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21654377", "body": "That seems like a hard-coded reference to Commons Logging internals which certainly won't work since we got our own `java.util.logging` adapter now and aren't using/exposing `Jdk14Logger` anymore...\r\n\r\n@wilkinsona, is this trying to enforce `java.util.logging` somehow, or why else is not simply using `LogFactory.getLog`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21654377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21784069", "body": "Good catch! I'll fix this right away.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21784069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24455926", "body": "Which part specifically? We are using defensive `XMLInputFactory` variants in 4.3.x already, and this change here just extracted its common setup to `StaxUtils` and used it in 5.0's new `XmlEventDecoder`.\r\n\r\nDo you intend to reuse that common setup in other places? I guess we could backport the new method on `StaxUtils`... but for our internal purposes that's not really necessary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24455926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25121169", "body": "Good catch! Fixed now, to be pushed along with another refinement.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25121169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27787166", "body": "Indeed!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27787166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27787177", "body": "Since it doesn't hurt, I'd rather leave it here for potential extraction into a common delegate... but change it to `getRawFragment()`, along the lines of `getRawUserInfo()` above.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27787177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616871", "body": "The plan is to release 3.1.3 around the time of 3.2 RC1, so within the next couple of weeks.\n\nI'll make sure to backport this one to the 3.1 branch once Rossen reviewed it for the 3.2 branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/79006120", "body": "I don't mind an addition to `Resource`, in particular now where we can do default methods. However, I feel that we're overusing `Optional`. On such core abstractions, can we rather do it in a more traditional style through a `Long` return type which may simple be `null` if not known?\n\nTo be clear, using `Optional` in a functional API is perfectly sensible. I just don't want it to creep into Java interfaces at a lower level, in particular not in existing interfaces with a traditional design mindset in other methods... and not really in new interfaces in the same packages either.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/79006120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109869429", "body": "We should generally remain defensive against overuse of `Optional`. So agreed, let's avoid it as field type and only expose it for method signatures where it nicely aligns with typical use of the method.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109869429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121366621", "body": "In my initial pass adding `@FunctionalInterface` a while ago, I did indeed skip interfaces which just happen to declare a single method for other reasons. From my perspective, a single abstract method is a required but not sufficient condition for calling an interface \"functional\".", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121366621/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127974039", "body": "`getDisplayName()` isn't actually nullable, so I guess we can leave this setter non-null as well?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127974039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127974786", "body": "Let's leave the `Aware` interfaces as non-null since the container will never call them with a non-null reference. For this particular case, we could keep the `AbstractBrokerMessageHandler.setApplicationEventPublisher` implementation as nullable but leave the interface untouched.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127974786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127976125", "body": "Here it seems sufficient to mark `setValidator` as nullable, paired with `getValidator()`. The multi-validator case in `getValidators()` isn't nullable anyway, so `addValidators` doesn't have to be nullable either (aside from not being setter and differing in array vs list as well).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127976125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127976615", "body": "We could code this as a dedicated `if` clause: `if (scheduler == null) { this.scheduler = null } else if (scheduler instanceof TaskScheduler) ...`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127976615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127977058", "body": "`instanceof` works fine with `null`, so the extra `!= null` check upfront isn't actually necessary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127977058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127978655", "body": "The field should change to not-null along with direct field population in the constructors here. I'll commit this in a bit.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127978655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127978686", "body": "The field should change to not-null along with direct field population in the constructors here. I'll commit this in a bit.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127978686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127979893", "body": "Since `getBeanFactory` is protected and returns a narrowed type anyway, the setter's nullability doesn't have to be aligned here, so I'd rather keep the straightforward check.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/127979893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/128376584", "body": "I guess we'll have to differentiate here: For `instantiateClass(Class)`, we can only deal with the no-arg default constructor (public or non-public) in the regular Java case... not with a non-default unique public constructor that `findPrimaryConstructor` might return to us.\r\n\r\nSo maybe we'll do some straight `KotlinDelegate.findPrimaryConstructor` vs `clazz.getDeclaredConstructor()` right here in `instantiateClass(Class)`, and only use the public `findPrimaryConstructor` variant for data binding purposes.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/128376584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/149526107", "body": "Minor thing: According to our code style, the \"if\" needs a space before the bracket, i.e. \"if (paramNames.isEmpty())\". If you could fix this quickly, I'd be happy to merge your pull request unchanged. I'll care for the backport to 4.3.x towards the end of this week then.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/149526107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/171043418", "body": "This looks a case for a straight `return acknowledge(stompHeaders, consumed)` call.\r\n\r\nOn a related note, @rstoyanchev, there seems to be inconsistent naming of `StompHeaders` arguments, primarily between `StompSession` and implementing methods in `DefaultStompSession`, but also within the `StompSession` interface itself regarding the new `unsubscribe(StompHeaders)` variant. Let's consistently name those arguments `headers`, replacing all current `stompHeaders` names.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/171043418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/171043999", "body": "Let's roll this into 5.0.5, changing this `since` tag accordingly.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/171043999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rstoyanchev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b8d94f8a20bd2d8f96fadb6f365178e7ee7c9f95", "message": "Improve WebFlux support for response status exceptions\n\nSupport @ResponseStatus annotated exceptions.\nSupported root cause exceptions with response status information.\n\nIssue: SPR-16567"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb8c6e32519c21b6ec4eb097244c1e6464c29a89", "message": "Add SimpleEvaluationContext\n\nIssue: SPR-16588"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e228ded5898485e657e896d40d624e4bb19f2538", "message": "Include form and multipart data in WebFlux.fn chapter\n\nIssue: SPR-16547"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a3d8c60abafcfcf30f1780fb6302b41521cfbc33", "message": "Restructure functional endpoints chapter\n\nThis commit restructures the existing content to separate out Overview\ncontent into its own section, and also introduces more formal structure\nwhere reference type content can be expanded over time.\n\nIssue: SPR-16547"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3653a37e27850021f80f4409b31d48dd4cf5cb8a", "message": "Polish tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb96ff2943182565f1aa3508f9c3e39a4997d56d", "message": "Doc improvements related to HTTP streaming\n\nIssue: SPR-16494"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/568c93457a8487b34381386f06a55e0f22432e9a", "message": "Improve ResponseBodyEmitter error handling\n\nAfter send error, ignore calls to complete or completeWithError by the\napplication in the same thread (e.g. try-catch block), to avoid a\ncompeting with an error callback from servlet container during which\nthe same action is taken.\n\nIssue: SPR-16548"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e20652009dca44363e7296c7bf7510def391885f", "message": "Improve docs on SseEmitter onComplete/onError\n\nIssue: SPR-16548"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/27815847b109a9074bbbb49ac1faf74468d42d6a", "message": "content-length support in EncoderHttpMessageWriter\n\nEncoderHttpMessageWriter checks explicitly for Mono publishers and sets\nthe content length, if it is known for the given data item.\n\nIssue: SPR-16542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7a8e0ff3c35bb1d612c0b3790b31604c0f3cb8d7", "message": "Update ServerWebExchangeTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e48def2d351353c9fe2e893a69610a6a0a7711cc", "message": "Set readyToWrite flag after cached signals emitted\n\nIssue: SPR-16555"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cef98e1125f7470b3dcc7615821223299bb84d93", "message": "FilePart uses correct flags when opening files\n\nIssue: SPR-16546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9352e3d047e27a91149e471bac7584ff17fa6b92", "message": "Add ClientRequest attribute for URI template\n\nIssue: SPR-16537"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36cfdf68b15932ac3970a5e0c81462e42adaf1da", "message": "Correct log level\n\nIssue: SPR-16528"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf0308b0cf2b13dd6d13069f0e4d617109b926da", "message": "Merge pull request #1706 from mariusz-jasinski/SPR-16519"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/356ef5199e218861dd935a25c20ebfdf60c6c78a", "message": "Polish\n\nIssue: SPR-16519"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f835f7b500a233fe17afcd4cb3ff99958e9cc10a", "message": "Switch to Bismuth snapshots"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e12fcca1e3e4d3e8c676dcf3cee94311a4161cbe", "message": "Fix failing test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e0e90ed006a06580d64a2f936ddba0f5198ead41", "message": "SSE writer respects charset in MediaType\n\nIssue: SPR-16516"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c55dd59613149d4fc75e175c35992afcddf491b", "message": "Additional shortcut with charset in WebSocketMessage"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb8cddda23ad1bc4764d82a126a062dc63fef1a8", "message": "Assert instances (vs classes) in MockMvc/WebTestClient\n\nIssue: SPR-16520"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3bfa56dff24e3e8088a1f2413ca1df38e28c3bd2", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6959e66b25785b4ad056791517411b5fb762ab9f", "message": "JsonEOFException is wrapped as DecodingError\n\nJackson2Tokenizer now also wraps JsonProcessingException's on\nendOfInput(), as it also does in tokenize(DataBuffer). This ensures\ntreating those errors as 400 vs 500.\n\nIssue: SPR-16521"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a6d527e57aedd94a2e23cc8d35572076dbf0e417", "message": "Call onAllDataRead when read() returns -1\n\nWhen read returns -1, we know we've reached the end of input. Instead\nof waiting for the onAllDataRead container callback, this commit\nproactively calls onAllDataRead.\n\nIssue: SPR-16521"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c198138d4e697c66714349a6398db64e9277ed4b", "message": "Polish URI encoding section"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b4250ec4427933b00286ebf8e0dbf4af7ca4747", "message": "[doc] WebFlux has coverage of URI links\n\nIssue: SPR-16423"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c679fccdfdec695da82528b4d0b4138b5b57308", "message": "Fix intdentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac495d7380e56b0160391a7764fb7e2f5eefb8c9", "message": "Polish ForwardedHeaderFilter and related code\n\nIssue: SPR-16506"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6920a1f9588d3d381d4d530120733f24009536f5", "message": "ForwardedHeaderFilter handles query+fragment correctly\n\nIssue: SPR-16506"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dcf5c646be66b9882335f1780313aa7775e46100", "message": "Use correct X509 certificate attribute name\n\nIssue: SPR-16507"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa4bcedad37a9a084e96298f087fec4889c59cdc", "message": "Up-to-date and expanded coverage on preparing URIs\n\nIssue: SPR-16422"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9801afb85d9cbbc76bd222e7e577460dd7806919", "message": "Fix compile error\n\nUpdate places that call UriUtils to catch the right exception that is\nnow raised as a result of using Charet.forName."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4db0d999af9a6d5ca9ee09df1b8c08bcaf9cf5dd", "message": "Polish UriBuilderFactory and implementation\n\nIssue: SPR-16422"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d20db1e49bc286015f5e343587b6ac3b07de734", "message": "Polish UriUtils, UriComponents\n\nIssue: SPR-16422"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/394c30efd0447e2bf701454d55ee4d66f652c463", "message": "Update to Bismuth snapshots"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3367df8637983c1e5a2c17d1a2e6819e04ca7ad6", "message": "Suggest use of OkHttp MockWebServer\n\nIssue: SPR-16482"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1aeae5d40ddf87deb6268d5d470b5c59cba3c176", "message": "Fix compiler error"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ead0503ebb68461da8e0e3e2eefcbadfbf8bae8", "message": "AbstractJackson2Encoder uses private fields\n\nMake the protected fields in AbstractJackson2Encoder private plus\nminor refactoring to the way streaming separators are applied.\n\nThe current (5.0.3) behavior is to always use '\\n', but in 5.0.4 the\nnewly supported \"application/stream+x-jackson-smile\" needs to be\nexcluded from that. For now, separator determination remains private\nin the abstract base class, but current behavior remains which is to\napply '\\n' by default.\n\nIssue: SPR-15424"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1908080d5c23d254eebac869435d3e569972e181", "message": "Test for disconnected client detection\n\nIssue: SPR-16494"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c37ad7ac5034faed74cb53fd37b9865adfd56a5", "message": "Startup/shutdown log messages for AbstractHttpServer\n\nIssue: SPR-16494"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0585fb3999990114f3a3c4330bba632bd247232d", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4ee09c89b5e1bf891f57e6f0b46382c28b487f2b", "message": "Fix regression in MappingJackson2MessageConverter\n\nAs of 4.3.13 MappingJackson2MessageConverter uses the MethodParameter\nhint to obtain generic type information but it needs to be careful, and\nnest one level, if the target parameter type has a Message wrapper.\n\nIssue: SPR-16486"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73095955bfd37af2e76e2066fe6f5772a01e16ff", "message": "Refine logging in ExchangeFunctions\n\nNotably do not log error signal since we are letting that propagate.\n\nAlso improve logging messages vs relying on the log operator.\n\nIssue: SPR-16484"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1b98d09855477df1d05a498e2749546fe0c1908d", "message": "Fix copy+paste error"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9551b3a9bb2b4e95c770e18da43ab2f1b21e1d5d", "message": "Eliminate sub-sections in Spring MVC test chapter\n\nThe very short, summary mini-sections confuse the client-side code that\nhighlights the TOC item. This commit removes the sub-sections."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/efdfe9ad8d8c1ee1dc0cc82dd8070a9cc099a7bb", "message": "Minor Javadoc update"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1653a32a04fa68832fb7c1c991d99e9bf9ced229", "message": "Stabilize Flux.interval emissions in integration tests\n\nAfter this commit the use of interval in tests is combined with\ntake(n).onBackpressureBuffer(n) to ensure emissions don't fail if the\nfixed rate is exceeded (e.g. on slow CI server).\n\nTests that verify N number of items followed by verifyOnComplete()\nshould set the number of emissions to N.\n\nTests that verify N number of items followed by thenCancel() should\nset the number of buffered to an arbitrary number greater than N."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f20eacdb9be2a9504bba09812e7ee5c9b788f7a9", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ded23945357abb04bc3cc5be24913e2ec3c20f4", "message": "[doc] Update Spring MVC exception handling content\n\nIssue: SPR-16394"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9a93f44ae876c9d82c085ec5258ca7fcbd137af", "message": "[doc] Update links to composed annotations"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b77032c36eedfd2cc9952f3042ca361b335f5b82", "message": "[doc] Explain custom/composed @RequestMapping annotations\n\nIssue: SPR-16442"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d909b013e17e18da13f00213254a784c19408e4", "message": "Do not commit response on access to content\n\nMockHttpServletResponse no longer calls flushBuffer on calls to\ngetContentAsByteArray and getContentAsString. The flushing doesn't\nactually do anything useful but does commit the response leading to\nunexpected side effects.\n\nIssue: SPR-16430"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f4de8615aa300f1fbb082b7880236e3fb460d4f8", "message": "Fix encoding issue in ServerHttpRequest.mutate()\n\nIssue: SPR-16434"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4f28c28287d9715bf1a7a9693a809b099003ae88", "message": "Update Javadoc on uriTemplateHandler property\n\nIssue: SPR-16419"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ff724968dc8856685d2a6ea7da334bc73b39cd8", "message": "[docs] View Technologies section in WebFlux\n\nIssue: SPR-16393"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/49eec6248df8c5634c2f4112894ae84c7525273a", "message": "[docs] Reorder View Technologies\n\nFrom:\n  Thymeleaf\n  Groovy Markup\n  FreeMarker\n  JSP & JSTL\n  Script Views\n  XML\n  Tiles\n  XSLT\n  PDF, Excel\n  RSS, Atom\n  Jackson\n\nTo:\n  Thymeleaf\n  FreeMarker\n  Groovy Markup\n  Script views\n  JSP & JSTL\n  Tiles\n  RSS, Atom\n  PDF, Excel\n  Jackson\n  XML\n  XSLT\n\nAlso move View Technologies after MVC Config to align order with\nWebFlux config.\n\nIssue: SPR-16393"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e76973c5f064b6f870d878fe77b854c38e8418c6", "message": "[docs] Update view-related content\n\n1. The View Technologies chapter in Spring MVC\n2. The View Resolution and View Resolver config in WebFlux\n\nIssue: SPR-16393"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c718ddf7b08d5eea13b2a7b8d9160de66fd9ceca", "message": "Update CONTRIBUTING.md"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0762131d88ec386a3e6ea83e4f66f5215e04057c", "message": "Update CONTRIBUTING.md"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00b95b10a8c93f1bbe6f9b3a873c04e56f1a9ebe", "message": "Docs: result handling and view resolution\n\nIssue: SPR-16393"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fbde97f30258f90a08375dbe6a949ef4f3a172db", "message": "Default order 0 for ServerResponseResultHandler\n\nIssue: SPR-16420"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b948e7cf7571d979b8d626f8acc3bf7182aa4a93", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/84cc7ffdf6330ed4e437bb67fa2708c9ffa3b340", "message": "Fix test failure"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5d25ca29a6426160cb624dda56583f8313210127", "message": "Merge pull request #1649 from neonailol/header-does-exist-matcher"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/49f1aa78eb414eba63f807d29292fd48d7d2cc75", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf812ba8313f905f42752342fc9a64b177bc87dc", "message": "Reference docs: improve async request content"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97894a1c221572e5351a23caed2fde213d045db9", "message": "Improve logging dependencies for tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4b861aeae60952bb94e486e7d97e723eca048f0c", "message": "Reference docs: update async request content\n\nIssue: SPR-16203"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aee8a9c97b263db3fd8d495bdaacb03af46eaec2", "message": "Upgrade to Bismuth-SR5\n\nIssue: SPR-16385"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/283811b16b3b568230ace382f9d16c1c6b662b7a", "message": "Ensure filename is written\n\nNow that SPR-16307 makes it possible to write a part with a Publisher\nwe need to ensure we get the filename correctly when writing with\nPublisher<Resource>.\n\nIssue: SPR-16376"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aea6bb635720fef98659162c447ce27679714d67", "message": "Update STOMP docs on using dot as separator\n\nIssue: SPR-16275"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0fb31c5e3610b897c09dbc23fe0240cc50a4f87e", "message": "Refine \".\" separator support for STOMP messaging\n\nAfter this commit DefaultUserDestinationResolves no longer looks at\nwhether AntPathMatcher is configured with \".\" as separator and rather\nexpects to be explicitly told whether to keep the leading slash in\ntranslated destinations which actually depends on what the message\nbroker supports (e.g. RabbitMQ \"/\", Artemis \".\") or how it is\nconfigured (simple broker could be either way).\n\nThere is also a minor improvement in SimpMessagingTemplate to ensure\nuser destinations are correctly formed based on what the\nDefaultUserDestinationResolver expects. When using \".\" as separtor it\nallows sending messages to \"queue.q1\" rather than \"/queue.q1\".\n\nIssue: SPR-16275"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/17f9b612492df0c2fd654e6c0ddb27596d541ead", "message": "Polish MessageBrokerConfigurationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/afd248da8a14bdc2aa6ef7569d3a34f8caa64882", "message": "MultipartHttpMessageWriter consumes source once only\n\nThe previous fix #09f1f7 did not actually address the issue but only\nmoved it further down, so instead of the subscribe(), it was consuming\nit inside the MultipartHttpMessageWriter#write method which returned\nthis.body.then(), and then again for the actual request body writing.\n\nIn this commit MultipartHttpMessageWriter#write returns Mono.empty()\nsince we don't actually want to write the part content from there, but\nonly want to access it as soon as it is availabele, for writing to\nthe request body.\n\nIssue: SPR-16402"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/09f1f727a71326cec68638e80d232cc70278706a", "message": "Remove explicit subscribe in MultipartHttpMessageWriter\n\nIssue: SPR-16402"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/357fb48d1373ade92814cc46a95db89c7902ce91", "message": "Update docs on stomp.js library\n\nIssue: SPR-15624"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/513461d4f1d324b69697c88054a6cb3979f6431f", "message": "Update STOMP overview\n\nIssue: SPR-15624"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0c289283ff4fab171b527b7f195639e7a950f470", "message": "Separate from expectations from response creation\n\nThis commit separates the creation of a response so that it is executed\nafter the synchronized block inside which requests need to be matched\nand validated (for order and count).\n\nThis allows a ResponseCreator to be slow or block if it has to.\n\nIssue: SPR-16319"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ab4d0ca08836f65b407ab762606d3fa5944c813", "message": "Polish MockRestServiceServer code"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12baafd4f0fb3e623e0d2b5635b824114258f435", "message": "WebFlux docs: security + consistent order for WebFlux config"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1148b61dfa6e5572b2badda14d7238be0c1b34c7", "message": "WebMVC Docs: remove old code-by-convention content\n\nWe cover this more succinctly from other places, e.g. in Model Methods\nby referring to the Javadoc of Contentions, or pointing to the\nRequestToViewNameTranslator."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb7152d6e7e4050db2230198a4d0c0350e505833", "message": "WebFlux docs: matrix variables\n\nIssue: SPR-16040"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61fc32155464f597eec0f1eefd9cdcb5c45f81c3", "message": "WebFlux docs: Request|ResponseBody + Http|ResponseEntity\n\nIssue: SPR-16040"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4f2e54fc2dfe6d30336f6b2390cc563ee9bc5343", "message": "Document multipart data support for WebFlux\n\nIssue: SPR-16040"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b97fa4a5ee2f8ec76e1240935198e14388997b2b", "message": "Update docs on multipart requests + table of parameters\n\nIssue: SPR-16040"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/437c33ba425b46a82c9ccbe16a8796050790a597", "message": "WebFlux @ModelAttribute coverage in reference\n\nIssue: SPR-16040"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61352fe85b2cbfc029aeeddb03234699a2374400", "message": "Fix compile error"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6375cc55a33ba5a1bae8e41df5d25dac71f98ae5", "message": "Merge pull request #1642 from EnvOut/master"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dd09c08cdfdfce058a1f2dba45570a6515649a18", "message": "Replace use of AbstractWebSocketMessageBrokerConfigurer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1dbcd66091e1bafeee6bb0deb3bec62840f3e62f", "message": "More sections in WebFlux docs @Controller argument\n\nIssue: SPR-16040"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c60313de3f0797f987bc7a392d75aebd17020158", "message": "Refine UriTemplate match pattern\n\nThe match/matches methods of UriTemplate use a regex with (.*) in place\nof URI variables, which work fine except in the end where such a\npattern can match greedily more than one segment.\n\nThis commit updates the regex to use ([^/]*) instead since URI\nvariables are only meant to be used within a single path segment.\n\nIssue: SPR-16169"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/84b8ceca0fe33366d1e6524137aeda67c9c6f46e", "message": "Update Javadoc for AbstractHandlerMapping properties\n\nClarify what PathPatternParser is used for which is CORS checks in the\nvery least. Some sub-classes will also use it for request mapping but\nnot all (e.g. RouterFunctionMapping). Hence the need to be more\nexplicit."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/72e3c43375e50f40d7ef52ede74ccc93455e8a97", "message": "Refine @EnableWebFlux docs for functional endpoints\n\n@EnableWebFlux bootstraps both annotated controllers and functional\nendpoints, so we need to be more explicit about which parts of the\nconfiguration apply to which.\n\nIssue: SPR-16360"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea73ec5c41d3a706a871ada0e597465ef971c4f2", "message": "ResourceUrlProvider handles sanitizes double slashes\n\nIssue: SPR-16296"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cdf2ab973783062ba55cc9fbd2ad881eae094647", "message": "Expand docs on WebFlux.fn + @EnableWebFlux\n\nIssue: SPR-16360"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b36af8a11fba610d39cc0464565d1413b5a5b293", "message": "Uncomment test after Reactor Netty fix\n\nIssue: SPR-16246"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ed0cf902727d7c295768c7b8dd931d3392de5f7", "message": "Fix init issues in AbstractReactiveWebInitializer\n\nIssue: SPR-16290"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/537f79f68091bfbb1c702ee6083ebbd30dd874f4", "message": "Merge pull request #1609 from jeff/SPR-16245"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/018469286db92135d82aab8c5a5b6f64ec0a2be7", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30c06163846f8bc5801d3f754def135ed79eb38b", "message": "Improve error message\n\nIssue: SPR-16214"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74b5c371bae3eb45057713a6d7512f89b498ae72", "message": "Merge pull request #1634 from lin/patch-1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/846636f2b95ff11dd518016e3028ea4664df9e09", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/446e7ed25c6cc026f2d3b12594138c74f94879ce", "message": "Links from @RequestMapping to reference docs\n\nIssue: SPR-16266"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37f0e8c6e541f58364691e1c49a179ed6e629570", "message": "Access to ApplicationContext via ServerWebExchange\n\nIssue: SPR-16298"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/93a522f3366b1e524863104b32c1cf73acf37bf3", "message": "Fix regression in BodyInserters with multipart data\n\nThe issue was introduced very recently with commit #7035ee but never\nreleased.\n\nIssue: SPR-16350"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/542de82c5fed3083b079673c791e91731e3c32e5", "message": "Document Jackson encoder/decoder behavior\n\nIssue: SPR-16260"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7bf9b767fda40f175123e96858cab0185c73ee7c", "message": "Improve HTTP message reading/writing docs\n\nCross-reference sections on HttpMessageReader/Writer and\nHttpMessageConverter and improve the content.\n\nIssue: SPR-16260"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f1f95e0909c5d32bbc9305ae85c57312a491058", "message": "Add hasJsonPath/doesNotHaveJsonPath assertion options\n\nIssue: SPR-16339"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3aee3182ac3859e5b6c2db90f05041c55dd63f40", "message": "Restore milestone repo for AspectJ"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f389f66270d4ba8623c47fb09250b9856e896d0f", "message": "Upgrade to Reactor Bismuth snapshots\n\nThis allows us to confirm 0.7.3 fixes and run tests against the latest\nahead of an upgrade to Reactor Netty 0.8 snapshots.\n\nThe fix for #231 and #240 are confirmed but unfortunately test case for"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8cf275aed9de171b3bc9d032ff750de43e5196d", "message": "MockServerHttpRequest builder supports query params\n\nIssue: SPR-16280"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6df1a7874a50a3149278dd9fa4c0fba8c7bd85b6", "message": "MockHttpServletResponse uses correct language header\n\nIssue: SPR-16311"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f4d8c7cc2b6e3add1b1b06dc487cce82dceb4a49", "message": "Improve decodeToMono support\n\nThis commit ensures uniform support for decodeToMono across the various\nbyte and String related decoders.\n\nIssue: SPR-16253"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/583201b02c4e0f188e765f749be2232354eb5ffb", "message": "MappingJackson2MessageConverter uses generic type\n\nIssue: SPR-16252"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f05175586e32e660ff190311f0b102c2b3b3a398", "message": "Refine behavior on error after response committed\n\nIf the response is set and we can't change the status through\nServerHttpResponse any more, allow the error signal to propagate and\nlet the individual server adapters handle it. Ultimately that should\nresult in closing the connection.\n\nOn Servlet containers, we check one last time if the response is\ncommitted (we may not have filled the buffer). If not then save\nthe exception as a request attribute, dispatch, and re-throw it on the\ncontainer thread.\n\nOn Undertow access the connection and close it.\n\nOn Netty just let the error through to Reactor Netty.\n\nIssue: SPR-16051"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f736b665bda1cf5dce6a6d990427b67fa5640b76", "message": "Fix compile issue from previous commit"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fda08852ba9f5d52c149209382c0d03380de413c", "message": "Take content-type from ResponseEntity unconditionally\n\nFrom #9a894a we began using the content-type from the ResponseEntity\nbut cross-checking it still against the requested content type.\n\nArguably there isn't any purpose in cross-checking. The only possible\noutcomes are: a) it's compatible or b) it's not, which would result in\n406 (NOT_ACCEPTABLE). As we've been given explicitly the media type to\nuse, it makes little sense to send 406, ignoring the wish to use that\ncontent type.\n\nIssue: SPR-16251"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/203370a810fad77d33c3484dbf9e79242583bf5b", "message": "Handle absolute URI in Reactor request.uri()\n\nThe request URI returned from HttpServerRequest.uri() typically\ncontains contains an absolute path but could also contain an\nabsolute URI. This commit adds handling for the latter, effectively\ntaking only the absolute path portion.\n\nIssue: SPR-16243"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b9a11685801511a866b415ae66ce4249a7d503a4", "message": "Consistently return null if certificates not available\n\nIssue: SPR-16244"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e99b0038a028c1220575aae91193e9fb1b30af6d", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91d3e4402f11317c157dfbbdd9bd01bf689f8b1f", "message": "Add test case for SPR-16246"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44c95a4736077b92b7747f49fbe88a71229687b3", "message": "Adjust logging to catch sporadic PERF build failure"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/63c2c08e017d4bc195aaa86c3c62fb2d075ab3a6", "message": "Update advice on file extensions in URLs\n\nIssue: SPR-16240"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dd0d270ba26e163d41fd2b06e1ea13afe1ca6aac", "message": "Improve error handling when response is committed\n\nResponseStatusExceptionHandler lets the error through if it can't\nchange the status while HttpWebHandlerAdapter logs a more helpful\nmessage (including status code) but without a full stack trace.\n\nIssue: SPR-16231"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f73b8b200e1aae8e4c7bada9450c87ed44a5656", "message": "Add WebTestClient to Web Servlet section"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3650ecc3bbd94d16de797f6528dcca5abf02d3f0", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bec63fbb3341a497b5fa89d9b17d4db5b5d458b2", "message": "Update CORS chapters\n\n- Add \"Processing\" section (also replaces Advanced Customizations)\n- Add information on out-of-the-box behavior\n- Add more deails on @CrossOririn default configuratio\n- Add cross-references between Spring MVC and WebFlux\n- Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/375a63a041637726ee4da035722ee24e573ba58c", "message": "Update README.md"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc3d8340262527a0182ad72c7b756e8d9c555c32", "message": "Refinements related to a committed response\n\n1. setComplete checks the isCommitted flag to avoid an unnecessary\ndebug message. This method is meant to be safe to call many times.\n\n2. setStatusCode lowers log message to TRACE, since the return value\ncommunicates the outcome it's arguably much less critical.\n\n3. Add comment and test case for ResponseStatusExceptionHandler.\nA ResponseStatusException is clearly meant to be handled by this\nhandler so don't let it pass through even if the respones is\ncommitted.\n\nIssue: SPR-16231"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/01a82b529107f75ded838bebeb0045aac8903be6", "message": "Improve semantics writing currentData\n\nBefore this commit, the return value from write was interpreted as the\ndata being fully written and ready to be released via releaseData().\n\nThis is not true for WebSocketSession implementations where a true\nreturn value simply means the message was sent with the full payload\nbut releas is not appropriate until a send confirmation.\n\nTechnically not an issue since WebSocketSession's extending this do\nnot use pooled buffers. Nevertheless this commit refines the semantics\nof write, removes the releaseData() method, and makes sub-classes\nresponsible for releasing the buffer when fully written (and they\nknow best when that is). As a bonus currentData is now private.\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/102a0ad79202f3c803e3690b4fa042b452f3f2e3", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c1b191edb0fa579e92c5a76f7c8245b45e4293eb", "message": "Polish and improve logging"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f44366877c571f2c7f270b4eef6c72dc8c050bfb", "message": "Switch to suspended mode before demand\n\nAfter this commit, Tomcat and Undertow WebSocketSession imlpementations\nstart out in suspended mode and wait for demand.\n\nThe JettyWebSocketSession is capable of suspending but it doesn't seem\nto work if invoked before any messages are received. That may become an\nissue if there is a case where no demand appears long enough for more\nmessages to accumulate than we can hold.\n\nUnderowServerHttpRequest would ideally also start in suspended mode but\nthat also doesn't work. It is not an issue in this case since we can\nignore the read notifications.\n\nServlet API requires a proactive check before it calls you back so\nthere is no need to suspend.\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/afdca285e58f3f618c01c772a95434a17b020fed", "message": "Avoid resume-suspend race condition\n\nThis commit turns suspendReading() into a readingPaused() notification\nthat is invoked after a succession of reads stops because there is no\nmore demand. Sub-classes can use this notification to suspend, if that\napplies to them.\n\nMost importantly the notification is guaranteed not to overlap with\ncheckOnDataAvailable() which means that suspend does not need to be\natomic and guarded against resume. The two can and do compete all the\ntime when reading ends with no demand, and a request for demand arrives\nconcurrently.\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b7c924cac1c1889728a23c35b09bb342ae93c8dd", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/06b2ab39088f128d3aa5ca355d0bc0f2c7b36ab3", "message": "Use volatile for subscriber in base publishers\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b89a48a7039e3fcf39ec2986adb4d96b2ef99e44", "message": "Improve FlushingIntegrationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3c2d1862f107c791ba94fa585420ed97fab6a024", "message": "Light refactoring/polish in reactive read/write bridge\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc8e525e604c5d56a7ef522a06c82821b4393916", "message": "Add shared instance of ReactiveAdapterRegistry\n\nIssue: SPR-16218"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1b5353b7fb36ccb83ed78a8502f754ed890ddce", "message": "Revise charset by location support for static resources"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce895d7a84a851426a11548de3b942458540a413", "message": "Add mention of shortcut methods in BodyInserters"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8e21023f2875f64538e060d298684789354b3ba9", "message": "Update docs on ClientResponse\n\nIssue: SPR-16200"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/19a9bc4747028e68d0fc9ce71c302488cfbfa978", "message": "Remove unnecessary assertion\n\nIssue: SPR-16201"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6e05a5881e404b8a1ab7eac049d82d0faeb7eb10", "message": "Update WebClient Javadoc\n\nIssue: SPR-16197"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fb7b7d089b08376c469a33fe9fc8c2e987b8f060", "message": "Revert erroneously committed change"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/536e72c8df7aa206bd02268e5bef939b73d5b653", "message": "Add WebSocket chapter to WebFlux section\n\nIssue: SPR-15700"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0dd31b834e93d7f890e0b22360920011884ec2bd", "message": "Refactor WebSocket intro and create separate doc\n\nIssue: SPR-15700"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5e86049438a2b82779fb0add2b6f987e2f1141e2", "message": "Expose WebSocket options for Tomcat/Jetty"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e818b904addb36f4f66afeb9962f5245af7fd938", "message": "Polish WebSocket-related"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/87375fe6f81cb70f9ee3e44c4800ef8edce655a0", "message": "ServerHttpRequest exposes SSL certificates\n\nIssue: SPR-15964"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9a894ab61e4613af176029761b75d7ad2a733440", "message": "Use ResponseEntity Content-Type as producible media type\n\nIssue: SPR-16172"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f565f635e3c7d46f319add27a18cf50dda6e1c88", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ff97eafa4f39411a68a1632f7218158287546457", "message": "Fix NPE in ErrorsArgumentResolver\n\nIssue: SPR-16187"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a5103307c6f0b124ca778fd23a4f55f3382a4f2d", "message": "Polish ErrorArgumentResolver"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8cfa3c632bd9ff7929ea5be8a689187ec3ac29ad", "message": "Allow Undertow client in websocket integration tests\n\nIt seems to work."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/988c5f2b56b03b4bf6a4a67f505a38cdd5620e4d", "message": "Merge pull request #1590 from yneth/master"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb34b0b963f4c89ecbe31b78aa594de0a5fbb348", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/807297f173255734257555d4bdb04f921f361863", "message": "Remove RxNetty (from test sources)\n\nPractically no changes to RxNetty for a year and efforts underway to\nrebuild 0.6.x based on a current Reactor Netty base.\n\nAside from the extra time to run integration tests having two\nNetty-based servers can also cause false alarms such as ByteBuf leaks\nrelated to RxNetty."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/369d33c3d00569a8a439910bcff6fca0f4aaec37", "message": "Support charset config by (static) resource location\n\nThis commit adds support for configuring static resource locations\nwith a charset to be applied to relative paths."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/840ef46a9f57ee8d13274907a2052042f2df6632", "message": "Polish\n\nAlso remove ErrorDeferredResultProcessingInterceptor which was meant\nto be package private to begin with as its peer\nErrorCallableProcessingInterceptor (also removed)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/263da1535baab5d605daf888a2f00ec5c4994319", "message": "WebTestClient can be configured with connector\n\nIssue: SPR-16168"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9786750b5acb151fcc845abfb2c8b8679ec44599", "message": "Improve @RequestAttribute WebFlux resolver\n\nThe resolver now takes into account the possibility the attribute\nitself may be a reactive type.\n\nIssue: SPR-16158"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14f02d71927fba21336ec9d81ec8631eab341513", "message": "Update reference with examples of multipart requests\n\nIssue: SPR-16118"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/845110aa66698cd12a77db4b352a7252328e6ef7", "message": "Update docs on HTTP/2"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef39092b3bca3b3dcf85796c66f682ea1e52f726", "message": "UriUtils#encodUriVariables methods are now public"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4534c5fbfc283f840314419a90640a43e66af9cd", "message": "AbstractReactiveWebInitializer supports Servlet mapping\n\nIssue: SPR-16155, SPR-16144"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c33ed02b33c0b708958cf05919740bef9a94e16", "message": "ServletHttpHandlerAdapter supports Serlvet path mapping\n\nIssue: SPR-16155"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa653b23bc68220c34543071ef4219e11c8f29c2", "message": "Add AbstractReactiveWebInitializer\n\nThis commit introduces a new AbstractReactiveWebInitializer in\nspring-web that relies on WebHttpHandlerBuilder to detect request\nprocessing infrastructure beans from an ApplicationContext.\n\nThis eliminates the need to create a DispatcherHandler, since it is\nexpected to be a Spring bean, and as a result the initializers in\nspring-webflux have been deprecated.\n\nIssue: SPR-16144"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/abe4420006d244140d9d4efd0c31756b13951e76", "message": "Improve ReactorNettyTcpClient shutdown logic\n\nThis commit takes care of the TODOs in ReactorNettyTcpClient by taking\nadvantage of improvements in Reactor Netty.\n\nIssue: SPR-16145"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b35b50bef19e6ad27fe7f56a7bff06779f113507", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/64bc9b43115bfc0bd563e1b3d064d0665ecaef02", "message": "Do match message type\n\nSimpMessageTypeMessageCondition was lenient in matching the message\ntype, essentially matching on any non-null message type with an exact\nmatch given a preference only in comparing mulitple matches.\n\nThis commit modifies matching logic to look for an exact match.\n\nIssue: SPR-16109"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/579328bd7ab1517ee88cdda205b39d28d2943ba8", "message": "MockClientHttpRequest|Response support cookie headers\n\nIssue: SPR-16124"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/48c2cc18b97362bd526e65a990e688fbbf296bb4", "message": "Update form + multipart data Javadoc on BodyInserters\n\nIssue: SPR-16118"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8083eaae54233b84edeeaf253234503c2d7f7256", "message": "syncBody better differentiates plain vs multipart forms\n\nFromHttpMessageWriter and MultipartHttpMessageWriter both support\nMultiValueMap except the former supports String values only. This\npresents an issue since either full generic type information must be\nprovided, which is cumbersome on the client side, or if left out there\nis no good way to order the writers to make a proper decision.\n\nThis commit:\n\n- refines the canWrite behavior of   to not a\naccept MultiValueMap without proper generic information unless the\nMediaType is explicitly set providing a strong hint.\n\n- modifies MultipartHttpMessageWriter to be configured with a\nFormHttpMessageWriter so it can write both plan and multipart data with\nthe ability to properly differentiate based on actual map values.\n\nIssue: SPR-16131"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9ede5bcca6ec80a0558e408252fbb5b3e281aa7", "message": "Remove link to build and release FAQ\n\nThe \"Build from Source\" wiki page now consolidates build-related information\r\nand is independent from \"Release\" information. The former is broadly of interest\r\nto any contributor. The later is of interest to committers."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f549d583cb6647214334e9b29b7c383167537dab", "message": "Update links"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3407a6ce7ac2b5cb51f727a1c279390ed696621", "message": "Update link."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2611aa000dcc9b0d67ecf3a83ef9c080eae6479f", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d00552aac857b1a3fafa1d19cb856c1c50b70b9", "message": "Add logo to README"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4437a185f4041b1111f87918bf62c01e0edceb8a", "message": "Replace logo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e0177c9af65cd513596fa576ad66c71f16fc93a4", "message": "Add logo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a7c30570c40771de8125e548ea2a551192caff6a", "message": "Update README.md"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a982123ed5067c2e00101db9a8e317cd6b1434b9", "message": "Decouple ExchangeResult from WiretapRequest/Response\n\nThis commit decouples ExchangeResult from knowledge about\nWiretapClientHttpRequest/Response both of which are now private to\nWiretapConnector.\n\nExchangeResult takes ClientHttpRequest/Response instead along with\npromises for the serialized request and response content in the form\nof MonoProcessor<byte[]>.\n\nThis sets up the possibility for an ExchangeResult to be created\noutside and independent of WebTestClient, should we decide to make its\nconstructor public.\n\nIssue: SPR-16101"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/01e7cae3ed00c0e8eda7d6edbbd7e54846260325", "message": "Fix links"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/065c9cc101073fbf1821c3916d40a6b146113c91", "message": "Typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/376e5b6b538d2ef84660cde7eb48fd71bf8f62de", "message": "README + CONTRIBUTING refer to Build from Source wiki"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3c1518f53ab5ab20aba8d2e4922ccedfb4e23baa", "message": "Update CONTRIBUTING.md"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ac377499cb5d5c51e3d1faa16ea9ab3417aa75d", "message": "CONTRIBUTING is markdwon again + polish README\n\nThe main way CONTRIBUTING will be viewed is on Github and the output\nis just not good enough to justify using asciidoctor vs md/txt as\nthe recommended on the Github help page for contributing guidelines.\n\nFor example it was attractive to use a TOC and that works on Github\nbut doesn't look good. In the end it's a very short TOC and\nmaintaining manually is easy enough and it's easier to control the\nlook."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf4c97cb1cc15b572909d892dc191f6f493ee329", "message": "Polish README"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4e384a636fe75cf71716aab97b81d5636856256c", "message": "Polish README"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1068fe71e80515f501305e1732ef01b9763d12b", "message": "Replace TOC with manual listing\n\nEssentially optimize for viewing on Github since the Asciidoctor\nTOC works but doesn't look good with no styling."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a455feab59ec077d7bcc7ad792103ff549add095", "message": "Optimize TOC for viewing on Github"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/375d26ed505ff2760c7690d25be1afbd7297a5bd", "message": "Update link to CONTRIBUTING"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e30d1d92ec943208b6647efe69e6f224e3a7ae22", "message": "Overhaul contributing guidelines\n\nThe guidelines were originally created several years ago. This commit\ndoes not fundamentally change anything but rather make the guidance\nmore compact.\n\nThe commit consolidates into into CONTRIBUTING.adoc information from\nCONTRIBUTING-DOCUMENTATION.adoc and also the wiki page \"The Lifecycle\nof an Issue\"."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce4d88d4740b33c0cacbc7281981acd101eecdd0", "message": "Convert CONTRIBUTING from md to adoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a3e62284eacda529f28433f26f9f91370d164a3b", "message": "Create Languages section\n\nIssue: SPR-16044"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c80aa83383c3313f46053335b110a87c79ba4a03", "message": "Upgrade to Reactor Bismuth SR3"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1cc5afe24b592a50ab68c090e438138ab180374a", "message": "Fix lines over 120 characters\n\nhttps://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#line-wrapping"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/48eb416eccc6649296ad2e83e09ba8d2a766b6de", "message": "Fix failing tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ab92754a2efebda6baa063e8ecd381c322582cf8", "message": "@MatrixVariable resolvers for WebFlux\n\nThe information was already parsed and available in a request attribute\nbut until now there were no argument resolvers to expose it.\n\nIssue: SPR-16005"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d8a7b96b46bffa8ef376f056f57bdafb1881603c", "message": "WebFlux support for \"request handled\" in controller\n\nIssue: SPR-16087"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/950edf888a9935213ce6dc04a8d140c05fa9a860", "message": "Support for Map method argument in WebFlux\n\nIssue: SPR-16086"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/32d78e60b6bf19a66865478b86c69eb6ff49c8df", "message": "Update information on WebApplicationContext hierarchy\n\nIssue: SPR-16041"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd634633d8ba690ff5c91efdbd0ace19e1018fe2", "message": "MockMvc re-uses response instance on async dispatch\n\nMockMvc now properly detects the presence of an AsyncContext and\nre-uses the response instance used to start it.\n\nThis commit also includes a minor fix in\nResponseBodyEmitterReturnValueHandler to ensure it does not disable\nETag related content buffering for reactive return values that do not\nresult in streaming (e.g. single value or collections).\n\nIssue: SPR-16067"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/94c4a7f94174243899d0f2bf94d6121f68d9c388", "message": "Shortcut factory method in MockServerWebExchange\n\nMockServerWebExchange now has a second factory method that accepts a\nMockServerHttpRequest.BaseBuilder.\n\nIssue: SPR-16079"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b4c95bf2788e3dd0358bc1ff31d8cc3d4ff995ca", "message": "ReactiveAdapterRegistry uses Reactor's JdkFlowAdapter\n\nIssue: SPR-16052"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d05e538fb690aa38e3bef8afc14b1d48a74e054", "message": "Set path in CookieWebSessionIdResolver\n\nIssue: SPR-16030"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4831d38db2e802711287d2474d920be0ab530d5b", "message": "Lower log level for ResponseStatusException\n\nIssue: SPR-16049"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e9187daa5cacb7f807a653a596c3f38754c13928", "message": "Improvements to DispatcherHandler chapter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/314f3fc5478ca32a050cfd5e53b42b8850b1aed2", "message": "Summary of client-side REST options in MVC section"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2e0a2845abe87f709b9f797eef615c6be1e272f5", "message": "Top-level main.css for all asciidoctor styles\n\nProperly separate tocbot from asciidoctor styles and use main.css to\ninclude both."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6833d4cdff3ec37c23e296b2aeca914f3ca8e33f", "message": "Spring MVC content refactoring\n\nEasier to find (at the top level) and better summary of testing support.\nImprove structure headings names.\nRemove or update outdated content."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d4677be5c080b2ce502c281ab116c1e5a2589047", "message": "Improve Web Servlet section structure"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9998c63ee4d4a3987d50c1d4ad8afade6a8b6646", "message": "Compact headings in Web Servlet section\n\nOptimized for viewing in left TOC."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3533db78d24117d11a598b38a06422a9360faedf", "message": "Fix broken link to overview"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b11caeb3ea763bf26680ffedba9bde9e740fdf4e", "message": "Fix headings in WebFlux section"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee3913c6d0e092ba798fb9fb4fc1d758b8692e36", "message": "Use Tocbot for Table of Contents"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8aaa7e9cc7c0618b64be9b052689db39471e6617", "message": "Polish index.html"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eea8ee2165d694165364692bfd1ad761bb7fc09d", "message": "Migrate JSP tag library appendix reference to Javadoc.\n\nThe Javadoc on tag classes now has all the information including a\nlist of all tags at the package level, HTML tables listing tag\nattributes in each tag class, and class level description that is\nas good or in many cases better than what was in the reference.\n\nIssue: SPR-16045"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5a5677fcd2a0948be5ab87fbd418fdc7b2b1daf", "message": "Appendix refactoring\n\n1. Move schemas to local appendix within each top-level section.\n2. Link to Javadoc for JSP tags\n3. Purge Class Spring usage information\n\nIssue: SPR-16045"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d04d4bfb4d4bfabd7cef417d5b45fd992603a18f", "message": "Better \"no content\" support and polish in WebTestClient\n\nThe WebTestClient now takes advantage of the support for decoding\nresponse to Void.class in WebClient so that applications can use\nexpectBody(Void.class) to the same effect as using\nresponse.bodyToMono(Void.class) as documneted on WebClient#exchange.\n\nThe top-level, no-arg returnResult method (added very recently) has been\nretracted, since the use of returnResult at that level, i.e. without\nconsuming the response content, should be used mainly for streaming.\nIt shouldn't be used for \"no content\" scenarios.\n\nDocumentation and Javadoc have been udpated accordingly."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/decb6329dba834043d72c44457d997d0409eda4f", "message": "DefaultWebTestClient internal refactoring\n\nUse the ClientResponse methods bodyToMono and bodyToFlux rather than\npassing in a BodyExtractor so that WebTestclient now also benefits from\nthe recently improved handling of Void.class."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b2017bb1ec8869542129dbfa859143dffdb258c8", "message": "3rd party web frameworks is back in the web section"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45c207aeced189170f983a54c5b00a78221a952c", "message": "What's new and migrating are prominently featured\n\nBefore this commit those were burried in the Appendix where few would\nguess to look. Previously that information was at the top, so it makes\nsense to point to the Github wiki from the index HTML page.\n\nAlso a general update of the index page. Since we have recently revised\nthe overview, we can simply point to it and keep it shorter.\n\nThe section listing now includes more details per section."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6597551858fb64fe3f086a35b7ab8c72cd105056", "message": "WebClient content included in WebFlux section only\n\nBefore this commit WebClient documentation was also included from the\nIntegration section where the RestTemplate is documented. That is\nconvenient but results in duplicate content under different URLs.\n\nThis commit removes the include from the Integration section and leaves"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fbf2e1e35528dff3691f811d16893f737a1b2f18", "message": "Documentation for WebTestClient\n\nIssue: SPR-16009"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7a8c8c062e7c8767fc1fbaae442f568685ffe83e", "message": "Add reactive mocks to testing section"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/48c41049b118733c66e425c8f6ac6d33cb04a4e9", "message": "Correct package for MockServerWebExchange\n\nDiscovered late, but not too late. MockServerWebExchange is now in the\nproper package matching to the location of ServerWebExchange."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/223e27d53d72af3f639f0718a9d1f2e4608e0d14", "message": "Package private request and response implementations\n\nConcrete server and client, reactive request and response\nimplementations should not have to be accessed outside their package.\nThey could be seen as private to their HttpHandler adapters and\nClientHttpConnector's respectively.\n\nThe one exception, WebSocket upgrades in spring-webflux, is an internal\nframework use case, accommodated via downcast + accessors in the\nabstract base classes."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d332e06f6c73c5ef8588f62e2ab822acf892ba36", "message": "Update reference after removal of ClientResponse.close()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2c2bbb45b90b4d899b32034c8e79c83dd64ee7fd", "message": "Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5733065ba45f4512bb2e569e1c443faad91628b0", "message": "Rename webflux-client.adoc to webflux-webclient.adoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67910ee48cd285a6f5367a4206dec8fcf935d056", "message": "WebFlux and Integration share webflux-client.adoc\n\nExtract WebClient content into a separate file that is now included\nboth in the WebFlux and in the Integration sections.\n\nThis allows having RestTemplate and WebClient documented in one place\nunder Integration while also keeping the same included in the WebFlux\nsection too."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71ccf3c9e340f6783fcf436211882257581d27ec", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13c959296a464f30d01d59593fbbea857718f3af", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/869b818e96844791bdd30201f2ee4c636ebba075", "message": "WebFlux support for LocaleContext related arguments\n\nIssue: SPR-15998"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f1bd49f6dd449b902211a5946107c11ee5d1cac", "message": "HandlerMappingIntrospector is a bean"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6ee1af27c61c015461f79f95f1e4f89db911be0c", "message": "WebFlux supports HTTP HEAD\n\nIssue: SPR-15994"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec5969c5786b7810755a2fb0fb78d4e2764cfdf1", "message": "InMemoryWebSession cleans up expired sessions\n\nIssue: SPR-15963"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/15cc44e6e8b715a6e6e499f5e813149045068248", "message": "Add WebSession.invalidate()\n\nIssue: SPR-15960"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6da3518a6662fd0e6725597009acaf0b26262a16", "message": "WebSessionStore updates lastAccessTime on retrieve\n\nNow that WebSessionStore is in charge of expiration checks on retrieve\nit makes sense to also update the lastAccessTime on retrieve at the\nsame time, saving the need to call it after a retrieve.\n\nIssue: SPR-15963"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb2deccb2d414cabea15453ac440abab8cfe1334", "message": "WebSessionStore performs expiration check on retrieve\n\nIssue: SPR-15963"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e7e95cdedbf7eaa44c95afb5b0dbbd49d19cf21", "message": "Polish\n\nIssue: SPR-16009"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d5a25e7378f5cb2d20eedbf3a6de1dcca3d1bfb", "message": "Proper WebFlux reference and MVC reference updates\n\nPending -- WebSocket, WebTestClient, more details around annotation\nprocessing, exception handling, and view resolution.\n\nIssue: SPR-15149, SPR-16009"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41b53de6440687fad47504bc35857667e6b7e6c1", "message": "DispatcherHandler.getHandlerMappings() is also final\n\nIssue: SPR-15934"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb6bd2d7b8752bd1100fff45e95cc5f088146f26", "message": "Remove args and return value lists from @RequestMapping\n\nIt is no longer adequate to list supported arguments and return values\n-- between Web MVC and WebFlux, directly on the annotation.\n\nInstead we have tables in the respective chapters in the reference with\ncross references to each other.\n\nIssue: SPR-15149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bdde0f1ea0424d8639d2c7133d89a799a9721fc7", "message": "WebFlux supports UriBuilder, UriComponentsBuilder args\n\nIssue: SPR-15997"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2da2c17fbb0bec5b1858878826a79a9c6af4ffcb", "message": "WebFlux supporst HttpHeaders return values\n\nIssue: SPR-16006"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d742fc198abc8fee8477cea2d5761649b8ac40e3", "message": "Add consumeWith to FluxExchangeResult\n\nIssue: SPR-15959"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/132022861e635736e2d4ab0f95247ad10cc39cc0", "message": "Remove ResourceServlet deprecated in 4.3.x\n\nIssue: SPR-15984"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed10cab9d3248e3c77ccaa047d9707cf032d0c7f", "message": "Remove DispatcherHandler static factory methods\n\nThe typical way to load DispatcherHandler is to use\nWebHttpHandlerBuilder#applicationContext which also detecs filters,\nexception handlers, as well as other beans that are injected into every\nServerWebExchange -- custom session manager, localecontext resolver,\ncodecs for form data, multipart data, etc\n\nWebHttpHandlerBuilder is the preferred and way so removing the ones on\nDispatcherHandler. They could always be added back later."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c28a6357c52cba0e2edab923fc22741dcd94a95f", "message": "DispatcherHandler alignment with DispatcherServlet\n\nIssue: SPR-15934"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/816a58fcf91b7cdb27b430ae6b96c9143a67d124", "message": "RouterFunctionMapping provides getter for RouterFunction\n\nIssue: SPR-15991"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/31619b3ffbf4e36bf9c3974d07115a8e3417ba03", "message": "DispatcherHandler orders HandlerMappings correctly again\n\nIssue: SPR-15991"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/819ca0dbd40cccd4eae0353ff0b9aeaf248d3ab6", "message": "Expose getters for the configured HandlerMapping's\n\nIssue: SPR-15934"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac5694b1506a6dbc02ae45d37b9a78743998524f", "message": "Web documentation update\n\nIssue: SPR-15149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e214d69350d374a769e59c867f2c50488caf5980", "message": "Remove jetbrains annotations inserted by IDE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c0ca98372bf3133ebc626a8734917f070c6a77d", "message": "Update index.adoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f76ac5bb32c5e5529ca036f44cae4bd25f4f6b9a", "message": "WebFlux support for @SessionAttributes\n\nIssue: SPR-15887"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc470fca3047a5aba0145479069eaba67dfa7601", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dff0e7923ce7b2a27eb6675b2e330437bae0f6b1", "message": "Merge pull request #1507 from rwinch/websessionmanager"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2fc2dab2302afb6e558c7a0e0c172291e1fca217", "message": "Fold DefaultWebSession within InMemoryWebSessionStore\n\nInMemoryWebSessionStore is very closely associated to DefaultWebSession\npassing it to it several fields and functions. Now that the store also\ncreates the session, it makes sense to bring the latter in as an inner,\nnested class.\n\nIssue: SPR-15875, 15876"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c7d54c8b525ff8f6dbaf667745010a3247b2e272", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/320bfdf413ef2e02f023662e2da3a172ae046635", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03eb6f76db2208e4283027fba338fe8da9dd755a", "message": "Improve check for actual return value type\n\nIssue: SPR-15910"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/39cefb5bd7045e72d87edc5fa70da56bdbc82fe2", "message": "One more instance of modified method name in Mono"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc0841c60f43a7977fdc69481c7e9f29ff9e71f8", "message": "Adapt to method name change in Mono"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edb70b4f5554c7fd376645c7884e9215284da9e0", "message": "Merge pull request #1504 from bbohl/stringindexoutofbounds_resttemplate_fix"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d61f7ba60705b42fbc51abd87239586f4f5c802", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dabb02d830d0bcff56b8a8b0ce0899072d0225e3", "message": "Update docs on DispatcherServlet config and processing\n\nIssue: SPR-15149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/940a344a737b6e353d50292b3b68cb2fd2af5bbb", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/18f42f9667bae7aac52eb62408476b40ef69b0c2", "message": "Fix typo\n\nIssue: SPR-15872"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/10dcaa9bf67702fbef799a0532ef33e4e2b9c89c", "message": "Update introduction to Spring Web MVC\n\nIssue: SPR-15149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/11ac87099a93eeb38110a2e25dc2e2569282e336", "message": "Prepare Web section for Servlet vs Reactive content\n\nRefer to both Servlet and reactive stacks in web.adoc\nMove web-integration.adoc to the very end\nLink in web-flux-functional.adoc\nInsert \"Spring Web MVC\" or \"Servlet\" prefix in chapter titles\n\nIssue: SPR-15149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f1b017af04c2077cdb703bfcbda5104900ddd683", "message": "Insert line breaks"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb327b90a64d12d24daf2f0c3258d1dc94a02de2", "message": "Merge pull request #1499 from rlindooren/SPR-15866-use-provided-mime-types"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e433d8b66af01f3cd910471a7837e77015a93791", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/645e3492dba42ec14553fca642344cafba571ed0", "message": "Use URLDecoder for query params in WebFlux\n\nIssue: SPR-15860"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8b7a670821793a1bd15cea0fb388deaf88cd2d0e", "message": "Cancel WebAsyncManager thread on request timeout\n\nIssue: SPR-15852"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c3bd8ce853a3c0cd666842c7b29d3b140cf6036", "message": "Separate forwarded~ and redirectedUrlTemplate methods\n\nThis commit restores and existing redirectedUrl and forwardedUrl\nmethods (simple String comparison) and creates separate\nredirectedUrlTemplate and forwardedUrlTemplate methods that expand\nand also encode before comparing.\n\nIssue: SPR-15834"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8bdaba913c951ea0411d6c805c66b544174d51eb", "message": "Merge pull request #1486 from drumonii/MockRestRequestMatchers-requestTo-UriVars"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea2864c73eb9262b203766102f3e7b535f760c2f", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/181f002ddf22b6b05bd517f57c72f6ec9eeaf0b6", "message": "Use exact type name in doc sample\n\nIssue: SPR-15863"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/280c64ba357440ea13eb4ccefc62984f4567e49f", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c4b1ab781c305328eb98ce7b2eb39f8b57c4753", "message": "Functional PathPattern comparator"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/631b546d1cd31738142acc75884bbf7d7d4ad11d", "message": "Proper null handling in PathPattern comparator"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08dfce2cb551aeb660502fd48a20abe7a8c82226", "message": "Dedicated specificity comparator in PathPattern\n\nThe PathPattern compareTo method is now consistent with equals when\ntwo patterns are of the same specificity but otherwise different.\n\nSeparately PathPattern now exposes a Comparator by specificity that\noffers the current functionality of compareTo. This can be used for\nactual sorting where we only care about specificity."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/62fa20fd6f4b3ebbc2eaf47ebeb5d9f2d91f21c2", "message": "PathPattern#matchAndExtract minor refactoring\n\nConsistent behavior with matches(PathContainer), the two had slightly\ndifferent logic for handling of empty paths.\n\nMake matchAndExtract independantly usable without the need to call\nmatches(PathContainer) first. Essentially no longer raising ISE if the\npattern doesn't match but simply returning null."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dccedd5ad59422ce2b1369784a748e831f2e39a9", "message": "Minor refactoring in PathPattern\n\nRename getPathRemaining to matchStartOfPath since the method does\nmatch and to be more clear about what the method and the return value\nintuitively follows.\n\nRemove matchStart which matches the start of the pattern (rather than\nthe start of the path). It is a use case that does not come up in\nrequest mapping."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c060f4f61586814772880696f123a718ec3c9f4b", "message": "Polish PathPattern and parser\n\nUpdates to Javadoc\nConsistent and separator type neutral naming for trailing slash\nPathPattern extracts options from the parser instance"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6d1fd9d222f324ef9fdee4ae106937653584d6b", "message": "Minor refactoring in PathPatternParser\n\nRemove the separator constructor argument (but preserve internal\nfunctionality) now that PathPatternParser is more explicitly purposed\nfor URL paths and in any case the use of an alternate separator would\nalso requires a similar input option on the PathContainer parsing side."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1794f1cea4cfa019cf5f5d3fd63c0d3430d4248b", "message": "Polish path pattern parsing javadoc\n\nEmphasize specific purpose for URL path matching."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1440b681663c4087ca19fdb755598b7c9706c11", "message": "Remove ParsingPathMatcher\n\nNow that we also have RequestPath and PathContainer with the latter as\nthe required input, the ParsingPathMatcher adapter can be removed."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4fc0ce120628490922ae1392c2ab96a69d02d2d7", "message": "Properly detect null value params in params conditions\n\nIssue: SPR-15831"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f813a63fd859ab4a8c47b2121d58e535f6a5b665", "message": "PathContainer parses URL paths only\n\nCollapse non-URL vs URL based path parsing into one essentially\nsupporting URL paths only."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/af83d2332a0011d83a4a775d57e2d28b9eb53bee", "message": "Fix regression in HttpPutFormContentFilter\n\nRe-arrange the checks so that if there is no form parameter, then\nimmediately and unconditionally delegate to super.getParameterValues().\nOr reversely if there is no super.getParameterValues() then return the\nform parameter.\n\nSo the only remaining case is when combining values present in both.\nIn that case we'll take both only if a queryString exists.\n\nOne extra fix is to not even wrap the request if we did not parse any\nform parameters at all which can happen with HttpHiddenMethodFilter.\n\nIssue: SPR-15828, 15835"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e45733e790565989ef32efaafec6135c763d5f6a", "message": "Update overview.adoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d37498c354cb45256ee4f5533f35d89d8bac00c4", "message": "Update overview.adoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a48a47bbd0e8a07686d5706d7b72c95b3a6597de", "message": "Merge pull request #1487 from Buzzardo/master\n\nNew overview"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dbe25cf717ec69e0340f1711b9d8ebcbeef4c882", "message": "Add RequestPath tests for modifying the contextPath"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6855a85c41a51aeb151c8c1103e30a6a6745197b", "message": "Move RequestPath to parent server package"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45e714ec1316633f336ca591d475b5a7d987358e", "message": "Add test case for SPR-15719"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d20e5fcc59b6bc9c80301ef3e1fb1442dbaec8d5", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d7a7b08b0845da9a0ee6ebae2db2f853e77c5214", "message": "Find the last plus for suffix MediaType\n\nIssue: SPR-15795"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7e232f989ba5d947dc286104b44d0e9ce580a2af", "message": "Improve check for \"Broken pipe\" error message\n\nIssue: SPR-15802"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14ccb38523c5b23ee8c3ac37d93c19b4a7bf24b0", "message": "Handle nested w/o top-level array in Jackson2JsonTokenizer\n\nIssue: SPR-15803"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bd0de7086e846d573324f3f34c9bfd40bed4e9b8", "message": "Jackson2JsonTokenizer unwraps top level array only\n\nWhen the input stream is a JSON array the tokenizer skips over the\nstart and end array tokens in order to decode into an array of\ntop-level objects. However in this mode it also skips over nested\nstart and end array tokens which prevents proper parsing of JSR-310\ndates (represented with an array syntax) as well as any fields that\nare collections.\n\nIssue: SPR-15803"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c3e3df57f870dc5dca4fa48fceceb22f4c299871", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3009e29489567f69d4f458c13eaaf2dbbb38f477", "message": "Remove contentDispositionFormData with charset method\n\nThe method was orginally added under SPR-14547 but the example in it\nwas probably intended for use with Content-Disposition server response\nheader (file dowonload) and not for a Content-Disposition header\nwithin the body of a multipart request.\n\nIn a Spring application a multipart request is typically serialized\nby the FormHttpMessageConverter and hence the Content-Disposition is\nnot explicitly set by the application.\n\nIssue: SPR-15205"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb684ce60b82bb2d3a81828a6780800c51bb4e33", "message": "Improve decoding support for multipart filename\n\nStandardMultipartHttpServletRequest now properly decodes RFC-5987\nencoded filenames (i.e. filename*) by delegating to ContentDisposition\nand also support RFC-2047 syntax through javax.mail MimeUtility.\n\nIssue: SPR-15205"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/378c72e9b6e3f231eca7d3eb87e3e9358b89c816", "message": "Polish + minor refactoring of ResourceUrlProvider"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/68e6b148cbdb14bbed6d4c960db9f5a58245fb5e", "message": "Refactor relative redirect filter support\n\nIssue: SPR-15717"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/147368eccca6d8d8696952c2669efd252b729fb6", "message": "Proactively reject URLs without target address\n\nIssue: SPR-15782"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cbe5a67687239ee93f51f12132505db65c3bd46d", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/43f2de467173c6eff650047755d9d7ee9d140f0e", "message": "Defensive checks in WebClient and Reactor connector\n\nSince there is no reason for an exchange to ever complete without a\nClientResponse I've added a switchIfEmpty check at the WebClient level.\n\nAlso, temporarily a second check closer to the problem in the\nReactorClientHttpConnector suggesting a workaround and providing a\nreference to the Reactor Netty issue #138.\n\nIssue: SPR-15784"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/56903581d9e88894b2103208b4028df48e414b47", "message": "ResponseEntity declared as Object in WebFlux controller\n\nIssue: SPR-15785"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/57221ab15cc18549d8342e1c9163a47e225433d8", "message": "ContentVersionStrategy has non-blocking contract\n\nIssue: SPR-15773"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/efb5ba5a95043ebe0b3b254233909a409f0d3212", "message": "Refactor VersionStrategy in WebFlux\n\nCollapse the base interface VersionPathStrategy into its extension\nVersionStrategy and then turn the prefix nad fliename based\nimplementations into abstract base classes (vs delegate strategies).\n\nIt is simpler to have one VersionStrategy hierarchy vs that plus a\nseparate VersionPathStrategy as a delegate. In practice each\nVersionStrategy is suited to be prefix or filename based. Also none\nof our code cares about the distinction between those two interfaces."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7a0e5a378a04817805ddaac30310fb10b12970b7", "message": "Update for reactor-core change"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b0422d02dc4ec727bdb43ace2627bf004828100d", "message": "Resource transformers use AsynchronousFileChannel\n\nIssue: SPR-15773"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d56fedc226288ebca3afb248679591c4c9dbb070", "message": "Methods for reading a Resource in DataBufferUtils\n\nCurrently ResourceEncoder and ResourceRegionEncoder use DataBufferUtils\nto read resource with an AsynchronousFileChannel if it is a file or\notherwise fallback on getting the channel from the resource.\n\nThe same is now required in other places where a Resource needs to be\nread and is also generally useful.\n\nIssue: SPR-15773"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee91e52c3a942f35964fccfce627c641d1a75b11", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2ee23bfc597c667d3f5792eb319666723cf3014", "message": "WebSession supports changeSessionId\n\nIssue: SPR-15571"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/70252a7335f3136d661d1d8387e4452621c9ed37", "message": "Add tests for SPR-15777"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b0fc83ee058ddf51c8ffadc7f0626ecedddbae5f", "message": "Polish CssLinkResourceTransformer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3749bc1ec33e444c6b7ae41a6287ae642497c6f", "message": "Add timeout to DataBufferUtilsTests to avoid hanging"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47b63150d1bb7891ae668e14b0a55e39d41ebc89", "message": "Refactor DefaultWebSession\n\nUse copy constructor to refresh a session with lastAccessTime and a\nsave function referencing the current exchange. As a result both fields\nare now final and ConfigurableWebSession is no longer needed."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf712957f6c5329e948e90bfe03f4f1c8ab124c9", "message": "Polish WebSession support code"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e37af83459b79096f614add2df26a14a5e3aa571", "message": "Improve docs on on use of urlDecode=false\n\nIssue: SPR-15643"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f5c54f90b309957b16ebebdeba0d57e8e59d7f37", "message": "Add shortcut to mutate + apply to WebTestClient\n\nIssue: SPR-15770"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d04c0424dff50d02dfcd3bf3786ebe9194680c8", "message": "Allow empty body with no content type in BodyExtractors\n\nIssue: SPR-15758"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d2c6ea5b1ba61fe24854a30edb4b220fd91c11f3", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/095cc2283eb347fc11ee44b5135d17c395731104", "message": "Replace constant from QueueSupplier with local one"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed5cc27f7bf09b395af2471f62cc068afe27383f", "message": "Support empty body without content type in WebFlux\n\nIssue: SPR-15758"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9eafce266a341991a224647317444fda0e4420d", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8359201a0d4d625e05a5e7d44a72fa13914024f1", "message": "Improve write completion handling in ChannelSendOperator\n\nAvoid re-using the WriteBarrier as the Subscription to both the\ncompletionSubscriber and the writeSubscriber.\n\nInstead DownstreamBridge is now called WriteCompletionBarrier and is\nboth a Subscriber and Subscription, i.e. handles all signals to and\nfrom the completion Subscriber.\n\nThis frees the request method implementation in WriteBarrier to assume\nit can only be called by the writeSubscriber and hence it's safe to\npass on request signals to the write source outside the synchronized\nblock."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9ac71afbdaa3e9364680b0e396a27b36229e4220", "message": "Fix one failing test and @Ignore another\n\nThe failures look like older failures possibly exposed by recent\nchanges in Reactor.\n\nThe one in ViewResolutionResultHandler is very old test error.\nThe one in Jackson2JsonDecoderTests is more recent but went unreported."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/89a5c857acbc3d816fd7e5cf81a94475a812be64", "message": "Fix recently intorduced bug in ChannelSendOperator\n\nWriteBarrier acts as Subscription to both completionSubscriber and\nwriteSubscriber so the request method needs to be careful not to\npass on the request outside of readyToWrite or writeSubscriber checks."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fbcd554f428c8c5233db550463d0aeaded98fc91", "message": "Fix method order in ChannelSendOperator\n\n1. Group by contract\n2. Follow lifecycle -- Subscriber 1st, Subscription 2nd, Publisher last\n3. Order of declaration in implemented contracts"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/42188020b49d12dc5f1b01c4e2d6693a913e549e", "message": "Polish ChannelSendOperator"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/134ceac58e80c8f345e2a2946be8ce5291b60672", "message": "Set all strategies in CNM factory bean\n\nContentNegotiationManagerFactoryBean now provides an option to\nexplicitly set the strategies to use vs customizing a fixed\nlist of default strategies.\n\nIssue: SPR-11114"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/befacf4a3577a4e7a023ed348a8e9ed142c30a48", "message": "ParameterContentNegotiationStrategy uses MediaTypeFactory\n\nIssue: SPR-15649"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dfcc9af9384a54104b760a782e2b16884e0c1629", "message": "Lazy registration in ReactiveAdapterRegistry\n\nIssue: SPR-15747"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1d5bd8ef35e63be5d6d6f1cf9c9dcdd4397f6f41", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb8454789429f30bbbe0a32d36406603f7d5ee25", "message": "Fix MockMvc + HttpPutFormContentFilter issue\n\nIssue: SPR-15753"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6e9c474328edcac47be23c2ec277b935f026442", "message": "Merge PathContainer refactoring changes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c93792b8c9e5ecea45c739cf8bc3df40ec3e297a", "message": "Allow custom separator in PathContainer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e370e07038da5d5d14185c30fd5dcbfc8b2309c", "message": "Separate out URL path parsing in PathContainer\n\nPathContainer now has separate parsePath and parseUrlPath methods each\ncreating PathSegment and UrlPathSegment respectively."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1d201a55dbea44f6a7499c9203c3f598eeb1ffa2", "message": "Refine PathContainer.Segment value representation\n\nSegment.value() now returns the actual original path segment value\nincluding path parameters while semicolonContent() is removed.\n\nvalueDecoded() is renamed to valueToMatch() to reflect it is the value\nfor pattern matching which is not only decoded but also has path\nparameters removed."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f17c5f3b61b40cee1abcb654fbba9d5e55f9890", "message": "From static to instance-based PathContainer#subPath"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9f7d57f933e84ea9f002ab5376fb12bcdb1120db", "message": "Encapsulate choice of URI encoding within RequestPath\n\nCurrently the URI path is always treated as UTF-8 so we can eliminate\nthe encoding parameter from RequestPath#parse."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fac35ebec2e6e0e1877527ad7b88cea6f6fb67ed", "message": "Remove PathPatternRegistry"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7d747f9645d5194ac15b17bf6a50835d3ea7b326", "message": "Deprecate AsyncRestTemplate methods in MockRestServiceServer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9640cedeaed69902d1351cee27fd3426cdc21c40", "message": "Removing remaining use of PathPattern with String path"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e0de7754cc7138d242ed987d80986f424bff71f5", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aad4916cacf1bda56d79196f3540e87a231db85f", "message": "WiretapConnector removes exchanges\n\nIssue: SPR-15744"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4e95378fc636687a5b4275a2101f0ba4520b0aff", "message": "Remove unused imports"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f9f323b12a5b3cf9135f209c10aa2392c98f5d5", "message": "Add logging to randomly failing websocket test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/acd6b9df06ac24045576cb9ae5736f5fe24a29d2", "message": "Fix failing test\n\nExplicitly pass the client-side JSR-356 WebSocketContainer to the\nTomcatWebSocketClient to prevent the ContainerProvider from finding\nthe one from undertow-websockets-jsr through the ServiceLoader API."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f7478446b704b19783360ed65f85cfbab6b6a8d4", "message": "Improve Object return type support in WebFlux\n\nIssue: SPR-15731"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9528c3532d4bb7eb62514418e32c0c5687722564", "message": "Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/15cf9c1d78039b8b94793a4585032fbfd307c841", "message": "Switch to ContainerPath variants in HandlerMapping's"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/145eab9c2f727464964d4c06531af278ae53ae45", "message": "Remove PathMatchResultComparator\n\nFollow-up change to the previous commit."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a5e54788ccedbe6eef7e7d87586364fdfd67c601", "message": "Remove PathPatternComparator\n\nDirect comparison of a pattern (as a String) to the path does not make\nmuch sense now that we deal with URL encoding through PathContainer\nwhich exposes (safely) decoded path segments.\n\nRemoving the PathPatternComparator also means we can keep patterns\npre-sorted instead of sorting them all the time. That probably offsets\nany benefits from comparing to the lookup path for direct matches and\npatterns are still sorted according to specificity."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/850083ca6c5b9216efff34870fc0d79714605675", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8581afa621f8c87964e7ab28e0304127af0d5bcd", "message": "WebFlux compiles after PathPattern/Container changes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc3fcf05fd4a84aa06634aebe92b503c7cd4c01e", "message": "Refactor PathSegmentContainer -> PathContainer\n\nThe new PathContainer represent the path as a series of elements\nincluding separators. This naturally represents leading/trailing\nslashes and empty path segments which in turn makes it easier to match\nin PathPattern as well as to reconstruct the path."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8f4eb235401374a6c3de3649fa8e58beb5b308de", "message": "Remove use of Optional in SyncHandlerMethodArgumentResolver\n\n... and a couple more protected methods in WebFlux\n\nIssue: SPR-15718"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7de6cfa1df3cc04c08543b05010244c020efcd40", "message": "Refactor WebSession#getAttribute options\n\nIssue: SPR-15718"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9253facf029e1592b5d9f2e0fd72fe47d3cb4515", "message": "Refactor ServerWebExchange#getAttribute options\n\nIssue: SPR-15718"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67330dfc23564ac830e6b33143cf48bd824dfa67", "message": "Expose mapped handler as an exchange attribute\n\nIssue: SPR-15564"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/667437e300ff053142517701816dc94441fcb56b", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cea1a0f1ca174d3bef63bd07604015b71eb2d3f2", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5b8f7f503fd0a40d233a9e55af36b85408903e5a", "message": "Deprecate adapter classes for async interceptors"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb0479dee8cb0a366aa2e4dc707e918a95e86e22", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/043c0eff4fc515cc7fb6375956583228e4421ef7", "message": "Same session after mutate for WebTestClient mock server\n\nIssue: SPR-15674"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97390fd939969f69b9eba2475bcf57d11c4b33c8", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12850c5fc4d6fe51c290e33cce5a836d5875b08a", "message": "Fix test failure by using the new cloneBuilder method\n\nThe cloneBuilder helps to avoid the issue in the comment of the ticket.\nRather than creating the WebClient to then obtain a fresh builder which\ncauses connector instantiation, we now use the cloneBuilder\n\nIssue: SPR-15674"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8fc3b3bc37c3748e90b089abb24e4360857ab335", "message": "Add WebTestClientConfigurer\n\nIssue: SPR-15674"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4db0ce12e1df049d651a03894b1307bd002833cf", "message": "Add MockServerConfigurer to WebTestClient\n\nIssue: SPR-15674"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c37c59f5784994f4c59aa2efb3059e45dc218f51", "message": "Consumer methods for WebHttpHandlerBuilder\n\nReplace the more limited List-based methods to add filtes and exception\nhandlers with Consumer<List<?>> variants."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/782c595cf7f839d2d6bf4c6bfc0502fc8c2c4ae0", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a21fb27fc7e413076507c7e42602ee48f8e7adb", "message": "Fix root path test and add more test cases"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67e482aaf898876080c1b36634ed711c0a41267d", "message": "Fix ROOT_PATH constant to match recent changes\n\n\"/\" should be 0 segments, isAbsolute=true, hasTrailingSlash=false"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef3e309c12853378051d294ad82d68c9299d0c17", "message": "Adjust timeout in Spring MVC for reactive streaming\n\nIssue: SPR-15669"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/53e8ebe6a66e71f2565c496861a0baa0db80359e", "message": "Fix failing test (after previous commit)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97917aa57d898e3e085beb0d17d26728813bb10c", "message": "Add PathSegmentContainer subPath extracting method"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1018bf771b57984cf3c7a9b2ad8c72e8c45165b9", "message": "Separate DefaultRequestPath/DefaultPathSegmentContainer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97a97f9bba284210ac372b045c1ea7a5c4b1fae8", "message": "RequestPath improvements\n\nStatic parse methods on PathSegmentContainer and PathSegment plus:\n\nisEmpty() on PathSegmentContainer and PathSegment\nisAbsolute() and hasTrailingSlash() on PathSegmentContainer\nchar[] alternative for valueDecoded() on PathSegment"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/38a12ed4ba54b6929db0f114a5fa439677e441ac", "message": "Expose RequestPath in ServerHttpRequest\n\nThe new structured getPath() method replaces the existing\ngetContextPath() + getPathWithinApplication().\n\nIssue: SPR-15648"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d17411ec4b3f0b973264ab270689b8f578d3e52", "message": "Add RequestPath to http/server/reactive\n\nIssue: SPR-15648"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/01a92517bdb657193f2aabc99c20113dada232fa", "message": "Refactor RequestedContentTypeResolverBuilder\n\nThe revised builder emphasizes creating a list of resolvers either\nbuilt-in or custom with each top-level builder method resulting in\nadding a resolver.\n\nBy default only the Header resolver is configured.\n\nThe path extension resolver is removed altogether to discourage its use\nbut is trivial to create manually with the helpf of\nUriUtils#extractFileExtension + MediaTypeFactory.\n\nIssue: SPR-15639"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b0e8e7f536e021836ec7737d6d97395f5736f2ff", "message": "Refactor MappingContentTypeResolver implementations\n\nAfter the removal of suffix pattern matches, there is no longer a need\nto expose the list of registered file extensions.\n\nAlso polish, refactor, and simplify the abstract base class\nAbstractMappingContentTypeResolver and its sub-classes.\n\nIssue: SPR-15639"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb604738cf29caec954c1c7b550f9356b97adb86", "message": "ResourceWebHandler uses MediaTypeFactory directly\n\nThere is no need for ResourceWebHandler to go through the\nPathExtensionContentTypeResolver when MediaTypeFactory makes it easy to\nperform such lookups for a given Resource.\n\nThis does not support any extensions explicitly registered through a\nWebFluxConfigurer but it would be easy enough to pass those into\nResourceWebHandler as a simple Map<String, MediaType>, should the need\narise.\n\nIssue: SPR-15639"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b65bfdb9795a0a8cd2f0578dd589fd26a4b89bfe", "message": "Remove HttpRequestPathHelper\n\nThe use of the undecoded URL path by default and the removal of suffix\npattern matching effectively means HttpRequestPathHelper is no longer\nneeded.\n\nIssue: SPR-15640, SPR-15639"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95196e1aee35d98a7866b43c7e0650c1474c1b8c", "message": "Use undecoded pathWithinApplication in WebFlux\n\nIntroduce pathWithinApplication() in ServerHttpRequest and use it for\nrequest mapping purposes instead of LookupPath.\n\nIn turn this means that for request mapping purposes:\n1) the path is not decoded\n2) suffix pattern matching is not supported\n\nIssue: SPR-15640"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4244df740b7c1d0d7911138bbbce40571bf35177", "message": "Consolidate matrix vars parsing in HttpRequestPathHelper\n\nRestore matrix variable parsing code not resorting to the use of\nWebUtils which brings Servlet API dependencies with it.\n\nInstead the parsing logic is now exposed through HttpRequestPathHelper\nwhich already contained the decoding logic and also the knowledge of\nwhether to decode the parsed variables or not.\n\nIssue: SPR-15397"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d2685dfe672ab9be43bff4a73a15f3c3a56839ea", "message": "Add static factory/accessor methods to LookupPath\n\nIssue: SPR-15397"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a7020e419a1b51ae1cbc618487bffe622ac824a6", "message": "Polish use of LookupPath"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d525909642bc25e2addd8b2c4980a7ac26eee74", "message": "Improve docs on forwarded headers\n\nIssue: SPR-15612"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/895fa2ea7b272143fef828443686999f635a819a", "message": "Add removeOnly mode to ForwardedHeaderFilter\n\nIssue: SPR-15610"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b93579a43e97292febf97fa47f6e600642dbdffc", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3e336599026398bd53977bb3f14188cabbc4b48", "message": "Merge pull request #1439 from dreis2211/SPR-15602"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a3f6e4546a213f593cd2386dfc3cb60295764ae", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e81651b657b088f2b122499e863dc0e27adca24b", "message": "Ignore empty Accept-Language header value\n\nIssue: SPR-15603"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/abcc4ac979ca7b0d10e06d3e97b65be38ac41c82", "message": "Fix composability issue in ExchangeMutatorWebFilter\n\nThis commit replaces the UnaryOperatory<ServerWebExchange> inputs with\nFunction<ServerWebExchange, ServerWebExchange> instead. Unfortunately\nthe composability methods inherited from Function don't work in terms\nof generics for composing multiple UnaryOperator's.\n\nIssue: SPR-15599"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5dcfd84d3bf5a01b4c90cab2bb9a88ff8ffae8c5", "message": "MockServerHttpRequest and Response set cookie headers\n\nIssue: SPR-15522"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67bcef22e40b8926eeb4b25b61e078c5ec384e6b", "message": "Polish MockServerHttpRequest|Response"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1383ad5f9143f6ef8d3f1409ab76a8f1ac9f664b", "message": "Reasonable defaults for MultipartHttpMessageWriter\n\nMultipartHttpMessageWriter is now configured to handle JSON and XML\nout of the box."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03b344b579c98b1c3ae975b825260ae35e1fa205", "message": "Refactor DefaultCodecs implementation\n\nSimplify the internals of the DefaultCodecs implementation favoring\nexplicit fields per override vs a generic list of readers and writers\nfor overrides."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1328c8f46e00f591255cba9257bf1ace70b2126e", "message": "Simplify CodecConfigurer related type names\n\nEssentially drop \"Configurer\" suffix from nested interfaces."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d37c966b2831add8fd0e01efa9c1eb8240fbdd3", "message": "Support for decoding @RequestPart content\n\nIssue: SPR-15515"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/be0b67119121901dc0221e0181a6cdee30e568dc", "message": "Upgrade nio-multipart-parser to 1.1.0\n\nIssue: SPR-15515"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0287a74d69032ed2762ef27e8bc4af5781bc2542", "message": "ExchangeResult exposes URI template used if any\n\nIssue: SPR-15589"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd51893a44e2fe9766b9c7e78d3f151561ef3a2d", "message": "Refactor exchange mutator\n\nAs a follow-up to the recent commit 246e72 some slight modifications\nto MockServerExchangeMutator (renamed to ExchnageMutatorWebFilter).\n\nAside from the name change, the main difference is that \"per request\"\nexchange processors are now simply applied via WebTestClient#filter(..).\n\nIssue: SPR-15570"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/346d5d2fabc161e88d03d336c293d340032209d6", "message": "Refactor WebTestClient consumeWith methods\n\nIssue: SPR-15587"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/718162b8c428220f4cb9c86092c9c651dec6e71c", "message": "Fix issue with \"redirect:\" when a media type is present\n\nIssue: SPR-15291"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/805fcc6a059759c22055a747282b23e8a9586490", "message": "ResponseErrorHandler provides access to URI and method\n\nIssue: SPR-15511"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b53b86d24330c2974cde3b4fb141e8362dac369", "message": "Check Reactor presence after Undertow for WebSocket\n\nIssue: SPR-15539"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/df8412bded77faadd60d62dc5c78ca8b2b44a481", "message": "ExceptoinWebSocketHandlerDecorator uses ERROR level\n\nIssue: SPR-15537"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/204a9cf056977f5adc6e7d8cfc8a1f3b69b77b61", "message": "Public constant for webtestclient-request-id header\n\nIssue: SPR-15575"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d4c3d5c0b74d55c4dd6a0927e813f54724cdb5f", "message": "Replace bindToHttpHandler with bindToWebHandler\n\nThis commit replaces the option to bind the WebTestClient to an\nHttpHandler to bind to a WebHandler instead.\n\nThis allows testing below the WebFlux level such as WebFilter,\nWebHandler, or WebSession scenarios, but still a level above\nHttpHandler so that WebTestClient is in charge of creating the\nServerWebExchange and expose consistently the\nWebTestClient#MockServerSpec setup across all \"mock\" server bindToXxx\noptions.\n\nIssue: SPR-15570"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/246e72ff2f3689b0292e119bb0b5cbc24ceb20e1", "message": "Refactor WebTestClient exchange mutator support\n\nThis commit factors ServerWebExchange mutator support out of\nWebTestClient in favor of an independent public class called\nMockServerExchangeMutator which implements WebFilter and can be\napplied to the WebTestClient as any other WebFilter.\n\nThe MockServerExchangeMutator also exposes a method to apply\na client-side filter for \"per request\" mutators. See the Javadoc\nof the MockServerExchangeMutator.\n\nIssue: SPR-15570"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3f32f72bfcd0540eb82f0ff9ed0a07a16cb53696", "message": "Polish\n\nSPR-15576"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6e252495a70d716179db1e91397190ac2a0aee9", "message": "Protect against NPE in DefaultSubscriptionRegistry\n\nFollow-up fix on the recent commit:\nhttps://github.com/spring-projects/spring-framework/commit/44c31a\n\nIssue: SPR-15543"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/11075f12bc2ac27b47d9362751a2a44f808828b9", "message": "Fix URI parsing in Reactor Netty request\n\nIssue: SPR-15560"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/34f1712d59047fa322551d1453994d2044b68a75", "message": "Merge pull request #1422 from svorcmar/SPR-15505"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/48a5938cd4dcbfcf8198b08cf078a774f8ba6b1f", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ac7955de9c99ba4811cbc770426f884a2eb7b63", "message": "More qualified \"request-id\" header in WebTestClient\n\nIssue: SPR-15501"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/add1305252f715d98cb2af7acd01753e1fec1e98", "message": "Re-add vararg options in WebHttpHandlerBuilder\n\nWebHttpHandlerBuilder is low level not expected to appear frequently\nbut they might be repeated more in tests (e.g. of WebFilter's).\n\nIssuse: SPR-15499"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/459457e1aae8036e40c7f7956f647d6f790da608", "message": "WebFilterChain delegation nested in Mono.defer()\n\nIssue: SPR-15520"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47d6e4a332fc8ba5fdd729ea77f5877901570eee", "message": "Immutable DefaultWebFilterChain\n\nIssue: SPR-15517"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c4babd410b88ab7543797d63c7f92fe719dbe00", "message": "Fix minor issue in ExchangeResult"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d28a1c32b6a24025c50cbb2a6125b4c4f313b7e", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d962a1793c3bf0c47b526e02b58d72e2817ad93", "message": "Remove HttpStatus from HttpMessageConversionException\n\nHttpMessageConverter's are client and server and arguably shouldn't\ncontain a server-side concept such a response status.\n\nThe status field is recent, it was added to differentiate 400 vs 500\nerrors with Jackson 2.9+ but there is no need for it since the same\ndistinction is reflected in raising an HttpMessageNotReadableException\nvs a general HttpMessageConversionException.\n\nIssue: SPR-15516"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/83e0e1604a98b20a5fec3754a52101ac3cd3de60", "message": "Refine encoding/decoding exception handling\n\nStarting with removing a package cycle on the use of\nResponseStatusException in the codec package, this commit generally\nrefines codec exception handling.\n\nThe new [Encoding|Decoding]Exception mirror the existing\nHttpMessageNot[Readable|Writable]Exception and are used similarly\nespecially to differentiate betwen 400 and 500 errors when parsing\nserver request body content.\n\nThe commit also aligns some of the exception handling of JSON and XML\non the WebFlux side with that on the Spring MVC side.\n\nIssue: SPR-15516"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d7e54cea84e65b29a82651f7e9de621867373260", "message": "Test commit"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8231812a3c6dcaae6a783176967ed3b8523207d7", "message": "Jackson Encoder/Decoder accept custom MimeType's\n\nIssue: SPR-15474"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/afa1c9358594d9701b9f478e9d3aa1a5dc6b06eb", "message": "Fix error in mock server test code"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75117f42b827397890060d2297b79bbc1b0c528c", "message": "Use the configured charset for part headers\n\nThis comment extends the use of the charset property in\nFormHttpMessageConverter to also include multipart headers with a\ndefault of UTF-8.\n\nWe now also set the charset parameter of the \"Content-Type\" header to\nindicate to the server side how to decode correctly.\n\nIssue: SPR-15205"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bda272393342ab805078217a4512cefadf0ab4c5", "message": "Correct charset determination in Synchronoss reader"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb744574e5fbc5aef1956d35c0f18bb2f4049895", "message": "Remove optional javax.mail dependency from WebFlux\n\nThe MultipartHttpMessageWriter now directly encodes part header values\ndefaulting to UTF-8 and also specifies the charset in the\nContent-Type header for the entire request.\n\nThis should work with something commonly used like Apache Commons\nFileUpload which checks request.getCharacterEncoding() and uses it\nfor reading headers."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a56f735edde2338dcb642028615ae7ecaa962695", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac1db169a449033f0d3de6664bfb73974171baab", "message": "Drop \"get\" prefix from Part accessor methods"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f3051c677f30fd1459a998d5fb3eba8129ecb58", "message": "Support for @RequestPart with reactive type wrapper\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc7bededd02410ce3ed0c828e82b44c170e765ce", "message": "Support data binding for multipart requests in WebFlux\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b5089ac09208daa12b19b06924eff95b670eb764", "message": "Support @RequestBody Flux<Part> in WebFlux\n\nThis commit turns the Synchronoss NIO Multipart HttpMessageReader into\na reader of Flux<Part> and creates a separate reader that aggregates\nthe parts into a MultiValueMap<String, Part>.\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/16901b14975273034194b9c8a109ab749a90f0bc", "message": "Add bindToHttpHandler to WebTestClient\n\nIssue: SPR-15499"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4db1eb1e4e95dbcd4c7be61ddf304dbef92a23ff", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44786ff84083f5ffd07927125aab2eea2b26d379", "message": "Merge pull request #1413 from gvdenbro/forwarded-header-server-port-fix"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/056284b40777211a73096daf8b8c4d5de11857d0", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2ccf78743af231b9f1eb9443fca52c3b18c647b5", "message": "Move 500 error handling to HttpWebHandlerAdapter\n\nIssue: SPR-15506"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1881727b37a75bd9cd3287ae57d9066c978c345b", "message": "Remove ServerWebExchange#getRequestParams\n\nIssue: SPR-15508"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2390748fd7a59c14af060f8724cd6b2f1e62159a", "message": "WebFlux multpart support polish + minor refactoring"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c7338c70dc2052c8539743960a5c470787db8b85", "message": "Support async wrappers for Principal and WebSession\n\nIssue: SPR-15494"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1292bb20f9de8e8ed70986913ac5cfe431bcca64", "message": "WebTestClient supports customer argument resolvers\n\nIssue: SPR-15495"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/191bbc20dcb6769edc550a433e65fca25cdab85f", "message": "StandaloneMockMvcBuilder allows custom HandlerMapping\n\nIssue: SPR-15472"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/60442ec33d1f0a9dcc0eede520b5fec37c7bb135", "message": "Revert build.gradle change committed by mistake"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4f3db9b822bf9769d5f2be5e66f0eca3d7f74370", "message": "Disable Servlet async request timeout in WebFlux\n\nIssue: SPR-15463"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6e71828a351ae31dec6bb0621266e4cef6e4a42f", "message": "Add space before cookie attributes\n\nAccording to RFC-6265 that there should be a space between the ; and\nthe attribute name, i.e. the header should be something like\nname=value; Domain=localhost; HttpOnly rather than\nname=value;Domain=localhost;HttpOnly\n\nIssue: SPR-15225"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/abe3cfd8debea18cbfb32e923cf73d0a86ae98e4", "message": "Flux<String> + \"application/json\" renders as text\n\nSpring MVC now treats Flux<String> + \"application/json\" as (serialized)\ntext to be written directly to the response as is. This is consistent\nwith the rendering of String + \"application/json\".\n\nIssue: SPR-15456"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c67b0d650759bc27786bef06480a417bb611ace7", "message": "Properly support ResponseEntity<Flux<T>> in Spring MVC\n\nIssue: SPR-15478"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7df3d68b2a0f833ec786e577a7a4ba22919bdc2f", "message": "Replace WebMvcConfigurerAdapter with default methods\n\nIssue: SPR-15465"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3b178a812b6c3b55f8060ba75679b3ad7b84f3b", "message": "Consistent JSON array result for Flux<T> in Spring MVC\n\nIssue: SPR-15456"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cc102c2fcdd1d1e3e34cfb09e5efe21ad786e2b1", "message": "Properly handle Flux<?> and Flux<Object> in WebFlux\n\nIssue: SPR-15464"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a93698487e8c5b87685af58dd41eb6dd79c02158", "message": "Fix handling for ResponseEntity<Flux<T>> in Spring MVC\n\nIssue: SPR-15456"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/633544943f99a26ff8fc007d0cafb392ebd73ecf", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7d8dda9a5ac6b05edb0bbb9d23edf44a3c465554", "message": "Polish reactive type support in Conventions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/887e5e50a9a7397b02edb5bd4be65b2a6355325d", "message": "Polish model attribute name checks"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d78d82c516e08c9c74f9ad6260e7a54c8798a342", "message": "Use Conventions for reactive model attribute names\n\nIssue: SPR-14915"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c502b87ca03669b92e13aa2db54d96fcd979066", "message": "Support for reactive types in Conventions\n\nIssue: SPR-14915"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71966b0777d876fc20db62c6ab43b31b90aea505", "message": "Polish Conventions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3efb76c85285bd9899552dd2cb57ec3ae1920174", "message": "Jackson encoder skips String.class\n\nJackson2Encoder explicitly disables String from the supported types\nconsistent with the same change on the decoder side:\n\nhttps://github.com/spring-projects/spring-framework/commit/0662dbf0447d8e788575fcf73fafe248b74cbe8d\n\nIssue: SPR-15443"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ea2caa82cd52241d5e33640e5813a1a90620e01", "message": "JSON content and JsonPath support for WebTestClient\n\nIssue: SPR-15420"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1e8c7e55ded453054d264643afbe58933fd0b9c1", "message": "WebTestClient assert response body with Consumer<B>\n\nIssue: SPR-15421"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e84f246cb934dfef457a53fcd92e3bd31badafa", "message": "Refactor WebTestClient response body expectations\n\nReduce the number of required steps and re-introduce generics support\nfor simple Class<T> cases."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/46a790f9be6070d3c8fbb92bd013208ebe7755f2", "message": "Remove EmitterProcessor#connect (dropped upstream)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fce8ed62cef7df6aaffe5699dc64bf1a0c4faf3a", "message": "Update @ControllerAdvice Javadoc\n\nIssue: SPR-15432"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/779779de7befc9ddda57d0edef55d3164b1cde5f", "message": "Refactor use of TaskScheduler in WebSocket Java config\n\nIssue: SPR-15233"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/190408d1dc36e6566bcf90a0eac1fb532522666c", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f963367484bce59cd7e3f0e02a0a970f38b8842a", "message": "Merge pull request #1362 from romeara/SPR-15367"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/49ac6d54f7703c38d8991e5b48bbc1ea901564aa", "message": "Apply default content type change to WebFlux\n\nIssue: SPR-15367"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/043c7070e3dd73415c96b5ad5b0de0809904150e", "message": "Polish default content type change\n\nIssue: SPR-15367"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e33f603f68fc5ad2abfc4301e5d646a8a80ae0b7", "message": "Revert (recently added) cookie set header flags\n\nIssue: SPR-15225"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5d92a85fcbce98d680d91287eb24697456786a8b", "message": "Mock Servlet request/response support Accept-Language\n\nIssue: SPR-15209"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3393c10d790abfb0092edcce95519807d6f94568", "message": "Refactor HttpHeaders \"Accept-Language\" with Locale"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5fc40a9de80597324e59801d9bfa17ff5cb67a5", "message": "MockHttpSevlet[Request|Response] set cookie headers\n\nIssue: SPR-15225"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4da4f2be315e92a10da76a90ef434b0bb3c41d60", "message": "Async support in MockMvcClientHttpRequestFactory\n\nIssue: SPR-15181"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91977c81adf34abc23fc61ee6d31cb4560c32293", "message": "Support Optional without @RequestParam in WebFlux\n\nThe java.util.Optional wrapper should not affect the support for\n\"request param\" arguments with or without the annotation as it\nworks on the Spring MVC side."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3780d040ee351e718492ac81fba66f4ef00bc8ab", "message": "Polish and minor fixes in ViewResolutionResultHandler"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4c62cc0296ba699440dfe8c01ab5f63dd26ac50", "message": "Controller API for view rendering\n\nIssue: SPR-15211"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b245918574024f4f0e576d984d3b336905d920e1", "message": "Fix compiler warning"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e49d797104af4b9f964c84d75cef0c1a469a1ef9", "message": "Polish HttpMessageWriterView and view resolution"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/10aa56aa8d22b44220af0d7084edf9d5edea6d71", "message": "Remove file committed by mistake"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/43eea41dd6b7260e6ee4c226ece23498e65eafbc", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20", "message": "Revert recent change causing issue in Boot on WildFly"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c7c480610cae60434ffe8f6d496d04157f5e57f6", "message": "Polish doc changes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f293c4d84bb87c9e2d2b68da2bce7ff6e3a7bdae", "message": "Doc use of reactive types in Spring MVC controllers\n\nIssue: SPR-15365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f716c8e9bc8ada04b4060e21680aca793e315cd0", "message": "Consistently check if AsyncContext already completed\n\nRelated to SPR-15412"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c0f2017262f8d3e784007d5e0134e696c1adfcf7", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de6f34893a8fd329822aec3a7875440b2eb86624", "message": "Restore ResponseBodyEmitterReturnValueHandler constructor\n\nIssue: SPR-15410"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ae2306326edfbb8485e2b9a785189ab78cbc80a2", "message": "Add RxJava1 Reactive Streams adapters check"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9221fb87d046f0311b4b97fd9c98d62d5c71998", "message": "Async boundary for Spring MVC reactive type streaming\n\nIssue: SPR-15365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37f9c8675804d4282bed9d2d1fb9da9761aee86a", "message": "Fix failing tests due to last commit"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/62c1e44db212ab55b748f6d245f649289d05a361", "message": "Spring MVC supports reactive return values\n\nThis commit adds support for reactive library types to be returned\ndirectly from controller methods adapting them either to a\nResponseBodyEmitter (streaming) or DeferredResult (non-streaming).\n\nThe reactive libraries supported are the ones that can adapted to a\nReactive Streams Publisher through the ReactiveAdapterRegistry.\n\nIssue: SPR-15365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ae1ed16cb89cffafb5d6e5ab3a090399d147e721", "message": "Async return values refactoring in Spring MVC\n\nRevise Javadoc on AsyncHandlerMethodReturnValueHandler to clarify its\nmain purpose is to prioritze custom async return value handlers ahead\nof built-in ones. Also replace the interface from built-in handlers\nwhich are prioritized already.\n\nRemove DeferredResultAdapter and ResponseBodyEmitterAdapter --\nintroduced in 4.3 for custom async return value handling, since for\n5.0 we will add built-in support for reactive types and the value of\nthese contracts becomes very marginal.\n\nIssue: SPR-15365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/840d7abbf633745e8a7e17fe08ff356cac170e03", "message": "Add ResponseSpec to WebClient\n\nReplace the overloaded \"retrieve\" methods with a single retrieve() +\nResponseSpec exposing shortcut methods (bodyToMono, bodyToFlux)\nmirroring the ClientResponse shortcuts it delegates to.\n\nUnlike exchange() however with retrieve() there is no access to other\nparts of ClientResponse so ResponseSpec exposes additional shortcuts\nfor obtain ResponseEntity<T> or ResponseEntity<List<T>>.\n\nIssue: SPR-15294"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd8c365a0d47d27a4117a24bff8fdf353073596e", "message": "ServerCodecConfigurer as input in HandlerAdapter\n\nThe ServerCodecConfigurer is now passed all the way into the\nRequestMappingHandlerAdapter which automatically enables the same\ndefaults even without the Java config and provides extra flexibility\nin passing message codec configuration for the future."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1db249584c16e17ca94185e18e8da916d56190a", "message": "Fix regression in client codecs\n\nRestore the correct client-side default for whether StringDecoder\nshould split on new lines. It is true forthe server and false for the\nclient by default.\n\nThe regression was introduced in the recent refactoring:\nhttps://github.com/spring-projects/spring-framework/commit/f8a21ab11bf1ecad7ac7866f280d42c70be48b8a#diff-0175d58138b2e8b2bec087ffe0495340"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8162c03f9dd0a2922204f11d93b82acc3efc989", "message": "Add ArgumentResolverConfigurer\n\nReplace the List<HandlerMethodArgumentResolver> with a dedicated\nconfigurer that currently has one method accepting custom resolver\nregistrations."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c5bcefbd0739f6abf925d617c2e8b537f7ae812e", "message": "Complete RequestMappingHandlerAdapter refactoring\n\nControllerMethodResolver now also encapsulates initialization, storage,\nand use of HandlerMethodArgumentResolver's by annotated method type."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e06871ef175227305f6c0f09d1d63fccd9b9fdf0", "message": "Internal RequestMappingHandlerAdapter refactoring\n\nExtract controller method caches including associated code and\ndiscovery of @ControllerAdvice components into a separate, package\nprivate helper class (ControllerMethodResolver)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/525f30ad5e9bac3ed5e55b577ce779c0d021db1d", "message": "Remove dated references on URI template RFC"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0479e3eefcce86c22605868b042a2cb0bbb8d3d6", "message": "Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e96cfa7cdb07b5fc147ae78fe25e72dd1475b12", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f8a21ab11bf1ecad7ac7866f280d42c70be48b8a", "message": "Add ClientCodecConfigurer\n\nIssue: SPR-15247"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc3851df00aa50c209a5be6df59e4d84a3f7c477", "message": "Extract AbstractCodecConfigurer base class\n\nIssue: SPR-15247"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba3b521af38bbbbd7924d62fb257914411e78d46", "message": "Merge ServerCodecConfigurer + refactoring"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec5b5c8578f7ae0754068f400f9a3db6adfffcee", "message": "Rename Http[Encoder|Decoder] to HttpMessage[Encoder|Decoder]"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5414cd0cf8228d4cd1a3873ae18b4fcb91b6e556", "message": "Collape ServerHttpMessage[Reader|Writer]\n\nThis commit folds ServerHttpMessage[Reader|Writer] into its parent\nHttpMessage[Reader|Writer] with the server methods pre-implemented\nby default to be simple pass-through delegates."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a7218f54fa881b6e3ca372c0f0eeb67b721059a", "message": "Introduce ServerCodecConfigurer\n\nIssue: SPR-15247"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0662dbf0447d8e788575fcf73fafe248b74cbe8d", "message": "String decoding for text only vs any MIME type\n\nFollow-up to:\nhttps://github.com/spring-projects/spring-framework/commit/3d68c496f15c80a75711480a569cda1f7c64dc91\n\nStringDecoder can be created in text-only vs \"*/*\" mode which in turn\nallows a more intuitive order of client side decoders, e.g. SSE does\nnot have to be ahead of StringDecoder.\n\nThe commit also explicitly disables String from the supported types in\nJackson2Decoder leaving it to the StringDecoder in \"*/*\" mode which\ncomes after. This does not change the current arrangement since the\nthe StringDecoder ahead having \"*/*\" picks up JSON content just the\nsame.\n\nFrom a broader perspective this change allows any decoder to deal with\nString if it wants to after examining the content type be it the SSE\nor another, custom decoder. For Jackson there is very little value in\ndecoding to String which works only if the output contains a single\nJSON string but will fail to parse anything else (JSON object/array)\nwhile StringDecoder in \"*/*\" mode will not fail.\n\nIssue: SPR-15374"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d68c496f15c80a75711480a569cda1f7c64dc91", "message": "String encoding for any MIME type\n\nCharSequenceEncoder now supports all MIME types, however since encoding\nFlux<String> can overlap with other encoders (e.g. SSE) there are now\ntwo ways to create a CharSequenceEncoder -- with support for text/plain\nonly or with support for any MIME type.\n\nIn WebFlux configuration we insert one CharSequenceEncoder for\ntext/plain (as we have so far) and a second instance with support for\nany MIME type at the very end.\n\nIssue: SPR-15374"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2896c5d2ab23b6faf1004d3e9aef18d23d790c04", "message": "Revise \"streaming\" MediaType support\n\nPush the knowledge of what media types represent \"streaming\" down to\nthe Encoder level where knowledge is required (e.g. to encode a\nJSON array vs a stream of JSON elements)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a999f40daaac6fd77ccf48ed57ffd13eb5eab9ed", "message": "Polish + minor refactoring of SSE reader and writer\n\nInstead of accepting List<Encoder|Decoder> and then look for the first\nto support JSON, always expect a single JSON [Encoder|Decoder] and use\nthat unconditionally.\n\nWhen writing use the nested ResolvableType instead of the Class of the\nactual value which should better support generics.\n\nRemove the SSE hint and pass \"text/event-stream\" as the media type\ninstead to serve as a hint. We are expecting a JSON encoder and using\nit unconditionally in any case so this should be good enough."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d0e0b6c8c9b03a9342c9b722ab12039e3791f94f", "message": "Minor Jackson encoder/decoder refactoring\n\nConsolidate JsonView hint extraction in shared base class.\n\nRename base class from AbstractJackson2Codec to Jackson2CodecSupport\nsince the class mainly provides support methods."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/35805995c2bcc96967ee8f79fa79e7265756bfe2", "message": "Polish EncoderHttpMessageWriter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5345bd4a85cc5f9ba723bec7c558f685ccb22bac", "message": "Fix failing tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/041437fd687dbf44b2da223653bbae9a58e96410", "message": "Merge refactoring steps in HTTP codec package"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/124cdb5c588376cea966e3c1ec4981a50239275c", "message": "Polish Javadoc of [Server]HttpMessage[Reader|Writer]"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54013a092018920651dc69f8228f443777d4d81b", "message": "@EnableWebFlux uses ServerHttpMessage[Reader|Writer]\n\nServerHttpMessage[Reader|Writer] are now expected for WebFlux,\nannotated controller endpoint and subsequently the instanceof checks\nfor HttpMessage[Reader|Writer] vs ServerHttpMessage[Reader|Writer] can\nbe removed from AbstractMessageReaderArgumentResolver and\nAbtractMessageWriterResultHandler."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c8671041f124a95105e0a0d0752adabc71e91c6c", "message": "EncoderHttpMessageWriter supports streaming MediaTypes\n\nSupport for flushing in EncoderHttpMessageWriter is now driven from a\nconfigurable list of \"streaming\" media types with the list including\n\"application/stream+json\" by default.\n\nAs a result Jackson2ServerHttpMessageWriter is no longer needed."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f65544c1928d9e4d9b491faabc1e712cd628774b", "message": "Introduce ServerHttp[Encoder|Decoder]\n\nServerHttpEncoder and ServerHttpDecoder are HTTP-specific\nspecializations that can prepare encoding and decoding hints from\nextra information available on the server side.\n\nAs a result Jackson2ServerHttpMessageReader is no longer needed."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f8bc4552f487d5a61fd04b5dae0ee519c43d4c4", "message": "[Encoder|Decoder]HttpMessageWriter server support\n\nThere is a natural way to implement ServerHttpMessage[Reader|Writer]\nfrom [Encoder|Decoder]HttpMessageWriter by resolving hints first via\na protected method and then delegating to the regular read or write.\n\nThere is no downside either since it does not prevent\n[Encoder|Decoder]HttpMessageWriter from being used for both client and\nserver scenarios while they're more useful.\n\nAs a positive side effect AbstractServerHttpMessage[Reader|Writer] can\nbe removed further simplfications can be made (in a future commit) to\naccept ServerHttpMessageWriter for configuration purposes on the server\nside and remove instanceof checks for ServerHttpMessageWriter."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1be2d8343d3379f8ecf866ede0356be9e2c4d748", "message": "Merge pull request #1356 from poutsma/SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1329ccf1bc6b5650670f13cc9d7ec1b4cc72f716", "message": "Update tests to new mime types\n\nThis commit updates the test code base to conform to changes in media\ntypes returned by the MediaTypeFactory.\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f075c9060ece6d37efeab0a5f3a0a8fe9842c80", "message": "Update after changed method in Reactor Core"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/76fe5f6fce3a62b12537415e49d4c3ed17af9393", "message": "ResourceHttpMessageWriter refactoring\n\nFold ResourceRegionHttpMessageWriter into ResourceHttpMessageWriter.\nThe latter was a private helper (not meant to be exposed) and the two\nhave much in common now sharing a number of private helper methods.\n\nThe combined class does not extend AbstractServerHttpMessageConverter\nfrom which it was not using anything.\n\nInternally the combined class now delegates directly to ResourceEncoder\nor ResourceRegionEncoder as needed. The former is no longer wrapped\nwith EncoderHttpMessageWriter which is not required since \"resource\"\nMediaType determination is a bit different.\n\nThe consolidation makes it easy to see the entire algorithm in one\nplace especially for server side rendering (and HTTP ranges). It\nalso allows for consistent determination of the \"resource\" MediaType\nvia MediaTypeFactory for all use cases."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c735ffb39b0404e97ae72d9e2c6f5e52fe6eb18c", "message": "Fix content type issue in ResourceRegionHttpMessageWriter\n\nResourceRegionHttpMessageWriter no longer extends from\nEncoderHttpMessageWriter freeing it to pass the correct content type\ninto the encoder.\n\nConsidering that the main benefit of EncoderHttpMessageWriter is to\ndeal with content type fallback cases, there is nothing to be missed.\n\nFurthermore ResourceRegionHttpMessageWriter is a package private class\nthat is used internally within ResourceHttpMessageWriter and never\nexposed externally as a an actual HttpMessageWriter.\n\nIssue: SPR-15358"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2979b37ae3badd2ff6e8048c1b21e8b6229a35f0", "message": "Consistent use of Mediatype in EncoderHttpMessageWriter\n\nEncoderHttpMessageWriter now consistently uses the same MediaType to\nset on the response and to pass to the encoder.\n\nIssue: SPR-15357"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91a75ed772e0cdbb50c3aacdbc91eab4b5f35dd1", "message": "Polish EncoderHttpMessageWriter Content-Type handling"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ad91b94249c236b5508d36434a847b90312e9ce4", "message": "Require Encoder & Decoder in Reader & Writer wrappers\n\nWhen CodecHttpMessageConverter was split into DecoderHttpMessageReader\nand EncoderHttpMessageWriter the null checks were never removed.\n\nThis commit makes the Encoder and Decoder instances provided to their\nrespective wrappers required."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71852a9241a594ea74d0ecd32c1facfdcd7efb58", "message": "Trap exception from SockJS HeartbeatTask\n\nIssue: SPR-15307"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54192cf5138c7e9bce2f05673ec448b503c0d5f2", "message": "WebTestClient (server-less) setup accepts WebFilter's\n\nIssue: SPR-15349"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e", "message": "Polish HttpHiddenMethodFilter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37592ea07c1257326c98f88ca07c37974ba9f118", "message": "DefaultWebFilterChain is a top-level, public class\n\nIssue: SPR-15348"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6e2c585c8b16c2bf88f483eb36d906bac08796d", "message": "Refactor tests to use toExchange() shortcuts\n\nIssue: SPR-15350"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41c413a7489f4e3d612b1133328eb0fe2fe80e92", "message": "Add MockServerWebExchange and toExchange shortcuts\n\nIssue: SPR-15350"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8be0b9ce9044c8e94271385fad0898c5a1fbbeed", "message": "Fix issue in WebTestClient support for exchange mutators\n\nExchangeMutatorWebFilter now supports multiple mutator registrations\nfor the same request header id by creating a single composed function.\n\nIssue: SPR-15250"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d39da1d06ddebca55caeee8d7439381eba8ba2ed", "message": "Polish + minor HttpHandler refactoring\n\nCompositeHttpHandler is public and called ContextPathCompositeHandler.\n\nAlso an overhaul of the Javadoc on HttpHandler, WebHttpHandlerAdapter,\nand ContextPathCompositeHandler."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/164204ca04b9b369267ef5e36c2f243b3898bae1", "message": "Reactive type checks for all argument method resolvers\n\nAll method argument resolvers now explicitly check for the presence\nof a reactive type wrapper and reject it where not expected.\n\nIssue: SPR-15297"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a04fef84509bf4d497ffe77ff5a5c79679c46cde", "message": "Rename AbstractHandlerResultHandler to HRHSupport"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a7582fcc235c87940db5fa5cc1d11e13b8d140b2", "message": "Polish method parameter handling"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ae9afd5a55715d37a185223736725915e330b27", "message": "Refactor SyncInvocableHandlerMethod\n\nSwitch from extension to delegation model, i.e. delegating to\nInvocableHandlerMethod, so that only sync invocation is exposed and\nonly resolvers of type SyncHandlerMethodArgumentResolver are allowed\nto be configured in a cleaner fashion."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f490f3ca63a56a6e31a271b513f89f2926b491fa", "message": "Polish SyncHandlerMethodArgumentResolver hiearchy"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f84580c32d88ffbc25bd12cfc9c323eda5bc2dcb", "message": "Per-request exchange mutating for WebTestClient\n\nIssue: SPR-15250"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f36e3d4a0df2e057bd8bf339aee2eb4cdf9936c4", "message": "Support for mutating ServerWebExchange in WebTestClient\n\nThis commit adds a common base class for server-less setup with the\noption to configure a transformation function on the\nServerWebExchange for every request.\n\nThe transformation is applied through a WebFilter. As a result the\nRouterFunction setup is now invoked behind a DispatcherHandler with\na HandlerMapping + HandlerAdapter.\n\nIssue: SPR-15250"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c9d4deba2fc4506f8160b9ef6a8813b081cf460", "message": "Add methods to prepend WebFilter + WebExceptionHandler"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2cd6240dab883758d6c0d230aafc4b972181f1e9", "message": "Polish WebHttpHandlerBuilder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/813d3efe61ad59932e8ffb7c13080c328bc4f96f", "message": "ExchangeResult refactoring in WebTestClient\n\nThe WebTestClient API no longer provides access to a base\nExchangeResult without a decoded response body.\n\nInstead the response has to be decoded first and tests can then\naccess the EntityExchangeResult and FluxExchangeResult sub-types."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a1c24d212223642ac0e39602049016c7ae65eb30", "message": "SSE reader support to read full content as a String\n\nThe SSE reader is ordered ahead of StringDecoder because with\nresponse.decodeToFlux(String.class) we actually want the SSE reader\nto get involved first based on the content-type.\n\nAt the same time with response.decodeToMono(String.class) there is\nnothing the SSE reader can do while the StringDecoder could read the\nentore content as one String, as long as the server does terminate\nthe stream which can happen in a testing scenario.\n\nThis commit updates ServerSentEventHttpMessageReader#readMono in\nto support String.class by delegating to StringDecoder. Since\nreading to a Mono is an explicit choice there is not much possibility\nfor interfering with decoding to Flux.\n\nIssue: SPR-15331"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c36d3c4d90e7a7e7492c6fd4d1c32fde04976c4", "message": "Refactor use of DataBufferFactory in SSE reader\n\nThis commit simplifies the use of DataBufferFactory in the SSE reader\nwhich is used only to wrap a byte[] as a DataBuffer. There is no actual\nbenefit to use anything other than a DefaultDataBufferFactory."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9aa25c39826b20257cd2c08a162470618dd84c5e", "message": "Polish ServerSentEventHttpMessageReader"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d57d3efc8991ad69c8cf2d6106b7605b1d8cd80b", "message": "Polish default config for ExchangeStrategies\n\nAdd default readers and writers from separate methods instead of\nhaving them interleaved which is hard to read and easy to miss.\n\nIssue: SPR-15331"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/84d11e9c17313c08b08ad7471973680e03a3b2bf", "message": "Update Javadoc on exception resolvers in MVC config\n\nIssue: SPR-15324"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f5804b40b2cc5139149c97f67f6905a0bb3a6cde", "message": "Fix typo in docs"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37726f42143c36a7dd744b40e3c766dc7edc397e", "message": "Improved annnotation support in ResolvableMethod"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0296d003af5aa45d489af4c3dd43945e60954c4a", "message": "Improved generics support in ResolvableMethod"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cdf19d1db19d07819fdfc319a721ff38410fa87f", "message": "@RequestParam tests use ResolvableMethod"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6950cc0e64abd10e4c8890aa6baf06d74a9dde95", "message": "Move ResolvableMethod\n\nFrom spring-webflux to spring-web test sources since it is perfectly\nusable for testing Spring MVC annotation method support.\n\nPotentially to be promoted further up for use in any module that has\nannotation method support. It has spring-core dependencies only"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ed22394cfdb9326f56bb2af2c26200c0fc5a511", "message": "Refactor ResolvableMethod"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce69855274e93b436c378e808f746f0d1cc2e538", "message": "Fix failing tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ccb2c6530ee76d785eb1576411f860f291445266", "message": "Support for @ControllerAdvice in WebFlux\n\nIssue: SPR-15132"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/24034447f60ac62caf2f1683eeff7ed88aa89740", "message": "Polish ExceptionHandler initialization\n\nIn preparation for SPR-15132"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d8b150e83d1a5d617ae73d1a65d1f9364dff6d9b", "message": "Refactor BindingContext initialization\n\nIn preparation for SPR-15132.\n\nTurn the BindingContextFactory into ModelInitializer (both package\nprivate) since creating BindingContext itself is quite simple.\n\nThe ModelInitializer also has only one field and no need to be aware\nof fields the RequestMappingHandlerAdapter."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c1086f41144e43f0c0dab5761497330c91452e90", "message": "Polish BindingContext\n\nIn preparation for SPR-15132."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5237e47e666b552fe3db1aaa4ead4daa27f144a4", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/226c9f9a73d9468b5c0b1c7dfc35700619e06386", "message": "Add WebFlux redirect integration test case\n\nIssue: SPR-15291"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aecdf738d3d95e99074f89be62be8c2a312e2205", "message": "Print session attributes in PrintingResultHandler\n\nIssue: SPR-15189"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/24dbfc8ace867f5a65b2db0591b4c35759420c15", "message": "Fix wrong access modifier in MockMvc standalone setup\n\nIssue: SPR-15248"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f219680d42e4ccb80fefd3e72ef848bfc9ab5488", "message": "Add equals/hashcode for STOMP Subscription\n\nIssue: SPR-15229"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ea5f81c00d022ef0668aec07f5af4b399650b8e", "message": "Support flash attributes on ResponseEntity redirect\n\nIssue: SPR-15176"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/262e5f783dc5514720202ec0ea47f420b975ac63", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2515134f8ebbb6cc3b12c0055d9687105ea1ee1d", "message": "Fix direction of arrows in request/response output"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e6401b29e68067c09db04991ec7096afc1b790a9", "message": "Access to request and response byte[] in WebTestClient\n\nThe WiretapConnector now decorated the ClientHttpRequest & Response\nin order to intercept and save the actual content written and read.\n\nThe saved content is now incorporated in the diagnostic output but may\nbe used for other purposes as well (e.g. REST Docs).\n\nDiagnostic information about an exchange has also been refactored\nsimilar to command line output from curl."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71b021c7cca87a6ca1d71532961dd082cf50c66a", "message": "Add decorators for ClientHttpRequest & Response"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d59dc970a046796a5f9ed734b317dd5082c6410a", "message": "Expose response cookies from ExchangeResult"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/24358200c3b69c702d5cfed8304a3ea55ab2a6c9", "message": "Assertion errors with request and response details\n\nIssue: SPR-15249"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1a64e1122335834731613764efc3cc63e96c920", "message": "Refactor ExchangeResult\n\nClearly separate how the result of an exchange is represented before\nthe response body has been read (e.g. assertions on status and headers\nonly) vs later after the body is extracted to a representation\n(assertions on the extracted body) or is decoded to Flux<T> (e.g. for\nuse with a StepVerifier)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/20be40bf64a753953296967b937f118bc6f40129", "message": "WebTestClient polish and minor refactoring"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9829a620444fdd481457004358b1bfa4df222499", "message": "Refactor WebTestClient assertions take 3\n\nWebTestClient now defines all the steps from setup to performing\nan exchange and applying expectations.\n\nThe order of expectations now ensures the response status and headers\nare verified first since that's available before the body is consumed\nand also because it determines how the body is to be decoded, i.e.\nerror vs success scenarios.\n\nThere is now a built-in option for verifying the response as a Map\nalong with Map-specific assertions.\n\nThere are similar options for verifying the response as a List as well\nas whether to \"collect\" the list or \"take\" the first N elements from\nthe response stream."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/285ba7d391a06ee058fafdc42746de2fc6990ef8", "message": "Update WebTestClient builder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/51f2042e9759c7f0575fcf133cd53dac4c44bfba", "message": "Refactor WebTestClient assertions\n\nRather than returning ExchangeActions that contains ExchangeInfo and\napplies a chain of assertions, the exchange operation in WebTestClient\nnow has an extra step to decode the response.\n\nThe outcome of that is ExchangeResult<T>, parameterized with the\ndecoded body type, and containing the request and response details,\nalso providing access to built-inassertions via an assertThat()\ninstance method.\n\nThis approach lends itself better to decoding and asserting response\nbody types with generecis. It is also more friendly to using any\nassertion library such as AssertJ since you get the result first\nand then deal with assertions."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/130598ffb28342cc2a2a10e2fa62de79cb26ad4c", "message": "Updates to ExchangeActions\n\nAdd assertEntity(Foo.class).map() -> Map<String, Foo>\n\nAdd assertBody().map() -> Map<String, String>\n\nRename andAssert(Consumer<?>) to \"consume\" in assertion classes\n\nRemove andAssert + andDo from top-level ExchangeActions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2e5e7653cd6e8a4cb1d69a88e571b7f267c644c", "message": "Add mention of WebFlux testing support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f68af686070b36bf78712a4e78441cf35ae725a", "message": "Uncomment test following fix in reactor-netty"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/896e4db411103c7b747d73a4fec0eed82e1b53ad", "message": "ExchangeActions update\n\nPut assertBodyXyz options behind a common assertBody() entry point\ncurrently including \"isEmpty\" and \"asMap\" but in the future others\nrelated to JSON content or XPath for example.\n\nNow that ExchangeActions provides method to access the ExchangeInfo\nit has been removed from constructors of assertion classes that\nalready have ExchangeActions."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d513fe87f299afd47ad05fd55abc1b10465901a3", "message": "Refactor ExchangeActions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/92f09c650fce82156daeb7434c1ed0c9618344c0", "message": "Unit test for reactive test support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4b4201efa1b3f8f310ff5aef15555e0c20795b52", "message": "WebFlux test support for server endpoints\n\nIssue: SPR-14590"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9efa976d31a3d91cec8745a473aba89c6539135c", "message": "Correct generic type in BodyExtractor for form data"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2967467e08a969a4e338c7b9a342bb2dda7f971", "message": "Improve writing in mock reactive request and response\n\nBefore this change the write Publisher was saved and Mono.empty()\nreturned from the write metohd which did not properly implement\nthe write contract since no writing (\"consuming\") was done.\n\nThis can be a problem in some cases. For example the request may appear\nto succeed even if the publisher produces an error later when\nsubscribed to later after request handling completes.\n\nThis commit introduces a writeHandler function in the mock request and\nresponse. By default it \"writes\" by consuming the content immediately,\nwhich allows it to return a Mono<Void> that properly reflects when\nwriting is done, and it also caches the data so it may be replayed\nlater for test assertions.\n\nFor streaming scenario a custom writeHandler may be registered which\nallows the custom handling to determine how long to stream before\ncancelling so request handling may complete.\n\nIssue: SPR-14590"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1466c82f538b1edcbff99a69c8cf6c67dff9690d", "message": "Better support for overriding base URI in WebClient\n\nThe base URI is ignored for requests that include a host.\n\nWebClient exposes UriBuilder (rather than UriBuilderFactory) for\nper-request URI building based on the base URI. That provides\nfull control to add or replace components of the base URI."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/82a34f4b246537429a8b236f0d1790b1ae924091", "message": "Update WebClient builder\n\nLeave only one static, no-arg build() method for access to a Builder.\n\nURI-related preferences are now exposed on the builder itself.\n\nImprove Javadoc with base URI examples."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73999567083b1c20cad1aa47393056c501882663", "message": "Rename classes and methods containing \"WebReactive\"\n\nIssue: SPR-15190"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/080a3d6a41034e9e746be0c555af81f3d4f8cf9e", "message": "Replace use of \"Spring MVC\" in spring-webflux module\n\nIssue: SPR-15190"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fafd2d20e177d56b5d08dfa630b920d7095877da", "message": "Rename spring-web-reactive to spring-webflux\n\nIssue: SPR-15190"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/81d121797645c65cbfc5a85b73b3540e1ab0ea92", "message": "Support for default headers and cookies\n\nIssue: SPR-15208"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3e8ac25342c59233ed4c685196e0e93a52ee3143", "message": "Refactor WebClient builder options"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/60517b23e2de6baea356fe546d35bd5b650fa876", "message": "StompSession supports custom headers for UNSUBSCRIBE\n\nIssue: SPR-15131"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/949bb55ef5cacc85a44f8d58b81c499228258cfb", "message": "Refactor random port in spring-websocket\n\nRemove the use of SocketUtils#findAvailableTcpPort in favor of letting\nservers pick a dynamic port by specifying port 0."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c79092f0f98073d74917c044d234fee658226456", "message": "Refactor random port in reactive module tests\n\nThis commit removes the use of SocketUtils#findAvailableTcpPort in\nfavor of letting servers pick a dynamic port by specifying port 0.\n\nThis should make integration tests more stable because the port is\nchosen at the place where it needs to be used. It gives servers a\nchance to try to open a socket on some port and start using the socket\nif successful."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1fb0b0b78609e5d201d90062149697e68722612a", "message": "Expose remoteAddress from ServerHttpRequest\n\nIssue: SPR-15200"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9142427c4d898db174aa895494269ff6d2372556", "message": "Add committed flag to ReactiveHttpOutputMessage\n\nIssue: SPR-15135"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd476832cc23e9b52b7d3d7d194ff9e33b734224", "message": "Add check for Long.MAX_VALUE\n\nIssue: SPR-15203"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74a3013174b046cc95f6f484bd5b4c6701456c00", "message": "Replace use of deprecated Reactor Operators#getAndAdd"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b487ed6748a0cdf68dc0e20ee5733d56a1f711f2", "message": "Fix trailing slash issue\n\nIssue: SPR-15201"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee861e8001072a11c0c619c8739ef1297e36bb46", "message": "Fix compiler deprecation-related errors"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ecb2e97ab46001ee350f0a8234ae41f668ee8fb2", "message": "Merge changes for SPR-15124"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d057c3d981730c398c3a68cf0d71c9dfff69ba3b", "message": "Deprecate DefaultUriTemplate handler\n\nFollowing on the introduction of the UriBuilderFactory and its\nDefaultUriBuilderFactory implementation, this commit deprecates\nDefaultUriTemplate (and AbstractUriTemplateHandler).\n\nThe new DefaultUriBuilderFactory has comparable functionality and is\nmore flexible but cannot be merged  into the existing hierarchy and\nbe backwards compatible with regards to protected methods.\n\nIssue: SPR-15124"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8edc68095751246503e8b7cd282a916ee6c29d0f", "message": "Scale back static factory methods in ClientRequest\n\nFollowing on the introduction of WebClientOperations in the last commit\nthis commit removes the HTTP method specific factory methods and also\nscales back the builder options in ClientRequest.\n\nClientRequest is now expected to be used mainly from an\nExchangeFilterFunction which may modify the ClientRequest using the\nfrom(ClientRequest) entry point rather creating from scratch.\n\nIssue: SPR-15124"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6ec35394f09ddb4ba7cc48bba2189ea74e6b8a5", "message": "Introduce WebClientOperations\n\nIssue: SPR-15124"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b67b5bc2a3443026e92af28275d176648353110", "message": "Introduce UriBuilderFactory and UriBuilder\n\nIssue: SPR-15124"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb0d992303213c42403e7c0f2da6253d889b1e37", "message": "Refactor test HttpServer implementations\n\nDue to the static nature of JUnit parameterized test inputs, an\nHttpServer instance is re-used for all tests per test class.\n\nThis commit adds lifecycle handling to AbstractHttpServer with a\nlifecycle monitor to ensure test server fields are properly\ninitialized and reset after each test ."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4aac7c2ee2dea657f5eed533a58857dd47d5d031", "message": "Minor refactoring in Tomcat/Jetty adapters"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a2aaa05592fb29d0fa61a69bc61ef35c235423f0", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea67a637aea3e479d4f1d3c28f756162ec0c6de3", "message": "Align setup of SockJS and WebSocket integration tests\n\nFailures in JettySockJsIntegrationTests after the upgrade to 9.4 were\nhidden due to the PERFORMANCE test group but were failing on the CI\nperformance build with IllegalStateException inside Jetty on\n\"Failure find the required ServletContext attribute\norg.eclipse.jetty.util.DecoratedObjectFactory\"."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ae034e9afeebef5264a42ea3cca29435f0cf0bb7", "message": "Polish content disposition"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eabd8a2964e84eba7bff9d6a50269d15a1f87d1f", "message": "Support Servlet Part in Spring MVC Test\n\nIssue: SPR-14253"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c8f98ecd8d36b6d270852f0fd5b6b491108c696c", "message": "Add MockPart to spring-test\n\nIssue: SPR-14252"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f5d2b88e3f86d9475acf4f07941690739da535f5", "message": "\"sharedHttpSession\" shortcut for MockMvc builders\n\nIssue: SPR-13820"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1d35c7c55a8294fe05d259f196318cfb9dd98c32", "message": "Polish MockMvc setup classes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc884023e41ec80dcc1bbb1d6d2006731615cd3a", "message": "Add ExpectedCount#never()\n\nIssue: SPR-15168"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb3b1f2fe200f93253af49d413d037a6ccc4be1f", "message": "Additional convenience methods in UriUtils\n\nThe generic encode method in UriUtils that encodes any character\noutside the reserved character set for a URI is meant for \"strict\"\nencoding of URI variable values. This commit adds a couple more\nconveninence methods that accept a Map or array of URI variable\nvalues to encode.\n\nThis facilitates the use case where the URI template is assumed to\nbe encoded while URI variables are encoded strictly to avoid any\npossibility for unwanted reserved characters:\n\nMap<String, ?> encodedUriVars = UriUtils.encodeUriVariables(uriVars);\nuriComponentsBuilder.build(true).expand(encodedUriVars).toUri();\n\nIssue: SPR-14970"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2e293aadf98cb64ba7ef3044b59f469efd21503", "message": "UriComponents allows \"+\" in a query param\n\nIssue: SPR-14828"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8703cdd9cbb3b71b7c0caf35eeab246cc036ffd8", "message": "ResponseStatusExceptionHandler is ordered at 0\n\nIssue: SPR-15134"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b609f3a5469b269d3c1d4058529d2e675655a8bd", "message": "WebHttpHandlerBuilder supports @Order on beans\n\nIssue: SPR-15074"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9faaa22fd4a801de5b3ee450a1cc85c8f968c69f", "message": "Enable reactive web integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8417831602fb1f3ea873d88cd09090f878db73d3", "message": "Add accessor methods to HttpPutFormContentFilter\n\nIssue: SPR-14503"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2e414ab25a359012ffa513521cc0476b39c5b11d", "message": "Well-known names for beans in message broker XML config\n\nIssue: SPR-15068"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6e508f70d31818916c34d13a538b1fdc803eb274", "message": "Add locking to AbstractRequestExpectationManager\n\nThis commit ensures that verifying a request, which includes finding\nand updating expectations, is done synchronously to avoid concurrent\nmodification exceptions.\n\nTechnically SimpleRequestExpectationManager is not even expected to see\nconcurrent requests by definition but with\nUnorderedRequestExpectationManager it can happen.\n\nIssue: SPR-15029"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5f4cb6a1a086fdcb6fd900110baa69896b562ac", "message": "Merge pull request #1297 from eiiches/SPR-15140"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9819558cba10b831b5a48b3574ac9670621f870b", "message": "Support encoded query string in reactive requests\n\nIn addition to the updates from PR#1297 this commit adds an integration\ntest and fixes for the resulting failures with RxNetty, Reactor Netty,\nand Undertow.\n\nAlso replaced use of URLDecoder which is not for decoding URIs with use\nof UriUtils for decoding query parameters.\n\nIssue: SPR-15140"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba3cc535f1b9ecaadac9130959a46662b25d01da", "message": "Refactor reactive mock request and response support\n\nMockServerHttpRequest and MockServerHttpResponse now extend the same\nabstract base classes that server-specific implementations do and\ntherefore approximate their behavior more closely.\n\nAs an immediate consequence MockServerHttpRequest is read-only after\nit is created. Instead it now exposes static builder methods similar\nto those found in RequestEntity. This enforces more strictness as well\nas recycling of requests in tests and provides nicer builder methods.\n\nTo simplify tests DefaultServerWebExchange now offers a constructor\nwith just a request and response, and automatically creating a\nDefaultWebSessionManager.\n\nThe spring-test module now also contains client-side reactive mock\nrequest and response implementations. The mock client request extends\nthe same AbstractClientHttpRequest as client-specific implementations\ndo. There is no abstract base class for client responses.\n\nIssue: SPR-14590"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a30ceafc2cae8621b123d8c38a30ece64c4374ff", "message": "Update image"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/58d79fffd856a08d4e73a44c47baaa7ac9b13051", "message": "Doc updates"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5333f9cbf15c76a44f22694c585a7f8959270e2e", "message": "Doc updates"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6bf12812f1e4aef4be338887b49482ef1721195a", "message": "More documentation updates"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e62b104e03cdb7ffb00d816e5922446eb359a4a2", "message": "Resource cleanup on shutdown in ReactorNettyTcpClient"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/698c885e0601bb03dd5a763c5a24e1703433a174", "message": "Reconnect failures delegated to TcpConnectionHandler\n\nWhen connecting with a ReconnectStrategy we can only report the outcome\nof the first connect to the ListenableFuture<Void> return value.\n\nFailures for all subsequent attempts to reconnect however must be\nchanneled to TcpConnectHandler#afterConnectFailure which is used in\nthe STOMP broker relay for example to publish\nBroadcastAvailability(true/false) events."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea274ebc0a355ffb499791a9abf1618b829c5edd", "message": "Fix decoding issue in Reactor TcpClient\n\nWhen decoding STOMP messages unread portions of a given input ByteBuf\nmust be kept until more input is received and the next complete STOMP\nframe can be parsed.\n\nIn Reactor Net 2.x this was handled for us through the \"remainder\"\nfield in NettyChannelHandlerBridge. The Reactor Netty 0.6 upgrade\nhowever applied only a simple map operator on the input ByteBuf\nafter which the buffer is relased.\n\nThis commit replaces the use of a simple map operator for decoding\nand installs a ByteToMessageDecoder in the Netty channel pipeline\nwhich has a built-in ability to preserve and merge unread input into\nsubsequent input buffers."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fdf88c9795269c3e551bc3202e6eaead8cfa3752", "message": "Workaround for onReadIdle issue in Reactor TcpClient\n\nhttps://github.com/reactor/reactor-netty/issues/22"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2a3e01399a1fbe4a5374a46de501de1b70aaceb0", "message": "Polish ReactorNettyTcpClient"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a380b84019240fabb83b299c60e33aeacda70e0", "message": "Add RequestDataValueProcessor in spring-web-reactive\n\nIssue: SPR-15001"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4d39bb86fe79f592d7a418d8b43dfbdb40bad2b", "message": "Refactor Undertow WebSocket client configuration model\n\nThis commit removes the statically created XnioWorker which is an\n\"active\" component and should not be created automatically and could\nlead to resource leaks. Instead XnioWorker is now required at\nconstruction aligning better with WebSocketClient#connectionBuilder\nwhich also does not have a \"default\" worker option.\n\nSince the XnioWorker is the main input for creating a ConnectionBuilder\nwe now create the ConnectionBuider in a protected method and then allow\na Consumer<ConnectionBuilder> to configure it further as opposed to the\nFunction<URI, ConnectionBuilder> used previously.\n\nThis commit also removes default SSL context initialization for RxNetty\nto better align with other client implementations.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/384e851bd1e2e348ea54fe057cf87349192a83a7", "message": "Polish reactive WebSocketClient implementations"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a77da869a6ad6a136c25a96d34aa3ded9a14fc46", "message": "Custom request headers for JettyWebSocketClient\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/22a57b9aedf0039e30a0cab427998ad55f9a80dc", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1b8cdb89241290af2999dd073cf463cd30271537", "message": "Paramaterize WebSocket tests by client and server\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12f80be1f0738109a91471a2dca56f7d02614863", "message": "AbstractListenerWebSocketSession handles Mono<Void>\n\nThe HandlerSubcriber from each listener session implementation is now\nconsolidated into AbstractListenerWebSocketSession since the handling\nof onComplete or onError in any case is about delegating to the\nsession.\n\nThis also allows for the UndertowWebSocketHandlerAdapter to become\nsimply an (Undertow) AbstractReceiveListener.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/935577f00b0647a883ba92587b0bbcd888669e48", "message": "Replace WebSocketHandlerAdapterSupport with delegation\n\nThis commit removes the base class WebSocketHandlerAdapterSupport which\nwas mainly a container for properties. Instead we use a\njava.util.Function to create the WebSocketSession which differs in any\nway by client and server, which in turn allows  HandshakeInfo to become\na simple immutable container once again.\n\nAlso for Undertow the WebSocketConnectionCallback implementation has\nbeen moved into the server.upgrade package since it is for server-side\nuse only.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a86f89daa8a61d0829981245e9ac9e91d0b63dbc", "message": "Update repositories"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d1b6fd3628039ef613b04a258fc4d614731d57d", "message": "Add WebSocket integration test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3719f75d3b70e2510f9eb1de1c1bbfa2ca39f302", "message": "Minor refactoring + polish\n\n- RxNettyWebSocketSession filters out WebSocketCloseFrame again\n- add before/afterHandshake helper methods in WebSocketClientSupport\n- log request headers on server and response headers on client\n- polish 400 request handling in HandshakeWebSocketService"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d0d46190346954325b86bbce17e688d520b1793", "message": "Use WebSocketFrameAggregator for Reactor and RxNetty\n\nWebSocket frames are now aggregated through a Netty decoder so that\nwe always receive fully assembled messages by default capped at 64K.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00387c3bbd898b306c778a1895abec74d8eeca69", "message": "Re-enable Reactor WebSocket integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3b987c263c17fd0a903c03425f8f9384294d7dcc", "message": "Sub-protocol negotiation for reactive WebSocket support\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30df1372733f36e6ce6776441a042a943c4ed1d9", "message": "HandshakeWebSocketService detects upgrade strategies\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47e141675f7a46f308beb606d8948475250b0528", "message": "Minor refactoring + polish reactive WebSocket support\n\nRename classes not specific to Tomcat:\nTomcatWebSocketSession -> StandardWebSocketSession\nTomcatWebSocketHandlerAdapter -> StandardWebSocketHandlerAdapter\n\nWebSocketSessionSupport is renamed to AbstractWebSocketSession since it\nactually is a WebSocketSession and pre-implements a number of methods.\n\nServerEndpointRegistration is now package private (mainly for use in\nupgrade strategies) and renamed to DefaultServerEndpointConfig."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5fd600d2adeb0c0b4cdab5d3a1ec55ce6a10e849", "message": "Fix failing test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1243556047a737536d69098ea1130180bced231c", "message": "Add Reactor Netty WebSocketClient support\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14068d5274db412480c1aee221d11f638adcdf2b", "message": "Refactor reactive WebSocketClient contract\n\nSwitch from returning Mono<WebSocketSession> to take a WebSocketHandler\nand return Mono<Void> for the entire session handling.\n\nThe WebSocketHandler callback delimits the stard and end of protocol\nhandling and forces the handler to operate within the scope of the\nReactor operators.\n\nGive the full duplex nature of WebSockets, the symmetry between client\nand server (each now using WebSocketHandler) also seems appropriate.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/558d7f3f3efa4bdc03e252474bec46f62c2acb72", "message": "Fix package cycle\n\nHandshakeInfo has been promoted to the top-level socket package next to\nWebSocketSession which exposes it."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8be791c4ff5f8671a0378efad84834f1b96e31a0", "message": "Add reactive WebSocketClient and RxNetty implementation\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bcf6f6e75f3bf3cfc0b80e6960334cefa7aa4a43", "message": "Refactoring in reactive WebSocketSession and adapters\n\nThe WebSocketHander adapters are now neutral for client vs server-side\nuse with the adapters for RxNetty and Reactor Netty (server-side only)\ncompletely removed.\n\nA new HandshakeInfo carries information about the handshake including\nURI, headers, and principal from the upgrade strategy, to the adapter,\nand then to the session.\n\nWebSocketSession exposes the HandshakeInfo as well reducing its overall\nnumber of methods."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edcf04911f4ca3a045194c0a7e90b2d48603929b", "message": "Refactoring in reactive WebSocketMessage\n\nMove WebSocketMessage factory methods to the WebSocketSession which\nhas the bufferFactory() needed to create message payloads.\n\nWebSocketMessage is left with one public constructor.\n\nWebSocketMessage exposes convenience retain/releasePayload methods."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6cd92c69cf526da5d0598d595155c52373a9a74c", "message": "Refactoring in reactive WebSocketSession hierarchy\n\nExpose bufferFactory() at the WebSocketSession level for creating\npayloads like ReactiveHttpOutputMessage does.\n\nPromote getId(), getUri(), and bufferFactory() to the base class\nWebSocketSessionSupport."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/140ff7ce8ffcfa3e5804e285b1bf7addc092923a", "message": "Polish reactive WebSocket integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9376748c9c17902f650709af4fc1c572ce63f04a", "message": "Apply getAcceptLanguageAsLocale and encodeUrl\n\nApply the new HttpHeaders#getAcceptLanguageAsLocale() in places where\nit was hardcoded or defaulting.\n\nApply ServerHttpResponse.encodeUrl in RequestContext.\n\nIssue: SPR-15024"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bd8af55bc7448d17b84fa4dfbfb09f4a7cbf6552", "message": "getAcceptLanguageAsLocale(s) returns most preferred Locale\n\nAn update on the last commit switching from:\nList<Locale> getAcceptLanguageAsLocales() to\nLocale getAcceptLanguageAsLocale()\n\nThis best supports the scenario for the most preferred Locale.\nIf there is a need to look at the prioritized list of languages it's\nbest to use Locale.filter with the LocaleRange's.\n\nThis is explained in the Javadoc for getAcceptLanguage().\n\nIssue: SPR-15024"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fa56361ad242723e172630e5a6706a07a191c975", "message": "Add getAcceptLanguageAsLocales\n\nThe use of Locale.LanguageRange for the Accept-Language header makes\nsense as it gives the most flexibility for a client to set a weighted\nlist and for a server to do filtering via Locale#filter.\n\nThis commit adds an additional convenience method that turns\nthe LangugeRange list to a list of Locale's also filtering out a\nwildcard (i.e. \"*\"). A List<Locale> is the most basic way to access\nprefered languages and needed when filtering is not required.\n\nIssue: SPR-15024"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c85d768b3c8778c76be800c32d4e30614a26642a", "message": "WebExchangeDataBinder uses the new \"requestParams\""}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95818609fcab71d6ee4c64c36903c0f62ca0ba48", "message": "Minor refactoring\n\nConsolidate into one method potentially re-using UriComponentsBuilder\nfor the location. Also use StringUtils#applyRelativePath.\n\nIssue: SPR-15020"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/96474405dce4862a3ad1523b1237260a07fbdabc", "message": "Refactor ServerWebExchange/ServerHttpRequest builders\n\nServerWebExchange.Builder has an additional Consumer-style shortcut\nmethod that accepts a builder for modifying the request.\n\nServerWebExchange and ServerHttpRequest builders have fewer methods,\nmore use-case focused vs matching directly to properties."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6119415427861cb5d99d7795cf4c7d3547ce286c", "message": "Support for \"request parameters\"\n\nServerWebExchange now provides access to \"requestParams\" as a\nMulitValueMap with query parameters and form data combined.\n\nThe combined map is then used for the params condition of\n@RequestMapping purposes () and also for @RequestParam arguments.\n\nIssue: SPR-15000"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/257318eb8754068e543e876e04fb8f4eadabeef1", "message": "Minor refactoring + polish in server reactive package\n\nRenamed:\nAbstractListenerFlushProcessor -> AbstractListenerWriteFlushProcessor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4738a61e989475c7b719f6b5633e87731ef2cd90", "message": "Early registration of ReadListener\n\nThis is similar to the WriteListener changes on the ServerHttpResponse\nwhere we are more naturally exposed to a delayed write. Nevertheless\nwe could also have a delayed read and should be consistent. The early\ninitialization of the RequestBodyPublisher also simplifies the\ninternal implementation a bit."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5a2906979816ce1268a8dfe56c5f0a89ad720b99", "message": "Refactor AsyncListener registration + polish\n\nInstead of registering an AsyncListener in ServletHttpHandlerAdapter\nwe now register an AsyncListener in each of the request and response\nwhere the events need to be handled anyway. This allows removing the\npackage private delegation methods in the request and response."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/70f14c14c8951b56059552554f51170c8a089b76", "message": "Polish Undertow reactive server support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c3621bf153f473188d0dbfbc60caf41daf801bdc", "message": "Merge pull request #1268 from violetagg/undertow-byte-buffer-pool"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3e05296e175d13533f4abbb43673ecc1a3582c8", "message": "Replace close method with Undertow exchange listener\n\nThe Undertow HttpServerExchange has a complete listener which we can\nuse instead of the close() method UndertowServerHttpRequest."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b70071fdda7c97eb07049c940132a641575aed41", "message": "Remove temporary workaround in ReactorServertHttpResponse\n\nWe no longer should need the workaround for:\nhttps://github.com/reactor/reactor-netty/issues/2\n\nIssue: SPR-14643"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2633b4e9ece819619e18bf162f0d984410222697", "message": "RedirectView applies encodeUri + polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c66dd0172470452a1b85c393016269a70119f992", "message": "Equal MockServerHttpResponse in spring-test and -web"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3df902c6cc62770d5ef49f18fac8a3f6e35e7526", "message": "Add ServerHttpRequest builder\n\nSimilar pattern as for ServerWebExchange with a default mutate method\non ServerHttpRequest returning a Builder and eventually creating an\nimmutable wrapper.\n\nHttpHandlerAdapterSupport uses the builder to set the contextPath."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f693e32973d2858c0a4127390920096dfbcd5031", "message": "Add ServerHttpResponseDecorator\n\nFor completeness and consistency with the existing\nServerHttpRequestDecorator and the ServerWebExchangeDecorator."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d421112af38712bf614bac48ad81458f00116318", "message": "Polish ServerWebExchange builder and ServerHttpResponse\n\nRemove duplicated ServerHttpResponse#setComplete also declard in the\nparent ReactiveHttpOutputMessage interface.\n\nAlso rename:\nServerWebExchange.MutativeBuilder --> ServerWebExchange.Builder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7193686bb0d7686383e8479b13f9c17796c1e98f", "message": "Support encodeUrl mechanism via ServerHttpResponse\n\nIssue: SPR-14529"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2191d80a31507e1c6b30ad57c49d7998625c7487", "message": "Allow athentication at the STOMP level\n\nThis commit makes it possible for a ChannelInterceptor to override the\nuser header in a Spring Message that contains a STOMP CONNECT frame.\n\nAfter the message is sent, the updated user header is observed and\nsaved to be associated with session thereafter.\n\nIssue: SPR-14690"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8d834b7977636ae54dd59f03e2582072f3e204e", "message": "Merge pull request #1263"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/128a1f8eedfc78c6281ffa3f9fb1d2d0c4ec728a", "message": "Polish MockRestRequestMatchers query param support\n\nIssue: SPR-14995"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/885e76bdd0d08eb5c22631078ee8b519ed7e2bbc", "message": "Synchronized lazy start in JettyRequestUpgradeStrategy\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75422787b69470b17def9961097d23c91466f74d", "message": "Merge Tomcat, Jetty, Undertow WebSocket support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d6895aa09846a0e1e1904d17f00ea53c73fc104f", "message": "Consistently extend WebSocketHandlerAdapterSupport\n\nThe WebSocketHandler adapters for all runtimes now extend\nWebSocketHandlerAdapterSupport, which now also exposes\na shared DataBufferFactory property initialized from the response.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5829e1c1411a22b8c17e7c3f5d7a26a537a39dfe", "message": "Polish method and field declaration order"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f32a41933e00039f535325a48c7aaae1bb80eb8a", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/db5bc4a24e001f0aadc13755afd4c86f511a1815", "message": "Minor refactoring of suspend/resumeReceiving\n\nsuspend/resumeReceiving in the AbstractListenerWebSocketSession are\nnow abstract methods. In Tomcat/Jetty these methods are no-op\nimplementations that are then coupled with a buffering strategy via\nFlux#onBackpressureBuffer. In Undertow they rely on flow control for\nreceiving WebSocket messages.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1411d9fc299f4f153fee44dd31cf758eb41e09c", "message": "Simple refactorings in AbstractListenerWebSocketSessionSupport\n\nDropped \"Support\" from the name since it not only provides support\nmethods but actually implements WebSocketSession.\n\nRenamed inner classes:\nWebSocketMessagePublisher -> WebSocketReceivePublisher\nWebSocketMessageProcessor -> WebSocketSendProcessor\n\nAdd protected getter for sendProcessor.\n\nReduce scoping:\nWebSocketReceivePublisher -> private\nWebSocketSendProcessor -> protected\nWebSocketSendProcessor#setReady -> public (class is still protected)\n\nA few more method name alignments and Javadoc updates.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fe7ee5ff33af4ed494c09263d1a6764568601d9f", "message": "Rename \"Request/ResponseBody\" publisher/processor\n\nAbstractRequestBodyPublisher and AbstractResponseBodyProcessor are now\nused for WebSocket messages too and have been renamed more generally to\nAbstractListenerReadPublisher and AbstractListenerWriteProcessor.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/11ff03ed38105e2905709b76174f6932ab2ba260", "message": "Merge pull request #1236 from dreis2211-stomp-header-encoding"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3fa1b40a0bb1644aa26c0778070026702574a5e", "message": "Synchronized updates of STOMP header key cache\n\nIssue: SPR-14901"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1b0e95d7d82435d7c532b597eab7cf86265fdbe1", "message": "Support for RequestUpgradeStrategy + Lifecycle\n\nIssue: SPR-15527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2c2de82ffba51f102bea67b5dbdb695ca547239e", "message": "Flush after each WebSocket message by default\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c097c0284a8aa2de782c5f1021fe440c23d3fc79", "message": "Reactor Netty WebSocket server-side support\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/46f2aafdc0bd6e4c249267b95472e41e0887bcd9", "message": "Extract Netty WebSocket session + adapter base classes\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/953f7d40cf9e42d62027e9c756d545ba0ace2b74", "message": "Filter out hanging tests realted to Reactor Netty\n\nIssue: SPR-14975"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e20360bf9a1e5756b78151593f92b02db5a6bd8", "message": "Merge pull request #1254 from fdesu/fix/reactor-netty-tcp-client-update\n\nChannelFutureMono renamed to FutureMono"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55d4268448c4db6f475470363dc83858f2d9c16b", "message": "ReactiveAdapterRegistry is a bean"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ad95b09e82f9f2f2b833cb22193d40ed6f6d0f3", "message": "ReactiveContext and BindStatus in spring-web-reactive\n\nIssue: SPR-14533"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d41d3aa1d6060f43ccdc82c60376908cb9b38381", "message": "Merge pull request #1250 from origin/update-stomp-reactor-netty"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b874692452d63c61b25ccad591662a7e1e269e56", "message": "Simplify ReactorNettyTcpClient input\n\nCreate a ReactorNettyCodec to hold the decoding and encoding function\nand consumer along with a package-private sub-class that delegates to\nStompDecoder and StompEncoder.\n\nIssue: SPR-14531"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/85c93f5d672b53db029f246a06a6cb9cc3ae0f0f", "message": "Polish Reactor Netty TCP client support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/93cfc791a7c6c60a01528fd3e29c9b33e696a5c6", "message": "Spring MVC supports ResponseStatusException\n\nThe ResponseStatusException is now also supported in Spring MVC\nthrough the ResponseStatusExceptionResolver.\n\nIssue: SPR-14895"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/729551f375a2fb9675c337873ae6cf4341735139", "message": "Use full package names in ReactiveAdapterRegistry\n\nThe recent refactoring lead to\njava.lang.NoClassDefFoundError: io/reactivex/Completable\n\nwhere only RxJava 1 is in the classpath. Most likely due to the\nlack of prefix in Completable::complete with rx package to avoid\nthe RxJava 2 reference."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/38b6746d3d92d82c8fc57110f5f62370ef3d68df", "message": "HtmlUnitRequestBuilder detects form encoding type\n\nIssue: SPR-14916"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb50f6bc8c7696261b220e0cf3bc04799f713091", "message": "ResponseEntity headers builder casts body to any type\n\nIssue: SPR-14939"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a203b74d20b60db0a6adc8f230623a2b2158c6bc", "message": "PayloadArgumentResolver has useDefaultResolution flag\n\nIssue: SPR-14937"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/122334c37acc35aa7cf4157fc8636ba913ae03d2", "message": "RxNettyWebSocketSession creates PONG frame correctly"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/25b95efad929ffac93e0c3faf03fdcfd661c13d2", "message": "Shared ReactiveAdapterRegistry in web reactive config"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5651c2180e7b19d0f53d65a8546b65910677f4fd", "message": "Further refactoring of ReactiveAdapter/Registry\n\nSimplify getAdapterFrom/To into a single getAdapter method that looks\nfor an exact match by type first and then isAssignableFrom.\n\nAlso expose shortcut methods in ReactiveAdapter to minimize the need\nfor access to the ReactiveTypeDescriptor.\n\nIssue: SPR-14902"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/adb80f4099e4994e918ae9edace731847ae9d78a", "message": "Merge pull request #1248 from rstoyanchev/14902-reactive-adapters"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac86acde53437c0758949a8ec927fc928cdf3db5", "message": "ReactiveAdapterRegistry detects Reactor\n\nThe ReactiveAdapterRegistry now detects the presence of Reactor. In\npractice Reactor is required for the Spring Framework reactive support\nand it is expected to be present.\n\nThe registry however is now capable of being neutral if Reactor is not\npresent on the classpath for example where other Spring projects may\nnot have the same assumptions about Reactor's presence.\n\nIssue: SPR-14902"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/52096ab8b9621de444861581977a70d8633cac25", "message": "Refactor ReactiveAdapter hierarchy\n\nCollapse ReactiveAdapter hierarchy into a single class that simply\ndelegates to functions for converting to/from a Publisher.\n\nA private ReactorAdapter extension automaticlaly wraps adapted,  \"raw\"\nPublisher's as Flux or Mono depending on the semantics of the target\nreactive type.\n\nIssue: SPR-14902"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e563326357e63a1e90e80baf7348f8e07f4c6e4c", "message": "Polish ReactiveAdapterRegistry\n\nIssue: SPR-14902"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2e7d16df0406728b0d8f5322e0e30e993adb63fd", "message": "Improved reactive type descriptor support\n\nReactiveTypeDescriptor is now a top-level type with named constructors.\nIt also contains and provides a getter for the actual type.\n\nIssue: SPR-14902"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9bcc7c3b06f0e693269cbd37726ea6b27af952ec", "message": "Remove ResourceServlet (deprecated in 4.3)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d201a222b86b3540e9a29f4d0e5389a6d32c49af", "message": "Avoid locking in WebSocket session \"close\" callback\n\nWhen processing a \"close\" notification from the server make an effort\nto cancel any outstanding heartbeat but avoid going as far as acquiring\nthe responseLock since the server itself may already hold a lock of its\nown leading to a potential deadlock.\n\nThe heartbeat task is now also further protected with an isClosed()\ncheck in case the heartbeat does not get cancelled in a concurrent\nscenario.\n\nIssue: SPR-14917"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3eb2432ced0cba56ddb8fefac6da88f173a98703", "message": "Fix TODO in ReactorHttpServer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/82ad86c9d381f8bcb27fe67f2824ae6320572632", "message": "Merge pull request #1239 from smaldini/reactor-netty-0-6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6b9b47ee13475d2df527f823af824ff635e11a66", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/637b6387ea3d9cfba01a6267e4ea5cfd033f9148", "message": "Starting point for reactive WebSocket support\n\nIncludes basic abstractions and an RxNetty support to start.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a224874b430e19f68f367c829e37a02b603fbdfe", "message": "Improve resolution of multi-value async model attrs\n\nMulti-value async attributes like Flux and Observable in the model\nare treated with Collection semantics and resolved to Mono<List<?>>\nprior to rendering."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f128110f7ceb5b3da696600025c62c0fe0cb1a5", "message": "Merge reactive @ModelAttribute support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6b73700f741618e737ae4b1509a9caf16b83d5fc", "message": "Reactive support for @ModelAttribute methods\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e59dcedfeea9c7b9cc81a1cafe0328a27495e603", "message": "BindingResult inserted before rendering\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ae003e89c169b6aef5c08911eb8648d217c6a729", "message": "HandlerResult provides access to BindingContext\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6abd4d5ff533fd8f41003029010665e7e8522021", "message": "Async model attributes resolved before rendering\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d163240ed45f1e1f37da8a1245dab4c4d2866d54", "message": "Reactive support for Errors argument\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/816e32872a1e9dd1164293f53baccac53ce3db00", "message": "Reactive support for @ModelAttribute argument\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3230ca6d392a83edd8b539becfd21ae2c27e0fa8", "message": "Add ConcurrentModel\n\nThis commit adds a Model implementation based on ConcurrentHashMap for\nuse in Spring Web Reactive.\n\nIssue: SPR-14542"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/475b876f08349b70e066719e5ae7437db96ad255", "message": "Add ResponseEntity test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c43040287253bda3e9710759eb722fb54c1e9cc0", "message": "Improve support for Mono<ResponseEntity<?>>\n\nIf the body class is not resolvable from the return type and there is\na body instance we now fall back on the class of the body instance.\n\nIssue: SPR-14877"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/87e01513fdb2954db683d8fa131be3fc6e44c486", "message": "Check SockJS session type\n\nThis commits adds a validation check whether the SockJS session type\nmatches the transport type and rejects requests for which they\ndon't match.\n\nIssue: SPR-14867"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/388e173ba3bc4b70363f65cc4bacdd714c8b5798", "message": "Fix NPE in custom @InitBinder resolver initialization\n\nIssue: SPR-14869"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6c098b330103b28c3a87ed5caae1e4d5990dbca2", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99cacaa72d075e86f458186e178348e6175bbfce", "message": "Improve reactive support for access to Principal\n\nThe method to access the Principal from the ServerWebExchange is now\na Mono<Principal> (rather than Optional<Principal>).\n\nThere is also support for Principal as a controller method argument.\n\nIssue: SPR-14680, SPR-14865"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e1a382b61f7f2c2d63434bd4575586acd8e881a8", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33dbbce1824a5af9b85a838a51fd3654dc8d1ede", "message": "ApplicationContext-based HttpHandler setup\n\nThis commit adds support for detecting the target WebHandler along with\nWebFilters, WebExceptionHandlers, and other spring-web reactive\nstrategies in an ApplicationContext.\n\nWebReactiveConfigurationSupport has @Bean factory methods for\nDispatcherHandler and ResponseStatusExceptionHandler.\n\nWebHttpHandlerBuilder has a static factory method that initializes the\nbuilder from an ApplicationContext. This method is also used in the\nDispatcherHandler#toHttpHandler(ApplicationContext) shortcut method.\n\nIssue: SPR-14837"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3da0295c12d3107b4156a560bd40b47f99c100cd", "message": "Support for reactive controller @InitBinder methods\n\nIssue: SPR-14543"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0b76b6d7e98e3095ecdb00ed8bc81e2aee7272a6", "message": "Sync semantics for WebExchangeDataBinder factory\n\nThe createBinder method in BindingContext now returns the binder\ninstance rather than a Mono with the expectation that binder\ninitialization (e.g. @InitBinder) does not require blocking.\n\nIssue: SPR-14543"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b55ab1119ea16f75b6a9873275c1fd9294cdc70a", "message": "Sync argument resolution and HandlerMethod invocation\n\nHandlerMethodArgumentResolver is a non-blocking contract, however only\nimplementations that read the request body require blocking.\n\nThis commit introduces SyncMethodArgumentResolver as an extension of\nthe non-blocking contract that allows synchronous implementations to\nuse synchronous argument resolution.\n\nThere is also a SyncInvocableHandlerMethod extension that uses only\nsync argument resolvers and allows a synchronous invocation.\n\nIssue: SPR-14543"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00a35897fe2d2667fbdfbbbf86bb9036b99c552a", "message": "ServerWebExchange provides access to form data\n\nThe ServerWebExchange now has a getFormData() method that delegates to\nFormHttpMessageReader for the parsing and then caches the result so\nit may be used multiples times during request processing.\n\nIssue: SPR-14541"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/81b4dedd0855e67f7ac4b60fa9027685eaf29710", "message": "Polish form reader/writer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c3f22b73646be44d29ae42e0c5dc9531a1a36b31", "message": "Add \"mutate\" builder to ServerWebExchange\n\nThis commit adds a default mutate method to ServerWebExchange which\nprepares an immutable wrapper and returns the provided mutated\nproperties."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/afcc120b97f8ae7888879aeb1fb02b8e91b3b08f", "message": "Better handling for AsyncRequestTimeoutException\n\nAvoid call to sendError when response is committed and log a short\nerror message instead.\n\nIssue: SPR-14739"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/efe3996cf9247180549694ee38a9b3e36518d23a", "message": "Respect ModelAndView.status in @ExceptionHandler\n\nIssue: SPR-14006"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aea3a750189977ca231172db87408f03979bace6", "message": "Fix failing tests\n\nIssue: SPR-14772, SPR-14803"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c9c5e0b45fd4d00eb06b021d2d57df76413b64b", "message": "Early registration of WriteListener\n\nAt present Tomcat expects a WriteListener to be registered immediately\non the initial thread so for the time being this commit ensures the\nWriteListener is registered unconditionally for every request.\n\nIssue: SPR-14772, SPR-14803"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e3673d43b9af441e0b64532ede5bc0b9a64c46bc", "message": "Thread-safe reactive ServerHttpRequest\n\nThis commit replaces the lazy URI and headers initialization in the\nreactive ServerHttpRequest in favor of eager initialization at\nconstruction time. Both the URI and headers are nearly guaranteed to\nbe accessed for every request (URI for application path, headers for\n\"Origin\" header).\n\nQuery params are still lazily parsed but parsing is idemptotent and\nin the unlikely case of concurrent access (it's the framework that\ntypically accesses query params) it maybe parsed twice but should\nbe side effect free still.\n\nCookies are also parsed lazily and since we delegate to the \"native\"\nrequest, it depends on the underlying runtime whether synchronization\nis needed. This commit adds synchronization for the HttpServletRequest.\nAt present RxNetty, Reactor, and Undertow implementations provide\nthread-safe access to cookies."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e886abf3d3b5a161c5963a9711dabb4721c1383", "message": "Sync MockServerHttpRequest in spring-test/spring-web"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b92d541ba0934052769d0bcf08fec7d8c44d2c2d", "message": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler's under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map<String, HttpHandler>.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed6c5330797f790439db31cff95863a34533a0b6", "message": "Merge pull request #1211 from sdeleuze/SPR-14798"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/72397e350551e0d6785608f7932aaad199b17fd2", "message": "Polish\n\nIssue: SPR-14798"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec1eb14280e2a5b4584504938d657c63c938a0d0", "message": "Add getPrincipal to ServerWebExchange\n\nServerWebExchange now has a getPrincipal method and along with that a\nServerWebExchangeDecorator that can be used to wrap the exchange in\norder to return the authenticated user.\n\nIssue: SPR-14680"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8619ad9d9a64e37b127779a77c0f7d66a7612975", "message": "Add tests to DelegatingWebReactiveConfigurationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/351cfb8eeff0eaa7ac8c1b4da80017d202445a06", "message": "Merge pull request #1202 from bclozel/SPR-14754"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c7fb851e5af1b3ab62e8421afb5eb84cb320102a", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44717af0e593dac03a6bbdaa8d904935560ce85d", "message": "Update order of method in WebReactiveConfigurer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f6eaef3057a200fbd93e82dc5144bd866c0772e", "message": "Improve WebReactiveConfigurerComposite"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea319345ed220710f01993ee7ceb7b9818cf62a9", "message": "Merge pull request #1188 from soldierkam/fix-encoding-bb"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6cb7d51ee5481c97a4b20c126590d99950e5ec40", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fada5aed6ef1b7a268a56652617ff994c568f1a0", "message": "Check status in AbstractServerHttpResponse setComplete"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/960cc420601b67eed2e06b8fa668e847f7b5c6a3", "message": "Fix test failure in WebSessionIntegrationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d4446c79b659d1230bdd8caf3f233de5c39ce127", "message": "Restore state field in AbstractServerHttpResponse\n\nThis commit fixes test failures introduced earlier in commit 9f8e84."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8eeda746e39e594d57f120f90d2595912c2de89b", "message": "Merge pull request #1194 from violetagg/async-timeout"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d", "message": "Polish AsyncListener in ServletHttpHandlerAdapter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9f8e8458c1281307481c425c191e2f75ac44ae1c", "message": "Polish AbstractServerHttpResponse\n\nThis commit simplifies the logic for applying beforeCommit actions\nreplacing the use of chained Mono.then calls with a single\nFlux.concat.\n\nAlso renamed writeStatusCode, writeHeaders, and writeCookies to\napplyStatusCode, applyHeaders, and applyCookies respectively to\nbetter reflect we're simply setting them on the underlying response\n(not necessarily written yet)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e3ecf012f909aa636dbf19f4eb986a2e84a00441", "message": "Add docs on error handling in REST scenarios"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71201e1a4310990762ed9a0a74114c3aac4905c5", "message": "Relax generic type detection for ResponseEntity\n\nBefore this change the getHttpEntityType method in\nHttpEntityMethodProcessor raised an ISE if the generic type cannot be\ndetected. That made sense for resolving a controller method argument\nwhere the target body type is crucial. However for a return value\nthe generic type should not be required since we either have an\nactual body or no body at all in which case it doesn't even matter.\n\nThis change relaxes the checks and defaults to Object.class for the\nResponseEntity generic type on the return value side.\n\nIssue: SPR-14799"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aff43c29fdaea3790ca8c8eaa1e314e352f9e1a6", "message": "BindingContext implements TypeConverter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bd69390c0f3b601c1e11a63c4bfca9da613587f5", "message": "Fix failing test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8a043ae9aad072f888650b9ccd929f6c1e61e7fa", "message": "Replace direct use of Validator and ConversionService\n\nThis commit replaces direct use of Validator and ConversionService in\nthe reactive @RequestMapping infrustructure in favor of using the\nBindingContext.\n\nIssue: SPR-14541"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d87aa40efe851194c3add8ed2ff5082d0a1aadf1", "message": "Add BindingContext\n\nThis commit adds a BindingContext to be used in spring-web-reactive\n@RequestMapping infrastructure (comparable to WebDataBinderFactory in\nspring-web-mvc) for access to the default model, data binding,\nvalidation, and type conversion purposes.\n\nIssue: SPR-14541"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cabb25326921ecb958dae9e578abddfa6551f2f7", "message": "Replace \"mvc\" in web rective config bean names"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1de73b9b4f9bed3dcc4f5f7de8382633a273bd64", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b28b3e887705f6fb8525bcfa4ffba72de003687c", "message": "Add WebExchangeDataBinder\n\nIssue: SPR-14541"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f6f0dc101fb425bd63786ef669b0626a6591543", "message": "Add getHandler in reactive AbstractHandlerMapping"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33c48e7a178f8f84c88610c57b92a71369e696dc", "message": "Polish reactive CORS support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/adc69097fa45690a1d9937a29bf92f98d501ea68", "message": "Fix startup exception related to ResourceWebHandler\n\nIssue: SPR-14735"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99c7917124b8f5c997046bc169ec2a97ff5e62fb", "message": "Reset connection before delegating to handler\n\nResetting the connection first before invoking a failure callback on\nthe application handler ensures that any checks to isConnected will\nreturn false.\n\nIssue: SPR-14721"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b2ccdfbc9e112e48f001b0dffa1280e6e7fe7122", "message": "Polish error logging for HTTP reactive server classes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0bace1b0ae7aec176607a8ffdbf3497bab7755a5", "message": "Add getContextPath to ServerHttpRequest\n\nIssue: SPR-14726"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf2112f5398c74f1d7279fea17b4db3a4dc6f4e1", "message": "Update intializer for the reactive servlet adapter\n\nMove the AbstractServletHttpHandlerAdapterInitializer together with\nthe other two base classes in spring-web-reactive. Since the\ninterface is in the web package, this avoids a package cycle.\nAlso add a mention in the reference.\n\nIssue: SPR-14713"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aaa128180958d4b6d420cb7e4a955bb2edab0c0b", "message": "Remove Exception declaration in abstract Encoder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/765b47246a4893a4855f4e8e26ad41de491fa175", "message": "Improve async request timeout handling\n\nRather than setting the status to 503 directly from the timeout\ninterceptor which no longer seems to work reliably with Servlet\ncontainers like Jetty even performing an additional ERROR dispatch back\nto the original URL, we know rather set the DeferredResult to an\nAsyncTimeoutException, which results in a dispatch and standard\nhandling within Spring MVC. This should be a more reliable way of\ndealing with timeouts.\n\nIssue: SPR-14669"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ccfecc406e4e9e99a07017142fc8b9a852edc85", "message": "Workaround for Content-Length issue in Reactor Netty\n\nIssue: SPR-14643"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e024aa0049979ff77dfefdd8debbe8ded13e7425", "message": "Follow up fix for PR #1168"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3bc1121b9d6f73f601776a20e6ec5b0e1ea0f4b2", "message": "Check both connection and connected flag\n\nIssue: SPR-14703"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc14c5ba83e1f211628456bbccce7b2531aac58c", "message": "Polish [CssLinkResource|AppCacheManifest]Transformer\n\nThis commit updates the two transformers to make them more\nconsistent with updates of their spring-web-reactive equivalents.\n\nIssue: SPR-14521"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33d90747a14b06b7e2e6f80cfc687b55d6400575", "message": "Asynchronous ResourceResolver + ResourceTransformer\n\nIssue: SPR-14521"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3385870", "body": "I see lots of whitespace differences. It looks like your IDE is inserting spaces whereas the source code has tabs. You might want to change that and re-submit so we can evaluate your exact changes. There is actually quite a bit of noise that makes it difficult to see what's changed and needs to be corrected either way. \n\nYou can check before committing for whitespace issues using `git diff --check`. \n\nAlso, please use `git rebase -i` to squash multiple commits that belong together. See the [progit book](http://progit.org/book/ch6-4.html) and Dave Syer's [blog post](http://blog.springsource.org/2011/07/18/social-coding-pull-requests-what-to-do-when-things-get-complicated/) is also pretty useful.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3385870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3387745", "body": "Okay, thanks for making those updates. Much easier for review. I'll let Arjen add his comments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3387745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3388905", "body": "Good point that we should mention the [eclipse-code-formatter.xml](https://github.com/SpringSource/spring-framework/blob/3.1.x/eclipse-code-formatter.xml) in the README.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3388905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3392829", "body": "It looks like I accidentally pushed your commit and although the commit has been since backed out, it still appears merged here. I have to ask you to re-submit your pull request yet one more time. Apologies for the mix-up.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3392829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3435342", "body": "@cbeams, I had a look and incorporated the commit into the 3.1.x branch. Thanks for the comments. \n\nNote that your \"polishing\" branch was one step behind the latest commit in origin/3.1.x. I rebased your change into the 3.1.x branch before pushing it to origin. You'll want to discard your \"polishing\" branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3435342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3891903", "body": "I've made a couple of updates and committed the results in 3.1.x. Please, remove your SPR-9096 branch. I rebase the changes on top of the latest in 3.1.x which had a few commits.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3891903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3981049", "body": "Thanks for sending the pull request. I did not merge it directly since it is against master and we're still making changes in the  3.1.x branch. However, I've applied the same change effectively. We'll be switching to master soon, after the 3.1.1 release.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3981049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240154", "body": "Maybe an array of `@ContextConfiguration` annotations -- the first one is the parent of the second one, and so on...\n\n```\n@ContextHierarchy({\n    @ContextConfiguration(\"parent-context.xml\"),\n    @ContextConfiguration(\"child-context.xml\")\n})\npublic class SomeTests {\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240474", "body": "Also at the moment spring-test-mvc has [a programmatic way](https://github.com/SpringSource/spring-test-mvc/blob/master/src/main/java/org/springframework/test/web/server/setup/MockMvcBuilders.java) of doing the equivalent of `@ContextConfiguration`. Given that parent contexts will also [need to be supported](https://github.com/SpringSource/spring-test-mvc/issues/12) there, I'm beginning to wonder if the TestContext framework couldn't offer a code-based alternative to `@ContextConfiguration`, which spring-test-mvc could then build on. Don't know enough about `@RunWith` but perhaps the test could implement a callback interface such as ApplicationContextInitializer?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4260449", "body": "Apologies for not getting to this sooner.\n\nI'm not sure we should do this. HTML character references such as `&lt;` are for [embedding symbols](http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.2.3) in HTML documents so they can be displayed unchanged. This works for form field values -- initially they contain a character such as `\"`, the form input tag encodes it as `&quot;`, the browser renders it as `\"`, and the submitted form content is correct. With form field names however, the name remains as `&quot;` when it is submitted to the server (I just confirmed this in the spring-mvc-showcase -- FormBean controller, the additionalInfo Map), which is obviously a problem. Form data is subject to encoding of type `application/x-www-form-urlencoded` instead so the character references in form field name will never interpreted correctly. \n\nFurthermore altering getName() in the base tag affects both the name and the id of the tag, which is likely to cause all sorts of trouble for existing JavaScript code that references fields by id or name. \n\nGoing back to the use case, the ticket descriptions shows this example:\n\n```\n<form:select path='someMap[\"key\"].multipleOptions' multiple=\"true\">\n```\n\nThat should be completely avoidable by using single quotes or no quotes:\n\n```\n<form:select path=\"someMap['key'].multipleOptions\" multiple=\"true\">\n<form:select path=\"someMap[key].multipleOptions\" multiple=\"true\">\n```\n\nSo I'm wondering is there any other motivation for the original request that I'm missing?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4260449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4261122", "body": "Okay I'll update those tickets. For SPR-5383, it looks like LabelTag.autogenerateFor() takes care of deleting `[]` so maybe 5385 is just out of date?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4261122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4261233", "body": "Alright, thanks. Time to close this then.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4261233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4287420", "body": "@sslavic can you re-send the request based on the master branch? That's the main branch in use now with selective backports only going back to 3.1.x. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4287420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4291908", "body": "thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4291908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4324181", "body": "Looks good, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4324181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4452253", "body": "Tristan, thanks for the pull request indeed. I'm not sure it is really necessary to have the extra view prefix as a feature. I wonder if you've considered consolidating permanent redirects in a filter or a HandlerInterceptor and whether that would work for you or not? There is also 307 (temporary redirect) which might lead to yet another prefix.  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4452253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4458102", "body": "I can see what you're trying to do but I'm not sure overloading the redirect prefix is the way to do it. It changes the semantics. Where currently \"redirect:\" means a redirect was requested, it would now refer only to a subset of redirects with the default status code of 302. That leaves existing code that relies on this meaning potentially exposed.\n\nHow common is it to use a 301 in your application as opposed to 302? Is 301 more common than 302 in which case you can consider switching the default status code by subclassing UrlBasedViewResolver. Then you would need to return a RedirectView, with a status code of 302, in a smaller number of cases.\n\nAnother option to consider in the controller method for returning String vs RedirectView is to declare a return value of Object. However, do keep in mind an issue that was just reported with the new `@MVC` support classes. See [SPr-9218](https://jira.springsource.org/browse/SPR-9218).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4458102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4904216", "body": "I can appreciate the goal to reduce boilerplate but the present code would require if-else conditions in every method that accepts a servlet name:\n\n``` java\nif (servletName.equals(\"one\")) {\n    // ..\n}\nelse if (servletName.equals(\"two\") {\n    // ..\n}\nelse {\n    // shouldn't happen..\n}\n```\n\nSeeing that potentially 4 times in one class is not appealing. Even for a single servlet if you need to make customizations, you can end up with 6-7 overridden methods in which case I would prefer to write the onStartup method as now.\n\nDon't know what the right solution is but one option is to pass some object like a DispatcherServletRegistrar into a protected method, which subclasses can use to provide basic information for one or more servlets including servlet name, mappings, and config classes. For more advanced  needs, separate protected methods could provide access to the created ConfigurableWebApplicationContext(s) and ServletRegistration.Dynamic(s):\n\n``` java\n/** The first servlet **/\nprotected void customizeServlet(\n    ConfigurableWebApplicationContext wac, ServletRegistration.Dynamic registration) \n\n/** All servlets **/\nprotected void customizeServlets(\n    Map<String, ConfigurableWebApplicationContext> applicationContexts,\n    Map<String, ServletRegistration.Dynamic> registrations)\n```\n\nNot a perfect solution but an alternative to consider at least.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4904216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5160349", "body": "@cbeams would you mind processing this one?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5160349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5160649", "body": "@cbeams would you mind processing this one?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5160649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5200084", "body": "Thanks Chris, sorry for the trouble.\n\n-R.\n\n----- Original Message -----\n\n> From: \"Chris Beams\" reply@reply.github.com\n> To: \"Rossen Stoyanchev\" rstoyanchev@vmware.com\n> Sent: Tuesday, April 17, 2012 4:56:51 AM\n> Subject: Re: [spring-framework] Fix for slf4j dependency issue (#61)\n> \n> There were test failures after merging this pull request.  See\n> fdded0768ebd65f040f0e9c970f50a22ee99d005 for a follow-on commit that\n> takes care of these problems by updating everything to slf4j 1.6.1\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/61#issuecomment-5170805\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5200084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5282533", "body": "Could you provide a little more detail? Actually open a [JIRA ticket](https://jira.springsource.org/browse/SPR) and elaborate on your scenario. The Atom and RSS converters support requests for Accept type of `application/atom+xml` and `application/rss+xml` respectively. As long as the Accept header is set appropriately there shouldn't be any ambiguity.\n\nThings can get more complicated if the Accept header includes a number of media types including `*/*`, which is why it would help to elaborate. If an Accept header is not present or it comes down to `*/*` then I don't see why returning JSON based on the order of declaration is not intuitive. Also consider that in Spring 3.1 we added a produces condition to `@RequestMapping` which allows you to control the content type that should be used. Another option worth knowing about is you can easily change the order in which converters are declared by implementing this method in your `@Configuration` class that extends WebMvcConfigurerAdapter or WebMvcConfigurationSupport:\n\n``` java\npublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5282533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5282760", "body": "OK I see the ticket now https://jira.springsource.org/browse/SPR-9336 and I've added my comments there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5282760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5339323", "body": "Thanks for the comments. That issue is fixed in the master branch btw.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5339323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5466093", "body": "See my [comments](https://jira.springsource.org/browse/SPR-9361) under the SPR. Thank you for writing this up and submitting a solution. The issue raised is valid but we'll probably take a different approach to it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5466093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5556241", "body": "@ttddyy what is the config style you want to use this with -- XML or Java-based? The change doesn't seem usable in XML configuration (i.e. configuring a property of type `Map<String, List<HandlerInterceptor>>` on RequestMappingHandlerAdapter) and for Java-based configuration it's actually simpler (fewer lines and more readable) to re-write your test using what's already available:\n\n``` java\n@Test\npublic void interceptorsByPath() throws Exception {\n    String[] paths = new String[]{\"/foo\"};\n    HandlerInterceptor interceptorA = new HandlerInterceptorAdapter() {};\n    HandlerInterceptor interceptorB = new HandlerInterceptorAdapter() {};\n    MappedInterceptor mappedInterceptorA = new MappedInterceptor(paths, interceptorA);\n    MappedInterceptor mappedInterceptorB = new MappedInterceptor(paths, interceptorB);\n\n    TestRequestMappingInfoHandlerMapping hm = new TestRequestMappingInfoHandlerMapping();\n    hm.setInterceptors(new Object[] {mappedInterceptorA, mappedInterceptorB});\n\n    // ....\n}\n```\n\nOr if you're thinking about the MVC namespace or MVC Java config, this change has nothing to do with that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5556241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5578196", "body": "Okay it's more clear now what you're looking for. \n\nThe MappedInterceptor constructor actually accepts an array of patterns and the c namespace can further reduce the number of lines:\n\n```\n<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\">\n  <property name=\"interceptors\">\n    <list>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\"\n          c:pathPatterns=\"/foo/*,/bar/*\" c:interceptor-ref=\"interceptorA\" />\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\"\n          c:pathPatterns=\"/foo/*,/bar/*\" c:interceptor-ref=\"interceptorB\" />\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\"\n          c:pathPatterns=\"/foo/*,/baz/*\" c:interceptor-ref=\"interceptorC\" />\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\"\n          c:pathPatterns=\"/foo/*,/baz/*\" c:interceptor-ref=\"interceptorD\" />\n    </list>\n  </property>\n</bean>\n```\n\nThe MVC namespace allows multiple path patterns as well:\n\n```\n<mvc:interceptors>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <mvc:mapping path=\"/bar/*\"/>\n    <ref bean=\"interceptorA\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <mvc:mapping path=\"/bar/*\"/>\n    <ref bean=\"interceptorB\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <mvc:mapping path=\"/baz/*\"/>\n    <ref bean=\"interceptorC\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <mvc:mapping path=\"/baz/*\"/>\n    <ref bean=\"interceptorD\"/>\n  </mvc:interceptor>\n</mvc:interceptors>\n```\n\nThe first option is actually fewer lines than the configuration with a `Map<String, List<HandlerIntereceptor>>`. The second is a few lines longer but is quite readable. Further, we could add support for multiple path patterns in the MVC namespace and that would further reduce the number of lines.\n\nWhat do you think of these options? I would rather avoid adding yet another option if the current ones work reasonably well. Maybe the above examples could be used to improve the documentation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5578196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5600087", "body": "I will update the ticket and the documentation. \n\n> One thing I'd like to notice is:\n> to accommodate spring3.1 style, \n\nI see your point although I think there is a bit more going on. \n\nPreviously you mapped URLs to handlers (not interceptors). Interceptors were then applied to individual HandlerMapping instances. With the introduction of annotated controllers in Spring 2.5, you now typically have only one HandlerMapping and since it was no longer possible to apply interceptors in a fine-grained way, Spring 3.0 introduced the MappedInterceptor where for the **first time** an interceptor was mapped directly to URL patterns. \n\nSo the mechanisms are pretty similar except now you're mapping to interceptors. I.e. this:\n\n```\n/foo, /bar => handler1\n/foo, /baz => handler2\n```\n\nvs this:\n\n```\n/foo, /bar => handlerInterceptor1\n/foo, /baz => handlerInterceptor2\n```\n\nAs I mentioned before at this point with the MVC namespace and the MVC Java config mapping from URL pattern to interceptor, adding an option to do the exact opposite would be confusing I think.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5600087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5793475", "body": "Good discussion.\n\nI do think it's worth getting to the bottom of whether JSR-303 falls short in providing ways to apply validation logic. Or do we simply need to provide better examples of ways in which to use it.\n\nAs far as I know the options in JSR-303 are:\n- class-level annotations for cross-field validation (e.g. start/end date) and that's a good option since it encourages re-use of validation by simply dropping an annotation. May be this is too cumbersome in some cases, too much for one-off cases?\n- one of the Hibernate Validator developers [shows](http://musingsofaprogrammingaddict.blogspot.com/2010/02/generic-class-level-constraint-for-bean.html) how to implement self-validating logic. Seems like a good option as well -- a similar approach is used in Web Flow.\n- here is [an example](http://stackoverflow.com/questions/9922220/cross-field-validation-with-jsr-303-class-level-constraint-annotation) of an attempt to create a generic class-level annotation -- didn't quite get there but it may be possible and what the pros and cons are.\n- Hibernate Validator 4.1 has an [`@ScriptAssert`](http://musingsofaprogrammingaddict.blogspot.com/2010/06/whats-new-in-hibernate-validator-41.html) annotation and that seems like a good option since it can be more brief and expressive.\n\nAre there any other options? Have you considered those?\n\nAs for the ability to register multiple validators, should we decide to do that, then I would start at the DataBinder. If DataBinder allows registering multiple Validator instances that changes the discussion significantly since you'll now be able to register them via `@InitBinder` and I would argue that's functionally good enough and even quite fitting since validation is usually applied in fine-grained possibly down to a very specific occurrence of a model attribute, request param, etc (see attributes on `@InitBinder` annotation).\n\nIt's true that we allow all sorts of other components like converters/formatters, message converters, argument resolvers, etc. to be registered globally although we don't scan for any of them. So registering a global Validator is very comparable except we only allow one at the moment. Converters/formatters are somewhat of an exception actually in that they can be domain object specific (and hence many more in number) while message converters and argument resolvers are very few in number and used across. In fact [not being able](https://jira.springsource.org/browse/SPR-7773) to apply converters/formatters in a more local fashion (like we could with PropertyEditors), other than using formatting annotations that is, isn't always ideal and some might still resort to PropertyEditors.\n\nI don't think there is anything wrong with scanning for Validators. I just wonder if the combination JSR-303 and potentially the ability to register multiple validators on a DataBinder isn't simpler to understand. It's true controllers evolved to annotation request mappings based but consider that each `@RequestMapping` annotation has unique mapping information across the application while `@Validate` annotations within a `@Validator` are identical. For a global registration, a type-based filtering would be insufficient for many cases (e.g. validating simple types or applying different validation to different controllers). Furthermore if all `@Validate` methods are applied always when a validator is matched, then why not have just one `@Validate` method, which then brings it very close to the interface approach, which has more or less the same signature.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5793475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5827531", "body": "> One use case for class-based validation over JSR-303 bean validation is when an external data source needs to be consulted.\n\nJSR-303 has [class-based validation](http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/#d0e341) and the ConstraintValidator can be injected with dependencies. The LocalValidatorFactoryBean configures the [SpringConstraintValidatorFactory](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/validation/beanvalidation/SpringConstraintValidatorFactory.html) by default, which delegates to a Spring BeanFactory to create the validator.\n\n> One philosophical issue that drives this conversation one way or another is whether a class-based validator is more closely bound to a given domain object, or to a Controller (i.e. a set of request handling methods)\n\nType conversion can be application-wide applicable when performing basic type conversion for simple types, collections, etc. Validation is closely related to domain objects indeed but the use of domain objects is often concentrated in a specific controller or controller hierarchy. \n\nActually isn't bean validation (JSR-303) already along the lines of what you are describing? A single place to configure validation globally, a mechanism for registering, and a way to apply them to classes or fields in a declarative, re-usable way. So back to the question, what can't we do with bean validation or where is it not very convenient? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5827531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5880925", "body": "Yes, looking at the documentation, there is section 6.2 \"Validation using Spring's Validator interface\" and section 6.7 \"Spring 3 Validation\". The latter is fairly complete except there is no mention of `@Validated` yet! What's missing is text that links the two sections in some way, e.g. suggesting to use each mechanism more or less exclusively. Or suggesting how to combine an existing Validator with Bean Validation if necessary. A JIRA ticket for improving the documentation to that extent would be very appropriate. Also the spring-mvc-showcase is a good place to show a few options. The [current example](https://github.com/SpringSource/spring-mvc-showcase/blob/master/src/main/java/org/springframework/samples/mvc/validation) is quite vanilla.\n\nI'm also wondering if there isn't room to make it easier to apply existing Spring Validator types when also using Bean Validation. One option I can think of is letting the SpringValidatorAdapter be injected with Spring Validator instances, which would be invoked whenever a given validator returns true from `validator.supports(targetClass)`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5880925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5898740", "body": ">  I would argue that there should be just one top-level section on validation in\n\nGood point.\n\n> And now, the discussion comes full circle :-). \n\nThere is a subtle difference. The motivation for my suggestion is to make it easier to combine a pre-existing Validator with Bean Validation. Thinking more about it, it would be cleaner to have a CompositeValidator rather than changing SpringValidatorAdapter. For once SpringValidatorAdapter as its name suggests is meant for something else. Also, with a CompositeValidator it's easy to register validators globally or on a specific DataBinder. Optionally we can expore making it easier to add validators to a DataBinder. If the DataBinder always contained a CompositeValidator internally, then it seems adding more validators should be trivial, shouldn't it?\n\n> This was probably not the best way to start a conversation like this one\n\nNot wrong either but it might have saved you some time indeed.\n\n> It seems like this should also be a JIRA issue. Should there be one to cover doc improvements and code enhancements, or separate issues?\n\nI agree, two issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5898740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6256370", "body": "Thanks for your pull requests. Have you signed the [contributor's license agreement](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) before?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6256370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6274948", "body": "Thanks for the pull request. You will need to sign the Contributor License agreement. See the [guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines). This is only one time and should be very quick.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6274948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6275077", "body": "Please, take a moment to sign it before we can process the pull request. Apologies for the extra step but it's necessary and it should take very little time. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6275077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6326107", "body": "Thanks. If you haven't already please sign the [contributor's license agreement](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines). It should be very quick.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6326107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6327311", "body": "I've merged this pull request after revising the commit comment. The first line should be 55 characters or less. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6327311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6393679", "body": "The change has been merged. \n\nNote that I've corrected white space formatting (tabs instead of spaces), updated the commit comment with the issue number, and rebased the change on top of the latest in master. This means your fork needs a hard reset to correct its history. For the future I recommend submitting pull requests from a dedicated branch since you can then simply remove the temporary branch once the pull request has been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6393679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6407825", "body": "What I would usually do in those cases is \"fetch\" the changes from the Spring Framework repository and then do a reset to that. Assuming you have a remote for the Spring Framework called upstream you can do:\n\n```\ngit fetch upstream\ngit checkout master\nget reset --hard upstream/master\n```\n\nIf you don't have a remote for the Spring framework, you can add it:\n\n```\ngit remote add upstream https://github.com/SpringSource/spring-framework.git\n```\n\nI also recommend using something like gitk to visualize the commits and make inspect the results before and after the above operations.\n\nIf you don't have any changes to lose, you can always delete your fork and create it again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6407825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6409409", "body": "This pull request is now merged.\n\nNote that I did a few updates to the Javadoc and to code formatting to match conventions used in the framework (mainly the order of methods and length of lines). I removed the date related constants, which are not very convenient for use in XML and the setter method favoring a specific timezone. We actually have a TimezonePropertyEditor so it shouldn't be very hard to set that up in XML.\n\nThanks for your contribution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6409409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6719585", "body": "This change is now in. I also added an override for the `byte[]` method for the same reason. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6719585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8096676", "body": "You're right, we would need a parallel Jackson2ObjectMapperBeanFactory.\n\nAs for Jackson 1.7+ we could upgrade the build in master to do that and also update the JacksonObjectMapperBeanFactory to make use of 1.7 features while the message converter should still work against older versions of Jackson.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8096676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8157950", "body": "Essentially, on the wire we're exchanging `text/plain` messages and for that the StringHttpMessageConverter is perfectly capable. So logically the Number message converter could be implemented by delegating to StringHttpMessageConverter in all methods except `supports(clazz)` as well post-converting the String value to and from Number.\n\nFurther, it may be possible to make this more general by using a `ConversionService` to do String-to-some other object conversion. That would also allow Boolean, Character, Locale, Array/Collection (from comma-separated String), or whatever other `Converter` types are registered with the ConversionService.\n\nSomething like StringToObjectHttpMessageConverter<Object> -- internally delegates to StringHttpMessageConverter, and uses  ConversionService.canConvert(String.class, clazz) to decide if it can convert the target object and uses ConversionService to convert the value to and from a String.\n\nCopying @poutsma for comment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8157950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8158163", "body": "Taking a first glance, why is the `com.fasterxml.jackson` package in the test code necessary?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8158163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8206664", "body": "We could probably use `DirectFieldAccessor.getPropertyValue(String)` for that or the other option is to use the feature as a way of testing it's enabled or disabled -- we have tests like that in a few places like [MappingJackson2JsonViewTests](https://github.com/SpringSource/spring-framework/blob/master/spring-webmvc/src/test/java/org/springframework/web/servlet/view/json/MappingJackson2JsonViewTests.java#L172) for example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8206664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8270006", "body": "StringHttpMessageCovnerter has two properties. I would expose those properties on the new converter and use them to configure the StringHttpMessageConverter instance internally. That way the StringHttpMessageConverter does not need to be exposed externally. \n\nThe advantage of doing all that again is that it takes one look for anyone looking at the new converter to understand that it builds on the existing (and known) StringHttpMessageConverter. With the code duplication it requires much more effort to confirm the same. Not to mention the effort of maintaining that over time.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8270006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8288555", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8288555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8512489", "body": "@dmak, I'm looking through this pull request and I'm curious why deserializers are registered by type as opposed to serializers?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8512489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8618606", "body": "Since there isn't much Javadoc, I suppose the best way verify the intent is to ask the developers, probably starting with the forum. If you do get around to doing that, you can paste a link here. Either way I think that is worth getting to the bottom of before going ahead.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8618606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8767754", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8767754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8819284", "body": "Haven't gotten around to it yet, but I will soon. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8819284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8831078", "body": "@poutsma, looks good. Just one question. Currently when the scheme-specific part is set, hierarchical components (user-info, host, port, path) are reset. I would have expected the reverse to be true as well, i.e. when any hierarchical component is set, the schema-specific parts should be reset but that's not the case. In effect, after the schema-specific part is set once, any changes to the hierarchical components won't matter, not unless the schema-specific part is set to null. Also, shouldn't the query be reset along with the other hierarchical components?\n\nJust let me know what you think. I've already made some minor changes locally and can take care of this as well depending on what we decide..\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8831078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8838809", "body": "This change has been merged. For JsonSerializers I've added both options, setSerializers and setSerializersByType since in theory at least the two could be used in slightly different ways. For example, I could return more general type from handledType but choose to register against a more specific type in some specific case. There have been a few other minor changes as well.\n\nThanks for the pull request! In the future please consolidate into a single commit to make it easier to apply the change.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8838809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8856121", "body": "This has now been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8856121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8856416", "body": "I always get everything from scratch when processing a pull request, so if you squash your changes after submitting a pull request, it typically wouldn't affect me. But if I start making changes locally and want to hold on to them, I would usually indicate that in my comments. Either way as long as you mention that you've rebased your changes in comments, it should be fine.  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8856416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8856749", "body": "This has been merged now. I did make a few changes. The most notable one is restricting the default media type to \"text/plain\". HttpStringMessageConveter writes for media type `*/*` as well. That works as long since the target type is expected to be String. However, for the new ObjectToStringHttpMessageConverter, the target type is not just String but rather any type that the ConversionService can convert to, so there is a greater risk the converter will get involved where it shouldn't. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8856749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8864754", "body": "No worries. Squashing is relatively straight forward. Have a read [here](http://git-scm.com/book/en/Git-Tools-Rewriting-History).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8864754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8872076", "body": "Yes, that would be right. It's what you had originally and I meant to switch it back to it but forgot. I'll make the change. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8872076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8894015", "body": "Dmitry, I may not be the best person to answer on that particular issue. We have a [contributor's mailing list](https://groups.google.com/forum/#!forum/spring-framework-contrib) with exactly this goal, to allow asking such questions. That mailing list is mentioned in the [Contributor Guidelines](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md). So please post a message and someone will respond. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8894015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9178724", "body": "Yes, the README can go. We'll need to add a section to the reference documentation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9178724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9181098", "body": "This is now merged into master. Thanks Rob!!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9181098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9234558", "body": "Yes, indeed!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9234558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9681336", "body": "This pull request is now merged. Thanks for submitting it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9681336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9872862", "body": "We added GenericHttpMessageConverter in 3.2 M2 so there might be a way to get this to work. I'll take a look.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9872862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10054230", "body": "Just dropping a note to consider whether it's worth building on an existing library like [SnakeYAML](http://code.google.com/p/snakeyaml/), which can also be used [through Jackson](https://github.com/FasterXML/jackson-dataformat-yaml) for object mapping purposes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10054230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10067983", "body": "It does indeed, my bad!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10067983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10369956", "body": "Well I [provided a comment](https://jira.springsource.org/browse/SPR-9491?focusedCommentId=79847&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-79847) to that extent in the JIRA ticket even if I didn't have a specific case in mind. If you do feel free to add more detail. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10369956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10605841", "body": "@cbeams can you take a look? As an example to consider, the issue appears with the new spring-webmvc-tiles3 module, which lists tiles-core 3 as an optional dependency while spring-webmvc lists tiles-core 2 as an optional dependency. When the two are merged, tiles-core 2 is listed as optional and tiles-core 3 is listed as a compile dependency.\n\nThis would also affect Hibernate 3 and 4 integration except in that case different artifact id's are used. Also for servlet 3 vs servlet 2.5 with spring-test and spring-test-mvc.\n\nYet another example of where we list multiple versions of the dependencies (but in the same project) is jackson 1.x and 2.x, which happen to have different artifact ids but nevertheless it is the same concept.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10605841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10640227", "body": "> The canonical, production version of this class lives in spring-test, but has been reproduced elsewhere to avoid a cyclic module dependency between lower-level modules that can also benefit from MockHttpServletResponse for testing purposes.\n\nIn the case of the web.mock.\\* classes, besides the circular dependency, the source in spring-test does not implement all Servlet 3 methods, specifically methods with signatures that require Servlet 3 dependency (AsyncContext, Part, etc). The source in `spring-web/src/test/java` on the other hand does implement those methods because they're needed for testing. This is why we need two copies but no more. \n\nRob's pull request keeps one copy in `spring-test/src/main/java` and a second one in `spring-web/src/test/java` under a different package name, in turn shared with spring-webmvc, spring-webmvc-portlet, spring-orm. Since this only affects test classes, the package name change can always be reversed or changed later.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10640227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10642100", "body": "I've gone ahead and merged this pull request since it's critical for the Tiles 3 integration. @cbeams, you can still review and comment as necessary.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10642100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10807866", "body": "You can submit a separate pull request, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10807866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10850655", "body": "Thanks! I've updated the spring-mvc-showcase as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10850655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10894369", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10894369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10894730", "body": "Looking at the portlet module, it uses a small of the mock servlet objects -- mainly MockServletContext (for creating a WebApplicationContext) and any classes it depends on. The rest is in mock.web.portlet, which is not something available from spring-web anyway. So I think spring-webmvc-portlet is fine having its own copy of the mock.web classes it needs. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10894730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10895886", "body": "I've gone ahead and merged this pull request since it improves on the status quo without preventing a possible solution along the lines of what Chris suggested above. As a result spring-web, spring-webmvc, and spring-orm test code now uses a single source of the mock classes. Furthermore, as I pointed out that supports more Servlet 3 features than the sources in spring-test. So having a different package name makes sense minimizing the potential for conflicts due to the promiscuous test classpath of Eclipse.\n\n/cc @sbrannen, @cbeams\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10895886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11217447", "body": "The DeferredResult implementation includes some synchronization as well requires access to a DeferredResultHandler both of which are considered internal implementation matters, not intended for extension. That's what adding final reflects.\n\nThat said now that we allow DeferredResult to be extended, as a convenient place to define additional attributes and behavior (e.g. implement Comparable and store in a PriorityQueue), we can probably relax some of those constraints. So while there is no reason to change the implementation of `setResult` or `setErrorResult`, a sub-class may want to intercept the invocation for some reason and delegate back to the parent to do the rest.  For example, remove `final` from `setResult` and `setErrorResult` so a sub-class could have:\n\n```\npublic boolean setResult(T result) {\n    // do something with the result ...\n    return super.setResult(result);\n}\n```\n\nSimilarly `onTimeout` and `onCompletion` could be relaxed, allowing a sub-class to delegate to the super methods possibly with with a  wrapped `Runnable`.\n\nHow does that seem?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11217447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11379061", "body": "Thanks for the pull request! Have you signed the CLA before? It should be very quick. See the [wiki page](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11379061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11379324", "body": "This is now merged. I tweaked the commit comment to match the guidelines (55 chars for the subject).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11379324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11952798", "body": "Thanks for the update. However, DefaultAnnotationhandlerMapping and AnnotationMethodHandlerAdapter are still used by default (see [DispatcherServlet.properties](https://github.com/SpringSource/spring-framework/blob/3.2.x/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.properties)). RequestMappingHandlerMapping and RequestMappingHandlerAdapter are used with the MVC namespace.\n\nBTW in 3.2, DefaultAnnotationhandlerMapping and AnnotationMethodHandlerAdapter were deprecated so we may switch the defaults in the next release.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11952798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12000451", "body": "This has now been merged, thanks! Note that currently development is still on the 3.2.x branch with periodic merges into master. So the commit is added to 3.2.x. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12000451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12158516", "body": "Thanks Chris.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12158516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12239067", "body": "Have you signed the contributor's agreement already? See the [contributing](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md) wiki.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12239067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12241274", "body": "Ok thanks for confirming.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12241274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12506972", "body": "This is now fixed although in a slightly different way. Thanks for the report. If you could give the latest snapshot a try before 3.2.1 goes out, that would be very helpful.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12506972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12507140", "body": "We can't change this for backwards compatibility reasons. Please, use the defaultCharset constructor argument.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12507140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13609451", "body": "This now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13609451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13613582", "body": "Looking at the number of unrelated commits, this is probably submitted from the wrong branch. Please, re-submit based on branch 3.2.x. You can checkout 3.2.x locally and then use `git cherry-pick c333f0e50e1a066c5f0887cfc0a9c804db4d07d6` to get your commit carried over.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13613582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14133677", "body": "I would like the generated poms in. In addition to being \"in your face\" and I think we should be aware of issues as they crop up, the dependency visualization of the Eclispe POM editor is still a feature I miss.\n\nThat said the merge issue is unpleasant. Perhaps the use of git-rerere can be documented on the build wiki page so we can all refer to it. Would that remove the pain maybe?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14133677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14294890", "body": "How about, just an anonymous class?\n\n```\n// Use response wrapper for Servlet 2.5 compatibility\nsuper.doOptions(request, new HttpServletResponseWrapper(response) {\n    public void setHeader(String name, String value) {\n        if (\"Allow\".equals(name)) {\n            value += \", \" + RequestMethod.PATCH.name();\n        }\n        response.setHeader(name, value);\n    }\n});\n```\n\nOr can't we just set the allow header since we know the FrameworkServlet overrides all doXxx methods?\n\n```\nresponse.setHeader(\"Allow\", \"GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, PATCH\");\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14294890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14312631", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14312631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14312644", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14312644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14684915", "body": "After some further thought, although the proposed solution is perfectly valid, I'm not sure that the end result is generally useful and should be encouraged. A major assumption I'm making is that the injected list of media types will ultimately be used to determine the response media type and that requires a fairly complex algorithm that takes into consideration the order of the requested media types, their specificity, and any quality parameters. All that information must then be intersected against the media types the application can produce, etc. etc. Consider for example [the kinds of headers browsers send](http://www.gethifi.com/blog/browser-rest-http-accept-headers).\n\nThat said I'm open to considering specific use cases where injecting the requested media types could be helpful. That would at least allow documenting well when it is a good idea and when it is not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14684915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14685171", "body": "Taking the case of [stackoverflow question](http://stackoverflow.com/questions/13272443/different-response-entity-body-based-on-accept-header-with-spring-webmvc-rest-co) attached to the original JIRA ticket, I would recommend two methods, one with `produces='application/json'` and another with `produces=application/xml'`. \nAdmittedly this can lead to many additional methods if it occurs throughout. I've created [a ticket](https://jira.springsource.org/browse/SPR-10367) to consider improving it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14685171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14716286", "body": "I've resolved this in a slightly different way. Thanks for the fix!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14716286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14840798", "body": "I'm not sure this is necessary. All that ServletTestExecutionListener should need to do is create a sub-class of ServletRequestAttributes:\n\n```\nServletWebRequest servletWebRequest = new ServletWebRequest(request, response) {};\n```\n\nFurthermore, it is the FrameworkServlet's decision to create a new ServletRequestAttributes instance or not, depending on how it wants to handle forwarded requests.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14840798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19813870", "body": "Have you [signed](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md) the contributor's license agreement yet? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19813870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20812253", "body": "This is now in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20812253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21255286", "body": "This has been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21255286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21483929", "body": "I've merged this change after applying some minor changes including an update to the commit message. You might want to see the section commit message format in [Contributing.MD](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md).\n\nThanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21483929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21488288", "body": "merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21488288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21514957", "body": "This has been merged. btw I corrected a few spaces (to tabs) on the Javadoc. You might want to check your settings.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21514957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21792164", "body": "This is now in fixed. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21792164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21817181", "body": "For some reason I don't see the patch-1 branch but I've applied your change. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21817181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21817298", "body": "This has been applied although I re-wrote the commit comment to fit the guidelines.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21817298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22392035", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22392035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22491868", "body": "We can do something to address the symmetry of the supports() method. However, I am not sure that removing the null checks in the constructors is necessary. In the end both (un)marshaller must be provided if you intend to use both operations. The current combination of constructors and setters provides all necessary options.\n\nAs far as the array of (un)marshallers, I think that should be treated as a separate request. It does not fit to the description of the ticket. Furthermore, I wonder is it really necessary to introduce all that into the converter. For example couldn't you configure multiple MarshallingHttpMessageConverter's instead, each for a specific (un)marshaller?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22491868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22491880", "body": "/cc @poutsma, feel free to comment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22491880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22493330", "body": "Your IDE must have some code-style settings enabled that remove \"this.\" from field references. Or did you mean to remove them? We generally have them in the source code. Not to mention the extra \"noise\" in the commit.\n\nAs for the actual change, is it not sufficient to have just this?\n\n```\npublic void setSerializationInclusion(JsonInclude.Include serializationInclusion) {\n    this.serializationInclusion = serializationInclusion;\n}\n```\n\nThis should work fine in XML as well by providing the String representation of the JsonInclude.Include enum, so I don't see the value of the additional convenience methods. That makes the class harder to understand IMO.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22493330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22500381", "body": "> > The current combination of constructors and setters provides all necessary options.\n> \n> Not really. There is no null-check in setters.\n\nOkay I see now why you did that. This is true technically although the setters could be used to reset the (un)marshaller and given that this code has been out for some time I would leave the null checking as it is. You can stick to using the constructors for the strict initialization and the setters for more flexibility.\n\n> So in principle array is not needed. Refactoring that away is not a big deal, most important is that canRead()/canWrite() are overridden. Should I make another try / pull?\n\nSure, please do. Also, it's not a big deal since I can take care of it, but you can collapse the commits into one as recommended in our guidelines.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22500381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22602021", "body": "This is now merged in both branches.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22602021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22604015", "body": "It's keeping track of all your commits because at some point you made changes in your master, which are not in the Spring Framework master. So now as you perform merges from the Spring Framework master, it's keeping a parallel history. It helps to look with something like gitk to visualize the commits. It will be confusing to understand because this goes back a year now.\n\nI can recommend some changes. \n\nDo not make commits in your master branch because then you diverge from Spring Framework master and any merge becomes a three-way merge and adds unnecessary noise to the commit history. \n\nAlways make changes in a branch when you submit pull requests. Then you can simply discard the branch when the PR is processed.\n\nThat way when you do \"Fetch from upstream\" + \"Merge into my master\" you'll always what's called a Fast Forward, meaning that you master simply advances to where the Spring Framework master is, i.e. there is no need for a 3 way merge. There is no need to do \"pull to origin\" if you don't make changes in master. Just create branches and submit pull requests from them.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22604015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22604111", "body": "This is now in master. Note that I removed the null checks in canRead/canWrite. Those should not blow up but simply return false and pass on to the next converter. I also removed the reference to `o.getClass()` in writeToResult -- if o is  null this would cause a NPE.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22604111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22604593", "body": "Given our discussion under PR 334 about git management, I think I can process this request without having you resubmit. However I do recommend you either start in a new clone and follow the rules I mentioned. There are other ways but this is probably the least confusing one.\n\nMy main question however remains not answered (see my comments above). Do we really need the extra setters or can we just have one that accepts the enum type? It seems sufficient to me. There are already 15+ setters, so these additional convenience methods only make it harder to figure out what's available. \n\nIf you can comment on that, I can take care of the rest.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22604593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22633196", "body": "Hm, have you tried just using enum string values in the XML configuration? There is a StringToEnumConverterFactory so I would expect that to work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22633196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22633805", "body": "> - I would love to divert from upstream in my origin. That may touch configuration files, maybe dependencies. I want these changes to be propagated to branches I create after.\n\nI don't know of a way to do that off the top of my head. You can look around. From git's perspective if you make changes and commit them, they'll be considered just as relevant as any other commit. Perhaps create a script that applies and removes the specific changes you need (e.g. via git stash or as a patch)  so they're never committed. \n\n> - Branches themselves are clean: they change only the files I intend to change and they don't collide with changes I made in previous change.\n\nI don't see how they can be clean if you're branching from master which you want to divert.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22633805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22657070", "body": "That's roughly what I was suggesting initially .. but it sounds like he'd like to maintain some local adjustments to build scripts and others that should never be submitted in a PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22657070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22705864", "body": "Thanks Arjen. We'll have a look.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22705864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22882803", "body": "> This PR includes SubProtocolHandler for plain / raw web socket connections.\n\nI guess I'm wondering if this has anything to do with sub-protocol handling since there is no sub-protocol. I see it as a WebSocketHandler that creates a `Message<?>` and puts it on a `MessageChannel`. \n\nThe other challenge is there is not much to use for destination. There is a single URL per WebSocket session (the one on which it was started) and you wouldn't want to create another connection to target another destination. Ideally there is 1 physical connection and many destinations, which means the message content must express the destination for each message, something STOMP provides.\n\n> allow the users to specify their own HandlerMethodArgumentResolvers.\n\nThis makes sense.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22882803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22889534", "body": "yes a separate PR for custom arg resolvers would be fine. we'll probably need the same for custom return value handlers as well.\n\nregarding the raw websocket what was your thought about my comment about destinations? Sending a message on a messagechannel is easy but what would you do with that message? i.e. without making any assumptions about its content? how would route it to an `@MessageMapping` method for example or do anything else meaningful with it? \n\nso far i've thought what's under the simp package (i.e. SImple Messaging Protocols) would assume  some kind of format for the message content (e.g. simple messaging protocol STOMP, MQTT, WAMP) or at least a basic json format using fields to express a destination for example. Ideally it should allow expressing intent to subscribe, send messages, etc (see MessageTypes).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22889534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23120896", "body": "This is now in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23120896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23121419", "body": "this is now in master. thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23121419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23351717", "body": "This is applied (there was a ticket for it as well, https://jira.springsource.org/browse/SPR-10861). Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23351717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23352359", "body": "This is applied although I did move the custom resolvers after known resolvers. It would be difficult otherwise for a custom resolver to ensure it doesn't interfere with well-known argument types unintentionally. Hopefully this s not an issue but feel free to elaborate if so.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23352359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23491250", "body": "This is now merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23491250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23491894", "body": "Thanks for sending this pull request. A couple of comments on a quick glance.\n\nI don't see any tests. How do you actually verify this? I would expect some sample configuration in [this directory](https://github.com/SpringSource/spring-framework/tree/master/spring-webmvc/src/test/resources/org/springframework/web/servlet/config) and corresponding test case(s) in [MvcNamespaceTests](https://github.com/SpringSource/spring-framework/tree/master/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java).\n\nThese changes are for 4.0 so should be in spring-mvc-4.0.xsd (as opposed to 3.2).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23491894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24026447", "body": "There are some further changes. See [pull 351](https://github.com/SpringSource/spring-framework/pull/351).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24026447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24943718", "body": "This looks very good overall. A couple of things I noticed while experimenting. \n\nIf an invalid IPv6 format is used (e.g. omit the closing `]` or use non-alphanumeric char) the result is a UriComponents where the host is tacked on to the path, so it looks like it got parsed but the path is invalid. Since the IPv6 format is quite specific we should do something to guard against such cases. Maybe check if there is a scheme but no host, or if the path starts with `[` could be another giveaway?\n\n`HierarchicalUriComponents.Type.HOST` now allows `[ ] :` for any host value. Since HierarchicalUriComponents can only be created through UriComponentsBuilder, in theory a regular host should never contain `[ :` but it could end up containing `]` (e.g. this is now allowed `http://example.com]` even if highly unlikely). Perhaps what we need is an additional HOST_IPV6 enum that would be used instead when the host is an IPv6 address?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24943718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24946795", "body": "One minor suggestion for NoHandlerFoundException is to extract and keep the HTTP method, request URL, and `HttpHeaders` as fields instead of the whole request. Those are the key pieces and would keep the exception serializable. \n\nThe Javadoc on NoHandlerFoundException should mention the DispatcherServlet property that must be set in order for the exception to be raised. We should also mention on the DispatcherServlet property itself the case of `DefaultServletHttpRequestHandler`, which if configured handles all requests by forwarding them to the default servlet, and therefore would never result in a NoHandlerFoundException.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24946795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24953210", "body": "Sorry for taking a long time to look into this. \n\nIt seems that If-Match is useful for PUT operations to ensure an entity is updated only if it wasn't changed by anyone else meanwhile (aka optimistic locking). However, the filter doesn't support PUT by design since it only does it's checks after the response is written (hence the name \"Shallow\"). So I'm curious how do you actually use the fix suggested in this PR? What use cases does it cover for you?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24953210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25112016", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25112016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25112233", "body": "This is now merged.\n\n> I'm not really happy with the condition check to decide on wich HierarchicalUriComponents.Type we should use (checking if the host part starts with [); IMHO, the only alternative would be to use named groups in the regexp and some kind of flag saying if the host is a IPv6 address or not.\n\nThere are few ways to make it a little nicer but since it is a private matter within HierarchicalUriComponents, the current solution is fine. I did a little polish, just to cover the call to verify(), but the approach is the same.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25112233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25114352", "body": "/cc @eugenp, just in case you didn't get a notification on the above comment. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25114352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25164713", "body": "Okay thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25164713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25245096", "body": "This is now in master. Thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25245096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25375859", "body": "This is already in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25375859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25404349", "body": "This is now in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25404349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25404403", "body": "This is now in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25404403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578420", "body": "This is now in master, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578438", "body": "This is now in master, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578445", "body": "This is now in master, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578480", "body": "This is now in master, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25578480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25833179", "body": "I don't see what the escape pattern should be (and AntPathMatcher.isPattern simply looks for indexOf \"?\" or \"*\").  Aside from that detail, an \"?\" is almost guaranteed to be present in redirect and forward URLs, so the requirement to escape it seems to make the common case more difficult. Also it would require existing tests to be updated. Perhaps we could simply add a couple more methods, redirectedUrlPattern and forwardedUrlPattern?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25833179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25834675", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25834675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25834702", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25834702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25920889", "body": "hi Brian, I like the change and it looks pretty complete. The only thing I wondered is whether we should have `List<Package>` in ControllerAdviceBean as opposed to `List<String>`. That would eliminate the need for subsequent String comparisons and also allows us to log a warning if the package doesn't exist. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25920889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25922503", "body": "This is now merged in master. I removed by the way the comment about escaping `?` and `*`. For that, the methods for direct comparison can be used including URI encoding characters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25922503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25971424", "body": "All good points, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25971424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26609824", "body": "Note that I did a little bit of polish but overall looks great!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26609824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26623314", "body": "This is merged now, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26623314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27274756", "body": "This is now merged in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27274756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27333593", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27333593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27802347", "body": "This fix is wrapping the request to return the \"hidden\" method. This is exactly what the HiddenHttpMethodFilter does so I don't understand why this fix is needed?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27802347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27873561", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27873561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28202934", "body": "What Servlet container are you running with? My guess is that you need to add `org.springframework.web.multipart.support.MultipartFilter` ahead of the `HiddenHttpMethodFilter` to make sure the multipart request is parsed early enough.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28202934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28481354", "body": "What is the typo? I fail to see it in the diff. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28481354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28560226", "body": "Okay thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28560226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29074767", "body": "This was merged last week. There was a ticket as well, [SPR-11088](https://jira.springsource.org/browse/SPR-11088).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29074767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29074865", "body": "Thanks Brian, this was on my todo list for today :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29074865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29252257", "body": "Thanks for the pull request and for pointing out the issue. Upon review I've realized there is no need to require explicit configuration of supported sub-protocols in the HandshakeHandler. See the comment in the resulting commit [4e82416ba97abc804bd805dc4e9e10f5b3c685e7](https://github.com/spring-projects/spring-framework/commit/4e82416ba97abc804bd805dc4e9e10f5b3c685e7) for more details. As a result `WebMvcStompWebSocketEndpointRegistration` no longer has to create a DefaultHandshakeHandler instance, which also address the issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29252257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32201275", "body": "Thanks Greg, note that I've modified the commit message slightly to fit our guidelines as described in our [CONTRIBUTING.md](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32201275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32298153", "body": "SPR-11245 is now resolved.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32298153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32298540", "body": "This has been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32298540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32299915", "body": "I have merged this. \n\nNote that I squashed the 3 commits into 1 and updated the commit message to match our guidelines (55 chars for the subject).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32299915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32758240", "body": "> Speaking of the latter, AbstractMessageConverterMethodProcessor#createOuputMessage is not available ...\n\nI don't think we need that at all here. The `ServletServerHttpResponse` wrapper is used with HttpMessageConverter's but we're not writing to the body. So I don't see any purpose to wrapping the response. We can just iterate the headers and write directly to the HttpServletResponse.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32758240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32795298", "body": "This has been merged. Note that I've addressed it in a slightly different way and also added tests. Same idea though.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32795298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32817007", "body": "This is now merged. I've only taken the commit for the latest @MVC infrastructure.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32817007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34629108", "body": "The way to fix this is to use StreamUtils actually. We had [a similar fix](https://github.com/spring-projects/spring-framework/commit/6661788748daccfc8d08b4a17a66beb4f01fc7b8) in message converters. See for example [StringHttpMessageConverter](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java#L106).\n\nIf you want you can re-submit. Have you signed the [contributor's agreement](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md)?\n\nAlso please create a ticket in JIRA if there isn't one already. We may want to check all places where View's may be doing this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34629108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35883335", "body": "Since this is an encoding-related issue, an integration test would be best (vs relying on MockHttpServletRequest/Reponse). The [spring-framework-issues](https://github.com/spring-projects/spring-framework-issues) repository is the place to go to when confirming if something is an issue or not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35883335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36264642", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36264642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36289226", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36289226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36293657", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36293657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36358558", "body": "I've solved this by adding a unique suffix to the filter name if needed. See commit [035bac](https://github.com/spring-projects/spring-framework/commit/035bac025a2e8062a1894ae9651930e528511e27) I don't see much value in providing filter names, so requiring them shouldn't be necessary to solve this specific case. Also this class has been out and we can't change its existing methods available for extension.\n\nThanks for the PR and for reporting the issue!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36358558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36371050", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36371050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36742934", "body": "This looks like a potential issue. The condition `targetType.getElementTypeDescriptor() == null` I believe means we don't have the full generic information on the collection in which a copy may be required. I'm not completely certain and would hope some test would fail but wanted to raise a flag.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36742934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36744427", "body": "Okay you're right, it looks like the copyRequired flag can only change in the else condition where the ConversionService is used. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36744427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36789356", "body": "That would be a Servlet init parameter in web.xml\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36789356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36796499", "body": "For example\n\n```\n<servlet>\n    <servlet-name>appServlet</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>throwExceptionIfNoHandlerFound</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    <load-on-startup>1</load-on-startup>\n    <async-supported>true</async-supported>\n</servlet>\n```\n\nIf you are having trouble break in HttpServletBean.init(). That's where it happens.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36796499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36913179", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36913179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37024546", "body": "> Typically, servlet containers decode the URI with UTF-8\n\nIf Tomcat uses ISO-8859-1 by default I'm not sure it is very typical.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37024546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37891644", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37891644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37891765", "body": "This has been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37891765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38127291", "body": "How about raising `MethodArgumentNotValidException` rather than `IllegalStateException`. That's something then that one could catch in an exception handling method and do something about it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38127291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38234552", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38234552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39080760", "body": "@cloudmark, i'm afraid this is a 4.1 feature. Now that we've switched to 4.1 in the master branch, we should be able to get this in there  pretty soon.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39080760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39234308", "body": "This has been merged. Note that the JettyWebSocketSession needed the same change and I've also moved the tests to unit tests for each respective session adapter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39234308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39604456", "body": "This is now in master with the additional update as discussed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39604456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41274918", "body": "Looks good overall. \n\nThe indentation of web.xml sample doesn't look right and needs to be corrected (probably a mix of tabs and spaces?). Also \"Spring MVC\" works better than \"servlet MVC\".\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41274918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41635584", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41635584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41635811", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41635811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41739527", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41739527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41915315", "body": "This is now merged, thanks for the pull request and suggestion!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41915315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41915390", "body": "BTW note that I made a small change, renaming the attribute to \"broadcast\" with a default of value of `true`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41915390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41934264", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41934264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/42376277", "body": "This is merged thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/42376277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43073774", "body": "This has been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43073774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43243652", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43243652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43292738", "body": "This is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43292738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43498134", "body": "Thanks for the PR. After the discussions under JIRA and the resulting new ticket SPR-11752, I am closing this as it will be superceded by a new `RequestEntity` (similar to `ResponseEntity` but for client-side use) and builders as part of https://jira.spring.io/browse/SPR-11752. The ResponseEntity builder is already in master, the RequestEntity and builders is currently in progress.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43498134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43965518", "body": "Thanks Roy, this is now merged into master. I only added the converter to the MVC config much like it was already done in the RestTemplate.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43965518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44423653", "body": "@artembilan, the fix looks alright to me. However, i'm thinking of going a step further. Ultimately `SubProtocolWebSocketHandler` only needs the publisher in order to pass it on to `SubProtcolHandler`'s it is configured with. The main driver for that is the Java config where the `StompSubProtocolHandler` is not a Spring bean (unlike the XML namespace). \n\nSo perhaps we need to address this in the Java config and remove `ApplicationEventPublisherAware` from `SubProtocolWebSocketHandler`. For example pass `ApplicationEventPublisher` to `WebMvcStompEndpointRegistry` which internally will intialize the the StompSubProtocolHandler with it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44423653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44461102", "body": "I have a use case for this. However, I am wondering if the implementation couldn't be simpler. \n\nRather than re-implementing Future, couldn't we use `ListeableTaskFuture` with a \"settable\" `Callable`? [Here is a commit](https://github.com/rstoyanchev/spring-framework/blob/eaed8893c9d7ae2c5ce9aa9e3adc5e71d0a26618/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java) that shows what I mean. \n\nThe only tests that don't pass are due to CancellationException getting delivered to the callbacks. I am actually not sure what the right behavior is. I could argue that a CancellationException delivered to as an onFailure callback is useful. Either way it is an orthogonal question.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44461102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44668396", "body": "This is merged in master. Note that I made the setApplicationContext method protected. Since WebMvcStompEndpointRegistry is the public API of the Java config, we've to be careful not to expose methods for internal use.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44668396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45491133", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45491133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46214441", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46214441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46225386", "body": "This has been merged into master. Thanks!\n\nI did re-write the cancellation tests to expect CancellationException in onFailure as discussed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46225386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47694024", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47694024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47704127", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47704127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47709566", "body": "@poutsma any thoughts? This is used primarily with Spring MVC where the HandlerExceptionResolver accepts Exception. Theoretically the annotation could be used elsewhere but perhaps it's worth aligning it more closely with Spring  MVC. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47709566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47734172", "body": "This is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47734172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47734369", "body": "On a second thought, I've done something a little different, treating this as an evolution of the DispatcherServlet's existing exception resolution, which currently exposes the resolved exception in the model but does nothing when a HandlerExceptionResolver returns an empty ModelAndView (i.e. status code set).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47734369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48177409", "body": "/cc @poutsma in case you have any comments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48177409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48334170", "body": "Thanks what about accepting a Matcher instead of a String for the error value? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48334170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48375476", "body": "Sometimes with errors it helps to do \"startsWith\" or \"contains\" type matches rather than full, exact string match. I see now you're matching on error codes. I think the method name should make that more clear. Or perhaps it should try to match the error code first and then if there is no error code, must match the error text. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48375476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48520827", "body": "Thanks Agim, I've also added ensured this works for return value handlers too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48520827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48727008", "body": "Yeah, the pull request doesn't look right. It seems like it doesn't think those 33 extraneous commits are already in master. Probably something got re-written. Either way I can take the latest commit only. No need to do anything further on your side. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48727008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48730991", "body": "This is now merged in master. Note that this PR doesn't have the latest changes you made. I picked those up directly from your fork and applied some additional minor changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48730991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49249886", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49249886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49305667", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49305667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49391162", "body": "The approach taken instead enhances the existing view controller with the ability to also configure a status code.  This is a simple and natural extension on its own but turns out it also goes quite far in meeting the requirements for SPR-11543.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49391162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49392972", "body": "Merged, thanks Marten.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49392972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49392989", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49392989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49788406", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49788406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49789952", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49789952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49800034", "body": "This is now in master and will be included 4.1 RC2. Thanks Alex!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49800034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50545217", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50545217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50823535", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50823535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50934094", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50934094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50935493", "body": "This has been merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50935493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52655020", "body": "This was already merged for 4.1 RC2.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52655020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53464958", "body": "hi thanks for the PR. However the spring-messaging module cannot have a dependency on Spring Security or it would be a circular dependency. This will be supported from the Spring Security side.  See [this blog post](https://spring.io/blog/2014/08/18/spring-security-4-0-0-m2-released).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53464958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53874741", "body": "Looks good. Merged!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53874741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53945519", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53945519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58378662", "body": "The relevant part of the DispatcherServlet is in processDispatchResult where it can invoke triggerAfterCompletion with a null parameter if the exception was handled with a HandlerExceptionResolver. Is the exception being handled with such a resolver in your case?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58378662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60639609", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60639609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63840435", "body": "This looks good to me. I'd only suggest splitting into a 3 part if-else condition:\n\n```\nif (user.equals(sessionId)) {\n    // case 1: /user/{sessionId}/...\n}\nelse if (this.userSessionRegistry.getSessionIds(user).contains(sessionId)) {\n    // case 2: target user is in the same session (most likely a server-side message)\n}\nelse {\n    // case 3: look up session ids\n}\n```\n\nAlso case 2 could be exposed to a NPE if getSessionIds returns null (unlikely but possible, perhaps if the session is closed simultaneously).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63840435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63844999", "body": "Good point yes.\n\nOn Thu, Nov 20, 2014 at 12:09 PM, Brian Clozel notifications@github.com\nwrote:\n\n> OK I'll update this PR!\n> Note, the getSessionIds is already defensive and returning an empty Set if\n> nothing was found.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-framework/pull/696#issuecomment-63843013\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63844999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65304767", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65304767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66166857", "body": "Wasn't this already processed as part of #705?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66166857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66189383", "body": "Alright I see now. I've applied the change on top of the original change in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66189383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/72672726", "body": "Thanks, merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/72672726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75612255", "body": "We might need to expose another option on `StompWebSocketEndpointRegistration` and also not to forget on the equivalent XML namespace (probably under the `<stomp-element>` element). \n\nConfiguration details aside, the proposed contract should work for exceptions on the inbound channel processing side (i.e. handleMessageFromClient). However there can be exceptions on the outbound channel side (within handleMessageToClient) in which case there is also a Message that we were trying to send. Also there can be exceptions in a different component. The main one I have in mind is StompBrokerRelayMessageHandler (search for the `sendStompErrorFrameToClient` method) resulting in in an ERROR frame being sent. I can imagine other parts of the code potentially doing something similar in the future, i.e. sending an ERROR to the client.\n\nSo overall I like the idea of a StompSubProtocolErrorHandler configured on the StompSubProtocolHandler but I think the contract needs more work to accommodate all use cases -- (1) exception on the inbound handling side, (2) exception on the outbound side (in which case we have a Message that we were trying to send), and (3) an ERROR frame sent by someone on the outbound channel. In all these cases we might want to ask a StompSubProtocolErrorHandler to get involved.\n\nYet one more comment that the StompBrokerRelayMessageHandler does not need to send the message on the WebSocketSession itself. It's enough to help to create a WebSocketMessage and perhaps also indicate if we should proactively close the connection. Currently we always do but if we are going to provide some flexibility we should think of all the options that might apply.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75612255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75624116", "body": "Thanks, how about a `createRequestMappingHandlerMapping` protected method that would be invoked by the base class to obtain the instance prior to configuring it? \n\nThat way the sub-class has a clear extension point that does one thing vs overriding the @Bean method and replicating what it does, which even if it is simple at the moment, leaves the possibility that the base class might do more in the future.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75624116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75768964", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75768964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76403564", "body": "Spring Security 4 is almost GA. It has the resolver you need and much more:\nhttps://github.com/spring-projects/spring-security/blob/master/messaging/src/main/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolver.java\n\nhttps://spring.io/blog/2015/02/26/spring-security-4-0-0-rc2-released\n\n/cc @rwinch \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76403564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76426365", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76426365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76973962", "body": "While I agree in general with the change, I think reverting back to the previous complete split along chapters makes it too fine grained to aid in understanding.\n\nI'd like to suggest we consider a less fine-grained split along the lines of what makes sense when editing. For example: overview, what's new, core, testing, data access, web mvc, portlet mvc, websocket, integration, appendices. \n\nThis is not too different from the idea with JIRA components to aid in categorizing issues. It's also how we might want to organize the documentation if we were to create a more helpful \"landing page\" for the documentation rather than the current Table of Contents which requires no less than 48 page down hits on my laptop (never mind a smaller resolution device).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76973962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77502524", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77502524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84111785", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84111785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84113109", "body": "I've gone for a slightly different approach, essentially detecting `{/var}` syntax at the point when `path(String)` is added to the builder, splitting it up, and translating to a sequence of path and path segments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84113109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84745939", "body": "Actually I've realized what I did isn't going to work for all cases. Re-opening..\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84745939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/88306107", "body": "Looks good, merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/88306107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/92438282", "body": "This is merged. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/92438282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/92442963", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/92442963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/95902520", "body": "This is now merged. Thanks!!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/95902520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/95996245", "body": "This is now merged. Note that this PR seems to be based on the 4.1.x branch. I cherry-picked the commit to the master branch targetting 4.2.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/95996245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/97712200", "body": "This has been just updated. Try the latest.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/97712200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/97712246", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/97712246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99922829", "body": "This is now merged, thanks! Only removed the constructor with marshaller and unmarshaller since setters should still work for that less common case.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99922829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103176198", "body": "This is now merged. I've made sure all method accept a controllerType. The existing `fromMethod` is deprecated. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103176198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103206387", "body": "This is now merged. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103206387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107500638", "body": "Merged thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107500638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107508687", "body": "This is now available with commit https://github.com/spring-projects/spring-framework/commit/696a010e81c678f449320c3573cc26a0558baa07.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107508687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107552910", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107552910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107553922", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107553922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/110807562", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/110807562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112173653", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112173653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112936364", "body": "This has been merged, thanks! Note that I rebased the commit on top of the latest in master, so you might have to reset your fork (since you submitted from the master branch).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112936364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118939223", "body": "Thanks for the PR but as discussed in JIRA this is expected to be an application choice.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118939223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/142071564", "body": "Thanks for the pull request. Would you mind creating a ticket in our [JIRA issuer tracker](jira.springsource.org/browse/SPR)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/142071564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/149343982", "body": "Is there a ticket for this in the JIRA issue tracker? It appears to be a duplicate of https://jira.spring.io/browse/SPR-12975.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/149343982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/149346164", "body": "This is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/149346164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/161107798", "body": "This is now merged. Thanks for the thorough report and pull request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/161107798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/164797115", "body": "When 4.2.4 goes out this week, we'll be creating a 4.2.x branch and the master branch will be open for 4.3 changes. We'll merge this PR as soon as that's the case.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/164797115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166753208", "body": "This is now merged. Thanks! \n\nNote there were a couple of tweaks in AsyncRequestExecution to make sure it allows decoration of the request. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166753208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168695256", "body": "Thanks for the PR. Could you please [create a ticket](jira.springsource.org/browse/SPR). Have you already signed the [contributor agreement](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-individual-contributor-license-agreement-icla)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168695256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/171776140", "body": "Merged, thanks! \n\nNote that the PR was rebased, slightly modified to comply with conventions, and squashed so you'll have to reset your master branch. In general it's better to submit from a branch since it's very likely your PR will be rebased if nothing else, so you can just remove the branch when the PR is accepted.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/171776140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173391801", "body": "This is now merged, thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173391801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173581385", "body": "This is now merged. I removed one of request builder factory methods since passing in a URL template is merely a convenience that's easy to make up for. Thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173581385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173928952", "body": "Thanks for the PR but this was already added https://jira.spring.io/browse/SPR-13831.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173928952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/176944270", "body": "I've incorporated this slightly differently but effectively the same also taking care of the MVC namespace side. Thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/176944270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185203537", "body": "Merge. Note that I've rebased on top of the latest so you local fork will need to be reset with --hard. In general it's a good idea to use a branch for pull requests that you can then simply delete. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185203537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/190218300", "body": "Looks good overall. I'm wondering if we shouldn't also drop `produces` on POST, PUT, and PATCH? Also drop both `consumes` and `produces` on DELETE? It's less common to produce on those methods to begin with plus those conditions are for disambiguation purposes. They are not always needed, and you still have consumes. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/190218300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194974476", "body": "For Javadoc I personally wrap at 80 to increase readability in all kinds of contexts. For code however the guidelines do allow flexibility \"Aim to wrap code at 90 characters, but favor readability over wrapping\".\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194974476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196423121", "body": "Closing as per [SPR-14046](https://jira.spring.io/browse/SPR-14046?focusedCommentId=127860&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-127860).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196423121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198349564", "body": "@rwinch thanks for the quick pull request. I'm wondering should we also update the constructors of MockMvcWebConnection to the effect that a WebClient is always expected? Presumably a MockMvcWebConnection is created for use with a WebClient and it makes sense to expect the reference to that client vs creating a new instance?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198349564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198427575", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198427575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200137005", "body": "Regarding the dead code, yes we should be using the resolved media types, as the Javadoc above says: \n\n> then expands to check against the request via ContentNegotiationManager#resolveMediaTypes\n\nOtherwise overall I like the outcome of the current approach.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200137005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/204427886", "body": "Normally you need to [open a ticket](jira.springsource.org/browse/SPR) to explain the issue. \n\nIn the Servlet API a request parameter may be a query parameter or also a name-value pair from the body of an HTTP POST. If you want query string parameters, you need to add them to the target URL when creating a request builder and that gives you both a query string and Servlet API request parameters. If you use `addParam` that will translate to request parameters only and we can't assume if they are query string parameters or not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/204427886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/204428447", "body": "Would you mind also creating a [ticket in JIRA](jira.springsource.org/browse/SPR)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/204428447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211379766", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211379766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211386834", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211386834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211394420", "body": "Thanks for the PR. I've implemented as suggested by @ryanskow since that addresses the exact issue with the ArrayIndexOutOfBoundsException and more conclusively.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211394420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214339267", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214339267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214419370", "body": "I agree but either way I'll do that before RC2. Thanks a lot Rob!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214419370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214756668", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214756668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/220983214", "body": "I've closed this because it needs more discussion. I'm sure this PR solves the problem you need it to solve well but there are other cases that need to be considered before this goes in. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/220983214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222690316", "body": "I've merged this and also updated the ResponseBodyEmitter accordingly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222690316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222751571", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222751571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223129565", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223129565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/227139404", "body": "Sorry but this is not a place for asking questions. Please follow [the guidelines](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#search-stack-overflow-first-discuss-if-necessary).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/227139404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/228737456", "body": "Looking at SPR-13044 this was already done in 4.3 RC1 and is now available in 4.3. My sincere apologies as I must have missed your PR. At any rate this is now available.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/228737456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229037373", "body": "Closing for now, please continue discussion under JIRA ticket. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229037373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232193141", "body": "This is now merged, thanks. Normally I would prefer a ticket indeed that records the change but for a test improvement we can do without. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232193141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234610692", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234610692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235653477", "body": "This is now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235653477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235653526", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235653526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235653594", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235653594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243448150", "body": "I don't think 100% consistency with SseEmitter is all that important. I do like the idea of aligning with the actual names that appear on the wire so retry and event sound good to me. \n\nI don't see much wrong with `reconnectTime` to be honest. I find it more descriptive on its own and unqualified although with Duration in the picture, `retry(Duration)` sounds pretty good too. We could use the Java 8 upgrade as a reason to add `retry(Duration)` and deprecate `reconnectTime`.\n\nAs for event vs name that was a mistake from the start https://jira.spring.io/browse/SPR-13080. I would be in favor of deprecating it and adding `event(String)`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243448150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243825015", "body": "@neetkee just wondering if these updates were based on specific issues that you know of that were addressed in IntelliJ or just based on trying the latest?\n\nMy experience is very different using both 2016.1.4 and 2016.2.2. It all started with running into this issue https://jira.spring.io/browse/SPR-14650 which @rwinch will commit a fix for shortly. Beyond that, on a fresh clone of the spring-framework and with no CLI activity, just a straight-up import into Idea, I get all of the issues that are now listed as \"known issues\" for 13.1. In other words I get compilation issues related to CGLIB repackaging, OXM generated test sources, and spring-aspects. Is it possible you didn't try with a completely new clone of the repository? I can't explain otherwise why the difference.\n\nAs far as I can tell based on my experience (and I think @rwinch had the same while testing) the instructions at present should be -- clone the repository, run the tests with Gradle from the command line once, then import, and during the import exclude spring-aspects. @rwinch is also planning to open a ticket with IntelliJ to allow running gradle tasks on import which would give us an opportunity to improve on this status quo but aside from that it'd be useful to know if you have references as to why these are issues in 13.1 but no any more.\n\nThanks for helping to clear this up.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243825015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243827877", "body": "> I typically don't actually run the tests before import as this takes more time\n\nIndeed just spring-core and spring-oxm suffices. It's a little simpler in the instructions to just have `gradlew test` but we can qualify with a clarification saving a little time. Hopefully that step can go away eventually based on Idea ticket you created.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243827877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244160769", "body": "No worries, good to know. I do see the issue with with the Netty ReferenceCount as well. That seems to be something new.. At any rate thanks for confirming. I guess we should at least update the instructions for now and take it from there. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244160769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244369491", "body": "I've updated the instructions slighted and merged. On import you can pick the build.gradle file directly and that saves a couple of screens. Also during the import a prompt comes up where you can deselect spring-aspects already. Thanks for the updates.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244369491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244375227", "body": "We have as much for copy+paste in the docs now https://github.com/spring-projects/spring-framework/blob/master/src/asciidoc/web-reactive.adoc#manual-bootstrapping. Perhaps we can add it in the Javadoc as well to make it easier to come across. It might even be easier to notice in the Javadoc vs a static start method that looks strange in the adapter. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244375227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245408887", "body": "@poutsma, overall the right changes with a couple of comments.\n\nFor the contentType parameter and the charset there should be a default charset property in AbstractView and also in ViewResolverSupport so it can be configured conveniently. The default value should probably be UTF-8 rather than ISO-8859-1 as we don't need to stick to Servlet defaults and even the Servlet spec is [discussing changes](https://java.net/projects/servlet-spec/lists/jsr369-experts/archive/2016-09/message/3).\n\nFor ModelAndView do we really need a builder? The current ModelAndView seems perfectly adequate with its constructors and chained methods. It results in shorter lines and there is no need for a build step. A couple of other smaller details are the ability to create a ModelAndView without a view which could come up if the method signature is ModelAndView but the controller returns conditionally with different outcomes. The second is the ability to add an attribute without specifying a name, i.e. relying on {{Conventions.getVariableName(attributeValue)}}. I think both of those are still relevant. In short I see no motivation to change much the present ModelAndView and the consistency wouldn't hurt.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245408887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245643293", "body": "Okay I understand much better now the motivation for the ModelAndView changes. \n\nAs we have been discussing offline, between generics (e.g. `ModelAndView<String>`, `ModelAndView<View>`) and the builder, the result is more tailored for use on the functional side and is much less convenient for use in annotated methods. The generics do bring benefits on the functional side for further composition but have no benefit on the annotations side. Also the builder seems like too much as opposed to:\n\n``` java\nreturn new ModelAndView(\"view\", \"foo\", \"bar\");\n```\n\nor more generally this (which could also be immutable):\n\n``` java\nreturn new ModelAndView(\"view\", new ModelMap(\"foo\", \"bar\").addAttribute(\"baz\", \"qux\"));\n```\n\nPerhaps on the functional side we don't have to stick to ModelAndView and use some alternative terminology along the lines of \"render\", \"template\", or other that fits well next to the other methods in the BodyBuilder of Response.\n\n> Couldn't that use case be supported by just returning a model from the controller? I know that we had this variant in ModelAndView before, but I believe that was done mostly to facilitate the inheritance-based MVC, where every Controller had to return ModelAndView.\n\nModelAndView could still be preferred in the method signature as the return type but the method could return without a view name (e.g. after validation failure) or with both ModelAndView on redirect providing a fresh model. In any case if it is possible to return no view at all in general, then no reason for ModelAndView to be more restrictive.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245643293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245753897", "body": "@poutsma why does \"hints\" not work? They are indeed additional input or ques (basically hints) to aid with the encoding or decoding. I realize this is now quite subjective but for me properties and also attributes carry additional connotations (Encoder/Decoder Java properties, or context state for attributes as Brian alluded to) that make them less than ideal.\n\nBeyond the naming, I think the first two commits make perfect sense as part of this PR. The additional two commits should have a separate PR, ticket, and merit a separate discussion. After all SPR-14557 is merely about refactoring how hints are passed in. I will add more of the general concern I have around the body advice under SPR-14557.\n\nAs for the actual refactoring, looks good overall but do we really need the default methods on Encoder, Decoder, HttpMessageReader, and HttpMessageWriter? The number of methods in each of these contracts have now doubled making them much less readable. I can appreciate the trade-off with convenience on highly visible API types but these are internal SPI types primarily used by the framework, or potentially other frameworks. It really isn't a big deal to pass hints always even as an empty map. It happens in very few places.\n\nI would also question if we need the methods exposing the supported hints on those same contracts. The constants on individual encoders/decoders communicate the hints well and I doubt there is a need for programmatic checks, or at least I would wait for specific use cases before adding them.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245753897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245898729", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245898729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246985863", "body": "This looks simple enough but for JSONP and for HTTP ranges (very likely) we'll also need access to the request. At that point however it is no longer symmetric between client and server and only applies to the server.\n\nPerhaps a variation on this PR could be a `ServerHttpMessageWriter` that extends `HttpMessageWriter` and has the extra method to resolve hints? On the implementation side it would be one or more hint resolving wrappers (e.g. JsonView, JSONP, etc) in the end delegating the actual writing to the target, underlying `HttpMessageWriter` (e.g. the one with the Jackson2JsonEncoder). \n\nThis would allow all places to still accept an `HttpMessageWriter` but at writing time also check if they're an instance of `ServerHttpMessageWriter`. We can automatically add the wrappers on startup in the `WebReactiveConfiguration` and there is no need for an additional configuration option. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246985863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247130155", "body": "Thanks @poutsma. This is better but on further through I have concerns still. \n\nThe Javadoc on `ServletServerHttpRequest.getPath()` now properly explains that it removes the contextPath. Yet it's inconsistent, if only a nuisance but also potentially problematic, to discover that `request.getPath()` looks like a shortcut for `request.getUri().getPath()` but isn't. It could also be misleading in a more subtle way too considering that `URI.getPath()` returns a decoded path whereas we use `getRawPath` internally.\n\nWhat do you think about adding a `getContextPath` method to `ServerHttpRequest` instead? It would expose any contextPath at which the application may be installed at the HTTP runtime level which for non-Servlet containers would typically return an empty string but who knows may be one of the other runtimes (even Reactor Netty or RxNetty) may eventually support a contextPath themselves. Then `HttpRequestPathHelper` would use this method in its `getLookupPathForRequest` implementation to leave out the `ServerHttpRequest` contextPath.\n\nIf and when we do introduce our own concept of a contextPath within Spring Web Reactive (i.e. multiple apps at separate context paths) by definition that would have to be managed above the `HttpHandler` level. At that time `ServerWebExchange` would probably have a `getContextPath` method that incorporates the contextPath we manage plus any that might come from the HTTP runtime.\n\nI think that would be transparent and flexible enough vs the only other feasible alternative I can think of to completely remove the Servlet container's contextPath from the URI and add an `X-Forwaded-Prefix` header. We would eventually be forced to look up the very `X-Forwarded-Prefix` header we created in order to create a proper externally facing link. Why hide it when we know we will need it in the same JVM?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247130155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247133075", "body": "This is now merged, thanks @poutsma!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247133075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247137298", "body": "@violetagg regarding the logging and handling of error signals in the HttpHandler adapters (like `ServletHttpHandlerAdapter` and `UndertowHttpHandlerAdapter`), it's true that won't ever be used if an `ExceptionHandlingWebHandler` is installed which is the case by default with the `WebHttpHandlerBuilder`. However in theory one may not use that builder or may install other exception handlers and so the presence of `ExceptionHandlingWebHandler` is not 100% guaranteed.\n\nUnless there is an issue with keeping that logic in place as a stop-gap measure, also at ERROR level since it really should not happen, I would even add go as far as adding similar logging and 500 response status to the adapters for Reactor and RxNetty, so we have consistent behavior across runtimes in case no application level exception handling logic deals with the error.\n\nWDYT?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247137298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247215921", "body": "In addition to moving to spring-web I see two more things to improve. \n\nThere is no way to apply more than one of these (e.g. JsonView + JSONP). Perhaps instead of extending `DecoderHttpMessageWriter` we should have an `AbstractServerHttpMessageWriter` that delegates to another `HttpMessageWriter`. And if the delegate happens to be an `ServerHttpMessageWriter` it would allow the delegate to also add hints.\n\nTwo this doesn't yet cover the case of the `HttpMessageWriterView` which is a `View` that writes through an `HttpMessageWriter`. This would have been relatively simple to do until recently after the change to `View` to accept a `Map` rather than `HandlerResult`. @poutsma not sure what the answer is. On a first thought perhaps a `HandlerResultView` extension of `View` with a method that accepts `HandlerResult` instead of just a model? So the `ViewResolutionResultHandler` can then check and prefer to invoke the render with a `HandlerResult` if available. We need some way to pass the extra information when it is available.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247215921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247334678", "body": "> To be honest, I never really understood the need for the `HttpMessageWriterView` in the first place, but perhaps I am missing something. What does it do that a @ResponseBody cannot do?\n\nComparable to what `MappingJackson2JsonView` or `MarshallingView` do by delegating to any `HttpMessageWriter`. So if you have a controller method that typically renders an HTML template through view resolution, it can also get rendered as JSON or XML if the client requests it. Such a method would not be annotated with `@ResponseBody`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247334678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247353377", "body": "Thanks. Fine by me to do it here. Minor in terms of changes and very closely related.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247353377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247358683", "body": "Should we have a default implementation of `getServletMappings()` to return \"/\"? That should be good enough for the common case.\n\nAside from that looks good to me!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247358683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247375899", "body": "Only one minor comment about on ResourceUtils. Aside from that looks very good and once the `ServerHttpMessageWriter` is in place it will be even more encapsulated and re-usable from both the `ResourceWebHandler` and for `ResponseBody` methods. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247375899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247491437", "body": "Here is my reasoning against consistency in that regard.\n\nOn the reactive side, the Servlet API and its configuration model are not front and center. The Servlet runtime is the main thing of interest. In order to run on it you need `ServletHttpHandlerAdapter` to adapt to Reactive Streams, no more no less. Having other Servlets should be an exceptional situation rather than a means of solving common scenarios. Perhaps this will be easier to see in hindsight once we expose equivalent means (support for context paths at least) on the reactive side.\n\nAnother motivation for my comment is to keep things simple in the path. Similar to the discussion around the Servlet contextPath in #1174, dealing with Servlet mappings \"underneath\", yet not exposed in the programming model would probably make things even more challenging. Especially since there is no API to introspect the current Servlet mapping for a request. \n\nI would even consider switching from `String[]` to just `String` for a single, prefix-based,  optional Servlet mapping. We could then have the option to explicitly set a property on `ServletHttpHandlerAdapter` from the ServletContextInitializer to let it know how it is mapped.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247491437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247491970", "body": "This looks good now @sdeleuze. For the `HttpMessageWriterView` the compromise might use the model to pass the return type as we did previously.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247491970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247652267", "body": "Merged!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247652267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247696525", "body": "This is now merged in. Thank!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247696525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247898140", "body": "@sdeleuze in light of @bclozel's comment I'd like to propose something I was already thinking about. Instead of `ServerHttpMessageWriter` having a method to prepare hints, it should have a method to write except taking all the inputs that are available on the server side (e.g. the type of the stream, the ServerHttpRequest and ServerHttpResponse). It can then prepare hints and delegate to the next writer, or compose on the input/output stream, set the status, short-circuit the process, and so on. Depending on whether the next writer is also ServerHttpMessageWriter or not it can invoke it accordingly. Of course the same goes for the reader.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247898140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247983652", "body": "Well I'm not suggesting it because of the Resource use case alone. I was independently thinking of making this suggestion. Plus we are not talking about a major change to what's already in place that we are comfortable with. I'm simply suggesting to replace `resolveHints` with a `write`, so pretty much the same story but a little more control. \n\nIf we accept that an `HttpMessageWriter` is intentionally limited to what is relevant to both client and server and that a `ServerHttpMessageWriter` is what `HttpMessageWrite` could be if we could pass to it the input available on the server side, then the contracts should be largely the same with a few extra inputs. In short I think resolvHints constrains things a little more than necessary, so you can only produce hints given server-side inputs, and I don't see a strong reason for that. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247983652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248003922", "body": "@sdeleuze yes that's what I was thinking about.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248003922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248084962", "body": "Looks good to me, even a bit simpler with hints now prepared and managed internally.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248084962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248175355", "body": "I fixed this a little differently by adding the proper null checks. Normally if the PathMatchConfigurer is used we do want to the provided PathMatcher of PathHelper instances to be used throughout like for example. So the fix matches similar code for the `requestMappingHandlerMapping` bean. Thanks for catching this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248175355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248710629", "body": "This is now merged, thEnks :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248710629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249633497", "body": "I'm closing this PR for now. As per comments on the ticket in JIRA this would most certainly be implemented differently, possibly with some meaningful constraints.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249633497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250581916", "body": "@sdeleuze some initial comments.\n- I don't think the two cors packages (servlet and reactive) need to be co-located. I haven't checked for package cycles but the dependency from the `web.cors` on `web.server` is a bit bothersome. We did not have `web.server` before the reactive support. I'd be in favor of just having `web.cors.reactive` become `web.server.cors` where it fits better with the reactive support.\n- For consistency I would prefer that both `CorsConfigurationSource` and `CorsProcessor` take `ServerWebExchange` even if at present we may be able to get by.\n- The `Mono<Boolean>` return value on `CorsProcessor` is quite surprising. It seems to come down to the `writeWith(Mono.empty()` at the end (shouldn't that be `setComplete()` btw?) I would rather see the `CorsProcessor` only updating headers and returning a plain `boolean` leaving it to the caller to call `setComplete`.\n- As a follow-up on the last point, shouldn't `AbstractHandlerMapping` be checking the return value from `processRequest` and returning a NoOpHandler if the CORS check failed?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250581916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250773751", "body": "On second thought maybe `web.cors.reactive` is the way it should be with `web.server` being a low level package mostly depending on `web.http` and other packages under `web` (e.g. cors, bind, etc) in turn depending on `web.server`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250773751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251197695", "body": "@sdeleuze yes. Might as well also change from debug to error in the various HTTP handler adapters (e.g. ReactorHttpHandlerAdapter), see https://github.com/spring-projects/spring-framework/commit/b2ccdfbc9e112e48f001b0dffa1280e6e7fe7122, which would be invoked only in case the ExceptionHandlingWebHandler is not in use. It would be rare but possible.\n\nAlso PR #1187 is for the same request as this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251197695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252782808", "body": "I've processed the PR applying some improvements such as re-ordering of fields and methods, test improvements, and I've also created a `getHandler` method at the `AbstractHandlerMapping` level that drives the CORS checks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252782808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252926664", "body": "Indeed the Resource description does not overcome the issue for some Resource implementations like `ServletContextResource` for example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252926664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253630752", "body": "This is now merged, thanks! Note that I've applied an extra commit with minor, style-related changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253630752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253870460", "body": "@DevWantJustHaveFun as of 4.3 we have built-in support for HTTP HEAD and OPTIONS so that any GET mapped method should also support HEAD with no extra code. I'm wondering what your case is? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253870460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253909250", "body": "@sdeleuze, apologies for suggesting it but ServerHttpRequest doesn't seem like the right level for exposing multipart support. Having MultipartResolver take ServerHttpRequest as input is already an indication that it's a higher level concern. Then MultipartResolver has to be injected into every request implementation, which is rather repetitive and artificial since it doesn't benefit from being in every request implementation. It's also a cyclical dependency even at the package level since the http package is logically at a level below the web package and should not depend on anything from it.\n\nAs it looks currently it's a better fit exposing it in ServerWebExchange. To avoid a circular dependency there once again, MultipartResolver and Part should be in the server package with maybe a server.multipart sub-package for implementations. For initialization MultipartResolver could be a field of HttpWebHandlerAdapter and then passed into ServerWebExchange instances. Very similar to WebSessionManager and WebSession.\n\nFor the caching, the cache operator should really be called at construction time or otherwise concurrent calls to getParts can each create a separate pipeline. See how DefaultWebExchange does it for WebSession and also note that DefaultWebSession uses the defer operator to ensure it doesn't do anything at the time of declaring the pipeline.\n\nWhen the request is not multipart could we be more lenient and return an empty stream from getParts and a Mono with empty map from getAllParts perhaps? It flips the model from having to call isMultipartRequest first to being able to call getParts and getAllParts without error or side effect and optionally checking isMultipartRequest first if you have to.\n\nDo we need Part.getContentType if we have getHeaders? Just thinking there are plenty of methods on part already? \n\nI'm still not entirely sure how a JSON multipart would work out? Would it be a call to getValue() or getContent()? The underlying library seems to split the callbacks that way, but I'm not sure what it would do if there is no filename but there is a non-text/plain content-type.\n\nI haven't looked into the implementation library but I presume it is non-blocking indeed? It seems to be returning java.io.InputStream.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253909250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253914076", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253914076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253922318", "body": "This has been merged. Thanks for the PR! \n\nNote I've updated the getBodyAsString to use the charset of the response content-type (if present) or otherwise fall back on UTF-8.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253922318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253932585", "body": "@bclozel, I've merged the PR. I made some improvements in the WebReactiveConfigurerComposite to streamline the delegation to WebReactiveConfigurer to pre-create custom bean instances. And also applied some polish. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253932585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254199408", "body": "This will work:\n\n``` java\n@GetMapping(\"/ping\")\npublic void ping()\n{\n// pong ....\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254199408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254229419", "body": "> With my solution if you call the endpoint with a GET method you will get an error 405 \"Method Not Allowed\" but not with the @GetMapping, for me it's look better because my \"ping\" method should be used only with \"HEAD\"\n\nI think that only points to the fact that HTTP HEAD is perhaps not used for what it's intended to do. The definition of HEAD is that it behaves exactly like GET minus the body. So I would ask why not use HTTP GET for the ping to begin with?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254229419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254627290", "body": "Okay, I'm not too sure what you mean with the HttpMessageReader based capabilities. I would think that Part should only expose basic ways of getting to the data, but once you've updated the PR maybe it will be more clear.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254627290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254904231", "body": "This has been merged. I've expanded on the commit message a bit to reflect the background.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254904231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254932401", "body": "This is now merged after some minor polish. \n\nOne thing to note in particular to check is CorsConfiguration used to say (on its constructor and type-level) that it does not allow any requests except for GET and HEAD. However as far as I can see no cross-origin requests will be allowed at all as long as origins is set to null. So I have updated that to say so.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254932401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255477752", "body": "@bclozel have a look from a Spring Boot perspective.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255477752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255628475", "body": "@rwinch, take a look at this PR. While it's easy to apply your own wrapper, e.g. for https://jira.spring.io/browse/SPR-14680, the idea here is to provide first-class API for mutating the ServerWebExchange.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255628475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256760537", "body": "Why don't you split the form reader/writer in a separate PR that can go through and give the multipart writer a little more time to figure out a better approach. It could be that we need to take a step back from how the Spring MVC converter does it. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256760537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256960996", "body": "This is now in master. Comments still welcome for further changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256960996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256994347", "body": "This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256994347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257384821", "body": "This is now merged into master. \n\n@bclozel I discussed briefly with Phil and Juergen, let's go with this for now and see where it takes us. I did a quick test with Boot app. I suspect it now picks up the DispatcherHandler bean that we declare in WebReactiveConfigurationSupport. Beyond that it would be up to the Boot reactive starter to use the `WebHttpHandler#applicationContext` method. Either way I didn't run into any issues. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257384821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258163650", "body": "Thanks @bclozel, good to have the update.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258163650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258867902", "body": "Sorry for the delay. A few last tweaks. Let's make ContentDisposition a top-level type like HttpMethod, MediaType, HttpRange. The parse logic can then be a static method in Content-Disposition following the same pattern as HttpRange. Similarly the setContentDisposition should take a ContentDisposition and the actual logic to format to a String can be in ContentDisposition, again like HttpRange. In other words let's encapsulate all the Content-Disposition related logic inside `ContentDisposition` and HttpHeaders will simply delegate to it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258867902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258928710", "body": "Okay, feel free to commit straight to master after those changes. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258928710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260464697", "body": "What is the motivation is for the extra transport? The choice of the current transports is by design and not because others could not be added.\n\nThe JavaScript https://github.com/sockjs/sockjs-client has many transports in order to cover a wide range of browsers. The EventSource transport happens to be used in a very small set of specific use cases as shown in [this table](https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https). Typically others are preferred.\n\nOutside the browser, browser compatibility is not a concern and it's mainly about having an HTTP streaming option as a WebSocket alternative (e.g. if not supported or disabled on the server side, which the SockJS protocol allows through the /info request) and also an HTTP long polling option in case HTTP streaming is prevented by network proxies.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260464697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262406311", "body": "@sdeleuze overall looks good. \r\n\r\nA few comments with hindsight in mind on an all new RedirectView. Starting with the overloaded constructors designed to be one liners in controller methods, perhaps we could replace those with a builder? Not sure if we even need the default constructor \"for use as a bean\" since what's typically configured in Spring configuration is the UrlBasedViewResolver.\r\n\r\nOn that note, the present Servlet-based UrlBasedViewResolver exposes all (or most?) properties that RedirectView has so that it can pass them each time it creates a RedirectView instance at runtime. At present I see only redirectStatusCode and redirectHosts on the reactive equivalent. Indeed I'm not a fan of replicating so many properties myself. Perhaps we can think of a better mechanism like a property accepting a `java.util.function.Function<String, RedirectView>`?\r\n\r\nFor exposeModelAttributes let's skip that part altogether including appendQueryProperties and related methods. The automatic appending of attributes to the query has been a long standing source of issues and one of two primary reasons for RedirectAttributes (flash attributes is the other). Instead we can make expandUriTemplateVariables the primary way of appending to the query on a redirect. It's simple, expressive, and explicit. \r\n\r\nFor the ServletBasedRedirectUrlEncoder this is raising a good point for SPR-14529 that the solution for URL-rewriting should probably be at the ServerHttpResponse level and allow any such underlying runtime mechanism to also be included. This is what we did for contextPath support on ServerHttpRequest. So feel free to leave this part out for now and @Ignore any tests related to it.\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262406311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262594959", "body": "This is now merged. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262594959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264060130", "body": "This is now merged. Thanks!\r\n\r\nNote that I refactored the ReactorNettyTcpClient input a bit introducing a simple ReactorNettyCodec to hold the encoding and decoding delegates. Effectively that replaces the MessageHandlerConfiguration with the Scheduler now always created internally.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264060130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264319171", "body": "@sdeleuze I'm wondering why the Jackson2JsonEncoder has to check a hint from ServerSentEventHttpMessageWriter? Couldn't it work like it's done in the AbstractJackson2HttpMessageConverter by checking the content type of the response? If that hint is removed essentially the Jackson encoder and converter have independent, built-in support to pretty print SSE data correctly which is a good place to be.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264319171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264557253", "body": "Yes", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264557253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264567423", "body": "This is now merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264567423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264567474", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264567474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264589684", "body": "It looks like ServerSentEventMessageWriter passes application/json when it delegates to the Jacson encoder. I'm not sure that should be so actually. It's probably okay for locating the encoder but the content type of the response is text/event-stream after all. Would it cause an issue to pass text/event-stream? ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264589684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264591344", "body": "Could we go without the STOMP codec registration? I had the impression you were okay with the latest results?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264591344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265501868", "body": "One could ask then if the JacksonEncoder supports \"text/event-stream\" but it's more like it's the ServerSentEventMessageWriter that supports it and delegates to other encoders. So the JacksonEncoder still only knows how to render JSON but it is also aware that's happening in the context of an SSE response. \r\n\r\nInterestingly if JacksonEncoder was in spring-core where it could be shared with non-web modules, it would be harder or not possible to do this. Having a JacksonEncoder in spring-web is paying off and it's okay to make it aware of a hint from ServerSentEventMessageWriter, which is in the codec package above. \r\n\r\nIn short I'm okay with this. I would only change the hint to be more broadly about indicating that encoding is happening in the context of an SSE response -- something like SSE_CONTENT_HINT and in the Javadoc the \"data:\" prefixing is just an example of what the hint can be used for.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265501868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265599400", "body": "This is now merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265599400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265599621", "body": "This is now merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265599621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265787098", "body": "This is now merged and backported to 4.3.x. \r\n\r\nNote that I've added synchronization around the cache updates and an additional access-only cache map since the LinkedHashMap cannot be accessed and updated concurrently.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265787098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266864466", "body": "This is now merged in master and is also backported to 4.3.x. \r\n\r\nNote that I've removed the overloaded methods taking a charset. A URI is expected to be UTF-8 encoded to begin with. More importantly the query string cannot be parsed reliably after decoding for example if the parameter name or value contains a reserved char like \"=\" or \"&\" it would change the result of the parsing. It's just fine to match the encoded values consistent with the remaining methods in the same class. No other request component has 4 overloaded methods and certainly query parameters aren't the most important one.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266864466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267135352", "body": "This is merged. Note that I found a completion listener on HttpServerExchange and replaced the close method with that.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267135352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267486508", "body": "This is now merged. Thanks Rob!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267486508/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268815915", "body": "We can't simply switch the charset here. Can you please create a ticket in JIRA and provide motivation and example for the case? Keep in mind this is spec recommended, see https://tools.ietf.org/html/rfc7578#section-4.2.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268815915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268816785", "body": "I see now you commented under https://jira.spring.io/browse/SPR-14503.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268816785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268847210", "body": "I have added a detailed comment under https://jira.spring.io/browse/SPR-14503. Let's continue the discussion there. In the meantime I am going to close this PR since whatever the outcome a fix is unlikely to be implemented this way.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268847210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273196572", "body": "This is now merged, thanks for the fix!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273196572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273198420", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273198420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273244185", "body": "This is merged, thanks for the report and pull request. \r\n\r\nNote that I've added an integration test as well and fixed the resulting issues. Also I replaced the use of `URLDecoder` which is not really for urls despite its name (see Javadoc) and replaced it with `UriUtils` which is what we commonly use.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273244185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274987016", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274987016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275379083", "body": "This is now merged. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275379083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275494756", "body": "> I'm not a total expert on all the interconnected elements here but the comment reminds me of my first pass at the matching where instead of a set of distinct parsed path objects, there was one tree structure built from parsing all paths\r\n\r\nThis is very much the way I think of what Brian did with the registry of patterns. One component to keep all patterns and return the sorted matches for a request. So once they're in one place using some tree representation for better performance makes perfect sense.\r\n\r\nThe `SimpleUrlHandlerMapping` is naturally suited for this approach because it already has a handler map with all patterns in once place.\r\n\r\nThe `RequestMappingHandlerMapping` on the other hand maintains a logical set of `RequestMappingInfo` instances, one for each `@RequestMapping` method, and we are currently matching each info individually because the match involves checking multiple patterns and other conditions per annotation. It wouldn't be hard to build a single registry of all patterns across all controller methods. Then we can perform a lookup across all patterns first and that will significantly narrow the  set of infos that need to be matched individually. Currently we actually [do something very similar](https://github.com/spring-projects/spring-framework/blob/944d17f23773d179b1d788507e8d27ad26777d71/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java#L307-L314) with a map of non-pattern URLs so we can perform a \"direct lookup\" first and only then fall back on matching every info. Of course a lot of mappings tend to use URI variables and that direct URL lookup has some value but doesn't go far enough. Effectively the pattern-based, tree mechanism is the prefect replacement for the direct URL lookup.\r\n\r\n> it could grow from the current design into the tree structure, if we went in this direction.\r\n\r\nI wouldn't worry much about matching to this PR. If you create such a component it's easy to incorporate and redo this PR.\r\n\r\nThanks Andy!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275494756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275518116", "body": "Brian's changes are a sketch only at this point but they show precisely what parts need to be touched and it all looks very manageable. We now understand the problem quite well. We just need to make up our minds what APIs exactly to expose for configuration purposes and the SPIs for consumption within the framework.\r\n\r\n> Personally I'd probably not rework this PR (my part of it) right now..\r\n\r\nWe can work towards having a registry with all patterns with the understanding that further optimizations may be possible later. In other words I agree it makes sense to leave that as a later concern.\r\n\r\nRegarding compatibility with existing Spring MVC, we are going to continue to support the existing `AntPathMatcher` of course but should also work towards bringing the same performance benefits when a `PathPatternParser` is configured as the `PathMatcher`. We'll have to see but I have a sense that will be doable with a little extra code and well worth the effort. Clearly on the reactive side we are not bound to and unlikely to keep using the `PathMatcher` contract.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275518116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275862571", "body": "Thanks I have opted for a slightly different fix focusing specifically on the area that introduced the issue, i.e. preserving the trailing slash after parsing the path of a URI template.\r\n\r\nThe empty path segment approach unfortunately would be inconsistent with how empty path segments are treated in other parts, i.e. when not at the end. For example in UriComponentsBuilderTests, the test `pathSegmentsSomeEmpty`. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275862571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/276124449", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/276124449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277105651", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277105651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278335992", "body": "Hm looking at the implementation how is the browser supposed to pass the method? In the Servlet filter it's based on a form field (i.e. request parameter). In the current implementation it's checking a request attribute but I don't see what's supposed to set it? \r\n\r\nNote that the ServerWebExchange does offer access to \"requestParams\" which requires parsing the request body but that will be then cached, i.e. it works just like in the Servlet API.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278335992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278475262", "body": "Merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278475262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279714495", "body": "The WebTestClient is just executing WebClient against a RouterFunction with MockServerHttpRequest and Response. That's as transparent as it gets. I see no reason why that shouldn't be the preferred way to begin with.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279714495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284509113", "body": "Closing for now (see discussion under JIRA ticket).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284509113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284835015", "body": "Thanks for the pull request.\r\n\r\nThe problem is that RFC 6570 provides very rich syntax that goes way beyond what `UriTemplate`  supports and takes a different approach to expanding and encoding. It's comparable to what is described as level 1 in the RFC.\r\n\r\nI think we should just drop the link and explain in simple terms what a URI template with an example or two and optionally provide a note on RFC 6570.\r\n\r\nA little [more background here](https://jira.spring.io/browse/SPR-12942?focusedCommentId=115649&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-115649).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284835015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286883544", "body": "This is now in with a slight deviation promoting `CompositeHttpHandler` to a public class and also calling it `ContextPathCompositeHandler`. I prefer to make that more explicit and the slightly reduced convenience doesn't have much impact at this very low level of abstraction. Instead I've overhauled the Javadoc on [HttpHandler](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/reactive/HttpHandler.java) and [ContextPathCompositeHandler](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java) which should server better for discoverability and orientation.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286883544/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288088616", "body": "I've processed the PR to avoid further merge conflicts. \r\n\r\nThat said we do need an alternative to the deprecated `usefJaf` property starting with `ContentNegotiationManagerFactoryBean` and `RequestedContentTypeResolverBuilder` and then all the places it was propagated to. This property serves an important purpose in allowing automatic lookups of extensions to be suppressed in favor of using only explicitly registered extensions. This can be a source of security issues.\r\n\r\nWe should also consider some improvement to `MediaTypeFactory#getMediaType(Resource)` which in all places where it's used it's then followed up with fallback on application/octet-stream. Perhaps `getMediaTypeOrDefault` or return an `Optional`.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288088616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288116542", "body": "Okay thanks for the review!\r\n\r\nI guess those names aren't new but I do see your point. Especially since the last commit switched to using `ServerHttpMessageWriter` but only for annotated controllers. The functional side uses code shared with the client (`BodyInserter` and `BodyExtractor`) and it's currently not feasible. Perhaps something to revisit, I've created https://jira.spring.io/browse/SPR-15370 for that.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288116542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288390874", "body": "hi what's the rational for the change? Having the RestTemplate used in some WebFlux tests at least is actually a good test. What client is used should not matter.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288390874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288460690", "body": "Okay I see. Yes there is `WebClientIntegrationTests` for example. If you're missing anything in particular as an example perhaps you can suggest such a test there?\r\n\r\nAs for the `RestTemplate` many tests use it simply because we started out with server support. After `WebClient` was added we considered re-writing tests but did not do that since it is a good idea to have a mix. The RestTemplate uses a different HTTP library underneath and we want tests to verify that works too.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288460690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289040256", "body": "@poutsma do you have any opinion either way since this is in `PublisherHandlerFunctionIntegrationTests`? Perhaps we should have some dedicated tests with `WebClient` and `RouterFunction` on the server side somewhere. The tests here seem rather straight forward, not sure the change is useful from a testing perspective but possibly the `WebClientIntegrationTests` could have mix of different server endpoints.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289040256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289134186", "body": "@jonathanborenstein, thanks for trying out the new features but this is isn't a discussion forum. For further learning please take a look at the documentation on the functional web framework [in progress](https://github.com/spring-projects/spring-framework/blob/master/src/asciidoc/web-flux-functional.adoc) and also the [list of examples](http://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#web-reactive-getting-started-examples).\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289134186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289565119", "body": "I've updated the docs as mentioned. Thanks for the suggestion and pull request.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289565119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289578637", "body": "Generally I like the idea but for the implementation, first `PreferredContentNegotiationStrategy` should not extend `HeaderContentNegotiationStrategy` only to check if anything has been requested. The strategies are meant to not be aware of each other. The `ContentNegotiationManager` delegates to each at a time and checks if each strategy returned anything other than `*/*`. \r\n\r\nSecond I'd prefer for `defaultContentType` and `FixedContentNegotiationStrategy` to be enhanced rather than introducing a new kind of strategy. The former would become `defaultContentType(MediaType...)` and latter would accept a `List<MediaType>`. You would have to insert \"*/*\" at the end of the list yourself but I think that's a trivial requirement without adding more options.\r\n \r\nIf you'd like to update the PR let me know. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289578637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290144287", "body": "I have further split the second commit into two separating out the request body from the response body changes. The former is already in master https://github.com/spring-projects/spring-framework/commit/118f33aedad84e9f8a01e4db983545d18fdd1fc3.\r\n\r\nI am closing this PR but will separately ping you about the remaining changes which I have in a branch.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290144287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291609548", "body": "The change is merged with some minor polish in a follow-up commit. Please have a look, hopefully didn't break anything inadvertently. \r\n\r\nWhat I'm also wondering is whether the issue can occur the other way around. In other words for the `onError` signal from the `ResponseAsyncListener` to reach the `HandlerResultSubscriber`, which also completes the `AsyncContext`, first. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291609548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291621629", "body": "Okay thanks, I'll combine then `HandlerResultSubscriber` and `TIMEOUT_LISTENER` into one so they can share these checks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291621629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291623203", "body": "Okay should be fixed now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291623203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292203713", "body": "@akarnokd, first of all thanks for taking the time!\r\n\r\nThe simplifications around signal related fields make sense.\r\n\r\nFor `onTimeout` it comes from the underlying runtime (Tomcat, Jetty, etc) after a period of inactivity, completely independent thread from the `Publisher`. I did have have a \"pretend onComplete\" at one point but if we don't handle the timeout in the callback the Servlet container takes action and it's not the desired outcome. [ResponseBodyEmitter](https://github.com/spring-projects/spring-framework/blob/702e01ad52c308a2a3197a589b4b83db01ed86fb/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java#L189) is synchronized so it should be fine to call `terminate()` I think.\r\n\r\nFor the `send` method crashing [it cleans up](https://github.com/spring-projects/spring-framework/blob/702e01ad52c308a2a3197a589b4b83db01ed86fb/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java#L166-L176) internally so we don't have to.\r\n\r\nAny pointers on why the CAS+set may not be enough? Curious to learn more..\r\n\r\nCouple more questions on the `run` method. It orders error signal checking ahead of getting the item but complete signal is after. It seems like this can re-order error and item signals if onError arrives just when run starts processing an item signal? Why re-order? Also at the end it calls the `taskExecutor` directly, wouldn't it make sense to call `trySchedule` after decrementing since that has the added try-catch protection around successful task submission?\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292203713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292207118", "body": "Another thought on `onTimeout` -- since pretty much any outcome of `run` requires obtaining delegating to and hence synchronization on `ResponseBodyEmitter`, I could protect the entire `run` with `synchronized(emitter){ ... }` and that would properly guard against `onTimeout` completing at the same time without any extra cost to what is already the case.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292207118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292237029", "body": "Thanks! This is now merged. \r\n\r\n> Isn't ResponseBodyEmitter already synchronized on its methods?\r\n\r\nYes, `send` could raise an ISE if the emitter was completed but `run` would catch it and since `subscription.cancel()` should be idempotent, no harm done in calling `terminate()` again.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292237029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292257979", "body": "Oops, good point! I added a comment so that doesn't get \"lost\" accidentally again.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292257979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292664795", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292664795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293309573", "body": "I've applied this to master with some minor updates to preserve existing methods accepting a single MediaType. Thanks for the PR and update!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293309573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298397738", "body": "This is now in master.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298397738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298428528", "body": "I believe some of this intentional, i.e. lambda used only for functional interfaces.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298428528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298428937", "body": "Also note that multipart support is undergoing review with polish and refactoring throughout. It might be best to withdraw those parts from this PR.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298428937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298437692", "body": "Thanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298437692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298633018", "body": "The problem with this solution is that syntax such as `foo[bar]` or even `foo[1][bar]` indicates a map index in JavaBeans conventions where `\"bar\"` is the map key. So this fix effectively replaces that with a different interpretation. I have not run the tests to see but this will certainly cause regressions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298633018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298642053", "body": "Thanks for the pull request. How about not using another regex here and instead handle it as we do `\"X-Forwarded-Host\"` just a few lines below?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298642053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298760176", "body": "This is now merged with a shared method for the duplicated code. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298760176/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298970166", "body": "> foo[bar] will be ok, but foo['bar'] or foo[\"bar\"] will not be ok.\r\n\r\nNo, all of the above will not be ok:\r\n\r\n````java\r\nMockHttpServletRequest request = new MockHttpServletRequest();\r\nrequest.addParameter(\"myMap[foo1]\", \"bar1\");\r\nrequest.addParameter(\"myMap['foo2']\", \"bar2\");\r\nrequest.addParameter(\"myMap[\\\"foo3\\\"]\", \"bar3\");\r\n\r\nMyBean target = new MyBean();\r\nWebRequestDataBinder binder = new WebRequestDataBinder(target);\r\nbinder.bind(new ServletWebRequest(request));\r\n\r\nassertEquals(\"bar1\", target.getMyMap().get(\"foo1\"));\r\nassertEquals(\"bar2\", target.getMyMap().get(\"foo2\"));\r\nassertEquals(\"bar3\", target.getMyMap().get(\"foo3\"));\r\n````\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298970166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301469682", "body": "Perhaps a code comment to explain where 10 comes from? In other words > than annotated controller methods (0) but < than static resource (lowest priority - 1).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301469682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302789556", "body": "This is now merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302789556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302812044", "body": "This is now merged. Thanks for the pull request!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302812044/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303156802", "body": "This evolved from https://jira.spring.io/browse/SPR-15529 to https://jira.spring.io/browse/SPR-15560 and where the actual issue was not the duplicate slash but a bug in how `ReactorServerHttpRequest` created the URI. So this can be closed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303156802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304050927", "body": "This is now merged in the 4.3.x branch, thanks! \r\n\r\nAlso please check and follow [the guidelines](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#format-commit-messages) for commit messages.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304050927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304637411", "body": "This has already been merged against 4.3.x.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304637411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305012193", "body": "This is merged into master as a single commit. Thanks Gary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305012193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305288273", "body": "The commit is in master.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305288273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305363121", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305363121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305363660", "body": "Closing since SPR-15544 is already resolved.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305363660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305363953", "body": "SPR-15537 is now resolved.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305363953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305364611", "body": "@violetagg looks like we forgot this one. Can you confirm this is still relevant or has it been superseded by other changes? Thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305364611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305364817", "body": "@violetagg same here. We need to merge this still right?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305364817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305368671", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305368671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305369327", "body": "Sorry but I think you're missing the point. The syntax `foo[bar]` is used to bind to a field named \"foo\" of type Map which has a key called \"bar\". You cannot blindly regex that into `foo.bar`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305369327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305370628", "body": "The ResponseEntity static factory methods are for common responses. This PR adds many error codes that should be processed in a cross-cutting fashion and should not appear in many places. If you're producing a 500 error code from many different places I'd say you're probably doing something wrong.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305370628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305374259", "body": "Thanks I've merged this plus some minor polish.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305374259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305486820", "body": "It's a but subjective at this point but be it as it may those static methods were designed to provide shortcuts for the most common scenarios and avoiding a long list of every possible option. \r\n\r\nThere is no good reason I can see for having static methods for any error code since those should be handled from centralized places and hence the cost of an extra `.build()` doesn't justify seeing them all the time in ResponseEntity where what you do most often is something else.\r\n\r\nIn any case thanks for preparing a PR. In the future consider creating a ticket first to discuss.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305486820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305493534", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305493534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305493656", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305493656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306182953", "body": "I'm closing this PR since the commits look wrong. Please re-submit with correct commits. It's hard to tell what exactly happened. I would suggest starting on a fresh branch and try to cherry-pick the commits that you actually want to submit. \r\n\r\nAs a general comment don't worry too much about always rebasing on top of the latest in master. It is a moving target so there is bound to be some extra commits after yours, which is okay. We will rebase when processing the PR. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306182953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307416797", "body": "Merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307416797/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310521323", "body": "This is now merged, thanks! Note that I removed the use of `Ordered` since the registration is meant for internal use and shouldn't be public. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310521323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310764887", "body": "I went ahead and merged this into master since I needed it to [resolve an issue](https://jira.spring.io/browse/SPR-15674?focusedCommentId=152521&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-152521) after the latest `WebTestClient` changes. This was already discussed in any case and seems trivial enough of a change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310764887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311149474", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311149474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311163429", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311163429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311507800", "body": "Renamed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311507800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322461974", "body": "This is merged, thanks,", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322461974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322776107", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322776107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326682596", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326682596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327180772", "body": "I am taking a look. On a first impression I'm not sure I agree it is a bug. What puzzles me however is why wildcard behaves differently from Object.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327180772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327246025", "body": "@Buzzardo keep in mind the current WebFlux chapter was a temporary solution and is about to be replaced based on https://jira.spring.io/browse/SPR-15149. Given that there is probably not much value in editing it at this time.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327246025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327469630", "body": "> For use cases that requires Spring MVC dynamic type resolution based\r\non the concrete return value type, using the functional API which allows\r\nprogrammatic type resolution is the recommended way to use with WebFlux.\r\n\r\n@sdeleuze which functional API do you mean? I'm trying to picture how the Spring Boot 2.0 actuator endpoint infrastructure would do this.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327469630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327611137", "body": "> At some points we discussed the possibility of using the functional API with @snicoll for implementing Spring Boot 2.0 actuator but I think it was too much work to follow this path.\r\n\r\nFrom a pragmatic standpoint support for `ResponseEntity` with any Object is driven by a very specific requirement in Spring Boot so is withdrawing that capability doesn't seem like a real choice.\r\n\r\nIt shouldn't be hard to make those extra cases work. It would require changes to both `ResponseBodyResultHandler` and also `ResponseEntityResultHandler`.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327611137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328270990", "body": "Merged https://github.com/spring-projects/spring-framework/commit/c98e01ad1fb12ed791f4c09334b01f7d66e6be99.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328270990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328520809", "body": "The entire source file is modified to use spaces. Can you fix your pull request to use tabs (as it was before) so it is possible to see what actually changed?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328520809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328951489", "body": "Thanks @nertzy this is now merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328951489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332209251", "body": "I think it would be a good idea to explicitly mention in all those places in the javadoc that closing the connection is not needed if you use any methods that read the response body and that doing so cancels the benefits of connection pooling.\r\n\r\nAlso please add the same details in `WebClient#exchange` so we're covered in all 3 places.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332209251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332931260", "body": "Thanks, merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332931260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333272347", "body": "@Buzzardo I have to reject this PR in full due to unresolved merge conflicts in it. \r\n\r\nLooking at the history, both you and I worked on the same documentation extensively (since the 27th) and you ended up with lots of conflicts (i.e. changes to the exact same parts) by the time you sent the PR and you did not resolve them either. Please refrain from making changes while the documentation is actively being worked on. It is not ready for proofreading and making changes simultaneously leads to this situation.\r\n\r\nAlso keep in mind you should never submit a PR with merges to begin with. Either rebase on top of the latest before submitting your PR, or let the reviewer do that. That gives the reviewer maximum control, the ability to squash, rebase, and otherwise see the exact changes. In this case you have done a merge and I can't even squash the two commits into one. So I'm forced to review individual commits one by one.\r\n\r\nFor such extensive changes please refrain from making formatting changes (like the length of lines) in the same commit as other changes. It creates a lot of noise for the reviewer to try and separate what is real change and what is just a line length adjustment.\r\n\r\n\r\n\r\n \r\n\r\n \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333272347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341603147", "body": "Merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341603147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343310110", "body": "Thanks for the report and fix. This is now merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343310110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344764256", "body": "@violetagg the `WebSocketReceiverPublisher` sub-class has a `suspendReceiving` (and also `resumeReceiving` methods. The introduction of a `suspendReading` in the base class raises questions about how it relates to `suspendReceiving`? Can those be unified with a suspend/resume read protected methods in the base class?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344764256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344956527", "body": "I guess since the current change promotes a suspend concept to the base class, we need to decide if that should be shared with the WebSocket implementation or does it need to be in sub-classes only, and not in the base class. Let's come back to this soon after the 5.0.2. I've created a ticket to keep track of this https://jira.spring.io/browse/SPR-16207.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344956527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346239307", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346239307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346529985", "body": "I've done a more comprehensive update. Thanks for the PR.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346529985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347030758", "body": "I don't believe this is a valid issue because the path should have been sanitized at this point. If you believe there is an issue, please provide an actual example, including Spring MVC configuration.\r\n\r\nPlease do not respond here with further details. Instead report the issue in private via https://pivotal.io/security.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347030758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352440029", "body": "Not sure what your intent was but there are 0 files changed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352440029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352447503", "body": "The description \"Otherwise I have to...\" does not match the actual change. \r\n\r\nAs far as I can see the actual change creates an overloaded `withStatus` method that also takes body and contentType. However the expected syntax for that is `withStatus(...).body(..).conentType(..)`. \r\n\r\nIf you really want such a shortcut simply create your own static method and use it. I don't see a reason to add that to `MockRestResponseCreators` itself.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352447503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352500576", "body": "The methods provided in `MockRestResponseCreators` cover the most common scenarios. For anything else you still have a way, just no shortcut. Like I said it's trivial to create your own shortcut.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352500576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355635715", "body": "Thanks for the PR, but it is invalid. If you're trying to submit a fix against 4.3.x then you need to make the PR against the 4.3.x branch (not the master branch). In most cases you'll want to make changes against master, it is much easier that way, and we'll do the backport to 4.3.x if necessary. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355635715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356119122", "body": "Merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356119122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356426234", "body": "Merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356426234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357708742", "body": "This is now merged. Note I've removed a few more places where the class was used internally. I've also squashed your commits into one since they're too fine-grained otherwise (it's one logical change).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357708742/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357790410", "body": "Pick small ones initially, like this one here. Most feedback and discussions take place in the [issue tracker](http://jira.spring.io/browse/SPR) so keep an eye there. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357790410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358391591", "body": "It is a little more complicated. Request matching, verifying and counting must be done inside the synchronized block. I've done that with 0c289283ff4fab171b527b7f195639e7a950f470.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358391591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360298646", "body": "This has been merged with some minor polish. In the future you can squash such commits that logically represent one change. See our [contributing guidelines](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360298646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362695665", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362695665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363093005", "body": "@sdeleuze, it looks fine but a 5xx would now be logged twice at error level it seems. Perhaps the RSEH can skip logging 5xx errors, knowing that those will be logged in HWHA. It'd be useful to have a comment to that extent in the code to make it clear not logging the error is intentional.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363093005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363095174", "body": "I'm not sure how this one slipped through but the `AsyncRestTemplate` is deprecated in 5.0 in favor of `WebClient`, and we're not planning any more new features in 4.3.x. If you're on 5.0, I would highly recommend using the `WebClient` instead.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363095174/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363104386", "body": "@baynezy the PR is linked to an issue where you'll see that Juergen already commented.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363104386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363106969", "body": "Yes, you're right. Looks good :)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363106969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363108112", "body": "> However cannot seem to find spring-tx 4.3.13 source package.\r\n\r\nIt's under \"Releases\".", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363108112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363108816", "body": "@snicoll regarding the 4.3.13 sources question, I don't see any tags after 4.3.10. Any idea?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363108816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/530606", "body": "Hi Stefan, thanks for pointing out this issue. It is not fixed in trunk [cs=4869](https://fisheye.springsource.org/changelog/spring-framework?cs=4860).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/530606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2242270", "body": "The method is recursive and needs `Class<?>` as the return value. Other parts of the code that already rely getRawType, do generic array processing as a separate step externally. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2242270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3695948", "body": "this should be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3695948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4180135", "body": "I guess this would become less of an issue when 4.0.1 becomes available. If you submitted a PR it wouldn't hurt even when 4.0.1 becomes available. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4180135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4334499", "body": "Ah yes, the AlternativeJdkIdGenerator should be private. The interface however is public still for this reason:\nhttp://docs.spring.io/spring-integration/docs/3.0.0.BUILD-SNAPSHOT/reference/html/messaging-construction-chapter.html#message-id-generation\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4334499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4455882", "body": "unlikely, without adding support for encoding the username. do you have that case or just wondering?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4455882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4456899", "body": "okay thanks for the comment. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4456899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4576268", "body": "If the method returns a value and there is no `@SendTo` or there is one but without a value, then the destination of the incoming message is used with a default prefix of \"/topic\". This way a client can send a message, have it processed, and then broadcast it -- i.e. the client sends message to \"/app/foo\", the method is mapped to \"/foo\" (the \"/app\" prefix stripped), and the return value is sent as a message to \"/topic/foo\" where the \"/topic\" is configurable but should work well as a default.\n\nA @MessageMapping without a value would be mapped to \"/\".\n\nDoes that make sense?\n\nThese will be documented properly soon by the way.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4576268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4772250", "body": "Good point, currently reactor-tcp is the only available implementation but we should make full use of the abstraction still and leave the option open. Can you create a ticket in JIRA pls?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4772250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4956014", "body": "Yes please raise a JIRA, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4956014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4956029", "body": "It should be comparable to do as in Spring MVC. In other words, yes, it should be possible. If not raise a bug, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4956029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5909859", "body": "> Prior to this commit, @SubscribeMapping mapped methods (backed with @SendTo\\* annotations, or not) would send MESSAGEs with the wrong destination. \n\nThe logic for @SendTo is different and is unrelated to this issue -- either @SendTo has a destination in which case it is used as is or it has none in which case we prepend with \"/topic/\" or \"/queue/\", in which case we're not \"replying\" with a STOMP MESSAGE to the WebSocket session but rather broadcasting with a STOMP SEND to the broker.\n\nIn short the issue only applies to @SubscribeMapping methods without @SendTo\\* annotations. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5909859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5911336", "body": "Remember the inbound message destination was updated to be the lookup destination.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5911336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6959992", "body": "hi Artem, yes indeed any interceptor that returns null from preSend will not be invoked with afterSendCompletion. As the one to effectively end the send, the interceptor is aware of the completion. I expect interceptors performing thread local setup will not be returning null but if conditional logic was required for any reason, they can still do the right thing. Note also the Javadoc  of afterSendCompletion:\n\n```\n * <p>Note that this will be invoked only if preSend successfully completed\n * and returned a Message, i.e. it did not return {@code null}.\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6959992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960301", "body": "Yeah since the interface is shared, the very addition of those methods implies they need to be implemented in SI as well. So either way we need to make a collective decision. I do think it's a bit hard to justify not having such methods since without  them it is impossible to do any kind of cleanup reliably. \n\nWhat kind of breaking changes have you seen so far?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960428", "body": "Good point Gary, especially important in such hot spots of activity. I've also deliberately avoided any other logging for that reason but this is one I left. I'll make it conditional.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6963223", "body": "How about renaming this to AppCacheManifestResourceTransfomer (or even AppCacheManifestTransfomer) to differentiate a little better from CachingResourceTransformer? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6963223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7006624", "body": "Yes redundancy is what I had in mind although I don't feel strongly either way. In fact I'd be okay with bringing it back to the way it was. Actually I did a lot logging-related optimizations by adding methods to the MessageHeaderAccessor class (and sub-classes). See for example the [methods in MessageHeaderAccessor](https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java#L421-L465) and also [the ones in StompHeaderAccessor](https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java#L386-L447) has even more.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7006624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7942338", "body": "Good catch!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7942338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10043339", "body": "I believe that's the same issue reported here: \nhttps://jira.spring.io/browse/SPR-12771\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10043339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10915640", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10915640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14688912", "body": "This was never in any GA release, so it wasn't removed. It was just never exposed. \n\nFor the encoding issue, feel free to [create a ticket](jira.springsource.org/browse/SPR) in JIRA. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14688912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14967251", "body": "Fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14967251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15267127", "body": "4.2.5?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15267127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16185606", "body": "That seems like a regression indeed. At runtime a `null` would be considered a custom method that's not in the RequestMethod enum values. However an empty methods condition should match to anything. I'll fix that shortly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16185606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16185900", "body": "Here is the fix https://github.com/spring-projects/spring-framework/commit/08eb623c41d0ba8276d4131330271ea0f49c7879.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16185900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16732771", "body": "Yes checking..\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16732771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16971511", "body": "You can track this information from the referenced ticket above https://jira.spring.io/browse/SPR-13402 and then under versions https://jira.spring.io/browse/SPR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16971511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17751730", "body": "Thanks, that should be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17751730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18920981", "body": "I guess my refactoring to those tests didn't work out so well. Thanks Brian!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18920981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19150688", "body": "You can add an `@ExceptionHandler` method. If the error occurs before the first item is published, you can still change to a different response status and body.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19150688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19153285", "body": "No it's not for sync methods only. We've support to make sure it works as I said it does. See https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java. It's based on a Reactive Streams publisher but it's the same idea.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19153285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20001822", "body": "I suppose no strong reason, just the expectation that on a POST you do need controller logic to handle form data, data binding, validation, etc. You can still call setSupportedMethods on the ParameterizableViewController but this is not exposed in the MVC Java config nor the MVC namespace.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20001822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20003768", "body": "I pushed a fix for this. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20003768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21090153", "body": "Main discussion is under https://jira.spring.io/browse/SPR-15282.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21090153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21458748", "body": "Couldn't this be `Optional.ofNullable(filename).flatMap(this::getMediaType)`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21458748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22465446", "body": "Nice, actually shorter as a bonus + no static import required.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22465446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23630289", "body": "Indeed this was previously in compareTo where p1 couldn't be null. I've updated this https://github.com/spring-projects/spring-framework/commit/631b546d1cd31738142acc75884bbf7d7d4ad11d.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23630289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23634126", "body": "Good idea. [Here it is](https://github.com/spring-projects/spring-framework/commit/8c4b1ab781c305328eb98ce7b2eb39f8b57c4753) but notice that `normalizedLength` is negated since we want the opposite of int order (in this case higher is better) and also slightly re-arranged for readability.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23634126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23634147", "body": "I've taken up your other suggestion to use `Comparator.nullsLast` and also added the extra test suggested here.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23634147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23636706", "body": "Oops for 1) and for 2) I found it easy to overlook the `-`. That said I've [now added](https://github.com/spring-projects/spring-framework/commit/280c64ba357440ea13eb4ccefc62984f4567e49f) a dedicated method to get the score by normalized length. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23636706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25340627", "body": "Currently that syntax is not supported in Spring MVC. \r\n\r\nThe reason we pulled out `ParsingPathMatcher` is because of the realization that putting the new `PathPattern` behind the `PathMatcher` interface isn't the right approach. It needs to be presented as an alternative both at the configuration level (i.e. using one or the other) and implemented that way too (i.e. separate code paths).\r\n\r\nFor the `/{*path}` syntax there are only two options on the Spring MVC side. Either we enhance `PathMatcher` to support the syntax as well, or add support for `PathPatternParser`.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25340627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/26440690", "body": "You're right. I thought they were meant to work like that (e.g. snapshot has milestones and releases). At any rate I've added it back.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/26440690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27780306", "body": "I think the fragment can be left out since a client has no way to send it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27780306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27780315", "body": "Should this be `getRawUserInfo()`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27780315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/28056011", "body": "@IronWong, you should first check [supported versions](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions). The 4.2.x branch is not supported. \r\n\r\nIf you believe you there is an issue in a supported branch, you need to report it responsibly, in private, via https://pivotal.io/security. Note that this page also contains a list of CVEs that have been previously reported and addressed, including the versions affected. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/28056011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/9035588", "body": "The above text should not be deleted IMO. It covers those who use neither the MVC namespace nor the MVC Java config. It makes sense to keep it as information on where the configuration setting lives. Then the tip explains how it relates to MVC namespace and Java config users.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/9035588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/9035666", "body": "It would be useful to add a reference to the section on \"Advanced Customizations with MVC Java Config\" since the above is not possible to do with the @EnableWebMvc/WebMvcConfigurer combo which is the starting point for using the MVC java config.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/9035666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/20717851", "body": "Could this line be removed since the user is not used? It seems like setting the user to null was not necessary even in the old version.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/20717851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76441969", "body": "How about using the builder method to provide the data which is the most likely case:\n\n``` java\npublic static <T> Builder<T> data(T data) {\n    return new BuilderImpl<>().data(data);\n}\n```\n\nand also some option for no data:\n\n``` java\npublic static Builder<Object> withoutData() {\n    return new BuilderImpl<>();\n}\n```\n\nIt goes from:\n`ServerSentEvent.<String>builder().data(\"foo\")`\n\nto:\n`ServerSentEvent.data(\"foo\")`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76441969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78878347", "body": "`ServerHttpMessageWriter` is generally useful for sever-side use. As such I see it as belonging in spring-web next to `HttpMessageWriter` where we also have other server-side only writers like the one for Server-Sent Events. \n\nThe `ResourceHttpMessageWriter` needs it and that's another confirmation it should be there. It would be needed for JSONP as well and anything else that needs access to the request to prepare hints.\n\nAs for the `MethodParameter` couldn't we make that a `ResolvableType`, call it `streamType`, and order it ahead of `elementType` in the method signature? That would be a little less assuming that there is a `MethodParameter` necessarily. \n\nI would also de-emphasize that it's for controllers only in the Javadoc. It's for server-side use first and foremost, certainly in controllers. The Jackson implementations could also be in spring-web by the way as far as I can see so it's all together.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78878347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/79090204", "body": "Shouldn't this pre-implement resolveHints to do delegation to the next `HttpMessageWriter` if it is a `ServerHttpMessageWriter` and then invoke some `resolveHintsInternal` abstract protected method? I don't see that last bit right now that would allow decorating with more than one `ServerHttpMessageWriter`. \n\nSame comment for the `HttpMessageReader` too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/79090204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78995118", "body": "Could we consider a new method on Resource for this? The fact that a utility method takes a Resource and calls its property is a sign. It looks like a variant of the current `getContentLength()` that returns the content length optionally if known. So perhaps `OptoinalLong getContentLengthIfKnown()` with a default implementation returning empty?\n\n/cc @jhoeller, @poutsma \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78995118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/79021352", "body": "For consistency with the existing method, possibly returning `long` with -1 to indicate unknown. It looks like some (e.g. UrlConnection) can return -1.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/79021352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85401289", "body": "Should this be a configurable property?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85401289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85402131", "body": "There is only one form indeed and a Flux read makes no sense but the method can produce a Flux, i.e. `Flux.from(readMono(..))`, even if it will never have more than one element.. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85402131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85753675", "body": "The Stream API could make this more readable, something like (not tested):\n\n``` java\nString contentDisposition = getFirst(CONTENT_DISPOSITION);\nif (contentDisposition == null) {\n    return null;\n}\nreturn Arrays.stream(StringUtils.tokenizeToStringArray(contentDisposition, \";\"))\n        .skip(1)\n        .map(part -> StringUtils.tokenizeToStringArray(part, \"=\"))\n        .filter(pair -> {\n            List<String> attributeNames = Arrays.asList(\"filename\", \"filename*\");\n            return (pair.length == 2 && attributeNames.contains(pair[0]));\n        })\n        .map(pair -> {\n            String value = \"\";\n            return new String[] { pair[0], value};\n        })\n        .map(pair -> \"filename\".equals(pair[0]) ? pair[1] : decodeHeaderField(pair[1]))\n        .findFirst();\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85753675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85753976", "body": "This should be a private field, if testing is the only reason, which is the case as far as I can see.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85753976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85756401", "body": "Also I'm wondering if it's worth having a ContentDisposition representation along the lines of `HttpHeaders#getContentDisposition()`, such as [for example](https://jersey.java.net/apidocs/2.8/jersey/org/glassfish/jersey/media/multipart/ContentDisposition.html).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85756401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/99676268", "body": "You should be the first (and only) author as far as I can see.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/99676268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98028916", "body": "Couldn't this be:\r\n````java\r\nString pathWithinMapping = bestMatch.getKey().extractPathWithinPattern(urlPath)\r\n````", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98028916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98029101", "body": "Couldn't this be:\r\n````\r\nuriVariables = bestPattern.matchAndExtract(lookupPath);\r\n````", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98029101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98030070", "body": "Since `options.PathMatcher` is no longer used, it can be removed from the builder altogether.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98030070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98032709", "body": "There is a `PathMatcher` here embedded in the `PathPatternMappingRegistry` and also one in the base class as the `pathMatcher` property. The one from the base class should probably be used here to create the registry. The problem is that the registry wants a `PathPatternParser` and not just any `PathMatcher`. \r\n\r\nI think that brings up the question about the role of the `PathMatcher` interface. Is that what a `HandlerMapping` should be configurable with still or a new contract that generalizes the `PathPatternParser`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98032709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98048382", "body": "I think it's odd that the trailing slash flag must be passed for every registered pattern when in fact it applies to the entire `HandlerMapping` and could, and probably should, be a property of the pattern registry.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98048382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98049301", "body": "In the spirit of removing String patterns why don't we set the `PathPattern` instead as the request attribute?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/98049301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100183922", "body": "This makes the getter and setter asymetrical, which cause issues in configuration I think. Perhaps we can keep it String-based for now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100183922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100185674", "body": "For the constructor with patterns only couldn't we just create a `PathPatternRegistry`? In other words let the registry encapsulate the knowledge of default values and completely get rid of suffix/trailing slash preferences at this level.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100185674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100186679", "body": "Perhaps we can return a String-based map for now? It's how the patterns were provided and the method seems more informational, rather something someone would use for processing requests.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100186679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100187678", "body": "Should the input here be String patterns? It's seems no different than `AbstractUrlHandlerMapping` which does that and in general for input purposes String does make sense. Taking a `PathPattern` requires to use the right `PathPatternRegistry` instance if we have one configured centrally and then injected as we do for `PathMatcher` today.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100187678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100189309", "body": "How about String-based input (as commented elsewhere)? It might be nice also for the getter to return a copy of the original map, i.e. without the variant patterns, so technically one could register them again with some other registry.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100189309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100191491", "body": "The `pathMatchConfigurer` field could be replaced with a `PathPatternRegistry`. We could still use `PathMatchConfigurer` to collect the options but then create a registry from that and have it injected in the various components that need it. That would also allow replacing a multitude of setters in `RequestMappingHandlerMapping`  with just the registry as input. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100191491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100191777", "body": "Looks like something that could be removed indeed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100191777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85366066", "body": "The Javadoc should mention the algorithm to determine the charset and what if there is no indication, is there a natural default or does it error out? \n\nAlso as this is a shortcut method it would make sense to call it `getContentAsString()`. Technically the method could be even left out but It helps to support form field values.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85366066/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85369632", "body": "What about using `collectMap` instead of `collectList` + `map`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85369632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85372220", "body": "Should this notify the parser about the error which calls `error` on the emitter, so that subscribers for the parts will get the error?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85372220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85372567", "body": "An inner class perhaps given the number of methods?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85372567/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85378610", "body": "These could be ordered right below `getPrincipal()` above with `getAllParts` ahead of `getParts` as the more common case. Same for decorator and default implementations.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85378610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85380207", "body": "Could `exchange.getParts()` with `collectToMap` be used to get all parts first and then invoke a method that asserts all parts, which can also be called from `assertGetAllParts`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85380207/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/117834955", "body": "Indeed, thanks for catching this. Fixed!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/117834955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119405963", "body": "If you could push another commit on the same branch, so I can see the exact changes you have in mind.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119405963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119618851", "body": "Good find digging up those tickets. \r\n\r\nOne of tickets SPR-8704 shows that it was turned into a documentation task and documentation updates were applied on this topic already including both master https://github.com/spring-projects/spring-framework/commit/fd41f63ec065b890a539451532392fa9b5bb0b28 and 4.3 https://github.com/spring-projects/spring-framework/commit/28e114b569d0e3e19ea0e0160704b6726810f428.\r\n\r\nI think the explanation here is not very good because explaining things in terms of the exception doesn't help much and made me go lookup the javadoc for that exception which didn't bring a more satisfying answer either:\r\n> Doing so can result in a `BeanCurrentlyInCreationException`\r\n\r\nI find this explanation under the ticket much more useful because it tells me why I shouldn't do it (interface vs annotation based dependency injection):\r\n>  we tend to generally recommend against using annotation-driven injection in FactoryBean implementations. Since such classes implement an interface-based contract to begin with, I would rather design them to use programmatic BeanFactory lookups for the target beans needed.\r\n\r\n@jhoeller from the above linked tickets it seems that quite a few people are running into this and documentation alone is not effective in preventing time wasted debugging. If there is anything that could be done to detect or proactively reject..\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119618851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/123850552", "body": "Couldn't we leave this as it was before? It is true that the PR removed the internal use of the method within the try-catch of `ResponseBodyEmitter#sendInternal` and that any errors from the container side should work as expected but a controller could also call `completeWithError` and the change eliminates the option to complete with error from the application side unrelated to write issues (and regression for some apps).\r\n\r\nIf a container and an application thread both try to `setErrorResult` at the same time `DeferredResult` will only accept the first. We can document to not do that after a write failure which could be one reason for a close timing. Other than application vs container side `setErrorResult` should be quite rare. If it does happen I'm not sure there is much we can do and in any case it implies the response is not usable.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/123850552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/129769772", "body": "This will cause expectedUri to always be encoded which wasn't the case until now. \r\n\r\nOne option would be to do this only if uriVars are actually provided but then the method behaves inconsistently with regards to encoding based on whether uriVars are provided or not.\r\n\r\nAnother option would be to have separate methods -- e.g. `requestTo` for exact string match, `requestToUriTemplate` to expand + encode, and possibly also `requestToUri(String expectedUri, Function<UriBuilder, URI> uriFunction)` for full control (as we've done on the new `WebClient`).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/129769772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/130100259", "body": "Yes I see now that a similar change was made not long ago. The ticket also shows a comment about a subsequent regression https://jira.spring.io/browse/SPR-14790 .. :)\r\n\r\nThe first option isn't really an option because of the inconsistency I pointed out. I shouldn't have called it an option in the first place. Let's go for these two for now:\r\n\r\n`requestTo(String)`\r\n`requestToUriTemplate(String, Object...)`\r\n\r\nThe `requestTouri(String, Function<UriBuilder, URI>)` can always be added later.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/130100259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151251670", "body": "Let's put ServerWebExchange as the last argument, i.e. `(body, bodyParameter, actualParameter, exchange)`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151251670/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151838901", "body": "@violetagg if we switch to NO_DEMAND first and then suspend, isn't it possible that if a request comes in concurrently, after NO_DEMAND but before suspend, it can call checkOnDataAvailable, but then the suspend executing just after may end up cancelling the request for data? Isn't it safer to suspend first and then change the state to NO_DEMAND opening up for requests to trigger more reading?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151838901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151885914", "body": "Also shouldn't suspend be called in UNSUBSCRIBED too before there is demand? It should apply every time we're about to switch to NO_DEMAND.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151885914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/152160155", "body": "Could we call this `isSuspended`? In both places where it's called it's negated.. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/152160155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165549754", "body": "`decodeRequestString` and `determineEncoding` appear identical to the same methods in `UrlPathHelper`. Why not just use `UrlPathHelper#decodeRequestString` instead?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165549754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "snicoll": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cc12afdea2c4b2c3073c1c2bbc88091a4e7db74e", "message": "Add support for deferred import selector group\n\nThis commit allows several DeferredImportSelector instances to be\ngrouped and managed in a centralized fashion. This typically allows\ndifferent instances to provide a consistent ordered set of imports to\napply.\n\nIssue: SPR-16589"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fb7c4a3066b935c7d31f65a3d5a622c0048ae1e8", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/38ebb6c9828370f68aebbbf8662b3b7a10de0970", "message": "Restore includes and isCompatibleWith\n\nSee gh-1713"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d89d95ef1c64e3faa31e9af728d95096f68376a9", "message": "Merge pull request #1715 from igor-suhorukov:master\n\n* pr/1715:\n  Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1e9161ca6efd1f5205d78631b7553fb0f5e42c6", "message": "Merge pull request #1691 from theHacker:patch-1\n\n* pr/1691:\n  Polish Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6bbc5b0f267ac06d113492e88a86f5fd50ccf0cc", "message": "Merge pull request #1681 from olivergierke-patch-1\n\n* pr/1681:\n  Add explicit anchor to discussion about constructor VS. setter injection"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e7076ad35c2638e23b860066e99bc702c20f038f", "message": "Merge pull request #1676 from fabriziocucci:patch-1\n\n* pr/1676:\n  Fix indentation in doc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8222698eb2326f4e8db98d372e3572fcf83ce274", "message": "Merge pull request #1569 from lonre:patch-1\n\n* pr/1569:\n  Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/991eb4858e48535c04fe2cc42ed7778fdb2ed965", "message": "Update copyright header"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d757bf3f7a45a0296dbcac60d32cb35a1e80236", "message": "Merge pull request #1671 from igor-suhorukov:master\n\n* pr/1671:\n  Change this \"try\" to a try-with-resources"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/909cacec42cdafe792937be1c04867f53e8fb6ad", "message": "Merge pull request #1670 from igor-suhorukov\n\n* pr/1670:\n  Collection.isEmpty() should be used to test for emptiness"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7da40abba5a9c84123e28dd06c10e8d8dff1b862", "message": "Merge pull request #1669 from igor-suhorukov\n\n* pr/1669:\n  Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fdde9de005f67239ae549e1d5dae53c9755dc3b6", "message": "Merge pull request #1606 from kamilszymanski:arraycopy\n\n* pr/1606:\n  Replace manual array copy with native method call"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/10caaefd0bb114f1dff1e679014f89bbc22c3bfe", "message": "Merge pull request #1657 from izeye:polish-20180201\n\n* pr/1657:\n  Polish SqlParameter.sqlTypesToAnonymousParameterList()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f0dd31a63936772b56f7eb389a18d8c8fe608a28", "message": "Merge pull request #1656 from adamlehenbauer:master\n\n* pr/1656:\n  Fix typos"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6db1b692b8f87d09dd89b4e8a3b0f537613c7cd8", "message": "Merge pull request #1650 from izeye:polish-20180124\n\n* pr/1650:\n  Polish \"Remove an unnecessary intermediate variable\"\n  Remove an unnecessary intermediate variable"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/42a2081e8c4b3e63ba6295bfdc731353857e66d4", "message": "Polish \"Remove an unnecessary intermediate variable\"\n\nCloses gh-1650"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ca4cd1cf8f7e753094e4c3246e35259b71e7bcc", "message": "Merge pull request #1647 from izeye:polish-20180120\n\n* pr/1647:\n  Polish InterceptorRegistration"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/817254f2ebc0f7e217b36c7cca6fbaf94a64355d", "message": "Merge pull request #1646 from JanStureNielsen:patch-2\n\n* pr/1646:\n  Fix doc typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dfe4e01f51b50c258bcb9e7d6962ae88222b9ec7", "message": "Merge pull request #1645 from JanStureNielsen:patch-1\n\n* pr/1645:\n  Fix doc typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3ae776b1fa94e56ffd32bf54549bba9cb3912720", "message": "Fix BOM link\n\nIssue: SPR-16317"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/42dfa4015167a660af102c0ca5064f4268901a1a", "message": "Make sure endpoint settings override default factory settings\n\nIssue: SPR-16338"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/89b81b008008b01cab62166f15404213cc3b8948", "message": "Merge pull request #1636 from izeye:exception-message\n\n* pr/1636:\n  Fix an exception message in ScheduledAnnotationBeanPostProcessor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f72318a0aeb7043023c2963f5db9cd7643c28bbc", "message": "Merge pull request #1640 from making:patch-2\n\n* pr/1640:\n  Fix source code in doc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d151b02120789f65f79f218c5e87d66b3c8663e", "message": "Fix SpEL syntax\n\nIssue: SPR-16315"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8fc16fc9378ec7ee5a51337a62b6eb46294461e9", "message": "Merge pull request #1627 from nkjackzhang:patch-1\n\n* pr/1627:\n  Polish Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/206a5e02dd8b6d61edb60c9da955feed48388aab", "message": "Merge pull request #1615 from gro-gg:patch-1\n\n* pr/1615:\n  Fix exception message"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bdb04b1d28623720f3a18be4227b5c4f4bfde3f4", "message": "Merge pull request #1601 from hongxingwz:master\n\n* pr/1601:\n  Fix copy/paste in Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1838ddb95d40c57eb0ba3909f6ea3d67cab7640d", "message": "Support Ant-style package name with component index\n\nThis commit improves the component index so that it supports ant-style\npackage name (i.e. com.example.**.foo).\n\nIssue: SPR-16152"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fb76aa015003124cb7f450c240a4fff8bd6d4ee3", "message": "Detected candidate inner classes\n\nThis commit improves the indexer to also consider static inner classes\non top of regular top level classes.\n\nIssue: SPR-16112"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/62c6a0054d7dfde663356fe1507d195014c51b0d", "message": "Merge pull request #1575 from ocadaruma:fix-example\n\n* pr/1575:\n  Fix wrong javadoc example"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9404041719f29a4a48b939a5d4a4bea145b99251", "message": "Upgrade to Reactor Bismuth-SR1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ad212dae2167651674aabd6edcc62df79d9e7ec", "message": "Merge pull request #1570 from wilkinsona:patch-3\n\n* pr/1570:\n  Add missing \"be\" in Part's javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3cb38cef2e214450b21ff54701bc9bd3b9f6693b", "message": "Merge pull request #1566 from drumonii:double-backtick-with-apostrophes\n\n* pr/1566:\n  Missing some double backticks with apostrophes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b47905f0507bb204470655d1e1578da53d5a76e1", "message": "Merge pull request #1549 from WilderPereira:patch-1\n\n* pr/1549:\n  Fix doc format"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/34a7991e18b62d39b92a96e6f132205d73b2efdd", "message": "Merge pull request #1547 from tomfitzhenry:patch-1\n\n* pr/1547:\n  Fix typo in exception message: quite -> quiet"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30d1b53aa515b0a429fee814f9136145ee9886d5", "message": "Merge pull request #1545 from MottoX:fix-typo\n\n* pr/1545:\n  Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cee9d1c08f92f49646da17545d0c7d7f737a62e2", "message": "Fix formatting\n\nCloses gh-1483"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f0f292bab176fb6563c3100410b198b9edd3a36", "message": "Merge pull request #1535 from nkjackzhang:patch-3\n\n* pr/1535:\n  Fix typos in spring-mvc.xsd"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2d040c41cc66e85e0a54199749db99a5bd89de1", "message": "Fix link to \"Message Converters\" section\n\nIssue: SPR-16024"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b48e60c81160d3a6034d8d03d516299e5b10dc1", "message": "Merge pull request #1531 from xavier630:patch-1\n\n* pr/1531:\n  Fix Javadoc typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cad51d125145aafcc5a3baef60003adaf567638f", "message": "Merge pull request #1530 from qwazer:rename_fix\n\n* pr/1530:\n  Fix class name in javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b275a06d167773df0efdc76884ad7c2067ab9e2b", "message": "Reuse JmsTemplate's MessageConverter in JmsMessagingTemplate\n\nThis commit makes sure that any custom MessageConverter set in a\nJmsTemplate used by a JmsMessagingTemplate is reused as the payload\nconverter of the message.\n\nIssue: SPR-15965"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7aa956a92029835f4306f3707ad36dcc90fa747b", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71182ab54b62924ad2e475995872435211b33807", "message": "Provide hierarchy traversal support for getBeanNamesForAnnotation\n\nIssue: SPR-15923"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/678a78607680d05a856d13647a069b5bd6b17abd", "message": "Merge pull request #1512 from Buzzardo:CONTRIBUTING-DOCUMENTATION-edit\n\n* pr/1512:\n  CONTRIBUTING-DOCUMENTATION.adoc edit"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3a006439ee75eebedd713e22e12f3143c3fd5f76", "message": "Merge pull request #1511 from arend-von-reinersdorff:patch-1\n\n* pr/1511:\n  Minor fix in example code: No quotes for boolean"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8f10280ff5d429c88fd7a7f424daa8712f4c713", "message": "Merge pull request #1509 from Buzzardo:master\n\n* pr/1509:\n  Polish contribution\n  Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8bd45cdec43e6b2c79f0f14d8c7bef6b9137e21a", "message": "Polish contribution\n\nCloses gh-1509"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5a51351fa4e582571a442b331fb3f2bec0e63f30", "message": "Relax test assertion when Jacoco is enabled\n\nThis commit changes the resolveMethod to take a method name as\ninstrumentation may add additional methods to the test object.\n\nIssue: SPR-15888"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d28e80e53ca38b0dec1365a70fe8c3df1ec5659", "message": "Fix code format\n\nCloses gh-1501"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6e7fef236c3c8ec978a621704e4ba008795ecbc", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1a9cfefcbb0f89b6f2efdaf75d218194c5117be8", "message": "Fix test failure\n\nIssue: SPR-15548\nCloses gh-1488"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/48f18e9a47118747f07d0f583af644cab56e70d1", "message": "Merge pull request #1488 from eddumelendez:jackson_2.9.0\n\n* pr/1488:\n  Upgrade to Jackson 2.9.0"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/06fc092be2d19622622b5379e17b5ed8919831b2", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/19c88f2cfaeb519531e80797c53637c5efdc1e1f", "message": "Polish components indexer doc\n\nIssue: SPR-15793"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1764f905d80893daa8ad97a8276d9c5146628da1", "message": "Merge pull request #1469 from IAMTJW:master\n\n* pr/1469:\n  Polish contribution\n  Use dedicated addAdvisors"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6e5e5913d7987374462b056808c0e121e0818b8f", "message": "Polish contribution\n\nCloses gh-1469"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e90583fb58dcaaac9a704c02e9f145bac5e01670", "message": "Merge pull request #1465 from hackerwins:fix-typo\n\n* pr/1465:\n  Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1f06fddd2444b597730dd9911677b1adf87d410", "message": "Polish\n\nIssue: SPR-14528"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e87a346ac09d327d5a6c5d517d40310612f9e01", "message": "Merge pull request #1461 from freeman0432:master\n\n* pr/1461:\n  Fix a missing line of xml fragment"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5e4e3fbe8bafdb8fc1afb72036e1a8d6886a7170", "message": "Merge pull request #1459 from diguage:lambda-map\n\n* pr/1459:\n  Polish \"Refactor iterator of Map with Java8's Map.forEach\"\n  Refactor iterator of Map with Java8's Map.forEach"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ab678a2a3a2fe7a1977600178d1b9776f857870", "message": "Polish \"Refactor iterator of Map with Java8's Map.forEach\"\n\nCloses gh-1459"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/58242f224946682ad7cce515894f490b767c5240", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/40df48fd950e6c9464d818a0f21ab2f5dec63c58", "message": "Merge pull request #1454 from diguage:lambda\n\n* pr/1454:\n  Polish \"Replace relevant code with lambda\"\n  Replace relevant code with lambda"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc64b8040f7c76f2bc85387cf944436424ce408c", "message": "Polish \"Replace relevant code with lambda\"\n\nCloses gh-1454"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aca5eb73935db5cea7369f19dfffc1cf691cba9f", "message": "Merge pull request #1449 from diguage:dev\n\n* pr/1449:\n  Polish \"Use Map#forEach instead of Map#entrySet#forEach\"\n  Use Map#forEach instead of Map#entrySet#forEach"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/451b41962446b1162a7bc06b8a1ab385288c1679", "message": "Polish \"Use Map#forEach instead of Map#entrySet#forEach\"\n\nCloses gh-1449"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a665da415af48dfe748b9014ee9c267d75ea7b1d", "message": "Merge pull request #1450 from diguage:diamond\n\n* pr/1450:\n  Use the diamond syntax"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ca1e682dc4bbb36a20150b6b5ed5cc8d4086d1a9", "message": "Merge pull request #1451 from diguage:lambda-map\n\n* pr/1451:\n  Polish \"Refact iterator of Map with Java 8 forEach\"\n  Refact iterator of Map with Java 8 forEach"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/27aabb15f9c54f0d495989c917ef65a7b1235845", "message": "Polish \"Refact iterator of Map with Java 8 forEach\"\n\nCloses gh-1451"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5df053c44bde797cc1642bb82e03daabc95c2baa", "message": "Merge pull request #1455 from diguage:editor-config\n\n* pr/1455:\n  Add EditorConfig"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ffc3f6d87d640631c997fc9566679d094cdda267", "message": "Merge pull request #1445 from diguage:dev\n\n* pr/1445:\n  Polish \"Refactor duplicated code\"\n  Refactor duplicated code"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6e3a9cbbb49bf2b76e63ff4b65fb484841177e53", "message": "Polish \"Refactor duplicated code\"\n\nCloses gh-1445"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a1a6157fb118692760b45e0d5ab0eafeb802bc26", "message": "Merge pull request #1444 from diguage/dev\n\nFix reference"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/beb7ed97155b9164797aec7024254e12b9050cd4", "message": "Polish\n\nIssue: SPR-15592"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7efa0db1d142cbe3c019d7eae23b91de91759af9", "message": "Merge pull request #1436 from wilkinsona/patch-2\n\nCorrect the javadoc for ExchangeResult.getUrl()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b64de87a6bb3f7b94a8d4073da919803bf6ea413", "message": "Merge pull request #1411 from andreykaipov:patch-2\n\n* pr/1411:\n  Minor typo fix: form -> from"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3a5e06401df40c4ac4e6dcbd87bf8e1f187697e5", "message": "Upgrade to Reactor Bismuth.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/07c9c4ddf9848f9552be0c5973794e84183c4302", "message": "Merge pull request #1409 from eddumelendez:netty_bom\n\n* pr/1409:\n  Simplify Netty dependency management by importing its bom"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3b8b3502a84714bd01594fca10e0afabcd2e48e4", "message": "Update copyright header"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f6704202d7f7908b414eb2a40a8beab1572ca4c", "message": "Merge pull request #1404 from jonathanborenstein:master\n\n* pr/1404:\n  Polish \"Use Java 8 forEach method on Map\"\n  Use Java 8 forEach method on Map"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1b9e12f52fc1bd032c237b562afe6901fc9da9a0", "message": "Polish \"Use Java 8 forEach method on Map\"\n\nCloses gh-1404"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/547c4f69a4c4041dd28163f8d847dec0487df6b9", "message": "Add getTargetDataSource to TransactionAwareCacheDecorator\n\nIssue: SPR-15479"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/333e5c6b017d14bd2e35fdce04ade9087115acfb", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a38b03f669a0bbe33b73688687a01c77db0faf6d", "message": "Merge pull request #1398 from QBNemo:master\n\n* pr/1398:\n  Polish \"Reuse constant in DispatcherServlet\"\n  Reuse constant in DispatcherServlet"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/239b7086c676321b48b1b094704b4995417a188b", "message": "Polish \"Reuse constant in DispatcherServlet\"\n\nCloses gh-1398"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf6031f98e8aedb8ba99762cdf069fda985bc816", "message": "Fix duplicated entry in spring-core module\n\nIssue: SPR-15462"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/624790e7ab8e7eac19919b9d75d3c9f0233e6490", "message": "Merge pull request #1397 from jtigger:patch-1\n\n* pr/1397:\n  Remove extraneous asterisk"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/09fcfb510c1c830592f4b71408edb3d9c05a1989", "message": "Merge pull request #1392 from KingBuzzer:fix-selenium-links\n\n* pr/1392:\n  Fix Selenium links in testing.adoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/929ab10b499b62e6031e5ea88b7184f1817e0e80", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4ffdb50681a9e4c81ccb1d1eb46ace804a3af0ad", "message": "Reuse QosSettings in JmsTemplate\n\nSee SPR-15408"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a2acbee004e010fe36b2970c52bd25a9a4054371", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c0b3be6e60af5704a0d0ac6e119d620fe84b0f4", "message": "Customize QosSettings for JMS replies\n\nThis commit introduces QosSettings that gather the Qualify of Service\nsettings one can use when sending a message. Such object can now be\nassociated to any JMS endpoint that allows to send a reply as part of\nthe processing of an incoming message.\n\nIssue: SPR-15408"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/135651de9a0294dfab3829eb96a399d2b200032f", "message": "Merge pull request #1387 from michael-simons:SPR-15449\n\n* pr/1387:\n  Polish \"Improve unless condition in caching doc\"\n  Improve unless condition in caching doc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7084bc293a320d710a0bbda648c0cb2453c7d660", "message": "Polish \"Improve unless condition in caching doc\"\n\nCloses gh-1387"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37d0db161512c2a06cfd3d80a622951c4d6f5c50", "message": "Merge pull request #1386 from michael-simons:SPR-15448\n\n* pr/1386:\n  Polish condition in caching examples"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7d61911cd483ba6424e0509a2cae088704196d53", "message": "Merge pull request #1383 from gavvvr:patch-2\n\n* pr/1383:\n  Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c5b23c218ca504b5dd41c52482cdc3c481ecefbc", "message": "Merge pull request #1382 from pivotaljohn:patch-1\n\n* pr/1382:\n  Update copyright header\n  Fix typo in AfterReturningAdviceInterceptor JavaDoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf6e7d0c26199d65d840a081cba4d20ada78dcc5", "message": "Update copyright header\n\nCloses gh-1382"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a292539af9067574d59d5e11f2adfda56f426144", "message": "Merge pull request #1370 from ameyjadiye:fix-typo\n\n* pr/1370:\n  Polish javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5211a099d5653b164723d923af77529ac2980ac9", "message": "Merge pull request #1278 from stonio:patch-1\n\n* pr/1278:\n  Update Apache Licence 2.0 URL"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a3bf2c4a82634d00e736f5e81da2d374d0578f4d", "message": "Merge pull request #1333 from stonio:patch-2\n\n* pr/1333:\n  Replace size() check with isEmpty()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d7eabeae268b09fef98d35e21d03cf02a46ebe1a", "message": "Merge pull request #1334 from stonio:patch-3\n\n* pr/1334:\n  Polish CollectionFactoryTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f78bc953f47cd05ca8f686bce963349ccc79df51", "message": "Merge pull request #1354 from QBNemo:master\n\n* pr/1354:\n  Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b4530e19fc3df0b96e3cc828ef5f102cbdf8305e", "message": "Merge pull request #1361 from linbaiye:fix-typo\n\n* pr/1361:\n  Remove a redundant word"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0bcdec7d911c77d43f7e55ac76747830184ab7c9", "message": "Merge pull request #1364 from nertzy:patch-1\n\n* pr/1364:\n  Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33c4a71b0833d44590ca229b899ada1f34933f36", "message": "Merge pull request #1349 from aviskarBasnet:doc-fix\n\n* pr/1349:\n  Polish contribution\n  Polish doc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6bd4c8837148375fb221b0f7e91e9b5e28afd029", "message": "Polish contribution\n\nCloses gh-1349"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e38854a72f34710e66dd6b1317a66bad94a90de1", "message": "Merge pull request #1343 from nkjackzhang:patch-6\n\n* pr/1343:\n  Update copyright header\n  Remove unecessary \"<<\""}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/05787f314f216bda3ee2149792abb7bf95e80085", "message": "Update copyright header\n\nCloses gh-1343"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a936ece2856572a004035087e5f683a81f665026", "message": "Merge pull request #1340 from pistriak:patch-1\n\n* pr/1340:\n  Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/21ae169653b9da60f9ec8bfe18f5d1bf9e801c94", "message": "Merge pull request #1335 from stonio:patch-4\n\n* pr/1335:\n  Use String#isEmpty()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73909f41cbf5dbb223737545979782e7395b8a30", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c74a1a0fe8553223a635b5752eb2f174e3e6a38", "message": "Improve allowNullValue handling when a null value is provided\n\nThis commit improves `AbstractValueAdaptingCache` to throw a dedicated\nexception if `allowNullValues` is `false` and a `null` value is provided\nanyway. This avoid a lower-level exception from the cache library that\nwill miss some context.\n\nIssue: SPR-15173"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/598d9a4b052922e6dec1a9b28b859fe2066912bb", "message": "Add test to reproduce SPR-15271"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b21c0cb8e09f9855b675e754327b16cfe6f4ff29", "message": "Merge pull request #1327 from hengyunabc:patch-1\n\n* pr/1327:\n  Update copyright header\n  Fix typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d4dd8baed569f0ce1236aafffd578b0aa69a51f3", "message": "Update copyright header\n\nCloses gh-1327"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12de9643a6b1d81b83a023896a1e007103074da5", "message": "Merge pull request #1322 from msysyamamoto:fix-javadoc\n\n* pr/1322:\n  Update copyright header\n  Fix Javadoc in ContentResultMatchers"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75b18d7b7bf46a9cd8a5f9fb4c58adffec2a2cd4", "message": "Update copyright header"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f128feb1cc1f339a93bbd162a1074c73094143d6", "message": "Document candidates index mechanism\n\nIssue: SPR-14711"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2fe310806c2d835938ef069f26c343dca84f5a20", "message": "Merge pull request #1292 from dbrimley:master\n\n* pr/1292:\n  Polish\n  Polish contribution\n  Honour ErrorHandler if `Cache.put` fails"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/85b20aa08afe2394cfc4028fc301326a1521c530", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/908261b136a78a08a9336bade052e90431c4021a", "message": "Polish contribution\n\nCloses gh-1292\nIssue: SPR-15188"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71cdd61b338efa332005fe5271e3b0cfd567911a", "message": "Merge pull request #1311 from grimreaper:patch-3\n\n* pr/1311:\n  Polish javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/48e834dfd1f5158913c44fcc40081f0d0d9cb370", "message": "Update copyright header"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7e40bd73becd786c83e17669896ceab578c4833d", "message": "Merge pull request #1312 from grimreaper:patch-2\n\n* pr/1312:\n  Polish javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33f0995b42999de2f7adcb53453d299173a2fe12", "message": "Merge pull request #1307 from Shredder121:assert-message\n\n* pr/1307:\n  Polish contribution\n  Check for null on the argument instead of the message"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d550eb152ceca8a9f721b3bb46a6526ccdb05a3c", "message": "Polish contribution\n\nCloses gh-1307"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f07a23e63d55d9f1ad622b85fa50122bd50c4cd2", "message": "Merge pull request #1294 from echoAlexey:patch-1\n\n* pr/1294:\n  Fix Javadoc for CronSequenceGenerator"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ab5f3e733b5581772cabaade949f8120a2eaefbb", "message": "Merge pull request #1279 from jvz:updated-logging-docs\n\n* pr/1279:\n  Polish contribution\n  Update logging documentation to include Log4j 2"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3e155736287cc8fffaeb7590a2a0e9e484b5d10c", "message": "Polish contribution\n\nSince Log4J 1.x is EOL there is no need to have a dedicated section for\nit.\n\nCloses gh-1279\nIssue: SPR-15170"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/848a2b2ef8545882fd87bc24a1558006e06c06b6", "message": "Merge pull request #1284 from garyrussell:SPR-15091\n\n* pr/1284:\n  Implement MessagingException.toString()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e0a08753d3bb835ee919d169e7980537058d524", "message": "Merge pull request #1281 from marschall:SPR-15076\n\n* pr/1281:\n  Remove use of Boolean constructors"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4cd9710a0d181a7f204690a17da02b5ce674bb91", "message": "Merge pull request #1282 from marschall:SPR-15077\n\n* pr/1282:\n  Avoid use of double constructor of BigDecimal"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d912f77a31e34156d55c149d8b322ab274269cd6", "message": "Merge pull request #1280 from marschall:SPR-15075\n\n* pr/1280:\n  Remove String#toCharArray from ScriptUtils"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/276cfd8993dc7d97995d324a14806ea16547f832", "message": "Fix Jdiff generation with Java8"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/57130b2d10ebc4faafb4de6488bc437787901819", "message": "Upgrade to Gradle 3.2.1\n\nIssue: SPR-14906"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f0ceefba0ece5bc85ba75ce671b2df0c0e369758", "message": "Polish doc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e3f6b61743bb66a955dfe551bb7b6659ceac8c16", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30291a8cd7b2808a7146b88593e2d514dea2138e", "message": "Allow to customize TestDispatcherServlet\n\nThis commit introduces the `DispatcherServletCustomizer` callback\ninterface that can be used to customize the `DispatcherServlet` that a\n`MockMvc` is using.\n\nPreviously, only the `dispatchOptions` flag can be customized. This\ncommit allows to customize any property of `DispatcherServlet` before it\nis initialized.\n\nIssue: SPR-14277"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/56c48623fd1e3eb63ce5086eabc6219e55007781", "message": "Allow @Cacheable method to return Optional\n\nThis commit further refines 240f254 to also support java.util.Optional\nfor synchronized cache access (i.e. when the `sync` attribute on\n`@Cacheable` is set to `true`).\n\nIssue: SPR-14853"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ffa728c23c2b9b1d5630e879680e46dc54ed9f93", "message": "Move NoOpCache to a top-level public class\n\nThis commit moves `NoOpCache` to a top-level public class to allow reuse\nin custom CacheManager arrangement.\n\nIssue: SPR-14856"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e78af3097a0975774677d3bd47a93f6e2eeefa39", "message": "Merge pull request #1225 from ejain:patch-1\n\n* pr/1225:\n  Escape (( and )) to prevent asciidoc processing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f3b8ff2f7f68ee7fdb4558d604cfcf872d32938", "message": "LiveBeansView does not rely on application contexts order anymore\n\nThis commit makes sure that the `unregister` order of registered\napplication contexts has no incidence on the removal of the LiveBeansView\nMBean.\n\nRather than using the last application context's name to compute the\nidentity of the MBean to remove, the identity is stored when the MBean is\ncreated.\n\nThis commit also adds missing tests.\n\nIssue: SPR-14848"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7dd3e26da4cf68ccded85b77f6935970fdf69d78", "message": "Merge pull request #1203 from rand0m86:rand0m86-fix-beanFactory-javadoc\n\n* pr/1203:\n  Polish contribution\n  Fix javadoc syntax"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3a34cdba8153b8085649feb38b9883f3e96e195c", "message": "Polish contribution\n\nCloses gh-1203"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/19db0424d2dd13bfd22faa7fd39631d307ac999e", "message": "Clarify SpEL usage on `@EventListener`\n\nIssue: SPR-14812"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ee0abe20d230c782a76fedf5c08524c87747576", "message": "Merge pull request #1222 from englishman:Int-4144_code_format_change_for_idea\n\n* pr/1222:\n  Import format fix according to Code Style"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/827bc78e34485c929acbd343bdbea423235e1644", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b7d85f8ebc49267b6d511f11c583b46f1c0886f9", "message": "Expose ResolvableType in NoSuchBeanDefinitionException\n\nThis commit improves NoSuchBeanDefinitionException to expose a full\nResolvableType rather than a raw class if a lookup by type failed. This\nallows to know more about the underlying type and is typically useful\nwhen a collection or map is required as the relevant generic type is the\nactual bean that wasn't found.\n\nIssue: SPR-14831"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7565355debde4be196fd38fbf604d89021795f71", "message": "Merge pull request #1205 from marschall:SPR-14810\n\n* pr/1205:\n  Fix NativeJdbcExtractors documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33bf439a74b710b31f39a10b27e5bd798139f424", "message": "Merge pull request #1206 from marschall:SPR-14811\n\n* pr/1206:\n  Fix formatting\n  Replace J2EE with Java EE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc8bad36c9f48c2b617a5aba95b6b3e37fd036c0", "message": "Fix formatting\n\nCloses gh-1206"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6fb4352e5c93eaf33aa356a55ebbb606b4e776d0", "message": "Merge pull request #1204 from marschall:SPR-14809\n\n* pr/1204:\n  Remove OracleLobHandler from documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ab232a538650c78628b8ac5f36bfe9c8ce003c24", "message": "Polish EnableAsync javadoc\n\nIssue: SPR-14793"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/715006d5df415b799ca3b22b7db7efc93c6a90f1", "message": "Fix table layout"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d8a771356c81acff827be395185a7b2951d4541f", "message": "Merge pull request #1180 from kosmaty:doc-formatting-fix\n\n* pr/1180:\n  Polish\n  Documentation formatting fix"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec865d27d8995e2e53e21f1322991fa613d69f4c", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3e11a30c64cd55919360a1cee299d9d5ec370d75", "message": "Merge pull request #1181 from kosmaty:validation-doc-formatting-fix\n\n* pr/1181:\n  Add missing quotation mark"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b0bf9f04a62fafd9ce28da37dbeb227b82cf462", "message": "Add Qualified element on RootBeanDefinition\n\nImprove RootBeanDefinition to specify an AnnotatedElement that holds\nqualifier information. When such element is present, any qualifier that\nit defines will be used to find a matching candidate.\n\nIssue: SPR-14725"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/06395f41cbe22c8f52d2c95b157059b8a60bad9b", "message": "Merge pull request #1172 from kosmaty:punctuation-formatting-fix\n\n* pr/1172:\n  Fix doc style"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/467", "title": "Fix PathVariable encoding if request charset is not set", "body": "This commit simply adds a `@PathVariable` decoding test to reproduce a\nscenario exposed in `SPR-11474`\n\nIssue: SPR-11474\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32010249", "body": "Fully agree. I had this discussion with Rossen where I discussed the possibility to increase the \"Bean definition profiles and environment abstraction\" section with the content of the links (i.e. blog posts) so that we can provide a proper section about this topic and this was delayed as we want to have a manageable scope for 4.0.1. \n\nGiven that, I don't really see how I could add that section there without all the contextual information first. At least, the current proposal is _contextualized_ (even though I don't like the phrasing as the Dev profile has also an in-memory database, this just feels _weird_).\n\nMaybe we should delay this topic for our next meeting call.\n\nGotcha for the commit message, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32010249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32268494", "body": "I have reworked the initial proposal a little bit so that both XML and Java config examples show the same thing. This makes the paragraph on the 'default' profile better integrated with the rest.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32268494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32360937", "body": "This has been fixed by Juergen already.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32360937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32678949", "body": "There are two commits in this pull request: `ee47a28` updates the deprecated `AnnotationMethodHandlerAdapter` infrastructure while `0ed12ad` provides the feature in the new infrastructure.\n\nSpeaking of the latter, `AbstractMessageConverterMethodProcessor#createOuputMessage` is not available to simple `HandlerMethodReturnValueHandler` implementations so I had to copy/paste those two lines which I don't like at all. I wasn't sure what to do ; I would have moved that code to a share utility class rather than relying on a protected method from the superclass. Advise welcome.\n\nI have kept the two commits separated so that you can easily chose if you want to update the _deprecated_ infrastructure or not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32678949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32793372", "body": "It is the case. Any dependency that you specify explicitly will need the exclusion. For instance, if you're relying on `spring-context` and you let the other dependencies coming through the transitive dependency management system, then you'll need to exclude `commons-logging` only for `spring-context`.\n\nEvery time you define a dependency, it is defined at the first child level in your dependency graph. Therefore, any dependency that is declared by that dependency becomes a second level child. Every spring module declares a dependency to commons-logging (even transitively) so they all have to be excluded. I actually tried that in a sample project to validate this assumption.\n\nRegarding the use of `*` vs. `.` I am listing _two_ solutions, hence the ordered list. But if we use unordered list for that too I'll update it.\n\nThanks for the feedback!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32793372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32830028", "body": "I was wrong on the \"even transitively\" part actually. Thanks for pointing that out!\n\nI have updated the documentation accordingly. As this dependency information should be really set in the `dependencyManagement` section of the POM, I made that explicit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32830028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35604090", "body": "Note that the review of this pull request should probably be delayed a bit with the ongoing work on JSR-107 as it brings the concept of `CacheResolver` we may want to use to fix this particular issue. See comment on the related Jira issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35604090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35884150", "body": "Good point. Let me create that project.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35884150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36108573", "body": "Rossen, I tried to create an IT for this particular problem so that we can validate this in our own infrastructure automatically. Unfortunately, I have issues to reproduce the scenario using the embedded Jetty server.\n\nWhile the requests seem to be the same, the server does not decode the URI at all (i.e. `HttpServletRequest#getServletPath` returns the encoded URL instead of decoding it). \n\nAnyway, I hope it will be useful as a base IT for this issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36108573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36246007", "body": "`CacheResolver` integration in Spring's caching abstraction is handled in `SPR-11490`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36246007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36623173", "body": "This has been merged to master, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36623173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36623233", "body": "Could you please confirm that you have signed the CLA? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36623233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36743556", "body": "I don't really see how the change makes that any worse. In the worst case scenario we fill a target list that we drop since we return the original object.\n\nThis is what we have now for `getElementTypeDescriptor`\n\n```\n/**\n * If this type is an array, returns the array's component type.\n * If this type is a {@link Collection} and it is parameterized, returns the Collection's element type.\n * If the Collection is not parameterized, returns null indicating the element type is not declared.\n * @return the array component type or Collection element type, or {@code null} if this type is a Collection but its element type is not parameterized\n * @throws IllegalStateException if this type is not a java.util.Collection or Array type\n */\npublic TypeDescriptor getElementTypeDescriptor() {\n```\n\nwhen this returns null, you have no generic information, it's a _raw_ list. If the semantic of that method changes, it can be an issue, indeed. With or without this change AFAICS\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36743556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37011423", "body": "The servlet spec states that `ServletRequest#getCharacterEncoding` provides the character encoding of the body of the request and if none is specified, latin should be used (i.e. `ISO-8859-1`).\n\n`UrlPathHelper` builds on top of this mechanism to decode URIs but it shouldn't assume that the character encoding of the body should be used if specified as this is a different matter. Typically, servlet containers decode the URI with `UTF-8` and never use the character encoding of the body.\n\nThis commit clarifies the situation in a way that better matches the spec. A new property called `uriEncoding` allows to force the encoding to use. The `defaultEncoding` property is now deprecated and only used if no `uriEncodin`g is set. For backward compatible reasons, `uriEncoding` is not set by default.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37011423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37024800", "body": "Good point, let me amend the commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37024800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37191583", "body": "This was partly merged and https://jira.spring.io/browse/SPR-11479 is now fixed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37191583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37204132", "body": "merged\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37204132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37522082", "body": "Thanks for the patch but the 3.1.x line has been retired already. We strongly recommend an upgrade to 3.2.8+ in general.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37522082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37522115", "body": "A fix for this issue is already available in the 3.2.x branch. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37522115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38176165", "body": "good point, I didn't knew about that exception.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38176165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38187281", "body": "Rossen's comment on #490 made me realized that the exception type is not right here either. Fixing that as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38187281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38192170", "body": "This has been reviewed by @bclozel so I just merged it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38192170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38208404", "body": "On a second thought, I wonder what we should do in case the issue is coming from the conversion. The message will not be explicit enough. Let me reconsider that part.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38208404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38584509", "body": "This has been fixed on master and will be available as from 4.0.3. Thanks for the patch!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38584509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38585530", "body": "Applied, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38585530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38704019", "body": "Thanks Andy. We are in the process of releasing 4.0.3 so I'll merge that once the release is done.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38704019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38706829", "body": "okay. One thing I've been thinking for quite some time is rationalize the dependencies version that we use. Right now, some are shared in properties and others are not...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38706829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38709987", "body": "amen to that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38709987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39088601", "body": "This has been merged to master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39088601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39090362", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39090362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39184330", "body": "fyi, if you need to make changes to an existing pull request, you can just push to your branch instead of creating a separate pull request.\n\nHave you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39184330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39202511", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39202511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39330582", "body": "Merged, cheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39330582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39743415", "body": "Hi, thanks for the suggestion. On a quick look it seems that's a bit too invasive. If we would have a package named `build`, it would be ignored as well. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39743415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40451321", "body": "Hey, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40451321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40501258", "body": "Merged. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40501258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40721623", "body": "SPR-5613 has been resolved as from 3.2.2\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40721623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40721696", "body": "this has been fixed in 3.2-RC1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40721696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40723534", "body": "This has been fixed as part of SPR-9181\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40723534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40804595", "body": "This has been implemented in SPR-9681\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40804595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40804994", "body": "Closing this one as SPR-9874 has been fixed. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40804994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812484", "body": "@rwinch is this PR still applicable? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812611", "body": "@rwinch isn't this one outdated by now? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812988", "body": "Thanks for your contribution. This seems like a super-specific use of `JmsTemplate` which is meant to work with a `DataSource`, whatever the implementation might be.\n\nI would argue that your example could be written as easily with a utility method that takes the connection and return the `JdbcTemplate`, wrapping the connection in the `SingleConnectionDataSource`.\n\nI am closing the request for that reason. Feel free to reopen if you disagree.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813053", "body": "SPR-10364 is actually completed so I am closing this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813183", "body": "SPR-10388 is actually completed so I am closing this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813273", "body": "SPR-10422  is actually completed so I'm closing this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813345", "body": "Thanks for your contribution. This has been added meanwhile.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813387", "body": "SPR-10456 is actually completed so I'm closing this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40814215", "body": "Thanks for your contribution. Have you signed the CLA? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40814215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815399", "body": "Hi there. Any update on this one? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815653", "body": "SPR-11656 is now completed so I'm closing this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815770", "body": "Please check [this link](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement). Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005683", "body": "Merged, thanks!\n\nPlease note the copyright should be updated if needed (see [code style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#license)) and avoid updating the imports statement structure unless you really need to. I've fixed that and squashed my commit into yours.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005691", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005697", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005706", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005713", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005721", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005729", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005741", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005749", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005755", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41005755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41382423", "body": "Thanks for your contribution. Have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41382423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41384403", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41384403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41395273", "body": "Like we just discussed, I am closing this one as the two methods should operate on different caches. See also [section 29.2 of the documentation](http://docs.spring.io/spring/docs/4.0.3.RELEASE/spring-framework-reference/html/cache.html)\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41395273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41685842", "body": "Like I explained in [SPR-11736](https://jira.spring.io/browse/SPR-11736), I don't think that adding such elements to the key is something we should do. Certainly not by default!\n\nI honestly don't see any compelling reason to add this to the framework as an alternate implementation but I am more than happy to discuss this further.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41685842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/42305995", "body": "There is no explicit eclipselink support in Spring and this feels like it would deserve a proper EclipseLink support similar to the one we have in Hibernate.\n\nI initially merged this work and I still have it locally but we should first work on a proper eclipse link integration.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/42305995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/42533333", "body": "As we discussed @dsyer I migrated the existing support in Boot. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/42533333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44051504", "body": "Looks like you didn't pushed what you wanted to push. Could you please double check and update your branch so that only your changes appears? Creating your local branch off master is the first thing to do. Check [contributing for more details](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44051504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44095263", "body": "Hey, have you signed the CLA ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44095263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45078338", "body": "Thanks. Can you rework the patch so that the formatting is right (tabs vs. spaces). Also, please avoid changing the import statements that much (.*)\n\nThe idea is to keep the changes as focused as possible. \n\nHave you signed the CLA already?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45078338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45085368", "body": "Sorry for asking but we have no easy way to track that. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45085368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45138486", "body": "merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45138486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45215965", "body": "It looks like this pull request is a mistake on your end. Could you please only report what you intended to change, with a proper description for the change? Thanks.\n\nCheck also [the contributing guidelines](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md) for more details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45215965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45305608", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45305608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45309625", "body": "I took a deeper look at this and there's a few issues: some tests are failing, have you run the tests suite before submitting or is it just failing here? The difference I see is that you're effectively starting the context now in some tests and this leads to `java.net.MalformedURLException: Unsupported protocol: jmxmp`\n\nI don't think this is a new problem but now that we fully starts the context some stuff happens. Those tests should probably be rewritten or we should fix the underlying issue.\n\nNow that we implements the lifecycle, I don't see a need for `DisposableBean`. Besides, the code is copy/pasted there. I also started to revisit the tests (up to `testAutodetectWithExclude`)\n\nI have pushed what I changed [on this branch](https://github.com/snicoll/spring-framework/tree/SPR-8045) (with the tests that are failing). This is also an opportunity for you to see what I have changed with regards to [the Spring framework code style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style) (in particular [this](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#java-source-file-organization))\n\nLet me know if you want to have another look at it. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45309625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45318772", "body": "Cheers, Sam. I forgot to mention that other unrelated tests were also failing so it's not about those 3 tests.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45318772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45325303", "body": "I mean **all** tests. Not that test class. I have 23 tests failing on the command line (`./gradlew :spring-context:test`) when I integrate this PR locally. \n\nFor instance:\n\n```\norg.springframework.jmx.access.MBeanClientInterceptorTests > testSetAttributeValue FAILED\n    javax.management.InstanceNotFoundException at MBeanClientInterceptorTests.java:119\n\norg.springframework.jmx.access.MBeanClientInterceptorTests > testSetAttributeValueWithIOException FAILED\n    javax.management.InstanceNotFoundException at MBeanClientInterceptorTests.java:155\n\norg.springframework.jmx.access.MBeanClientInterceptorTests > testGetAttributeValue FAILED\n    org.springframework.jmx.access.InvalidInvocationException at MBeanClientInterceptorTests.java:110\n\norg.springframework.jmx.access.MBeanClientInterceptorTests > testInvokeNoArgs FAILED\n    org.springframework.jmx.access.InvalidInvocationException at MBeanClientInterceptorTests.java:180\n\norg.springframework.jmx.access.MBeanClientInterceptorTests > testInvokeArgs FAILED\n    org.springframework.jmx.access.InvalidInvocationException at MBeanClientInterceptorTests.java:189\n\norg.springframework.jmx.access.MBeanClientInterceptorTests > testSetAttributeValueWithCheckedException FAILED\n    javax.management.InstanceNotFoundException at MBeanClientInterceptorTests.java:142\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45325303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45326997", "body": "Nothing. That's unrelated to your change. But I guess the most important is whether you want to take another look at the design or not (see my first comment). There are missing tests, too. For instance, we should test what happens when autoStartup is false, etc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45326997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45578138", "body": "fyi, I am taking over this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45578138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45586342", "body": "Merged with some additional chances.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45586342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45722525", "body": "Hi Paulo,\n\nLooking at your patch, It looks like you misunderstood the purpose of `ComponentScan`. Please check [this section of the doc](https://github.com/spring-projects/spring-framework/pull/556) explaining how you could initialize the Spring context in a web environment.\n\n[This commit](https://github.com/spring-projects/spring-framework/commit/9ba9f562f2a75cea06db81eb8e947e6d4153ca43) might help as well. Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45722525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45722846", "body": "Good catch! Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45722846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45831705", "body": "It looks like this pull request is a mistake on your end. Could you please only report what you intended to change, with a proper description for the change? Thanks.\n\nCheck also [the contributing guidelines](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md) for more details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45831705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46030818", "body": "Thanks for the contribution! Looking a bit closer, I slightly change the code to improve it further. This has been merged to master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46030818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47254635", "body": "Thanks you for your contribution. As we discussed already on the issue, they were several problem with your patch. The overall issue has been revisited and is now implemented.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47254635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48017725", "body": "This has been merged to master. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48017725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48048870", "body": "Thanks. I actually saw that problem as well and I already worked a bit on it. I have created SPR-11954 to track that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48048870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48051744", "body": "This will be available in 4.1.RC1 and the next `4.1.0.BUILD-SNAPSHOT` if you want to try.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48051744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50579668", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50579668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51036380", "body": "I discussed this with @artembilan and  I have updated my original patch to remove the addition of the priority header as we can have that in `AmqpMessageHeaderAccessor` for now. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51036380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51308405", "body": "Merged with some changes, see issue for more details. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51308405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51442211", "body": "Thanks for the review!\n\nI don't advocate the mapping of ALL headers. Prior to this commit you don't really have an easy choice: either only request (or reply) headers are mapped or _everything_ (so a request would have reply specific headers and vice versa).\n\nWhat the code does by default is mapping request headers and all non \"standard\" headers (i.e. user-defined headers) for a request and reply headers and all non \"standard\" headers for a reply.\n\nIf you don't want to break something in SI, that is actually **very** easy:\n\n```\npublic class YourSIHeaderMapper extends AbstractHeaderMapper {\n\n\n    ....\n\n    @Override\n    protected HeaderMatcher createDefaultHeaderMatcher(String standardHeaderPrefix, Collection<String> headerNames) {\n        return new ContentBasedHeaderMatcher(true, headerNames);\n    }\n```\n\ndone.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51442211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51610943", "body": "We decided to go for a simple AMQP mapper in `spring-rabbit` and leave those SI customizations in SI (which would be far easier to update if need to be).\n\nThat being said, the base class has been polished and a number of folks helped reviewing so I've actually applied all that to SI itself, see https://github.com/spring-projects/spring-integration/pull/1251\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51610943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52699361", "body": "J\u00fcrgen actually merged that already.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52699361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52884901", "body": "ping @jhoeller \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52884901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52935946", "body": "Hi,\n\nSomething is  wrong with your patch. It involves too many changes. Could you please rework it and squash the result in a single commit? Please also provide a description fo the change.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52935946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/54703919", "body": "Can you rework your patch to include only what's necessary please? Always start from master. You can find more info in [the contributing guide](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md)\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/54703919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57120318", "body": "Thanks. This is a small change but please confirm you have signed the CLA (details [here](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement))\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57120318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57279022", "body": "Good catch, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57279022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57385186", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57385186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57472742", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57472742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57599592", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57599592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59895670", "body": "Thanks for the PR. Have you signed the contributor agreement? (CLA). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59895670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59895968", "body": "Well, that's going to break existing apps, isn't it? Can you share a bit more context?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59895968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59945514", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59945514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60361317", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60361317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60361856", "body": "Closing this one as the related issue has  been fixed. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60361856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60361909", "body": "Closing this one as the related issue is resolved. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60361909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60561742", "body": "I will squash and amend your commit but could you please read the [contributions page](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md) ? Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60561742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60612981", "body": "The issue has been resolved. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60612981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60886286", "body": "There are unrelated changes in this commit (that were already submitted as part of #682)\n\nYou should push your work based on a branch instead of your master. Check [the contributions documentation](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md) for more details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60886286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/62105617", "body": "That PR is invalid because it brings too many changes. Please submit only what you intended to change, look at [the contributions page](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md) for more details. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/62105617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/62900871", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/62900871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63863699", "body": ":-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63863699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65380232", "body": "There's a problem with your PR, it's missing the import statement. Fixing that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65380232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65382073", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65382073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66908004", "body": "@xiaolongzuo you submitted a PR on a weekend less than a day ago :) We'll have a look, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66908004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/67466277", "body": "Thanks, have you signed the CLA? (link in the contribution page)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/67466277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/67467335", "body": "On a second look, we already have a candidate fix for that one (see https://github.com/snicoll/spring-framework/commit/8351fca7eed7b8c8f07a5999e0d80c02e0634a72). Maybe you could try that out? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/67467335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68184860", "body": "The related issue is now closed, phil please reopen if that PR is still under consideration. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68184860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68993853", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68993853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/70365897", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/70365897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/70623617", "body": "Cool, thanks. Have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/70623617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/71070721", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/71070721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/71406879", "body": "Thanks. Have you signed the CLA? \n\nPlease squash all your commits into a single one. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/71406879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/73701992", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/73701992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/73920526", "body": "Merged, Thanks a bunch Andy!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/73920526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/74029955", "body": "merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/74029955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75059890", "body": "merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75059890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76174731", "body": "Merged with some updates. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76174731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76382452", "body": "It's not that easy. You just broke collection injection (which is excercised by the test you had to change). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76382452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/81820941", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/81820941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/88783051", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/88783051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90524548", "body": "Thanks, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90524548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/102305881", "body": "Thanks for the PR, your work was integrated in a slightly different manner.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/102305881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103792073", "body": "Thanks. Have you [signed the CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103792073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103991892", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103991892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/106802055", "body": "Have you seen there is a `BackOff` support now? You can basically put whatever value you want there and it will use that instead of the default. I'd rather use that instead. Let me know if I am missing anything.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/106802055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107339494", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107339494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112094211", "body": "The problem is that you are not allowed to change the `JMS_DESTINATION` field of a `javax.jms.Message` per spec.\n\nExcerpt of the javadoc:\n\n> JMS providers set this field when a message is sent. This method \n> can be used to change the value for a message that has been received.\n\nI agree this sounds nice but I am not too keen to pursue this as it's not spec compliant.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112094211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112193673", "body": "I don't think I agree with your interpretation of the spec (cfr. [javadoc of `setJMSDestination`](http://docs.oracle.com/javaee/7/api/javax/jms/Message.html#setJMSDestination%28javax.jms.Destination%29))\n\n> This message cannot be used by clients to configure the destination of the message. This method is public to allow a JMS provider to set this field when sending a message whose implementation is not its own\n\nUsing that field for what you need is clearly against the statement above IMO (hint: Spring Framework is not a JMS provider) and that's not a programming model we want to put in the framework. \n\nCould you please create an issue in Jira with your actual need and we can take it from there? Juergen and I just discussed this and maybe we can envision a specific objet that holds the message and the destination rather than simply the response. It's not too late to include that in 4.2 if we can quickly find a good solution for this.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112193673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117242273", "body": "no worries.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117242273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/121858589", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/121858589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/121898981", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/121898981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124004886", "body": "thanks, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124004886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124322279", "body": "This relates to [SPR-13235](https://jira.spring.io/browse/SPR-13235)\n\nLooking at the commit, you are changing a bunch of unrelated stuff such as import statements. You should limit this PR to what you're supposed to change.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124322279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125863530", "body": "As I've said [here](https://github.com/spring-projects/spring-boot/issues/3599#issuecomment-125860493) this is the behaviour of the comparator, not `@Order` itself. I welcome any other opinion but it feels wrong from my perspective to add it there. \n\nMaybe we could add `@see OrderComparator` to make that link more explicit?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125863530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/126729359", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/126729359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127896024", "body": "Thanks. Have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127896024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127906212", "body": "Do what's described [in the contributing page](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement).  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127906212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127910024", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127910024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131126635", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131126635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131311719", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131311719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131530780", "body": "Merged, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131530780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132897354", "body": "Thanks. Have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132897354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132898971", "body": "See the [contributing documentation](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132898971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/134161946", "body": "Please create your PR from an up-to-date branch created from master. This PR has a lot of unrelated commits.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/134161946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/140348363", "body": "merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/140348363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/141405004", "body": "`@Import` is actually accurate. It allows you  to refer to configuration resources (typically XML configuration files). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/141405004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/141414835", "body": "Right, sorry. More coffee needed over here :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/141414835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/147206601", "body": "Thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/147206601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151511484", "body": "Thanks, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151511484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151865372", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151865372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/152833719", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/152833719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156829486", "body": "Fixed in [SPR-13680](https://jira.spring.io/browse/SPR-13680)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156829486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157075852", "body": "Cheers. Have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157075852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157324259", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157324259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157324614", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157324614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/158875815", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/158875815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/165794716", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/165794716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166112450", "body": "Thank you, I have upgraded caffeine in https://github.com/spring-projects/spring-framework/commit/15c7dcd11ab8a2f8c2a8bd7ba0e5e70304f5ae71 - Thanks for offering to add your plugin but I don't want to apply this in our build. We do monitor third party dependencies very actively and have some  process of our own. \n\nThat said, I'll share the list. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166112450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166310619", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/166310619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167501882", "body": "Interesting, thanks for the PR. I am curious, what made you do this? Have you noticed any hotspot in a profiler or something?\n\nHave you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167501882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167741593", "body": "Cool, thanks for the feedback!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167741593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168931749", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168931749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/172919706", "body": "Thanks for the PR: this was fixed as part of https://github.com/spring-projects/spring-framework/commit/29700658d4a6c337105c722f7b02857231c02020 (I see no reason to not set the `jobDataMap` if the details are not set).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/172919706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/174323918", "body": "What is the reason for closing this PR ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/174323918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/174447527", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/174447527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185174048", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185174048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185180123", "body": "Thanks a lot for the PR, this is merged in master. I would like to add your full name to some classes in recognition of your work but I am not sure what it is. Can you share that? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185180123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185211710", "body": "I've update the `@author` tag in https://github.com/spring-projects/spring-framework/commit/513c1ea3d96b09ddb8a256c3245c619ebfc063e2\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185211710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185267670", "body": "Your other commit got merged so could you please rework your PR to only include the new changes? I can see that you are pushing from master: usually a PR should be made against a branch.\n\nMinor grammatical changes do not need paperwork but to be on the safe side, please confirm that you've signe the CLA. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185267670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186111421", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186111421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186111487", "body": "Ping?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186111487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186540193", "body": "Such small typo change is fine but please do sign the CLA first.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186540193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186541014", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186541014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/187080755", "body": "No, I think `are` is just mentionne twice. I've fixed that in https://github.com/spring-projects/spring-framework/commit/a94ffbb17a7525a3e3fa0e3c377e8bdafac0e331 - Thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/187080755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192481241", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192481241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192481570", "body": "@jhoeller I think that PR is outdated now, right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192481570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194163042", "body": "I am actually confused that it does not work right now. I'll have a look.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194163042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194167616", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194167616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194219269", "body": "That was a note to acknowledge the pull request. Something must be wrong in the existing tests. Thanks for the PR, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194219269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194240773", "body": "I've actually fix that in https://github.com/spring-projects/spring-framework/commit/8e24a4153c83fb4ba3d8c8a24503c2a6adf35e58 with a review of the current tests suite. I thought at test was exercising this scenario but that wasn't the case. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194240773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194364626", "body": "https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-individual-contributor-license-agreement-icla\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194364626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194730167", "body": "Sorry but there is no reason to strictly wrap at 90 chars. The current code looks of from my perspective. Thanks for the PR anyway.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194730167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/197398367", "body": "Merged with a polish commit in f422e49\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/197398367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/205196472", "body": "Thanks, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/205196472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/205354642", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/205354642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208724451", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208724451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208724922", "body": "You're fixing typos in Spring Framework as well? Welcome! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208724922/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 2, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208725375", "body": "Alright, let's close this one and keep the change for 4.3 only. RC1 is out by the way...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208725375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208725797", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208725797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208726326", "body": "ping?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208726326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208726555", "body": "@jhoeller has fixed this one already. Thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208726555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208726982", "body": "@julianladisch you need to sign the CLA for us to process your proposal. Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208726982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208736737", "body": "I didn't click the \"merge\" button because we're not merging that way. Github got confused by that but your commit got in exactly as you wrote it. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208736737/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/210769294", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/210769294/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211754305", "body": "Merged, thank you Johnny!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211754305/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211756617", "body": "I guess that was opened by mistake.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211756617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214151163", "body": "Thanks, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214151163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218755727", "body": "Merged, thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218755727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221493908", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221493908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221783849", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221783849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221784209", "body": "Interesting, thanks!\n\nping @sdeleuze \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221784209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224826367", "body": "> No similar issue is found in project JIRA\n\nCould you please create one and link your PR? thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224826367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224833754", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224833754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225133622", "body": "Thanks for the PR, the issue has been fixed, see the jira issue for more details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225133622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226106486", "body": "Sorry, I hadn't a chance to look at this yet. It's on my todo list.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226106486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226107961", "body": "Thanks, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226107961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226110997", "body": "Is there a problem signing the CLA? Since it's your idea I'd rather merge your contribution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226110997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226444689", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226444689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226688103", "body": "merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226688103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226710872", "body": "I am confused. Why have you closed this pr?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226710872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/228996903", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/228996903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229065922", "body": "I am assuming this was opened by mistake.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229065922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229082000", "body": "Thanks, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229082000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229086397", "body": "See [the contributing document](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-individual-contributor-license-agreement-icla)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229086397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229086857", "body": "All good, thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229086857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229277015", "body": "Thanks for the PR, I've fixed the issue in [a larger revision](https://github.com/spring-projects/spring-framework/commit/6cd85ddde7334e799d7d321836ddfd806ecc6903) adding missing tests in the process.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229277015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229890567", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229890567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229891158", "body": "Not sure I like the `{code` change. I've removed the extra `}` - Thanks for the PR anyway.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229891158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229898697", "body": "I went ahead and added those changes myself. Thanks for the PR\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229898697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229901059", "body": "Wow, I wasn't even aware of that PR. You're probably aware that SPR-9275 has been implemented in 4.1 in a slightly different approach. Thanks for the PR anyway!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229901059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229901704", "body": "@candrews looking at my assigned PR. That doesn't seem to work very well on your fork. Is there a way to increase the timeout or something?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229901704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229905929", "body": "@nkjackzhang indeed and I was about to scan the documentation to fix the remaining ones. A couple of remarks:\n- Please submit one commit instead of those individual commits: you can rebase and squash to a single commit and push force on your branch and it will update this PR\n- Please take the line wrapping into account, several changes are breaking our code format style. \n\n> The one big exception to the above line wrapping rules is Javadoc where we aim to wrap around 80 characters for maximum readability in all kinds of contexts, e.g. reading on Github, on your phone, etc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229905929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230257116", "body": "The related issue is now closed. Thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230257116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230257235", "body": "The related issue is now closed. Thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230257235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230721520", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230721520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231016586", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231016586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231949583", "body": "Thank you for the PR. Have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231949583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231952934", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231952934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231953511", "body": "Thanks for the PR but the current code looks fine as it is. Changing the second `{@code}` would link to the method itself. I think the intention was to use code and have a separate `@see` below.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231953511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231953969", "body": "ping @spodgurskiy \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231953969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231955816", "body": "Ah good point, that's a glitch introduced in a6a6aed17f3ef9e9f774f25c14c7e6e5bb5dd2f3 - Fixed in https://github.com/spring-projects/spring-framework/commit/c425e774a3fc96f205832541f630dd205373b940\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231955816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232028236", "body": "Usually you should always go through Jira and then submit your PR with a reference to the issue you've created. In that particular case, I am not sure but maybe @rstoyanchev has an opinion?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232028236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232382867", "body": "I was about to write that :) \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232382867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232587978", "body": "@jmithmstr it is not blocked, it is waiting for triage. Someone needs to have a deeper look to it. If you create an issue that would probably speed this up. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232587978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232613505", "body": "Thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232613505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232620585", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232620585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232730566", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232730566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233239545", "body": "Good catch, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233239545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233240247", "body": "Good catch, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233240247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233546233", "body": "Thank you for the PR! Could you please create an issue for this pull request in the [Spring Framework issue tracker](https://jira.spring.io/browse/SPR). When you do, please make sure to fill the `Reference URL` with the link to this PR. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233546233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233957476", "body": "The issue has been resolved, see the Jira issue for more details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233957476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234919416", "body": "This issue has been fixed so I am closing this PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234919416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235828930", "body": "@phillescott thank you so much for the PR Phill. I've commented on Jira.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235828930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235846200", "body": "That's much better IMO. If you create a `Cache` bean named `foo` and it's `Cache#getName` returns `bar` I would expect `bar` to be the valid name. If you feel otherwise, just align the cache name and the bean name.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235846200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235872744", "body": "I have no idea what \"SSM cache\" is but if it's your code (or you are willing to extend it) you could do something like this:\n\n```\npublic class SsmCache implements Cache, BeanNameAware {\n\n  private String name;\n\n  @Override\n  public String getName() {\n    return this.name;\n  }\n\n  @Override\n  public void setBeanName(String name) {\n    this.name = name;\n  }\n\n  // rest of cache impl\n}\n```\n\nThat way you are sure that `getName()` always match the bean name. That's another way to achieve the same use case.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235872744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236359007", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236359007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236587558", "body": "There is a reference to a Jira issue. We'll work on that as part of Spring 5\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236587558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238803886", "body": "Merged, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238803886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238804174", "body": "@hyojinbae could you please create an issue in our tracker to explain the reasoning behind this PR? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238804174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238889364", "body": "@dimitrovchi did you intend to close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238889364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238970270", "body": "No apologise needed. You can actually update an existing PR by pushing more commits to your branch.\n\nIf you want to keep as single commit you can rebase and push force. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238970270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240058605", "body": "> How that will behave with infinite streams?\n\n@sdeleuze that does not make any sense to me. IMO, the only thing we should really support is `Mono` (even if we have `Mono<List<X>>`). The result of the method invocation is going to be cached and the cache abstraction has no special support for collections (if you return a collection, we cache that the exact same way as we cache a single pojo). \n\nAn infinite stream means you're trying to cache a collection of infinite size. Something is wrong elsewhere if you're trying to do that. \n\nI can see some issue with the SpEL support (especially the one that has to run upfront). But if we limit ourselves to `Mono` with the `ReactiveAdapter` we should be fine.\n\n@padilo would you be willing to rebase your PR and rework the code to use `ReactiveAdapter` rather than your current solution? That would allow to transparently support more return types. I'd only support `Mono` for now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240058605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240132530", "body": "Looking at the change, I guess you opened that one by mistake.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240132530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240643317", "body": "Wow that's awesome! I can't reply you right the way regarding `ReactiveAdapter` as I haven't researched how to use it yet since you're doing my job ;-)\n\nMy intent was to look how the reactive controller (`@RequestMapping`) deals with return types: I know they have a single reactive \"kind\" internally with something doing the translation in case a user has selected a different reactive type. Maybe @rstoyanchev could help us?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240643317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241244621", "body": "That's sort of what I have in mind.  Let me go back on this one once I am done with other things and we can resume the discussion at that point. Thanks a lot for all your work!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241244621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242334175", "body": "@mdeinum we obviously need Bastian Voigt to sign the CLA. Do you have a way to reach out to him?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242334175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243050070", "body": "@destan what's wrong with the statement exactly? `Inject` has no optional so if you want to inject a component that _might_ not be there you'd write the following:\n\n``` java\n@Named\npublic class Foo {\n\n    @Inject\n    public Foo(Optional<Bar> bar) { ... }\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243050070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244094936", "body": "Thanks, merged in `master` and `4.3.x`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244094936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244988934", "body": "Thanks for the PR but that's not a typo (look at the type of the servlet). `/example` is the mapping of the custom `DispatcherServlet`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244988934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245200353", "body": "@kazuki43zoo sorry, I missed that context. This has been merged in `master` and `4.3.x`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245200353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246184913", "body": "@qxo please create a jira issue and describe the issue (preferably with a sample). Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246184913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247983599", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247983599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247985981", "body": "Merged, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247985981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249810237", "body": "I am not sure I like that change. I was about to try to resolve the placeholders in the parser itself rather but it looks like the editor may also resolve the array when translating the string to a `Resource`. I am sure @jhoeller has an opinion about the best course of action.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249810237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251143731", "body": "@padilo thank you so much for the PR: it really helped to look at something concrete with regards to the feedback we get on Spring 5. At this point, I am afraid that the implementation does not match where we're heading.\n\nIf we add support for this, we need to be reactive all the way so we need a `ReactiveCache` with a `Mono` return type for the low-level cache operations. Also, `@Cacheable` has some features that do not make much sense in this new programming model so we'll probably need a dedicated annotation as well.\n\nIt looks like we're targeting the support of `Mono` only for now, as we've already discussed. But we definitely need to support reactive parameters as well and defer the computation of the key  when such parameters are available. \n\nWe're still investigating if actual implementations of this `ReactiveCache` will be provided by various caching libraries. Also, JSR-107 isn't  reactive for the moment so we won't be able to use it in that mode (one more reason to use a  separate annotation).\n\nI am now trying to build a test suite of what the behaviour should be and take it from there. I'll report on the Jira issue you've  created.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251143731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253971881", "body": "Thank you for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253971881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253971944", "body": "Thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253971944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255698829", "body": "We prefer to have things the other way around: discussion for non trivial changes in Jira and then a PR. This avoid you spending time on something we wouldn't ultimately include. \n\nCan you please create a Jira issue?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255698829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255700135", "body": "On a second look on the PR and having double check with @jhoeller we won't accept that change unfortunately. We have several shorter options for those and we don't think it's worth adding them in the core framework. Thanks for the PR though!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255700135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255707129", "body": "`isNotEmpty` is longer than `!isEmpty`. As for `isBlank`, we got `hasText` vs `!hasText` already. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255707129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256067585", "body": "Merged, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256067585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256274755", "body": "Thank you for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256274755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256560909", "body": "Merged, thanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256560909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258382992", "body": "@qh529 it looks like you're asking a question and that's the wrong place to do so. Please create a question on stackoverflow and make sure to add the `spring-cache` tag.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258382992/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262453750", "body": "@kervin521 I am not sure I follow and this PR is not a place for questions. Please raise them on Stackoverflow. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262453750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262715065", "body": "@quaff please create a Jira issue for this.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262715065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263259919", "body": "@Yevhenii-Melnyk please don't create a PR from `master`. Every time you synchronize with the upstream repo, this will automatically close the PRs you've created from it. Please apply your changes on a branch and push that branch on your fork. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263259919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267073514", "body": "@moores-expedia please create a Jira issue for this change. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267073514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267284724", "body": "@zhaoshengxuan108 I am assuming you opened this PR by mistake (there is no change here). Please stop or let us know how we can help you.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267284724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268740518", "body": "Thank you for the PR!\r\n\r\nWe already had several requests to order things in actuator endpoints and those requests were rejected for the most part. Maybe this one  would not. Could you please create an issue in Spring Boot? We'll see where the change needs to be made at that point.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268740518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269858020", "body": "@marschall thanks for the PR, no need for those confirmation message about the CLA anymore, we have a bot that checks that automatically based on your account. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269858020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270164825", "body": "Fixed in https://github.com/spring-projects/spring-framework/commit/35bd00beaf25943521b5650ef6e004291b19eff7 - Thanks for the PR!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270164825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270313721", "body": "@coryfoo We were not allowed to use Java8 types in public interfaces since we are compatible with Java 6, 7 and 8. Only the current master can use Java8 directly. Thanks for the ping.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270313721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270319509", "body": "Fixed in https://github.com/spring-projects/spring-framework/commit/3f97ab183e08ee0001ee98b9614770dad8d29155", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270319509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270319615", "body": "Fixed in https://github.com/spring-projects/spring-framework/commit/19e77cd140d6efd2736a43b8688a8a3ffb6f2a7b", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270319615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271558861", "body": "@springrain please create an issue for this change and provide more details about the use case.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271558861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271938308", "body": "Could you please push tests that exercise that failing use case please?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271938308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272469496", "body": "Nope that's fine. To be honest, I am not sure I've understood what the problem is so I need to review the code first.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272469496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274115316", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274115316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274122040", "body": "Thanks for the PR but that's silently ignoring what `allowNulls` is supposed to do. If you want to create a cache that allows null values, set that flag to `true` when you create the instance.\r\n\r\nThe exception message could be improved though, I've created [SPR-15173](https://jira.spring.io/browse/SPR-15173) for that.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274122040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275662050", "body": "Thanks for the PR!\r\n\r\nQuickly discussed this one with @jhoeller and we should probably revisit that class to avoid that kind of mistake. I've created [SPR-15196](https://jira.spring.io/browse/SPR-15196)\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275662050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277174497", "body": "@pivotal-issuemaster this is a trivial change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277174497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277257954", "body": "I am not too keen to make that concept a first class citizen. This really looks like testing only and something that should not pollute the production code.\r\n\r\n@ben-manes do you have any opinion about this?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277257954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277277607", "body": "Thanks Ben. That confirms my initial reaction.\r\n\r\nThanks for the PR anyway @ulich !", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277277607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277699891", "body": "@dbrimley thanks for the contribution. We already had an existing test class for that stuff so I've just improved that (see my polish commit).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277699891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277914950", "body": "@janetgregory please read https://help.github.com/articles/about-notifications/", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277914950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278669230", "body": "Thanks for the PR!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278669230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279632365", "body": "Thanks for the PR! See my comment on the related Jira issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279632365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279657067", "body": "Thanks for the PR!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279657067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280821578", "body": "It has been backported to 4.3.x already. \r\n\r\n> I find it strange that cache failures would by default cause fatal errors (to a request).\r\n\r\nI don't think there isn't any other sane default. Hiding the error would be way worse IMO.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280821578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280822073", "body": "I think I already answered to that. The default is binary, either you hide the exception or you don't. If you care (and that's perfectly fine if you do), configure your own `ErrorHandler`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280822073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281381906", "body": "@stonio thanks for the PR, we prefer a single commit rather than small atomic commits. Can you please squash all that and push force your branch?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281381906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281636612", "body": "Thanks, we'll backport it to `4.3.x` later today.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281636612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/283709649", "body": "@mathieuales the PR is still open (and so is [the Jira issue](https://jira.spring.io/browse/SPR-14818). In other words, it's not available yet.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/283709649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284030213", "body": "Thanks for the PR. please resubmit with master, we are taking care of backports anyway. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284030213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284213829", "body": "Thanks for the pr!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284213829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284700040", "body": "@pivotal-issuemaster this is an obvious fix", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284700040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284702731", "body": "Thanks for the PR!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284702731/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287096655", "body": "@seanmmills thanks for the PR. Sorry we failed to process it, we usually add a link from the Jira issue but we forgot that for some reason.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287096655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289382249", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289382249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289383173", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289383173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289383665", "body": "Merged, thank you!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289383665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289384692", "body": "@tonymanou could you please create an issue in the tracker for this?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289384692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289384839", "body": "Thanks for the PR but this is by design, see [the jira issue](https://jira.spring.io/browse/SPR-15288) for more details.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289384839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289419430", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289419430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289454983", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289454983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289456880", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289456880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289458078", "body": "@jhoeller did you get a chance to look at this one?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289458078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290967161", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290967161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292770425", "body": "Merged, thank you!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292770425/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292770448", "body": "@jhoeller you are on Windows right?  Can you check this one please?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292770448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292876038", "body": "Merged, thank you!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292876038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294336831", "body": "@alex-on-java thanks for the PR but it boils down to a stylistic preference and we prefer to keep the code as it is now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294336831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295136375", "body": "Merged, thank you!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295136375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295227218", "body": "@dmitriyartanov this change requires a Jira issue. Can you please create it and explain in more details your problem?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295227218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295602024", "body": "https://jira.spring.io/browse/SPR", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295602024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296113811", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296113811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296362010", "body": "follow-up on the Jira issue you've created.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296362010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296941451", "body": "@janesser we need a Jira issue to discuss the reason of this change first. Please create one, providing more details about the context.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296941451/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296953444", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296953444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297948739", "body": "Merged, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297948739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298246815", "body": "Thanks for the PR! SPR-15189 is fixed, check the issue for more details.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298246815/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298557687", "body": "@gvdenbro we need a Jira issue for this change. Can you please [create one](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298557687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299133479", "body": "@Flounn we need a Jira issue for this change. Can you please create it?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299133479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299192334", "body": "I guess that was opened by mistake.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299192334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299794818", "body": "@Skarafaz we need a Jira issue for this change. Could you please create one [in our tracker](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299794818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300075148", "body": "@daggerok as I've asked you on the issue you've opened in Spring Boot, we need a Jira issue in our tracker for this change. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300075148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301002273", "body": "@pathfinder2104 we need a Jira issue for this change. Could you please create one?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301002273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302871307", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302871307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303134235", "body": "@daggerok is that PR still relevant? ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303134235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303379846", "body": "@khannedy that sounds interesting. Could you please create a Jira issue for that change?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303379846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304593050", "body": "@Buzzardo your branch is not clean and this PR can't be merged. Please rework this PR to have a single commit (you can rebase to master proper and push force on your branch to update this PR)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304593050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304790844", "body": "Thanks for the PR but your copy of master must be outdated as those 3 typos have already been fixed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304790844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305407117", "body": "@Enigo thanks for the PR! Could you please create a Jira issue for this change?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305407117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305429016", "body": "nope, I have no right on that project, sorry. I can delete the issue though (and I did).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305429016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305974650", "body": "@pivotal-issuemaster this is an obvious fix", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305974650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305974694", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305974694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307303794", "body": "@diguage thanks for the PR but please stop amending it because it makes it harder for me to review it. There are a lot of changes to review here already. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307303794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307375194", "body": "No need to be sorry :)\r\n\r\nThe ideal situation for me would be that you squash all your commit in a single one (since I'll have to do it anyway) and rebase on master. You can do so by squashing your commit in your branch and push force it.\r\n\r\nI haven't got the time to review the PR but if you keep adding commits it's not compelling for me to get on it, that's all I tried to say. Let's keep it as it is for now (no new changes), we can always work on another PR if you find more code to change. Also, the bigger a PR is, the more time is likely to be necessary to review it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307375194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307767568", "body": "Thanks for the PR but those 3 interfaces are fine as they are now, see comments for more details.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307767568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308128776", "body": "@diguage to emphasis what @jhoeller just said, that PR contained [a pretty nasty regression](https://github.com/spring-projects/spring-framework/pull/1459/files#diff-3c5b4136cbf2f7d236c92bb4016b3cb0L227) and the time required to review such change is too high compared to what our IDE does for us.\r\n\r\nThanks for the PR anyway!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308128776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309012419", "body": "@rbonifacio thanks for submitting your first pull request! Unfortunately, please note that we're not usually doing such code style refinements via pull requests. If you'd like to provide further pull requests, please focus on feature tickets. For code style issues, you might simply create a JIRA task pointing out the refinement (or a whole range of refinements), with us sorting it out on our end and no pull request needed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309012419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309694982", "body": "Indeed :) - Thanks for the PR anyway", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309694982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313367251", "body": "@simplicii please create a Jira issue for this change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313367251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314524907", "body": "@xnslong can you please create a Jira issue for this change?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314524907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314669442", "body": "@solidjb please create a Jira issue for this change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314669442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314707850", "body": "I've done that for you, check the update on the Jira issue", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314707850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314800444", "body": "@hackerwins thanks for the PR and sorry for the late reply!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314800444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317640877", "body": "@drumonii please create a Jira issue for this change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317640877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/318996144", "body": "This actually broke the build (though Travis isn't reporting it)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/318996144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322995057", "body": "@tminussi sorry for the late reply. Thanks for submitting your first pull request! Unfortunately, please note that we're not usually doing such code style refinements via pull requests. If you'd like to provide further pull requests, please focus on feature tickets. For code style issues, you might simply create a JIRA task pointing out the refinement (or a whole range of refinements), with us sorting it out on our end and no pull request needed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322995057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/323659489", "body": "Thanks for the PR!\r\n\r\nActually those underlines are required. The problem is that the code snippet is processed verbatim and it should include the `quotes` substitutions. I just did that in 3d28e80", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/323659489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324269067", "body": "@zsoltii please create a Jira issue for this change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324269067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324544907", "body": "@bbohl thanks for the PR! Could you please create a Jira issue for this change?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324544907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324657640", "body": "Thanks for the PR!\r\n\r\n`CaffeineSupplier` is definitely not framework material. Such feature has already been requested on the Spring Boot tracker and declined fyi.\r\n\r\nAs  for the change to the cache manager itself, I am not sure. This  current way would be a specialised function that would return the same builder regardless of the name. So perhaps we could change the implementation to do that instead.\r\n\r\nWhat do you think @jhoeller ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324657640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324705295", "body": "You didn't waste my time at all! Thanks a lot for your effort. The PR is still open and under consideration. \r\n\r\nThanks for the feedback Ben!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324705295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325753864", "body": "@Buzzardo unfortunately that fix has already been applied. (SPR-15906 is already resolved). The rest of the changes look good, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325753864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325862000", "body": "The pull request is still open and will be processed. I am just informing you that SPR-15906 was already fixed when you pushed the code.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325862000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326021728", "body": "@sbrannen I already mentioned that in my first comment. I'll make sure to rebase that work on master. Thanks @Buzzardo!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326021728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326510363", "body": "Sweet, thank you!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326510363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330204807", "body": "Thank you so much for your first contribution to Spring Framework. This is now merged in `master`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330204807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330770176", "body": "@xavier630 thank you for your first contribution to Spring Framework! This has been merged to `master` and backported to `4.3.x`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330770176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333054714", "body": "@zzt93 please create a Jira issue for this change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333054714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333079173", "body": "I am not sure I like that the complete creation of the method endpoint is delegated to a single instance in the context for that purpose.  What you are asking here is full control and I don't think this is warranted for what you're trying to do. \r\n\r\nWhat happens if something else would like to tune how the endpoint is created? \r\n\r\nI think it would be interesting if you shared what you are actually changing in the endpoint and perhaps we can work a on customizer approach instead (full control is also nice but that should be last resort rather than the first and only option).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333079173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333110385", "body": "Thanks for the PR but I am not keen to merge it. It is a very broad solution to a very specific problem that includes many other layers and I'd rather focus on the issue at hand rather.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333110385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333113844", "body": "@arend-von-reinersdorff thank you for the PR. Actually this section already exists but has moved to `integration.adoc`. I fixed the broken links in f2d040c", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333113844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333115299", "body": "Merged, thank you!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333115299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333115869", "body": "Thanks for the PR but that doesn't format well either. I've rephrased to avoid that problem. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333115869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333119794", "body": "The difference is there is no public API for that. You're offering to provide one so that becomes a feature of the framework. That, on its own, is a reason to put some boundaries.\r\n\r\n> This is per BeanFactory, and, imho, I guess one wants the same behavior for whole BF's contex\r\n\r\nThe point I was trying to make is that your solution means one particular component is in full control. Here in the context of tracing. If this is a feature and another component would like to also take action, it does not seem possible. It's a on/off switch.\r\n\r\n> Here\r\n\r\nWhat you need is post-process the `MessagingMessageListenerAdapter`, potentially by returning a complete different instance wrapping it. That sounds a better option to me. It looks like all that would be irrelevant if `MessagingMessageListenerAdapter` were beans because you could then simply create a `BeanPostProcessor` for them.\r\n\r\nWDYT @jhoeller?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333119794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333358904", "body": "@MottoX thank you so much for your first contribution to Spring Framework. This is now merged in `master` and `4.3.x`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333358904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333751440", "body": "@tomfitzhenry thank you so much for your first contribution to Spring Framework. This has been merged in `master` and `4.3.x`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333751440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/334664099", "body": "@WilderPereira thank you so much for your first contribution to Spring Framework. This is now merged in `master`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/334664099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498296", "body": "@teerapat2539 I am not sure you've raised those various PRs on purpose. If you did, please clarify and we can reopen.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498339", "body": "See #1559", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498393", "body": "See #1559", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498439", "body": "See #1559", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336498439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336622536", "body": "@pablocloud thanks for the PR! We usually tend to have support for caching libraries outside of Spring Framework these days. That said, I am not sure I understand the use case yet. Can you please describe it in more details?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336622536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336705025", "body": "Thanks for the feedback. That confirms this change is quite specific and not a material for the framework. You can put the code in a separate jar that you release to Maven central for instance, I don't think there is a specific place where that code should land.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336705025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336731900", "body": "@teerapat2539 please stop submitting broken PRs.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336731900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337132424", "body": "@drumonii thanks for the PR. I've backported the changes to `4.3.x` already.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337132424/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338466650", "body": "Thanks for the PR but the issue has been declined.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338466650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338569295", "body": "@ocadaruma thank you so much for your first contribution to Spring Framework. This has been merged to `master` and `4.3.x`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338569295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340141467", "body": "@stevenschlansker please create a Jira issue for this change", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340141467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344511647", "body": "@catlin-dev please use your own fork if you want to experiment with Github's PR facility.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344511647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345170122", "body": "I guess it's not public for a reason. Please create a Jira issue to explain your use case and why you need those methods to be public.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345170122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345607721", "body": "@higankanshi please create a Jira issue to discuss this change. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345607721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345925524", "body": "@pivotal-issuemaster this is an obvious change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345925524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345925595", "body": " @hongxingwz thank you so much for your first contribution to Spring Framework. This is now merged in `master`  and `4.3.x`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345925595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347806709", "body": "@qxo can you add a tes that reproduces the bug you're experiencing?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347806709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347849990", "body": "@qxo that's not what I am asking. Can you please push an update to your PR with a `@Test` that reproduces the issue (and doesn't fail anymore with your change).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347849990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350513736", "body": "@boroborome please create a Jira issue for this change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350513736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350975014", "body": "@denis-zhdanov we need a Jira issue for this. Can you please create one?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350975014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352066080", "body": "@hadjiski sorry, this one got overlooked. We need a Jira issue for this change, can you please [create one](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352066080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353641950", "body": "@denis-zhdanov tickets aren't triaged here, that's why I asked you to create a Jira issue. And I can see you got feedback about a week after you've created the issue", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353641950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353725939", "body": "@nkjackzhang thanks! Merged in `master` and `4.3.x`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353725939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353778660", "body": "@Linolium thank you so much for your first contribution to Spring Framework. We need a Jira issue to discuss this change, can you please [create one](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353778660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353938168", "body": "@rahulsh1 we need a Jira issue to discuss this change. Can you please [create  one](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353938168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354012602", "body": "See #1615", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354012602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354957313", "body": "@KitHat we need a Jira issue in the framework issue tracker to discuss this change. Can you please [create  one](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354957313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354957929", "body": "You referenced DATAJDBC which is not the spring framework's isssue tracker key. I can see now that the issue has been moved.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354957929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355502151", "body": "Sure, [here](https://jira.spring.io/browse/SPR).\r\n  ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355502151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356369288", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356369288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357696344", "body": "Merged, thanks @izeye!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357696344/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358373169", "body": "@JanStureNielsen thank you so much for your first contribution to Spring Framework. This is now merged in `master`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358373169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359158023", "body": "Thanks @izeye!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359158023/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359161873", "body": "@mrmaus we need a Jira issue to track this change. Can you please [create  one](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359161873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362184574", "body": "Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362184574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362521324", "body": "@meltsufin we need a Jira issue to discuss this change. Can you please [create  one](https://jira.spring.io/browse/SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362521324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362897669", "body": "Merged, thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362897669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363126911", "body": "Github tags you mean? There are there for me. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363126911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5776900", "body": "`ext.tilesRequestVersion` can be confusing at first sight. It can be understood as the _requested_ version. I don't know if that makes sense to rename it, just my 0.0.2\u20ac\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5776900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941584", "body": "Sam, I found 616 usage oif `{@code @` on master. Do you intend to fix that as well?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941693", "body": "Oh great, I misread your commit. I thought you changed `{@code @` to `{@code &#064;`\n\nSorry for the noise!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6519077", "body": "I am not sure I understand what you meant. This feature is available on master and `4.1.0.BUILD-SNAPSHOT`. A RC1 is scheduled end of this month.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6519077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7117968", "body": "Maybe we should rename that to `ListenerContainerInstance` as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7117968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8406505", "body": "indeed. Fixed in 330897b411000a30bcb94c81a7d1304c01bddae6. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8406505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8932950", "body": "mmm, looks like it indeed. Could you please report the issue?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8932950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10572001", "body": "Could you please create an issue in our tracker? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10572001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14410598", "body": "Can you please create an issue with what you're experiencing?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14410598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14416143", "body": "issues are managed on [Jira](https://jira.spring.io/browse/SPR)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14416143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16673399", "body": "@juanmf this is not the place to discuss about an issue. If you feel you've hit a bug in the framework, please [create a new issue](https://jira.spring.io/browse/SPR/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel) that explains what you're experiencing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16673399/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16731662", "body": "@rstoyanchev could it be that it broke the [Boot build](https://build.spring.io/browse/BOOT-PUB-3874)? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16731662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17061452", "body": "@aalmazzo this is not the place to discuss issues. If you believe you've found an issue in Spring Framework, please [create an issue in the tracker](https://jira.spring.io/browse/SPR)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17061452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17398755", "body": "@klaus-sap that's not the place to discuss this. Please open a PR or create an issue in [our issue tracker](https://jira.spring.io/browse/SPR)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17398755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18957940", "body": "It's not a duplicate bean registration. Rather than asking why it's not protected, maybe you should explain how it is a problem for you. Commit comments aren't a great to exchange idea so feel free to create an issue in the tracker with your problem and we can take it from there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18957940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19857200", "body": "@joshlandin thanks for the feedback! Could you please create a Spring Framework issue at https://jira.spring.io/browse/SPR ? ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19857200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19996051", "body": "@javase it's still in progress but that information is [on the wiki](https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-the-Spring-Framework)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19996051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20327779", "body": "@CallMeLingMin I am afraid you'll have to comment in English.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20327779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20990866", "body": "@yluhadiya7 commenting on commit isn't a good way to get feedback. The code may have been polished or adapted. If you believe you have found an issue, please create an issue in [the tracker](https://jira.spring.io/browse/SPR) with as much details as possible (a sample would be ideal).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20990866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23050512", "body": "@usulkies commenting on a commit that is 5 years old is not a great way to get support. 3.2 is EOL and this code isn't present in recent versions of the framework. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23050512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/28028704", "body": "@IronWong commenting on a commit is not a great way to get support. Please ask on StackOverflow", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/28028704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/9035958", "body": "This is redundant information to me (I didn't delete it, I moved it). Would be this useful when _not_ using Java config? If so, that's what I am missing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/9035958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11774516", "body": "I see in multiples place that you have removed the `**` syntax around configuration options that we want to mark in bold. This sounds like a good idea to me. Can you explain why you removed it? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11774516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14809636", "body": "See also https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#blank-lines\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14809636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15863574", "body": "Fixed in f666d06\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15863574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922390", "body": "fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922392", "body": "fixed, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922404", "body": "That was a mistake from a previous refactoring. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922408", "body": "HeaderMatcher is protected now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15922408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/25234439", "body": "Regardless of whether we want to do this or not, we shouldn't expose the raw mutable list. This also means that your tests must be rewritten. \n\nBefore doing that, let's discuss on the Jira issue what we want to do here. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/25234439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/25341869", "body": "Yes, that's ok. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/25341869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/70385534", "body": "That one should actually stay to [separate inner classes from methods](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#blank-lines).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/70385534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/70385890", "body": "We're not sure yet we want to do that. And we probably won't. Can you push force an update that doesn't use try/resource please?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/70385890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/108111923", "body": "That most certainly broke non-Windows build.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/108111923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/108111994", "body": "Ditto.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/108111994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/23915990", "body": "BTW, you can squash and push force on your branch instead of creating yet another PR\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/23915990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119540116", "body": "That extra space isn't necessary, right?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119540116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119540436", "body": "that looks like a complete different conversation to me. What do you mean by \"within a `BeanFactory`\". I wouldn't expect anyone to use those annotations there (and that's not very typical in user code anyway).\r\n\r\nThe `@Value` is yet another thing.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119540436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121054423", "body": "I think this one is more of a recommendation than a hard requirement and enforcing it will lead to unpleasant results.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121054423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121054532", "body": "In Spring Boot, [we've restrict ourselves to XML and Java](https://github.com/spring-projects/spring-boot/blob/master/.editorconfig). We could add groovy and kt files here but I am not keen to add more, at least for a first revision.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121054532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121251843", "body": "I don't think this is required really. Just because an interface has a single method doesn't mean it's a functional interface. These callbacks are not meant to be used with lambdas so I don't think this should be done.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121251843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121251845", "body": "Ditto", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121251845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121251852", "body": "I don't know, perhaps @jhoeller has an opinion?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121251852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/167791572", "body": "This is a potential hookpoint where a subclass may use that information. Please revert this.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/167791572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/167791758", "body": "Idem", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/167791758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/167791931", "body": "Looks unrelated to the intention of this PR. Can you please clarify?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/167791931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sbrannen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f4d5f17f77d9bf74aa03ca1284f657374618686", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2c2ce55f47cddd4e510cbbdefb34d7dde6144762", "message": "Support target type in JsonPath assertions for MockMvc results\n\nThis commit picks up where SPR-14498 left off by adding support for an\nexplicit target type when using JsonPath to perform an assertion against\nthe response content using a Hamcrest Matcher.\n\nSpecifically, there is a new overloaded value(Matcher<T>, Class<T>)\nmethod in JsonPathResultMatchers for use with Hamcrest matchers where\nthe target type (i.e., Class<T>) can be specified.\n\nIssue: SPR-16587"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/42b4f6e1ff721169166d9c59b7aa4caffa6b9fb8", "message": "Clean up warnings and dead code in spring-core module"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2575c26020ebec0af71d2d646194c9ca4d4877e1", "message": "Clean up warnings and dead code in spring-webflux module"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1fa1f2b58a65683874e22e3f029f9f6e54186407", "message": "Delete unused import"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/107f8bb5fd1fd7a0828ae888e04517ac3b2e516e", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00fea23e6b47829f0be7e603c0ba023c5763796f", "message": "Introduce test for WebTestClient with RegEx-based JsonPath"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b14301bfba93b93ae068d0353b220830c38014d8", "message": "Allow TestContextManager to be compiled in Eclipse again"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f5a3e2647e5e269013298625991ae0cd5c4069b", "message": "Polish formatting in Groovy scripts"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/df0b39e8acd8566f9b0e79989a9897b251390687", "message": "Add missing packages to Groovy scripts"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2454b31b30231272b3db9e7d83bc7d82e7f3a4f1", "message": "Polish MockRestRequestMatchers[Tests]"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f932796201b056b440a3ab7ed3cb74dc5818292b", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fef0c7b15193e61a19302554ec3c421b64af7b7f", "message": "Throw AssertionError instead of IAE in MockRestRequestMatchers"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1513e7be635acff7c5520b93e79991a5bb86791d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/24adc7d3c6a27102696ebacd14bbc247a6acba8b", "message": "Delete unused imports"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c11a963b1e5bf8dda3dc15037400c45f1b15644c", "message": "Remove dependency on apiguardian-api in spring-test\n\nThe apiguardian-api dependency is once again a mandatory transitive\ndependency of JUnit 5 since JUnit Jupiter 5.0.3."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/02fb5a41210691e5b3365448bc8bc7d0ee79db0e", "message": "Use effectively final local variable in lambda expression"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b612f53e274cf89db6ccab4eb26fad28021a6263", "message": "Rename doesExist() to exists() for header assertions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/165ca12e6d6f7f305417fbce35e466f567821fb1", "message": "Add doesExist() to HeaderAssertions for WebTestClient"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/431494096a372e5a80f655f7cdfce96172d0d97d", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b4ec72378cb06c9e7c8f1c44f3aba1565108232", "message": "Upgrade to JUnit Jupiter 5.0.3\n\nIssue: SPR-16384"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c88f11f9583bf5123d7f51d81fe4c1bbe40d6e51", "message": "Avoid deprecation warnings on JDK 9 in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/767ea9db8370945a364b94d770b81d05d0209aef", "message": "Fix minor logic error in SocketUtils"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f9689dfe483e3a431b4337fea4114eaeaeac3c8f", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b68212c20d4e695712239ef3bea6968ccef54c8", "message": "Fix grammar"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/773cd3241bef35237437ac709bfec5af724b254f", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2be2aa7b965e217c3e8a27f5a971323d19457374", "message": "Add missing word to JavaDoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/532eb1d7760fb360073f487c83b520c987ffb164", "message": "Upgrade to JUnit Jupiter 5.0.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8a94077da0526d369d2b8b251671726f804fb8c9", "message": "Clean up warnings in spring-core"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8f4fb207d7cf7ade2000ee5c5b86d43535e7f00c", "message": "Reinstate CastorUnmarshallerTests.clearCollectionsFalse()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e9367a11f6f8183d2f8648d90ecc7e76a0e2987c", "message": "Delete unused import"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef0e4dc56ae06b77b28fd59da23dcc3f56ff951c", "message": "Delete unused import"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/657dc961f4d7f23ec6eab861d872cba6ba2b12c0", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2408e2515a48a6eb49048ffe1ecd24cb9067ac0c", "message": "Escape hashtag in Testing chapter to disable Asciidoc highlighting"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3129a8bd7e77eef6a49e97226ceb153b6f4c8aa", "message": "Convert selected examples to JUnit Jupiter in reference manual\n\nIssue: SPR-14524"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c9d42f793408a16b590bbf23be8dd05999b4660", "message": "Document SpringExtension for JUnit Jupiter in reference manual\n\nIssue: SPR-14524"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d8d74faab8b6c699b4c7b29469c9f88fefdfce01", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e995854f1126457c2a25ce37d6ba95694f1dd53d", "message": "Cross reference SpEL and Environment from JUnit Jupiter documentation\n\nIssue: SPR-14524"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/550bed29052cc7cb7ce9b8a9e149e98376d62fbb", "message": "Document JUnit Jupiter annotation support in the reference manual\n\nIssue: SPR-14524"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1a8122f97a3f94e929ac1901ed1fa92de86dab27", "message": "Update Testing chapter regarding Servlet 4.0 API for mocks"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b91d668dfeb00e552f1f8e7be5e6d6ddc5ade94", "message": "Polish Javadoc for @DisabledIf"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/96bbd18e98f9320783e8855c681011d2d991e239", "message": "Delete unused import"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0867045fc1ec9d73af7a34edb69e18ca771036be", "message": "Upgrade to JUnit 5.0 GA!\n\nIssue: SPR-15737"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/15ab0ad6e23c6b5ebdc52a3a72aac5360ac9f236", "message": "Clean up warnings in Gradle build output"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8acb8aef1f4b87ecfb965084f3f19ce2e188201c", "message": "Exclude commons-logging from spring-test dependencies\n\nPrior to this commit, various dependencies in the spring-test module\npulled in commons-logging as a transitive dependency. Consequently,\nthe presence of commons-logging in the generated Eclipse classpath\noverrode the intended use of the spring-jcl module causing JUL to be\nused instead of log4j for tests executed within Eclipse, thereby\nignoring the configuration in src/test/resources/log4j2-test.xml.\n\nThis commit addresses this issue by excluding commons-logging in\nspring-test.gradle for all Selenium dependencies.\n\nIssue: SPR-15930"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dcdb0b416f88ccc20873650923241816477a6c09", "message": "Rename SPRING_CLASS_RULE fields to springClassRule"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba6b617bd518444b2fe654c87a29e4c1275f55e4", "message": "Demo: @Autowired rules not supported with Spring's JUnit rules\n\nThis commit introduces a test that demonstrates that custom JUnit 4\nrules can be @Autowired into a test instance but that they will not be\napplied by JUnit since JUnit only ever sees such fields as null and\ntherefore ignores them.\n\nIssue: SPR-15927"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0702898836bf68a6cabe0f6215ab94593240f4b9", "message": "Clean up warnings in Gradle build output"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/71bd10f1500376842d93718ac8d5802b9adb36e9", "message": "Update notes in Eclipse import script"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9dd3a1cae7c7d65579117e51aca00959d4ea588c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3f2e27f24f1d78338158595b6c7a0aeee56b6e61", "message": "Fix Javadoc formatting in AnnotationBeanConfigurerAspect"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4e81ee5fdf2db69773bbcf55a3898b4aed01f7f9", "message": "Verify support for H2 database aliases in SQL scripts\n\nThis commit introduces a test to demonstrate how to define an alias in\nan SQL script executed against an embedded H2 database.\n\nIssue: SPR-15896"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d20b3cf86d80a27c4c4de79b20536fc8273a7997", "message": "Upgrade to TestNG 6.12"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d070010650d3d1b3b49e40bb5a0306cf8f2638f5", "message": "Upgrade to JUnit Jupiter 5.0 RC3\n\nIssue: SPR-15848"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9da3927235ec4dd3575250b1b7c15a76fc45bdec", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1cb96f47c87cc15bfda2026dc85c7af95278c081", "message": "Fix Eclipse support in Gradle build\n\nThe upgrade to Gradle 4.0 broke the custom Eclipse support in the\nSpring Framework build.\n\nThis commit includes the following changes which re-enable support for\nEclipse in the build.\n\n- Switched to ProjectDependency(String) constructor\n\n- Updated regular expression that matches against project output\n  dependencies to include more than one subdirectory between \"build\"\n  and \"main\"|\"test\".\n\nIssue: SPR-15862"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c4f7ff04dcb5d336b6889b4a68941592f8391e01", "message": "Polish JavaDoc for the SpringExtension"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/da8d50f91fed1470c69baa0cbaeeffc4b31a0e8b", "message": "Revise SpringExtension based on recent changes in JUnit Jupiter\n\nThis commit revises the implementation of the SpringExtension to use\nthe getRequired*() methods in the ExtensionContext which are now built\ninto JUnit Jupiter thanks to inspiration from the initial \"convenience\"\nmethods implemented here."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4630e62c20876926601c17cebf7304a232a63af2", "message": "Fix formatting"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/859da2f074ab00d1e3abea4ca358ee801859591a", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1e66191cbd18622cb68fc694509b78e0fce47a2b", "message": "Upgrade to JUnit Jupiter 5.0 M6\n\nIssue: SPR-15791"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a3ca17d3f92bc672a63e4e8c94931b09caac525", "message": "Fix imports"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c07369406c77940eeac443940dfeddfe7c775c3", "message": "Verify interoperability w/ JUnit Jupiter's @ParameterizedTest in TCF\n\nThis commit introduces integration tests which verify that the\nSpringExtension can be used in conjunction with JUnit Jupiter's\n@ParameterizedTest support."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b03507894eeefc824fe0c06ecb4156607ea4787", "message": "Polishing wording regarding JUnit Platform and JUnit Jupiter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ad5f85f8d3df4e4e8751217072f66882effe5be5", "message": "Clean up deprecation warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75a71acceadd4f0d64610dc9ca6c52376656a78d", "message": "Upgrade to JUnit Jupiter 5.0 M5\n\nIssue: SPR-15728"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f79033788048d78c642b6385125e3cc9a348790d", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/76b28a0cece1049fe5317cd76dfc774437f0d6b6", "message": "Fix grammatical errors in Testing chapter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4b1e3df283ed97a8f54f2d900ff20b63bcf260f4", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c855182e039403a837f6ebeea4f830b10bf21f5f", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55833dc3d1f7bd05881484e488066d07390b2df8", "message": "Discontinue use of Rouge in the Reference Manual\n\nDue to a bug in Rouge thats prevents it from working on MS Windows, we\nare currently reverting back to CodeRay for source code highlighting\nwithin the Reference Manual.\n\nIssues: SPR-15471"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fcdf3900b98bf9ca3b298d21a68dd483097f3e25", "message": "Add dependency on JUnit Vintage TestEngine for IDEA\n\nThis commit introduces an explicit dependency on the latest JUnit\nVintage TestEngine so that it overrides whatever is bundled by\ndefault in IntelliJ IDEA.\n\nThis allows for a more seamless upgrade to newer versions of JUnit 5 and\nthe JUnit Platform before IDEA has been officially updated to support\nthose versions, while simultaneously allowing developers to continue\nto execute JUnit 4 based tests within IDEA."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95e78b16f7451682fd9c2355d7a660ece2a6c20f", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/987421c880585c244d19bebea56bf26779ce97da", "message": "Add dependency on JUnit Platform Launcher for IDEA\n\nThis commit introduces an explicit dependency on the latest JUnit\nPlatform Launcher API so that it overrides whatever is bundled by\ndefault in IntelliJ IDEA.\n\nThis allows a more seamless upgrade to newer versions of JUnit 5 and\nthe JUnit Platform before IDEA has been officially updated to support\nthose versions."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/42420a2df7e15c0b76e39bad9e0526aaf07ae984", "message": "Generate \u201cUse\u201d links in Spring API JavaDoc\n\nThis commit enables the `-use` javadoc flag so that class usage pages\nare included in the generated JavaDoc.\n\nIssue: SPR-15427"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f5fe3f0f97f0e578101ba1484539824dc123b661", "message": "Upgrade to Gradle 3.5\n\nIssue: SPR-15383"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f3ec812abf985260166457c49b4cd5da2732456c", "message": "Delete obsolete GIF and JPG images\n\nThis commit deletes images that are no longer used in the Reference\nManual.\n\nIssue: SPR-14997"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3a4b205b2001d5a44e51c0667d39a18b0aadf667", "message": "Use Rouge syntax highlighting in PDF version of Reference Manual\n\nThis commit uses a tip provided by @mojavelinux to set the syntax\nhighlighter to Rouge for the PDF version of the User Guide.\n\nOnce Asciidoctor 1.5.7 has been released we will likely switch to Rouge\nfor the HTML version of the Reference Manual as well.\n\nIssue: SPR-14997"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b403fb37497c3525b9cc1a37a19cf3b02f7b386a", "message": "Fix grammar"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ffa5dbe8984b7230ce764f35029b563bfbef73d2", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/454e61e8ac94f08bf879103382d9c422c2df162f", "message": "Use standard PNGs in reference manual\n\nThis commit converts interlaced PNGs to standard PNGs and uses PNGs\ninstead of GIFs consistently within the reference manual in order to\navoid issues with AsciiDoc\u2019s support for inlined images.\n\nIssue: SPR-14997"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8e84fd0aed5037ad772d63e95ba9cf84a042eabc", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/51f23cb424c8c451b8e410c14382b73e68b08881", "message": "Polish JavaDoc for date-time and number format annotations"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/279c56a385d9fae56a82531e4bfeed118880a80a", "message": "Fix typo in JavaDoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ce21fa41524ce5a8914d9cfc142a48b98ab15cc8", "message": "Upgrade to JUnit 5.0 M4\n\nIssue: SPR-15361"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b053311306a0974bce0cb0b12ac0b9ede0d61af0", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f0aa46e4983d2c48e30db710d8e07fe3d649825", "message": "Delete unnecessary PropertySourcesPlaceholderConfigurer beans\n\nIssue: SPR-14140"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7a01771a45dfa124289403226487b9cd63d17fdb", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0b1178585255a4fd958d709c621fb13bcecbc3bc", "message": "Improve tests for PropertySourcesPlaceholderConfigurer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7c84266259227467513aff7c6fe1ea84ba55a5d5", "message": "Remove trailing whitespace in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d46c307f550e69e5bc3a7b96f059325803c6682a", "message": "Clean up warnings in spring-webflux module"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee379f8fc9390eb75edcd376f62df94ba1ca2ab6", "message": "Ensure RouterFunctionsTests class compiles in Eclipse\n\nDue to a type inference bug in Eclipse, an additional \u201chint\u201d is\nrequired in order for RouterFunctionsTests to compile in Eclipse."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dda8beeb78afd52b190d36210cdf2e997f1c89ef", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/871f5efeaa8d8a21f880bafc7123e8a3d5f8b34a", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3bc819799b00a268fb58e46a9f4422fa813f899f", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4e65c10272a97e063389fa8b171b80d3f873ff56", "message": "Fix broken test in SpringJUnit4ConcurrencyTests\n\nPrior to this commit, SpringJUnit4ConcurrencyTests was broken due to\nrecent additions of test methods in SampleTests.\n\nThis commit fixes the broken test by removing hard coded constants and\nreplacing them with dynamic lookups for JUnit 4 @Test methods."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3ec6c0e42442aaaa2fa68e93fb68bec082dfae95", "message": "Update example copyright dates"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/264edb3fb5de63051e6a66a533e40dadee253ae0", "message": "Improve initialization of Assume class\n\nPrior to this commit, the org.springframework.tests.Assume class could\nfail to load resulting in a NoClassDefFoundError if parsing of the\n'testGroups' system property failed. This is because the parsing took\nplace while initializing a static field.\n\nThis commit addresses this issue by moving the 'testGroups' system\nproperty lookup to a dedicated method that is lazily invoked upon\ndemand instead of eagerly when loading the Assume class itself.\n\nIn addition, when an error occurs, TestGroup.parse() now logs the\ncomplete original value of the supplied test groups string instead of\npotentially omitting the \"all-\" prefix. This results in more\ninformative error messages similar to the following.\n\n  java.lang.IllegalStateException: Failed to parse 'testGroups' system\n  property: Unable to find test group 'bogus' when parsing testGroups\n  value: 'all-bogus'. Available groups include:\n  [LONG_RUNNING,PERFORMANCE,JMXMP,CI]\n\nIssue: SPR-15163"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc87c27b184e28f46adcdf65cb42d99ee84668d8", "message": "Use MockitoJUnitRunner from Mockito 2's preferred location\n\nIssue: SPR-14880"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9835f0f6cacf6714ece7cb886ad5f84068ee401", "message": "Clean up warnings spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4a599f961fe4ed75a7e2d8fbc3fc26844b4d409", "message": "Ensure that JUnit Jupiter tests are executed during build\n\nAfter the upgrade to JUnit Jupiter 5.0 M3, JUnit Jupiter tests in the\nSpring build were no longer executed due to the introduction of a\ndefault test class name pattern.\n\nThis commit addresses this issue by making use of the\n@IncludeClassNamePatterns to specify that *TestCase test classes should\nbe executed within the org.springframework.test.context.junit.jupiter\npackage."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08cc92176a101bd1c9a06d1d9a8aea94bbe496a8", "message": "Enable compilation on Eclipse 4.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9ed66bf2ebf4605323ba7a310f671d79344be03a", "message": "Clean up warnings across code base"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/055da43e30528ac5e0ad5f289cfa58996cf75109", "message": "Clean up warnings in spring-test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d59caaa2a7c8db66ac8943d8fec50a22c82a29d0", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a04b6c5142b38721129b1f94586d4db6376964e7", "message": "Clean up warnings in Gradle build"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c448739b7bc0a16862f0ebdc7662aa66597b54df", "message": "Remove mavenLocal as a repository in Gradle build"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c9350b8cb8678292ff5887da4ba207fbbeb67d1", "message": "Support @EnabledIf & @DisabledIf w/o loading ApplicationContext\n\nPrior to this commit, when using @EnabledIf or @DisabledIf in Spring's\nJUnit Jupiter support, the test's ApplicationContext was always eagerly\nloaded, even if the ApplicationContext would never be used (i.e., the\ntest was disabled). This behavior can lead to undesirable side effects\n-- for example, attempting to load an application context that requires\nservices only available on the CI server when the test is not actually\nrunning on the CI server.\n\nThis commit addresses this issue by introducing new boolean\n`loadContext` flags in @EnabledIf and @DisabledIf. By default these\nflags are set to false which means that the user's test application\ncontext will not be loaded to evaluate the expression. On the contrary,\na dummy application context will be loaded instead, and expressions\nwill be evaluated against that dummy context. Consequently, if the user\nwishes to interact with properties from the Spring Environment or with\nbeans from the test application context, the `loadContext` must be\nexplicitly set to true.\n\nIn addition, expressions which evaluate to a String must now evaluate\nto exactly \"true\" or \"false\" (ignoring case and surrounding whitespace).\n\nIssue: SPR-14649"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a795fd47142bd3b206ce244b94b1fd1dd0adc2e9", "message": "Add support for URI templates in redirectedUrl() & forwardedUrl()\n\nPrior to this commit, the redirectedUrl() and forwardedUrl() methods in\nMockMvcResultMatchers supported fully constructed URLs and URLs\ncontaining Ant-style path patterns. However, URI templates were not\nsupported for these result matchers even though the request path can be\nbuilt using URL templates -- for example, via the get() and post()\nmethods in MockMvcRequestBuilders.\n\nThis commit addresses this shortcoming by allowing users to supply a\nURL template instead of a fully constructed URL to redirectedUrl() and\nforwardedUrl(). To populate the URL template, template variables may be\nsupplied to redirectedUrl() and forwardedUrl() as var-args.\n\nIssue: SPR-14790"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/509796a4b55e85b1e7efb4355908c2eff0b3d44d", "message": "Polish MockMvcResultMatchers[Tests]"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8cf19331483e09264452890e73434c06093e3b8e", "message": "Only print request/response body if char enc is present in MVC Test\n\nCommit e65a1a4372 introduced support in PrintingResultHandler for only\nprinting the request or response body in the Spring MVC Test framework\nif the content type is known to be text-based (e.g., plain text, HTML,\nXHTML, XML, JSON, etc.). For unknown content types the body is assumed\nto be text-based and is therefore always printed. The latter behavior,\nhowever, is undesirable since the content may in fact not be text-based.\n\nThis commit addresses this issue by making the printing of the request\nor response body an opt-in feature. Specifically, if a character\nencoding has been set, the request or response body will be printed by\nthe PrintingResultHandler. Note, however, that the character encoding\nis set to ISO-8859-1 in MockHttpServletResponse by default.\n\nIn addition, MockHttpServletRequest's getContentAsString() method now\nthrows an IllegalStateException if the character encoding has not been\nset.\n\nIssue: SPR-14776"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/580b8b92f8efc95ef44bbe914cc2867838b46428", "message": "Fix punctuation in Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e65a1a43727ca7455ed7fa47fb4ed68f8c5e2862", "message": "Print only printable request/response body in MVC Test\n\nPrior to this commit, PrintingResultHandler always printed the request\nor response body regardless of its content type. For binary content,\nhowever, the output was unreadable and therefore useless.\n\nThis commit addresses this issue by only printing the request or\nresponse body if it is \"printable\" (i.e., if its content type is known\nto be text-based such as plain text, HTML, XHTML, XML, JSON, etc.). If\nthe content type is unknown (e.g., unspecified for the HTTP request in\nthe test), it is assumed that the body is printable.\n\nIssue: SPR-14776"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/487bc7505b7587b48aaab2ad0c89297bc30ef4c3", "message": "Print request body in PrintingResultHandler in Spring MVC Test\n\nPrior to this commit, the PrintingResultHandler used by the various\nprint() and log() methods in Spring MVC Test printed the response body\nbut not the request body.\n\nSince request bodies are sometimes generated programmatically, however,\nit can be beneficial to have the dynamically generated request body\nlogged as well.\n\nThis commit therefore prints the request body in PrintingResultHandler\nby delegating to the recently introduced getContentAsString() method in\nMockHttpServletRequest.\n\nIssue: SPR-14717"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/04b8ae921ee1a91987ea264e9d6967a5f04e1918", "message": "Introduce getContentAsByteArray()/getContentAsString() in MockHtttpSvltReq\n\nIn order to improve debugging and logging within test suites, this\ncommit introduces getContentAsByteArray() and getContentAsString()\nmethods in MockHttpServletRequest, analogous to the existing methods in\nMockHttpServletResponse.\n\nIssue: SPR-14717"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b521aa879fd805ef24f3224e6c3c77339382f438", "message": "Clean up warnings related to forthcoming removals in Tomcat 9"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8f62b63663a67f2aad80c11119ddf602bd8a9a3f", "message": "Introduce 'value' alias for @Bean's 'name' attribute\n\nIn order to simplify configuration for use cases involving @Bean where\nonly a bean name or aliases are supplied as an attribute, this commit\nintroduces a new 'value' attribute that is an @AliasFor 'name' in @Bean.\n\nIssue: SPR-14728"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3171644", "body": "Hi Chris,\n\nWhy did I receive this mail?\n\nAre you testing moving to github for Spring Core?\n\nconfused,\n\nSam\n\n\u00a0\n\n---\n\nSam Brannen\nsam@sambrannen.com\nhttp://sambrannen.com\n\n----- Original Message -----\n\n> From: Chris Beams reply@reply.github.com\n> To: Sam Brannen sam@sambrannen.com\n> Cc: \n> Sent: Friday, December 16, 2011 1:14 AM\n> Subject: [spring-framework] quick changelog typo fix (#6)\n> \n> just found this problem and fixed it.\n> \n> You can merge this Pull Request by running:\n> \n> \u00a0 git pull https://github.com/cbeams/spring-framework master\n> \n> Or you can view, comment on it, or merge it online at:\n> \n> \u00a0 https://github.com/SpringSource/spring-framework/pull/6\n> \n> -- Commit Summary --\n> - Remove unwanted edit from changelog\n> \n> -- File Changes --\n> \n> M build-spring-framework/resources/changelog.txt (2)\n> \n> -- Patch Links --\n> \n> \u00a0 https://github.com/SpringSource/spring-framework/pull/6.patch\n> \u00a0 https://github.com/SpringSource/spring-framework/pull/6.diff\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/6\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3171644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6431153", "body": "Dmitry, \n\nThank you very much for your contribution in this pull request!\n\nIn light of [SPR-9493](https://jira.springsource.org/browse/SPR-9493), however, I am closing this pull request since it is no longer needed.\n\nBest regards,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6431153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7567975", "body": "@cbeams OK... I might just do that for this PR and the other recent ones from Andy... tomorrow. ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7567975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9839605", "body": "Tadaya,\n\nThanks for pointing this out and submitting the pull request!\n\nIn order to simplify the code and remain consistent with the conventions currently in use in the class, I have chosen to address this issue differently than in your pull request. Please check out commit 33d5b011d3 for details.\n\nCheers,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9839605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9953151", "body": "Hi guys,\n\nThis was apparently addressed without an official pull request merge in the following commits:\n- 914a1b2088\n- 2081521695\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9953151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12735966", "body": "See [SPR-7731](https://jira.springsource.org/browse/SPR-7731) instead of SPR-10217.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12735966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14618980", "body": "No. This feature will not make it into 3.2.2.\n\nIt is currently scheduled against the 4.0 backlog.\n\nWe typically do not introduce new features of this magnitude in point releases; however, if there is significant interest from the community at large, it is possible that it would be considered in the 3.2.x time frame.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14618980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14686593", "body": "Thanks for creating this additional test, Dave!\n\nI'll take a look at it now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14686593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14686774", "body": "Unfortunately this test currently fails on my machine with the following:\n\n```\njava.lang.AssertionError: expected:<Sun Mar 31 03:10:00 CEST 2013> but was:<Mon Apr 01 02:10:00 CEST 2013>\n```\n\nCan you please investigate this?\n\nThanks,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14686774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14694200", "body": "OK. That seems to work now. I've merged this into 3.2.x.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14694200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14842832", "body": "`ServletTestExecutionListener` currently creates an instance of `ServletWebRequest` which is already a sub-class of `ServletRequestAttributes`. So I don't see how creating an anonymous sub-class of `ServletWebRequest` would change anything with regard to `FrameworkServlet`'s handling of request attributes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14842832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15026891", "body": "Thanks for contributing the documentation corrections!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15026891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15026894", "body": "Karl, have you signed the [contributor license agreement](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15026894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19504372", "body": "Michail, thanks for all of your hard work!\n\nYou'll notice that I unfortunately wasn't able to merge your pull request directly due to significant changes in the 4.0 (i.e., master) branch; however, I was still able to use a lot of your code (albeit with some rather tedious copying-n-pasting ;)).\n\nSee the following commit: 044f51283b92609e0a17c90adcaf0dc57201477c\n\nAlso, your thorough unit and integration tests were especially helpful.\n\nCheers,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19504372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20559629", "body": "Thanks for pointing this out.\n\nI've fixed that typo as well as some additional ones in `HandlerAdapter` in commit 907e286e7703cf3e8c8e954774891b75d661e17d.\n\nRegards,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20559629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24324417", "body": "Thanks for pointing this out!\n\nI've committed your fix and some other small changes in 41fffdcf7bf22464c41bc93ee80ad46e6b4cf17a.\n\nRegards,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24324417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25158616", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25158616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27184263", "body": "Merged into master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27184263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27642598", "body": "Thanks for submitting the pull request!\n\nThis has been addressed in commit 1dc7ff86045e051eb4059b25934f6b796287cb9f.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27642598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28107966", "body": "This has been merged into master.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28107966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29334255", "body": "This has been merged into master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29334255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30513310", "body": "Thanks for the contribution!\n\nI've incorporated some of your recommendations in commit f199d5187b2b88654f8d2e072d4da128cbda13f0 along with other minor changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30513310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30515028", "body": "I've incorporated some of your recommendations in commit 0b6bd46863afc073aa4236eb09d88e8f8c91db1e.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30515028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30515098", "body": "If you create a new pull request, please make sure that you do not include commits from your previous pull requests (e.g., 427 and 428).\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30515098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30789066", "body": "This pull request has been closed since Infinispan already provides integration with Spring's caching abstraction out of the box.\n\nSee the following for details:\n\nhttp://infinispan.org/docs/6.0.x/user_guide/user_guide.html#_using_infinispan_as_a_spring_cache_provider\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30789066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33219589", "body": "Thanks for the submission!\n\nThis has been merged into master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33219589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33481698", "body": "This has been merged into master.\n\nThanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33481698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34636175", "body": "This has been merged into master.\n\nThanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34636175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34636316", "body": "What is the purpose of this pull request?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34636316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36394062", "body": "This has been slightly modified and merged into master.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36394062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36564005", "body": "This has been merged into master.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36564005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37531104", "body": "@cbaldwin74, thanks for all of the work you put into this issue!\n\nThis has been merged into master with additional refactorings as described in 2bfd6ddcf4de600942a7564a43a338febd4267f2.\n\nRegards,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37531104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38709462", "body": "I'm in favor of defining _all_ version numbers as properties, perhaps even in a dedicated external properties file. \n\nIt's just cleaner that way, and it's the way we used to do it in our Ant-based builds.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38709462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38967009", "body": "Thanks for pointing this out.\n\nI've updated the Javadoc slightly differently in commit 34eb4dba3a4e1915989c29713a2b3551d3d5520d.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38967009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44405319", "body": "@ttddyy,\n\nI'm closing this pull request for the following reasons...\n\nI have incorporated some of your initial work for the listener and added numerous additional features.\n\nAnd the work is almost complete, so please take a look at my personal [SPR-7655](https://github.com/sbrannen/spring-framework/commits/SPR-7655) branch and provide feedback if you have any.\n\nThanks again for submitting the pull request!\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44405319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45318562", "body": "Just a quick comment on the `jmxmp` protocol and Spring's test suite...\n\nSee [SPR-8089](https://jira.spring.io/browse/SPR-8089) and the Javadoc for [AbstractMBeanServerTests](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/test/java/org/springframework/jmx/AbstractMBeanServerTests.java) for further insight.\n\nBasically, you'll need to add the following assumption to tests that require the `jmxmp` protocol.\n\n```\nAssume.group(TestGroup.JMXMP);\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45318562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52393562", "body": "I fail to see what changes you have made to `TransactionalTestExecutionListener`.\n\nPlease update your pull request by rebasing on `master` and issuing a single, squashed commit containing _only your changes_.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52393562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52409131", "body": "Can you please squash your commits into a single commit?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52409131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52409159", "body": "Also, while you're at it, why don't you go ahead fix the related deprecated issues in all of the test classes in `spring-jdbc`?\n- `InitializeDatabaseIntegrationTests`\n- `NamedParameterQueryTests`\n- `JdbcTemplateQueryTests`\n\nAgain, please squash all changes into a single commit.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52409159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52420817", "body": "Ok. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52420817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52420876", "body": "Have you signed the [Contributor License Agreement](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52420876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421140", "body": "OK. Thanks for the clarification.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421183", "body": "Yes, there appears to be an issue with the sign-up form. We'll have to get back to you.\n\nThanks for your patience.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52463479", "body": "This has been merged into master.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52463479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52563015", "body": "Thank you for submitting the pull request!\n\nPlease note that this has been resolved in a similar fashion in 110be33337387e5f79ccbc773c09c0d45a51f9a8.\n\nI am therefore closing this pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52563015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52632834", "body": "Would you please create a JIRA issue to explain the need or desire to have this feature?\n\nThanks,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52632834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52849413", "body": "Yes, they resolved the issues with the site. Thanks for staying on top of that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52849413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52849573", "body": "Thanks for the fixes. These are now merged into master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52849573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53716795", "body": "Thanks for the pull request.\n\nThe suggestion has been implemented on `master` in commit 0b0ddc6ed16072b6ba848c8354f5d17f0b3460a0.\n\nRegards,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53716795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53875336", "body": "Thank you for the pull request!\n\nThis has been addressed slightly differently in 27be396b06d8b0e523c16627abd14a8266394a01 and 1bce6ac60cf133adaa4f997c7fba066bf84b4c9a.\n\nRegards,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53875336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53875486", "body": "You may also be interested in _watching_ https://jira.spring.io/browse/SPR-6911.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53875486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76057414", "body": "As an aside [AuthenticationPrincipalArgumentResolver](http://docs.spring.io/autorepo/docs/spring-security/current/apidocs/org/springframework/security/web/bind/support/AuthenticationPrincipalArgumentResolver.html) is a class from the Spring Security project and can therefore not be referenced from the core Spring Framework.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76057414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77705503", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77705503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77707931", "body": "This has been merged into master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77707931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/91178565", "body": "The Javadoc for `SpringJUnitMethodRule` with regard to `ExpectedException` is admittedly misleading at a glance.\n\nIf you take a look at the imports in `SpringJUnitMethodRule`, you will notice that the class referenced in the Javadoc is `org.springframework.test.annotation.ExpectedException` (i.e., the `@ExpectedException` annotation that was supported in earlier versions of the Spring TestContext Framework).\n\nSo fear not: JUnit's `org.junit.rules.ExpectedException` (i.e., the `ExpectedException` Rule) should be fully supported when used in conjunction with `SpringJUnitMethodRule`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/91178565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/91179149", "body": "For what it's worth, `@ExpectedException` was permanently removed from the `spring-test` module in Spring Framework 4.0 (see [SPR-10499](https://jira.spring.io/browse/SPR-10499)). Thus, for modern versions of Spring there should no longer be any confusion. ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/91179149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93003163", "body": "Thanks for the suggestion.\n\nI implemented it slightly differently in conjunction with https://jira.spring.io/browse/SPR-12909.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93003163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93099269", "body": "Implemented slightly differently and pushed to master in commit c006b74e910ef20e66fb0f4e7eddd7d97490ffc8.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93099269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93550459", "body": "The Javadoc was perhaps misleading though technically correct.\n\nStrictly speaking, `A and/or B` implies `(A && B) || (A || B)`.\n\nOf course that is logically equivalent to `A || B`. :smirk:\n\nIn any case, I have revised the Javadoc in commit 96e6406b4b45c223f85257d09f03c069be62ec20.\n\nThanks for bringing this to our attention!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93550459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99065874", "body": "This has been merged into master. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99065874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99066893", "body": "This has been merged into master. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99066893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99068633", "body": "Since this is such a minor documentation issue, I think it is sufficient to apply the update only to master (i.e., for Spring Framework 4.2).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99068633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99069070", "body": "Since this is such a minor documentation issue, I think it is sufficient to apply the update only to master (i.e., for Spring Framework 4.2).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99069070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99070139", "body": "This has been merged into `master`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99070139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99420397", "body": "This has been merged into `master`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99420397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99421100", "body": "This has been merged into `master`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99421100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99421488", "body": "This has been merged into `master`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99421488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99425064", "body": "This has been merged into `master`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99425064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99538713", "body": "This has been merged into `master`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99538713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99550337", "body": "Merged into `master` with additional changes in commit edc66d76afac8800d1f4c773876b1ba1865c8159.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99550337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/100212361", "body": "This has been merged into `master`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/100212361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/100620912", "body": "This has been merged in `master` in commit 92c1751d356456cadc7703d1efc1767b80ebd82a. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/100620912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/102665968", "body": "@marschall and @eeichinger, thanks so much for all of your ideas and collaboration on this!\n\nI've just committed support for this in Spring Framework 4.2 RC1 here: https://github.com/spring-projects/spring-framework/commit/d1b1c4f888b5ab5c60cf4beb87f577143bdbebe7.\n\nCheers,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/102665968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/102666145", "body": "Though... perhaps I should attribute the `Assume` idea in `ProfileValueChecker` to @eeichinger instead of @marschall. ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/102666145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/113775835", "body": "Thanks for pointing out the typo.\n\nI've fixed it in de9f27872efce108670003c62294c6619f3b1182.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/113775835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/114985108", "body": "This has been merged into `master` slightly differently in e8c8d2a6ad1d75b72bb680a2bf76043a7a8cee79.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/114985108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/115698088", "body": "This has been merged into `master` in commit 34204d27f384f0f151ce1f50139a60d5c76026bf.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/115698088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117241791", "body": "Thanks for bringing this to our attention!\n\nI've committed a slightly modified version of your pull request in df83196ad74ce2ddbf5a51ae8ef651a77f328b9a.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117241791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117242001", "body": "@snicoll ... oops! Just saw that you had assigned this to yourself after I opened the page. Sorry about that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117242001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117243989", "body": "And... backported to 4.1 here: 40fc260d456675e9ccbbe687c8380ea13823ee0a\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117243989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118404907", "body": "@akalotkin, thanks for taking the time to implement this and issue the pull request!\n\nIt definitely looks like this might be a viable way to solve the problem; however, we cannot modify existing contracts for interfaces. Otherwise, we will likely break existing clients of the API.\n\nSpecifically, we cannot add new methods to the `ConnectionProperties` interface. \n\nAs an alternative, consider introducing a new sub-interface -- for example, something like `ConfigurableConnectionProperties`.\n\nPlease rework your code to ensure that you are not changing existing APIs, squash your changes into a single commit (rebased on `master`), and then update this pull request (i.e., with a forced push).\n\nThanks,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118404907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118437241", "body": "Hi @akalotkin, did you mean to close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118437241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118514560", "body": "Ahhh. OK.\n\nI also saw that you opened #833.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118514560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118515155", "body": "For any new classes or new methods in existing classes, please add `@since 4.3` tags.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118515155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118934312", "body": "Great!\n\nSince Spring 4.2 GA is now just around the corner, I won't have time to review your pull request fully until work on 4.3 begins.\n\nBut... your work will not be forgotten. :wink: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118934312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120164656", "body": "Very interesting proposal!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120164656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120405504", "body": "@ndebeiss, can you please create a [JIRA issue](https://jira.spring.io/secure/CreateIssue!default.jspa) so that this request can be officially tracked?\n\nThanks!\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120405504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120413150", "body": "Great. Thanks! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120413150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120413496", "body": "Have you signed the [SpringSource CLA](https://support.springsource.com/spring_committer_signup)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120413496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120415325", "body": "The confirmation number is for yourself.\n\nHowever, you need to make the following statement as outlined [here](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement):\n\n> I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120415325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/121227444", "body": "Merged in 649d145103aa363f52296057d8d9cf1298c07d76\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/121227444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123735731", "body": "What do you think about adding a `setDateHeader()` method in `MockHttpServletRequest` as suggested in the JIRA issue?\n\nThough, now that I think about it, I guess that would be superfluous since one can pass a `Date`, `Number`, or `String` to `addHeader()`. With that in mind, I suppose it would be beneficial to add a new paragraph to the Javadoc for `addHeader()` that explicitly lists the supported types and string formats for date headers.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123735731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124060738", "body": "Good deal. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124060738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125163522", "body": "Merged into `master` in 98c7a63bb78996d14e58f8db38fc3b8fdd3c7306.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125163522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125694402", "body": "@chrylis, have you signed the SpringSource CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125694402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/126323441", "body": "Done slightly differently in 1ff3af6da37896e229e54fc8592673918f9203f4.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/126323441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/128461446", "body": "Thanks for the tip!\n\nI've committed something strikingly similar to `master`... :wink: \n\n... along with some general polishing. See my latest three commits in case you're interested.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/128461446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/128529131", "body": "This has been polished and merged into `master` in commit 35dd3078ef3c2639bf775d0387617b10ff4d886b.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/128529131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/130367694", "body": "Thanks, @garyrussell!\n\nThis has been merged into `master` in f151404.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/130367694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/142392217", "body": "Merged into `master` in 0ad59ddb7ad27fec39e782e5e33549cb3d864bba.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/142392217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/143861944", "body": "The documentation is correct as it is.\n\nThe example correctly demonstrates how to use `@Value` with a [SpEL expression](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html#expressions-beandef-annotation-based).\n\nI am therefore closing this PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/143861944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148061440", "body": "Hi @izeye,\n\nHave you signed the [CLA](https://support.springsource.com/spring_committer_signup)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148061440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148070507", "body": "OK. Thanks for the signing the CLA!\n\nCan you please also use your \"real name\" in commits as outlined in the [Contributing Guide](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#use-real-name-in-git-commits)?\n\n> Note that you can always force push (`git push -f`) reworked / rebased commits against the branch used to submit your pull request. In other words, you do not need to issue a new pull request when asked to make changes.\n\nRegards,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148070507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150783554", "body": "@robertwhitebit, out of curiosity, how did you achieve this?\n\nDo you have a script that automates this? If so, we'd be interested in getting access to it. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150783554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150783776", "body": "Please create a JIRA issue requesting this improvement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150783776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150783797", "body": "Also, have you signed the Spring Individual Contributor License Agreement (ICLA)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150783797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/190227376", "body": "@rstoyanchev, thanks for the review!\n\nThose are exactly the topics I wanted to discuss with you: produces vs. consumes.\n\nIt's a bit of a challenge getting it right and not being too restrictive.\n\nRegarding `produces` for POST, PUT, and PATCH, some people actually return the new/updated resource in the body in order to avoid having to submit a followup GET based on the 'location' header. So I thought we would want to allow such use cases. The same holds true for DELETE, though perhaps that's not so common.\n\nRegarding `consumes` for DELETE, I also pondered whether we should include that. I doubt many people would submit a body with a DELETE request, but then again... I just didn't want to be too restrictive.\n\nLet's come to a consensus during the team call -- OK?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/190227376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/190278849", "body": "@gognamunish,\n\nNo, we are not considering an `@ViewScope` annotation for JSF, not because we don't want to but rather because there is no straightforward way for Spring to tie into that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/190278849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/193917054", "body": "Everything except the `ContextCustomizer` support has either been rejected or merged into `master` in one form or other.\n\nI am therefore closing this pull request and kindly asking for a new dedicated PR for the `ContextCustomizer` support that is rebased on the current `master`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/193917054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194936051", "body": "This has been merged into `master`: https://github.com/spring-projects/spring-framework/commit/8222ff465deea4c93d1e5bfd2b9a12f9c05099dc\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194936051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194981835", "body": "@rstoyanchev, my sentiments exactly. :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194981835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195810780", "body": "Merged into `master` in https://github.com/spring-projects/spring-framework/commit/beb01e674e33d6302390acd8b6ec39963f3f80e1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195810780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/213772774", "body": "This has been merged into `master` and subsequently polished.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/213772774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214415974", "body": "@rwinch,\n\nThanks for the quick work!\n\nI haven't cloned your PR locally to try it out, but the implementation looks solid, and the test reflects what I think one would expect (i.e., that the cookie domain defaults to the request domain).\n\nSo, from my perspective, feel free to merge it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214415974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218434849", "body": "I took a quick look, and it appears reasonable to me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218434849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218739420", "body": "@romani,\n\n> after some period of testing on real opensource and close projects , this Check will be merged to main project - checkstyle.\n\nAny idea when this will happen?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218739420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218765198", "body": "> What is a problem to use Check from sevntu-checkstyle project?\n\nWell, I was hoping to be able to use the `SingleSpaceSeparator` without having to add an additional dependency on the `sevntu-checkstyle` project.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218765198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219048510", "body": "@romani, looks like you commented on the wrong issue / in the wrong repository.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219048510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226798562", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226798562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230512385", "body": "Resolved in 9439a008d7a4ec7359fc024fce60453995f2ebd1.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230512385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242165540", "body": "As I mentioned in the corresponding JIRA issue...\n\nFYI: on Spring 5.0, the proposed changes can be rewritten as lambda expressions as follows.\n\n``` java\nAssert.state(SimpMessageType.MESSAGE.equals(getMessageType()), () -> \"Unexpected message type \" + getMessage());\n\nAssert.state(SimpMessageType.MESSAGE.equals(getMessageType()), () -> \"Unexpected message type \" + getMessage());\n```\n\nIf backported to Spring 4.x, however, the use of an if-block will still be required.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242165540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242694640", "body": "@hall-wong, can you please let us know how you encountered the NPE -- for example, which exact commands did you execute?\n\nBy the way, running `gradle eclipse` on its own is not necessarily supported. Rather, you should execute the provided `import-into-eclipse.sh` or `import-into-eclipse.bat` script.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242694640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242909559", "body": "> @sbrannen Well, here are steps to reproduce this error:\n> after I clone this repo, I import the project to Eclipse;\n> then I run gradle eclipse, and NPE is thrown;\n> This error occurred on my MacBook Pro, I don't have log now, I'll post it later.\n\nAgain, for this issue, please do not run `gradle eclipse` on its own. You should instead run the dedicated `import-into-eclipse` script **before** importing any projects into Eclipse. The `import-into-eclipse` script prints detailed instructions on the steps you need to take to properly import the projects into Eclipse.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242909559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242909646", "body": "> Downloading https://services.gradle.org/distributions/gradle-3.0-bin.zip\n> Exception in thread \"main\" java.net.SocketTimeoutException: Read timed out\n\nThat sounds like a network error.\n\nPerhaps you have a local firewall or anti-virus software that prevent Gradle from connecting to the Internet. In that case, you'll need to allow Java/Gradle to open connections.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242909646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242993785", "body": "Nice work! \ud83d\udc4d \n\nI revised it and merged it into `master` in 655097a34307e8eccd70f90707a4fbc8c8742e93.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242993785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243716427", "body": "Glad to hear it works for you, and thanks for letting us know.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243716427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244995782", "body": "@snicoll, @nkjackzhang is correct.\n\nLook at the subsequent text:\n\n>  In the preceding example, all requests starting with `/example` will be handled by the\n> `DispatcherServlet` instance named `example`.\n\nThe instance is currently named \"dispatcher\" (via the `servletName` parameter to `ServletContext.addServlet(String, Servlet)`), and @nkjackzhang's PR changes it to \"example\" to fix the inconsistency.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244995782/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246299698", "body": "This has been merged into `master`.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246299698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265624879", "body": "Thanks for the pull request.\r\n\r\nFor new features like this, however, we require a JIRA issue.\r\n\r\nSo, please [create a new JIRA issue](https://jira.spring.io/secure/CreateIssue!default.jspa) against the _Spring Framework_ project and _Test_ component and describe your proposal there. Then update this PR to reference the JIRA issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265624879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266549989", "body": "> Can you please advice if such declarations permitted. Or should I pull this classes in the different files/into some class as inner classes.\r\n> Asking because it is forbidden by the Code Style.\r\n\r\nIt's definitely forbidden in production code. In test code, I think there are few places where that style is used. But I don't want that in the `spring-test` module. So please convert them to static nested classes within the test class.\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266549989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270244362", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270244362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272759603", "body": "This has been merged into `master`.\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272759603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275206350", "body": "@f-lopes, please create a JIRA issue to track this against the `Test` component.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275206350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275263374", "body": "Thanks for creating the JIRA issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275263374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286448970", "body": "What about the use of `javax.activation.FileTypeMap` in our `MockServletContext` implementations?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286448970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286465991", "body": "`MockServletContext.getMimeType()` doesn't mention anything about overriding the method. \r\n\r\nIn any case, it can't be overridden if the _Spring TestContext Framework_ or parts of Spring MVC Test are creating the mock for the user transparently within a test. So, in such situations, if JAF is not available (e.g., on Java 9), then the tests would no longer work.\r\n\r\nOr am I missing something?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286465991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286487879", "body": "OK, I now understand where you're coming from.\r\n\r\nSo... I guess we are then going to make JAF a requirement for the testing frameworks. I can live with that; we'll just have to document it.\r\n\r\nMy real concern was that production code and test code would demonstrate different behavior with regard to available mime types _out of the box_.\r\n\r\nDo you not foresee any issues with that?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286487879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286488395", "body": "By the way, nice investigative work on finding that _use case_. \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286488395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286807428", "body": "The changes in commit 689f0d716a827e42db297ad41006c1a97486c213 look *much* more robust than what we had before.\r\n\r\nThanks, @poutsma!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286807428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293275783", "body": "Implemented slightly differently in 3a1d431c7df30cffd70174c635879b0d9dd9f745 and ce4eff321cd976df4ba26fe3971642259af891d2.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293275783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325689184", "body": "This has been merged into `master`.\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325689184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326020995", "body": "Please note as well that I performed a bit of _polishing_ in 9dd3a1cae7c7d65579117e51aca00959d4ea588c that will cause conflicts with the content of this pull request.\r\n\r\nI'd therefore recommend that this PR be rebased (or, preferably, completely redone) on `master`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326020995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335803818", "body": "Hi @christor,\r\n\r\nSince your proposed change is in the core Spring Framework and not in Spring Security, please create a JIRA issue for the `SPR` project so that we can track it there.\r\n\r\nCheers,\r\n\r\nSam", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335803818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341497753", "body": "Thanks for raising the JIRA issue!\r\n\r\nAFAIK, @jhoeller is going to look into this.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341497753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360521444", "body": "Hi @neonailol,\r\n\r\nThanks for the PR.\r\n\r\nPlease open a [JIRA issue](https://jira.spring.io/secure/CreateIssue!default.jspa) for this enhancement request and post a link to the JIRA issue back here.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360521444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360521884", "body": "FYI: I updated the title to more succinctly describe the enhancement request.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360521884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363129939", "body": "@pkostrzewa, what is the rationale behind this PR?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363129939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363136340", "body": "> improves readability.\r\n\r\nWell, we don't normally switch to stream-based approaches merely for the sake of readability because doing so can result in an unnecessary performance hit in core infrastructural code.\r\n\r\nIn any case, we will discuss it within the team and get back to you.\r\n\r\n> As this is my first contribution to open source I'd rather not make breaking changes for now.\r\n\r\nSure. Hopefully you wouldn't want to make breaking changes in a subsequent contribution either. \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363136340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2429951", "body": "Good catch! I'll fix that ASAP.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2429951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713504", "body": "@graemerocher, can you please create a new JIRA issue for this, linking to SPR-10025, and explaining the Grails use case?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2715529", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2715529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4059936", "body": "@rwinch Do you mean `setMethod()` or `setRequestURI()`, or both?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4059936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4059973", "body": "From the Javadoc for `getMethod()` from `HttpServletRequest`:\n\n> Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT. Same as the value of the CGI variable REQUEST_METHOD.\n\nSo I would assume it is in fact an error if the supplied `method` is null or empty.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4059973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4060051", "body": "Now, that I think about it, we could even consider only allowing values such as those defined in `org.springframework.http.HttpMethod`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4060051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4060093", "body": "For the sake of backwards compatibility, however, it might be best to revert the changes in this commit and simply refactor `getRequestURL()` so that it uses an empty string for the request URI if `getRequestURI()` returns `null`.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4060093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4070729", "body": "OK. I've made the discussed changes. See commit ee5d6c8f83 for details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4070729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5778041", "body": "Sure thing!\n\nI actually didn't check whether the Tiles request API was being pulled in transitively. So thanks for improving that as well!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5778041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941675", "body": "`{@code @MyAnnotation}` is fine. That was actually my change (i.e., from `{@code &#064;...}` to `{@code @...}`).\n\nFYI: I'm pretty sure that the presence of `{@code &#064;...}` is a side effect of our _recent_ (well not not recent) global replacement of `<code>&#064;...</code>`. `&#064;` was often necessary for the HTML code tags but does not get interpreted correctly within the `{@code}` Javadoc tag.\n\nI wasn't planning on any kind of global replacement, but if you noticed the presence of `{@code &#064;...}` in other places, then yes, we should fix this globally.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941759", "body": "FYI: I went ahead and fixed the remaining occurrences of `{@code &#064;` in d53b4988399e6242725ebe51efd450a0091fe8dc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5941759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6053710", "body": "`+<aclement@gopivotal.com> <david_syer@hotmail.com>` looks a little suspect to me. ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6053710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6053719", "body": "Maybe we should also add an \"Unknown at Aspire\" entry for Juergen as well. ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6053719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9207695", "body": "prego!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9207695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9962434", "body": "Aha... you beat me to it. ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9962434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10793621", "body": "Hi @ttddyy,\n\nThat's very astute of you! Thanks for reviewing the change and commenting.\n\nLuckily, I realized the logic error on my own as well and reverted the changes accordingly in commit d66d1605430c73444082d219214edb74327d3c13.\n\nCheers,\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10793621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11043161", "body": "THANK YOU!!! ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11043161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11084726", "body": "Thank you, thank you, thank you!!!\n\nI was about to revert the upgrade to Gradle 2.4.\n\nSo thanks for figuring out the fix! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11084726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11119990", "body": "@jhoeller, the Javadoc for some of these classes and `package-info.java` files refer to Hibernate 4 instead of Hibernate 5.\n\nJust FYI... ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11119990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11142563", "body": "Awesome... Wihoo!!!! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11142563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11954809", "body": "Yes.\n\nWhenever a context is marked as _dirty_, the context is closed, but it is not immediately recreated.\n\nThe context will only be recreated if a test is actually configured to use the context.\n\nFYI: the context typically gets created in the `DependencyInjectionTestExecutionListener` which is configured _before_ the `DirtiesContextTestExecutionListener`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11954809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11954861", "body": "However, since you've asked... your question makes me think that there in fact might be an ordering issue with regard to dependency injection and dirtying of contexts before test methods.\n\nI'll definitely put some more thought into this. So thanks for asking the question! ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11954861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955281", "body": "The `DependencyInjectionTestExecutionListener` is responsible for loading the context and then injecting dependencies from the context into the test instance.\n\nSo you have to make sure that the `TestExecutionListeners` are ordered properly.\n\nIn your example, it appears that the standard ordering mechanism should apply. See [Ordering TestExecutionListeners](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#testcontext-tel-config-ordering) in the reference manual for details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955317", "body": "By the way, any time a `TestExecutionListener` invokes the `getApplicationContext()` method on the `TestContext`, a new context will be loaded if it's not already in the `ContextCache`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955348", "body": "oh....... please share the solution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955665", "body": "ok. cool!\n\nGlad it worked so easily for you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955681", "body": "Out of curiosity, which version of `spring-test` are you using?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11956449", "body": "OK. Thanks for all of your input!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11956449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11959843", "body": "@barbraz, as I mentioned earlier, your question got me thinking, and it turns out that there is in fact a bug with this commit. \n\nI have created JIRA issue [SPR-13180](https://jira.spring.io/browse/SPR-13180) to address this issue.\n\nThanks again for prompting me to re-evaluate the behavior.\n\nSam\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11959843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12252017", "body": "@jhoeller, I see you beat me to the fix, but I pushed my additional _polishing_ anyway (0153913ef4597e6a47517f763961a4c6cc232443). :wink: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12252017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12283049", "body": "Awesome!\n\nJust in time for 4.2 GA. :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12283049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12687994", "body": "Thanks, @jhoeller! :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12687994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18044649", "body": "\ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18044649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18105215", "body": "Oops! I totally forgot about `package-info`. Thanks for catching that! \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18105215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18112326", "body": "Oops... unnoticed until July. \n\nGood catch! \ud83d\ude09 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18112326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18112329", "body": "The moment we've all been waiting for.... 5.0 on `master`! \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18112329/reactions", "total_count": 15, "+1": 9, "-1": 0, "laugh": 0, "hooray": 6, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18394845", "body": "Thanks, @jhoeller! \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18394845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18394887", "body": "Awesome, @jhoeller! It's great to see the last of the remaining JUnit 3 based tests go the way of the dodo bird. \ud83d\ude09 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18394887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18912405", "body": "Thanks! \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18912405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064476", "body": "Although \"insertor\" is apparently acceptable in special contexts (at least as I learned from a quick Google search), the common (correct?) spelling with regard to technology is \"inserter\". \ud83d\ude09 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064580", "body": "Hmmmm.... we're talking about the English language here. So we can't really count on _consistency_ with regard to any spelling rules. ;)\n\nAs a native speaker, \"insertor\" just looks wrong. Besides, neither Merriam Webster nor the Oxford English dictionary considers that to be a word (at least not the online versions).\n\nTake that for what it's worth.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064812", "body": "That allows the built-in spellchecker module in my brain to continue to operate in background mode. Thanks! \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19602422", "body": "Since I assume this was a mistake, I reverted this in c448739b7bc0a16862f0ebdc7662aa66597b54df.\n\nPlease correct me if my assumption was invalid. \ud83d\ude09 \n\nIn any case, it wreaks havoc on `gradle eclipse` (see https://discuss.gradle.org/t/eclipse-plugin-not-downloading-source-if-jar-found-in-mavenlocal/2182/7) resulting in source JARs no longer being included in the generated Eclipse project settings. So I hope we can do without the use of `mavenLocal()`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19602422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21644861", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21644861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21657894", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21657894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21918670", "body": "Looks like we implemented the same _polishing_. Now I'll have to rebase and refactor. \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21918670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22566437", "body": "Blagodaria! \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22566437/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24651472", "body": "That's one way to fix it, but I think double back ticks would also do the job: \r\n\r\n```md\r\n``@Autowired``'s __required__ ...\r\n```\r\n\r\n\ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24651472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27534097", "body": "That took 4 commits today, but I think this looks very well _polished_ now. \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27534097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/972963", "body": "Please note that this is actually an implementation of a `FactoryBean`, not a `BeanFactory`.\n\nSo please rename the class to `JacksonObjectMapperFactoryBean`.\n\nThe same applies to the corresponding test class.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/972963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33887654", "body": "Please do not reference resources in your local file system.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33887654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33887659", "body": "Please retain blank link between org.junit and org.springframework imports.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33887659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34309968", "body": "This method should be named `getRegisteredWebApplicationContexts` (i.e. plural).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34309968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310114", "body": "Spring's Javadoc convention is to use an imperative statement for the list line -- in other words, \"Register ...\" instead of \"Registers ...\". If you don't follow that rule, you run the risk of getting Juergenized. :wink: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310177", "body": "Spring requires a space between `if`, `for`, etc. and the following parenthesis.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34311400", "body": "Caveat Emptor: I don't use IDEA. Having said that...\n\nThere's a [Code Style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style) page, [import-into-idea.md](https://github.com/spring-projects/spring-framework/blob/master/import-into-idea.md), and the [IDEA Code Formatting](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-IDEA-Code-Formatting), but be aware that the IDEA Code Formatting page differs (incorrectly) from the Code Style page.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34311400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35215499", "body": "Need to update exception message as follows:\n\n`\"Value for header '\" + name + \"' is not a Date, Number, or String: \" + value`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35215499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35215656", "body": "AFAIK, in Spring we typically enclose _quoted_ values within exception messages in single quotes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35215656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35217200", "body": "same as previous comment from `spring-test` mock.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35217200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35217217", "body": "same as previous comment from `spring-test` mock.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35217217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35317761", "body": "and any other URL will delegate.... to what?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35317761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35364883", "body": "Thanks. I've updated the documentation in the feature branch now (and _rewritten history_ again :wink:).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35364883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/37138565", "body": "That should be \"A `WebAsyncTask<?>`\", not \"An\".\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/37138565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/37138574", "body": "Change to:\n\nA class which implements `CompletionStage<?>` (e.g., `CompletableFuture<?>`)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/37138574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/39940045", "body": "This is a _composed annotation_, not a meta-annotation.\n\n`@CrossOrigin` is a meta-annotation in this context.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/39940045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/40005140", "body": "I'm being picky for a reason.... people often confuse \"meta-annotation\" and \"composed annotation\" and that makes it difficult to discuss the topic. So I'm a proponent for a ubiquitous language in this context. See the following for details:\n\nhttps://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model#terminology\n\nWith that in mind, something like `@ComposedCrossOrigin` or `@MyCrossOrigin` (or something directly related to the use case) would provide more clarity for the intent.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/40005140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/40121373", "body": "Since I'm handling the JIRA issue now, I'll fix it on my own when I merge the commit.\n\ncheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/40121373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/42932776", "body": "These are breaking changes.\n\nIf you want to introduce something like this, you will have to introduce overloaded methods that accept the new method argument, keeping the existing signatures in tact.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/42932776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/55687520", "body": "Yes, that will likely be 4.3. Good catch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/55687520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/55742821", "body": "I'm not very comfortable having a `ContextCustomizer` being called from a `prepareContext()` method when a `customizeContext()` method exists as well (even if the latter is in a subclass).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/55742821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60828962", "body": "With the current implementation, you are tokenizing the string twice.\n\nWe would ideally prefer to avoid that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60828962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60829609", "body": "`master` is currently for Spring Framework 4.3 which supports Java 6, 7, and 8.\n\nWe therefore cannot use the `<>` operator.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60829609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69285196", "body": "Why did you choose `groovy` for the language instead of `java`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69285196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69285380", "body": "I'd also recommend using a more recent version of JDK 8, like we do in the [JUnit 5 build](https://github.com/junit-team/junit5/blob/master/.travis.yml).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69285380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69379846", "body": "> Travis CI is using 1.8.0_65 as is... that doesn't seem so bad. In the interest of saving build time, it seems best not do sudo apt-get update && sudo apt-get install oracle-java8-installer as your junit example does. What do you think?\n\nIf Travis CI is now using JDK 8 Update 65 as the default, then I agree: that should be fine.\n\nFor the JUnit 5 build, that wasn't the case when we set up the build: Travis CI used to default to an early JDK 8 release that didn't work for us.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69379846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91221860", "body": "We do not use wildcard imports in production code.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91221860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91990214", "body": "In general, contributors are required to adhere to the [Spring Framework Code Style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style). So please familiarize yourself with that and rework your PR.\r\n\r\nFor example, you need to undo **all** changes to import ordering and static imports throughout all changed classes.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91990214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91990526", "body": "It appears that you formatted code that you have not authored or modified, which is not permissible according to Spring's coding guidelines.\r\n\r\nAlso, it appears you may be using the wrong indentation settings.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91990526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/92004346", "body": "Production code is not allowed to use static imports.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/92004346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/155394295", "body": "If port 20,000 is not available, this test is guaranteed to fail.\r\n\r\nThus, we should not introduce a test that is this fragile.\r\n\r\nPlease make the test robust.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/155394295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/155394399", "body": "Please rename the method to `findAvailableTcpPortWithMinPortEqualToMaxPort()`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/155394399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "bperryhuston": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d64f2eb03862dcef657fe1a37755184b1ecfda25", "message": "Add JSON matcher to assert on request body\n\nSupport asserting JSON regardless of order and formatting.\nBased on same JsonExpectationHelper used in ContentResultMatchers.\n\nIssue: SPR-13919"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aclement": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1db7e02de3eb0c011ee6681f5a12eb9d166fea81", "message": "Modify SpEL code gen to take account of null safe refs\n\nWith this change the code generation for method and property\nreferences is modified to include branching logic in the\ncase of null safe dereferencing (?.). This is complicated\nby the possible usage of primitives on the left hand side\nof the dereference. To cope with this case primitives are\npromoted to boxed types when this situation occurs enabling\nnull to be passed as a possible result.\n\nIssue: SPR-16489"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/508aea8a47b69ac11426a6cedd9ddd9f93117ad2", "message": "Rework implementation of PathPattern.extractPathWithinPattern\n\nThis commit changes the implementation of the PathPattern\nextractPathWithinPattern method that used an old AntPathMatcher\nderivative to a new version that integrates more closely with\nPathContainer.\n\nIt also introduces consistency in a couple of areas. The javadoc\nis updated to specify this but basically:\n- the response from the extra method will have all leading\n  and trailing separators removed.\n- the response will have multiple adjacent separators within the\n  reponse reduced to just one.  (For example response would be\n  aaa/bb/cc and not aaa///bbb//cc)\nIf your response would start or finish with multiple separators, they\nare all removed.\n\nIssue: SPR-16120"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/07b961caa66ec181126e6f2b108637edaf8c19ae", "message": "Empty path should match the \"/\" PathPattern\n\nThis commit makes both slash \"/\" and empty \"\" request paths match the\n\"/\" `PathPattern`.\n\nIssue: SPR-15653"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3956423afefb7ab8f4d029c52933195f0d952823", "message": "Polish\n\nThe high level matchStarting API was removed a few commits ago.\nThis change tidies up by removing the supporting infrastructure\nfor that from the PathElements."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/26448a0ebccb0559bd04b93191ef876ad1535ed5", "message": "Rework matching to use PathContainer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ff2af660cf3e57a873107dcb18e1811bbe0806cf", "message": "PathPatternParser encodes patterns as it parses them\n\nBefore this commit there was no special handling for URL encoding\nof the path pattern string coming into the path pattern parser. No\nassumptions were made about it being in an encoded form or not.\n\nWith this change it is assumed incoming path patterns are not\nencoded and as part of parsing the parser builds PathPattern\nobjects that include encoded elements. For example parsing \"/f o\"\nwill create a path pattern of the form \"/f%20o\". In this form\nit can then be used to match against encoded paths.\n\nHandling encoded characters is not trivial and has resulted in\nsome loss in matching speed but care has been taken to\navoid unnecessary creation of additional heap objects.  When\nmatching variables the variable values are return in a\ndecoded form. It is hoped the speed can be recovered, at least\nfor the common case of non-encoded incoming paths.\n\nIssue: SPR-15640"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/77576ed6fe5e543397d57598b2f027c64fccfeba", "message": "Fix PathPattern comparator result for wildcard suffix usage\n\nWithout this change the comparator thinks \"/{foo}\"\nis more specific than \"/{foo}.*\". The minimal fix here\nto address it is to copy what the AntPathMatcher\ncomparator does which is to consider '.*' as *not*\na usage of a wildcard. See PatternInfo#initCounters()\nfor the AntPathMatcher handling of this.\n\nThis change ensures the PathPattern comparator now produces\nthe expected result but suffix usage in general needs more\nthought at some point.\n\nIssue: SPR-15597"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/109746a03bcb83b87793ea62fbd393afb9279391", "message": "Adjust source in test class to work around eclipse compiler bug\n\nIssue: SPR-15586"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c1edb3b5bd90a5548cf6db19f9bcf7383e4898fb", "message": "Enforce limit on classes loaded by Spel compiled expression loader\n\nUntil this change a single classloader was used to load\nall compiled SpEL expressions. This meant in a context where an\nexpression was repeatedly flipping between compiled and interpreted\nmode (which can happen if in MIXED mode compilation and changing\nthe context around the evaluation) the classloader would continually\nload a new compiled version but not orphan the old compiled version.\nThis eventually uses up all the memory as the number of classes\nis ever increasing.\n\nWith this change classloaders are used to load 100 compiled\nexpressions. The 101st will be loaded by a new one. Orphaning the\nold classloader means if an expression is ever recompiled there\nis more likely to be no anchored references left to the older\ncompiled form and it can be GC'd. In the MIXED situation above it\nshould help alleviate the problem of older classes never being\ncandidates for GC.\n\nIssue: SPR-15460"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd8655881101290ea98db64b1b087fa36806f1ea", "message": "Support optional trailing separator on path pattern matching\n\nThis commit adds the ability for path patterns to automatically\nmatch a trailing separator (so there is no need to add two\nvariants of a pattern, one with and one without). This behaviour\nis currently turned off but a simple tweak in PathPatternParser\ncan make it the default. If made default other parts of Spring\nmay need altering (simplifying hopefully) to cope with this.\n\nIssue: SPR-15260"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/316a680577a392464c6da60d989b00acd2a5e472", "message": "Modify getPathRemaining to return remaining path and bound variables\n\nWithout this change it was necessary to call getPathRemaining and\nthen chop up the path and make a call to matchAndExtract to get the\nbound variables for the path part that matched. With this change\nthis is all done in the call to getPathRemaining which returns\nan object holding the remaining path and the bound variables.\n\nIssue: SPR-15419"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/584b290dff472d93abed673e17f4f8cc1b04be37", "message": "Introduce method to allow a pattern to partially consume a path\n\nWith this change there is a new getPathRemaining() method on\nPathPattern objects. It is called with a path and returns\nthe path remaining once the path pattern in question has\nmatched as much as it can of that path. For example if the\npattern is /fo* and the path is /foo/bar then getPathRemaining\nwill return /bar. This allows for a set of pathpatterns\nto work together in sequence to match a complete entire path.\n\nIssue: SPR-15336"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0505bf1e70206a94f4748a5843fc5638389b7d9", "message": "Make PathPatternParser multi-threaded\n\nWith this change the original PathPatternParser is renamed\nInternalPathPatternParser and a new PathPatternParser class is added.\nThis new PathPatternParser class is a very simple thread-safe wrapper for\nthe InternalPathPatternParser. It achieves this by creating a new\nInternalPathPatternParser for each new parse request.  This follows the\nmodel used for SpEL parsing."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9245382112ee7923ba615222b7e6e1f7cfeda21", "message": "Fix RegexPathElement when matching variables against a root path\n\nThe first fix for issue 15264 covered the case of using a single\nvariable (the case mentioned in the bug report). However, when\nmore than one variable is used a different PathElement is built.\nThis RegexPathElement needs a similar change that checks the\npath includes data to bind.\n\nIssue: SPR-15264"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f1653cc21c09ebab136f84ee723bdf3c23965dde", "message": "Fix PathPattern incorrectly matching variable against root path\n\nIssue: SPR-15264"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f98ea11e5e3fa8b16d5c98b544377058ee30a205", "message": "Fix string handling to avoid exceptions when doing path extraction\n\nIssue: SPR-15259"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f786feb5e1183177e97935f7be2603b94597c4b3", "message": "Ensure correct recognition for start of match-the-rest path elements\n\nWithout this change the /{*foobar} and /** path elements were\nnot correctly enforcing that the first character they encounter\nmust be a separator. This problem was introduced when adjusting\nthe generated path element chains for these constructs. Originally\nthe generated chain included a SeparatorPathElement but in order for\nthese to match 'nothing' (i.e. /foo matches /foo/{*foobar}) the separator\npath element was removed, so the separator enforcement needed moving\ninto the CaptureTheRestPathElement and WildcardTheRestPathElement.\n\nIssue: SPR-14544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f58ffad9391a48a9d0d0815baea5171a1c840df2", "message": "Introduce PathPatternParser for optimized path matching\n\nThis commit introduces a PathPatternParser which parses request pattern\nstrings into PathPattern objects which can then be used to fast\nmatch incoming string paths. The parser and matching supports the syntax\nas described in SPR-14544. The code is optimized around the common usages\nof request patterns and is designed to create very little transient\ngarbage when matching.\n\nIssue: SPR-14544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d41d28f8cef5355e0cc36e51049577fb113f3b6f", "message": "Fix compilation of SpEL elvis/ternary expressions\n\nWithout this fix the compiled version of elvis\nactual behaved differently to the interpreted version\nif the value being queried was an empty string. This\nis now fixed. It also now correctly handles the\nquery value being a primitive and addresses the\nfindings of SPR-15192 where some type inferencing\nlogic was trying to be too clever, that code has\nbeen deleted.\n\nIssue: SPR-15192"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9000acd39dac17e88bfe82b9420aa050b5e56083", "message": "Rework compilation of OpNE/OpEQ SpEL operators\n\nFor SPR-14863 we need to adjust the code generation for OpNE\nto use !x.equals(y) rather than x!=y. There are also further\ncases in the equalityCheck() code in Operator that were not\nbeing handled in the compilation case (when comparators are\nused for example). This latter issue also affects OpEQ.\n\nRather than add yet more bytecode generation, both OpNE and\nOpEQ generateCode() methods have been simplified. The\ngenerated code now delegates to equalityCheck() in Operator\nwhich is exactly what the interpreted case does.\n\nThis ensures that the compiled code continues to behave just\nlike the interpreted case. It ensures changes to the interpreted\ncase are automatically picked up for the compiled case. It\nmakes the bytecode generation simpler.\n\nThe benefit of compilation of SpEL expressions is to avoid\nslow reflective calls - that doesn't apply for a basic\n(in)equality test so there is no need to go crazy in bytecode\ngen.\n\nIssue: SPR-14863"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7659916", "body": "Pull request looks fine to me.  Basically we were previously (deliberately) just dropping down to double whenever a number when non-literal.  Obviously this has the downsides as indicated in the original jira.  I'm ok with adding in float literal support.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7659916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8427978", "body": "That seems OK to me.  I see you are doing a fallback to try the class if you can't find it via regular means.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8427978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28412074", "body": "Apart from the duplicate tests this looks ok to me. Two further comments:\n\n1) The StandardTypeComparator could also be changed to include the BigDecimal case, for consistency, although i'm not sure how much that class gets exercised in practice.\n\n2) One point on style is that I think the spring way is to have your if statements like this:\n\n```\nif (foo) {\n}\nelse if (op1 instanceof Float || op2 instanceof Float) {\n```\n\nrather than\n\n```\nif (foo) {\n} else if (op1 instanceof Float || op2 instanceof Float) {\n```\n\nand this PR uses the latter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28412074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275478464", "body": "Rossen said: \r\n> Currently we go one RequestMappingInfo at a time but what if we first checked across all patterns and narrowed it down to a list of RequestMappingInfos whose patterns match the request?\r\n\r\nI'm not a total expert on all the interconnected elements here but the comment reminds me of my first pass at the matching where instead of a set of distinct parsed path objects, there was one tree structure built from parsing all paths (or some coherent group of paths), branches in the tree only existing where paths diverged ( https://github.com/aclement/pathmatcher ). This talks to that use case the guy had on stackoverflow with a lot of overlapping mappings. With such a structure it means if you had 10 paths with the same prefix, we would only match that prefix once against an incoming path to determine if we should continue matching the rest of each pattern against that path or we should dismiss them all immediately.  I kept this direction in mind in the parser/pattern matcher code, so it could grow from the current design into the tree structure, if we went in this direction.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275478464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275499363", "body": "> I wouldn't worry much about matching to this PR. If you create such a component it's easy to incorporate and redo this PR.\r\n\r\nI stepped back from the tree option to bring down complexity and get something done that supports the new syntax which was more compatible with the existing codebase. Actually, also because I wasn't confident enough to the the real spring changes that it would have necessitated, which Brian has started doing here. Personally I'd probably not rework this PR (my part of it) right now but instead in a later PR (in a later release?) do that refactoring that goes from 'something that iterates over parsed patterns and accumulates matches' to 'something that calls the tree matcher once and gets all matches in one go'. This latter approach also works well for pre-processing the candidate being matched against the patterns for even more speed.  Maybe it depends where we land on any further changes Brian makes, or if you say we must have that tree approach in to make this a coherent piece of work.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275499363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280966501", "body": "Hey @bclozel - this implements what we talked about to make it multi threaded. I submitted it as a PR for you to look over. Don't feel you have to take it if you don't like the approach! Feedback welcome.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280966501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295024452", "body": "I removed the SPR-15419 commit and have applied that direct to master, this PR still contains the SPR-15260 change and only that.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295024452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295406775", "body": "I am pulling the PR. I know Brian is out but I wanted to get this in so what I've done is integrate the changes but turned OFF the auto trailing separator matching. This makes it behave exactly as before so doesn't disturb any other code.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295406775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359124074", "body": "Some feedback... I wouldn't create a new test class, just add the test to the existing `SpelReproTests`. Update the years for files changed and the author tags. For changes made to SpEL behavior these days you need to consider any impact on compiled SpEL. Do the changes to `Operator` mean changes to the `isCompilableXX` or `generateComparisonCode` methods?  I can't remember what the compiler does for custom comparators.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359124074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17670118", "body": "Just one comment - it isn't `T(Integer.class)` it would be `T(Integer)` - no need for the class suffix. You will get an error if you supply the suffix.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17670118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631878", "body": "These new two lines are just a duplicate of the two lines preceding them??\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631903", "body": "Same here, two new lines duplicating the two lines above them.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631932", "body": "and again...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631946", "body": "and again...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631960", "body": "...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631979", "body": "...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631999", "body": "...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7631999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7632014", "body": "...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7632014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7632027", "body": "and again\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7632027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sdeleuze": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36a222acd5ef02dc4452addcedc6708edf46ed4e", "message": "Take into account the MimeType's charset in Jackson encoder\n\nNotice that per specification, only Unicode is supported\n(UTF8, UTF16_BE, UTF16_LE, UTF32_BE, UTF32_LE).\n\nIssue: SPR-16539"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c6f5acf15d261f82ba888a6c4ffc525c4fc1ca70", "message": "Upgrade Dokka to 0.9.16"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/067ad4c57a829ce2eadf480bb8e994a68d7f103f", "message": "Update Kotlin reference documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/31b25b5808ce7a1da45607c73f1a079bc1078fb2", "message": "Make WebFlux Jackson refdoc section relevant for Smile\n\nIssue: SPR-16151"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/196f3f8cc1aae9f3df06e9d961c62185e8730bfb", "message": "Improve WebFlux exception logging\n\nThis commit updates HttpWebHandlerAdapter and\nResponseStatusExceptionHandler in order to specify the method/uri in the\nlogged message.\n\nIt also logs a WARN message for bad request (400) HTTP responses in\norder to get some logs when an exception is thrown due to client error\n(unable to deserialize request body for example).\n\nIssue: SPR-16447"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6c78452b2794432a93aa0392f6964d59708cfb9", "message": "Update and improve script templating documentation\n\nIssue: SPR-16447"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b2681e1f4af623a782dab82ed5eef881316bb366", "message": "Add ViewResolverRegistry#scriptTemplate in WebFlux\n\nIssue: SPR-16431"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d02e4fb545f71ea1d101fdf534b3b4d6e9d86ef8", "message": "Add Vary:Access-Control-Request-Method/Headers CORS headers\n\nThis commit adds these 2 Vary headers in addition to the existing\nOrigin one to avoid caching of Access-Control-Request-Method and\nAccess-Control-Request-Headers headers which can be an issue\nwhen allowed methods or headers are unbounded and only the\nrequested method or headers are returned in the response.\n\nIssue: SPR-16413"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/32f6ccece8ba348381b4dcee8e332a89e9e42b29", "message": "Add WebFlux support for Smile streaming\n\nThe commit brings following changes:\n - Move getDecodableMimeTypes() to AbstractJackson2Decoder\n - Move getEncodableMimeTypes() to AbstractJackson2Encoder\n - Add support for application/stream+x-jackson-smile\n - Avoid streaming line separator when Smile encoder is used\n - Use double null token in Jackson2Tokenizer to identify documents\n\nIssue: SPR-16151"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1af052433cdf87e00a558d7cf5c76828476b421e", "message": "Document @Bean nullable parameters optional bean injection\n\nIssue: SPR-16053"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3f3141cddaf878d635318750b49f54147012a137", "message": "Add additional test for SPR-16210\n\nIssue: SPR-16210"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/43d3abdfd54697d90d4993f5d1975c6f384455a2", "message": "Fix SockJs CorsConfiguration for forbidden origins\n\nAfter this commit, AbstractSockJsService uses the configured allowed\norigins when generating the CorsConfiguration instead of \"*\".\n\nAs a consequence, forbidden origin requests still result in a 403\nresponse but now with no CORS headers in order to improve consistency\nbetween the status code and the headers.\n\nIssue: SPR-16304"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/19a1477228b8ed75926a15358e3253eb7ffa492e", "message": "Fix Kotlin bean w/ default + secondary ctors handling\n\nThis commit polishes SPR-16022 fix in order to handle correctly\nthe case when primary and default constructors are the same when\na secondary constructor is defined.\n\nIssue: SPR-16289"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c7de232b844816dd550130da720587cd9d23b6b", "message": "Polishing\n\nOptimize same origin check when the request is an instance of\nServletServerHttpRequest and when there is no forwarded headers.\n\nThis commit also optimizes the getPort methods and ForwardedHeaderFilter\nforwarded headers checks.\n\nIssue: SPR-16262"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c326e444885584261cd00cac3fdf83eaacfd3bb6", "message": "Refine forwarded protocol support\n\nThis commit refines forwarded protocol support in order to support\nproxies that only set \"X-Forwarded-Proto\" header and not\n\"X-Forwarded-Port\" by performing a reset of the port in such case.\n\n\"Forwarded\" header support has been updated accordingly since it\nalso supports similar use case, as described in SPR-15504.\n\nIssue: SPR-16262"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d2616b79968d816ac4d7a581469f84c19fe1b127", "message": "Fix RestOperations extensions parameters nullability\n\nIssue: SPR-16328"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/deac8e556e10f8ec352f5dae36e54e897fea2b2e", "message": "Improve Kotlin extensions doc about type erasure\n\nSince type erasure can be fixed only when using\nParameterizedTypeReference based Java methods, RestOperations and\nWebFlux API documentation should be updated to specify which extensions\nare subject to type erasure, and which are not.\n\nIssue: SPR-16273"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0075f13126a8837716ee47ccdfad2ed7482c8a0f", "message": "Improve CORS list properties combination logic\n\nThis commit allows CorsConfiguration#combine()\nto differentiate permit default values set by\nCorsConfiguration#applyPermitDefaultValues()\nfrom values configured explicitly by the user.\n\nThose permit default values will be overridden\nby any user-provided ones while user-provided values\nwill be combined in an additive way, including\nwhen \"*\" is specified.\n\nDocumentation has been improved accordingly.\n\nIssue: SPR-15772"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99cbfd32c3d7cea039536d784835238a9343b939", "message": "Set default view content-type with WebFlux fn\n\nWith this commit, the default content-type defined by the\nview (usually \"text/html;charset=UTF-8\" defined in AbstractView)\nis used if any, when none is defined in the response headers.\n\nIssue: SPR-16247"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e3e4f37222e0fd9ab741dfaefda78b39e02c6939", "message": "Upgrade to Kotlin 1.2.10"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/51aa16f85f5c746d374b3c0a4543dfc96a97cd18", "message": "Remove -Xskip-runtime-version-check Kotlin compiler arg\n\nThis compiler argument is not needed anymore since KT-16780\nhas been fixed."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c2e5dcb4a727cc58268489a05aac6633673f64e", "message": "Update Kotlin reference documentation\n\nThis commit removes the mention that Spring Boot 2.0 includes\nJackson Kotlin module since it is not the case as of M7, and\nadd a note about using bean validation annotations with Kotlin."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6a7b197af7f52568e14d53fab86a0aa44319f2ae", "message": "Improve Jackson codecs documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73a81f98d40eb6f5faa91aceb868db53fae2a94b", "message": "Allow interceptors to add existing header values\n\nAdditional commit to provide support of requests\nthat have a body.\n\nIssue: SPR-15066"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/554662ebab87af97ba25d0c9f5449c7acda8df9c", "message": "Allow interceptors to add existing header values\n\nProvide a fully mutable HttpHeaders to ClientHttpRequestInterceptors\nof a RestTemplate when headers are set using HttpEntity. This avoids\nUnsupportedOperationException if both HttpEntity and\nClientHttpRequestInterceptor add values for the same HTTP header.\n\nIssue: SPR-15066"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac00d8a215d054f3a2dcaaaab09d999fa053416c", "message": "Use JCenter first to resolve plugins\n\nThis is a workaround for Kotlin/dokka#146."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/769ea1b106d957d02d7d0f004b5f4d2b44fc8c06", "message": "Fix Kdoc regression to show only Kotlin API\n\nAs of Gradle Kotlin plugin 1.1.60,\nproject.sourceSets.main.kotlin.srcDirs contains\nJava source directories in addition to Kotlin\nones. This commit filter out Java sources to\nretain only Kotlin ones.\n\nIssue: SPR-16268"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7368f58518303a1fc0b7c64e4acb3d249b8f7cc5", "message": "Upgrade to Kotlin 1.2\n\napiVersion and languageVersion options are set to 1.1\non production code in order to avoid incompatibilities\nwith Kotlin 1.1 based projects or libraries.\n\nIssue: SPR-16239"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3b96690e697f093b414da120785e1adab22ca901", "message": "Add missing RestOperations extensions\n\nIssue: SPR-16229"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a87d3da7b8e9530bd0148b6bb35c7ef262783ac", "message": "Set Vary: Origin on CORS unauthorized response\n\nIssue: SPR-16224"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/652e5c5584dd8c734311784e8b4ceec25b39a163", "message": "Disable CORS credentials by default\n\nAccess-Control-Allow-Credentials CORS header, used to\nallow cookies with CORS requests, is not set to true\nanymore by default when enabling CORS with\n@CrossOrigin or global CORS configuration in order to\nprovide a more secured default CORS configuration.\n\nThe related allowCredentials property now requires to\nbe set to true explicitly in order to support cookies\nwith CORS requests.\n\nIssue: SPR-16130"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9f1d8517ba9e3e4b81a2ffb07d908fc2b1f77243", "message": "Polish Kotlin source code style"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3e8e0c1d6a26aed28dad2282745ac286398f4525", "message": "Upgrade to Reactor Bismuth-SR4\n\nIssue: SPR-16206"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c530745015d5c7031cfcb6f633f3f459ed97935d", "message": "Fix JsonView + HttpEntity Reactive handling\n\nThis commit adds\nAbstractMessageReaderArgumentResolver#readBody and\nAbstractMessageWriterResultHandler#writeBody variants\nwhich allow to pass the actual MethodParameter in order\nto perform proper annotation-based hint resolution with\nnested generics, for example with HttpEntity.\n\nIssue: SPR-16098"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9dd29f76ae52477bd8fd6eb5c31412ab477e8027", "message": "Polish CORS documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/38040bf3f2b4aaa5c342fedcd12421a2eacc9ae5", "message": "Add WebFlux CORS reference documentation\n\nIssue: SPR-16199"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/90e594501485eceb6b7c9e6bde74346a6d99ca8b", "message": "Upgrade to Kotlin 1.1.60\n\nIssue: SPR-16194"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edf82325557f05f482b0b9c0333d99908c8f1378", "message": "Avoid implicit autowiring with Kotlin secondary ctors\n\nAutowiring implicitely Kotlin primary constructors\nwhen there are secondary constructors has side effects\non ConstructorResolver. It seems reasonable to\nrequire explicit @Autowired annotation in such case.\n\nWith this commit, implicit autowiring of Kotlin\nprimary constructors is only performed when there\nis a primary constructor defined alone or with\na default constructor (define explicitly or\ngenerated via the kotlin-noarg compiler plugin\nor via optional constructor parameters with default\nvalues).\n\nIssue: SPR-16022"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1a246c0a679d72b871878234999a4ef2e42190cb", "message": "Fix ListableBeanFactory Kotlin extensions return types"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e1be82cfbc5b31bc8edcbec81feb08a99d9c3de", "message": "Add SPR-15942 to the refdoc list of pending Kotlin issues"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b9a0e6bbf2b6fe5f0ed222f506efc644d0d9a4f0", "message": "Update documentation about WebTestClient Kotlin issue\n\nIssue: SPR-16057"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c256a112b345f1a35a572c7498abc3f95b997ea", "message": "Parse correctly ContentDisposition header with semicolons\n\nIssue: SPR-16091"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/585ad5961ae1189c5010ae6ef5cf418f8c112484", "message": "Upgrade to Reactor Bismuth-SR2\n\nIssue: SPR-16085"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5a55327f42f4f88986e4ec4de026172d8f6fb7e", "message": "Upgrade to Reactor Bismuth-BUILD-SNAPSHOT\n\nThis is done in order to prepare for Reactor Bismuth-SR1\nwhich will be used by Spring Framework 5.0.1.RELEASE.\n\nIssue: SPR-16085"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6e71664a60db9e0cf965ee13fc111e1029d8d307", "message": "Add spring-kotlin-fullstack example to Kotlin refdoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2962f085e508b066ad33c7285178ba2d2b7095bc", "message": "Relax type check in FormHttpMessage(Reader|Writer)\n\nIssue: SPR-16055"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2ecd5a4f02b64515c46f74491b591ab7af902658", "message": "Update Kotlin issues list in the refdoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf86f9b3dddb14a1446304bf7f186059a65bd2e7", "message": "Polish Kotlin reference documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12e1ad9163dc523ce7e9bcaabcb14bd0149dbe96", "message": "Upgrade to Kotlin 1.1.51"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/492c469d7992e8e8ed99fb2c99f788a2e6bece1d", "message": "Polish Kotlin reference documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/142c16611dfbfc2ee0e1643b4452c854adf11c73", "message": "Upgrade to Gradle asciidoctor plugin 1.5.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00c0d7847faf1558390ddb1fe9677e72f8314269", "message": "Add spring-petclinic-kotlin to Kotlin refdoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fb09a75c8229a440dd302c3585853b967f0dcba3", "message": "Improve support of Kotlin beans w/ primary and default ctors\n\nThis commit add the default constructor if available as\nfallback after to the primary constructor.\n\nIssue: SPR-16012"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fbb428f0322b759b5d17bc966db8d631466581cf", "message": "Polishing\n\nIssue: SPR-16014"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/23497a7ece7aac1591187b46f4b601d2f48764e0", "message": "Support autowiring by constructor in Kotlin bean DSL\n\nIssue: SPR-16014"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14cba15296c636dbd3fef94cb1d927e32b1161f1", "message": "Open router and bean Kotlin DSL to allow building custom ones"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/12ef367f892f4886895c609b72f16c4938599234", "message": "Polish reference documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b85764c7db79767ea2498eef238cffc3722fb115", "message": "Add a section about immutable classes persistence in Kotlin refdoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74120ef00f149c10521b52948711de0e700b4e06", "message": "Add custom deserializers support to AbstractJackson2Decoder\n\nIssue: SPR-15975"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3133f87c1472205f00e617cc7137821a030bac76", "message": "Upgrade to Reactor Bismuth-RELEASE !!!\n\nThis upgrade includes:\n - reactor-core 3.1.0.RELEASE\n - reactor-test 3.1.0.RELEASE\n - reactor-netty 0.7.0.RELEASE\n\nIssue: SPR-16007"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d6364eb834791bf5a35ec274a71d8dbccab8b67", "message": "Remove \"chin\" in admonition blocks of reference documentation\n\nOriginally contributed by @olivergierke via\nspring-projects/spring-framework#1520. This commit is based on\nthe spring.css generated from the SASS original source, see\nbclozel/asciidoctor-stylesheet-factory#1."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0d8031d9b4c752a1f23870e2f796beab321181c5", "message": "Remove remaining Kotlin compilation warning"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/997748ee2935ede8c39d321975134ff9abb4998e", "message": "Upgrade to Kotlin 1.1.50\n\nPotential regression detected for null-safety on user project side\nhttps://youtrack.jetbrains.com/issue/KT-20411"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3996f3339916dafffbedcf155d9f540f73db1966", "message": "Support non-standard classes in Kotlin reflection discovery methods\n\nIssue: SPR-15999"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1e87b6dd7d4c0e046a17603aab636c8b4adf3289", "message": "Update null-safety refdoc with jsr305 JAR guidelines"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b6f1d1b582fc9a7a1c6c3e3ff147dff8cece006", "message": "Use compileOnly and testCompileOnly for JSR 305 JAR\n\nThis change avoids error messages in logs during test classes\ncompilation which are using @NonNull and @Nullable."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d8e52c04135474821d5d063d75a37ef1ea4f56b0", "message": "Refine BeanUtils#findPrimaryConstructor behavior\n\nIssue: SPR-15673"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7c18e4b1159015d34f9df816ccdbd45d6f837327", "message": "Polish null-safety documentation\n\nIssue: SPR-15756"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6c4a103f70e4b79856aacb6f6c0cd9a4b9e5d2c1", "message": "Remove support for generics nullability for now\n\nSee https://github.com/Kotlin/KEEP/issues/79"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8caeb33974ea38a347a55df6f5656ab75ad32724", "message": "Polish Kotlin reference documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/825449a3d2aa2b70ed7967ee2c266da5e26aaf9e", "message": "Introduce a link to go back to refdoc index"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c5ba55ffc2a1f4ccc5e435e5efdfc90e7e8a32a1", "message": "Polish null-safety documentation\n\nIssue: SPR-15756"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1bc93e3d0f2bd3ffc6b48662073a427c31088b3d", "message": "Revisit nullability annotations\n\nThis commit introduces the following changes.\n\n1) It adds a new Spring @NonNull annotation which allows to apply\n@NonNullApi semantic on a specific element, like @Nullable does.\nCombined with @Nullable, it allows partial null-safety support when\npackage granularity is too broad.\n\n2) @Nullable and @NonNull can apply to ElementType.TYPE_USE in order\nto be used on generic type arguments (SPR-15942).\n\n3) Annotations does not apply to ElementType.TYPE_PARAMETER anymore\nsince it is not supported yet (applicability for such use case is\ncontroversial and need to be discussed).\n\n4) @NonNullApi does not apply to ElementType.FIELD anymore since in a\nlot of use cases (private, protected) it is not part for the public API\n+ its usage should remain opt-in. A dedicated @NonNullFields annotation\nhas been added in order to set fields default to non-nullable.\n\n5) Updated Javadoc and reference documentation.\n\nIssue: SPR-15756"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8693bf94705e50195d26f7e93b7150e1809d4fb", "message": "Improve Kotlin ref doc\n\nThis commit add a section about annotations and provides\nvarious update and enhancements to the Kotlin reference\ndocumentation.\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/699dfc55a8964a9068e3c1494a161852c4d7a10a", "message": "Improve Kotlin ref doc structure\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5ae35f606c6779ab42f02967ee26c92d9f87620d", "message": "Leverage kotlin-reflect to determine parameter names\n\nThis is especially useful to determine interface parameter names\nwithout requiring Java 8 -parameters compiler flag.\n\nIssue: SPR-15541"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5d4ee09d53a727407771c500fc21cbd01c7f3083", "message": "Fix AbstractJackson2Encoder#canEncode\n\nThis commit ensures that the Jackson encoder is selected only\nwith supported mime types.\n\nIssue: SPR-15910"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/60f763a0dd2bc4e1559aff84cacd729387ee9c16", "message": "Polish Kotlin reference documentation\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8b8a6766de01467c8b45b1b9664f0ab2d58f7c69", "message": "Change BeanDefinitionDsl to implement ApplicationContextInitializer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2969af82d258e9f03f0eb594afc987b83a872278", "message": "Fix Reactive Web link in the ref doc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f812112c2bd571bac590827e7bc8b6f94e70006", "message": "Update Kotlin Slack URL\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/466699ba63dead88563e190671cf029e585b9058", "message": "Polishing\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44e8cdcd8935e5700edef4e9f7620324567e3c14", "message": "Polishing\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/884fc40c3cb3ef1ad9267bf50007460ca01185fb", "message": "Add \"Injecting configuration properties\" to Kotlin ref doc\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/75114bd835906bd3e09930af722bbed43a2ccf3b", "message": "Upgrade to Kotlin 1.1.4-3"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3c9bb645d58838e784f33d2a4cdfc77e1070b00b", "message": "Improve Kotlin reference documentation\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bddd71e7051014dc6fcef62137f723d2af57895a", "message": "Polishing\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4359008b2b8b4a5699d0038b854b0e36efaf1e1b", "message": "Polishing\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c1559b3f0ab64dbdc6bde55d0ce4b622d3aac555", "message": "Fix link to Spring Framework KDoc\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed6a35b46510e20708e1082bcd3396c612605c27", "message": "Add API and reference documentation for Kotlin support\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d2c1b284f3c0a6b10ad1d4919057b3f6f7457923", "message": "Polish Kotlin API contracts and documentation\n\nIssue: SPR-15659"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba02b5761e75ec1f6f9b421aa15bb9918c71aa75", "message": "Provide distinct Web and Reactive Web sections\n\nThis change allows much more usable TOC for the reactive\nstack and will make WebFlux documentation easier to\ncontribute thanks to a clearer split between both stacks.\n\nIssue: SPR-15149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cdb66888152c5d7afefd775ae647a1cda4b1f1f2", "message": "Update WebFlux code examples"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d61db48d643834c89e5c277fda8ea798d17c9db7", "message": "Improve WebFlux documentation sections\n\nIssue: SPR-15149"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3e2f6c848a84dda83c81ef9d7cc90dd030c0406f", "message": "Leverage Kotlin plugin dependency management"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef68ccdbd85c4662ef0634729250e35d7e7fde83", "message": "Add support for Kotlin autowired ctors w/ optional params\n\nThis commit adds support for autowired constructor parameters\non Kotlin classes with optional parameters. If some constructor\nparameters are not available, optional parameter default values\nwill be used instead. Both explicit @Autowired annotated constructor\nand implicit single constructor automatically autowired are supported.\n\nIssue: SPR-15847"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ab6430569da073e3c137daa45392f62f36a24bff", "message": "Efficient Kotlin metadata detection\n\nFollow-up of 3991ab4a2382418eb834802ed387ba293cadc7ca.\n\nIssue: SPR-15673"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9abe77670c6140bac551d21006d0358755aa2449", "message": "Sync with reactor-core when() -> zip() change"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73cf07e9a4f1000087118c24ef5d56f621f41160", "message": "Fix overridden methods nullability\n\nIssue: SPR-15869"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3f4ec372621b49fef12dede2c3a57d4998bb18f5", "message": "Upgrade to Kotlin 1.1.4\n\nIssue: SPR-15814"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef175d7ca6fc0f66db527abfaa796edc6744da9c", "message": "Fix BeanUtils#instantiateClass w/ Kotlin + noarg constructor\n\nIssue: SPR-15851"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f57e5584af36abe8211df1b89071a0cee68466a3", "message": "Add a reference to KT-18833 in JDK 9 ignored tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0bdd2467633bdc6de00be6b327edea1addb28bcb", "message": "Upgrade to Kotlin 1.1.4-eap-77\n\nThis commit also fixes compilation with JDK9 since\nKT-18832 has been fixed.\n\nIssue: SPR-15814"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6583f9f754c6a57dbb5610b916465a7dc3acf04d", "message": "Use ParameterizedTypeReference instead of Class in Kotlin extensions\n\nThis commit also removes WebFlux non-extension functions in favor of\nregular Kotlin extensions leveraging ParameterizedTypeReference parameter.\n\nIssue: SPR-15818"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3cef5a12941b6715fe643e0c6fc1b25848fa4cf4", "message": "Add RouterFunctions#toWebHandler(RouterFunction<?>)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1e07468d20c49baeb441425c7d0df053cb5d3cd1", "message": "Prevent warning about final private methods in CglibAopProxy\n\nIssue: SPR-15820"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/29c112c0102300b687dd7803f5c5866175ddb644", "message": "Avoid requiring `it` parameter in Kotlin bean DSL\n\nBy using function literals with receiver, we can avoid requiring\nlambda parameters for a shorter and nicer syntax. Based on a\nproposal from Joseph Taylor.\n\nIssue: SPR-15815"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed6fe2b72304aff14a2e419a3c8af12736542264", "message": "Upgrade to Kotlin 1.1.4-eap-33\n\nIssue: SPR-15814"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d8a80fc0db7945149d49e75f9f2143b450bb141d", "message": "Rename RouterFunction Kotlin DSL files"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0720f9e9786a79503420a5c39f079f5d19aa8736", "message": "Fix an eventual IndexOutOfBoundsException in RequestPredicates"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2437500cfef89629a3cbfee24a2d524a27021e11", "message": "Ignore DataBufferUtilsTests#writeAsynchronousFileChannel\n\nIssue: SPR-15798"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fa4d13968451bfe96eab122634c0a1eab6083aaa", "message": "Support instantiating Kotlin classes with optional parameters\n\nThis commit updates BeanUtils class in order to add Kotlin optional\nparameters with default values support to the immutable data classes\nsupport introduced by SPR-15199.\n\nIssue: SPR-15673"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fb4ddb0746a3f194091043de328875596736427a", "message": "Make getters and setters null-safety consistent\n\nThis commit ensure that null-safety is consistent between\ngetters and setters in order to be able to provide beans\nwith properties with a common type when type safety is\ntaken in account like with Kotlin.\n\nIt also add a few missing property level @Nullable\nannotations.\n\nIssue: SPR-15792"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ff85726fa9ca5f8c62c2b2b00da99729390d8360", "message": "Fix warnings in Kotlin tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2fd04dff3fa72c38b3840639678a5c588b69447", "message": "Add a [] Kotlin extension for PropertyResolver#getRequiredProperty"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f72e0daa543f91c7b37de8d02d72f1f95107b22c", "message": "Add an env accessor to BeanDefinitionContext\n\nIssue: SPR-15755"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f46520e6e8e70e59ad46bc31debdfd155cf943bc", "message": "Add Jackson Smile support to WebFlux\n\nThis binary format more efficient than JSON should be useful for server\nto server communication, for example in micro-services use cases.\n\nIssue: SPR-15424"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f011467b8b929928963486f8594eea460b50eb7", "message": "Introduce Kotlin functional bean definition DSL\n\nAs a follow-up of the ApplicationContext Kotlin extensions, close to\nthe Kotlin functional WebFlux DSL and partially inspired of the\nGroovy/Scala bean configuration DSL, this commit introduces a\nlightweight Kotlin DSL for functional bean declaration.\n\nIt allows declaring beans as following:\n\nbeans {\n\tbean<Foo>()\n\tprofile(\"bar\") {\n\t\tbean<Bar>(\"bar\", scope = Scope.PROTOTYPE)\n\t}\n\tenvironment({ it.activeProfiles.contains(\"baz\") }) {\n\t\tbean { Baz(it.ref()) }\n\t\tbean { Baz(it.ref(\"bar\")) }\n\t}\n}\n\nAdvantages compared to Regular ApplicationContext API are:\n - No exposure of low-level ApplicationContext API\n - Focused DSL easier to read, but also easier to write with a fewer\n   entries in the auto-complete\n - Declarative syntax instead of functions with verbs like registerBeans\n   while still allowing programmatic registration of beans if needed\n - Such DSL is idiomatic in Kotlin\n - No need to have an ApplicationContext instance to write how you\n   register your beans since beans { } DSL is conceptually a\n   Consumer<GenericApplicationContext>\n\nThis DSL effectively replaces ApplicationContext Kotlin extensions as\nthe recommended way to register beans in a functional way with Kotlin.\n\nIssue: SPR-15755"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7a171c6ae9e3f99562a7d14a993a7ca695338885", "message": "Fix Kotlin return types to match @Nullable annotations"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/727ca4514a1886c0e8739417536382d534844f59", "message": "Stream custom types in Jackson2JsonEncoder\n\nIssue: SPR-15727"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9901c38f9dfadafcd29113a6887e36c661962239", "message": "Improve logging of DefaultCorsProcessor for rejected headers\n\nIssue: SPR-15708"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1fa841099582a10f85ae2cebc112439411066ee8", "message": "Leverage RFC_1123_DATE_TIME formatter in tests\n\nIssue: SPR-15661"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d728d597f25f6ea2fcf1c7db66766812b01b6861", "message": "Add missing license headers in Kotlin files"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba3a12e4ccadb561603869dd208629296d6a6473", "message": "Use fixed GMT time-zone for WebSession Clock\n\nIssue: SPR-15675"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d57cd3726693db53d57238e50f0c07c350b155c2", "message": "Upgrade to Kotlin 1.1.3\n\nThis commit also enables Kotlin build with JDK 9 since this new\nversion supports it."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c1d8c7c591f5447038bea4e18b9df259a0f0743", "message": "Leverage ZonedDateTime in HttpHeaders\n\nThis commit introduces 2 new public methods in HttpHeaders in order\nto leverage Java 8 ZonedDateTime in addition to the existing long\n(with GMT time zone implied) variants:\n - ZonedDateTime getFirstZonedDateTime(String headerName)\n - void setZonedDateTime(String headerName, ZonedDateTime date)\n\nThis commit also leverages Java 8 thread-safe DateTimeFormatter for\nHttpHeader implementation instead of SimpleDateFormat. As a consequence\nof the usage of DateTimeFormatter.RFC_1123_DATE_TIME, HTTP date header\nserialization could change slightly for single digit days from for\nexample \"Thu, 01 Jan 1970 00:00:00 GMT\" to\n\"Thu, 1 Jan 1970 00:00:00 GMT\".\n\nIssue: SPR-15661"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1e04cdfa7e3ac74181efe57e0674abe4690c46a1", "message": "Add CorsWebFilter\n\nThis new WebFilter implementation is designed to allow initial\nCORS support when using WebFlux functional API. More high-level\nAPI may be introduced later.\n\nIssue: SPR-15567"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/59e90943e410940fa4c3e24086c06afa1872ca7f", "message": "Rename CorsProcessor#processRequest to process"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a2e555d749bbe5c1782b3ecd900f68a404be9fe4", "message": "Upgrade to Jackson 2.9.0.pr4\n\nIssue: SPR-15548"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/38db64e0d8668328bd7f806bcdbc70245289a07d", "message": "Warn when Jackson + Kotlin are used without jackson-module-kotlin\n\nIssue: SPR-15658"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d5f9ad03a78ded2da778ae9d63b29e1a7bdd6359", "message": "Support ScriptEngine#eval(String, Bindings) in ScriptTemplateView\n\nSupporting ScriptEngine#eval(String, Bindings) when no render function\nis specified allows to support use cases where script templates are\nsimply evaluating a script expression with an even more simplified\nconfiguration.\n\nThis improvement also makes it possible to use script engines that\ndo not implement Invocable.\n\nIssue: SPR-15115"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/04d5a2951c36bf52f0b6e0eb23fe45ecfacfdb25", "message": "Remove KClass based Kotlin extensions\n\nIssue: SPR-15660"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97909f225819b2297c1036a8a9108c0582edcf90", "message": "Support date properties in Content-Disposition HTTP header\n\nIssue: SPR-15555"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e0e6736bc58101af13a352d4aa2a6c2dc0994d72", "message": "Introduce LocaleContextResolver in WebFlux\n\nThis commit introduces LocaleContextResolver interface, which is used\nat ServerWebExchange level to resolve Locale, TimeZone and other i18n\nrelated informations.\n\nIt follows Spring MVC locale resolution patterns with a few differences:\n - Only LocaleContextResolver is supported since LocaleResolver is less\n   flexible\n - Support is implemented in the org.springframework.web.server.i18n\n   package of spring-web module rather than in spring-webflux in order\n   to be able to leverage it at ServerWebExchange level\n\n2 implementations are provided:\n - FixedLocaleContextResolver\n - AcceptHeaderLocaleContextResolver\n\nIt can be configured with both functional or annotation-based APIs.\n\nIssue: SPR-15036"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa28b6cb5483559c73cb2b1c67bd8ac8a726c048", "message": "Upgrade to Kotlin 1.1.2-5\n\nChangelog: https://github.com/JetBrains/kotlin/releases/tag/v1.1.2-5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3373a3f7ef879f9c53085fc2cc1b61ec7cef910e", "message": "Add Kotlin extensions for WebTestClient API\n\nIssue: SPR-15622"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6c09fa76a52abc818c7e79d8de25cfa3797a3ae", "message": "Disambiguate BodyExtractors/Inserters Kotlin function names"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/86580b23583d8e6de3e613feb7ac6e5585774f18", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/736bf1c502ccbbb25f94bf5ec5db46644001636b", "message": "Fix Kotlin dependencies\n\nAvoid importing Kotlin 1.0.x from Mockito Kotlin and only depends on\nkotlin-stdlib instead of kotlin-stdlib-jre8 since we don't use\nadditional jre7 or jre8 API."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8579ae66fcfc34160795ebbc212fc884eba5b4d0", "message": "Add comprehensive tests of Kotlin extensions\n\nThis commit also removes extensions hidden by Java API (varargs)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/90df7dd279a3c09ae0a022386319df2aacbb52d6", "message": "Add missing @Nullable annotation\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b494c53b40a76a3ce01a54b1bd384b6809f1a147", "message": "Avoid defining nullability for non-relevant API\n\nDefining nullability of some API like EnvironmentCapable\nor ConditionContext causes issues in Spring Boot because\nin the context where they are used, it is known for sure\nthey will return non-null values even if their API can in\nother context return null values.\n\nIt is better in this case for both Java and Kotlin to\nnot define at all the nullabity of such API.\n\nIn practice, this is achieved by removing the package level\n@NonNullApi annotation and adding it only on the\nrelevant classes.\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f28825f9da63a13aaf8940aadedcf81358dc506", "message": "Add more @Nullable parameters based on null usage\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c3e6afb8797e2893ab41c44514253c06b056c43c", "message": "Improve null-safety to fix some Spring Boot warnings\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b47d713e147d6994fbe435c267a1e8941e50ea08", "message": "Add missing @Nullable annotations on parameters\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ad2c0f8410e3b8642e65545afe77e38614069b08", "message": "Improve @Nullable annotation\n\nThis commit makes Spring @Nullable annotation leveraging\nJSR 305 @TypeQualifierNickname + @Nonnull(when= When.MAYBE)\ninstead of directly using @javax.annotation.Nullable which\nseems not designed to be used as a meta-annotation.\n\nIt also removes @TypeQualifierDefault since the purpose of\nthis annotation when applied at method level is to only\nchange return value nullability, not parameters one.\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/87598f48e41d483745aba56cbf4e998c6f6d680c", "message": "Introduce null-safety of Spring Framework API\n\nThis commit introduces 2 new @Nullable and @NonNullApi\nannotations that leverage JSR 305 (dormant but available via\nFindbugs jsr305 dependency and already used by libraries\nlike OkHttp) meta-annotations to specify explicitly\nnull-safety of Spring Framework parameters and return values.\n\nIn order to avoid adding too much annotations, the\ndefault is set at package level with @NonNullApi and\n@Nullable annotations are added when needed at parameter or\nreturn value level. These annotations are intended to be used\non Spring Framework itself but also by other Spring projects.\n\n@Nullable annotations have been introduced based on Javadoc\nand search of patterns like \"return null;\". It is expected that\nnullability of Spring Framework API will be polished with\ncomplementary commits.\n\nIn practice, this will make the whole Spring Framework API\nnull-safe for Kotlin projects (when KT-10942 will be fixed)\nsince Kotlin will be able to leverage these annotations to\nknow if a parameter or a return value is nullable or not. But\nthis is also useful for Java developers as well since IntelliJ\nIDEA, for example, also understands these annotations to\ngenerate warnings when unsafe nullable usages are detected.\n\nIssue: SPR-15540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/285fa1cc2cf2b911e407167e75ab76b5b27bd764", "message": "Fix typos in Kotlin extensions documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2caaa9195e4926669ae65afb2968db08ce05347", "message": "Add @Request(Param/Part) support for multipart requests\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4bfd04b3c54000f6e2e17127cd4a11b70f4e8571", "message": "Add multipart support to ServerWebExchange\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8e272bc5b095ff89bfc38613f56eae07999ce3f1", "message": "Expose ServerCodecConfigurer as a bean\n\nWith this commit, ServerCodecConfigurer is now exposed as a bean in\norder to be provided to DefaultServerWebExchange via\nWebHttpHandlerBuilder and HttpWebHandlerAdapter. This allows\nDefaultServerWebExchange to get configured codecs for reading form or\nmultipart requests.\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a712c1966133385de1c4a1208aa32c392ec21049", "message": "Add multipart support to WebFlux functional API\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/852dc84d3853c971f25491a52cf011fdd12c28f2", "message": "Add MultipartHttpMessageWriter\n\nThis commit adds a reactive HttpMessageWriter that allows\nto write multipart HTML forms with multipart/form-data\nmedia type.\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/23e4dd6d3d2278825d1010e9dca26d76475c3ecd", "message": "Add reading reactive multipart request support\n\nThis commit introduces reactive multipart support by adding a new\nMultipartHttpMessageReader interface (with default methods) and a\nSynchronossMultipartHttpMessageReader implementation based on\nthe Synchronoss NIO Multipart implementation\n(https://github.com/synchronoss/nio-multipart).\n\nIssue: SPR-14546"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/20718e682eb1ac673effae2828e9a92022767348", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6a1ce13ae2bc3946ffcf43c6bc6905ed137d8073", "message": "Upgrade Kotlin to 1.1.2-eap-77"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/09b0364ad7773dc8b541e9daa0c9e7ec9cd2037c", "message": "Upgrade Kotlin to 1.1.2-eap-73"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/005e85b0f55c8a073e6180739232f4a124d013bf", "message": "Update to latest Reactor 3.1 API changes\n\nIssue: SPR-15318"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dce72e0ad014a774b47f0fd2f134d47f813121da", "message": "Change Mono#then to Mono#flatMap in documentation\n\nIssue: SPR-15318"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e3fae2716e9d70903e9790efa0bdc312fda39615", "message": "Rename Mono#otherwise[Empty] to switch[onError/IfEmpty]\n\nIssue: SPR-15318"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d12d5f345509515e9677fd4886ae7a505584aa5d", "message": "Upgrade to Kotlin 1.1.2-eap-69"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d9144132e25212011ba5a683d6f256398854a4c", "message": "Upgrade to Reactor Core 3.1\n\nIssue: SPR-15318"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9a501fac46a9e4879ba8d72360ad1713169f2d8e", "message": "Fix failing tests\n\nIssue: SPR-14925"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/23e35c0e1a98c6c3659b38ae7b79e3f90a790df4", "message": "Handle Jackson InvalidDefinitionException with 5xx status in WebFlux\n\nIssue: SPR-14925"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d098a4b96b0251065ea606450e5de95c9827fd19", "message": "Make CodecException handling consistent\n\nThis commit makes CodecException handling consistent between functional\nand annotation-based APIs. It now returns by default 4xx status code\nfor decoding error and 5xx for encoding error + print the error reason\nin logs without the full stack trace in both variants.\n\nIssue: SPR-15355"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b85c5b6361a1a0997733326992dbb9005b16c9f", "message": "Rename RouterDsl to RouterFunctionDsl"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/18d8876dc8330ac816473aad1139b94be53c1794", "message": "Update RouterFunctionExtensions documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/57f1f4cc9849257d95ab658877ad945f42e503a6", "message": "Avoid duplicated kotlinVersion definition in build.gradle"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed8565894a4780716d238a9ae32910020730d0ce", "message": "Return 5xx HTTP status for invalid target types with Jackson\n\nInvalidDefinitionException has been introduced in Jackson 2.9 to be\nable to differentiate invalid data sent from the client (should still\ngenerate a 4xx HTTP status code) from server side errors like beans with\nno default constructor (should generate a 5xx HTTP status code).\n\nIssue: SPR-14925"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cfc89ebe16269a9816f97411485456d4d5c7bae0", "message": "Add WebClient.ResponseSpec Kotlin extensions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/73b44828e9dba23fec73286829c4583e6342049a", "message": "Resolve async model attributes in AbstractView\n\nThis change allows the functional WebFlux API to support natively\nreactive types and also makes it possible for View implementations to\ndisable async attributes resolution if they want for example take\nadvantage of stream rendering.\n\nIt also makes AbstractView#getModelAttributes() asynchronous.\n\nIssue: SPR-15368"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dd5a73b2e1e725867297793ecc3d6ec7977ebf7c", "message": "Remove deprecated usage of Reactor Loopback interface"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9f321e8d56cbfec70d3dda163602b1c1c4a8faab", "message": "Suppress warnings in tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2fd398bad35640aa1bfdece6e18ec611a647cbe", "message": "Specify explicitly Kotlin extensions return type\n\nThe main purpose is to specify nullability."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cbd98d52471a49b72013f04c09f28a6cb58e982b", "message": "Switch back to Reactor BOM Aluminium-BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3598addc0ef3769be7a5ccb4aeb0588c7f8bdccb", "message": "Use FormHttpMessageReader by default in ServerCodecConfigurer"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9f4fca944f4b8b0f81eaf7890aef371f7972806", "message": "Temporarily downgrade Reactor BOM to fix the build"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4db2daae5cfee193cb66776b099b2845c91f73e4", "message": "Add class level @JsonView tests\n\nIssue: SPR-14925"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e8bc95dd643f16505f039f4fa7261d82d613303", "message": "Upgrade to Jackson 2.9.0.pr2\n\nIssue: SPR-14925"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/92288630cf987fee43a8ab14d0f2733fa91509fd", "message": "Document Reactive APIs support"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/170057005e4960035e2b8fc2d0f11ac63295473b", "message": "Use .nest() instead of .route() in Kotlin Web DSL\n\nThe goal is to have better consistency between Java\nand Kotlin functional Web API."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/abc0c6e3e81a17144ca119fc7db20fa3db7ed1a6", "message": "Replace RouterFunction.route() by a router() Kotlin helper"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1a49de3204a3f8adc4f8424cbc42dd83eddae060", "message": "Upgrade to Kotlin 1.1.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c56e4bd581dcf7304376731f21502a8558ce9606", "message": "Upgrade to Tomcat 8.5.12"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3c26e7f0146f59fc4db76d1b24fbc4e9c197df6e", "message": "Add seeOther shortcut to ServerResponse.BodyBuilder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c8635de34e8468eac6b5ee4e25438f3f1b8d877a", "message": "Tune Gradle config to avoid Kotlin Runtime library warning"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9963c4a495c194deafcb0e7f983b1e67e3effd11", "message": "Fix Kotlin warnings"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4b1a953bff8ccad0e9bad4f3807200589911eb4", "message": "Fix a typo in spring-context-indexer documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ad3dafef4f34d883de24c89bbb6a161a6991a0eb", "message": "Upgrade to Kotlin 1.1.0\n\nIssue: SPR-15301"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/40ae8d41a450b070b23651cf3f9758dd2005d722", "message": "Introduce ServerResponse Kotlin extensions\n\nIssue: SPR-15293"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/710702acdc026b189e39f94055c99fdb36171f95", "message": "Polish Kotlin routing DSL\n\n - typealias to replace types like RouterDsl.() -> Unit by Routes\n - String.invoke() as path(\"/foo\") shortcut\n - String.route() as pathPrefix(\"/foo\").route() shortcut\n - Avoid requiring PathPredicates.* import\n\nIssue: SPR-15292"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c85f063d92d1d6ac0daa134ac4b64dac2c218182", "message": "Upgrade Reactor to Aluminium-SR1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2fe5064dbed7b11828978f3de66af1b1c5b985fa", "message": "Remove unneeded exclude from Gradle build"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/692e432f0b154be0acfa287a1beeb4a68d6c93d6", "message": "Generate Java 8 bytecode with Kotlin compiler\n\nThis commit also updates Kotlin from beta 2 to RC.\n\nIssue: SPR-15183"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d48fde7959b7a2635e3968888619b8c1932989c", "message": "Fix RequestPredicate.route() implementation\n\nIssue: SPR-14954"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/305f303d46eb0c6da03e7dd2a14317797bb07706", "message": "Rename RouterDsl to Routes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03f34e24ca588e6f1bdf20287d43c958b952b724", "message": "Add nested route support to Kotlin DSL\n\nIssue: SPR-14954"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7dd0f358ed9c4be448f161b6462cd26ae0e45d5d", "message": "Avoid using callable reference to stay Kotlin 1.0 compatible"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/276f896956832e798b00d414ba6d55e85d8bea47", "message": "Document Spring Boot support for WebFlux functional API"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f380ab9d90e4ed4e10382d4a22c2b3c22394673b", "message": "Polish RouterFunctionExtensions\n\nIssue: SPR-15065"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef550c43d61dfd506a15034756e68e0476fa4655", "message": "Flush JSON stream after each element\n\nIssue: SPR-15104"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fe05d3529227bba6b9a243bcb0f192609938f23b", "message": "Polish SseIntegrationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6b9b0230c4de394348c42b6f5964fc66eb659dd3", "message": "Introduce JSON streaming support\n\nThis commit introduces JSON streaming support which\nconsists of serializing HTTP request with\napplication/stream+json media type as line delimited JSON.\n\nIt also optimize Flux serialization for application/json by\nusing flux.collectList() and a single Jackson invocation\ninstead of one call per element previous strategy.\nThis change result in a x4 throughput improvement\nfor collection with a lot of small elements.\n\nIssues: SPR-15095, SPR-15104"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/02c4aff4ce93fb090383cf9526765774d1d54b4b", "message": "Upgrade to Kotlin 1.1.0-beta-38"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/123ee5f2dab22f1148272a9e1a852cd474b233a5", "message": "Add WebClient create() and build() static methods"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99deb387ed1328f0fbdc603b17cbd69dccf01228", "message": "Add Kotlin WebClient extensions"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2c94ee20433a38073edd7da1662320f81bf7e722", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ff257c0ea00c02e453c8390c641835ebe778955", "message": "Prevent NPE in ScriptTemplateView when no view is found\n\nIssue: SPR-15064"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2a5d1b086f514fe4ddf0d9e8a42d09416f93d36a", "message": "Fix Spring MVC ScriptTemplateView locale support\n\nThe locale should be set in resolveViewName() instead of\ncreateView() in order to be taken in account with cached\nviews.\n\nIssue: SPR-15064"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d95199466c52e26ff4c5c3e327e8ae6114e807f", "message": "Support i18n and nested templates in ScriptTemplateView\n\nThis commit changes the 3rd parameter passed to the rendering\nfunction from String url to RenderingContext renderingContext.\n\nRenderingContext contains 4 properties:\n - ApplicationContext applicationContext\n - Locale locale\n - Function<String, String> templateLoader\n - String url\n\nIssue: SPR-15064"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0b08d0a246902e798cd978d9ae2dda9658eff7df", "message": "Change repositories order to use the right Kotlin dependency\n\nA bogus pre-release of Kotlin 1.1.0-beta-17 seems to be\nin Spring Artifactory cache, this change make Gradle using\nthe right one from Bintray. Using --refresh-dependencies\nmay be needed to pick-up the right one."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/35d5dca571ead26abf5947b0161caede764d316a", "message": "Upgrade to Kotlin 1.1-beta-17\n\nSpring Framework 5.0 now requires Kotlin 1.1+. This commit\nalso re-enable Kotlin JSR 223 unit tests.\n\nIssue: SPR-15100"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/be45de0571fbcd2340d864988b9351df3628f471", "message": "Polish Kotlin Web functional DSL\n\nIssue: SPR-15065"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/02409f74b912c51a666c5afc664470da432f130c", "message": "Polish Kotlin routing DSL\n\nThis commit changes RouterFunctionDsl {...} (request)\nto route(request) {...}, remove uneeded methods, add\nmissing ones and add tests useful to validate the\nDSL syntax and behavior.\n\nIssue: SPR-15065"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b7471e7fca4548e0234a45ecd68db772e3cb5cb6", "message": "Add a Kotlin Web functional DSL\n\nThis commit introduces a router DSL for RouterFunctions\nand RouterFunction in order to be able to write idiomatic\nKotlin code as below:\n\nfun route(request: ServerRequest) = RouterFunctionDsl {\n    accept(TEXT_HTML).apply {\n            (GET(\"/user/\") or GET(\"/users/\")) { findAllView() }\n            GET(\"/user/{login}\") { findViewById() }\n    }\n    accept(APPLICATION_JSON).apply {\n            (GET(\"/api/user/\") or GET(\"/api/users/\")) { findAll() }\n            POST(\"/api/user/\") { create() }\n            POST(\"/api/user/{login}\") { findOne() }\n    }\n } (request)\n\nIssue: SPR-15065"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b04b41b93b1bad9b80044a10c71de691be591d36", "message": "Add bodyToMono/Flux<Foo>() Kotlin extensions\n\nIssue: SPR-15128"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0a988fd2b1c7e2d98e87df3842c4fc053acac9a5", "message": "Remove object wrappers in Kotlin extensions\n\nThis commit also improve significantly Kotlin extensions\ndocumentation.\n\nIssue: SPR-15127"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4f1fe74912788f95b2785f58c8a1104fafb364c7", "message": "Polish ListableBeanFactoryExtension"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8f14e29067d51b80aa4cc9562b41b7b1260e4ac8", "message": "Support AnnotationConfigApplicationContext{} in Kotlin\n\nIssue: SPR-15126"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f8461d856ae6f9e47736a5d8b93c15472f8433b7", "message": "Support Gradle-style Kotlin bean API\n\nval context = GenericApplicationContext {\n    registerBean<Foo>()\n    registerBean { Bar(it.getBean<Foo>()) }\n}\n\nIssue: SPR-15126"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6ee5e2a817ef77c341151a17d20e8e3d6709ea19", "message": "Polishing\n\nIssue: SPR-15118"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c5cfd8c8fc6b76b875a1544b82e10e5d64dc8e0e", "message": "Make the Kotlin bean registration API even more idiomatic\n\nPut the lambda parameter at the end and use a function\ninstead of a supplier to be able to register beans like this:\n\nval context = GenericApplicationContext()\ncontext.registerBean(Foo::class)\ncontext.registerBean{ Bar(it.getBean(Foo::class)) }\n\nIssue: SPR-15118"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/715274e327fe8ec72479f96b2e922a0e63f02ceb", "message": "Avoid the need to specify Supplier in Kotlin bean registration API\n\nBased on an idea from Mario Arias, we can avoid requiring specifying\nexplicitly Supplier lambda type in Kotlin API by declaring the supplier\nparameter as \"crossinline supplier: () -> T\" instead of\n\"supplier: Supplier<T>\".\n\nIssue: SPR-15118"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b503e4679ce37ac099be668cc1e33705da3fead1", "message": "Add reactive ScriptTemplateView\n\nFor now if sharedEngine is set to false, a new\nScriptEngine instance is created for each request.\n\nIssue: SPR-15063"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa43472f2ea1f8aaffa65be917bc24603dc4d56c", "message": "Fix error handling in Jackson2JsonDecoder\n\nIssue: SPR-15112"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e78ea3471143184a43a20e79c97a4eac070462b2", "message": "Temporary rollback to Kotlin 1.0.6\n\nKotlin 1.1-M04 has a bug that makes the generated bytecode\nnot compatible with Kotlin 1.0.x. This bug should be fixed in\nKotlin 1.1-M05."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/badde3a479a53e1dd0777dd1bd5b55cb1021cf9e", "message": "Add Kotlin based ScriptTemplateView rendering test\n\nKotlin JSR 223 support currently requires kotlin-script-util\ndependency (jcabi-aether, maven-core and aether-api can be\nexcluded since they are only used for live import of\ndependencies and bring a lot of JARs in the classpath) and a\n/META-INF/services/javax.script.ScriptEngineFactory\nfile specifying the ScriptEngineFactory to use, in that case\norg.jetbrains.kotlin.script.jsr223.KotlinJsr223JvmLocalScriptEngineFactory.\n\nIssue: SPR-15059"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ef4340063e1440d1679acbe8c35488fb8eebd15d", "message": "Upgrade to Kotlin 1.1-M04\n\nNeeded for Kotlin script and JSR 223 support, and a good target\nfor Spring Framework 5.0 since it will allow features like generating\nJava 8 bytecode, JDK 9 support, annotation array attribute single\nvalue without arrayOf(), etc.\n\nWe ensure Kotlin 1.0 compatibility by setting apiVersion and\nlanguageVersion compiler options to 1.0.\n\nIssue: SPR-15059"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/963ea062e481a5c4334d0b1c94b16fac8ea5eff8", "message": "Update Spring Web Reactive reference documentation\n\nIssue: SPR-14912"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4cd330989041d1a2f3db3cc01ab015577fbff2dd", "message": "Remove snapshot repository\n\nreactor-netty-0.6.0.RELEASE on Maven Central depends on\nreactor-ipc-0.6.0.RELEASE so no need for this repository anymore.\n\nIt may be needed to cleanup Gradle or Maven local cache\nsince preliminary version of reactor-netty-0.6.0.RELEASE\nhad a dependency on reactor-ipc-0.6.0.BUILD-SNAPSHOT."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c18ebdeee0235785396f3b2ffbdab2f83e9bbf01", "message": "Upgrade to Kotlin 1.0.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/58e113a591fc040cbe1534ece68c5a28bf6d73bf", "message": "Avoid NPE in AutoProxyRegistrar when no attribute found\n\nIssue: SPR-15055"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6a850ee688fcada1728d3e1b58a96fa37ca22112", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/546687d5e44c6771a95f5334dbcbf4b37a6cea33", "message": "Add Kotlin extension for RestTemplate\n\nIssue: SPR-15056"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3626a1c7f99a8026337a29bd8a958264e6bf13c0", "message": "Add Kotlin extensions for function Web API\n\nIssue: SPR-15054"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ff675f52269ef60c694f647ccaddefb58c174097", "message": "Add Kotlin extensions for bean registration and retrieval\n\nIssue: SPR-15048"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fbf88d19da1a9a80c8f0e4d5854723a451910cf1", "message": "Allow to specify hints with the functional web API\n\nThe most common use case is specifying JSON views.\n\nServerResponse.BodyBuilder#hint(String, Object) allows to\nspecify response body serialization hints.\n\nServerRequest#body(BodyExtractor, Map) allows to specify\nrequest body extraction hints.\n\nIssue: SPR-15030"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b183048b8179ed4cc73abb0cd6b7ac449e482c3", "message": "Introduce SSE support in WebClient\n\nIssue: SPR-14539"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69b69442bcbd1b7da6f360e33c7ccc7785e43729", "message": "Add ServerSentEventHttpMessageReader\n\nThis HTTP message reader parse incoming Server-Sent\nEvents and turn them into Flux<String>, Flux<Pojo>\nor Flux<ServerSentEvent>.\n\nIssue: SPR-14539"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/183b326f6db7559a00f603674be35b86b3e9c9ca", "message": "Add ServerSentEvent#toString()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/419d2b4e0ac1032e6ed53a3f88605ba389bdcc35", "message": "Polish ServerSentEventHttpMessageWriterTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8d8273dc15a07cfec81367fc1bc9dac16fe0861", "message": "Fix a typo in ServerSentEventHttpMessageWriter Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e07d110a67791281597bc5d08abdbb93a09b1bf9", "message": "Update to reactor-core 3.0.4.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a1ae9ac1bdd6aaaceb42c2a65b37ed92450334cc", "message": "Add ServerHttpRequest.Builder#header(String, String)\n\nThis method allows to set or override easily a specific header value."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/712a63205c8b7c80352b7fbd2b73c142aec31fc1", "message": "Add HttpHeaders#setAcceptLanguageAsLocale(Locale)\n\nIssue: SPR-15024"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e0c43c4fcbdb259d7a63ab84ac3c5568f255f42b", "message": "Disable also reactor-netty WebSocket integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7bde85ae555c5ac315d60c963a1517367e9a99b5", "message": "Fix previous commit"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/879b3879547b094a5f5642d06fe99df7dc262681", "message": "Disable temporarily reactor-netty integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36da299f96e7be182ea956f3094d0cf1715da6c5", "message": "Add set/getContentLanguage() to HttpHeaders\n\nIssue: SPR-14536"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9764d5743384fea77e0894090b6e56418ae82457", "message": "Add set/getAcceptLanguage() to HttpHeaders\n\nIssue: SPR-15024"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dfcd5b9ed9f429439980b5ffde17b2ee08593670", "message": "Add a test to validate Reactor Netty automatic flushing\n\nIssue: SPR-14992"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4021d239ab15dfd119d248c9e830ed2f2f935985", "message": "Fix JsonObjectDecoder with '[' starting chunk\n\nIssue: SPR-15013"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4519c236d6e3fc558d88dc3579f6768a2f40f356", "message": "Restore reactor-netty test in FlushingIntegrationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1829adecb7b8d80d4110399b3582bbc2597492d6", "message": "Disable temporarily reactor-netty in FlushingIntegrationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b9892cc5d4a0d1658873b150a7c1014531ffbea4", "message": "Add missing overrides to MockServerHttpResponse"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2735cba4b353027ac649b592bc9eb38c473b4fa1", "message": "Append \"data:\" after line breaks for SSE JSON data fields\n\nIssue: SPR-14899"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/24b3614063d5f3318a0242ce62e1f2203e8ead12", "message": "Add a 8 Kb flush threshold to RxNettyServerHttpResponse\n\nIssue: SPR-14991"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/20c60650ee901942295cf3115bf86078c7cdc0c5", "message": "Upgrade to RxJava 2.0.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/300f2cd2ddc6a2a22df40ff2e2ede2167c5eccf5", "message": "Polish RedirectView\n\nIssue: SPR-14534"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2e994f7dc38b5520555720dac215064949ccfabf", "message": "Add RedirectView to Spring Web Reactive\n\nMain differences with the Spring MVC original implementation:\n - Default redirect HTTP code is 303 See Other since we can assume\n   all HTTP clients support HTTP 1.1 in 2016\n - No more http10Compatible property, use statusCode instead\n - By default the redirect is relative to the context path\n - A builder allow to set various properties if needed\n - In UrlBasedViewResolver, a Function<String, RedirectView>\n   redirectViewProvider property allows to customize RedirectView\n   instances in a flexible way\n\nIssue: SPR-14534"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0fcae5d2c5cad7c63cec9497d12d4f44d9a66cae", "message": "Polishing\n\nIssue: SPR-14952"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4660ef701e5ec027d8c8a01a638870e454a47ca8", "message": "Disable temporarily Kotlin compiler to fix JDK 9 build"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8d26c738a016d9aa57fc3b080fe58f0c44fb341d", "message": "Polishing\n\nThis commit polishes previous one by also accepting\ngeneric types explicitly declared with a class that\nextends DataBuffer allowing to write Flux<DefaultDataBuffer>\nfor example.\n\nIssue: SPR-14952"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a143b57d4b397f5778428be40cc7a5083c42ee89", "message": "Polish Kotlin nullable support\n\nThis commit polishes Kotlin nullable support by reusing\nMethodParameter#isOptional() instead of adding a new\nMethodParameter#isNullable() method, adds\nKotlin tests and introduces Spring Web Reactive\nsupport.\n\nIssue: SPR-14165"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99a8510ace46af9b05b822e7c65f08aae885ca98", "message": "Introduce HttpHeaders get/setContentDisposition()\n\nThis commit introduces a new ContentDisposition class designed\nto parse and generate Content-Disposition header value as defined\nin RFC 2183. It supports the disposition type and the name,\nfilename (or filename* when encoded according to RFC 5987) and\nsize parameters.\n\nThis new class is usually used thanks to\nHttpHeaders#getContentDisposition() and\nHttpHeaders#setContentDisposition(ContentDisposition).\n\nIssue: SPR-14408"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b10541111f0169bf909ab417bd3bcff1f18722d", "message": "Upgrade to reactor-test 3.0.3.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b447d7dbe644dc095dd1afc99c4d3fd31e9732f3", "message": "Rename expectErrorMatch() to expectErrorMatches()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b338e6d7aaea5d460f97661a3ea6a36b34afa6d1", "message": "Rename expectErrorWith() to expectErrorMatch()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8705df502dd2254e3b3af4ed61e3f3a2273c59af", "message": "Rename Verifier to StepVerifier\n\nIssue: SPR-14800"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b4b7c278dfb17017cc176ca95525372b5a830dd1", "message": "Update tests according to latest reactor-test changes\n\n - ScriptedSubscriber has been renamed to Verifier\n - The Publisher is passed to create() instead of verify()\n - No more need to specify the generic type explicitly\n - Version is now sync with reactor-core\n\nIssue: SPR-14800"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9ccffb6de5783b970d06d5aa036531d46524aa9b", "message": "Upgrade to RxJava 2.0.0"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/46599e7d039b95acb141308c7dfa5d3398404bc1", "message": "Add FormHttpMessageReader/Writer\n\nIssue: SPR-14540"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1030eba3f6f0601413e1652f9b2151d21adc245", "message": "Fix JsonObjectDecoder chunks handling\n\nIssue: SPR-14859"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37ce56fe9656310e343e46d22ced8eec758426e3", "message": "Upgrade to Reactor Core 3.0.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2075932780b9801c22222ddd2016ed63f360c894", "message": "Add support for RxJava 2 Maybe type\n\nIssue: SPR-14843"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00ce72f9e37ab538acfb93cb4f740df04028da31", "message": "Upgrade to RxJava 2.0.0-RC5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2a279b70649524746623e80fd91aed2b86ebd243", "message": "Upgrade to Reactor Core 3.0.3.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b961a31cc8798b661cf11cd18c12f7d7872a5298", "message": "Upgrade to RxJava 1.2.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/921bf5fb7076a6836cac1fa7cf421d2d76827899", "message": "Use the official RxJava to Reactive Streams adapter\n\nThis commit removes the usage of Reactor adapters (about to\nbe moved from Reactor Core to a new Reactor Adapter module).\nInstead, RxReactiveStreams is now used for adapting RxJava\n1 and Flowable methods are used for RxJava 2.\n\nIssue: SPR-14824"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50f2cda009340757e98d14863928be0739755ce6", "message": "Better encapsulation for CORS default permit configuration\n\nThis commit also improves CorsRegistration Javadoc.\n\nIssue: SPR-14798"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9bf8489afd9cdfbbc217f5d4ad3461660a00d671", "message": "Remove duplicated elements in CorsConfiguration#combine()\n\nIssue: SPR-14792"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/196c73fa50f79a7690bb5b2904efe36c9ddd1b65", "message": "Polish CorsConfigurationTests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e31a2f778bf401f59cb6ae5124bf2d8b70e8606f", "message": "Add Reactive CORS support\n\nThis is a port of Spring MVC CORS support for Spring Web Reactive:\n - CORS classes keep the same name but are in the\n   web.cors.reactive package\n - CorsConfiguration is reused because not tied to Servlet API\n - CORS HandlerMapping integration is done at\n   AbstractHandlerMapping level\n - AbstractUrlHandlerMapping and AbstractHandlerMethodMapping\n   have been slightly modified to call\n   AbstractHandlerMapping#processCorsRequest()\n - Both global CORS configuration + @CrossOrigin support have\n   been implemented\n\nIssue: SPR-14545"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0cc330e8fc8b29790af7c220e828cfe393094e6b", "message": "Fix HttpRequest#getURI() with Netty based engines\n\nHost and port are now properly retrieved from Reactor\nNetty and RxNetty (the scheme is not available).\n\nIssue: SPR-14794"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ba7ea5f92a16c59c3ce71fe4f44c381ff579b4e", "message": "Upgrade to Reactor Netty 0.5.2.RELEASE\n\nThis new Reactor Netty release fix a critical issue that could\nprevent proper connection handling."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/324c310cbd3a95da73d36a6f868a538742a10c4f", "message": "Log unresolved exceptions at error level"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dbc86ec04382fe53a22cc7b01acbc0fa70b9ae37", "message": "Refine Jackson canEncode() / canDecode() implementation\n\nThis commit refine Jackson canEncode() / canDecode()\nimplementation by using ObjectMapper canSerialize() /\ncanDeserialize() methods.\n\nIssue: SPR-14748"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b91c0b3a1a0e21d37e3296d6e5a96bb50141a922", "message": "Fix JSON and SSE writer registration\n\nIssue: SPR-14748"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44ceecc8b39f73c47770ec52960c13b166af2837", "message": "Imply text/event-stream when serializing ServerSentEvent\n\nIssue: SPR-14748"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f918a2b192fcd46ab4090fca68fa6156f13d4c65", "message": "Rename beforeRead/Write() to resolveRead/WriteHints()\n\nThis commit also removes the ServerHttpResponse parameter, not\nneeded here since it is possible to override the write() method.\n\nIssue: SPR-14557"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1d46b8d7e1dc94b14d2cd913906f5f99054d112d", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/857e77eec2cc02ffd4b4f1f22808ccbe32351e3f", "message": "Make ServerHttpMessageReader/Writer more powerful and flexible\n\nThis commit makes it possible, in addition to provide hints, to\nperform additional operations with the request and the response\nat ServerHttpMessageReader/Writer level.\n\nAbstractServerHttpMessageReader/Writer now provide\nconvenient beforeRead/beforeWrite abstract methods for such need.\n\nIssue: SPR-14557"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/38f3d12e458933a2b910d0b5e16caaef111382c9", "message": "Do not provide hints for can*() methods anymore\n\nIssue: SPR-14557"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1bf828a1498eecd690e12b01498b7d58dc480ce8", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d8c089a212d0daacc9e0970170d45cb4512e27d", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6cda08e94b9ba72da2334733443aefd2462c8755", "message": "Add Jackson @JsonView support\n\nIssue: SPR-14693"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e74c59bf301ed18eb52fe79df03f1c3cef230a7e", "message": "Introduce ServerHttpMessageWriter/Reader to resolve hints\n\nIssue: SPR-14693"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1516", "title": "Fix AbstractJackson2Encoder#canEncode and make writer type resolution more consistent", "body": "This PR contains 2 commits intended to address [SPR-15910](https://jira.spring.io/browse/SPR-15910) raised by @wilkinsona. The type resolution consistency change is a significant (but really needed IMO) one that I would like to validate with @wilkinsona, @rstoyanchev, @poutsma and @bclozel.\r\n\r\nThe details of this change are in the 2nd commit message log and reproduced bellow:\r\n\r\n> Before this commit, Spring WebFlux used both the declared\r\n> return value type and the concrete object type in writers,\r\n> in a similar fashion than Spring MVC.\r\n> \r\n> But this can lead to inconsistent behaviors, for example between\r\n> type resolution of a return value that requires an adapter\r\n> (declared return value type is used) and one that does not\r\n> (concrete return value type is used) or between ? and Object handling.\r\n> \r\n> After this commit, only declared type (via return value type for\r\n> annotation-based programming model or ParameterizedTypeReference for\r\n> the functional API) is used in order to provide a consistent and\r\n> predictable behavior.\r\n> \r\n> The asynchronous nature of WebFlux, type erasure and providing\r\n> error-prone SPI are also reasons that motivates this change.\r\n> \r\n> Concretely that means that handler methods declaring an Object return\r\n> value type and returning a String or Resource value won't be handled\r\n> anymore by respectively by CharSequenceEncoder and ResourceEncoder.\r\n> These handler methods need to declare explicitly the return value type.\r\n> \r\n> For use cases that requires Spring MVC dynamic type resolution based\r\n> on the concrete return value type, using the functional API which allows\r\n> programmatic type resolution is the recommended way to use with WebFlux.\r\n\r\nThanks in advance for your feedbacks.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1264", "title": "SPR-14953: Provide shortcut methods for routing", "body": "This PR make the route declaration shorter and more readable, for example for Reactor website:\r\n\r\nInstead of:\r\n```java\r\nprivate static RouterFunction<?> routes() {\r\n\treturn route(GET(\"/docs/api/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/docs/\", \"/old/\"))).build())\r\n\t\t.andRoute(GET(\"/docs/reference/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/docs/\", \"/old/\"))).build())\r\n\t\t.andRoute(GET(\"/docs/raw/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/docs/\", \"/old/\"))).build())\r\n\t\t.andRoute(GET(\"/docs/{dir}/api\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"api\", \"release\"))).build())\r\n\t\t.andRoute(GET(\"/core/docs/reference/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(\"https://github.com/reactor/reactor-core/blob/master/README.md\")).build())\r\n\t\t.andRoute(GET(\"/core/docs/api/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/core/docs/\",\"/docs/core/release/\"))).build())\r\n\t\t.andRoute(GET(\"/netty/docs/api/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/netty/docs/\",\"/docs/netty/release/\"))).build())\r\n\t\t.andRoute(GET(\"/ipc/docs/api/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/ipc/docs/\", \"/docs/ipc/release/\"))).build())\r\n\t\t.andRoute(GET(\"/ext/docs/api/**/test/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/ext/docs/\", \"/docs/test/release/\"))).build())\r\n\t\t.andRoute(GET(\"/ext/docs/api/**/adapter/**\"), request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/ext/docs/\", \"/docs/adapter/release/\"))).build())\r\n\t\t.and(resources(\"/**\", new ClassPathResource(\"static/\")))\r\n\t\t;\r\n}\r\n```\r\n\r\nWe can write:\r\n```java\r\nprivate static RouterFunction<?> routes() {\r\n\treturn routeGet(\"/docs/api/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/docs/\", \"/old/\"))).build())\r\n\t\t.andRouteGet(\"/docs/reference/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/docs/\", \"/old/\"))).build())\r\n\t\t.andRouteGet(\"/docs/raw/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/docs/\", \"/old/\"))).build())\r\n\t\t.andRouteGet(\"/docs/{dir}/api\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"api\", \"release\"))).build())\r\n\t\t.andRouteGet(\"/core/docs/reference/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(\"https://github.com/reactor/reactor-core/blob/master/README.md\")).build())\r\n\t\t.andRouteGet(\"/core/docs/api/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/core/docs/\",\"/docs/core/release/\"))).build())\r\n\t\t.andRouteGet(\"/netty/docs/api/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/netty/docs/\",\"/docs/netty/release/\"))).build())\r\n\t\t.andRouteGet(\"/ipc/docs/api/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/ipc/docs/\", \"/docs/ipc/release/\"))).build())\r\n\t\t.andRouteGet(\"/ext/docs/api/**/test/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/ext/docs/\", \"/docs/test/release/\"))).build())\r\n\t\t.andRouteGet(\"/ext/docs/api/**/adapter/**\", request ->\r\n\t\t\tstatus(FOUND).location(URI.create(request.path().replace(\"/ext/docs/\", \"/docs/adapter/release/\"))).build())\r\n\t\t.and(resources(\"/**\", new ClassPathResource(\"static/\")))\r\n\t\t;\r\n}\r\n```\r\n\r\nAlso in Kotlin it provides for free a workaround for a limitation that forces to specify the lambda type, so instead of writing:\r\n```kotlin\r\nroute(GET(\"/\"), HandlerFunction { ok().body(fromObject(\"Hello Mix-IT!\")) })\r\n.andRoute(GET(\"/user/{id}\"), HandlerFunction { req -> ok().body(fromObject(User(req.pathVariable(\"id\").toLong(), \"Robert\"))) })\r\n```\r\nWe can write:\r\n```kotlin\r\nrouteGet(\"/\", { ok().body(fromObject(\"Hello Mix-IT!\")) })\r\n.andRouteGet(\"/user/{id}\", { req -> ok().body(fromObject(User(req.pathVariable(\"id\").toLong(), \"Robert\"))) })\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41567925", "body": "I fixed web.xml sample indentation, and proposed \"Web MVC\" instead of \"Spring MVC\" or \"Servlet MVC\" in order to match with terms used in reference documentation chapters. Is it fine for you or should I use \"Spring MVC\" instead ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41567925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45450466", "body": "I agree that `CancellationException` delivered to an `onFailure` callback is useful, and it is also consistent with Java 8 `CompletableFuture` behavior. @rstoyanchev I have updated the 2 related tests [in my fork](https://github.com/sdeleuze/spring-framework/compare/matsev-SPR-11614).\n\n@matsev Have you already signed the Contributor License Agreement ? If not please please follow [these instructions](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement). Once you've completed the web form please add a comment here. Thanks in advance !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45450466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47986218", "body": "@rstoyanchev I think this PR is now ready to be reviewed, as discussed recently the ImportSelector approach is now used for registering view configurer beans. I have already rebased it on top of latest master, in order to avoid spring-mvc-4.1.xsd merge issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47986218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48230059", "body": "@poutsma Thanks! I will contact you shortly to plan a Skype call.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48230059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48346156", "body": "@poutsma Could you review this new commit? I tried to take in account all your feedbacks, including your API proposal (addCallback method with successCallback and failureCallback parameters instead of onSuccess and onFailure methods)\n\nI have rebased it against latest master, so there is new changes (mostly the AsyncResult that now extends ListenableFuture instead of Future, I wrote a comment asking some feedback in the commit).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48346156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48449880", "body": "@poutsma Thanks for your review, very interesting for me, and we now have a better API :-)\n\n@jhoeller Could you have a look to this PR, especially my `AsyncResult` addCallback changes (not directly related to this issue, but It seemed to me that it was a good idea to call onFailure callback when an exception is thrown). If everything is ok, could you merge it to master? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48449880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48604381", "body": "@rstoyanchev Could you have a look to this PR and send me your feedbacks please ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48604381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48719383", "body": "@philwebb I have taken your coding style feedbacks in account.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48719383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49174720", "body": "I have updated the names to SuccessCallback and FailureCallback, and rebased the commit against latest master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49174720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49263548", "body": "Replaced by pull request #595 as discussed with @rstoyanchev \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49263548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51208925", "body": "@poutsma If you can, could you please review this PR ?\n\nThis is mostly documentation changes, but it impacts also the API, and since we are just before 4.1.RC2, I would like to be 100% sure that my changes are fine. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51208925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51467112", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51467112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51468359", "body": "@jhoeller In this PR, Jackson XML support is enabled as soon as the application includes jackson-dataformat-xml dependency. The reason why I did that is that JAXB2 will be in the classpath as soon as people use JDK6 or later, defeating automatic enabling of Jackson XML support for most users. On one side it could break existing applications, on the other side jackson-dataformat-xml is not a widely used library, I thought we could try to implement it that way, but it is perhaps too risky ...\n\nDo you think I should keep or disable automatic usage of the Jackson XML support when jackson-dataformat-xml is on the classpath ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51468359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52047798", "body": "Thanks, I will modify AbstractJackson2View package (as well as AbstractJackson2HttpMessageConverter one) and push this commit to master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52047798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53544673", "body": "Merged in master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53544673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58035431", "body": "Yes it is, thanks for the pull request! Have you signed the [Spring CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement) ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58035431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58036948", "body": "Closing this PR since SPR-12188 has been resolved as \"Works as Designed\" with a detailed explanation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58036948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58148095", "body": "Merged thanks !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58148095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58186738", "body": "Hi @yange, as explained by @snicoll, without an updated patch against master we won't be able to review your contribution and will have to close this PR without merging it. Could you please update it ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58186738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58187869", "body": "I have created the related JIRA issue [SPR-12309](https://jira.spring.io/browse/SPR-12309), and will merge this PR to master when the 4.1.x branch will be created (target version is 4.2).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58187869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58189667", "body": "Merged a few month ago, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58189667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58211173", "body": "I merged an updated version of your contribution, mainly to adapt it to our new `Jackson2ObjectMapperBuilder` (commit 25bb58a1e82bcb8f0304573eefb3c89e4134e426). Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58211173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58348043", "body": "Integrated in 4.1 with commit 51e4b07856c8b5efca40f86fd1c654be1f2645a1, so I close this PR. Thanks for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58348043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58368761", "body": "Hi @yange, thanks for creating this updated PR. Could you please describe more in detail your use case ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58368761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58526349", "body": "I close this PR as the proposed fixed has been integrated as described in [SPR-12198](https://jira.spring.io/browse/SPR-12198) comments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58526349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132152487", "body": "Thanks for this PR, did you already sign our [CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132152487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132193465", "body": "I have merged a [polished version](https://github.com/spring-projects/spring-framework/commit/cccf5f65f5e8ee58530b94acae7feb0049ffbb05) of your original commit, thanks for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132193465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132228878", "body": "Merged in master (https://github.com/spring-projects/spring-framework/commit/ddd6c9bea06387b3cd713f2ba16423f3ec8d11bf), thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132228878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132228914", "body": "Merged in master (https://github.com/spring-projects/spring-framework/commit/ddd6c9bea06387b3cd713f2ba16423f3ec8d11bf), thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132228914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132234476", "body": "I think that makes sense, could you modify your commit to add a similar `XmlMapper` constructor to `MappingJackson2XmlView` as well?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132234476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132572584", "body": "Merged in master with this polished commit https://github.com/spring-projects/spring-framework/commit/d4c74ad34645119f2f18fc813fe5b9e141560210\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132572584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/140242636", "body": "I close this pull request, since the related issues are resolved.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/140242636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/143691150", "body": "Resolved by [this commit](https://github.com/spring-projects/spring-framework/commit/9c66dfa7b5f610ddeb69b9dc10baa227fbddcbf1), so I close this PR. Thanks for raising this issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/143691150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151164862", "body": "@Hronom: as said by Sam, you should introduce overloaded methods instead of making those breaking API changes.\n\nMaybe you could update `JsonExpectationsHelper` Javadoc to be more specific about the comparaison behavior, in order to avoid the issues you encountered.\n\nWould introducing a `(String expected, String actual, boolean strict)` variant be enough for your use case? I am asking that because I am wondering if we could avoid exposing JSONAssert specific `JSONCompareMode` type in `JsonExpectationsHelper` API.\n\n@sbrannen Any thoughts about exposing `JSONCompareMode` in the API?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151164862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151292003", "body": "As discussed with @jhoeller during our weekly meeting, it would be nice to only add the `(String expected, String actual, boolean strict)` variant and avoid to expose `JSONCompareMode` in Spring API.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151292003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/152233202", "body": "I merged a polished version of your commit that also avoid to break current API.\nThanks for your contribution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/152233202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156070268", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156070268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167966036", "body": "Merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167966036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/189984554", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/189984554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/205343096", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/205343096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219421884", "body": "Thanks for this PR, I only had a quick look but I would be in favor of not creating a new `spring-core-kotlin`, instead you could add kotlin dependency as an optional one. After that I will make a detailed review of your PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219421884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221819024", "body": "Interesting use case indeed, especially with Spring Framework 5 in mind.\n\nAs noticed in the JIRA issue, the first need here is to make Spring `@Cacheable` method handling aware of async errors that could be materialized as an error callback rather than an `Exception` directly thrown by the method. I think such need also apply to Java 8 `CompletableFuture`, Spring `ListenableFuture` and Reactor `Mono`.\n\nAbout the implementation provided in this PR, if I understand correctly the data emitted by an `Observable` are stored as an `ArrayList` and wrapped/unwrapped from/to `Observable`. I think I have some concern with doing that. How that will behave with infinite streams? Isn't there some overlap between Spring `@Cacheable` method and RxJava `.cache()` operator? What about transforming a potentially async `Observable` into a blocking `Iterable`?\n\nI have in mind some good use cases where supporting async single return values like `Single`, `CompletableFuture`, `ListenableFuture` and `Mono` on `@Cacheable` methods, but I am not sure how to handle stream caching with `Observable`, `Flux` or `Stream`, and not sure it makes sense to support/promote that.\n\nAny thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221819024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238191326", "body": "Sorry for the delay and thanks for your updated PR. I have added comments on the relevant lines of your commit.\n\nCould you also rebase that on top of the new master (Spring Framework 5.0) and add some Kotlin unit tests to check that works?\n\nGood idea to support that also for `@Inject`, feel free to add that to your PR and update the title of this JIRA issue to make is less specific.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238191326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243075595", "body": "\ud83d\udc4d For renaming to `SseEvent` to `ServerSentEvent` (I was hesitating between both options) and making it immutable with the builder.\n\nI am also in favor of @rstoyanchev proposal to make it more convenient to use, but maybe not exactly with the same method names. What about:\n\n``` java\npublic static <T> Builder<T> builder(T data) {\n    return new BuilderImpl<>().data(data);\n}\n```\n\nAnd:\n\n``` java\npublic static Builder<Object> builder() {\n    return new BuilderImpl<>();\n}\n```\n\nRegarding the field renaming, I have mixed feelings. `name` and `reconnectTime` match with the description of the fields from the spec and are consistent with our current `SseEmitter.SseEventBuilder`. On the other way, I can see the benefit of just sticking to the SSE field names. It maybe interesting to see @rstoyanchev and @bclozel take on this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243075595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243440824", "body": "@poutsma Good point for event `name` versus `type`, I was reading an outdated version.\n\nSince we are talking about an `ServerSentEvent` which is already an event, I would be in favor using `type`, `event.event()` would be confusing I think even if it makes sense in the serialized data. I have no strong opinion about `reconnectTime` versus `retry` versus `reconnectionTime`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243440824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243441846", "body": "Hum, maybe something to add. Since we are using a `Duration`type unlike in `SseEmitter`, I think we could avoid the `Time` prefix. So I would be in favor of something like `retry`, `reconnect` or `reconnection`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243441846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244880301", "body": "I think I also prefer the current status (easy way via Spring Boot or advanced mode documented) rather that adding start methods in the adapter. So would be just \ud83d\udc4d for adding more Javadoc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244880301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245571661", "body": "Thanks.\n\nI agree that `hints` is maybe not the best name. Whatever name we chose, maybe that's better to use `decodingXxx` / `encodingXxx` because these information are tied to each `encode()` / `decode()` invocation.\n\nSo why not `decodingAttribute` / `encodingAttribute`, or maybe `decodingContext` / `encodingContext` ...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245571661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246294438", "body": "As discussed previously, I have polished and merge the 2 first commits (see https://github.com/spring-projects/spring-framework/commit/b91867cf45d07be14e6c8f5ae5437e049552d19d and https://github.com/spring-projects/spring-framework/commit/aaba53f76a6c59166eda1215c8524db33173648c). The 2 next commits will be discussed in [SPR-14693](https://jira.spring.io/browse/SPR-14693) and will lead to the creation of a new PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246294438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246636097", "body": "I am going to propose a new PR based on @rstoyanchev feedback.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246636097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246992541", "body": "@rstoyanchev Good points, I will update the PR accordingly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246992541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247053539", "body": "@rstoyanchev I have pushed updated commits, could you please have a look?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247053539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247317863", "body": "Indeed + that allows to use that mechanism with the SSE reader/writer too.\n\nI have updated the commit accordingly, is it ok for you (not sure if the remaining point you raised about `HttpMessageWriterView` impact this PR or not, I guess we will see depending on @poutsma feedback)  ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247317863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247573169", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247573169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247994561", "body": "@rstoyanchev Is your proposal to replace `ServerHttpMessageWriter#resolveWriteHints()` by something like\n`Mono<Void> ServerHttpMessageWriter#write(Publisher<? extends T> inputStream, ResolvableType streamType, ResolvableType elementType, MediaType mediaType, ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints)` where `hints` could be used to read existing hints as well as adding eventually new ones before delegating to the nested writer?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247994561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248055733", "body": "Here is a draft just on the writer to discuss: https://github.com/sdeleuze/spring-framework/commit/b17f596f60fac7af458e6cf5b3cfcb911d0c3744\n\nMain points are:\n- `hints` are not provided anymore to `canDecode()` / `canWrite()` because we don't have a dedicated method to get them anymore (not an issue for my POV, hint should just be used to customize the output)\n- `ServerHttpMessageWriter` now has a more powerful write method\n- For `AbstractServerHttpMessageWriter` I made various tries because letting implementers directly implement `write()` or `writeInternal()` lead to not so obvious and error prone implementations and I was not happy with that. I ended-up with this `beforeWrite()` solution that allows easily to provide hints or set the status. For really advanced use cases, it is still possible to override `write()` if needed.\n\nAny thoughts ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248055733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248258629", "body": "These improvements are now in master.\n\n@bclozel Let me know if there is any issue while rebasing your changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/248258629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251136369", "body": "I have updated the commit based on your feedback. I also made some fixes that allows CORS support to work also on Reactor and RxNetty (see `Fix RxNetty/ReactorServerHttpRequest URI handling`commit).\n\nI am now going to work on `@CrossOrigin` support.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251136369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251413080", "body": "Merged (https://github.com/spring-projects/spring-framework/commit/324c310cbd3a95da73d36a6f868a538742a10c4f)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251413080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251413310", "body": "Thanks for this PR, I have done this changes + other log refinement as part of https://github.com/spring-projects/spring-framework/commit/324c310cbd3a95da73d36a6f868a538742a10c4f.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251413310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251461336", "body": "I think this PR is now ready to be reviewed before a merge on master, it now contains support for `@CrossOrigin`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251461336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253564146", "body": "I have updated this PR witgh the following changes:\n- Tests now run fine with Reactor Netty and RxNetty\n- `getAllParts()` now caches the resulting mono to allow multiple invocations\n- There is a single `Part` object suitable usable for file and non file parts\n- We now use `Flux.create()` instead of `ReplayProcessor`\n- `NioPart#transferTo()` now uses zero copy  when possible (when a temporary file has been previously created)\n\n@rstoyanchev Could you please make a high-level review of this commit?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253564146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254513026", "body": "No worry indeed, I agree that `ServerHttpRequest` is not the right level to implement that for the reasons you mentioned. I also agree with your remarks on caching and being more lenient if the request is not multipart.\n\nWe can remove `Part.getContentType()` since this is just a shortcut to `Part.getHeaders().getContentType()` (with maybe a Javadoc hint to help users for file parts).\n\nCurrently I think JSON parts will be natively treated by the underlying library like a part with a `String` based value since it has no filename header. Even if in `NioPart` I allowed to get the content both as a `String` or as a `Publisher<DataBuffer>`, that could be not optimal.\n\nNot sure if that makes sens, but should we add some `HttpMessageReader` based capabilities with some `<T> Flux<T> getContentAsStream(Class<T> type)` and  `<T> Mono<T> getContentAs(Class<T> type)` methods available on `Part` ? Or should we delegate that part to a composite `MultipartHttpMessageReader` that could be initialized with a `List<HttpMessageReader>` like we do on the writing side for SSE?\n\nAbout the NIO Multipart library, it seems to me that the request parsing is done in a non blocking way but sadly we can only access to data as `String` or `InputStream` depending on the part type, so it may be blocking I suppose. I have implemented an optimisation to be able to perform a zero-copy transfer if the `InputStream` is a `FileInputStream`.\n\nI can take care of the changes discussed here if you are ok.\n\nI have created [an issue on their GitHub](https://github.com/synchronoss/nio-multipart/issues/4) to ask them more insight about the blocking behavior implied by `InputStream` and that fact that non-file part content is only accessible as a String.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254513026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254759825", "body": "I have pushed an updated PR, and asked [a new question](https://github.com/synchronoss/nio-multipart/issues/4#issuecomment-254652854) to NIO Multipart project lead about how to perform non-blocking processing with their current `InputStream` / `OutputStream` based API.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254759825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256186151", "body": "@rstoyanchev Could you please review the last version of this PR?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256186151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256958491", "body": "This PR is now only for `FormHttpMessageReader` and `FormHttpMessageWriter`, I will create a dedicated PR for `MultipartHttpMessageWriter` later.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256958491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257161566", "body": "@rstoyanchev  I took in account your feedbacks and:\n- Changed the package to `org.springframework.http.codec.multipart`\n- Polished the Javadoc\n- Renamed `getAllParts()` to `getFormParts()`\n- Renamed `getParts()` to `getFormPartsAsFlux()`\n- Integrated the `MultipartHttpMessageWriter` commit\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257161566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257250651", "body": "After more reading, `filename*` is likely to be the right way to go for modern browsers, so I am going to update this PR with support for decoding it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257250651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257263921", "body": "@rstoyanchev @poutsma I think this PR is ready to be reviewed by one of you before going to master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257263921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257703602", "body": "Merged as b4b7c278dfb17017cc176ca95525372b5a830dd1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257703602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258564585", "body": "@rstoyanchev I have pushed an updated commit with `HttpHeaders#getContentDisposition()`. I have implemented the support for the disposition type and `name`, `filename`, `filename*`and `size` parameters.\n\nIf we don't have date parsing according to [RFC 822](https://tools.ietf.org/html/rfc822#section-5.1) already implemented, I would suggest to wait an eventual user request to implement `creation-date`, `modification-date` and `read-date` support (my guess is that they are not very commonly used, and in any case this is outside of the scope of the original issue).\n\nI have keep an array based parsing instead of the `Stream` based one you proposed because [Java 8 streams seems not really design to collect successive pairs](http://stackoverflow.com/questions/20470010/collect-successive-pairs-from-a-stream) + I think current implementation will be faster.\n\nI have made the 2 encode and decode methods private as requested.\n\nCould you have another look to this updated PR and send me your feedback if any?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258564585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258878511", "body": "No worry, thanks for your feedback, I will update the PR accordingly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258878511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259005404", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/99a8510ace46af9b05b822e7c65f08aae885ca98\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259005404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260973807", "body": "As discussed during the meeting, there is maybe something to rethink about filters. It is not obvious how you chain multiple filters currently for example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260973807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262099112", "body": "Superseeded by #1242", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262099112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262271197", "body": "Closing this PR for now, it is just here for discussion and better understanding of the use cases for `RouterFunction#and()`, `RouterFunction#andSame()` and `RouterFunction#filter()`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262271197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262823282", "body": "I merged a refactored version that reuses `MethodParameter#isOptional()`, with more tests and polish.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262823282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262916044", "body": "Merged and polished with https://github.com/spring-projects/spring-framework/commit/8d26c738a016d9aa57fc3b080fe58f0c44fb341d in order to also relax type checks on `DataBuffer`. Thanks for your contribution.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262916044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263350303", "body": "Merged as https://github.com/spring-projects/spring-framework/commit/2e994f7dc38b5520555720dac215064949ccfabf.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263350303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264552208", "body": "Good point, I missed the fact that `encodeValue()` is a private method and that `encode()` has the `mimeType` parameter, I will change that and if you are ok with the rest, merge to `master`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264552208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264584494", "body": "Hum in fact I am afraid we need the SSE hint, because the mime type we get at the encoder level is `application/json` and not `text/event-stream`. For Spring MVC that works because we retrieve the content type of the response, but on the encoder side, we don't have access to that so the hint is the only way I think.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264584494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264593083", "body": "In that Jackson particular case, that would work but nothing prevent an encoder implementation to re-validate the content type by calling `canEncode()` again + I find a little bit weird to pass not the same content type to `canEncode()` and `encode()`, that's why I tend to prefer using the SSE hint since hints are designed for such use case.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264593083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266916459", "body": "Awesome changes @poutsma, it should solves most of the issues I have encounter. So strong \ud83d\udc4d  for me. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266916459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269286182", "body": "@lqjack Kotlin allows to write more efficient code, and is also relevant for both object-oriented and functional programming. Notice that Kotlin support is like any other technology supported in Spring Framework, it is available optionally if you are using it, but if you don't use Kotlin you won't notice any change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269286182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269289261", "body": "Merged via 3626a1c7f99a8026337a29bd8a958264e6bf13c0.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269289261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269289359", "body": "Merged via fbf88d19da1a9a80c8f0e4d5854723a451910cf1.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269289359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271697631", "body": "PR merged via https://github.com/spring-projects/spring-framework/commit/1af905ca0a97c1e19a60e63a1d62469888fbb12a, thanks for your contribution.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271697631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274524181", "body": "@pgrimard Thanks for this PR, I am currently evaluating various option to fulfill that need as part for [SPR-15064](https://jira.spring.io/browse/SPR-15064). I will keep you informed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274524181/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274780600", "body": "I close this PR in favor of [this one](https://github.com/spring-projects/spring-framework/pull/1304) I submitted since it will be more flexible and avoid introducing a new method to `ResourceBundleMessageSource`. See also the comments on [SPR-15064](https://jira.spring.io/browse/SPR-15064]).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274780600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274780721", "body": "@pgrimard Feel free to have a look and say me if that would fit with your need.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274780721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274826230", "body": "Indeed it could have been an option initially, but that would be too much breaking now, so I think I prefer the solution where we provide the content of the current template, and provide the `RenderingContext` facility for more advanced use cases (i18n, nested templates, etc.). ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274826230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275155917", "body": "Merged via [this commit](https://github.com/spring-projects/spring-framework/commit/2d95199466c52e26ff4c5c3e327e8ae6114e807f).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275155917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275162085", "body": "Yes, available in a few minutes in Spring Framework 5 snapshots for both Spring MVC and Spring Web Reactive, and in Spring Framework 5 RC1 and RELEASE.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275162085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/276414924", "body": "Merged via [this commit](https://github.com/spring-projects/spring-framework/commit/c33ad15b281530f204fef4add2a66b70566d1565) thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/276414924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277844690", "body": "Merged with https://github.com/spring-projects/spring-framework/commit/6b9b0230c4de394348c42b6f5964fc66eb659dd3", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277844690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279423545", "body": "@melgene Thanks for this PR, I like the idea but I have concerns about how that will works when you need to call `SampleController` member functions. Could you show an example?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279423545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279697862", "body": "After discussing with @poutsma, I think we will have to move to constructor based routing because current implementation is suboptimal (route are evaluated for each request and not just at `RouterFunction` creation. I guess that's a mater of style, but the testing issue is something we should care about.\r\n\r\nI guess that means such controller should be tested using [`WebTestClient`](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java)  and/or [`MockServerHttpRequest`](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java).\r\n\r\nI plan to experiment a little bit on [MiXiT](https://github.com/mix-it/mixit/) before eventually committing something on Spring Framework.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279697862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282373797", "body": "@melgene The Kotlin router available in Spring Framework 5.0 M5 now supports path prefix + nested routes, see https://github.com/mix-it/mixit/blob/master/src/main/kotlin/mixit/controller/UserController.kt for an example.\r\n\r\nAbout lazy route evaluation, both your proposed solution with `lazy` Kotlin keyword and the [RouterFunctionProvider](https://github.com/mix-it/mixit/blob/master/src/main/kotlin/mixit/support/RouterFunctionProvider.kt) in introduced in MiXiT app works. @poutsma is think about something usable both in Java and Kotlin to provide this behaviour by default, we will create a dedicated issue shortly on JIRA about that.\r\n\r\nFeel free to create a JIRA issue or another PR if you think we can improve the syntax. Being able to call a member function is a must have.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282373797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288105126", "body": "Nice refactoring @rstoyanchev, I like the way it implements the array versus stream behavior we gradually come to, the better isolation of hint resolution and the fact we can indeed remove the separate class hierarchy for server reader/writer.\r\n\r\nI have just a remark : when we are talking about `Server` (for reader, writer or codecs) it seems to me we are referring more to the annotation-based programming model since I think it is not suitable for the functional Web server API for example. So I am wondering if `Server`is the right terminology for these classes. I may be ok as a \"Annotation-based server\" shortcut, but since it could be confusing for the functional server API, I prefer to raise the point to see what you think about that.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288105126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291807411", "body": "Merged", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291807411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308197565", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/e0e6736bc58101af13a352d4aa2a6c2dc0994d72.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308197565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308197738", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/97909f225819b2297c1036a8a9108c0582edcf90.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308197738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312574242", "body": "Fixed via https://github.com/spring-projects/spring-framework/commit/9901c38f9dfadafcd29113a6887e36c661962239.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312574242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314790699", "body": "Merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314790699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316294963", "body": "Feedback taken in account in https://github.com/spring-projects/spring-framework/commit/fb4ddb0746a3f194091043de328875596736427a.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316294963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316640154", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/fa4d13968451bfe96eab122634c0a1eab6083aaa.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316640154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326870352", "body": "Thanks for this PR, but I have to close it without merging since these changes do not seem relevant to me.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326870352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327164404", "body": "WebFlux is heavily based on Reactive wrappers (`Publisher`, `Observable`) subject to type erasure and  the concrete value is async, so not known by design in most cases at writer resolution stage, so I am not sure sometimes leveraging it is a good idea.\r\n\r\n[`ResponseEntity<Foo>` handling](https://github.com/spring-projects/spring-framework/blob/0702898836bf68a6cabe0f6215ab94593240f4b9/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java#L109) is a special case where we only support single value processing where we do a `flatmap` operation that end up by calling the writer at a stage where the concrete value is available without a wrapper. But for the general purpose suche value is not available. And even if we modified the pipeline to wait it (which is unlikely), I would not be confortable by guessing the type of `Flux<Object>` using the first one.\r\n\r\n[Current behavior](https://github.com/spring-projects/spring-framework/blob/0702898836bf68a6cabe0f6215ab94593240f4b9/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java#L97-L105) which sometimes use the concrete value type when available and otherwise use the declared one is confusing IMO since `Foo` and `Single<Foo>` will resolve diffrent type even if semantically very close.\r\n\r\nI understand this difference of behavior between Spring MVC and Spring WebFlux can be first found confusing, but if we keep the current behavior with half baked fix to support the `Resource` use case, I am pretty sure we will faced a lot of others (I have already a few in mind).\r\n\r\nIf we accept this change (which lead to a more predicable behavior), I will document it in the reference documentation.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327164404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327179555", "body": "We will wait @rstoyanchev feedback before deciding. In any case thanks @wilkinsona for this issue report, you helped to raise a pretty serious design issue!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327179555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327182706", "body": "It behaves differently because when `?` is used, [this condition](https://github.com/spring-projects/spring-framework/blob/0702898836bf68a6cabe0f6215ab94593240f4b9/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java#L104) behaves differently. With `Object` `ResolvableType.forInstance(body)` is used but with `?` `bodyType` is used.\r\n\r\nI have tried to remove the `bodyClass == null` part of the test which fixes Andy use case but break others like Jackson annotation support.\r\n\r\nIMO even without @wilkinsona use case, I think we have a big consistency issue, hence my proposal.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327182706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327506407", "body": "@rstoyanchev I mean using WebFlux functional API, which is programmatic and give more control for this kind of dynamic behaviors compared to annotation-based programming model where return types are hard-coded. At some points we discussed the possibility of using the functional API with @snicoll for implementing Spring Boot 2.0 actuator but I think it was too much work to follow this path.\r\n\r\nAnother important thing to notice is that unlike Spring MVC `GenericHttpMessageConverter` which passes both declared and actual type, we provide a more focused and opinionated API WebFlux (and I think this is a good thing, and more error prone for writer implementers compared to Spring MVC SPI) with a single type passed (currently actual value type for `?` and `Object` or the declared type for other types).\r\n\r\nI have created [a branch](https://github.com/sdeleuze/spring-framework/commit/SPR-15910-tests) with additional WebFlux tests inspired from @wilkinsona ones.\r\n\r\n`Publisher<ResponseEntity<?>>`, `Object`, `Publisher<ResponseEntity<Object>>`, `ResponseEntity<?>`, `ResponseEntity<?>` and `ResponseEntity<Object>` return values work as expected with `Resource` return value with @rstoyanchev fix.\r\n\r\nBut `ResponseEntity<Publisher<Object>>`, `ResponseEntity<Publisher<?>>`, `Publisher<?>` and `Publisher<Object>` return values don't work as expected with `Resource` return value.\r\n\r\nIt seems to me that we have the following choices:\r\n 1. Let master as it is regardless the inconsistencies listed above since @wilkinsona use case is fixed.\r\n 2. Modify `ResponseBodyResultHandler` to call the writer only when the value is known via a `flatMap()` operation for single values like `Mono` and `Single`.  That will fix the behavior when single values will be used, and we will use declared type only for stream types like `Flux` or `Observable` (where I don't think we should use the first element type to guess the element type to use for other elements).\r\n 3. Make the algorithm more simple like in my proposal in this PR and only rely on the declared type.\r\n\r\nI think I would be ok for solutions 2 or 3, but not for 1 which is what we have currently in `master`. Solution 3 is more simple, predictable and consistent, while solution 2 allows us to provide a behavior similar to Spring MVC, so I understand that we may ended up with it.\r\n\r\nAny thoughts?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327506407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328113509", "body": "I have made the required changes and it works but there is a blocking issue, the fact that we change the `ResolvableType` (to use the nested one) passed to the writer after the `flatMap()` operation break `JsonView` support which is provided at encoder level. Not sure yet how to fix that.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328113509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328873411", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/1871c9626de328758b74e14e0f993ce121c4fe92 thanks a lot!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328873411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/329799110", "body": "@sandeepjariya Improper handling I guess.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/329799110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331878711", "body": "Fixed via https://github.com/spring-projects/spring-framework/commit/2d6364eb834791bf5a35ec274a71d8dbccab8b67.\r\n\r\n@olivergierke I have backported the proposed changed to the original SASS source via https://github.com/bclozel/asciidoctor-stylesheet-factory/pull/1, thanks for contributing.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331878711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332829793", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/1440026fb49200f632cfeb6c1dd38968adf3c1ad, thanks. It missed GA but will be published as part of 5.0.1.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332829793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332948585", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/b7708d989bb426055839fa38b3e65249fb962a65, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332948585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343943345", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/0e49e321889d23828c5307842ac25d444ce7ec88, thanks for your contribution.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343943345/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344201926", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/edf82325557f05f482b0b9c0333d99908c8f1378", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344201926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344935236", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/c530745015d5c7031cfcb6f633f3f459ed97935d.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344935236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344945628", "body": "@rstoyanchev I need to merge this PR to be able to upgrade to Reactor `Bismuth-SR4` otherwise a Spring Framework Websocket test fails. Could I merge it in its current form ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344945628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344953518", "body": "The flacky Websocket test was unrelated, but as discussed in the Reactive meeting, I will merge this PR and @violetagg will commit the refactoring asked by @rstoyanchev after `5.0.2` release, that will be safer.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344953518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344954575", "body": "Merged via https://github.com/spring-projects/spring-framework/commit/0fbfa643856b07eb0d952905e527765fbd5c274f.\r\n\r\n@violetagg Please create a dedicated new PR for the 5.0.3 design update requested by @rstoyanchev .", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344954575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359842250", "body": "Thanks for your contribution, but I have to reject this PR as described in [this JIRA comment](https://jira.spring.io/browse/SPR-16368?focusedCommentId=156620&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-156620).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359842250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363040598", "body": "I guess you submitted this PR by mistake, please use https://stackoverflow.com/ if you have Spring related questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363040598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363104522", "body": "@rstoyanchev I am not sure 5xx would now be logged twice at error level since it seems that `HttpWebHandlerAdapter#handleFailure` is only invoked when `ResponseStatusExceptionHandler#handle` returns `Mono.error(ex)` (for exception that are not instance of  `ResponseStatusException`), not when it returns `exchange.getResponse().setComplete()` (for `ResponseStatusException` instances) so I can't see an overlap between both cases.\r\n\r\nAlso `HttpWebHandlerAdapter` and `ResponseStatusExceptionHandler` logging are slightly different because `ResponseStatusExceptionHandler` only logs the message (with contains the nested cause) and not the whole stacktrace in order to improve readability of logs and for consistency with Boot (which catches exceptions before our `ResponseStatusExceptionHandler` but I have replicated the same logic via [this PR](https://github.com/spring-projects/spring-boot/pull/11909)), so I would be for keeping the proposed arrangement if you are ok with that, if I am correct on the non-duplication.\r\n\r\nAny thoughts?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363104522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363117600", "body": "Merged via 196f3f8cc1aae9f3df06e9d961c62185e8730bfb.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363117600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7387635", "body": "Thanks for reporting this bug, I will fix it before RC2 release.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7387635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7387970", "body": "Fixed by the commit: https://github.com/spring-projects/spring-framework/commit/ebc726a9154a72d49e34f345ec3461bb59f87681\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7387970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7984404", "body": ":+1:  too !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7984404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12331691", "body": "Thanks for this information, I have added the related documentation with the commit https://github.com/spring-projects/spring-framework/commit/8e5244ac3dd218cceef42ee5fe959f932fe875e4.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12331691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16033695", "body": "4.2.5, more details on https://jira.spring.io/browse/SPR-13853\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16033695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78531918", "body": "This class will be removed from the commit before going to master, it was not intended to be here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78531918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73847803", "body": "Let's target 5.0 for this feature\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73847803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73847988", "body": "Maybe `isNullable()`would be less specific and let the door opened to supporting this is other languages or with specific annotations\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73847988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73848164", "body": "Let's encapsulate that in a KotlinUtils class\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73848164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73848537", "body": "I think I would try initially without caching the result, unless you have specific concern about the performances\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73848537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73848844", "body": "Could we turn this into a regular java `KotlinUtils` class with maybe an additional method to know if Kotlin is present? I think I would like to restrict Kotlin code to only test classes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73848844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/86173510", "body": "That would extend the scope of this feature, but yes I think that would be a good idea, more future proof than `getContentDispositionFilename()`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/86173510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/86642549", "body": "It seems Java 8 stream API is not designed to collect successive pair, so I have kept the array based implementation for now, see http://stackoverflow.com/questions/20470010/collect-successive-pairs-from-a-stream.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/86642549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/86642664", "body": "I have made both `encodeHeaderFieldParam()` and `decodeHeaderFieldParam()` `private static` methods in my last commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/86642664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/89744484", "body": "This is a typo, I will fix that thanks for your feedback.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/89744484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109868529", "body": "Make sense, fixed", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109868529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85661086", "body": "Reactor `collectMultimap()` is using a `Collection` for the value type while `LinkedMultiValueMap` is taking a `Map<K, List<V>>` parameter, that's why I did not use it in my first implementation, but after more thoughts I was able to use it in my updated commit thanks to `Collectors.toMap()` to change the value type of the map.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85661086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85661142", "body": "I changed the order and also proposed new names in order to be more consistent with `getFormData()`: `Mono<MultiValueMap<String, Part>> getFormParts()` and `Flux<Part> getFormPartsAsFlux()`. Are you ok with these new names?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85661142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85663276", "body": "I made some changes to the error handling in order to notify the parser about errors and ensuring the only 1 error is emitted, but I am not 100% sure this is what you meant, so this is something we should discuss together.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/85663276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124977699", "body": "To be moved just bellow `checkOrigin` invocation ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124977699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124977752", "body": "To be moved just bellow `checkMethods` invocation ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124977752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124977839", "body": "To be moved just bellow `checkHeaders` invocation ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124977839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124978481", "body": "What about a message like `\"Rejecting CORS request because '\" + requestOrigin + \"' origin is not allowed\"`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124978481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124978576", "body": "Similar remark than for origin for the message", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124978576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124978607", "body": "Similar remark than for origin for the message", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/124978607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/128452198", "body": "Indeed I am going to change that accordingly to your proposal.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/128452198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136745565", "body": "Documentation has been splitted between Web and Reactive Web stack, so not sure about \"The web\" which was previous unique title for both stack.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136745565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136745655", "body": "As stated previously, this document now concerns only the servlet-based stack, so this statement is on purpose.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136745655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746160", "body": "Integration with other web technologies has been moved to another document so I am not sure this change is relevant.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746261", "body": "All links except \"reactive web stack\" are good, so these changes are not relevant, as stated previously web and reactive web documentation are now splitted.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746462", "body": "`otherwiseIfEmpty` is deprecated, `switchIfEmpty` is the one to use.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746571", "body": "Already included in reactive-web.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/136746571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/147365842", "body": "As described in my JIRA issue comment, I think we should get the actual parameter name from `Method` instead of introducing `$receiver`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/147365842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/147366071", "body": "As described in my JIRA issue comment, I think we should check the actual parameter name against the one retrieved from `Method`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/147366071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/150560418", "body": "Good point, let's keep the meaningful parameter name.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/150560418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151406308", "body": "Indeed we have the same issue with `HttpEntity` I will fix that as well with a similar strategy. Notice that `@RequestBody HttpEntity<Foo> foo entity` does not seems to be currently supported, only `HttpEntity<Foo> foo entity` is.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151406308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "igor-suhorukov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/58a5138f26fd4a2f9a769ea34a0b3017909e4723", "message": "simplify lambda expression"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f9d0a7de8e2f1247dd4a34811220106f7359aa5", "message": "simplify boolean NOT operation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d89f9af22d409565ff42385ce75202b061cff114", "message": "parentheses should be removed from a single lambda input parameter when its type is inferred"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0c45c4c6a3509dad66a38e20dcc25fdb3a036901", "message": "lamdbas containing only one statement should not nest this statement in a block"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6163f2d32f3f1541a7032f8888bd79395e927140", "message": "use more modern java API for empty collections"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/32b689a9947823427a01899d5a310c9435ee78d2", "message": "use StringBuilder for complex string concatenation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/407ecf7334cbd0bfb6afe1804851be22eb62624a", "message": "to get rid of \"magic\" time constants"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0f7485b01d1d52492dc5b6f4501d8b8c9ca21bdd", "message": "Polish: reorder the modifiers to comply with the Java Language Specification."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/06fef1e5a4076362bbf0a83f5db41cb13f3a03c0", "message": "Polish: assertion arguments should be passed in the correct order"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/129530f7926bad4737688bfb85d0ebdb1ed4a824", "message": "Polish\n\nCloses gh-1715"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed936cbd8951a0337ca581db76d637d4680b6cad", "message": "Polish: Overriding methods should do more than simply call the same method in the super class"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/83300c4b277be594ce4fc78c5142b0c085e79263", "message": "Polish: follow naming convention"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8080f56db87868488ebd602821c45baa20f69475", "message": "Polish: \"@Override\" should be used on overriding and implementing methods"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1ccecd02128ded0366ceb61a17d368eacd9edda", "message": "Polish: to get rid unnecessary array creation"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7bce04c06ccfcbcec1c4f7a3dbc75cea6621505a", "message": "Polish: combine catches block with same body"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b202205d7736abecb9da5c8b2490393be1046b08", "message": "Polish: String.valueOf() should not be appended to a String"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/49fd724d8f24f40c423d7c7c6de80087e78719c0", "message": "Polish: String function use should be optimized for single characters"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c782075a13596a20eb3877cced2421b40246392e", "message": "Polish: Array designators \"[]\" should be on the type, not the variable"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67a91cf6f94e8e98c265461bc9a722e09d9bbedb", "message": "Polish: redundant pairs of parentheses should be removed"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d5b0df8c3f229f8725e5959e8182fec6e37726c5", "message": "Polish codacy warning: fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2be4985b8fe190fae6d2397b21d1c0618de2b1c8", "message": "Polish: anonymous inner classes containing only one method should become lambdas,\nuse getOrDefault instead of ternary operator"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7826567df6da67f8473013f9b67473b215cc7c92", "message": "Polish: lamdbas containing only one statement should not nest this statement in a block"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45e520ed866dbf9fbd29fefc51eadf403959fa3b", "message": "Polish: remove unused private fields, remove empty operator"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/711b0f50f2c29dfac7337a8ed3d269e0c2747bd6", "message": "Polish: replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\"."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ee505b73e1fe04eb826cb43a5827bef34acc105", "message": "Polish: assertion arguments should be passed in the correct order,\nuse assertNull instead of assertEquals(null, value),\ndeclare delta as double value in assertEquals"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6ea0af3540f21e13d73f1321fd7975df425da8d9", "message": "Polish: Lambdas should be replaced with method references"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3a1d44864af78601d2592c0695138501bb07b8f", "message": "Polish: Maps with keys that are enum values should be replaced with EnumMap"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9a6fbf59c5fba6b44da7c946aa644c3a71aec21c", "message": "Polish: follow name convention - make immutable fields final"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c0b4b5787fc7a685c82d237f09533c89eb6b1ab1", "message": "Change this \"try\" to a try-with-resources\n\nCloses gh-1671"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e381514b078595ad60b47e2f88ce18cc6c074cc6", "message": "Collection.isEmpty() should be used to test for emptiness\n\nCloses gh-1670"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4c888d0f328c4eb8f50007f297fd3e9fe05fbfda", "message": "Polish\n\nCloses gh-1669"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1737", "title": "Polish: remove this unused private method parameters", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/173414437", "body": "@rajadilipkolli startupDelay in seconds, sorry!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/173414437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bclozel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed7684d2b27d67a6fbcef72f1a93e8e8cce3ab5d", "message": "Don't implicitly check preconditions on PUT requests\n\nPrior to this commit, the `HttpEntityMethodProcessor` would check HTTP\nconditions on non-safe requests (i.e. not GET/HEAD). This would prevent\nControllers from returning `ResponseEntity` containing response headers\nwith updated values of `\"Last-Modified\"` or `ETag` once the resource has\nbeen updated.\n\nThis commit avoids those checks for non GET/HEAD requests - this code\ncan still be leveraged from Controllers themselves using\n`ServletWebRequest::checkNotModified` methods.\n\nIssue: SPR-15780"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6d26e61ac7d7f86012a276c152910f918af8781e", "message": "Guard against invalid paths in ResourceUrlProvider\n\nThis commit makes sure that no `StringIndexOutOfBoundsException` is\nthrown when `getForRequestUrl` is called with a URL that's shorter than\nthe expected context path.\n\nIssue: SPR-16526"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6e587d5c57315c026e490474df37523a5ea4aba5", "message": "Add new WebTestClient header assertions\n\nThis commit adds new header assertions for `WebTestClient`.\n\n`doesNotExist` tests that a given header is not present:\n\n    .expectHeader().doesNotExist(\"Cache-Control\");\n\n`contentTypeCompatibleWith` tests for MediaType compatibility:\n\n    .expectHeader().contentTypeCompatibleWith(\"text/*\");\n\nIssue: SPR-16285"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf6025303b35a0e59b8dacb7b057292bdfc624e2", "message": "Start documenting HTTP/2 support\n\nA new HTTP/2 support section has been added in the Spring MVC\ndocumentation. Also, a dedicated wiki page is created for specific\ncontainer support information.\n\nIssue: SPR-15821"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3febec3df6c95651b3a7183bb1f413a8872d53d1", "message": "ResourceWebHandler signals error for missing resources\n\nPrior to this commit, the `ResourceWebHandler` would itself handle the\nresponse with an HTTP 404 in many cases, including a missing static\nresource.\n\nThis does not give a chance to `WebExceptionHandler` instances to handle\nthat error and, for example, display an error page.\n\nSee spring-projects/spring-boot#8625\n\nIssue: SPR-16023"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1356bd4359ee74a5c93630349d76ced142b994d9", "message": "Share HandlerInterceptors in ResourceHandlerMapping\n\nPrior to this commit, the Resource `HandlerMapping` configured by\n`@EnableSpringMvc` would be set up with only one custom\n`HandlerInterceptor` (the one exposing the `ResourceUrlProvider` for\nresolving URLs of static resources).\n\nThis behavior is not consistent with the rest of the default\nconfiguration which leverages the interceptors configured against the\ninterceptor registry (with possible user-provided ones).\n\nThis change allows to register interceptors against resource handling;\nthis can be useful for metrics purposes, as in\nspring-projects/spring-boot#10335.\n\nIssue: SPR-16034"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/126ac849e5592f65d742d1f23bf891e1a115af01", "message": "Fix behavior of ClientResponse#bodyTo** with Void\n\nPrior to this commit, asking for a `Void` type using any of the\n`ClientResponse#bodyTo*` methods would immediately return an empty\n`Publisher` without consuming the response body.\n\nNot doing so can lead to HTTP connection pool inconsistencies and/or\nmemory leaks, since:\n\n* a connection that still has a response body being written to it cannot\nbe properly recycled in the connection pool\n* incoming `DataBuffer` might not be released\n\nThis commit detects when `Void` types are asked as body types and in\nthose cases does the following:\n\n1. Subscribe to the response body `Publisher` to allow the connection to\nbe returned to the connection pool\n2. `cancel()` the body `Publisher` if the response body is not empty; in\nthat case, we choose to close the connection vs. consume the whole\nresponse body\n\nThose changes imply that `ClientHttpResponse` and other related\ncontracts don't need a `close()` method anymore.\n\nIssue: SPR-16018"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/10139d42fc57131386f57d5b160412cfb0c9fc86", "message": "Revisit meaning of response.close() in HTTP client\n\nPrior to this issue, SPR-15920 added this new `close()` method which was\nsupposed to be called to clean resources after response processing.\n\nThis commit changes the meaning of that method: calling `close()` will\nclose the underlying HTTP connection. This has to be called if the\nresponse body is not consumed by the application, since at that point\nthe underlying connection might be in an inconsistent state if shared in\na connection pool.\n\nIssue: SPR-15993"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95b83fe1ba774e5e54b3ac9ab05ef811aa0b4ec0", "message": "Add zero copy support in reactor-based WebClient\n\nThis commit makes Reactor Netty `WebClient` instances\nsupport zero-copy requests by implementing `ZeroCopyHttpOutputMessage`.\n\nThe implementation leverages the optimized `sendFile` mechanism if\navailable."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80979e7592c0f09e676b26278cca76a50766b1ce", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d37c889faf314a22d8563824fc4003b569c4c61", "message": "Un-ignore RequestMapping test for handling \"\" paths\n\nIssue: SPR-15653"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/60f47f44894ea405e9425a34f5a4a53c8ca1cacc", "message": "Fix memory leak in reactive multipart parser"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/81125de6979b84f8cf30ea31c372e87dde98d9a4", "message": "Fix error responses handling in WebClient\n\nThis commit fixes a typo in the `DefaultWebClient` implementation.\nInstead of forwarding resolved `WebClientException` instances as error\nsignals, the `bodyToMono(ParameterizedTypeReference)` variant would just\nforward those exceptions as `onNext` signals.\n\nIssue: SPR-15946"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/98b6491f0c3eebcdadaf0cafc7aec46455e160ef", "message": "Send error signal also for empty server responses\n\nPrior to that commit, the `ResponseSpec` `WebClient` would process error\nresponses (4xx, 5xx HTTP status) and transform those into error signals\nwith a `WebClientResponseException`. But this would only work if the\nHTTP response would have a non-empty response body.\n\nAn empty error response would not send an error signal and only\ntranslate in an `onComplete` signal.\n\nThis commit fixes this behavior and makes sure that this error signal is\nsent in all cases.\n\nIssue: SPR-15946"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa19912e00fd6e2bd0908a59e431595d5f5e22d3", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1a883b863d3732843c0cb83316d60e45161f0ae6", "message": "Remove temporary workaround for reactor-netty client\n\nNow that https://github.com/reactor/reactor-netty/issues/138 is solved,\nthis commit removes the temporary workaround introduced in SPR-15784\nbut leaves the general mechanism for detecting empty responses."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69edd4ac5019e03022394d19d98d3403e7eec374", "message": "Remove spring-build-src module from BOM\n\nIssue: SPR-15932"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c64083da8dd937999850df2a62ab99b6ce234ed4", "message": "Upgrade to Jackson 2.9.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/16f3f8d28ff16e5d88fe2d349fc78b1a6512b1cb", "message": "Add close() method on HTTP client response\n\nBefore this commit, there was no way to signal the HTTP client that we\nwere done consuming the response. Without that, the underlying client\nlibrary cannot know when it is safe to release the associated resources\n(e.g. the HTTP connection).\n\nThis commit adds new `close()` methods on both `ClientHttpResponse`\nand `ClientResponse`. This methods is non-blocking and its behavior\ndepends on the library, its configuration, HTTP version, etc.\n\nAt the `WebClient` level, `close()` is called automatically if we\nconsume the response body through the `ResponseSpec` or the\n`ClientResponse` itself.\n\nNote that it is *required* to call `close()` manually otherwise; not\ndoing so might create resource leaks or connection issues.\n\nIssue: SPR-15920"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bff54788e825a05f4ea617544888c56436c54281", "message": "Enable HTTP compression Reactor ClientHttpConnector\n\n`ReactorClientHttpConnector` provides an adapter layer to `WebClient`\nfor using Reactor-Netty's `HttpClient`.\nThis commit enables HTTP compression support by default for this client\nConnector.\n\nAnother constructor is still available for providing a custom\n`HttpOptions` configuration.\n\nIssue: SPR-15908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/582014e944002609b562f6e4998935c06bbe6922", "message": "Support HTTP range requests in MVC Controllers\n\nPrior to this commit, HTTP Range requests were only supported by the\nResourceHttpRequestHandler when serving static resources.\n\nThis commit improves the `HttpEntityMethodProcessor` and\nthe `RequestResponseBodyMethodProcessor`. They now extract\n`ResourceRegion`s from the `Resource` instance returned by the\nController and let the Resource-related message converters\nhandle the writing of the resource (including partial writes).\n\nController methods can now handle Range requests for\nreturn types that extend Resource or HttpEntity:\n\n    @RequestMapping(\"/example/video.mp4\")\n    public Resource handler() { }\n\n    @RequestMapping(\"/example/video.mp4\")\n    public HttpEntity<Resource> handler() { }\n\nIssue: SPR-15789, SPR-13834"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/397fd248490f94f1371be6def5770d7003681206", "message": "Revert \"Leverage Kotlin plugin dependency management\"\n\nThis reverts commit 3e2f6c848a84dda83c81ef9d7cc90dd030c0406f."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a1e898fd39a776216adb01874c144b9174505d96", "message": "Share common compiler args between src and test\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cea9d1db8e0fb6df623bf16a4d542f47ee608f2e", "message": "Fix Spring Framework BOM\n\nThis commit reinstates the Spring Framework BOM, which was previously\nempty because of a previous change in 41cbc4670f.\nThis change also removes the JSR305 dependency from the BOM, which does\nnot belong here since it is not an artifact produced by Spring.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/af7673dda7ef32226f51d4eab2732668a129796c", "message": "Polish build\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f6023c220262df6fdc126a69ed187d31b98bd276", "message": "Remove Sonar / Jacoco build configuration\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9341955107487d9b6158dbd462f79fc0eaafc22e", "message": "Do not render PDF reference doc for SNAPSHOT builds\n\nThis commit ensures that only the HTML version of the reference\ndocumentation is rendered for SNAPSHOT builds. This speeds up\nsignificatly the build.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5460c0095bea838c3cd8374be71cf6d376d67eb4", "message": "Fix Gradle warnings about task output\n\nAs of Gradle 4.0, project SourceSets can have multiple output\ndirectories (one per programming language).\nThis commit fixes warnings that are logged when a single output dir\nis considered by tasks.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cc3d7d2d487cf18f7234898bd2e16703908a7b8b", "message": "Apply dependency management to selected modules\n\nThis commit applies the Dependency Management Plugin to modules that\nrequire it; right now Spring Framework is importing BOMs for Netty and\nReactor dependencies only.\n\nInstead of applying those BOMs to all modules, they're applied only\nwhere they're needed.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2eeb428e95c188f60f9fe81e2a6f5f859d52bacb", "message": "Move modules to independent build files\n\nThe main `build.gradle` file contains now only the common build\ninfrastructure; all module-specific build configurations have\nbeen moved to their own build file.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41cbc4670fcaa484326cf4b0f7744f77a281ba86", "message": "Refactor the spring-beans build\n\nThis commit merges back the \"spring-beans-groovy\" module into the main\n\"spring-beans\" one. The build is configured so:\n\n* Java and Groovy sources are jointly compiled\n* Kotlin sources are compiled after\n\nWith this change, the `MergePlugin` is not used anymore in the project\nbuild and therefore is removed.\nThe `DetectSplitPackagesPlugin` wasn't applied so it's been removed as\nwell.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0c178ff7621fd951fd1349287b726fb4c69c9c34", "message": "Generate docs *after* running tests in Gradle build\n\nThis commit reorders docs generation (javadoc, asciidoctor) *after*\nruning tests for `./gradlew build` commands.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2e50ea7eb414159b1dab154bf2c3db466453d13c", "message": "Move plugin declarations to plugin syntax\n\nNote: this syntax automatically applies the plugin to the root project.\nAdding `apply false` in the plugin declaration disables that.\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/11418d8d28c5af3ba44f1b9d637a1abb40a059a2", "message": "Allow dedicated build files for subprojects\n\nWith this change, each subproject can configure its\nbuild in a dedicated file like:\n\n```\nspring-core/spring-core.gradle\nspring-web/spring-web.gradle\n```\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d306e2d85c35e92946382f3a1cec0f304f53b0a", "message": "Use Gradle build scans\n\nThis commit configures Gradle build scans for the Spring Framework\nbuild. Scans aren't performed for every build but can be enabled\nwith the following:\n\n```\n./gradlew build --scan\n```\n\nIssue: SPR-15885"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f1abcba4eb6f1b5a96279a4df43bff39ececdbfa", "message": "Support ipV6 Host addresses in HttpHeaders\n\nThis commit parses the \"Host\" HTTP request header as an\n`InetSocketAddress`, while supporting IPv6 addresses like `[::1]`.\n\nThis host string contains `:` chars even though it has no port\ninformation.\n\nIssue: SPR-15799"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5cac619e237f8f71208142ad78c06a7d15b34c72", "message": "Fix host+port resolution in ReactorServerHttpRequest\n\nPrior to this commit, the host+port information of the incoming request\nwhere taken from the remoteAddress, which is actually the socket address\nof the HTTP client (i.e. not the server).\n\nThis commit resolves this information from the \"Host\" HTTP request\nheader, if available, or the actual local address of the channel if no\nheader is available.\n\nIssue: SPR-15084"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a06da0019fe8bf855c49eee233650193b5aba8b4", "message": "Remove PathPatternParser from PatternsRequestCondition\n\nSince `PathPattern.combine` now returns another `PathPattern` instance\n(it was previously returning a String instance), we can now safely\nremove the parser instance included in `PatternsRequestCondition`.\n\nIssue: SPR-15663"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c935215126116d437e571daf6aae478e56b370f", "message": "Leverage PathPatternParser in CORS configuration source\n\nPreviously `UrlBasedCorsConfigurationSource` was relying on\n`PathMatcher` implementations for matching incoming request lookup paths\nwith the configured path patterns for CORS configuration.\n\nThis commit replaces the use of `PathMatcher` with a `PathPatternParser`\nthat parses the string patterns into `PathPattenr` instances and allows\nfor faster matching against lookup paths.\n\nIssue: SPR-15688"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f63b0d720ed4cc68b12a74b3ee7b652f0f2eb78b", "message": "Update WebFlux reference documentation\n\nNote that WebFlux and WebFlux.fn can be both used at the same time\nthanks to the handler mapping registration in `@EnableWebFlux`.\n\nFixing typos in the reference documentation for outdated Reactor\noperators."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/baaa84e90fc0cb2279804442f4c58971036f6911", "message": "Include port info in HTTP headers for Netty client\n\nThis commit adds the port information in the \"Host\" HTTP request header\nfor the Netty-based HTTP client.\n\nIssue: SPR-15706"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/839b6c18d4afb89823d0c2bc7f45f5e41f1ea5ed", "message": "Optimize Flux pipeline in ClientHttpRequest"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ac29c8ce7055e1421ba5995ebb44f0aecc92223", "message": "Add cloneBuilder method on WebClient.Builder\n\nThis commit adds a new `cloneBuilder()` method on `WebClient.Builder`;\nwe can now reuse the customizations of an existing builder without\nsharing its state across several `WebClient` building code paths.\n\nIssue: SPR-15690"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/52148a10b766ed85e08aac7212a77786caab6a79", "message": "Consistently use CodecConfigurer for configuration\n\nThis commit changes the `ExchangeStrategies` and `HandlerStrategies`\ninterfaces to consistently use the `CodecConfigurer` (and\nsub-interfaces) for configuring codecs on the server and on the client.\n\nIssue: SPR-15682"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/233c15b80e3b0d3ff221685838d2a7229b6f059b", "message": "Add PathPatternRegistry for handler mapping matching\n\nPreviously `HandlerMapping` implementation were heavily relying on\n`String` path patterns, `PathMatcher` implementations and dedicated maps\nfor matching incoming request URL to an actual request handler.\n\nThis commit adds the `PathPatternRegistry` that holds `PathPattern`\ninstances and the associated request handler \u2014 matching results are then\nshared as `PathMatchResult` instances. `AbstractUrlHandlerMapping` will\nuse this registry directly, but other components dealing with request\nmatching (like `PatternsRequestCondition`) will directly use ordered\n`PathPattern` collections since ordering is important there.\n\nThis opens the door for faster request matching and simplifies the\ndesign of this part.\n\nIssue: SPR-15608"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f0d107d37d6418f66a8c9fbab5bd2932a252e47", "message": "Enable trailing slash matching by default\n\nThis commit enables trailing slash matching in `PathPatternParser` by\ndefault - this mirrors the default configuration in `PathMatcher`\nimplementations in MVC."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74fb2645fd944ec5cf83acd31d4866e6f563686a", "message": "Fix LookupPath parsing\n\nIssue: SPR-15397"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf1bc8119999e2bf3f41ae572f5b83536685ce5e", "message": "Introduce LookupPath in WebFlux request routing\n\nThis commit adds the `LookupPath` class that contains the full\nrequest path relative to the web context; the application can\nget from it various information, including the file extension\nand path parameters (if any).\n\nSince that operation is done multiple times for each request, this\nobject is stored as an attribute at the `ServerWebExchange` level.\n\nIssue: SPR-15397"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0557404715f205e13001aec19c3d0d3d1ca3a0ed", "message": "Throw exception for illegal PathMatch configurations\n\nWith the new `ParsingPathMatcher` implementation, new patterns are now\nallowed, such as `\"/foo/{*bar}\". The `\"{*bar}\"` segment will capture\neverything until the end of the given path. Adding other elements after\nthat segment is illegal and will throw exceptions.\n\nOne can configure on a `PathMatchConfigurer` various options like\n`useTrailingSlashMatch` and `useSuffixPatternMatch`; those options, when\nenabled, will try to append suffixes like `\".*\"` and `\"/\"` to existing\npath patterns. In case of a \"capture the rest\" pattern segment, those\noptions won't be honored.\n\nThis is why this commit ensures that an exception is thrown at the start\nof the application if an illegal configuration is applied to the\n`PathMatchConfigurer`.\n\nIssue: SPR-15303, SPR-15558"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2579dab209f955a6190104ba0e963b1da6734721", "message": "Get XNIO as an undertow transitive dependency"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/88f8df4dced5a97e443cda4a25ed2afb54165eae", "message": "Update Mono.then(Supplier) deprecated calls\n\nReactor Core has now deprecated the `Mono.then(Supplier)`.\nThis is now replaced with `Mono.then(Mono.defer(Supplier))`."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf3fe93dbdbe8e94f23ab6fc0d74f0325a295efd", "message": "Do not mention deprecated Reactive Boot starter\n\nThere's an officially supported Spring WebFlux starter now in Spring\nBoot, so all mentions to the experimental starter are now removed."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a8d785b87fb2e662c0ad931a11dbf37489565f39", "message": "Move RxNetty support to test scope\n\nThe RxNetty runtime support is not meant to be officially supported and\nshould be restricted to testing purposes only.\n\nIssue: SPR-15444"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dea4825a9fcf8e7958d13b04417aab7234b05c0a", "message": "Fix link references between documents\n\nIssue: SPR-14997"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/924adaec6c9f955d0207e2ee84652aae70175674", "message": "Render reference documentation with Asciidoctor\n\nThis commit removes docbook from the documentation toolchain and\ninstead makes use of asciidoctor to render the reference documentation\nin HTML and PDF formats.\n\nThe main Gradle build has been refactored with the documentation tasks\nand sniffer tasks extracted to their own gradle file in the \"gradle\"\nfolder.\n\nA new asciidoctor Spring theme is also used to render the HTML5 backend.\n\nIssue: SPR-14997"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2baceac5ff03489628e058c76a35306519e6cbb2", "message": "Resolve ResourceUrlProvider from current request\n\nThis commit changes `ResourceTransformerSupport` to look for the\n`ResourceUrlProvider` in the current request if none is configured on\nthe resource transformer itself.\n\nIssue: SPR-15369"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fdd503152d8073e4bef7de41d7cebe79f0aeb557", "message": "VersionResourceResolver should delegate to the chain\n\nPrior to this commit, the `VersionResourceResolver` implementations of\n`resolveUrlPathInternal` would delegate to the resolver chain but would\nnever use the give result if the current request didn't match a\nconfigured version strategy pattern.\n\nThis is a problem if the resolver supposed to resolve the resource path\nis configured after a `VersionResourceResolver` in the resolver chain;\nthis means that other resolver never gets to participate in the result\nof the chain.\n\nIssue: SPR-15372"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b799013567bfd61658525c04aafd83841f8a6760", "message": "Update to Reactor Aluminium SNAPSHOT\n\nCurrently the BOM versions are:\n\n* reactor-core 3.0.6.BUILD-SNAPSHOT\n* reactor-netty 0.6.2.BUILD-SNAPSHOT\n\nThis commit fixes as well a few deprecations in reactor-core."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/babd5517aa892750bf6aca34e9572d67e84aa410", "message": "Revert ParsingPathMatcher concurrency checks\n\n`PathPatternParser` is now thread-safe and creates a new internal parser\nfor each `parse` call, since this operation is cheap.\nThis commit removes the `ThreadLocal` based instances of\n`PathPatternParser` in `ParsingPathMatcher` which are not required\nanymore.\n\nIssue: SPR-15246"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b732251b093552812d7457608d422e899241ca04", "message": "Ignore HEAD requests in ShallowEtagHeaderFilter\n\nPrior to this commit, the `ShallowEtagHeaderFilter` could participate in\nthe response and set its ETag/Content-Length headers, even for HEAD\nrequests. Since the response body is empty, the filter implementation\nwould set a `\"Content-Length: 0\"`.\n\nThe RFC states that responses to HEAD requests should exhibit identical\nresponse headers to GET (with the possible exception of payload related\nheaders such as Content-Length.\n\nWith this commit, `ShallowEtagHeaderFilter` now ignores HEAD requests\nsince the proper values may be set already for payload related headers\nby the handler. The filter has no way to generate a proper ETag value\nnor calculate the content length without the actual body.\n\nIssue: SPR-15261"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4ff17676d3827fdef46f2d0e3243696730faea64", "message": "Avoid duplicate Content-Length headers in Netty client\n\nThis commit checks that a \"Content-Length\" request header isn't already\npresent before adding one in `Netty4ClientHttpRequestFactory`.\n`HttpMessageConverter` implementations can write that request header so\nthe Netty request factory should only write that value when the header\nis missing.\n\nIf that header is not written (and since we're not dealing with\nthe HTTP exchange in a chunked-based fashion), the HTTP client might not\nsend the request body at all.\n\nIssue: SPR-15241"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/28e77fa68ae60df22bf339ff4fc22036e2090d3d", "message": "Assert XML without considering order in XmlExpectationsHelper\n\nThis commit changes the `assertXmlEqual` implementation to compare\nexpected and actual XML documents without considering the order of XML\nnodes.\n\nIssue: SPR-15156"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2ac08afab5085238947fc94c1590e22a2998004d", "message": "Threadsafe use of pattern parser in ParsingPathMatcher\n\nThis commit ensures that the `PathPatternParser` and the associated\ncache map are used in a threadsafe fashion, since the PathMatcher\ninstance can be used for concurrent requests.\n\nIssue: SPR-15246"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1901cc65fddc3f2650354def45f6705af681c338", "message": "Use ParsingPathMatcher by default in WebFlux\n\nIssue:"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fa4202f1bd2b1df5364c50723e99571df0db6605", "message": "Revert Path Pattern changes in WebFlux\n\nIssue: SPR-14544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5488906d0c01ca280cbc44b2fb373cfed10ab76f", "message": "Polish\n\nIssue: SPR-15206"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8d43f45515d0261e6e0255a12c282a503902a97a", "message": "Reduce API Surface in PathPatternRegistry\n\nThis commit reduces the exposition of `PathPattern` instances throughout\nthe `HandlerMapping` API and removes some methods from its public API.\n\nIssue: SPR-14544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/09d18f2ef5f9d9ef254d060f1d189e5ce8ce7a9c", "message": "Refactor HandlerMapping path match configuration\n\nSince the introduction of `PathPatternRegistry`, the various path match\nconfiguration flags are no longer needed in several places and that\nconfiguration can live in the registry itself.\n\nIssue: SPR-14544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/47ac3379ea1f49d6ced1e82a5649441a964eed68", "message": "Do not use ParsingPathMatcher by default in Spring MVC"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/18c04815a7c734bf8034d23be01b035d66de2ece", "message": "Add PathPatternRegistry\n\nThis commit adds the new `PathPatternRegistry`, which  holds a\nsorted set of `PathPattern`s and allows for searching/adding patterns\n\nThis registry is being used in `HandlerMapping` implementations and\nseparates path pattern parsing/matching logic from the rest. Directly\nusing `PathPattern` instances should improve the performance of those\n`HandlerMapping` implementations, since the parsing and generation of\npattern variants (trailing slash, suffix patterns, etc) is done only\nonce.\n\nIssue: SPR-14544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a4da313a0a53751a89b7aa42a1fe8a54e8af9e3b", "message": "Polish\n\nIssue: SPR-14544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f029392c74ebfab743840f8f235414e270cd366", "message": "Move response status processing in InvocableHandlerMethod\n\nPrior to this commit, WebFlux would look at the handler method\nannotations (`@ResponseStatus`) for each handler execution, even calling\nthe expensive `synthesizeAnnotation`.\n\nThis commit moves this logic to the InvocableHandlerMethod so that this\nexecuted once at instantiation time and for all result handlers.\n\nIssue: SPR-15227"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/944d17f23773d179b1d788507e8d27ad26777d71", "message": "Harmonize Tomcat dependencies\n\nUse `tomcat-embed-core` instead of `tomcat-catalina`\nfor tomcat internal classes."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5203bd13cc8b0b213e7d32a350e63aabda409654", "message": "Upgrade to Tomcat 8.5.11"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0427209d8e73c1006aa3cce406d5f17b2f72cef", "message": "Upgrade to Reactor Aluminium SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/17525ef969f69074a5c406caf5ee98c47bee8a0d", "message": "Use Reactor BOM and dependency management plugin\n\nIssue: SPR-15162"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0c99346829b19a65fb435fb2557db3b2427de54b", "message": "Add SNI support in Netty4ClientHttpRequestFactory\n\nThis commit changes the `Bootstrap` to create a SSL Handler with\nadvisory peer information; this enables support for SNI.\n\nIssue: SPR-15101"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/87f498195c8d3a2685c04e9f204131e8b2be699b", "message": "Fix RequestUpgradeStrategy impl. class loading\n\nIssue: SPR-15106"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/afd93a0b52441d2ecf23242850ed8c1776524e0b", "message": "Disable streaming when reading to Resources in RestTemplate\n\nPrior to this commit, the `ResourceHttpMessageConverter` would support\nconverting from an `HttpInputMessage` to a `InputStreamResource`. This\nis valid when reading resources on the server side, but it's not\ncompatible with the way `RestTemplate` works.\n\nThe API exposed by `RestOperations` imply that the HTTP server response\nshould be fully consumed and properly closed by the time the `exchange`\nmethod returns. In other words, this HTTP client does not support\nstreaming the HTTP response.\n\nThis commit allows the `ResourceHttpMessageConverter` to be configured\nto disable read streaming when used in `RestTemplate`.\n\nIssue: SPR-14882"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ab0916bed079b2236ff174c21c990a562eb4fdd", "message": "Fix default content-type for ResourceRegion HTTP responses\n\nPrior to this commit, the `ResourceRegionHttpMessageConverter` would\nrely on the default implementation of `getDefaultContentType` to guess\nthe default Content-Type of the resource region to be written to the\nHTTP response. That implementation fetches the first media type\nprovided in the HTTP request \"Accept\" header.\n\nThis behavior is not correct when converting resources and this commits\naligns this converter with the `ResourceHttpMessageConverter` which uses\nJAF to guess the correct Content-Type of the given resource, or just\nreturns \"application/octet-stream\" as a default value.\n\nIssue: SPR-15041"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54901ab865d273c5658876958c504168028e92d6", "message": "Avoid explicit DecoratedObjectFactory setup in JettyRequestUpgradeStrategy\n\nAlign Jetty support on spring-websocket module.\n\nIssue: SPR-14940"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d4411f4cc63186f45fbba757aff713c7dd441fb9", "message": "Update AbstractClientHttpRequest with server changes\n\nThis commit updates `AbstractClientHttpRequest` to make it more similar\nto its server counterpart."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba47d06cbb6a07bdc57042da9dd59daafe5c5aae", "message": "Update integration tests for reactor-netty\n\nNow that reactor/reactor-netty#12 is fixed, we can restore the\npreviously ignored integration tests.\nNew tests are hanging, so this commit is converting the `StepVerifier`\n`verify()` calls to using actual timeouts.\n\nIssue: SPR-14975"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/52f664139f65bc8573e70f8c770c4784f9163f23", "message": "Improve VersionResourceResolve javadoc\n\nThe `pathPatterns` args are relative to the patterns configured for the\nresource handler.\n\nIssue: SPR-14817"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/933f1501e84240b72e6da93ab3e43714017b44db", "message": "Do not include URL hash in resource paths\n\nWhen getting the lookup path of a resource, both query params and hashes\nshould be removed from the request path.\n\nThis commit fixes the public path resolution for paths like\n`/resources/main.svg#icon-hamburgermenu`.\n\nIssue: SPR-14928"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/17089d607feb28c5f7689ecdf2eb0a145430f3a9", "message": "Allow RedirectAttributes on ExceptionHandlers\n\nPrior to this commit, `@ExceptionHandler` methods could not be injected\nwith `RedirectAttributes` arguments. This would make it impossible to\nhandle an error by redirecting to another view and add flashmap\nattributes, to be included in the model when the next view is called.\n\nHere is an example:\n\n```\n@ExceptionHandler(MyException.class)\npublic String handleException(MyException ex, RedirectAttributes\n    redirectAttributes) {\n\n  redirectAttributes.addFlashAttribute(\"errorMessage\",\n      \"This is an error message\");\n  return \"redirect:/\";\n}\n```\n\nThis commit adds a new `RedirectAttributesMethodArgumentResolver`\ninstance in the list of pre-configured `HandlerMethodArgumentResolver`\nin `ExceptionHandlerExceptionResolver`.\n\nIssue: SPR-14651"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e1b89c7f6585004b557a854d1ee8ca49a1d640a1", "message": "Upgrade to Jetty 9.4.0.v20161208\n\nIssue: SPR-14940"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8d828dd16f5babc1a9f0fce1b94acdf1cb10eb73", "message": "Update websocket support for Jetty 9.3+\n\nDue to a few changes in `WebSocketServerFactory` and `Session` API, our\n`JettyRequestUpgradeStrategy` and `JettyWebSocketSession` needed to\nadapt. As of 9.3.15+ and 9.4.0+, some reflection is required to support\nprevious versions.\n\nSpring 5.0 supports Jetty 9.3 and 9.4.\n\nIssue: SPR-14940"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/856cb3b96452cd19aa06419918e11fe93aacde14", "message": "Revert \"Upgrade to Jetty 9.4.0.RC3\"\n\nThis reverts commit 472126c0b24fcc70558719658504ee3bba8cc180."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/472126c0b24fcc70558719658504ee3bba8cc180", "message": "Upgrade to Jetty 9.4.0.RC3\n\nIssue: SPR-14940"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec8391a7fbc8ba67d1a04c9b93408230345fec36", "message": "Fix Netty4ClientHttpRequestFactory POST/PUT requests\n\nThis commit ensures that POST/PUT requests sent by the Netty client have\na Content-Length header set.\n\nIntegration tests have been refactored to use mockwebserver instead of\nJetty and have been parameterized to run on all available supported\nclients.\n\nIssue: SPR-14860"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3bd17175eda68bb54a572fd5c039a759615e2b5f", "message": "Update with new HttpServerResponse.sendFile signature\n\nReactor Netty's `HttpServerResponse` has a new `sendFile` signature that\ntakes a `Path` instead of a `File`."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b10045dc0e91a671afe3a3a3ec93fafe2274f84b", "message": "Do not execute ResourceUrlEncodingFilter only once per request\n\nIn case the filter is also registered to the ERROR dispatcher, the\nfollowing happens:\n* the filter is executed once for the regular execution\n* the filter should be executed a second time when dispatched to error\n\nSince the filter is a `OncePerRequestFilter`, the filter is only\nexecuted once and won't be executed when handling the error.\n\nThis can lead to situations like spring-projects/spring-boot#7348\n\nThis commit makes this filter a simple `GenericFilterBean`.\n\nIssue: SPR-14891"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb702ee9c00802760453b9728f5d3e9a8dfe15d7", "message": "Gradle plugins: update sonarqube and remove protobuf\n\nSince https://jira.sonarsource.com/browse/SONARGRADL-30, we can now\nsafely update to sonarqube plugin v2.2.1.\n\nThe protobuf gradle plugin is now deprecated - instead of configuring\nthe new plugin supported by Google, this commits drops that part of the\ngradle build since that proto->java conversion is rarely needed and can\nbe manually run by any member of the team."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb44f2746e8854fac384af96a53ef1155d9cd05e", "message": "Prevent resource transformation of gzipped CSS files\n\nWhen resolved through the `GzipResourceResolver`, CSS files can be\nresolved as their pre-gzipped variant, if a \".gz\" file is present in the\nconfigured resource locations.\n\nSuch resources are gzipped and thus should not be transformed by\n`CssLinkResourceTransformer`s, since rewriting those would need to\nuncompress/transform/recompress. This would lead to poorer performances\nthan resolving plain resources and delegating compression to the\ncontainer.\n\nThis commit checks for `GzippedResource` instances in\n`CssLinkResourceTransformer` and avoids processing them.\n\nIssue: SPR-14773"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95abd18fea067b271bf50252b0a741c5850cab93", "message": "Fix Exception Handling result handler resolution\n\nPrior to this commit, the wrong `HandlerResultHandler` could be\nresolved when handling exceptions; this could happen only if the\noriginal handler and exception handler had different signatures:\n\n```\nPublisher<String> originalHandler() { ... }\n\n@ExceptionHandler(MyCustomException.class)\nResponseEntity<Mono<String>> handleException() { ... }\n```\n\nIn that case, the `ResponseBodyResultHandler` would be used when\nhandling exceptions instead of the `ResponseEntityResultHandler`.\n\nThis commit ensures that the `HandlerResult` returned by the exception\nhandler is used to resolve the `HandlerResultHandler`. The latter will\nprocess the result and use it to write to the HTTP response.\n\nIssue: SPR-14876"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/00069572740906bf6ce5b83525753edc89e2db42", "message": "Support ResponseStatus on reactive controllers\n\nThis commit adds support for `@ResponseStatus` annotations on reactive\ncontroller methods. `HandlerResultHandler`s implementations now\nset the status on the `ServerWebExchange`, if and only if the\ninvocation of the controller method succeeded.\n\nIssue: SPR-14830"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99a321085902ac002bf6ac918500f0d30d71cf0b", "message": "Refactor tests with ScriptedSubscriber\n\nReactor recently added the `ScriptedSubscriber` in its new\n`reactor-addons` module. This `Subscriber` revissits the previous\n`TestSubscriber` with many improvements, including:\n\n* scripting each expectation\n* builder API that guides you until the final verification step\n* virtual time support\n\nThis commit refactor all existing tests to use this new\ninfrastructure and removed the `TestSubscriber` implementation.\n\nIssue: SPR-14800"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61cf9fdda5b2219adc76a4a3e024006ed01fcdd6", "message": "Remove factory methods from  WebReactiveConfigurer\n\nThis commit removes factory methods for `RequestMappingHandlerMapping`\nand `RequestMappingHandlerAdapter` from `WebReactiveConfigurer`.\n`WebReactiveConfigurer` should promote only common customizations;\nthose factory methods should be overridden when extending\n`WebReactiveConfigurationSupport`, in advanced configuration scenarios."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/518f3fab0192bfaa364b41e55c98d623259b2322", "message": "Rollback to SonarQube plugin 2.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c2fdc9103b828fed387aa28ed39f13de906f1daf", "message": "Upgrade SonarQube plugin version to 2.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/31af6783a51834f286c05c40b81bcacc26ed4b33", "message": "Update reference doc after WebClient changes\n\nIssue: SPR-14827"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3533024ab87468a9edcd95e762458e6af9516ba9", "message": "Add EnableWebReactive + WebReactiveConfigurer\n\nThis commit improves the existing web reactive configuration\ninfrastructure with the following changes:\n\n* renamed `WebReactiveConfiguration` to\n`WebReactiveConfigurationSupport` and is is no longer a Configuration\nclass\n* created the `WebReactiveConfigurer` interface; Configuration classes\nimplementing it will augment the web reactive configuration support\n* created the `DelegatingWebReactiveConfiguration` and\n`WebReactiveConfigurerComposite` to effectively tie those custom-defined\nconfigurers to the main configuration support\n* created the `@EnableWebReactive` to active that support in\nconfiguration classes\n\nIssue: SPR-14754"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/336b4d2fb83a951cfe19dc76cdcb946cdfc76f1f", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7ae729480ecfc04ff3e1dd27fded2def1a8d7faf", "message": "Resolve absolute resource links in ResourceTransformers\n\nThis commit adapts the fix for SPR-14597 commited to spring-webmvc to\nthe spring-web-reactive module.\n\nIssue: SPR-14597"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/679b661e199502fc47f47917dd9a54aea98529b2", "message": "Resolve absolute resource links in ResourceTransformers\n\nPrior to this commit, `ResourceTransformer` implementations would\nresolve internal links to other resources: both relative and absolute\nrequest paths.\nFor relative request paths, those transformers would call\n`ResourceTransformerSupport.resolveUrlPath` with the resource path,\nas provided in the original file. This can cause problems when a\n`CachingResourceResolver` is configured in the resolver chain, because\nthis resolver is caching resources, deriving the cache key from the\ngiven resource path \u2014 this can cause collisions for cases like this:\n\n    resources/\n    |--foo/\n    |  |--foo.css (imports style.css)\n    |  |--style.css\n    |--bar/\n    |  |--bar.css (imports style.css)\n    |  |--style.css\n\nThe first \"style.css\" resolved resource is then cached and will be given\nto any request asking for \"style.css\".\n\nTo avoid those issues, this commit improves the `ResourceTransformer`\nimplementations to calculate the absolute request path before asking the\nchain to resolve the resource URL, thus avoiding duplications.\nThe resource chain will be then asked to resolve \"/foo/style/css\" or\n\"/bar/style.css\".\n\nIssue: SPR-14597"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea5ff87f8ec8d34871aaf3bcc49a165e2db076e5", "message": "Fix NumberFormatException with X-Forwarded-Host\n\nThis commit fixes `NumberFormatException`s that were thrown when parsing\nIPv6 host values in `X-Forwarded-Host` request headers.\n\nIssue: SPR-14761"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/53441f8962532a7afbc44c615d557e458d56c568", "message": "Configure default SSL context in Netty RequestFactory\n\nThis commit configures a default SslContext if none has been provided.\nThis also enforces separate Netty bootstrap instances for cleartext and\nTLS exchanges.\n\nIssue: SPR-14744"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/11aa920785151c76c381f482e8b3810ccf59929f", "message": "Remove RxJava 1.x variants of WebClient adapters\n\nIssue: SPR-14743"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ee17f566269b0cb9969050a7f6a66573b1e8b072", "message": "Fix missing ETag/LastModified headers in responses\n\nPrior to this commit, the `HttpEntityMethodProcessor` would avoid\nwriting ETag/Last-Modified response headers before calling\n`ServletWebRequest` to process conditional requests. This was done to\navoid duplicate response header values due to headers being already\nwritten to the underlying servlet response.\n\nThis is still necessary for GET/HEAD requests, since this is properly\nhandled by `ServletWebRequest` for those cases. But\n`HttpEntityMethodProcessor` should not make that decision for\nPUT/PATCH/POST responses since developers are adding response headers on\npurpose and should be in control of the situation \u2014 whereas\n`ServletWebRequest` does not write those headers in those cases.\n\nIssue: SPR-14767"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/578af59f0ce2a5bf89a7e8fa7d38ce4a7def8bd4", "message": "Polish byte-range resource handling"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5b33e02fb441357f0160f24be89a7f61bbbad1a4", "message": "Add ClientHttpRequestInterceptor in WebClient\n\nThis commit adds a new chain-based, interception contract to be used\nwith `WebClient`. This is the HTTP client equivalent of the `WebFilter`\ncontract already implemented in web reactive server.\n\nA `ClientHttpRequestInterceptor` implementation can transform the\noutgoing HTTP request (method, URI or headers) before delegating it to\nthe next interceptor in the chain, or bypass the request processing\naltogether and return a (cached) HTTP response.\n\nIssue: SPR-14502"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c6081031400ddaf1424751ca75c17d572ff808aa", "message": "Add client HTTP request and response Mocks"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e3da8b5e9cb96eb3cc007197c50d2dd6cc68d34f", "message": "Polish ResourceHttpRequestHandler, ResourceEncoder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3596e720505745ef48678bfce17c8d036943852d", "message": "Add range requests support in ResourceWebHandler\n\nThis commit handles range requests in `ResourceWebHandler`, using the\n`ResourceHttpMessageWriter` configured within the handler.\n\nThis `WebHandler` will add a `HTTP_RANGE_REQUEST_HINT` writer hint\ncontaining all the HTTP Range information of the request.\n\nIssue: SPR-14664"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a7a9e36ca024d52de74db0665c1102eec901b300", "message": "Add ResourceRegionHttpMessageWriter\n\nThis new `HttpMessageWriter` leverages the `ResourceRegionEncoder` to\nwrite `ResourceRegion` to HTTP responses, thus supporting HTTP Range\nrequests.\n\nWhenever possible, this message writer uses the zero copy support for\nsingle range requests.\n\nThis `HttpMessageWriter` is never used directly, but is used as a\ndelegate by the `ResourceHttpMessageWriter`. When provided with the\n`BOUNDARY_STRING_HINT`, the `ResourceRegionHttpMessageWriter`\nadapts its behavior in order to write a single/multiple byte ranges.\n\nIssue: SPR-14664"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/55d6f88dcd4bfc2f3ca993d73bedbff3a9bd5dee", "message": "Add ResourceRegionEncoder\n\nThis commit adds the necessary infrastructure for the support of HTTP\nRange requests. The new `ResourceRegionEncoder` can write\n`ResourceRegion` objects as streams of bytes.\n\nThe `ResourceRegionEncoder` relies on an encoding hint\n`BOUNDARY_STRING_HINT`. If present, the encoder infers that multiple\n`ResourceRegion`s should be encoded and that the provided boundary\nString should be used to separate ranges by mime boundaries.\nIf that hint is absent, only a single resource region is encoded.\n\nIssue: SPR-14664"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e5435e6f2b9110969af9d581d1a05c6106b8dd7", "message": "Check template availability in ScriptTemplateView\n\nThis commit overrides the `checkResource` implementation in\n`ScriptTemplateView` in order to check if the template file resource is\navailable and if the resolver can then proceed with rendering the\ntemplate.\n\nIssue: SPR-14729\nCherry-picked from: 66b370e10"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c4b9b9224786262cf5e07984ab4fb9b96e858255", "message": "Polish ResponseExtractors"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/084daa7fb510cdc650b0ade942c2fc067d2b2027", "message": "Document media type registration for appcache files\n\nSince appcache manifests can have various file extensions, developers\nshould register the (file extension, media type) mapping in their Spring\nMVC / Reactive Web configuration.\n\nThis commit adds javadoc on both `AppCacheManifestTransformer` variants\nto explain how to do that.\n\nIssue: SPR-14510"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24948126", "body": "Good catch. I'll modify my PR and add more tests on edge cases.\nThere are also IPv6 compatible IPv4 addresses like `::192.168.1.1`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24948126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24995722", "body": "I've changed a couple of things in this PR.\n\nI've splitted the host regexp in 2; the match process is getting more complex and I wonder if we should use [named groups](http://download.java.net/jdk8/docs/api/java/util/regex/Pattern.html#groupname) to make it more readable/manageable.\n\nOn the first point, I've added a \"scheme but no host\" check in the `fromHttpUrl` method, because some URIs (emails) do verify that condition but are still valid.\n\nI agree, IPv4 and IPv6 are different enough to create a separate `HOST_IPV6` type.\n\nI'm not really happy with the condition check to decide on wich `HierarchicalUriComponents.Type` we should use (checking if the host part starts with `[`); IMHO, the only alternative would be to use named groups in the regexp and some kind of flag saying if the host is a IPv6 address or not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24995722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25004512", "body": "Thanks a lot for the feedback.\nupdated + rebased!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25004512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25874125", "body": "PR updated!\nThat's what I thought too, but I underestimated the number of tests using \"?\" and thought that the pattern behavior was expected from the start for many users.\nAnyway, a new method adds the missing feature and won't break existing tests.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25874125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25956810", "body": "Hi Rossen,\n\nI updated the PR, but a couple of questions remain.\n\n### Package names: String vs Package\n\nI like the idea of checking if a package exists and logging a WARN.\nIMHO, java packages are not hierarchical per se, so in the end we still have to go `aPackage.getName().startsWith(...)`. Or do you know a better way to check if a package is part of a base package?\n\nAlso, the code behaves differently with that approach.\nWhen using String, if a package does not exist, the `ControllerAdviceBean` still holds a String with that package name. When checking if this bean is applicable to a `Controller`, the result will be `false`.\n**Result**: package does not exist, but the `ControllerAdviceBean` won't assist any `Controller`.\n\nWhen using Package, if a package does not exist, the `ControllerAdviceBean` will log a WARN but won't actually hold anything because `Package.getPackage(pkgName)` returned null. When checking if this bean is applicable to a `Controller`, the result will be always `true`, since there's no packageName to restrict it.\n**Result**: package does not exist, but the `ControllerAdviceBean` will assist all known `Controller`s.\n\nI'm trying to decide what would be the best behavior here in this edge case. Throwing a runtime exception would definitely catch the developers' attention and prevent that kind of \"silent error\", but do we actually want to stop the application from running?\nWhat do you think?\n\n### `@InitBinder` tests\n\nI've implemented tests for `@ExceptionHandler` and `@ModelAttribute`, but none for `@InitBinder`.\nActually, I haven't found existing tests for `@InitBinder` + `@ControllerAdvice`. Any ideas on how to test that use case?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25956810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26155596", "body": "PR updated again.\nIt still needs some polishing (don't hesitate to comment it), but I wanted to get some feedback from people commenting on the JIRA issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26155596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27330015", "body": "Note: for this PR to be merged, new artifacts need to be added to Spring's Artifactory instance.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27330015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28829665", "body": "This PR fixes the build - the build is currently broken when using jdk8-b115.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28829665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30849399", "body": "Good catch!\nThis methods misses a \"since 1.8\" documentation hint [in the javadoc](http://download.java.net/jdk8/docs/api/java/lang/reflect/Method.html#getParameterCount--)...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30849399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30857378", "body": "Just created [SPR-11245](https://jira.springsource.org/browse/SPR-11245) and a bugreport to Oracle (#9009017).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30857378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35708017", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35708017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36791007", "body": "Maybe [this javadoc](http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html#setThrowExceptionIfNoHandlerFound-boolean-) will help you? Is the `DefaultServletHttpRequestHandler` registered?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36791007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44096710", "body": "Hi @gcuisinier - it's [right there](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement).\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44096710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44099235", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44099235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46953137", "body": "Thanks @gregturn !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46953137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47156796", "body": "Don't merge this yet - a little bit more testing is required.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47156796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/62685104", "body": "Hi, it looks like this is not a pull request, but rather a question to be submitted on [StackOverflow](http://stackoverflow.com/).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/62685104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63793279", "body": "Thanks Chris!\nThis has been merged in dff48ad8d - this will be part of the next 4.1.x release, scheduled December 23rd.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63793279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63843013", "body": "OK I'll update this PR!\nNote, the getSessionIds is already defensive and returning an empty Set if nothing was found.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63843013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65478799", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65478799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65762353", "body": "Thanks!\nThe next release is due next week (and will ship with Spring Boot 1.2.0 GA).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65762353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68433994", "body": "Merged with 369cabf\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68433994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68452882", "body": "great, thanks @colinmorelli - after review, this will be in 4.2 (and backported to 4.1.x as well).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68452882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68896994", "body": "Hi @candrews \nNo need to do anything, I'll push your commits along other enhancements (I think we might be able to reuse this in oher places as well).\nI'll let you know when it makes master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68896994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/69192716", "body": "Hi @candrews \nYour contribution is in master now - I've just squashed commits into one and polished a bit. Thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/69192716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76923477", "body": "Hey @rwinch and @sdeleuze \n\nI know you guys worked on this at some point. I've modularized the documentation and upgraded the asciidoctor gradle plugin. We're still relying here on the docbook plugin as well, since pdf and epub asciidoctor backends are still in alpha version.\n\nAnything I should know before merging this?\n\n@poutsma sorry I could not reuse your PR, as rebasing it against master was a nightmare...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76923477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76975056", "body": "Thanks @rstoyanchev @rwinch , I'll update this PR with the suggested changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76975056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77410087", "body": "I've revisited this PR with suggested changes.\n\n## Documentation Layout\n\nThe documentation is now organized in bookparts, so there are now less files to track. LevelOffsets for bookparts don't need to be incremented, as they're already starting at level 0. Still, I separated some parts that were long/important enough to be in their own file; those are imported with an incremented leveloffset.\n\nHere is the new documentation layout:\n\n```\nindex\n  |-- overview[]\n  |\n  |-- whats-new[]\n  |\n  |-- core[]\n  |   |-- core-beans[leveloffset=+1]\n  |   |-- core-aop[leveloffset=+1]\n  |-- testing[]\n  |\n  |-- data-access[]\n  |\n  |-- web[]\n  |   |-- web-mvc[leveloffset=+1]\n  |   |-- web-view[leveloffset=+1]\n  |-- integration[]\n  |\n  |-- appendix[]\n      |-- appx-spring-tld[leveloffset=+1]\n      |-- appx-spring-form-tld[leveloffset=+1]\n```\n\n## Remaining issues\n\nWhen viewing individually a bookpart (e.g. looking at `core` in its own HTML rendered page):\n1. `[partintro]` are not rendered in individual pages, since the bookpart is not a child of a book document when being rendered indivually\n\n```\nasciidoctor: ERROR: partintro block can only be used when doctype is book\nand it's a child of a book part. Excluding block content.\n```\n1. links to other bookparts don't work; they probably need to be updated:\n\n```\n<<section, My section>> must be changed into <<filename#section, My section>> \n```\n\nOf course, both issues are solved in single document mode.\n\n## Notes\n\nThis is a first stab at reorganizing our documentation, and I believe this must be done iteratively. Breaking down our huge `index.adoc` file will help us and avoid PR decay, merge conflicts, etc. And should give some fresh air to our file editors and browsers.\n\n@rwinch I know we're now relying on docbook, but I was wondering if something needed to be done re asciidoctor/asciidoctor-gradle-plugin#52 if we want to support multi-page documentation natively?\n\n@rstoyanchev using asciidoctor's `toclevels: N`, we can make that TOC significantly smaller - but I think that relying on docbook to render html prevents us from doing so at the moment.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77410087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/88140215", "body": "I assume this has been opened in error.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/88140215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/94443608", "body": "Hi @jhcao23\nCould you open an [improvement issue on JIRA](https://jira.spring.io/browse/SPR/) in order to discuss that change? This pull request cannot be merged anyway - it does not contain a commit with the proposed change.\n\nI'm not sure I'm getting the rationale behind that change:\n- what kind of converter would require this? Could you tell us a bit more?\n- spring framework (and other projects) implement a great deal of message converters; maybe [one of those converters](https://github.com/spring-projects/spring-framework/tree/master/spring-web/src/main/java/org/springframework/http/converter) can give you some hint on how to solve your issue?\n- I'm a bit reluctant to rely on canRead + exceptions for control flow here; the behavior can be hard ot predict here.\n\nThanks! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/94443608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/110645054", "body": "I don't see any commit of yours in this PR.\nCould you fix this PR please? New features should be committed against master directly - backporting to 4.1.x is a decision for the team to make.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/110645054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/113069270", "body": "Closing this PR as invalid.\nCurrently emailing with the PR author to create a proper one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/113069270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/115620928", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/115620928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123208419", "body": "This has been resolved with 09e3fc40e5c24 in [SPR-13252](https://jira.spring.io/browse/SPR-13252).\nThanks!\n\nBy the way did [you sign our CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123208419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123325005", "body": "Thanks @felixbarny \nOne more question - did you discover this as a regression when testing the latest RCs with an existing application? Or did you use those HTTP caching features for the first time in an app and found this bug?\n\n(just trying to prepare for a smooth upgrade for all Spring developers...)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123325005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124029879", "body": "Thanks @sbrannen for this review! I've fixed all the issues you pointed at.\nI've updated the javadoc for `addHeader` with the supported types (the implementation details it was describing were wrong anyway). The supported date formats are listed on the `getDateHeader` method.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124029879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124036858", "body": "Fixed in 43e36e2dee\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124036858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/136670412", "body": "Hi @auk \nHave you [signed the CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/136670412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168222601", "body": "Hi @davinkevin - right now this is only supported for serving static resources with a `ResourceHttpRequestHandler`. I'm not sure this can be done on `@Controller` handlers as well - please open a [JIRA issue](jira.spring.io) on the Spring Framework project (component \"Web\") and we can discuss it there.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168222601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169050267", "body": "Hey @snicoll, I've tested this successfully on my laptop.\n\nWe have to make sure that our \"Java\" SonarQube plugin is up to date.\nIf not, an update is required (and probably a restart of the instance).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169050267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169737146", "body": "Thanks!\nMerged with 6c282096c684\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169737146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169927345", "body": "[SPR-10822](https://jira.spring.io/browse/SPR-10822) has been closed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169927345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169931831", "body": "Merged with 554bf4958de\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/169931831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/182312192", "body": "Thanks @soldierkam for this PR! I'd be happy to review more if you've got other ideas :+1: \n\nIndeed, I ran a few JMH benchmarks myself and found that this leads to a consistent performance boost for many cases. `AntPathMatcher` is a central piece of our infrastructure, so I'm not keen on backporting this change to the latest version of the 4.2.x line. This will be shortly available as a `4.3.0-BUILD-SNAPSHOT` version.\n\nMerged as e77ff3c for [SPR-13913](https://jira.spring.io/browse/SPR-13913)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/182312192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185816507", "body": "Doing that change fails the following test, so this raises more question about AntPathMatcher behavior:\n\n```\norg.springframework.core.io.support.ResourceArrayPropertyEditorTests > testSystemPropertyReplacement\n```\n\nCould you create an issue on jira.spring.io for this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185816507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191883822", "body": "Thanks!\nBy the way, have you [signed the CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-individual-contributor-license-agreement-icla)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191883822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191955831", "body": "Yes, I think you do need to sign it for each project...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191955831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191990846", "body": "No problem!\nThe project lead is Juergen Hoeller.\nThanks for taking the time to do this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191990846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192227903", "body": "This has been merged with 41da04d3865d611ece65e6a236a3f3b3876e27f9.\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192227903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192232515", "body": "Too late, it's already in master - we'll get to that later.\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192232515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196399851", "body": "Thanks!\nThis has been moved to 5.0 - so this will be merged when the 5.0 branch exists.\nIn the meantime, have you signed the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196399851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198461774", "body": "Merged with 160410c148 - thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198461774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198511696", "body": "After a chat with @rstoyanchev, I'll try to address that in a different way and regroup that support into the `ResourceHttpMessageConverter`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198511696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/199948019", "body": "@rstoyanchev @poutsma I've just updated this PR. Let me know what you think.\nNote: I've found a section with [what appears to be dead code](https://github.com/bclozel/spring-framework/blob/SPR-13834/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#L485-L494), introduced by f16225690 - I'm not sure if this should be removed or improved?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/199948019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200298058", "body": "Merged with 9b2023111d3c6 and 2267b1405.\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200298058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203002197", "body": "Merged with f35ec5353a82\nThanks @royclarkson !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203002197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/204107751", "body": "Taken care of with 406d06118\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/204107751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/207098681", "body": "Hi @selkhateeb - looks interesting!\nCould you create an issue on jira.spring.io for this? (project Spring Framework, component \"Web:client\")?\n\nAlso, I think adding this directly on the RestTemplate won't fit with all our supported clients (netty, okhttp, etc). This could be done only on the `SimpleClientHttpRequestFactory`, as there are already some configurations facilities.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/207098681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221854078", "body": "Hi @padilo \nThanks for this very interesting PR.\nIndeed with Spring 5.0, we're right in the middle of discussing how certain concepts can be translated in the reactive world. `@Transactional` and `@Cacheable` are examples of those.\n\nThe problem with those features is that **not all concepts** can be translated in the reactive world. Which means that we have to carefully review the big picture before committing to get `@Cacheable` working with reactive streams.\n\nAlongside the questions asked by @sdeleuze we may wonder how keys should be generated if `Observable`, `Flux` or `Mono` types are used in the method signature or if the very blocking nature of cache stores may not be a big problem and break assumptions and contracts.\n\nIn all cases, I think this belongs to a broader issue we have to tackle in Spring 5.0.\nI'm sure the whole team would like to discuss this in a JIRA ticket \u2014 I'm not aware of an existing one at the moment, I'll defer to @snicoll and @jhoeller since they're in charge of that part.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221854078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221980868", "body": "Indeed, this has been fixed in 65f6ea3 \u2014 thanks for your contribution @eddumelendez !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221980868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222432358", "body": "Thanks @fj !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222432358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223020979", "body": "Closed with 9975f02e4d61ff98.\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223020979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223021102", "body": "Closed with 5a8172718079128032\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223021102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223608900", "body": "Could you open an issue on jira.spring.io and explain in more details why this should be done? Encoding matters are often complex, so we need to make sure the default should be changed there instead of keeping the Servlet specification default encoding.\n\nNote, this seems to be somewhat related to [SPR-7789](https://jira.spring.io/browse/SPR-7789), [SPR-9096](https://jira.spring.io/browse/SPR-9096), and [SPR-11035](https://jira.spring.io/browse/SPR-11035).\n\nAlso, have you signed the [CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-individual-contributor-license-agreement-icla)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223608900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233870776", "body": "Thank you for the PR! Could you please create an issue for this pull request in the [Spring Framework issue tracker](https://jira.spring.io/browse/SPR). When you do, please make sure to fill the `Reference URL` with the link to this PR. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233870776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233877778", "body": "Hi @khatchad \n\nThanks for this interesting PR. I've taken a look at those changes and I right now I'm not keen on merging this for the following reasons:\n1. As an integration framework, our code has to do \"strange things\" in order to guard against libraries limitations or support multiple versions. Automated analysis/refactoring tools tend to have a lot of false positives on our codebase\n2. It is really important for us to keep a clean codebase and we have a strict \"0 package tangle\" policy. Moving code (and imports) around is rather risky. I haven't run Sonar on your PR but I think this might be an interesting feedback for your tool.\n3. It seems there are currently [some performance limitations to default methods](http://www.scala-lang.org/blog/2016/07/08/trait-method-performance.html), so I wouldn't consider moving all that code to default methods without a good reason.\n4. We're in the middle of big changes for Spring 5.0, so your PR is already outdated\n\nI'm closing this for now and I'll let other team members reopen this in case they think we can do something here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233877778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878189", "body": "Thank you for the PR! Could you please create an issue for this pull request in the [Spring Framework issue tracker](https://jira.spring.io/browse/SPR). When you do, please make sure to fill the `Reference URL` with the link to this PR. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878394", "body": "Thank you for the PR! Could you please create an issue for this pull request in the [Spring Framework issue tracker](https://jira.spring.io/browse/SPR). When you do, please make sure to fill the `Reference URL` with the link to this PR. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233879282", "body": "Thank you for the PR! Could you please create an issue for this pull request in the [Spring Framework issue tracker](https://jira.spring.io/browse/SPR). When you do, please make sure to fill the `Reference URL` with the link to this PR. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233879282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234224003", "body": "You need to have your `@pivotal.io` address associated with your github account. If it's already the case, then maybe it's a glitch and you should ping Rob about that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234224003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234247197", "body": "Fixed with 3635c9dbfe0c\n\nThanks a lot for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234247197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/239794922", "body": "Yes, check https://jira.spring.io/browse/SPR-6706\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/239794922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241674179", "body": "Merged with 64bc0ca744781af2bf\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241674179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242370379", "body": "@poutsma [Server-Sent Events](https://developer.mozilla.org/fr/docs/Server-sent_events)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242370379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242393086", "body": "Squashed/merged with ab7107c4c5b\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242393086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243462609", "body": "Merged with e7aecb44bb9c08f63b\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243462609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244493494", "body": "Merged with 00617d74de0f6cff0\n\nThanks a lot @violetagg !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244493494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245203006", "body": "Merged with 42f101fb5bfa3 and 5496f11f3c550\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245203006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245584310", "body": "Looking good!\nAbout renaming `hints` into something else \u2014 I'd like to clarify something first.\n\nThose \"hints\" can change for each encode/decode call, depending on which part of the application calls it? To me \"attributes\" sounds like it's part of the encoder state, \"context\" something that can be passed around and mutated by any participant, and \"parameters\"... like method parameters.\n\nWhich one is the closest to the actual meaning here?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245584310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245972388", "body": "Obviously, I'm not the most objective here - I'd rather have Spring Boot deal with setting up the infrastructure or leave full control to the developers and properly document things.\n\nAs our infra will get more complex (TLS, protocols, etc), I suspect we'll have a harder time  providing such facilities.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245972388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247622340", "body": "I just tried reusing the `ServerHttpMessageWriter` and it seems we can't really move the `HttpRange` information from `ResourceWebHandler` because:\n- In `ResourceWebHandler`, in case an `IllegalArgumentException` is thrown while parsing the HTTP range  information, we not only need to set an HTTP status (which could be possible with a `ResponseStatusException`), but also add an HTTP response header.\n- In `ResourceWebHandler`, we're setting the response status to `HttpStatus.PARTIAL_CONTENT` if this is a byte range request; we can't do that from within an `HttpMessageWriter` which only holds a reference to a `ReactiveHttpOutputMessage` (no `setStatus` method).\n\nGiven that `ResourceHttpMessageWriter` already delegates to `ResourceRegionHttpMessageWriter`, which delegates to the `ResourceRegionEncoder`, I'm wondering if adding another level of wrapping and hints is really helping the situation in the end.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247622340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247689010", "body": "Rebased and merged with b58a06208f261d\nThanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247689010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247978848", "body": "@rstoyanchev @sdeleuze to me, this `ServerHttpMessageWriter` contract would look more and more like a full `WebHandler` with a few things added on top. This makes sense for this use case, but I'm not sure I'm comfortable adding this right now (I've explained in my previous comment the level of indirection we're talking about if we do that).\n\nI'd rather duplicate a few lines of code in `ResourceWebHandler` and a `HandlerResultHandler` implementation rather than introducing that abstraction if we're not confident about it. Will it be useful for more use cases?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247978848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251995676", "body": "This has been fixed in [SPR-8016](https://jira.spring.io/browse/SPR-8016) with a different approach.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251995676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252361083", "body": "I'm closing this PR in favor of #1199, since hashing the list of resource locations into the cache key may not be consistent nor efficient. I've improved the way we're resolving/rewriting links within resources to use absolute paths instead of relative paths.\n\nYour PR was very helpful and underlines the limitations of the current implementation.\nDon't hesitate to voice your opinion on the dedicated issue or on #1199 directly.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252361083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253607020", "body": "Hey @sdeleuze @rstoyanchev @poutsma \n\nI've got a draft PR for improving our configuration infrastructure for web reactive. Nothing ground-breaking here, since it pretty much mirrors what we have on the MVC side. I've made one significant change: I've dropped the `ConfigurerAdapter` class and directly added default methods in the `WebReactiveConfiguration` interface.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253607020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255137976", "body": "I've merged this in 8143e5f; but keep an eye on [SPR-14750](https://jira.spring.io/browse/SPR-14750) as changes are coming to the Reactor Netty client which will remove the existing `shutdown()` method.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255137976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258137884", "body": "Thanks @rstoyanchev - I've updated the reactive starter and this improves the auto-configuration support!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258137884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258672682", "body": "@hadrienk Could you create a new issue on jira.spring.io and reference `SPR-14040`?\nCan you also describe how that change makes that `InputStreamResource` unusable with a code sample?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258672682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259987026", "body": "Merged with 6261106\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259987026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260901274", "body": "The main goal behind the `GzipResourceResolver` is to resolve resources that were gzipped at build time, in order to save CPU and avoid the container to compress those resources while being served to clients.\n\nI'm closing this PR as this change would lead to:\n- resolving a pre-gzipped resource\n- uncompressing it at runtime\n- transforming it at runtime\n- in this case, not even re-compressing it, which leads to an incorrect response since the gzip HTTP response header is still there and the body is not compressed anymore\n\nI've addressed this issue in [SPR-14773](https://jira.spring.io/browse/SPR-14773).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260901274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273786809", "body": "Merged with 053ac64101362f\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273786809/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273878977", "body": "Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273878977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278331003", "body": "@poutsma @rstoyanchev \r\n\r\nI've just updated this PR with the changes we discussed:\r\n* use a `PathPatternRegistry` instance in `AbstractHandlerMapping` and for all its implementations. Those can choose to couple it with a map with `PathPattern` as key and  handlers or mapping info as values.\r\n* the `ParsingPathMatcher` should not be used by default in Spring MVC\r\n\r\nWith those changes, it seems `PathPatternRegistry` methods are looking more and more like Collection-related methods + parsing/search features. I haven't found a way to extract a meaningful interface out of it for now.\r\n\r\nShould we proceed right away with it so that we can use it in the functional WebFlux variant? We can always adapt the contract with that feedback in mind.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278331003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278674954", "body": "Hey @rstoyanchev - Sorry, I did merge this PR before I saw the notification about your additional review.\r\nI did polish a bit those changes with 09d18f2, taking into account many of your comments (thanks!).\r\n\r\nI believe a couple of those couldn't be applied in a straightforward way.\r\nI agree, the getter/setter methods aren't symmetrical; but this could actually be a feature of our support. After all, we're registering patterns against a configuration we provided. When asking for the registered patterns, I think we should give the full picture to developers by default. Pattern variants aren't checked on-the-fly anymore, but actively registered at startup. Maybe those setter/getter methods should change name for register/list?\r\n\r\nI think you pointed to the big limitation of the current approach. We're gathering configuration flags and the patterns themselves into a single class. So sharing an instance of that one means sharing patterns. But we can't share those between `HandlerMapping` instances, and certainly not with `UrlBasedCorsConfigurationSource`.\r\nThis is the part I need to improve in the current design.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278674954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278782645", "body": "Merged with e4be7131ca74c23275837684ce63d839469a0dda\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278782645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281309391", "body": "Thanks @aclement ! I've merged this with a0505bf and removed the concurrency checks in `ParsingPathMatcher` which are not necessary anymore.\r\nRight on time for the next milestone.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281309391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281316547", "body": "I assume this PR has been opened in error.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281316547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303660819", "body": "This has been merged with e2aa117ff9.\r\nCongratulations on your first contribution!\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303660819/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313327745", "body": "Already merged with fd1859c\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313327745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328043382", "body": "Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328043382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331382419", "body": "Thanks a lot for your contribution!\r\nThis has been merged with 78434c8.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331382419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331932967", "body": "Something we discussed today - WDYT @poutsma @rstoyanchev @sdeleuze ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331932967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332187231", "body": "Thanks @eddumelendez !", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332187231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332189485", "body": "This looks a lot like [SPR-14882](https://jira.spring.io/browse/SPR-14882).\r\nBy design, `RestTemplate` is not meant to stream the HTTP response body.\r\n\r\nIf you think SPR-14882 is not relevant here, please create a new jira issue on http://jira.spring.io and explains what the issue is, preferably with a repro project we can take a look at.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332189485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332221663", "body": "Hey @LarsOL, this has been fixed by b30f6fd in [SPR-15988](https://jira.spring.io/browse/SPR-15988). Technically, your PR was first - sorry I missed it in the first place.\r\n\r\nThanks for your contribution!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332221663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337040241", "body": "The Spring Framework repository does not contain sample applications.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337040241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5910819", "body": "In that case, the `SendToMethodReturnValueHandler` was relying on the inbound message destination, and not the lookup destination. So maybe this was a 2 issues in one fix.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5910819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5911368", "body": "Yes :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5911368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6963255", "body": "That would be less confusing, yes.\nChanging this right now (to AppCacheManifestTransfomer - since the Manifest is the Resource, here).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6963255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7123608", "body": "Yes, but it's been fixed by @rstoyanchev in 5be1ff281c71\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7123608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7981605", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7981605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9127488", "body": "thanks! :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9127488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9207102", "body": "Thanks :sweat_smile:\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9207102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10162832", "body": "Are you saying there's a bug here?\nIf so, could you [file a jira issue](https://jira.spring.io) on the Spring Framework project and describe the issue there?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10162832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11084818", "body": "No problem :-)\nHopefully we'll get rid of docbook soon and only use aciidoctor (its renderer must support multi page documentation first).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11084818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043810", "body": "I believe you don't need to parse dates nor read the source code to use `long getDateHeader(String name)` and `setDateHeader(String name, long time)`. The main improvement here: writing valid HTTP date headers. \nYou can take a look at the [original issue](https://jira.spring.io/browse/SPR-11912) for more background on this.\n\nIs there something missing here?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043990", "body": "I'll add this [here](https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/htmlsingle/#_testing_improvements_3).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13524027", "body": "Fixed with 39726740 - thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13524027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18211530", "body": "Ha, good catch!\nThis has been fixed by 147a35f4f1 and d11c624fb0\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18211530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21462397", "body": "What happens if you try building with the gradle CLI?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21462397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/20718915", "body": "If I remove that line, then sending a message to \"/user/sessionid/queue/foo\" fails in `DefaultUserDestinationResolverTests.handleMessageWithNoUser()` with an assert `assertNull(actual.getUser());`.\n\nAre we relying on this to be null somewhere else?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/20718915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33253987", "body": "Could you create an issue on https://jira.spring.io and explain the problem there?\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33253987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33255012", "body": "ok thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33255012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76240380", "body": "Will that work with IPv6 addresses though?\nWondering if `lastIndexOf` is enough or if more checks are required for addresses like `[2001:db8::ff00:42:8329]:8080`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76240380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78825721", "body": "Because this class is in the `spring-web-reactive` module, I'm afraid [SPR-14664](https://jira.spring.io/browse/SPR-14664) won't use this because `ResourceHttpMessageWriter` is in the `spring-web` module, `org.springframework.http.codec` package.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/78825721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100071968", "body": "Wondering if `org.springframework.web.server.filter` in the `spring-web` module is a better location for this", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100071968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100072627", "body": "I don't think this note applies here, since we don't have such a filter and request multipart support is not done yet (see https://jira.spring.io/browse/SPR-14546). Also, reactive web applications are only running with embedded web servers, so `web.xml` does not apply here.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100072627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100073380", "body": "If you don't `.block()` here, or use `StepVerifier`, your tests may not run entirely or may exit before execution is finished. It works here because we're always returning `Mono.empty()`, but this means those `Mono` aren't subscribed to and that the chain execution is not done.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/100073380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "violetagg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/030bc224e30699a91e33e27a6d9782803afbd0d4", "message": "Invert the check for ServletInputStream.isReady()\n\nWhen checking whether there is still request body the first method\nthat should be checked is ServletInputStream.isReady() and then\nServletInputStream.isFinished(). ServletInputStream.isReady() is the active\nmethod whereas the ServletInputStream.isFinished() is not.\nIt is important to call ServletInputStream.isReady() because if it returns\nfalse it will schedule a dispatch and if the request body is already read it will\nsend onAllDataRead event.\n\nIssue: SPR-16521"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d8099adc9a94e13eb7b6e261e6300e33beaa8c95", "message": "AbstractListenerWebSocketSession: suspend the channel when there is no demand\n\nIssues: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2a481c541122e39c1736bc6b71da796b2c7a6e27", "message": "Fix race conditions in AbstractListenerReadPublisher\n\nTransition from DEMAND->NO_DEMAND:\nTwo concurrent threads enter DEMAND.request and DEMAND.onDataAvailable.\nAnd DEMAND.onDataAvailable finishes before DEMAND.request to be able to\nupdate the demand field then a request for reading will be lost.\n\nTransition from READING->NO_DEMAND:\nreadAndPublish() returns false because there is no demand but before\nswitching the states READING.request is invoked again a request for\nreading will be lost.\n\nChanging READING->DEMAND/NO_DEMAND is made conditional so that the\noperations will be executed only if changing states succeeds.\n\nWhen in READING state detect completion before each next item in order\nto exit sooner, if completed.\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b81487521135e0bfd12fa3ea1f98bf32e344313f", "message": "Fix race condition in transition from UNSUBSCRIBED->COMPLETED\n\n- Ensure completion signal (normal/exception) will be delivered to\nthe subscriber when transition from UNSUBSCRIBED->COMPLETED\n\n- According to the specification \"Publisher.subscribe MUST call onSubscribe\non the provided Subscriber prior to any other signals to that Subscriber\" so\nensure onComplete/onError signals will be called AFTER onSubscribe signal.\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41b13a4e8a7dfe2b4536a016532fccbe81a94e0c", "message": "Ensure onComplete/onError events will be delivered\n\nIssue: SPR-16207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0fbfa643856b07eb0d952905e527765fbd5c274f", "message": "UndertowServerHttpRequest: suspend reading when no demand\n\n- When there is no demand for reading, the implementation\nshould suspend reading otherwise useless events will be\nsend by Undertow to the registered read listener.\n- There is not need to wait for an event for reading/writing after calling\nresumeReads/resumeWrites"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec2218c9670ab2e2b88a86dba21bef7f1bf59f9c", "message": "AbstractListenerWriteFlushProcessor: Ensure the last flush will be performed\n\nWhen writing Publisher<Publisher<T>>, a flush operation is performed onComplete\nfor every Publisher. If the flush operation is not able to be performed immediately\nit will be retried before starting to process data provided by the next Publisher.\nFor the last Publisher the implementation needs to ensure that the flush will\nbe performed only then whole operation will complete.\n\nIssue: SPR-15949"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd1859c34c6d082e62220287a9c9b86337f66ef4", "message": "Adapt to the changes in Reactor Netty ClientOptions\n\nClientOptions/HttpClientOptions are now created via Builder"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f020d1ee71229213cb7ad92d1e94bb91c0d3d4c", "message": "Polish - the flag continueProcessing is not needed"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9cb74b1399d23b49b5a7c70c68a41e9b1300f4d8", "message": "Enable suspend/resume on reactive TomcatWebSocketSession"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e0678ba5835eb6f0a8d8b3ac344c8728102c4a4d", "message": "Add onError callback to DeferredResult\n\nIssue: SPR-15614"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e8d2c6c74be7aabbc74edadf02ac4453bc216a07", "message": "AbstractListenerWriteProcessor/AbstractListenerWriteFlushProcessor error handling\n\nWhen an exception happens while writing/flushing, the exception handling\nfor Servlet 3.1 based implementation will happen when\nWriteListener#onError and AsyncListener#onError events are received"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/23a052c1604734ea603fe06966eec50701620b5e", "message": "Clear the buffer provided by Undertow before reading the request\n\nWhen reading more that once for a given request, the position/limit of\nthe buffer provided by Undertow should be reset in order to use the\nfull capacity of the buffer."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7f616c216bf59d69a9b98161be94fed4097b955e", "message": "Specify the HandlerMapping#order in the websocket example\n\nThe order value has to be specified for the HandlerMapping\nso that it will be ordered before the one that serves the static resource."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4d058ceef4223017fb9ce17650e1b351afc02900", "message": "Resume Undertow writes only when data is available"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ff03b4a4adbaf4a2e05f6163584379a1335706d7", "message": "Init subscriber before switching the states\n\nIssue: SPR-15418"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ece481545987ebcd13552b5db1b56be929a9ae78", "message": "Ensure ISE will not be thrown when the client disconnects\n\n- ServletServerHttpResponse.ResponseAsyncListener#onError/onTimeout\nmust complete the async operation\n- ServletHttpHandlerAdapter.HandlerResultSubscriber#onComplete must\ncheck that the async operation is not completed\n\nIssue: SPR-15412"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/25561784228a60c125a237933f5064ecfde1a96e", "message": "Ensure NPE will not be thrown when cancelling a subscription\n\nIssue: SPR-15393"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/706c72e1c760de2e0467766d720b0e1c09452cc9", "message": "Simplify the calculation of UndertowServerHttpRequest.uri"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/383375c35f12ff4aec67560b77e00f332b54a36c", "message": "Use separate reactive HttpHandler for Tomcat/Jetty\n\nIntroduce separate adapters TomcatHttpHandlerAdapter/JettyHttpHandlerAdapter\nso that each adapter can use the Tomcat/Jetty APIs for reading/writing\nwith ByteBuffer."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1443c0808dc1ccd32bf6eaf201c60db6115b704a", "message": "Enable suspend/resume on reactive JettyWebsocketSession\n\nIssue: SPR-15130"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/141e04aa0f43d221aa0a80569df70301fe294304", "message": "Fix URI construction in UndertowServerHttpRequest\n\nEnsure there is no \"?\" at the end of the generated URI when there is\nno query available."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d49ab90187c455c8a21055810e837e75f67ce046", "message": "Jetty/Standard/UndertowWebSocketClient headers test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b4b7b163d1197caa338ea17c026ee862526b0ef5", "message": "Add WebSocketClient for Undertow\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30ee71ea1a71e05ab7a725a8cda8d3c0b5c68d3a", "message": "Add WebSocketClient for Java WebSocket (JSR-356)\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bd09a76a1eec053bd5a7533f67ecbb65fbe2b96d", "message": "Add WebSocketClient for Jetty\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/113d1b6970a10b628e03a45b953898f43cd5bf8c", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8d786e8bba86de45d486c0dd858522ca4190f0d1", "message": "Refactor the usage of Undertow ByteBufferPool\n\n- lazy allocate the PooledByteBuffer, only if there is a request body\n  for reading\n- close the PooledByteBuffer once the request finishes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08edec006b401e67e99cc33294b2c40639c42756", "message": "Refactor AbstractListenerWebSocketSession\n\n- Added suspended flag to indicate whether the ReceivePublisher\nis able to process the incoming messages.\n- Use buffer strategy for the incoming messages.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d03b77cdc0dffa716b3f945814b48142992f4f0", "message": "Rename \"ResponseBody\" flush processor + use generics\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a2053a516e7d28e0bc924fd29a6822a2a9d70675", "message": "Initial reactive, WebSocket Jetty support\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80040ef43b260960e65bdadcc48a8eed663c45a8", "message": "Initial reactive, WebSocket Undertow support\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/46b39f4372859bc28e15cc0856c93e51e37631b1", "message": "Initial reactive, WebSocket Tomcat support\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/41ece612cf7f96256d042b4301928cecb102a304", "message": "Generic AbstractRequest/ResponseBodyProcessor\n\nIn preparation for use with WebSockets.\n\nIssue: SPR-14527"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f222609c24a3f00ca662c71bc7d0ea63dbe39e0", "message": "Fix NPE in ServletServerHttpResponse.ResponseBodyProcessor.write\n\nIssue: SPR-14941"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/25e7cd577d6855bd56c463ad0ce4ae20bf33d541", "message": "Handle AsyncListener.onComplete in Servlet adapter\n\nTypically the Mono<Void> from the HttpHandler also reflects the\ncompletion of the request and response body processors and at that\npoint invoking AsyncContext#complete() from HandlerResultSubscriber\nshould be sufficient.\n\nThis commit explicitly propagates the AsyncListener.onComplete event\nto the request and response body processors for added safety.\nTechnically as mentioned those processors should have completed but\ndepending on how the controller is written there is a possibility\nthe body processors may not have completed.\n\nIssue: SPR-14772"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/882b075fdfe37af527aadcc14832ba4ada3b5d74", "message": "DefaultDataBuffer improvements\n\nDefaultDataBuffer.grow(int):\n- Copy only the remaining data\n- Update readPosition/writePosition"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ced65599413410be71b81ad0fb420d6be3013fc3", "message": "Improve AbstractResponseBodyProcessor.onNext(..)\n\nIf the provided DataBuffer is empty then request the next DataBuffer."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7e9437738272a31e1d764972291de42936194ab1", "message": "Handle async operation events\n\nProblem:\nThe following exception is observed on an async timeout:\n\"java.lang.IllegalStateException: It is invalid to call\nisReady() when the response has not been put into non-blocking mode\"\n\nCurrent Implementation:\nThe async operation events sent by the web container are not propagated\nto the internal implementation. When timeout/error happens and if the\napplication does not complete the async operation, the web container\nwill complete it. At that point if the application tries to read/write,\nthe operation will fail with an exception (above) that there is not\nasync operation started.\n\nProposed Solution:\nOn async timeout or error, make calls to:\n- AbstractRequestBodyPublisher.onError,\n- AbstractResponseBodyProcessor.onError,\n- AbstractResponseBodyFlushProcessor.onError\nAs a result of these calls the async operation will be completed and no\nmore invocations of read/write will be made."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80ff5ae9c513372db37eb0dbcb19048adb09b21f", "message": "Improve exception handling when clients disconnect.\n\nIssue: SPR-14538"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247344011", "body": "Hi,\n\nI reverted the changes in `ServletHttpHandlerAdapter` and `UndertowHttpHandlerAdapter`. Should we track the changes in Reactor and RxNetty here or in another issue?\n\nThanks,\nVioleta\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247344011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247427862", "body": "Can you check the new changes?\n\nThanks,\nVioleta\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247427862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291621080", "body": "> What I'm also wondering is whether the issue can occur the other way around. In other words for the `onError` signal from the `ResponseAsyncListener` to reach the `HandlerResultSubscriber`, which also completes the `AsyncContext`, first.\r\n\r\nYes you are right. I reproduced it with a debugger.\r\n```\r\njava.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]\r\n\tat org.apache.coyote.AsyncStateMachine.doComplete(AsyncStateMachine.java:304) ~[tomcat-embed-core-8.5.13.jar!/:8.5.13]\r\n\tat org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:289) ~[tomcat-embed-core-8.5.13.jar!/:8.5.13]\r\n\tat org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:373) [tomcat-embed-core-8.5.13.jar!/:8.5.13]\r\n\tat org.apache.coyote.Request.action(Request.java:391) ~[tomcat-embed-core-8.5.13.jar!/:8.5.13]\r\n\tat org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:95) ~[tomcat-embed-core-8.5.13.jar!/:8.5.13]\r\n\tat org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onError(ServletServerHttpResponse.java:189) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT\r\n```\r\n\r\nSo we need a check also for `ServletHttpHandlerAdapter.TIMEOUT_LISTENER.onError/onTimeout` (the new code after polishing)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291621080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305474956", "body": "Hi, \r\nThis is still relevant.\r\nRegards,\r\nVioleta", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305474956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305476002", "body": "Hi,\r\nThis is still relevant.\r\nRegards,\r\nVioleta", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305476002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311038605", "body": "I agree. I updated the change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311038605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344881155", "body": "> Can those be unified with a suspend/resume read protected methods in the base class?\r\n\r\nI would suggest to keep these two changes separate.\r\nWe might need some refactoring for web sockets.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344881155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345183422", "body": "Hi,\r\n\r\nA PR #1598 was created to meet the requirements for the web socket implementation and https://jira.spring.io/browse/SPR-16207 was updated with details for the approach that I chose to use.\r\n\r\nRegards,\r\nVioleta", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345183422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/152198003", "body": "done", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/152198003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Patrick0308": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f4d25a6e64c817dd44f324398c7614bb5e36b79", "message": "Polish \"Use Java 8 forEach method on Map\""}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1738", "title": " Polish \"Use Java 8 forEach method on Map\"", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yankee42": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4094879daf49f9b9c2326578904ba8e55230bf60", "message": "Make MockRestRequestMatchers independent of JUnit (#1720)\n\nMockRestRequestMatchers was using org.junit.Assert.assertNotNull\r\nand thus could not be used in projects that use e.g. TestNG instead\r\nof JUnit 4."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mariusz-jasinski": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/184ed6da579f180cd79de28cc06bebe6556c4d75", "message": "Overloaded acknowledge method with StompHeaders\n\nIssue: SPR-16519"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roamingthings": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d3eff49c59d10c8d50f243071c082034ddf234b3", "message": "Fix typos in webmvc documentation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "UrangUrang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ab3f88e82d1de31d374463160ee94d9ccac74a0", "message": "Fix typo\n\nMockMVc -> MockMvc"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spring-buildmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1aaefbdd0330d587f1aabc332ff64e682e3b5c75", "message": "Next Development Version"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14fa2b18ce356abe26794a8208cc4b1c1e5e7d9b", "message": "Next Development Version"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e30f1fbe890631d216cc8a984816dcbb292dc2e9", "message": "Next Development Version"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6dcc8539f7d6d2aed9258d931c178dcd163cc112", "message": "Next Development Version"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c7bd0a9ea5447628bb8a53c8ba2bf3953fafe4b", "message": "Next Development Version"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theHacker": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37f19a4b439717362bfb49e467260818de6ffcbc", "message": "Polish Javadoc\n\nWebSocketMessageBrokerStats's Javadoc now states the correct default\nlogging period.\n\nCloses gh-1691"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wilkinsona": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/52dfc4ebc4a0c60f8062b8f2f0b74a0f844de8c9", "message": "Align spring-webflux's Webjars Locator dependency with spring-webmvc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/07eee05d1df02ebcb07b192afd1392028251e428", "message": "Add missing \"be\" in Part's javadoc\n\nCloses gh-1570"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc2e1b375e399c0cc6300c32351458110eee6d4f", "message": "Correct the javadoc for ExchangeResult.getUrl()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1fed6f7c8314f070833e8dfda86f8d0f112a6c0", "message": "Only apply dependency-management and propdeps-maven to subprojects\n\nPreviously, the dependency management and propdeps-maven plugins\nwere being applied to all projects. The latter caused a problem with\npublishing to Artifactory as the buildSrc project now had the\npropdeps-maven plugin applied to it.\n\nThis commit removes the logic that was applying the propdeps-plugin\nto all projects so that it's only applied to subprojects excluding\nthe buildSrc project. The logic that applies the dependency management\nplugin has been moved to the same location. It is applied after the\npropdeps-maven plugin as, otherwise, the pom customization does not\nwork correctly and optional dependencies are not included in\ngenerated poms.\n\nIssue: SPR-15167"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6fe7b176c4ae1ceb26aa81f4d465abde8e8f6dd9", "message": "Apply propdeps-maven plugin to ensure the optional deps are in poms\n\nIssue: SPR-15167"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/63106e7ffb5bc103ef18d1674bcba3a7cf1d3f40", "message": "Fix dependencyMangement plugin config\n\nApply the dependency management plugin to all projects\nDo not use Maven-style exclusion semantics\n\nIssue: SPR-15162"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21490285", "body": "@rstoyanchev As discussed\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21490285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28875208", "body": "I don't think so. @rstoyanchev found the problem as he was preparing for last week's SpringExchange and asked me to take a look.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28875208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327156617", "body": "> Concretely that means that handler methods declaring an Object return value type and returning a String or Resource value won't be handled anymore by respectively by CharSequenceEncoder and ResourceEncoder. These handler methods need to declare explicitly the return value type.\r\n\r\nI don't have a better answer to suggest, but if I were to encounter this behaviour I'd be rather surprised and my instinct would be that it's a bug.\r\n\r\nWhat is it in WebFlux that prevents the annotation-based model from behaving as it does in Spring MVC? I'd like to understand that difference as, without understanding it, I don't think I'll be able to do much other than feel surprised that it doesn't work as MVC does.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327156617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327165954", "body": "Thanks, @poutsma and @sdeleuze. I think I'm getting there now.\r\n\r\n> Current behavior which sometimes use the concrete value type when available and otherwise use the declared one is confusing IMO since Foo and Single<Foo> will resolve diffrent type even if semantically very close.\r\n\r\nI, too, think that's confusing. FWIW, I would definitely prioritise fixing this, and having consistent behaviour within WebFlux, over being somewhat consistent with MVC.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327165954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344589495", "body": "I've built this locally and run the previously failing Spring Boot test against it. The test now passes.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/344589495/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21654422", "body": "@herau As I said on Gitter, I'm working on a fix for this now.\r\n\r\n@jhoeller I believe I have this in hand. I'll let you know if I hit any problems.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21654422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11154947", "body": "Making this a `testCompile` dependency (see lines 581-583) looks right as the dependency is only used in `src/test/java` and the build is successful with this change in place. However, it may warrant further review.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11154947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "olivergierke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30316b16e5c98c78d8050e26903d99622bff2405", "message": "Add explicit anchor to discussion about constructor VS. setter injection\n\nThis commit adds an Asciidoc anchor to the section on different injection\nstyles to be able to link to the discussion as official recommendation.\n\nCloses gh-1681"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3430506", "body": "Will do and report back. Will there be a 3.0.8 actually? If so it would be cool if this one would be back-ported :).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3430506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3443837", "body": "Confirmed to solve Spring Data issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3443837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5712352", "body": "Updated commit message according to the contributors guidelines. /cc @cbeams \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5712352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9605323", "body": "Changed the added `ElementType`s on `@Autowired` and `@Value` from `TYPE` to `ANNOTATION_TYPE`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9605323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10641233", "body": "The main test case for the newly introduced functionality is in `GenericTypeWiringTests`. All other test cases are unit test for lower level components like the newly introduced `TypeInformation` API. /cc @cbeams @jhoeller @philwebb\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10641233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21518369", "body": "I've just rebased the code onto current master and got the test cases working again. /cc @philwebb @jhoeller\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21518369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21810088", "body": "/cc @philwebb, @cbeams, @jhoeller\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21810088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368953", "body": "I've filed [SPR-10993](https://jira.springsource.org/browse/SPR-10993) and J\u00fcrgen's apparently already at it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812866", "body": "Does that make sense? There's probably no `SqlMapAccountDao` for JPA, right? `SqlMap` is a iBatis concept/term IIRC.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812908", "body": "If it's just dummy code `JpaAccountDao` should work here. I thought that line was actually referring to real code living somewhere, so I thought it was an odd change.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812983", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "vlsi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/659f13be1c98265d4317b53c7c0827d0aee85be1", "message": "Avoid creating message arguments to Assert.isABC calls\n\nSee https://github.com/spring-projects/spring-framework/commit/67f184293b94c076b0474231f739a74f42d5ffa8"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fabriziocucci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13f942fab726783c8c69a36d07bfc29df650d62a", "message": "Fix indentation in doc\n\nCloses gh-1676"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kazuki43zoo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8c623c8a429afe83d3d6fed008eec0a9a45d29e2", "message": "Supports ConversionService on SingleColumnRowMapper\nIssue: SPR-16483"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1412c2c5770392cbb4512e56be60fe5e53b3252d", "message": "Fix sample code in WebFlux chapter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/df793392fd0651f00b9815442fa8d608ceb50e7b", "message": "Fix javadoc of AbstractHandlerMapping#setPathMatcher"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/053ac64101362fe749bf4138e96df0eff9d1e2f2", "message": "Add \"Problem Details for HTTP APIs\" media types\n\nSee RFC 7807: Problem Details for HTTP APIs\n\n* application/problem+json\n* application/problem+xml\n\nIssue: SPR-15110"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9f229283fb4690aee347d22aae5f4625a8576746", "message": "Support lazy initialization of BindingResult when customize a MessageCodesResolver\nIssue: SPR-15009"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/124f2128faa6b36898c0d51ad4c8d7bef4304fd6", "message": "Detect invalid configuration for autoGrowCollectionLimit on DataBinder\nIssue: SPR-14888"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1528", "title": "Allow to override a validation message using bean validation message code", "body": "I've fixed [SPR-15967](https://jira.spring.io/browse/SPR-15967).\r\nPlease review this.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1330", "title": "Add test for AbstractRoutingDataSource", "body": "I've added test case class for the `AbstractRoutingDataSource`.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1217", "title": "Support a code that start with objectName to the string argument", "body": "I've fixed [SPR-14840](https://jira.spring.io/browse/SPR-14840).\nPlease review this.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1215", "title": "DateTimeFormat annotation supports YearMonth and MonthDay", "body": "I've fixed [SPR-14839](https://jira.spring.io/browse/SPR-14839).\nPlease review this. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/906", "title": "Improve explanation for how to customization default error page of the Servlet Container", "body": "I've improved explanation for how to customization default error page of the Servlet Container.\n- Specify a valid version of servlet container explicitly (3.1+).\n- Change to use the `LinkedHashMap` instead of `HashMap`. The `LinkedHashMap` can be keep order of items. (I think more better that use `LinkedHashMap` in sample code)\n- Change a JSON format(indent , white-space). In addition, this format is same with `indentOutput` of Jackson.\n\nI have signed and agree to the terms of the Spring ICLA.\n\nThanks.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/885", "title": "Add a PropertyEditor that convert to null for empty string", "body": "Issue: SPR-13561\n\nFor details, refer to the [SPR-13561](https://jira.spring.io/browse/SPR-13561).\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/858", "title": "Improve description about return value types of handler method in reference doc", "body": "Improve as follows:\n- Add an WebAsyncTask\n- Add a CompletionStage\n- Trivial improvement\n\nPlease review.\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/762", "title": "Override properties using system properties in PropertyOverrideConfigurer", "body": "Please review.\nFor detail, refer to https://jira.spring.io/browse/SPR-12853.\n\nI have signed and agree to the terms of the Spring Individual Contributor License Agreement.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48100043", "body": "sorry.. \ncommit log is wrong.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48100043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48105147", "body": "Sorry.. \nI want to refactoring.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48105147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48237521", "body": "withdraw.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48237521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77671979", "body": "Modify a JIRA link.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77671979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77672403", "body": "@sbrannen \n\nI rebased.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77672403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77732989", "body": "Thank you for merging.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77732989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/86562269", "body": "@jhoeller \n\nThanks for resolving.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/86562269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99066660", "body": "Thank you for merging!\n\nI want to backport to 4.1.x. is OK ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99066660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99068101", "body": "Thank you for merging!\n\nI want to backport to 4.1.x line and 3.2 line. is OK ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99068101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99070625", "body": "i agree. thank you\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99070625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99070882", "body": "I agree. thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/99070882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117243238", "body": "@sbrannen Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/117243238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131438753", "body": "@sbrannen , thanks for review comments.\nI've reflected review comments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131438753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192296508", "body": "This PR is fails on `BindTagTests#bindTagWithoutBean()`. Therefor this PR withdraw.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192296508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200306086", "body": "@bclozel \n\nThanks for merging!!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200306086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223020744", "body": "Hi @jhoeller , thanks for fix & polishing !! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/223020744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245010734", "body": "@snicoll, i vote @sbrannen 's comment.\n\nExplanation for xml based configuration at under about 10 lines says as follow:\n\n> Below is the web.xml equivalent of the above code based example:\n> \n> ``` xml\n> <web-app>\n>     <servlet>\n>         <servlet-name>example</servlet-name>\n>         <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n>         <load-on-startup>1</load-on-startup>\n>     </servlet>\n> \n>     <servlet-mapping>\n>         <servlet-name>example</servlet-name>\n>         <url-pattern>/example/*</url-pattern>\n>     </servlet-mapping>\n> \n> </web-app>\n> ```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245010734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309176791", "body": "I've resolved a conflict.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309176791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17748723", "body": "Hi @rstoyanchev , is this code correct ? \n\nI think it should modify as follow:\n\n``` java\nthis.ignoreExpectOrder = ignoreExpectOrder;\n```\n\nWhat do you think ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17748723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17751791", "body": "Thanks for fix \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17751791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19997207", "body": "Hi @rstoyanchev \r\n\r\nBy this change, we cannot handle a POST request using the view controller .\r\nIf possible, i want to know a reason that applied this changes to the view controller (i clouldn't found a reason into JIRA tickets).\r\n\r\nThanks.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19997207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20017506", "body": "@rstoyanchev \r\n\r\nThanks for replaying !!\r\n\r\n> I suppose no strong reason, just the expectation that on a POST you do need controller logic to handle form data, data binding, validation, etc.\r\n\r\nI agree with your opinion basically.\r\nIn my application, i used the the view controller mechanism to specify a forwarding path( instead of redirect path) when authentication processing of Spring Security is failing, However this configuration has not been worked on Soring 4.3.\r\nI'll have a  plan to fix  to use a handler method instead of view controller.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20017506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/55683810", "body": "4.4 -> 4.3 ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/55683810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/139111056", "body": "I think better to use `InputStreamSource` instead of `InputStreamResource`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/139111056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/139111668", "body": "Why check `ResponseEntity` only? I think should check the `InputStreamSource` too.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/139111668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lonre": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b8c67345808117c4a74a78c955441b515eae1912", "message": "Fix typo\n\nCloses gh-1569"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "poutsma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fb61af1882a3bb3ce1dcca7f1194c7162a2c3048", "message": "Allow \"release on close\" for DataBuffer.asInputStream\n\nThis commit introduces DataBuffer.asInputStream(boolean), that can\nrelease the underlying buffer when the stream is closed.\n\nFurthermore, this commit adds additional javadoc.\n\nIssue: SPR-16444"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/609f173ebc7c14afa2cb2fb27a6446e06ec510d5", "message": "StringDecoder shouldn't chop off strings randomly\n\nIssue: SPR-16337"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b47491695e7f5ad1d047c7156dd362c4f529630d", "message": "Support array of scalar values in Jackson2Tokenizer\n\nIssue: SPR-16407"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0befc60c8fe4896e9c918cfc474ef83e3de0669d", "message": "Renamed DataBufferUtils/DataBufferFactory.compose to join\n\nIssue: SPR-16365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/646fcc5c2faf3df5905f7b1b5a62b4abd97a5d34", "message": "Support Custom Headers for Multipart Async Data\n\nThis commit makes sure there is no custom Content-Disposition header\nbefore setting one automatically.\n\nThis commit also adds a headers(Consumer<HttpHeaders>) method, so that\none can user the nicer methods of HttpHeaders, as opposed to basic\nstrings.\n\nIssue: SPR-16376"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5520e730f11e26c42e83eef2089690112e5b7417", "message": "DataBufferUtils.read should not take input stream/channel as parameter\n\nFixed by creating `Callable`-based variants, as explained in the JIRA\nissue.\n\nIssue: SPR-16403"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c53c8bfc5a7ff963e1762edfcbb6425fc5088035", "message": "Set 304 status on ServerResponse when ETag/LastModified match\n\nThis commit checks the Etag/LastModified headers on the incoming\nrequest, and sets a 304 Not Modified status with no body when they\nmatch, by delegating to ServerWebExchange.checkNotModified.\n\nIssue: SPR-16348"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c211e3998b619d72752ffc2d8db89ebf62e5bd51", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61d330f805910deceeffae069b73792c70ee8ca0", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e39bf87b07a84247a8edc7a8e50451743fe7ff45", "message": "Add reference docs for DataBufferUtils.compose\n\nIssue: SPR-16365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/67e7c784e8097ee60db783a55bf1ab1ad1de529a", "message": "Use DataBufferUtils.compose and remove writeAggregator\n\nUse DataBufferUtils.compose instead of writeAggregator to combine\nmultiple data buffers into one, as the write aggregator would not work\nwhen the initial data buffer did not have enough capacity to contain\nall subsequent buffers.\n\nRemoved writeAggregator, as it is no longer needed.\n\nIssue: SPR-16365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/384a399fd25bf7a9bd7dff239d31e9e7fbbbad24", "message": "Add DataBufferUtils.compose\n\nAdded a utility method that composes data buffers into a single buffer.\nDepending on the `DataBuffer` implementation, the returned buffer may be\na single buffer containing all data of the provided buffers, or it may\nbe a true composite that contains references to the buffers.\n\nIssue: SPR-16365"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5adaa1030c219f791b114e3278c3f76acc8e2f7e", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f7bf6460aa7ed8c755410a7d0763ce237f2cf944", "message": "Reverted signature change on fromMultipartData\n\nReverted back from `MultiValueMap<String, Object>` to\n`MultiValueMap<String, ?>`"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8a129ef3daf8a28728314905d4b843a4129d9a87", "message": "Use write aggregator from DataBufferUtils\n\nThis commit uses the newly introduced write aggregator from\nDataBufferUtils throughout WebFlux.\n\nIssue: SPR-16351"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69ccba30e978351acdee12b990f989e97b8a72b0", "message": "Introduce write aggregator to DataBufferUtils\n\nAs a consequence of dropping CompositeByteBuf (see prior commit),\nDataBuffers fluxes that are aggregated with Flux.reduce(BiFunction) are\nnow required to be released, as the composite no longer holds a\nreference to subsequent data buffers.\n\nFor this purpose, DataBufferUtils now has a writeAggregator that can be\nused with Flux.reduce, and that released the subsequent buffers\nproperly.\n\nIssue: SPR-16351"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e6893da9714cf557a36691dcefc8209bfff1e98d", "message": "Remove use of CompositeByteBuf in NettyDataBuffer\n\nPrior to this commit, NettyDataBuffer had a optimization in\nwrite(ByteBuf...), where it used a CompositeByteBuf to hold the original\nand the parameter buffer.\nUnfortunately, this procedure has nasty consequences when splicing\nbuffers (see https://stackoverflow.com/a/48111196/839733).\n\nAs of this commit, NettyDataBuffer stopped using CompositeByteBuf, and\n simply does ByteBuf.write().\n\nIssue: SPR-16351"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6c3a64578c10dd4e6fed933864f1721cf35203ae", "message": "Move ResolvableType from HttpEntity to PublisherEntity\n\nThis commit moves the ResolvableType field from HttpEntity to\nPublisherEntity, a new entity type defined in MultipartBodyBuilder.\nWith this change, the scope of the ResolvableType is limited to\nmultipart-related code, instead of becoming part of the complete\nHttpEntity hierarchy.\n\nIssue: SPR-16307"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7035ee7ebb63f14e8947fe8c014bded3adfc028f", "message": "Support Publishers for multipart data in BodyInserters\n\nThis commit uses the changes in the previous commit to support\nPublishers as parts for multipart data.\n\nIssue: SPR-16307"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f23612c3a3e5624051b8653389ca1a192c5b4875", "message": "Add ResolvableType to HttpEntity for multipart Publishers\n\nThis commit adds a ResolvableType field to HttpEntity, in order to\nsupport Publishers as multipart data. Without the type, the\nMultipartHttpMessageWriter does not know which delegate writer to use to\nwrite the part.\n\nIssue: SPR-16307"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b8201f48fd7d3c5650e14b1443414f1c9665cbfe", "message": "Typo in example code in spring reactive reference document\n\nIssue: SPR-16300"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8e253a316d7f9f6d76fc343b96d747e1d056a0ae", "message": "Support top-level scalar values in Jackson2Tokenizer\n\nIssue: SPR-16166"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4d405271a028b3807979167a7881266f147525a", "message": "Document DataBuffer/PooledDataBuffer and codecs\n\nIssue: SPR-16156"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8223809455a5eabf85321ead0df483a3f29e7755", "message": "Use existing CompositeByteBuf if possible\n\nThis commit uses the existing CompositeByteBuf if present, as opposed\nto creating a new composite for every call to\nNettyDataBuffer.write(ByteBuf...)\n\nIssue: SPR-16180"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/db0066919727f6299f673682b3417648f71fd219", "message": "Allow to set cookies in ServerResponse\n\nIssue: SPR-16121"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/af2e296ff307287b29ae3361b898bc73b73e7b55", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2d1f87501c043fc58200ce4d1b0f544f8ad04619", "message": "Add MultipartBodyBuilder\n\nThis commit introduces the MultipartBodyBuilder, a builder for multipart\nform bodies.\n\nIssue: SPR-16134"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a58002a5dee402fc005b5544d41e5f83b3bbea34", "message": "Chained API for form and multipart data in BodyInserters\n\nIssue: SPR-16133"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/49787493a6ca3726df62c4aff85023e8fa589ed3", "message": "Proper Undertow PooledByteBuffer release\n\nThis commit changes the way Undertow's PooledByteBuffers are dealt with.\nPreviously, these buffers where closed as soon as all data was read. As\nof this commit, the UndertowServerHttpRequest returns PooledDataBuffers\nfrom getBody(), so that the buffers are released when release() is\ncalled."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6457a1556ebb7584a32301870738a56a537fc530", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/40a6fba4432c6842b93644b9eaa87d3d43ede882", "message": "Allow to change URL/method in ClientRequest.Builder\n\nThis commit exposes the ClientRequest's URL and HttpMethod fields via a\nsetter, so that they can be changed more easily in a request that was\ncreated via ClientRequest.from(ClientRequest).\n\nIssue: SPR-16093"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c7a15260d631371481519098432795e8808ec9bc", "message": "Various DataBuffer improvements\n\nThis commit introduces various improvements in DataBuffer:\n\n- DataBuffer now exposes its read and write position, as well as its\ncapacity and writable byte count.\n- Added DataBuffer.asByteBuffer(int, int)\n- DataBufferUtils.read now reads directly into a DataBuffer, rather than\ncopying a ByteBuffer into a DataBuffer\n- TomcatHttpHandler now reads directly into a DataBuffer\n\nIssues: SPR-16068 SPR-16070"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/24ca8ccf5ac9582dbc6d2f15848c4f8398a3a96f", "message": "WebTestClient.mutate() should not impact future .mutate() invocations\n\nIssue: SPR-16059"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/faa74988c4a5d296cd631af2746f4b681a04b0f8", "message": "WebClient.mutate() should not impact future .mutate() invocations\n\nBefore this commit, when adding filters to a builder obtained via\n`WebClient.mutate()`, the filters were added both to the original client\nas well as the mutated builder. This commit fixes that.\n\nIssue: SPR-16059"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69945f4185e57c61ae9dbb3f12b612de046339c9", "message": "WebClient throws ClassCastException for bodyToMono(ParameterizedTypeReference)\n\nPrior to this commit, the `WebClient` always throws a `ClassCastException`\nwhen an error occurs in `bodyToMono(ParameterizedTypeReference)``, and\nnot the expected exception, as set up by `onStatus`\n\nIssue: SPR-16025"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f9e1913e0d6fdbfb092ff14d17e84275d8926bd3", "message": "Added docs on customizing WebClient\n\nIssue: SPR-15778"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1a3cc3df94c0f8e504f36e9be8e6f2ded5a12750", "message": "Moved fromServerRequest to ServerRequest itself\n\nThis commit moves WebFluxUriComponentsBuilder.fromServerRequest to the\nServerRequest interface itself.\n\nConsequently, the WebFluxUriComponentsBuilder is removes itself, as it\ncontained no other methods.\n\nIssue: SPR-15953"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4fbf86e5ce3ffcee0912008492d75268763ed647", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2841ef5d05a1070e517c5c2b03f6e9ee60983b0f", "message": "Introduce RouterFunction visitor\n\nThis commit introduces a visitor for router functions\n(RouterFunctions.Visitor), allowing to iterate over all the components\nthat make up a router function.\n\nThis commit also introduces a ToStringVisitor, which creates a nicely\nformatted string for use with toString().\n\nIssue: SPR-15711, SPR-15711"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a7617a264120ca486d7c92bb4255ec1ac3ef986e", "message": "Introduce WebFluxUriComponentsBuilder\n\nThis commit introduces the WebFluxUriComponentsBuilder, with a single\nmethod that creates a UriComponentsBuilder for a ServerRequest. More\nmethods to be added by @rstoyanchev.\n\nIssue: SPR-15953"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2fb3eeba6f1dc9c76c548adb2b12132057c4b282", "message": "Introduce ServerRequest.methodName()\n\nThis commit introduces a methodName() method to the ServerRequest,\nreturning the String name of the method. This method is useful for\nnon-standard HTTP methods."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2510db0683249dbc47d50dc9b87817bfb95749ab", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e70210a1da994ea52e1ade30b052bea9e12e9d1d", "message": "Introduce ForwardedHeaderFilter for WebFlux\n\nThis commit introduces a ForwardedHeaderFilter for WebFlux, similar to\nthe existing Servlet version. As part of this the\nDefaultServerHttpRequestBuilder had to be changed to no longer use\ndelegation, but instead use a deep copy at the point of mutate().\nOtherwise, headers could not be removed.\n\nIssue: SPR-15954"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a0784bea8efdc7fc9b629adfcd8aba749fe94c7", "message": "Test HTTPS in ReactorServerHttpRequest URI\n\nThis commit adds a test for ReactorServerHttpRequest.getUri() to check\nwhether it returns a HTTPS scheme when configured with SSL.\n\nIssue: SPR-15931"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec6475a24c91b3e90e21b09d41a241e2e72f93a0", "message": "Expose scheme in ReactorServerHttpRequest URI\n\nThis commit determines fixes ReactorServerHttpRequest.getUri() so that\nit includes a URL scheme.\n\nIssue: SPR-15931"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/02a2c400c77cf7ea1d867e933654b56da09856ed", "message": "Move URL transform methods from ServerHttpResponse to ServerWebExchange\n\nThis commit moves `encodeUrl` and `registerUrlEncoder` from\nServerHttpResponse to ServerWebExchange.\n\nIt also renames `encodeUrl` to `transformUrl` and `registerUrlEncoder`\nto `addUrlTransformer` to make it clearer that these methods do not\nperform actual URL encodings (i.e. they do not replaceinvalid\ncharacters).\nThe `add` prefix (instead of `register`) makes it clearer that each\nfunction is added in addition to the previous one.\n\nIssue: SPR-15924"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/14af5d941a70f43906c4e6787f83fa48e276bfaf", "message": "Javadoc\n\nIssue: SPR-15912"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5394cc0c63471e7de8399c97ea201bbc0a4dd4d4", "message": "WebClientException should allow access to status code of the response\n\nThis commit changes the WebClient so that it now throws a\n`WebClientResponseException` for `ResponseSpec.bodyTo`. This newly\nintroduces exception contains the status code, headers, and body of the\nresponse message.\n\nAs a consequence of the above, we had to change `onStatus` so that the\n`exceptionFunction` now returns a `Mono<Throwable>` rather than a\n`Throwable`, which it was before. The Mono allows for asynchronous\noperations, such as reading the contents of the body.\n\nIssue: SPR-15824"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0b3ea405ab8a93610286c1de1a393c3fa9cbe071", "message": "Remove BodyInserters.fromServerSentEvent variants\n\nRemoved superfluous `fromServerSentEvent` variants from `BodyInserters`,\nas their functionality can also be obtained by passing a stream of\nstrings or POJOs (to be encoded as JSON) to\n`fromPublisher(Publisher, Class)}`, and specifying a `text/event-stream`\nContent-Type.\n\nIssue: SPR-15826"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1d86c9c3d128f64afa51460e3ed7900963755cfd", "message": "Use Credentials object instead of 2 attributes for Basic Authentication\n\nThis commit changes the usage of two separate attributes (username and\npassword) into one: a single `Credentials` object.\nAdditionally, the attributes key under which the credentials are stored\nis changed to be specific to Basic Authentication, in order to allow for\nother sorts of authentication later.\n\nIssue: SPR-15764"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eb435f594779f9b31e754ee698a375b6bda17292", "message": "Add ParameterizedTypeReference method variants to ServerRequest/ServerResponse\n\nThis commit changes adds overloaded `ParameterizedTypeReference `\nvariants to body-related methods in `ServerRequest` and\n`ServerResponse`.\nIt also adds a single PTR variant to ClientRequest, which was missing\nbefore.\n\nIssue: SPR-15817"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f3975776d4b55f5b49fc504fea3f6e3c09a3238a", "message": "Use list of HttpMessage[Reader|Writer]s instead of CodecConfigurer\n\nThis commit changes all consumers of CodecConfigurer to consume a `List`\nof HttpMessageReaders or HttpMessageWriters instead of consuming the\nServer- or ClientCodecConfigurer directly.\n\nIssue: SPR-15816"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d5da823482134cc447a7023ad223a661cc50e348", "message": "Fix race condition for AsynchronousFileChannel\n\nThis commit fixes an issue in the DataBufferUtils.write variant that\ntakes a AsynchronousFileChannel.\n\nIssue: SPR-15798"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c802827f0f4bd9ef18658645492b7bcc653fd2b6", "message": "Change write methods to return Flux<DataBuffer>\n\nThis commit changes the write methods to return `Flux<DataBuffer>`\ninstead of `Mono<Void>`, giving access to the original buffers,\nso that they can decided whether the buffers need to be closed or not.\n\nIssue: SPR-15726"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/83051b06b81bbd449ca484c576085e48a783af27", "message": "Add write methods to DataBufferUtils\n\nThis commit adds an overloaded write method to `DataBufferUtils`. There\nare three parameter variants: `OutputStream`, `WritableByteChannel`, and\n`AsynchronousFileChannel`.\n\nIssue: SPR-15726"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/805b7159b0264f99a45095c55a481581c86c0fd4", "message": "Add ParameterizedTypeReference variants to bodyTo[Mono|Flux], toEntity[List]\n\nThis commit introduces overloaded variants of `bodytoMono`,\n`bodyToFlux`, `toEntity`, and `toEntityList` that take a\n`ParameterizedTypeReference`. It also adds similar methods to\n`WebClient.ResponseSpec`.\n\nIssue: SPR-15725"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6329ccb3272d21033937c9394a698162f8e1b778", "message": "Read-Only HttpHeaders only created when necessary\n\nThis commit introduces a boolean `readOnly` flag in `HttpHeaders`,\nwhich is used to check if creating a new `HttpHeaders` instance is\nnecessary in `readOnlyHttpHeaders`."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f4180eb35940ec41e49c290ec94c7f52974d0b7a", "message": "Removed faulty test"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d6c102d1b89b374e637639453d57c97b0f3f42b3", "message": "Add apply method to WebClient.Builder\n\nThis commit introduces an apply method to `WebClient.Builder`, allowing\nusers to make multiple changes to the builder in one consumer.\n\nIssue: SPR-15743"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9a3b863c4a30fb080ad98ac0f2494f70658101f", "message": "Move toEntity(List) from WebClient.ResponseSpec to ClientResponse\n\nThis commit moves `toEntity(Class<T>)` and `toEntityList(Class<T>)`\nfrom WebClient.ResponseSpec to ClientResponse. The main reason for doing\nso is that the newly introduced `onStatus` method (see\n2f9bd6e075facbf13edd629a98da88115c130b98) does not apply to these two\nmethods, and the result would be confusing. Also, `ClientResponse` and\n`ResponseEntity` represent the same data: status code, headers, and a\nbody.\n\nIssue: SPR-15724"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/51e02c2911f211ecb21ca64c0a4671d5f6bf176a", "message": "Add status-based error filter\n\nThis commit introduces an ExchangeFilterFunction that throws an\nexception given a HTTP status predicate.\n\nIssue: SPR-15724"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2f9bd6e075facbf13edd629a98da88115c130b98", "message": "Add local  error handling in WebClient.retrieve\n\nThis commit introduces a way to customize the WebClientExceptions, as\nthrown by WebClient.ResponseSpec.bodyTo[Mono|Flux]. The first\ncustomization will override the defaults, additional customizations are\nsimply tried in order.\n\nIssue: SPR-15724"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2ea693bd8325380a202adfec76ed9981ef165934", "message": "Add ClientRequest.attribute(String)\n\nThis commit adds the attribute(String) convenience method to the\nClientRequest class. It also adapts the Basic Authentication filter to\nuse it."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e11bb17aa6fa43f56a6fa392665363b2faf34652", "message": "Change ServerRequest.attribute(String) to return Object\n\nThis commit changes `ServerRequest.attribute(String)`` to return\n`Optional<Object>` instead of `Optional<T>`, where `T` was infered\nfrom a type parameter."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f2d2b21d91f57e3f53508a9933cc8fd156d0a36", "message": "Avoid required uri when using WebTestClient w/ base url\n\nThis commit makes the `uri` step of the WebTestClient optional, so that\nusers who have specified a base URL during WebClient config do not need\nto provide an empty one (i.e. `url(\"\")`).\n\nIssue: SPR-15695"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3232cb626094123ff69ad4053b0a92f8cc768dad", "message": "Avoid required uri when using WebClient w/ base url\n\nThis commit makes the `uri` step of the WebClient optional, so that\nusers who have specified a base URL during WebClient config do not need\nto provide an empty one (i.e. `url(\"\")`).\n\nThe basic idea of this fix is that the HTTP method methods in WebClient\n(`get`, `post`, etc.) should be able to \"bypass\" the uri stage, and skip\nstraight to defining headers, or even doing an exchange or retrieve\n(i.e. call methods on `RequestHeaderSpec` or `RequestBodySpec`).\n\nI have accomplished this by adding two new composed interfaces:\n`RequestHeadersUriSpec` and `RequestBodyUriSpec`.\n`RequestHeadersUriSpec` extends from the existing `UriSpec` and\n`RequestHeaderSpec`, while `RequestBodyUriSpec` extends from `UriSpec`\nand `RequestBodySpec`. These types are returned from the HTTP methods\n(`get`, `post` etc). The `uri` methods on these types return a plain\n`RequestHeaderSpec` and `RequestBodySpec` (i.e. types without the `uri`\nmethods), so that you can call `uri` once only.\n\nIssue: SPR-15695"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4588628491889369119d73e801bdd7481ae13d3", "message": "Reflect recent Reactor changes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b0ab84657b712aac59951420f4e9d696c3d84ba2", "message": "Disable \"failOnServerError\" in ReactorClientHttpRequest\n\nThis commit disables the \"failOnServerError\" feature on the\n`HttpClientRequest`, as wrapped by ReactorClientHttpRequest. 5xx errors\nare supposed to be dealt with in the WebClient, not in the lower-level\ncomponents.\n\nIssue: SPR-15739"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0065bc5ee55d347de8632f1b3d79e18d6ad4db4e", "message": "Support null query param values in ServerRequest.queryParam(String)\n\nIssue: SPR-15740"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/625855c00f1a670724bcf3cf524b3a24e0e6f1a0", "message": "Add comment indicating path segment combining in UriComponents.normalize\n\nIssue: SPR-15734"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/74b4c028819c67b90d4d06d352d3083d91d8a3f8", "message": "Add ClientRequest attributes\n\nThis commit introduces client-side request attributes, similar to those\nfound on the server-side. The attributes can be used, for instance, for\npassing on request-specific information to a globally registered\nExchangeFilterFunction.\n\nThe client request builder, as well as WebClient.RequestHeadersSpec and\nWebTestClient.RequestHeaderSpec, add methods for adding a single\nattribute, as well as manipulating the entire attributes map.\n\nThe client request itself adds a accessor for the (immutable) attributes\nmap.\n\nThis commit also introduces a new variant of the basic authentication\nfilter in ExchangeFilterFunctions. This variant takes the username and\npassword from well-known attributes.\n\nIssue: SPR-15691"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de9196bbdcf5b6dc8eacc3133263ade3469305db", "message": "Change from flatMap to map\n\nChanged main tokenbuffer decoding loop from using flatMap to using map."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f8589d9ecaa72181bba70b446844d40f58660b4f", "message": "Return MultiValueMap from ServerRequest.queryParams instead of List\n\nThis commit changes ServerRequest.queryParams from returning a\nList<String> given a String name, to returning a\nMultiValueMap<String, String>, which gives more flexibility."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2ccbc55ffdffc08d8f64f0b195b38e602cca7ce1", "message": "Use PathContainer in web.reactive.function.server\n\nThis commit uses the newly introduced `PathContainer` and `RequestPath`\nsupport in the functional web framework. It exposes the path container\nas property in `ServerRequest`, and uses that in the path-based\n`RequestPredicates`."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/930f0f1760ea9169f4f706aa0ba937052260a771", "message": "Add ServerRequest.cookies()\n\nThis commit introduces a cookies() method on ServerRequest, returning a\nMultiValueMap<String, HttpCookie>.\n\nIssue: SPR-15715"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/621df7c978aa18e6e2336289ca6b462d29790f75", "message": "Add ByteBuf leak detection @Rule\n\nThis commit introduces a JUnit rule that detects ByteBuf leaks in\nsubclasses of AbstractDataBufferAllocatingTestCase."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/58a5e7f17b860b39b5a3676e5287397998f8e313", "message": "Proper closing of resources\n\nThis commit introduces a `doFinally` block that properly signals the\nend of input for the non-blocking XML and JSON parsers."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9d7b8503d0ee420cfa1ba1a2ffda0500b61042bb", "message": "Delay DataBuffer release until stream is closed\n\nThis commit changes the release of data buffers from a finally block\ninto a `doFinally()` lambda on the returned `Flux<XMLEvent>` stream.\n\nIssue: SPR-15707"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33f99910dd08f9f596987ade96d0398ae9d7f7ba", "message": "Change spaces to tabs in build.gradle"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/31e0e537500c0763a36d3af2570d5c253a374690", "message": "Leverage Jackson non-blocking parser\n\nThis commit introduces the Jackson2Tokenizer as a replacement for the\nJsonObjectDecoder. The latter was dropped because of its complexity, and\nhard dependency on Netty's ByteBuf.\n\nThe new Jackson2Tokenizer leverages the new non-blocking JSON parser,\nusing it to parse the incoming data buffers into TokenBuffers, each\ntoken buffer representing one JSON object. As with JsonObjectDecoder,\nit also supports streaming individual JSON array elements.\n\nIssue: SPR-14528"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b778f94a072b1d0a4c976512d262213f6c71b21d", "message": "Made ObjectMapper field private with protected accessor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4f39edc9059bf3896e996224003599261412c004", "message": "Fix initialization issue with headers in DefaultWebClient\n\nThis commit fixes a lazy initialization issue in\n`headers(Consumer<HttpHeaders>)`.\n\nIssue: SPR-15657"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0a4d3c14dbdf3b0ddb03ab1362753e34158858d9", "message": "Jackson2JsonDecoder should support empty JSON array\n\nBefore this commit, the Jackson2JsonDecoder was not able to decode an\nempty JSON array (`[]`). After this commit, it is.\n\nIssue: SPR-15685"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a95cf0731774661e7639a39abac195f991a2f2f6", "message": "Add WebTestClient.mutate()\n\nThis commit introduces a WebTestClient.mutate() method,\nreturning a WebTestClient.Builder.\n\nIssue: SPR-15657"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3b1d46b3bac74802d264cd57c4a7e685f377c91e", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50fc8f4e327078e512f7eb25538a36f7a58a1801", "message": "Support Void response body type in WebClient\n\nThis commit adds support for Void response body types in the WebClient,\nboth when using `exchange` with a response.bodyToMono(Void.class), as\nwell as using `retrieve` with `toEntity(Void.class)`.\n\nIssue: SPR-15679"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a0597d612d68d6e948c748da8d36621639d1b7f", "message": "Replace WebClient.filter with Builder.filter\n\nThis commit replaces the WebClient.filter method with\nWebClient.Builder.filter. The reason for this change is that filters\nadded via WebClient.filter would be applied in the opposite order of\ntheir declaration, due to the compositional nature of the method,\ncombined with the immutable nature of the WebClient.\nWebClient.Builder.filter does keep the order of the filters, as\nregistered.\n\nFurthermore, this commit introduces a WebClient.mutate() method,\nreturning a WebClient.Builder. This method allow to add/remove filters\nand other defaults from a given WebClient.\n\nIssue: SPR-15657\n\nAdd WebClient.Builder.addFilter\n\nAdd Consumer-based headers and cookies methods to builders.\n\nAdd WebClient.mutate"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7018804e8451fa935e8715754de43a3ef62fa5c8", "message": "ServerRequest.path() should return raw path\n\nAfter this commit, ServerRequest.path() returns the raw, unencoded path,\nas that is expected by the PathPatternParser."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/424bc75fb11bb8e3198239aa9444b77d940e51c4", "message": "Remove headers(HttpHeaders)\n\nThis commit removes the headers(HttpHeaders) method on ClientRequest and\nServerResponse, in favor of headers(Consumer<HttpHeaders>), which is\nmore flexible."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9bf82dc18f8f6b9c83e60b6e972306611526d492", "message": "Add addAll(MultiValueMap)\n\nThis commit introduces a new method for MultiValueMap: addAll, which\nadds all values of a given map (cf putAll, which replaces existing\nvalues)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7085a303822cda26d60e627ffefdaeaf693c5523", "message": "Improve capacity calculcation in DefaultDataBuffer\n\nThis commit improves the capacity calculation for the DefaultDataBuffer,\nso that the capacity typically doubles instead of improving by the\nminimal required amount.\n\nIssue: SPR-15647"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5e954dcba030b607d40adf09a5f936ea27cac036", "message": "Use ParameterizedTypeReference in public-facing WebFlux APIs\n\nThis commit changes the use of `ResolvableType` to\n`ParameterizedTypeReference` in all public-facing WebFlux APIs. This\nchange removes the necessity for providing the parameterized type\ninformation twice: once for creating the `ResolvableType`, and once for\nspecifying a `BodyExtractor`.\n\nIssue: SPR-15636"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf66f452837a44b066433bba48b08a337742e722", "message": "Support overriding, removing headers in ClientRequest\n\nThis commit adds two Consumer based methods to ClientRequest that allow\nfor direct manipulation of the underlying headers or cookies map. As\nsuch, these methods can be used to override or remove existing entries.\n\nIssue: SPR-15635"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/510436bae9a9c2611b95a5b7b0d9be779dbbe742", "message": "Copy header values instead of header lists in DefaultClientRequestBuilder\n\nThis commit changes the `headers(HttpHeaders)` method in\nDefaultClientRequestBuilder so that it copies the individual header\nvalues instead of using the `List<String>` value directly. The reason\nfor this change is that the list of values can be immutable, and adding\nadditional values after that could result in\nUnsupportedOperationExceptions."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ea54270e1bbaf32d0b2956ca6c9cab43437dbf6", "message": "Allow for null query parameter values in ServerRequest\n\nWith this commit, ServerRequest allows for `null` values in query\nparameters, treating them as empty values instead.\n\nIssue: SPR-15609"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/850408455381a6b0b5d40f76276448f0d241e69d", "message": "Add package-info.java to mock.web.reactive.function.server"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7894efdd1e97c26d609c8698284cf12a24d212f1", "message": "Allow for null values in ExtractingResponseErrorHandler.hasError\n\nThis commit fixes the implementation of\nExtractingResponseErrorHandler.hasError to allow for null values,\nindicating an override of the behavior inherited from\nDefaultResponseErrorHandler.\n\nIssue: SPR-15544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4b0dedc45e2f82d59c8414996f34520be1760698", "message": "Add ExtractingResponseErrorHandler\n\nThis commit introduces ExtractingResponseErrorHandler: an alternative\nResponseErrorHandler that uses `HttpMessageConverter`s to convert HTTP\nerror responses to `RestClientException`.\n\nIssue: SPR-15544"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/42d1ba080da0fa41fc1635c6ba827d9cd0014121", "message": "Copy MockServerRequest to spring-test\n\nThis commit copies the MockServerRequest to the spring-test module, in\nthe mock.web.reactive.function.server package.\n\nIssue: SPR-15530"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a5b94f3a776c16ce3eb09ac92a9a7907910f5ff5", "message": "Use HttpRequest.getMethodValue\n\nThis commit uses the newly introduced HttpRequest.getMethodValue in\nthe webflux module.\n\nIssue: SPR-15545"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/630fc194f0ae4ae261fb67269302610a655187ad", "message": "Add HttpRequest.getMethodValue\n\nThis commit introduces a new method in HttpRequest:\n`String getMethodValue`, which returns the HTTP method as a String.\nFurthermore, HttpRequest.getMethod() has been given a default\nimplementation using this String value in combination with\n`HttpMethod.resolve`.\n\nIssue: SPR-15545"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/31d1e26c95ebaf179a20ffe9b1328a21857954c3", "message": "Use List<T> instead of Supplier<Stream<T>>\n\nThis commit changes all methods that return `Supplier<Stream<T>` to\nreturn `List<T>` instead. This includes the HandlerStrategies, but also\nBodyInserter.Context, BodyExtractor.Context, and ServerResponse.Context.\n\nThe reason for this change is that most of the strategies have some sort\nof order, where more specific message readers - for instance - come\nbefore generic ones. Such an ordering can only be enforced through a\nList.\n\nIssue: SPR-15578"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/01e3561db91a06979d9fede8bfaa02519360d6a7", "message": "Support RouterFunction in @EnableWebFlux\n\nThis commit removes the RouterFunctions.toHandlerMapping method, in\nfavor of native support for RouterFunctions in @EnableWebFlux\nconfiguration classes.\n\nIn order to accomplish this, the HandlerStrategies components has been\nrepurposed to only be used for the \"bare-bones\" HttpHandler, while the\n(newly introduced) RouterFunctionMapping uses the strategies as exposed\nthrough WebFluxConfigurationSupport.\n\nFurthermore, this commit also introduces support for testing\nRouterFunctions without resorting to an application context.\n\nIssue: SPR-15536"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba39697f2e568b27a97b2bf195b6b8c99ae1ce95", "message": "Expose Principal in ServerRequest\n\nThis commit exposes the Principal in ServerRequest.\n\nIssue: SPR-15552"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f4cf55cb2b189d0071eff6834a3f7080ce0b000a", "message": "Add support for WebFilter and WebExceptionHandler\n\nThis commit adds support for configuring `WebFilter` and\n`WebExceptionHandler` instances in HandlerStrategies. It also drops the\n\"native\" support for `ResponseStatusException`s, in favor of the\n`ResponseStatusExceptionHandler`, which is registered by default.\n\nIssue: SPR-15518"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ad9cf994201f3d4330a6a2ed5c8547cc2ea43eaf", "message": "ResourceHandlerFunction returns EntityResponse\n\nThe ResourceHandlerFunction now returns an `EntityResponse<Resource>`\n(instead of a `ServerResponse`), so that filters can inspect/change the\nreturned Resource."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8db4b2f7ed4b3a8efb8eadf630ae8693048a641b", "message": "Remove synchronized block around PathPatternParser\n\nRemoved the synchronized block around PathPatternParser, since it is\nnow thread-safe."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f0f3df5cc05be50335498fece59fbfc53fe825f7", "message": "Use PathPattern in PathResourceLookupFunction"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/64c0ec3d5e0fe8a39fee7def55587a19ec5293ed", "message": "Add test for combining @Controller with RouterFunctions\n\nThis commit adds a test for combining RouterFunctions with a\n@Controller.\n\nIssue: SPR-15521"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6490419764525fa427368d4068eb1e1de676060", "message": "Add ServerHttpResponse.addCookie method\n\nThis commit adds a `addCookie(ResponseCookie)` method to the reactive\n`ServerHttpResponse` interface.\n\nIssue: SPR-15523"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4525c6a5371dbae3a618b54d2b0393d97a1529b7", "message": "Add support for Flux<Part> in BodyExtractors\n\nThis commit adds a `toParts` method in `BodyExtractors`, returning a\nBodyExtractor<Part>."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf7dfc7b17bf988d46fd3b2916f175d641afc591", "message": "Properly close channel in SynchronossPart\n\nThis commit properly closes the opened channels in the SynchronossPart,\nand also makes sure that the entire contents is copied, not just the\nfirst batch."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ed4bd43cacebf2d001a1d0b66b67ad5141499be1", "message": "Add writableChannel to WritableResource\n\nThis commit introduces a `writableChannel()` method to\n`WritableResource`, defaulting to `Channels.newChannel`, but with\noverrides for file-based resources."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea85431ac55acf9e3b8dfca51879727c99c2d5f7", "message": "Add error filter to WebClient integration test\n\nThis commit adds a `WebClient` integration test that shows how to use\n`ExchangeFilterFunction`s for error handling purposes.\n\nIssue: SPR-15403"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a8c99c9ce6773a1b192d4b60969241b2370ac4f", "message": "Consistent handling of 4xx/5xx status codes in WebClient\n\nThis commit changes the handling of 4xx/5xx status codes in the\nWebClient to the following simple rule: if there is no way for the user\nto get the response status code, then a WebClientException is returned.\nIf there is a way to get to the status code, then we do not return an\nexception.\n\nIssue: SPR-15486"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e7d6fc4d14145e80b61ca9d214da3ebe7a54310", "message": "Rename WebClient.ResponseSpec.bodyToEntity[List] to toEntity[List]\n\nThis commit renames `WebClient.ResponseSpec.bodyToEntity` to `toEntity`\nand similarly renames `WebClient.ResponseSpec.bodyToEntityList` to\n`toEntityList`. In both cases, the `body` prefix was dropped because the\nreturn value contains more than the body.\n\nIssue: SPR-15486"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b9dbac7b2cc09f086ce6256744a8a31e5d0fd90e", "message": "Rename ServerResponse.BodyBuilder.body to syncBody\n\nThis commit renames the `body(Object)` on ServerResponse to\n`syncBody(Object)`. The reason for this is that the original method\nname clashed with the `body(Publisher)` method in the Kotlin extension.\n\nThe new name nicely reflects the synchronous nature of the method,\n making it less appealing than the `Publisher`-based `body` method.\n\nIssue: SPR-15467"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03861df0ba95e9981d09b26e18192a240cf5ca40", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d1e099029388795c31c76eeb1a963332599f6652", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30f61e0c0709c66c9171b0be0210555447a8f55e", "message": "Add body(Object) method to ServerResponse.BodyBuilder\n\nThis method introduces a new body(Object) to ServerResponse, a shortcut\nto body(BodyInserters.fromObject(Object)).\n\nNote that in the implementation of the method, an `instanceof` check is\nperformed to make sure that the passed argument is not a `Publisher`,\nas users should call `body(Publisher, Class)` for sending a reactive\ntype.\n\nThis Publisher-check is also done in the `WebClient`, for the same\nreasons.\n\nIssue: SPR-15461"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b897f96e0ff61ec8965ebd51bbad0d5b798e5e7f", "message": "Use PathRemainingMatchInfo in RequestPredicates\n\nThis commit uses the newly introduced PathRemainingMatchInfo\n(316a680577a392464c6da60d989b00acd2a5e472) in path-based\nRequestPredicates.\n\nIssue: SPR-15419"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc279d839bab457561caf2b5c677e53f10d06c99", "message": "Use refactored CodecConfigurer\n\nThis commit changes the `HandlerStrategies` and `ExchangeStrategies`\nbuilders to use the `CodecConfigurer` for configuring Decoder|Encoder\nand HttpMessage[Reader|Writer]. Other classes that use `CodecConfigurer`\nhave also been changed to reflect the refactoring to interfaces.\n\nThis commit also removes the ExchangeStrategies methods that take an\napplication context, as it was too naive approach to simply look up\nevery message reader and writer in the context.\n\nIssue: SPR-15415, SPR-15435"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/908d16904fc9906c781711e79e8f3017a915427a", "message": "Refactor CodecConfigurer\n\nThis commit refactors the CodecConfigurer, with it's subtypes\nServerCodecConfigurer and ClientCodecConfigurerTests, into interfaces\ninstead of classes."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac27dbea4bc71c233514e37a9c3a3083fb3d0433", "message": "Use ServerCodecConfigurer in HandlerStrategies\n\nThis commit changes the `HandlerStrategies` builder to use\n`ServerCodecConfigurer` for configuring Decoder|Encoder and\nHttpMessage[Reader|Writer]. Note that the configurer is not exposed\ndirectly, but wrapped so that `HandlerStrategies` can keep on returning\n`this` for a proper builder pattern.\n\nThis commit also removes the HandlerStrategies methods that take an\napplication context, as it was too naive approach to simply look up\nevery message reader and writer in the context.\n\nIssue: SPR-15415"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/870e1897b659e20e32f8b0446bbd5e8c79116561", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/82e864b217797e660b79bab47844b1e1af214230", "message": "Polishing\n\n- Renamed `defaultCodec` to `defaultCodecs`, and `customCodec` to\n`customCodecs`\n- Added `@Override` annotations where necessary\n- Fixed non-parameterized usage for parameterized types."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e556aacceedd90947c746e0bcd03cbf6f6993b35", "message": "Use PathPattern.getPathRemaining in WebFlux fn\n\nThis commit uses the newly introduced\n`PathPattern.getPathRemaining(String)` in the functional web framework.\nWith this change, all path predicates can be used for nested router\nfunctions, so the `pathPrefix` predicate is no longer required and has\nbeen removed.\n\nIssue: SPR-15336"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa3573b2bc7f5d9dae887beebe455d4afb0b81f8", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/99474376e6fc5406324becaeb4a8df1fe210ccae", "message": "Server HttpMessage[Reader|Writer] in WebFlux fn\n\nThis commit introduces support for the server-side methods on\nHttpMessageReader and HttpMessageWriter. It does so by introducing an\nOptional ServerHttpRequest in BodyInserter.Context, and an Optional\nServerHttpResponse in BodyExtractor.Context. On the client-side, these\noptionals return Optional.empty(); on the server-side, they return the\nrespective server-side messages.\n\nIssue: SPR-15370"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e6b4edc757b9470db5238155a958622b1d005baa", "message": "Simplify access to response body in WebClient\n\nThis commit makes a change to WebClient in oder to facilitate getting\nthe response body as a `Mono<Object>` or `Flux<Object>` without having\nto deal with `ClientResponse`.\n\nSpecifically, this commit:\n\n - Adds `RequestHeaderSpec.retrieve` methods, next to `exchange`, that\n return the response body (and not a `ClientResponse`). Two convenience\n methods return the response body as `Mono` or `Flux`.\n - Adds ClientResponse.toRequestEntity to convert the ClientResponse\n into a RequestEntity.\n\nIssue: SPR-15294"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/118f33aedad84e9f8a01e4db983545d18fdd1fc3", "message": "Request body improvements in WebClient, WebTestClient\n\nThis commit makes changes to WebClient and WebTestClient in oder to\nlimit setting the body according to HTTP method and also to facilitate\nproviding the request body as Object.\n\nSpecifically, this commit:\n\n - Moves methods that operate on the request body to a RequestBodySpec\n in both WebClient and WebTestClient, and rename them to `body`.\n These methods now just *set* the body, without performing\n an exchange (which now requires an explicit exchange call).\n - Parameterizes UriSpec in both WebClient and WebTestClient, so that\n it returns either a RequestHeadersSpec or a RequestBodySpec.\n\nIssue: SPR-15394"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/81430caa43849a6f1c319a4b0a379cfc8e6b69c8", "message": "Deprecated AsyncRestTemplate and related types\n\nThis commit deprecates `AsyncRestTemplate` and related types\n(`AsyncClientHttpRequestFactory` etc.) in favor of the Spring 5.0\n`WebClient`.\n\nIssue: SPR-15294"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a287e67992b06eb32a5dfa87ca9cdde49968d819", "message": "Introduce 'useRegisteredExtensionsOnly' property in classes using MediaTypeFactory\n\nThis commit introduces a `useRegisteredExtensionsOnly` property that\nindicates whether classes that use the `MediaTypeFactory` for supplying\ndefault media types can do so.\n\n - In classes that were introduced in Spring 5.0, the\n `useRegisteredExtensionsOnly` property takes the place of the\n `useJaf` property that was removed in 0aaa652\n - In classes that existed before Spring 5.0, the\n `useRegisteredExtensionsOnly` property is added in addition to the\n deprecated `useJaf`, the latter delegating to the former, but with\n flipped behavior.\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e2aa880301230eb8fa94290a7872f771fd36b2f3", "message": "Return null from MockServletContext.getMimeType for unknown type\n\nServletContext.getMimeType() returns `null` for unknown mime types; not\n`application/octet-stream`.\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fd1db57e058c240d6e953940b9147d233c9d85fe", "message": "Change MediaTypeFactory to return Optional\n\nThis commit changes the `MediaTypeFactory` to return\n`Optional<MediaType>` (instead of a plain `MediaType`) for the\n`getMediaType` methods.\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/290e9bea14ee017519194254f763ea3572310734", "message": "Change MethodNotAllowedException to use HttpMethod\n\nChanged the MethodNotAllowedException to use HttpMethod, instead of\nStrings."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/722e23066c7740e3231d25df0417115058c5445f", "message": "Allow for subclassing ServerResponse\n\nThis commit changes `ServerResponse` and subtypes to use properties\ninstead of fields during response rendering. This allows for overriding\nthese methods in a response subclass."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/24f7f26fe613a0067c81922021ef32e590e3b7f2", "message": "Add RenderingResponse.from\n\nThis commit introduces RenderingResponse.from(RenderingResponse),\nallowing for easier response filtering."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/54abda5e9ec5ba218dfe753dca399f678fd1e739", "message": "Add RenderingResponse integration test\n\nThis commit adds an integration test for the `RenderingResponse`."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d17b99fe37a945436254e99d90c45b413ba73323", "message": "Fix ofResponseProcessor signature\n\nThis commit changes the `HandlerFilterFunction.ofResponseProcessor`\nmethod signature to return `Mono<ServerResponse>`, to better cooperate\nwith response builders (which all return a `Mono`)."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d414718467edf9edaed3a036f378c06117d224f6", "message": "Update MockServletContext to MediaTypeFactory\n\nThis commit changes the `MockServletContext.getMimeType` method to use\n`MediaTypeFactory` instead of JAF. It also adds a `addMimeType(String,\nMediaType)` method to customize the mime types returned from said\nmethod.\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0aaa6528dcb07ef76049cf74a4d6aecb4ee6c610", "message": "Remove JAF references\n\nThis commit updates the main code base to conform to the dropped JAF\ndependency in MediaTypeFactory. Specifically, it\n\n - Removes JAF detection (JAF_PRESENT constants)\n - Deprecated useJaf properties, with no direct replacement.\n - Updated docs to remove JAF references, in favor of MediaTypeFactory.\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f0a43e5d5c506a2ffec5654dac6886e23d940dda", "message": "Drop JAF dependency from MediaTypeFactory\n\nThis commit drops the Java Activation Framework dependency from the\nMediaTypeFactory, in favor of parsing our own `mime.types` file, which\nwas obtained from Apache HTTPD.\n\nIssue: SPR-14908"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1940f8cf899f91d07c6c49ca7979612ff7e9c290", "message": "Support ResponseStatusException in ServerResponse\n\nThis commit adds support for the ResponseStatusException in the\n`ServerResponse.writeTo` method.\n\nIssue: SPR-15344"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45aa1edf871e7e86cbd9523146a94b911d944736", "message": "Fix Undertow zero-copy-support\n\nThis commit fixed the exception that occurs when a larger file is\ntransfered using zero-copy on Undertow.\n\nIssue: SPR-15343"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1dc38660e5abb1b3eeb1108564a43b627ccb5478", "message": "Support ResponseStatusException in WebFlux fn\n\nThis commit introduces support for the ResponseStatusException in the\nfunctional web framework.\n\nIssue: SPR-15344"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/63118c1ea76a7cb5e893ae24495dd1e49d157db5", "message": "Add DataBufferUtils.read w/ AsynchFileChannel\n\nThis commit adds an overloaded DataBufferUtils.read method that operates\non a AsynchronousFileChannel (as opposed to a ReadableByteChannel, which\nalready existed). This commit also uses said method in the Resource\nencoders, if the Resource is a file."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c5351fdbef0edb1ce5a51620f48f8606a0dbc28c", "message": "Add WebFlux fn reference documentation\n\nAdded WebFlux fn documentation, as a separate document for now."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/56d669f849d4b4caaef97b93385c873ac810ecd9", "message": "Add permanent/temporary redirect to ServerResponse\n\nThis commit adds the temporaryRedirect(URI) and permanentRedirect(URI)\nstatic creation methods to ServerResponse."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7582adc0bc4d9456465338f92198fbcbdc84151a", "message": "Fix trailing slash in nested path\n\nThis commit adds a trailing slash to the nested path if the request path\nalso ends with a slash. For instance, given the request \"/foo/bar/\", and\nnested path pattern \"/foo/**\", we expect the nested path to be \u201c/bar/\u201d,\nnot \u201c/bar\"."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8450c69497dc04e14b5a01484ab087a6c9a1a4c4", "message": "Add ListBodySpec.size implementation\n\nAdded implementation for WebTestClient.ListBodySpec.size()."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4221a344dc799314b2a4711838e6f1a152811ec1", "message": "Treat empty Accept header as \"*/*\"\n\nThis commit changes the `accept` RequestPredicate so that it treats an\nempty `Accept` header as having the value `*/*`, as per the HTTP spec."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1efcf26559ff1416f54bc4a7d6793d4726bf827a", "message": "Defer evaluation of right-hand route in composed route"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9ab8bd046c6485d4d314901cc3279e97cfaa1018", "message": "Improved logging in functional web framework\n\nThis commit improves predicate and route logging in the functional web\nframework."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/63f261155ac29d721f7984e02761b32a612973b8", "message": "Fixed build by suppressing unchecked warnings"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0922943c125b49649f029619550d8bdb426ff477", "message": "Rename RouterFunctions.subroute() to nest()\n\nThis commit renames the `RouterFunctions.subroute()` method to `nest()`, to\nbetter represent what it does.\n\nIssue: SPR-14954"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1d589eb6396531674d36cc80a62c912b5e004cb3", "message": "Add pathPrefix predicate\n\nAdded the `pathPrefix` predicate that tests the start of the request\npath against a given pattern.\n\nIssue: SPR-14954"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36db6b2753c829b2a7893d98a7c8c7f8809d328e", "message": "Removed json(), html() and xml() predicates\n\nRemoved `json()`, `html()` and `xml()` from `RequestPredicates`, since\nthey were confusingly named and would also require a counterpart that\nreads the request `Content-Type` instead of the `Accept` header."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bb9d3e16805d927fc3c67a5c55065a0c14965651", "message": "Renamed RouterFunction composition methods\n\nRenamed `RouterFunction.andSame()` to `and()`, and `and()` to\n`andOther()`. The reason for this change is that we can expect most\nRouterFunctions to be parameterized over ServerResponse, and thus it\nmakes sense to use the shortest composition method (`and()`) for\ncomposing router functions of the same type.\n\nWhen a user composes different response types, such as composing a\n`RouterFunction<RenderingResponse>` with an\n`RouterFunction<EntityResponse<?>`, the `andOther` method is to be used,\nbut this is a less common scenario."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fcaf42507a2e8750a5e7318ba6c9a0ec68f872bb", "message": "Synchronise PathPatternParser access\n\nThis commit adds a synchronized block around the PathPatternParser,\nsince it is not thread-safe."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/febed19bf477321c4546f6c2c251eba73605727d", "message": "Use PathPatternParser in function.server\n\nUse new PathPatternParser instead of PathMatcher in\nweb.reactive.function.server."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a31429be2b8c5b890040f0fee3cccbe97e5d8d48", "message": "Add json, html, and xml RequestPredicates\n\nAdded RequestPredicate for JSON, HTML, and XML requests. All three tests\nfor their respective mime type in the Accept header, as well as checking\nfor a file extension."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dff9b3b85c5d62df3569ed60e8368c339cd02191", "message": "Expose BodyInserter in EntityResponse"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/45770d73ede714533741f97275996ea7a04a381a", "message": "Remove parameterisation from ClientRequest\n\nThis commit removes the parameterisation from ClientRequest, similarly\nto ServerResponse. Dropping the parameterisation facilitates a\nClientRequest.from method that also copies the body of the target\nrequest.\n\nSPR-15234 Work in Progress"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6dd0e6bfac8600c02e9ff431baaa8532b7ac6201", "message": "Reverse \"Correct generic type in BodyExtractor for form data\"\n\nThis commit reverses 9efa976d31a3d91cec8745a473aba89c6539135c, and adds\ncode comments to highlight why some Body[Inserter|Extractor] instances\nreturned from Body[Inserters|Extractors] use\nServerHttp[Request|Response] instead of using\nReactive[Input|Output]Message."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/11efbaead967bfb0ff6a9cbb749af98cfab6fdb3", "message": "Ignore JsonStreamingIntegrationTests\n\nIgnoring JsonStreamingIntegrationTests for now, @sdeleuze is aware of the need to fix."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/da4af6157e13943ac27b1da19f540bb254c49a8c", "message": "Added ClientResponse.cookies()\n\nAdded cookies() method on ClientResponse, that exposes the response\ncookies.\n\nIssue: SPR-15236"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2a512d7b9fa89467ead6968c9d34ca07d700e4d9", "message": "Introduce EntityResponse\n\nThis commit introduces the EntityResponse, an entity-specific subtype of\nServerResponse that exposes the entity itself."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7796c4db14a35b6d1b7a5977bda2565fd68a384b", "message": "Introduce RenderingResponse\n\nThis commit introduces the RenderingResponse, a template\nrendering-specific subtype of ServerResponse that exposes model and\ntemplate data."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/52e87cb425b79f33b2d638a081d66a6a944d8122", "message": "Rename WebClientOperations to WebClient\n\nThis commit makes the following changes:\n\n - Merge WebClient into ExchangeFunction. Static methods on WebClient\nhave been moved to the utility class ExchangeFunctions, similar to\nRouterFunctions operates on the server side.\n\n - Renamed WebClientOperations to WebClient.\n\n - Renamed WebClientStrategies to ExchangeStrategies"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/69c16f3821354c9b0732687825cb902375649c5a", "message": "Add headers in InterceptingClientHttpRequest\n\nThis commit *adds* the \"intercepted\" headers to the ClientHttpRequest,\nas opposed to replacing them, which is what happened before this commit.\n\nIssue: SPR-15166"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b77e03b1e0af83ddbd5eee3ee2bcd0f6b3b26cfe", "message": "Map to UnsupportedMediaTypeStatusException\n\nThis commit maps the UnsupportedMediaTypeException, used by both client\nand server, to a server-side UnsupportedMediaTypeStatusException in the\nfunctional web framework."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b39ebfd6e8c04a10defd1c8c32dbef2f471be07a", "message": "Added FormHttpMessage[Reader|Writer] to functional config\n\nThis commit adds the FormHttpMessageReader and FormHttpMessageWriter to\nthe server and client default configuration respectively."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b341ae5e29a5a23f850e4c4b49cb7db122f9510", "message": "Moved UnsupportedMediaTypeException\n\nMoved UnsupportedMediaTypeException next to Body[Inserters|Extractors],\nas that is where they are used. This move should have been done as part\nof the inserter and extractor move, but was forgotten."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13a7563ddde4e66fcd5ebda84b9b08ccf552e017", "message": "Added form support to Body[Inserter|Extractor]\n\n - Added BodyInserter for MultiValueMap form data in BodyInserters\n - Added BodyExtractor to MultiValueMap in BodyExtractors\n\nIssue: SPR-15144"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/88c5f5981f29a8815b9521adf49408780a12933b", "message": "Added DataBuffer Encoder/Decoder\n\nThis commit adds a DataBuffer Encoder and Decoder, and uses it in\nthe annotation-based processing model.\n\nNote that these codecs are not used in the functional processing model,\nsince the BodyInserter/BodyExtractor already have methods for\nwriting/reading DataBuffers.\n\nIssue: SPR-15148"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d724644588b77e807ce16b13ae3cd36208807055", "message": "Expose WebSession on ServerRequest\n\nThis commit exposes the WebSession on ServerRequest."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36a6580638a15c7d7426de8b364c8ee333d0abe9", "message": "Remove copyright notice from package-info.java files."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/97558ab4de28b1579eafcda56c32ae832a59c1a7", "message": "Move Body[Inserter|Extractor] to web.reactive.function"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aac20b3fd1cf643eb1a999e684be2936203b2735", "message": "Move functional web framework to web.reactive.function.server"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/aa8f5315265b83895effd7038ac7f4772ed6a6f1", "message": "Move WebClient to web.reactive.function.client"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/582e625fcf340f76964888e93d1ba19df5742f2b", "message": "Allow HandlerFunction to return Mono<ServerResponse>\n\nThis commit makes it possible for handler functions to return\nasynchronous status codes and headers, by making HandlerFunction.handle\nreturn a Mono<ServerResponse> instead of a ServerResponse. As a\nconsequence, all other types that deal with HandlerFunctions\n(RouterFunction, HandlerFilterFunction, etc.) had to change as well.\n\nHowever, when combining the above change with method references (a very\ntypical use case), resulting signatures would have been something like:\n\n```\npublic Mono<ServerResponse<Mono<Person>>> getPerson(ServerRequest request)\n```\n\nwhich was too ugly to consider, especially the two uses of Mono. It was\nconsidered to merge ServerResponse with the last Mono, essentialy making\nServerResponse always contain a Publisher, but this had unfortunate\nconsequences in view rendering.\n\nIt was therefore decided to drop the parameterization of ServerResponse,\nas the only usage of the extra type information was to manipulate the\nresponse objects in a filter. Even before the above change this was\nsuggested; it just made the change even more necessary.\n\nAs a consequence, `BodyInserter` could be turned into a real\n`FunctionalInterface`, which resulted in changes in ClientRequest.\n\nWe did, however, make HandlerFunction.handle return a `Mono<? extends\nServerResponse>`, adding little complexity, but allowing for\nfuture `ServerResponse` subtypes that do expose type information, if\nit's needed. For instance, a RenderingResponse could expose the view\nname and model.\n\nIssue: SPR-14870"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30bd3d873682734502554a25db398906215c81f1", "message": "Allow use of WebFilters in RouterFunction\n\nThis commit changes RouterFunctions.toHttpHandler to return\nHttpWebHandlerAdapter (instead of HttpHandler), so that WebFilters and\nWebExceptionHandler can be applied to it.\n\nIssue: SPR-14979"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9e720330366bafa3ebeaed3cd99e5bca710308d5", "message": "Add WebClient.filter method\n\nThis commit introduces a new method on WebClient: filter, which takes an\nfilter function, and returns a (filtered) WebClient.\n\nIssue: SPR-14961"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/079eca9f63784c1159f5c1a327665097807fe005", "message": "Add status code check to bodyTo[Mono|Flux]\n\n- Add 4xx/5xx status code check to ClientResponse.bodyToMono and bodyToFlux.\n- Removed WebClient.retrieveMono and retrieveFlux.\n\nIssue: SPR-14977"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/136b33bc4a7ae4bf43730e9b17f35c30be30058e", "message": "Allow serving static files from RouterFunctions\n\nThis commit adds the ability to serve Resources (static files) through a\nRouterFunction. Two methods have been added to RouterFunctions: one that\nexposes a given directory given a path pattern, and a generic method\nthat requires a lookup function.\n\nIssue: SPR-14913"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/735e288d465ca36ae1eeccbd8a4d044d7bd3ad50", "message": "Add DataBuffer BodyInserter/BodyExtractor\n\nAdded a BodyExtractor for Flux<DataBuffer>, and a BodyInserter for\nPublisher<DataBuffer>\n\nIssue: SPR-14918"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/34c6c9ffc27bcfc2138a7dd3c76ddd7a3dfe1453", "message": "Merge pull request #1243 from violetagg/write-issue\n\n* SPR-14941:\n  Fix NPE in ServletServerHttpResponse.ResponseBodyProcessor.write"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dbe81bef52e1bcaf802663d2bb3236c69f922512", "message": "Add PATCH method operation to RestTemplate\n\nThis commit adds a HTTP PATCH operation to the RestTemplate:\npatchForObject. As with most operations, there are three variants:\nvarargs, Map, and URI based.\n\nIssue: SPR-14857"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6de062d198a0a00861a7c89c304f53dd32b76033", "message": "Fix RouterFunction.andRoute()\n\nFixed RouterFunction.andRoute signature.\n\nIssue: SPR-14904"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8f844461a06503d09e1f2dae4907bb56a8071edc", "message": "Make HttpComponentsAsyncClientHttpRequest abortable\n\nThis commit aborts the HttpComponentsAsyncClientHttpRequest whenever the\nreturned Future is canceled.\n\nIssue: SPR-14845"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7b469f9c6248fcaa522ea2492317dfaf115836c2", "message": "Improve WebClient error handling\n\nThis commit introduces two new `WebClient` methods: `retrieveMono` and\n`retrieveFlux`, both of which offer direct access to the response body.\nMore importantly, these methods publish a WebClientException if the\nresponse status code is in the 4xx or 5xx series.\n\nIssue: SPR-14852"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c96badc794856afa9bd3aec7637b37daa9a95a23", "message": "Add ExchangeFilterFunction.ofRequestProcessor and ofResponseProcessor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/20dec61d0425d034baea738fb044fc8b5e28c4b3", "message": "Refactored BodyInserters\n\nThis commit introduces a couple of changes to BodyInserters:\n\n- Refactored writeWithMessageWriters into BiFunction\n- BodyInserters.fromResource now uses ResourceMessagewriter from context\n- BodyInserters.fromServerSentEvents now uses SseHttpMessageWriter from context"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/94930043fdcbd85d0aa4db1a4e61c175a0390e82", "message": "Added MediaType.TEXT_EVENT_STREAM"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/08931950f479ed375619275d44a9e9c22f35d73f", "message": "Add byte[] encoder and decoder\n\nThis commit adds a ByteArrayDecoder and ByteArrayEncoder."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fa9cc1eb1a7755d3e3d91e3a89954e85b02b26f2", "message": "Add bodyToMono/bodyToFlux convenience methods\n\nThis commit adds a bodyToMono and bodyToFlux convenience method to\nClientResponse/ServerRequest, similar to the body(Publisher) method that\nis on ClientRequest/ServerResponse."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/59e43269890f724f5d3284a08bade5a61ee55505", "message": "Various improvements to web.reactive.function\n\nThis commit introduces the following changes to web.reactive.function:\n\n- Added RouterFunction.andRoute(), a combination of RouterFunction.and()\nwith RouterFunctions.route()\n- ServerRequest.pathVariable() returns String instead of\nOptional<String>. An exception is thrown if the variable is not present.\n- Added HandlerFilterFunction.andThen and HandlerFilterFunction.apply()"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7e907c1e830b68ffebe651b0898b013b26019052", "message": "Align web.reactive.function with WebClient\n\nThis commit changes web.reactive.function to reflect the introduction of\nthe new WebClient. Changes include:\n\n- Request -> ServerRequest\n- Response -> ServerResponse\n- FilterFunction -> HandlerFilterFunction\n- StrategiesSupplier -> HandlerStrategies"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0cfb6b37f2f1e9eedcc5d34673cf24205c5a5ff6", "message": "Align Reactive WebClient with web.reactive.function\n\nThis commit refactors the web client to be more similar to\nweb.reactive.function. Changes include:\n\n- Refactor ClientWebRequest to immutable ClientRequest with builder and\n\u00a0\u00a0 support for BodyInserters.\n- Introduce ClientResponse which exposes headers, status, and support\n\u00a0\u00a0 for reading from the body with BodyExtractors.\n- Removed ResponseErrorHandler, in favor of having a ClientResponse\n\u00a0\u00a0 with \"error\" status code (i.e. 4xx or 5xx). Also removed\n\u00a0\u00a0 WebClientException and subclasses.\n- Refactored WebClientConfig to WebClientStrategies.\n- Refactored ClientHttpRequestInterceptor to ExchangeFilterFunction.\n- Removed ClientWebRequestPostProcessor in favor of\n\u00a0\u00a0 ExchangeFilterFunction, which allows for asynchronous execution.\n\nIssue: SPR-14827"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc1926a8614920e1fcf2a952287d0773fe2e59ee", "message": "Moved BodyExtractor and BodyInserter to http.codec\n\nThis commit moves the web.reactive.function.[BodyInserter|BodyExtractor]\nto http.codec, so that they can be used from the client as well.\n\nFurthermore, it parameterized both inserter and extractor over\nReactiveHttpOutputMessage and ReactiveHttpInputMessage respectively, so\nthat they can be limited to only be used on the client or server."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/139eb9a580946e44769a57bc3a536ec16b15872e", "message": "Merge pull request #1210 from violetagg/grow-data-buffer\n\n* grow-data-buffer:\n  DefaultDataBuffer improvements"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b83a6daf4b7fe0be447adab015bde3c33c6f96c7", "message": "Javadoc"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/753bb854aa43fc8d6706633aee5864044952b53d", "message": "Rename Configuration to StrategiesSupplier"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/778ef026801533c6030d774d52504ef9a72cb48f", "message": "Rename BodyInsertor to BodyInserter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b6035ce9aeac24ac076ce430ae9dd920e233ec95", "message": "Refactor BodyInsertor\n\nRefactor BodyInsertor to expose insertion logic directly, rather than\nexposing a writer function and supplier."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3f5570641359b13c3d9139879c66500f31d007c5", "message": "Rename BodyPopulator to BodyInsertor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1bf75e330c932a140447d5b0f245c62cf49d3a67", "message": "Fix tangle\n\nFixed package tangle between w.r.f.RequestPredicates and w.r.f.support.RequestWrapper."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2b57a4d618a1e755ee9e362208291c0cde813e8d", "message": "Add WebApplicationInitializers for Web Reactive\n\nThis commit introduces three new WebApplicationInitializers for use with\nSpring Web Reactive:\n\n - The AbstractServletHttpHandlerAdapterInitializer registers a\n ServletHttpHandlerAdapter that wraps a user-provided HttpHandler.\n\n - The AbstractDispatcherHandlerInitializer registers a\n ServletHttpHandlerAdapter that wraps a DispatcherHandler (or any\n WebHandler). The handler is provided with an application context.\n\n - The AbstractAnnotationConfigDispatcherHandlerInitializer is a\n subclass of the above, creating an\n AnnotationConfigApplicationContext based no provided @Configuration\n classes.\n\nIssue: SPR-14713"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b703dbf6ab93b58ee842e863eb5b61bf6e73f361", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/de3e07b3203581242c701f86ffc49cd010d44fca", "message": "Move instance methods before static methods"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c57beef95edcd5b328fd73557a49f894f559904f", "message": "Rename RoutingFunction to RouterFunction"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/228a01b298658096f0e6d3108eca3c16a52ddee7", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8072497ce24062c78b48122495349179508d2d32", "message": "Extract body extraction logic in w.r.f\n\nThis commit refactors the response body extraction logic into a separate\nfunction: BodyExtractor. Standard populators can be found in\nBodyExtractors."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5e730408fdf2912b30a516242aa6d692ae628e7b", "message": "Extract body population logic in w.r.f\n\nThis commit extracts the response body insertion logic into a separate\nstrategy interface: BodyPopulator. Standard populators can be found in\nBodyPopulators."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91bde2e6b28758ba966db60ff61f6a3a31a0ddec", "message": "Refactor Router to RoutingFunctions\n\nThis commit refactors the Router into a RoutingFunctions class, by:\n\n  - Renaming the class :)\n  - Moving all Configuration logic into a separate, top-level\n  Configuration class with mutable builder."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c6a61e0d8538f5dc70aa9a21f366efba064e3702", "message": "Add Resource.readableChannel()\n\nAdded readableChannel() to Resource, which returns a\njava.nio.ReadableByteChannel. The default implementation uses\nChannels.newChannel() to create a channel based on what is returned from\ngetInputStream(). Subclasses have more effecient, file-based\nimplementations.\n\nIssue: SPR-14698"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3581089", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3581089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3585150", "body": "Patch applied. I've refactored the code somewhat, and put all package-scanning code in a separate, package-friendly class (ClassPathJaxb2TypeScanner).\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3585150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4518822", "body": "Looks good to me!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4518822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4590931", "body": "Indeed. Please make sure Java source files are in Latin-1 (ISO-8559-1) in future pull requests, not UTF-8. When in doubt, simply run the `native2ascii` tool that comes with the JDK over the source files. Quoting from the native2ascii man page:\n\n> The Java compiler and other Java tools can only process files that contain Latin-1 or Unicode-encoded (\\udddd notation) characters.  native2ascii converts files that contain other character encoding into files containing Latin-1 or Unicode-encoded charaters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4590931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4614432", "body": "I prefer to do the JiBX update, i.e. commit 86eba90\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4614432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4949704", "body": "I think it's a bit unfair to base judgment on uncommon scenarios. I would expect the vast majority of Spring Web Apps to only have one servlet. In that case, the typical extension of `AbstractDispatcherServletInitializer` would not need 6-7 overridden methods, and there be no need for the if-else block. It would look something like this:\n\n``` java\npublic class MyDispatcherServletInitializer extends AbstractDispatcherServletInitializer {\n\n    @Override\n    protected WebApplicationContext createServletApplicationContext(String servletName) {\n        StaticWebApplicationContext applicationContext = new StaticWebApplicationContext();\n        applicationContext.registerSingleton(\"controller\", MyBean.class);\n        return applicationContext;\n    }\n\n    @Override\n    protected String[] getServletMappings(String servletName) {\n        return new String[] { \"/*\"};\n    }\n\n    @Override\n    protected WebApplicationContext createRootApplicationContext() {\n        return null;\n    }\n\n}\n```\n\nOr if we'd use `@Configuration` classes, it would even be simpler:\n\n``` java\npublic class MyAnnotationConfigDispatcherServletInitializer\n        extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override\n    protected Class<?>[] getServletConfigClasses(String servletName) {\n        return new Class<?>[] {MyServletConfig.class};\n    }\n\n    @Override\n    protected String[] getServletMappings(String servletName) {\n        return new String[]{\"/*\"};\n    }\n\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class<?>[] {MyRootConfig.class};\n    }\n\n}\n```\n\nEven with two servlets it wouldn't be so bad as suggested, by using the Java 7 switch statement:\n\n``` java\npublic class MyAnnotationConfigDispatcherServletInitializer\n        extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override\n    protected String[] getServletNames() {\n        return new String[]{\"one\", \"two\"};\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses(String servletName) {\n        switch (servletName) {\n            case \"one\":\n                return new Class<?>[ MyServlet1Config.class];\n            case \"two\":\n                return new Class<?>[ MyServlet2Config.class];\n\n        }\n        return null;\n    }\n\n    @Override\n    protected String[] getServletMappings(String servletName) {\n        switch (servletName) {\n            case \"one\":\n                return new String[] { \"/one/*\"};\n            case \"two\":\n                return new String[] { \"/two/*\"};\n        }\n        return null;\n    }\n\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class<?>[] {MyRootConfig.class};\n    }\n}\n```\n\nIf you do have multiple servlets, and you do have to do a lot of customization on them, then the better option is to simply extend `AbstractContextLoaderInitializer` or implement `WebApplicationInitializer`, and roll your own.\n\nBut for the simple, common case, I'd say that the code shown above is a lot easier to deal with than having a separate `DispatcherServletRegistrar` and a dealing with a bunch of maps.\n\n@jhoeller and @cbeams, I'm interested to hear what you guys think.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4949704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4991762", "body": "I actually started out with a single servlet model, but found out it was trivial to add support for multiple servlets, by adding a servlet name parameter. \n\nSo if we'd only support one `DispatcherServlet`, the code wouldn't be much different than it is right now. The only difference would be the lack of said servlet name parameter in the template methods. And the the `getServletNames()` method would return a single string, instead of an array. As such, it wouldn't be much clearer; or less clearer, for that matter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4991762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5753062", "body": "The earliest I can take a look at it is Monday, because of a short holiday in taking Thursday and Friday. Let me know if that's good enough.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5753062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5843203", "body": "I've pushed a new version, incorporating all the changes suggested. I also tried to squash the commits into one, but failed. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5843203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6055970", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6055970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7866181", "body": "@cbeams, @jhoeller, please let me know what you think about these changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7866181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7928973", "body": "@philwebb It's an interesting proposal, but it does require the creation of a BeanInfo for each bean class before the factory  is even invoked. Since Introspector#getBeanInfo() is a rather expensive method call, I think it's better to keep things as is, and let the factory choose to either create a new BeanInfo from scratch, or wrap an existing one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7928973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8233008", "body": "@dmak I don't think @rstoyanchev meant extending the `StringHttpMessageConverter`, but rather delegating to it (i.e. have it as a field in the number converter).\n\nBesides that, I like the idea of using the conversion service for HTPP message conversion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8233008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8240537", "body": "@dmak Not sure why you would need to configure the delegate, as it can be hardcoded as far as I can tell. And if we're going to delegate to the string converter, I don't see why we would deprecate it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8240537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8293146", "body": "@rstoyanchev That's exactly how I'd do it as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8293146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8559930", "body": "@rstoyanchev Can you please review before merging?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8559930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8849773", "body": "@rstoyanchev Good catch. Yes, we should definitely reset the ssp once any of the hierarchical components are set. Feel free to change the code accordingly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8849773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20664313", "body": "@rstoyanchev Could you take a look at this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20664313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21486180", "body": "@rstoyanchev Could you please merge this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21486180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22387994", "body": "@rstoyanchev Could you take a look at this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22387994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22551649", "body": "@rstoyanchev Could you please merge this for 4.0 and the 3.2 branch? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22551649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22697585", "body": "@rstoyanchev and @jhoeller, could you please review this before merging? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22697585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23415390", "body": "Thanks for these changes! I wanted to ask you to take a look at AsyncRestTemplate when it was merged into master, but you beat me to it :).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23415390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23419954", "body": "> My pleasure, Arjen. I hope they prove of some use.\n\nThey sure do, thanks again!\n\n> I have a general question regarding contributions to Spring 4.0. Would it be permissible to make fairly minor albeit incompatible changes to some implementation classes, given this is going to be a major release? What is your API/ABI compatibility policy for Spring 4.0?\n\nWell, we certainly strive for backward compatibility. But exceptions can be made, especially if the reasons for these are good enough. Perhaps you can create a pull request, and Rossen and I can take a look at it. No guarantees though...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23419954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23479314", "body": "This is now merged, thanks!\n\nI did get rid of the HCProxies class, however. I don't think it was worth the extra hassle. Most (if not all) HttpClients implement CloseableHttpAsyncClient anyway.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23479314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481236", "body": "Reopened because I fscked up the merge earlier.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481762", "body": "Hey Oleg,\n\nCould you please move all your changes to a new pull request? With my earlier merge error and the additional changes you made later, this request is going to be very hard to merge.\n\nSorry for the inconvenience,\n\nArjen\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481910", "body": "And please, also use a different branch name than 'master'. That keep things a bit easier for me to work with.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481992", "body": "It wasn't your fault, it was mine.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23484247", "body": "Thanks, I will take a look later today.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23484247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23488584", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23488584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23785659", "body": "I will merge this myself; just wanted to have the pull request for administrative purposes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23785659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23785776", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23785776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43065185", "body": "Example use:\n\n``` java\nimport static org.springframework.http.ResponseEntityBuilder.*;\n\n@Controller\npublic class MyController {\n\n    @RequestMapping(value=\"/entity\", method=RequestMethod.GET)\n    public ResponseEntity<MyEntity> myBean() {\n        MyEntity entity = ...\n        long lastModifiedDate = ...\n        ResponseEntity<MyEntity> responseEntity = status(HttpStatus.OK).header(\"Last-Modified\", lastModifiedDate).body(entity);\n        return responseEntity;\n    }\n}\n```\n\nOr, using some of the convenience methods:\n\n``` java\nok().lastModified(lastModifiedDate).body(entity);\n```\n\nor\n\n``` java\ncreated(locationUri).build();\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43065185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43065199", "body": "Note that this PR only contains a builder for ResponseEntity objects; a PR for request entities is forthcoming.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43065199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43065238", "body": "Furthermore note that I decided to forego supporting the builder as a return type for @Controller methods, as requested by @philwebb in https://jira.spring.io/browse/SPR-11597. The reason being that this would require a ResponseEntityBuilder.ResponseHeadersBuilder return type for the controller method, which is ugly. And I don't do ugly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43065238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47892997", "body": "@rstoyanchev Indeed, since the HandlerExceptionResolver only accepts `Exception`, it makes sense to use that in `@ExceptionResolver` as well. Unfortunately, that would break backward compatibility, I think.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47892997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48189662", "body": "I left some line comments. If you'd like, @sdeleuze, we can do a Skype call this week to talk things through.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48189662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48448754", "body": "I left two comments, but the rest looks OK to me. I would talk to @jhoeller about the `AsyncResult` changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48448754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51463042", "body": "Looks good to me.\nOn 5 aug. 2014, at 16:56, S\u00e9bastien Deleuze notifications@github.com wrote:\n\n> @poutsma If you can, could you please review this PR ?\n> \n> This is mostly documentation changes, but it impacts also the API, and since we are just before 4.1.RC2, I would like to be 100% sure that my changes are fine. Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51463042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/54448423", "body": "I've done a TOC comparison on the original compared to the newly modulerized version. The page numbers match up.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/54448423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59921664", "body": "@rstoyanchev Could you please take a look at this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59921664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60363242", "body": "@rstoyanchev I've made the changes you requested:\n- The `Channel` is now opened asynchronously.\n- Now using a `ByteBufOuputStream` instead of byte[] buffering.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60363242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/86964977", "body": "@rstoyanchev I've updated this PR with a new approach. Please take a look.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/86964977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/104252496", "body": "Please do not merge before reading the relevant discussion at https://jira.spring.io/browse/SPR-11856.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/104252496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156075928", "body": "Looks good to me, except for a few minor comments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156075928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234215227", "body": "I did not sign the Contributor License Agreement. I would presume that my Pivotal employment would imply that ;).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234215227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234226079", "body": "> If it's already the case, then maybe it's a glitch and you should ping Rob about that.\n\nIt is.\n\n@rwinch: Any ideas why I have to sign the CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234226079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234268775", "body": "@rwinch Yes, I got it to work. Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234268775/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242362217", "body": "@bclozel: You've indicated the need for access to the Host header before. Can you please check this PR and see if it is to your liking?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242362217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242366694", "body": "@sdeleuze: Could you take a look at this PR? I renamed `SseEvent` to `ServerSideEvent` to make the name less redundant. It's also become immutable, having a builder to create new instances. I've also tried to re-align the class properties closer to the events described in the spec, so that `reconnectTime` becomes `retry`, and `name` becomes `event`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242366694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242371386", "body": "Ugh, guess I should go back on holiday. Let me come up with a new PR, this time changing the name to `ServerSentEvent`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242371386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242377670", "body": "My second attempt. @sdeleuze: could you take a look a this one instead of #1142?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242377670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243436604", "body": "I've added a `public static <T> Builder<T> builder(T data)` method.\n\nAs for the field renaming: the spec does not contain the concept of a `reconnectTime`, only a [`reconnection-time`](http://www.w3.org/TR/eventsource/#concept-event-stream-reconnection-time). `SseEmitter.SseEventBuilder` does use `reconnectTime`, unfortunately, but I don't think that alone is reason to stick with it. Also, `retry` is a lot shorter than `reconnectTime` or `reconnectionTime`, which is more important when used in a builder API.\n\nThe spec also doesn't contain the concept of a \"event name\"; the `event` field is used to denote the event _type_. If we change it, I feel we should change the methods that expose this field to be named `type`; not `name`.\n\nIn summary: the way `SseEmitter.SseEventBuilder` exposes SSE fields is supposed to reflect the \"full names\" of these properties (as defined in the spec), but unfortunately it doesn't do so. In the `ServerSentEvent` class, I'd rather use correct names than be consistent with an existing wrong names. I also believe it's a low easier for people to understand what SSE fields they are changing when their names reflect the data on the write, as opposed to the full name defined in the spec. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243436604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243437159", "body": "We could even consider deprecating `SseEmitter.SseEventBuilder#reconnectTime` in favor of a new `retry` or `reconnectionTime` method. Same for `name`, in favor of `event` or `type`. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243437159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243448989", "body": "> Since we are talking about an ServerSentEvent which is already an event, I would be in favor using type, event.event() would be confusing I think even if it makes sense in the serialized data. I have no strong opinion about reconnectTime versus retry versus reconnectionTime. \n\nWell, for consistency's sake, we should either use long names or field names, both as defined in the spec. So we either use `reconnectionTime` and `type`, or `retry` and `event`. Mixing them up would confuse people. I vote for using the latter, since the names are shorter and reflect the data on the wire.\n\nThe fact that it might be confusing to have an `event` field in a `ServerSentEvent` class is not that concerning to me. These names come straight out of the spec, so any confusion that might cause is not caused by us, but by the spec authors.\n\n> Since we are using a Durationtype unlike in `SseEmitter`, I think we could avoid the `Time` suffix. So I would be in favor of something like `retry`, `reconnect` or `reconnection`.\n\nThe latter two names cannot be found in the spec. I prefer to keep the class close to the spec.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243448989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243452103", "body": "Ok, I think we've come to the conclusion that short field names are the way to go. So I believe this PR can be merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243452103/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244056338", "body": "Merged in 18e491ac0a1f26b00ffc41683c46467b13a77b7f\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244056338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244371336", "body": "@rstoyanchev, @sdeleuze, @bclozel: I would love your input on this PR. The idea is to make it a bit easier for people to start a Reactor or RxNetty server from a `public static void main(String[])` method, but without creating a full-fledged abstraction like we did in `HttpServer`. I did not add it to the `ServletHttpHandlerAdapter`, as we can expect users to be more comfortable with the servlet deployment model.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244371336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244733163", "body": "I think we should do both have the Javadoc as well as the static method. Personally, I would prefer to call a static method than copy-paste code from Javadoc, especially when doing demos, as it's less error prone. But I can also see the reason why other people wouldn't.\n\nAs for the static method \"looking strange\" in the adapter: it's not that strange, as the method actually uses the adapter in its logic. I am happy to put the static method in another class, but I don't think there are better locations. Creating a new class for this seems overkill. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244733163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245533362", "body": "> For the contentType parameter and the charset there should be a default charset property in AbstractView and also in ViewResolverSupport so it can be configured conveniently. The default value should probably be UTF-8 rather than ISO-8859-1 as we don't need to stick to Servlet defaults and even the Servlet spec is discussing changes.\n\nOk, I will try and add those.\n\n> For ModelAndView do we really need a builder? The current ModelAndView seems perfectly adequate with its constructors and chained methods. It results in shorter lines and there is no need for a build step.\n\nThe goal was to make this new `ModelAndView` immutable, to better facilitate functional programming and serverless architectures. That meant getting rid of the setters and the `addObject` methods. Without those, `ModelAndView` becomes less pleasant to use (especially with more than one object in the model), so I thought that having a builder would be better:\n\n#### Constructor\n\n``` java\nMap<String, Object> model = new HashMap<>();\nmodel.put(\"foo\", \"bar\");\nmodel.put(\"baz\", \"qux\");\nModelAndView mav = new ModelAndView(\"view\", model);\n```\n\n#### Builder\n\n``` java\nModelAndView<String> mav = ModelAndView.viewName(\"view\")\n    .modelAttribute(\"foo\", \"bar\")\n    .modelAttribute(\"baz\", \"qux\").build();\n```\n\nI also thought that a builder would be preferable to having eight overloaded constructors (which is what `ModelAndView` currently has).\n\n> A couple of other smaller details are the ability to create a ModelAndView without a view which could come up if the method signature is ModelAndView but the controller returns conditionally with different outcomes.\n\nCouldn't that use case be supported by just returning a model from the controller? I know that we had this variant in `ModelAndView` before, but I believe that was done mostly to facilitate the inheritance-based MVC, where every `Controller` had to return `ModelAndView`. I doubt if it's still necessary in @web.reactive with its flexible signatures. Requiring a view(name) in `ModelAndView` certainly does make a lot of sense in `web.reactive.function`, where there is no method signature reflection going on, so we cannot deduce the view name.\n\n> The second is the ability to add an attribute without specifying a name, i.e. relying on {{Conventions.getVariableName(attributeValue)}}. I think both of those are still relevant.\n\nI will add those.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245533362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245548056", "body": "@rstoyanchev: I've updated the PR to fix the issues you mentioned. Can you take another look?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245548056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245569697", "body": "I mainly focussed on the first two commits in this PR, and they look good. The only thing I would change is the name `hints` for the map parameter, as it does not work really for me. `properties` perhaps,  `attributes` or event `decoder/encoderAttributes`? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245569697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245859842", "body": "> @poutsma why does \"hints\" not work?\n\nI have no problem with hints, but I just thought \"attributes\" might work better. We use attributes in many other places which seem similar: model attributes, request attributes, and so on.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245859842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245861665", "body": "I will remove the latter two commits from this PR, so that the non-controversial parts can be merged. In a separate branch, I will then introduce a new \"template rendering\" type (similar to the `ModelAndView` contained in commit 4 of this PR) in `web.reactive.function`, but with a different name. This way, w.r.f can have the immutable, builder variant, while we can continue to use the constructor-based variant in the annotation-based code.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245861665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245863858", "body": "@rstoyanchev Are you ok with merging this PR in its current form?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245863858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245914046", "body": "JIRA is at https://jira.spring.io/browse/SPR-14685, merge is at https://github.com/spring-projects/spring-framework/commit/e882f739bf4e9d7eba95856a6c3c22c3f9d147e0\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245914046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246430621", "body": "For your consideration, @jhoeller and @rstoyanchev.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246430621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246467007", "body": "@jhoeller: I've updated the PR accordingly. Can you take another look?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246467007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246469566", "body": "> Thumbs up from my side, except for the now outdated title and commit comment :-)\n\nAh, of course, I will change that as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246469566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246976584", "body": "For your consideration, @jhoeller and @rstoyanchev.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246976584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246979470", "body": "For your consideration, @rstoyanchev.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246979470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247020095", "body": "Ok, I will close this PR then.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247020095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247049549", "body": "I've changed the PR to no longer use the UrlPathHelper, @rstoyanchev. Could you take another look?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247049549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247316943", "body": "> Two this doesn't yet cover the case of the HttpMessageWriterView which is a View that writes through an HttpMessageWriter. This would have been relatively simple to do until recently after the change to View to accept a Map rather than HandlerResult. @poutsma not sure what the answer is. On a first thought perhaps a HandlerResultView extension of View with a method that accepts HandlerResult instead of just a model? So the ViewResolutionResultHandler can then check and prefer to invoke the render with a HandlerResult if available. We need some way to pass the extra information when it is available.\n\nTo be honest, I never really understood the need for the `HttpMessageWriterView` in the first place, but perhaps I am missing something. What does it do that a @ResponseBody cannot do?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247316943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247353887", "body": "Updated to reflect your comments, @rstoyanchev: \n- The two dispatcher-handler initializers no longer subclasses from AbstractContextLoaderInitializer, so there is no root context.\n- The PR now uses `ApplicationContext` instead of `WebApplicationContext`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247353887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247359657", "body": "We don't have that in the existing `AbstractDispatcherServletInitializer`, which this class is based on. I decided to keep it consistent.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247359657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247563674", "body": "Third time's a charm! Here is an updated version with a default, single servlet mapping which defaults to `/`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247563674/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254484339", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254484339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262748690", "body": "Merged", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262748690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267070681", "body": "Merged", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267070681/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268993096", "body": "As I said on Slack: this looks good to me. The only two additions I would like to see before we merge are: javadoc, and a similar hints mechanism for the `BodyExtractor`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268993096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280662112", "body": ">  It seems that the RouterFunction approach in worst case can reach O(n) if the last nth function is the one that applies to request. Does RequestMapping makes things better, closer to hashmap complexity O(1)?\r\n\r\nThat really depends on the specific scenario. Though we do use a hash map for path-based lookups in the `@RequestMapping` processing, the only way a such a lookup can match if the request path is an exact match of the pattern defined in the `@RequestMapping` annotation. If the pattern uses a wildcard (`/*`) or path variable (`/{foo}`), then the hasmap-based lookup will not come up with a match, so we have no choice but to iterate over all existing mappings, and see which match. Next, we must also consider the other elements of the annotation, such as the `headers`, `produces` and `consumes` elements. We do this by sorting all potential hits according to their specificity: more specific matches come before more generic ones. This can even result in ambiguous matches, which result in an exception. Note that this process described above is a simplified version of the real algorithm, look at `org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping` and its superclasses for more details on this process.\r\n\r\nRouter Functions, on the other hand, work quite differently. For instance,`RouterFunction` does not consider all potential matches: the first one that \"hits\" is the one that is picked. Furthermore, with nested routes, it is possible to optimise the searching space by placing request predicates under a specific constraint (such as a path prefix), so that only the candidates under that constraint will be considered (instead of all candidates, like with `@RequestMapping`). ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280662112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286454642", "body": "> What about the use of javax.activation.FileTypeMap in our MockServletContext implementations?\r\n\r\nI decided to keep that as is, since the MediaTypeFactory does not have a manual override mechanism, and the Javadoc comment on `getMimeType` seems to suggest that overriding is necessary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286454642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286472770", "body": "I wasn't talking about method overriding; I was talking about overriding or customising the mime types returned by `MockServletContext.getMimeType`. JAF has such a customisation mechanism, and as you know there is a [use case for it](https://github.com/spring-projects/spring-framework/blob/199aa776c96d9a50ff4fcbf18673eb59960c6d48/spring-test/src/test/java/org/springframework/mock/web/MockServletContextTests.java#L90-L90).\r\n\r\nExcept for replacing the `mime.types` file on the classpath, the new MediaTypeFactory does not have such a customisation mechanism. Its goal is to provide default mimes types, when none are provided through `PathExtensionContentNegotiationStrategy` or similar mechanisms (which are customisable).\r\n\r\nSo, in summary: JAF has a customisation mechanism; the new MediaTypeFactory does not. `MockServletRequest.getMimeType` needs such a mechanism, so it does not use MediaTypeFactory.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286472770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286695787", "body": "> My real concern was that production code and test code would demonstrate different behavior with regard to available mime types out of the box.\r\n\r\n> Do you not foresee any issues with that?\r\n\r\nI do, but to be fair: `ServletContext.getMimeType()` can pretty much return whatever the Servlet container wants: there is no guarantee that it uses JAF, or that it returns a sensible mime type at all. It might as well return `foo/bar` or even `null` for any given string, and that would be fine according to the spec.\r\n\r\nIf anything, I think we should make it easier for users to let `MockServletContext.getMimeType()`  return whatever their servlet container returns. Easier than doing the [JAF-override-dance](https://github.com/spring-projects/spring-framework/blob/199aa776c96d9a50ff4fcbf18673eb59960c6d48/spring-test/src/test/java/org/springframework/mock/web/MockServletContextTests.java#L93), I mean. I've added a [fourth commit](https://github.com/spring-projects/spring-framework/pull/1356/commits/689f0d716a827e42db297ad41006c1a97486c213) to this PR that does just that, and also drops the JAF dependency in `MockServletContext`. For your consideration, @sbrannen.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286695787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288663596", "body": "`getMediaType` now returns an `Optional<MediaType>`, see fd1db57e058c240d6e953940b9147d233c9d85fe", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288663596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288733003", "body": "I've pushed a branch [here](https://github.com/poutsma/spring-framework/tree/SPR-14908), the main commit being [this one](https://github.com/poutsma/spring-framework/commit/284938eeb0a3533223d3f30607c2470b203bbd09), that introduces a `useDefaults` property, taking the role of the `useJaf` property. Let me know what you think, @rstoyanchev.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288733003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289053099", "body": "The reason I used RestTemplate is that it is currently more robust: we can assume that it has less bugs than WebClient, because it has been around longer. A failing test should indicate the smallest possible number of components that have a potential failure. Using WebClient would not help in this respect: a test failure could indicate either a RouterFunction or WebClient bug, which is not as useful. If anything, we shouldn't  be using RestTemplate either, but a third party HTTP client. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289053099/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290087216", "body": "Merged", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290087216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290100174", "body": "Note that 957f503 (deprecating `AsyncRestTemplate`) has already been cherry-picked into master.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290100174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311348282", "body": "I would still like to see a rename of `cloneBuilder()` to `clone()`, though.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311348282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327160957", "body": "> > Concretely that means that handler methods declaring an Object return value type and returning a String or Resource value won't be handled anymore by respectively by CharSequenceEncoder and ResourceEncoder. These handler methods need to declare explicitly the return value type.\r\n> I don't have a better answer to suggest, but if I were to encounter this behaviour I'd be rather surprised and my instinct would be that it's a bug.\r\n\r\nI wouldn't call it a bug. It's different than MVC, that much is true. But that doesn't make it a bug.\r\n\r\n> What is it in WebFlux that prevents the annotation-based model from behaving as it does in Spring MVC? I'd like to understand that difference as, without understanding it, I don't think I'll be able to do much other than feel surprised that it doesn't work as MVC does.\r\n\r\nI don't know the ins and outs of this particular issue, but one thing I know is that in MVC, we can easily inspect the value returned from the Controller with reflection. In WebFlux, we don't have that luxury, as the return value is typically some sort of Publisher, and its elements are coming in asynchronously. As we need to setup the response writing pipeline before that first element comes in, we cannot do so using reflection on the element instance; the method signature is the only source of information we have.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327160957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351753417", "body": "Thank you for providing a PR for this issue! However, I decided to fix it in an alternative, arguably cleaner way. See https://github.com/spring-projects/spring-framework/commit/8e253a316d7f9f6d76fc343b96d747e1d056a0ae", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351753417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351968218", "body": "Unfortunately, the JSON assert framework we use does not support null, true, or false as top-level elements (see [this issue](https://github.com/skyscreamer/JSONassert/issues/83)). I did test those values in a test project, though, and they worked for me.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351968218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1336593", "body": "These three lines can be folded into one: \n\nComparator<?>[] comparators = new Comparator[] { MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR} \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1336593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064557", "body": "The goal was to be consistent with BodyExtractor.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064736", "body": "Ok, I will change the name to `BodyInserter`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064795", "body": "Fixed, see 778ef026801533c6030d774d52504ef9a72cb48f.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19064795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19503742", "body": "You could even change this to `bodyToMono(Account.class)`, as of fa9cc1eb1a7755d3e3d91e3a89954e85b02b26f2.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19503742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662034", "body": "Yes, the value would be duplicated.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662125", "body": "There is no new test in this patch, no. The existing `org.springframework.http.client.InterceptingClientHttpRequestFactoryTests#changeHeaders` seemed sufficient.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662587", "body": "The explicit scenario is not tested, no. But the logic is tested in the LinkedMultiValueMapTests above, so we can assume that same code works in this scenario as well.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20814475", "body": "The reason for limiting these to `ServerHttpRequest` was to make sure that autocompletion does not list `toFormData` on `ClientHttpResponse.body` methods, since reading form data from a client response does not make a lot of sense. What is your reason for making this change, @rstoyanchev ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20814475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21458827", "body": "[Great minds think alike...](https://github.com/poutsma/spring-framework/commit/284938eeb0a3533223d3f30607c2470b203bbd09#diff-2d65b1fea04eda99a45a246133a9263fR107)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21458827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23434426", "body": "It would be possible, but I'm not sure what would be advantage. In the grand picture of things, having a 12 byte overhead for allocating a new array is not that big of a deal. Moreover, in typical usage the passed `responseBody` is not null, but at the very least an empty array.\r\n\r\nThe reason we introduced the `EMPTY` for `HttpHeaders` constant is not to save memory by sharing an instance, but rather because the constructor for creating a read-only instance is private, meaning that we cannot use it from this exception class.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23434426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24647318", "body": "That's a bug, thanks for spotting it! I've created https://jira.spring.io/browse/SPR-16025, which has been fixed in master.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24647318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616796", "body": "It does.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616829", "body": "I've requested a backport for 3.1.3, but I am not sure when that's going to come out. It might be that Spring 3.2.0 comes out before 3.1.3 does. At any rate, it's out of my hands.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14596961", "body": "Should this be parameterized over   `? super T`, just like the `addCallback` signature?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14596961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600139", "body": "This seems a bit strange, storing the failure callback in a field.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600285", "body": "I like the splitting of this interface into two separate interfaces. Elegant solution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600453", "body": "Don't let @jhoeller see this! ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600523", "body": "AFAIK, we don't do \\* imports in Spring. Except for static method imports, perhaps.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600542", "body": "Same here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600576", "body": "And here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14600576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14699082", "body": "I don't think we need the `final` on the parameters here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14699082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14699211", "body": "I believe that one of your commits introduced an empty line after the `AsyncResult` constructor. That's not necessary.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14699211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/44644989", "body": "This class does not have to be public, I believe.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/44644989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/44645150", "body": "Please refer to [Spring Code Style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style) to format your code: `else` goes on a new line!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/44645150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109860241", "body": "In general, `Optional`s should only be used as a return type, not a field value. So I would store this as a `HttpStatus` field with a potential null value. See http://blog.joda.org/2014/11/optional-in-java-se-8.html for reasons why.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109860241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "izeye": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c0ddf3c698881b60a192feb035441b3ad55b0bb", "message": "Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/df3241e0724c86d67ece7cf4ebe95dedf860dd4c", "message": "Polish SqlParameter.sqlTypesToAnonymousParameterList()\n\nCloses gh-1657"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/826db885093360e8dd27f3ef566c392af1e01aa9", "message": "Remove an unnecessary intermediate variable\n\nSee gh-1650"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/36d42bcda42aebed0fdfe4f580378021194c9973", "message": "Polish InterceptorRegistration\n\nCloses gh-1647"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d31767eab8415e12898eefaded8dd550cf452fe2", "message": "Fix an exception message in ScheduledAnnotationBeanPostProcessor\n\nCloses gh-1636"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/880", "title": "Polish", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148063966", "body": "@sbrannen I'm not sure I've done it before so I did it just now :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148063966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148088098", "body": "@sbrannen Done!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/148088098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322936494", "body": "@simplicii, this was merged in https://github.com/spring-projects/spring-framework/commit/3dd6069578a2aea3f87bcfeec10d9156e038c4f5", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322936494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "kamilszymanski": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/61117245a6fa5ef793bfd447f6edaa4c1d432684", "message": "Replace manual array copy with native method call\n\nCloses gh-1606"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1035", "title": "fix WebRequest.checkNotModified docs", "body": "in all code samples and docs `request` is used instead of `webRequest`\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/810", "title": "Add nullToEmpty convenience method to StringUtils", "body": "It allows you to replace common patterns like:\n\n``` java\nif(string == null) {\n    string = \"\";\n}\ndoSomethingWith(string);\n```\n\nor:\n\n``` java\nreturn string == null ? \"\" : string;\n```\n\nwith a `nullToEmpty(string)` method call.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/141411003", "body": "But it doesn't allow you to inject imported beans.\n\nIMHO the following statement is invalid (the @Import part): \n\n```\nBean definitions imported from XML can be injected using {@code @Autowired} or {@code @Import}:\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/141411003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rwinch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0cd427bdd35e668dda6332ae2885d94c222d9c49", "message": "MockHttpServletRequestBuilder decodes pathInfo\n\nPreviously MockHttpServletRequestBuilder calculated the pathInfo from the\nprovided URL without decoding the value. This meant that the pathInfo\nincorrectly included URL encoded values.\n\nNow MockHttpServletRequestBuilder properly decodes the pathInfo.\n\nFixes: SPR-16453"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8ad14ae95c973b5eb1feb05e8cb52a48513cca72", "message": "DefaultWebSessionManager decoupled from DefaultWebSession\n\nDefaultWebSessionManager no longer requires the WebSessionStore\nto use DefaultWebSession.\n\nRemoved explicit start() in save(). This seemed unnecessary since at\nthat point isStarted is guaranteed to return true. The status can\nbe updated through the copy constructor.\n\nDefaultWebSessionTests added.\n\nIssue: SPR-15875"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/86912475af6cd86c2e09c8aeabd8697708be1ab8", "message": "Refactor WebSessionStore\n\n- Add WebSessionStore.createWebSession.\n\n- Remove remove WebSessionStore.changeSessionId\n\n- Add WebSessionStore updateLastAccessTime which allows updating the\nWebSession lastAccessTime without exposing a method on WebSession in\nan implementation independent way.\n\n- Remove WebSessionStore.storeSession. This method is not necessary\nsince the WebSession that is returned allows saving the WebSession.\nAdditionally, it is error prone since the wrong type might be passed\ninto it.\n\nIssue: SPR-15875, 15876"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b7280472d611f642da1ca56e6371355815ece4b2", "message": "Improve WebSession related tests\n\nAdd missing DefaultWebSessionManagerTests .block(). Previously\nsession.save() was invoked, but we did not ensure it was completed.\nThis commit makes it block on session.save()\n\nFix existingSessionIsExpired. This test is actually broken and is\ntesting a new session is created because the session id returned\nby the idResolver does not match the existing WebSession.\nThis commit ensures that the id of the WebSession found by idResolver\nmatches the existing WebSession.\n\nDefaultWebSessionManagerTests use Mockito. To ensure we test with\nindependence from InMemoryWebSessionStore we use Mockito for the\nDefaultWebessionManager collaborators.\n\nAdd test for response.setComplete(). We want to ensure that when the\nresponse is completed, it saves the WebSession and writes it to the\nresponse using idResolver"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/167ddc7cfcc7d96da94454bb8cf2405e7161ee82", "message": "Polish HeaderWebSessionIdResolver\n\nUse constant for default header name and make getHeaderName private.\n\nAlso switch HeaderWebSessionIdResolverTests to unit tests rather than\ntesting with DefaultWebSessionManager.\n\nIssue: SPR-15917"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fadf04e4b402445585f6c0e92f5d1b42fd43a1b3", "message": "Add RelativeRedirectFilter"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5f868b493a7ba63c2dc2622475ecc29f34e4346b", "message": "Add ForwardedHeaderFilter requestOnly\n\nAdd an option for ForwardedHeaderFilter to only process the\nHttpServletRequest. This means that HttpServletResponse.sendRedirect will\nonly work when the application is conifgured to use relative redirects\nusing Servlet Container specific setup.\n\nIssue: SPR-15717"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f092ae567b1e61461a621850f9c2fdb5d02beb1d", "message": "Conditionally apply Kotlin if not using JDK 9\n\nKotlin does not yet work with JDK 9, so we need to disable the Kotlin\nplugin if we are using JDK 9."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/223315f96b7eca0189a7fd8698cc1c01fe8f8d23", "message": "Update to SonarQube 2.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b1345014b93ee433577e45f1013c2b1d0b8ca8a8", "message": "Update to Reactor Bismuth-M2\n\nIssue: SPR-15646"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e92e65f8c36661c3314e9200a1aee743fb938ee5", "message": "Fix ForwardedHeaderFilter preserves semicolon content\n\nPreviously a requestURI that contained ';' would have the value incorrectly stripped out when using\nForwardedHeaderFilter.\n\nThis commit ensures that the ';' is preserved when using ForwardedHeaderFilter.\n\nIssue: SPR-15428"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/96bfe7d197702258c60aae0f71275b95b6d56095", "message": "Polish\n\nGroup all contextPath tests together"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1f289b7580fab4a0b8ea2619da1ab5e4f4d24683", "message": "Add test to ensure ForwardedHeaderFilter contextPath preserves encoding\n\nAdd a test to verify that the ForwardedHeaderFilter contextPath override preserves URL encoding\nas it should.\n\nIssue SPR-15422"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/84db06ec0bbb6dcae37366af8aa8f7464d89acee", "message": "ForwardedHeaderFilter requestURI preserve encoding\n\nPreviously ForwardedHeaderFilter would override the requestURI with a URL decoded value. This would cause\nproblems when using a URL encoded requestURI since downstream Filters would not see the URL encoded\nvalue as they should.\n\nThis commit resolves this issue by ensuring that the requestURI is properly encoded.\n\nIssues SPR-15422"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/49998986170ad16f769ab9eeaafd498219bfde57", "message": "Update to Gradle 3.4-rc-2\n\nWe need to explicitly apply Dependency Management to the root\nproject since it depends on modules that use dependency management.\nWe need to ensure dependency management is applied after propdeps-maven\nto avoid an ordering issue [1]\n\nAn update to propdeps was necessary to be compatable with Gradle\n3.4+\n\n[1] https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/149\n\nIssue: SPR-15207"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/95da47f57987c8d668828a120095a478ae85388e", "message": "Use dependency-management-plugin:1.0.0.BUILD-SNAPSHOT\n\nThis fixes an issue where the dependencyManagement entries are not\nadded to the generated pom [1]\n\n[1] https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/141"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/df98d304fd0a8b7b5eb8ce133e0bcc303967f293", "message": "Fix ForwardedHeaderFilter with non-empty contextPath\n\nIssue: SPR-15088"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/db2ebd30da027498273ed7a4ea6714d07adef6fd", "message": "Add Support for ForwardedHeaderFilter sendRedirect\n\nPreviously ForwrdedHeaderFilter did not ensure that\nHttpServletResponse.sendRedirect worked properly based on\nX-Forwarded-* headers.\n\nThis commit updates ForwardedHeaderFilter to overrided the\nHttpServletResponse.sendRedirect method to ensure\nX-Forwarded-* headers are honored.\n\nIssue SPR-15020"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b58a06208f261db26832db531eb975e1e7c7c232", "message": "Add HttpBasic ClientWebRequestPostProcessor\n\nIssue: SPR-14682"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/142", "title": "Add JUnit Assumptions to core test sources", "body": "As per discussion in this weeks stand up I have added a utility class that allows assuming JDK version in order for the test to run. Also see the [junit-assumptions-demo branch](https://github.com/rwinch/spring-framework/tree/junit-assumptions-demo) to see this in action (since there are no use cases in the actual build now).\n\nPreviously it was cumbersome for tests to assert if the current JDK was at\nleast JDK 1.7.\n\nThere is now a utility class for JUnit assumptions that provides a method\nthat allows tests to assume the current JDK is at least JDK 1.7. If the\nassumption is not met, a AssumptionViolatedException is thrown to indicate\nthe test should be skipped.\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6976251", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6976251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8439480", "body": "@cbeams Thanks for pointing this out. [My update to build.gradle](https://github.com/SpringSource/spring-framework/pull/142/files#L0R41) should allow the test source to be shared. We have used a [similar approach](https://github.com/SpringSource/spring-security/blob/master/config/config.gradle#L30) successfully in Spring Security. The junit-assumptions-demo branch shows this working with spring-web. However, you are correct that spring-beans does not appear to be able to use Assertions for some reason. I will look into this further.\n\n@philwebb Thanks for the input. My thoughts on the current approach vs custom JUnit Runner or Rule:\n- Static imports require less custom code\n- Static imports are more concise than a JUnit Rule. \n- Static imports are more flexible than a JUnit runner (not tied to a specific runner).\n\nI mentioned these thoughts to @cbeams this morning and he seemed to agree on the logic (although he is pretty busy so I could see a change of heart). The advantage for the using a custom Rule or Runner is that some might state that it is more readable. I'm not sure I am convinced of this, but if a custom runner and/or rules this is something that we are looking for it could be added.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8439480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8445004", "body": "The reason it did not work with spring-beans was due to [GRADLE-2471](http://issues.gradle.org/browse/GRADLE-2471). I have modified the build so that it works around the issue. I also updated the junit-assumptions-demo branch to demonstrate that all the projects can have use Assumptions as a test dependency. There are two commits in the branch. The first demos it all working. The second demonstrates that the build will actually fail if ran against JDK 1.6 and Assumptions are not used.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8445004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8469211", "body": "@philwebb I realized I missed one of your questions. Yes you can use it for an entire test or for a specific test method. If you like, you can see the class level javadoc of newly added Assumptions class for examples. Sorry for overlooking this previously.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8469211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9162300", "body": "@rstoyanchev I have updated the commit to be a single commit as discussed offline.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9162300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9162358", "body": "I probably should have mentioned that I went ahead and removed the spring-test-mvc README. I was a bit hesitant to do so since there isn't really any documentation yet, but thought it was more consistent with the rest of spring-framework. If you want you can add it back or let me know and I can do it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9162358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10581880", "body": "Both this resolution and SPR-9656 update the Eclipse project models, but the issue and resolutions differ. This issue occurs when you use project('...').sourceSets.test.output (or other sourceSets output folders) which adds the output folders as a classpath entry. If gradle build has not been performed the folders will not exist. Secondly, Eclipse outputs the build to another folder so any updates would not be picked up. If you haven't already, you can check out the description on [GRADLE-1116](http://issues.gradle.org/browse/GRADLE-1116) for more details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10581880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10723082", "body": "Just to make sure we have all the information on the table here, I did not do anything with the spring-webmvc-portlet which has its own copy of the web.mock.\\* classes. This was mostly because I did not feel comfortable having it depend on servlet 3 changes in spring-web/src/test since it was still relying on servlet 2.5. I could update the commit so that spring-webmvc-portlet relies on the spring-test's web.mock.\\* classes which would probably make this a bit cleaner.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10723082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10725885", "body": "I created [SPR-10039](https://jira.springsource.org/browse/SPR-10039) for this change (since it could have some reasonable performance enhancements for users) which will need to specify the Fix Version as 3.2.0.RC2 release. I do not have access to do this, so hopefully someone else can ensure the JIRA gets updated.\n\n/cc @cbeams @jhoeller \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10725885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10729073", "body": "I have made the changes Jurgen suggested.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10729073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10743123", "body": "Note I logged [SPR-10042](https://jira.springsource.org/browse/SPR-10042) to remove the workaround which is the spring-test-mvc/ide.gradle\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10743123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10743617", "body": "To be a little more specific this will fix the issues that appear as shown below:\n\n```\nDescription Resource    Path    Location    Type\nTilesConfigurer cannot be resolved to a type    JavaConfigTests.java    /spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context line 102    Java Problem\nTilesConfigurer cannot be resolved to a type    JavaConfigTests.java    /spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context line 103    Java Problem\nTilesConfigurer cannot be resolved to a type    JavaConfigTests.java    /spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context line 103    Java Problem\nThe import org.springframework.web.servlet.view.tiles3 cannot be resolved   JavaConfigTests.java    /spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context line 42 Java Problem\nThe import org.springframework.web.servlet.view.tiles3 cannot be resolved   JavaConfigTests.java    /spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context line 43 Java Problem\nTilesView cannot be resolved to a type  JavaConfigTests.java    /spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context line 97 Java Problem\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10743617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10743665", "body": "/cc @rstoyanchev - As an FYI so you know there is a workaround for this issue\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10743665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10762098", "body": "Closing since this was resolved in [commit d7bf56df](https://github.com/SpringSource/spring-framework/commit/d7bf56df497f282399fcfaaec614aa5ea1a28d57)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10762098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10849971", "body": "Closing since it is now merged\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10849971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10869244", "body": "Closing this (I will create a new one) as the branch was named as SPR-100052 instead of SPR-10052 and I am not sure how to update this pull request with a different branch name\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10869244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11215678", "body": "I will let @rstoyanchev reply too, but in our internal discussions we had planned on marking all public methods as final. I believe the rational was that we did not want users to override any of the methods that the framework used and accidentally impact its behavior. I took it a bit further by marking any method that was not private final.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11215678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11218330", "body": "This sounds like a good rational for removing the final key word in these locations to me. If it makes sense to @philwebb,  I will push an update that removes the final keyword from `setResult`, `setErrorResult`, `onTImeout`, and `onCompletion`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11218330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11220328", "body": "Another note is that I did not create a jdk5Test task due to the fact that it required more complicated changes due to classpath differences (i.e. it won't work with the servlet 3 jars which are JDK 6, requires some additional XML jars, etc) and @jhoeller had mentioned testing against JDK 5 wasn't necessary. We can always do this later, but I thought I would get this lower hanging fruit in before GA\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11220328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11221292", "body": "Good question..Sorry I was a bit vague. The tests executed with JDK6 (i.e jdk6Test task) will be skipped if jdk6Home is not defined. Running the tests with JDK 7 are not impacted by this commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11221292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14116028", "body": "I see your point about merging between branches.\n\nPerhaps the sorting of the dependencies is enough to ensure we catch issues in the future. However, due to the number of issues with the pom files lately, I personally think the pom files are critical enough that they should probably be checked in so that the person that is updating the dependencies is certain to compare against the previous revision. Making the comparisons a more \"in your face\" experience is also good to catch issues in our build logic (i.e. merging of dependencies, re-mapping of provided/optional, etc).\n\nPerhaps @rstoyanchev or @philwebb can weigh in their opinions too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14116028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18304153", "body": "Thanks for the pull request. I merged this, but had to make some changes. See 07b755335\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18304153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25729533", "body": "See https://jira.springsource.org/browse/SPR-10960\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25729533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27714365", "body": "Merged in fd0b6caf\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27714365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812934", "body": "Thanks for asking. I'm closing this as it no longer applicable.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40812934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813286", "body": "I'm not sure that this is outdated so much as trying to figure out if we wanted to make the changes. It has been quite some time ago, but if I recall correctly (and looking at the chain) I think a majority did not want to include the poms in the build. Can anyone else chime in? Do we still want to keep poms out of the build? If so, I think this PR can be closed.\n\ncc @cbeams @philwebb @jhoeller  @rstoyanchev \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40813286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76415233", "body": "@fromi Spring Security 4 is and will be compatible with the current Spring Boot version.\n\nI don't know how Spring Boot plans to handle the upgrade to Spring Security 4 since it is a non-passive release. My guess is that you will need to override the Spring Security version (i.e. provide the spring-security.version property in your pom). @philwebb may be able to comment more authoritatively on this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76415233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76970726", "body": "@bclozel  Thanks for reaching out. \n\nIn the event you are interested...Historically the reason we used a single file was tooling limitations at the time. This has obviously changed though.\n\nOne thing I would consider is making each document start with a heading of one and using [leveloffset](http://asciidoctor.org/docs/user-manual/#relative-leveloffset). The reason is that this allows the context of what heading level is used is independent of the file being included making it easy to render the file in other contexts.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76970726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77461758", "body": "@bclozel \n\n> I know we're now relying on docbook, but I was wondering if something needed to be done re asciidoctor/asciidoctor-gradle-plugin#52 if we want to support multi-page documentation natively?\n\nAs I imagined it, this feature would not have supported native multi page documentation. It was to update the Gradle plugin to do the integration with docbook for the user.\n\nAs soon as there is multi page html output available, then this would not actually be necessary.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/77461758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120623312", "body": "@panchenko Thanks for your feedback. If I understand the question correctly, you wonder why we don't just convert the value in the constructor and / or setter? If so\n-  `NumberUtils.convertNumberToTargetClass(Number, Class<T>)` is used in multiple places (and may be used in more places in the future), so I think that is the correct place to fix this.\n-  `convertValueToRequiredType(Object,Class<?>)` which should work for primitive values as well For example, while mapRow passes in `this.requiredType`, the class `SingleColumnRowMapper` is non final so anyone that extends the class can pass in a different type to the method.\n- As far as I know there is no easy way to convert from the primitive class to its corresponding wrapper class, so this actually involves quite a bit of code.\n\nDoes this help? If not, can you please clarify? Perhaps I am not understanding your proposal.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120623312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151614346", "body": "Closing since this was resolved in https://github.com/spring-projects/spring-framework/commit/1fcd465f2d281a432eee79adfe1d4d8dd7ec3630\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151614346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198379540", "body": "@rstoyanchev Thanks for the feedback. You are right it would be valuable to require `WebClient` in the constructor. I have updated the PR with the changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198379540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214391356", "body": "cc @rstoyanchev @sbrannen \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214391356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214422677", "body": "@sbrannen @rstoyanchev \n\nThanks for the feedback. I decided to improve the test by only setting required fields (i.e. fields populated by the constructor) on the Cookie. This will help to ensure we don't have problems for any other fields. I have pushed those changes to the branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214422677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214533952", "body": "> Is the current-request-host guaranteed to be just localhost for requests on this path?\n\nThe host is the value that the user passed into MockMvc and can be any value.\n\n> If not, a cookie returned from request to foo.example.com without a domain set will be valid for *.example.com.\n\nPreviously I didn't see a way around this. I found a way to work around the problem. See the updated PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214533952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218364064", "body": "When possible, please review @sbrannen @rstoyanchev \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218364064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234251973", "body": "@poutsma Does [I already signed a CLA](https://cla.pivotal.io/faq#f1) from the the FAQ link above help? More concisely had you also signed into into the CLA tooling so we could read your email (GitHub does not allow reading the email address of an account until we get your permission via the OAuth flow).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234251973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243826232", "body": "I typically don't actually run the tests before import as this takes more time. I just compile the tests which triggers all the repack tasks.\n\nI created https://youtrack.jetbrains.com/issue/IDEA-160605 for making this easier.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243826232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243828267", "body": "@rstoyanchev Perhaps just use `./gradlew tCG` which should suffice (it triggers `testCompileGroovy`)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243828267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243828694", "body": "Hmmm...I thought that had worked, but apparently it doesn't since the root project doesn't have that task. Perhaps we could just add a task to prepare intellij.\n\n``` groovy\ntask prepareIntellij(dependsOn: ':spring-oxm:compileTestJava') {\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243828694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245743251", "body": "@bclozel I hope you don't mind assigned this to you as I thought you would be the best to review it given your work with the Reactive Client.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245743251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292650807", "body": "Thanks this was merged (after squashing the commits) via d0d7a88233de2cd05b47fc2cf93bc8331af55cff and 9a9166622eb08e5445ae64daea7ada56fd735d41", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292650807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341449096", "body": "Thank you for the PR @BattleRattle! This is now merged into master", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341449096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713827", "body": "Thanks...I'm not sure what happened here. I will update my template accordingly\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713855", "body": "Yes it looks correct. I added the `@CodeGenerationHint` for any location that had an if statement that showed up in the class files so whitespace changes should be fine now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2714862", "body": "@cbeams FYI..I figured out what happened. My code templates were automatically getting formatted. Specifically Use code formatter was checked under Window > Preferences > Java > Editor > Templates \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2714862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2715065", "body": "The setting is global workspace setting, so I'm not sure it was the shared eclipse settings (I don't know that it can impact it since it is not a project level setting). I suspect it may have got checked when I was playing with [Eclipse Workspace Mechanic](http://code.google.com/a/eclipselabs.org/p/workspacemechanic/). I was looking int Workspace Mechanic for better ways of setting up consistent workspaces (if you have ideas love to hear them). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2715065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2722479", "body": "I think my instance was special. The problem occurred for me because I have a template that only contains the apache license to insert the license into files that already exist and did not have it (this file had it missing). If I create a new file it works, if I only insert the header it gets formatted.\n\nNOTE: I did the manual revert (rather than re-reverting my commit) since it was easier for me than merging the changes in from an automatic revert.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2722479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3947421", "body": "@sbrannen I actually have some tests that started failing due to the fact that the method could no longer be null. The test was to test a library that was wrapping the request and occasionally returning null from the method. If we are going to do this, perhaps a better approach would be to throw an IllegalArgumentException so that it is apparent what is wrong.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3947421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4069096", "body": "@sbrannen - Thanks for the response and sorry for the delay on getting back to you. I have replied to you below:\n\n> > Do you mean setMethod() or setRequestURI(), or both?\n\nIn my instance it was just an issue with the setMethod, but I think both should be treated similarly. You can refer to [this commit](https://github.com/spring-projects/spring-security/commit/086056f191bce7c0657ccef7a43fcdb18b7dded8#L6R31) for details.\n\n> > So I would assume it is in fact an error if the supplied method is null or empty.\n\nThis is possible, but at times testing needs to cover cases where someone might implement a method incorrectly. For example, users may plug in an invalid HttpServletRequest wrapper and I would like to ensure I give meaningful errors and/or ensure that Security is still working correctly. So while it may not be valid, at times tests need to cover invalid usage too.\n\nEven if we decide to state that null is not allowed, I think that we should treat the null as an error in that instance so it is obvious to the user of MockHttpServletRequest that they are using it incorrectly.\n\n> > Now, that I think about it, we could even consider only allowing values such as those defined in org.springframework.http.HttpMethod\n\nI think we should allow anything since the HTTP method allows for [extension methods](http://tools.ietf.org/html/rfc2616#section-5.1.1)\n\n> > For the sake of backwards compatibility, however, it might be best to revert the changes in this commit and simply refactor getRequestURL() so that it uses an empty string for the request URI if getRequestURI() returns null.\n\nThis seems reasonable to me. I do think we should address the method attribute as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4069096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4334382", "body": "At a quick glance it appears it may make sense to make the IdGenerator interface and AlternativeJdkIdGenerator class private\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4334382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4334530", "body": "That makes sense keeping the interface public...I had missed that. Thanks for the clarification :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4334530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310837", "body": "Thanks! This should be fixed now. Is there an IntelliJ code formatter available?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310903", "body": "Good catch! This is fixed now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310936", "body": "Being Juergenized via proxy...I like it! This is fixed now :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/34310936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35360816", "body": "to the original WebClient (i.e. actually perform the request)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35360816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35365091", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/35365091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165557802", "body": "You are right. I copied it from there and somehow missed that was a public method.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165557802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165557858", "body": "I updated the Pull Request with your suggestion.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165557858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "adamlehenbauer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8de80ffe9e5ec1313028521e124ed3b8ab2c86f8", "message": "Fix typos\n\nCloses gh-1656"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ketan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a0c9fdba12f85bda71fbb7fe0562828379a41e77", "message": "Fix `DelegatingServletInputStream#available`\n\nEnsure that the method returns the correct number of bytes that can be\nread without blocking\n\nIssue: #SPR-16416"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neonailol": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/81ca1f7c2b42b7c5d7af60f30bf6c668d3e74f4c", "message": "Add doesExist assertion method to HeaderResultMatchers"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1651", "title": "SPR-16417 - Support varargs for expectations in MockMvc", "body": "The current way of writing multiple expect statements is kinda verbose:\r\n\r\n```java\r\n mockMvc.perform(get(\"/person/1\"))\r\n   .andExpect(status().isOk())\r\n   .andExpect(content().contentType(MediaType.APPLICATION_JSON))\r\n   .andExpect(jsonPath(\"$.person.name\").value(\"Jason\"));\r\n```\r\n\r\nI propose vararg method that can do the same in a slightly cleaner way using default interface method:\r\n\r\n```java\r\n mockMvc.perform(get(\"/person/1\"))\r\n   .andExpect(\r\n     status().isOk(),\r\n     content().contentType(MediaType.APPLICATION_JSON),\r\n     jsonPath(\"$.person.name\").value(\"Jason\")\r\n   );\r\n```\r\n\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360551982", "body": "@sbrannen I created an issues corresponding this pull request [SPR-16417](https://jira.spring.io/browse/SPR-16417)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360551982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mrmaus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/142f1ab42f062916df88d3b852a20e8e73b0cf9f", "message": "Removed unnecessary cast to int\n\nSince Java7 HttpURLConnection offers setFixedLengthStreamingMode method with long parameter which should be prefered over version with int argument, therefore casting ContentLength to int is no longer needed. Moreover it makes impossible to stream payload larger than Integer.MAX_VALUE"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359162289", "body": "Ticket created: SPR-16404\r\nSorry, I thought the change is quite trivial and followed https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md : \r\n... \r\n2. For all but the most trivial of contributions, please create a ticket. ...\r\n\r\nProbably the definition of \"trivial change\" could be refined", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359162289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "JanStureNielsen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fed81c6f83c0b24538371fd092a71e128d86ccbc", "message": "Fix doc typo\n\nCloses gh-1646"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/df9761cb3f2e4a3bf47ca3aee67ce8fc2b64fd3a", "message": "Fix doc typo\n\nCloses gh-1645"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timomeinen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/823a16ce17c2953c85485aec5e2b5955b130c503", "message": "Log SQL parameters in EclipseLink when using showSql\n\nAs of EclipseLink 2.4.0 - Juno this is not sufficient to log\nSQL parameter binding. Additionally,\neclipselink.logging.parameters must be enabled.\n\nIssue: SPR-16383"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EnvOut": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d6591a6329000fe22ac9859170bbee33a674716d", "message": "Default methods in WebSocketMessageBrokerConfigurer\n\n+ deprecate AbstractWebSocketMessageBrokerConfigurer"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357783937", "body": "thank you, I would like to contribute more to spring. What should I pay attention to in the first step?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357783937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "marschall": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/91e39d558f1a95bd1a49f29e9636135085bc628f", "message": "Use ArrayList instead of LinkedList for known size\n\nSpring JDBC unlike other modules uses LinkedList instead of ArrayList\nin several places. There is a large body of evidence suggesting that on\ncontemporary hardware ArrayList is both faster and has less overhead\nthan even in degenerate cases of empty lists [3] or unknown size.\n\nThere are two places in Spring JDBC where the size of the list is known\nin advance and an ArrayList of the correct final size can be created\n\n [1] https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8011200\n [2] http://cliffc.org/blog/2017/11/05/modern-hardware-performance-cache-lines/\n [3] https://bugs.openjdk.java.net/browse/JDK-8011200\n\nIssue: SPR-16378"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/19e77cd140d6efd2736a43b8688a8a3ffb6f2a7b", "message": "Remove use of Boolean constructors\n\nCodacy warns us that there are several references to Boolean\nconstructors in the tests. Direct usage of the Boolean constructor is\ndiscouraged and even deprecated in Java 9 [1]. Boolean constructor use\ncan easily be replaced with the constant instances.\n\nThis commit contains the following changes:\n\n - replace references to Boolean constructors with boolean constants in\n   JSP tag tests\n - update the copyright year where necessary\n - BooleanComparatorTests is intentionally left unchanged as it should\n   also work with the non-constant instances correctly\n\n [1] http://download.java.net/java/jdk9/docs/api/java/lang/Boolean.html#Boolean-boolean-\n\nIssue: SPR-15076"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3f97ab183e08ee0001ee98b9614770dad8d29155", "message": "Avoid use of double constructor of BigDecimal\n\nCodacy warns about an Error Prone [1] use of the double constructor of\nBigDecimal in tests. The reason given is that it is a source of\nprecision loss if the number does not have an exact double\nrepresentation. The recommendation is to use the String constructor of\nBigDecimal instead as it does not require using a lossy argument.\n\nThis commit contains the following changes:\n\n - replace usage of the double constructor of BigDecimal with the\n   String constructor of BigDecimal in JdbcTemplateQueryTests\n - update the copyright year\n\n [1] http://errorprone.info/bugpattern/BigDecimalLiteralDouble\n\nIssue: SPR-15077"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/35bd00beaf25943521b5650ef6e004291b19eff7", "message": "Remove String#toCharArray from ScriptUtils\n\nScriptUtils contains two calls to String#toCharArray for the sole\npurpose to iterating over all chars in a String. Not only is this\nunnecessary and can be replaced with String#charAt it also causes\nadditional allocator and heap pressure because String#toCharArray\nrather than returning the backing array (which is gone in Java 9)\ncreates a copy.\n\nThis commit contains the following changes:\n\n - remove String#toCharArray from ScriptUtils and replace with\n   String#charAt\n\nIssue: SPR-15075"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f7c79295f35b8ecaad5088322a970c08e9732614", "message": "Fix NativeJdbcExtractors documentation\n\nThe documentation mentions various NativeJdbcExtractors that no longer\nexist. To be specific CommonsDbcpNativeJdbcExtractor and\nXAPoolNativeJdbcExtractor no longer exist.\n\nThis commit includes the following changes:\n\n * remove CommonsDbcpNativeJdbcExtractor references from Asciidoctor\n * remove CommonsDbcpNativeJdbcExtractor references from Javadoc\n * remove XAPoolNativeJdbcExtractor references from Asciidoctor\n\nIssue: SPR-14810\nCloses gh-1205"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ae5b0c6fb5f02a525ec3e394f45e37aab25d47a1", "message": "Replace J2EE with Java EE\n\nString with version 5 the name of Java Platform, Enterprise Edition\nchanged from J2EE to Java EE. However a lot of the documentation still\nuses the term J2EE.\n\nThis commit includes the following changes:\n\n * replace J2EE with Java EE where appropriate\n\nThis is not a blind search and replace. The following occurrences\nremain unchanged:\n\n * references to old J2EE releases, most notably 1.3 and 1.4.\n * references to \"Expert One-On-One J2EE Design and Development\"\n * references to \"Core J2EE patterns\"\n * XML namespaces\n * package names\n\nIssue: SPR-14811\nSee gh-1206"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eee742da7f618d9b7df7d32c1103445cb3c040c7", "message": "Remove OracleLobHandler from documentation\n\nNow that OracleLobHandler has finally been removed it should also be\nremoved from the documentation.\n\nThis commit includes the following changes:\n\n * remove OracleLobHandler references from Javadoc\n * remove OracleLobHandler references from Asciidoctor\n\nIssue: SPR-14809\nCloses gh-1204"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1739", "title": "SPR-16578 - queryForMap returns last value", "body": "queryForMap returns last value returns the last value of equally named\r\ncolumns. The JDBC specification says that in such cases the first value\r\nshould be returned instead.\r\n\r\n - change ColumnMapRowMapper to not overwrite existing values\r\n\r\nIssue: SPR-16578", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/724", "title": "Add Optional Support to JdbcTemplate", "body": "Extend `JdbcTemplate` to support `Optional` for cases where queries\nreturn one or no row.\n- Add a `queryForOptional` method for every `queryForObject` method in\n  `JdbcOperations`.\n- Implement the new methods in `JdbcTemplate`.\n- Add tests for the new methods in `JdbcTemplate`.\n\nIssue: SPR-12662\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/266", "title": "[SPR-10412] Support generics in JmsTemplate", "body": "The `#convertAndSend` and `#receiveAndConvert` methods and the\n`MessageConverter` interface currently are not type safe. Everywhere\n`Object` is passed around casts have to be made.\n\nThis pull request tries to address the issue by:\n- split `MessageConverter` into two interfaces, `MessageDecoder` and\n  `MessageEncoder` so that Java 8 lambdas can be used\n- add generics to `MessageConverter`, `MessageDecoder` and\n  `MessageEncoder`\n- for every `#convertAndSend` method add a new one that has a\n  `MessageEncoder` as a second argument\n- for every `#receiveAndConvert` method add a new one that\n  has a `MessageDecoder` as a second argument\n- add generics to the new `#convertAndSend` and\n  `#receiveAndConvert` methods\n\nMessageConverter and MessageDecoder are not be best names but the best\nones I could come up with.\n\nMaybe `MessageConverter` and `MessageDecoder` should be annotated with\n`java.lang.FunctionalInterface` but this would have to be done over the\nentire code base eg. `org.springframework.jdbc.core.RowMapper`.\n\nAs usual, I'm not one hundred percent certain when it comes to wild\ncards.\n\nAnd tests are missing.\n\nIssue: SPR-10412\nhttps://jira.springsource.org/browse/SPR-10412\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4674330", "body": "- I signed the CLA. Do you need my confirmation number?\n- I created an issue, SPR-9264\n- I made a new commit with correct comment formatting that also collapse both commits into one (I hope) and updates the year in the license header.\n\nIs there any way to update this pull request or should I close it and make a new one?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4674330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4681954", "body": "Ok, there we go, it seems to have worked.\n\nThere is a small issue with the patch though. InjectionMetadata.checkConfigMembers and LifecycleMetadata.checkConfigMembers both synchronize of the underlying collection. In the case of new LinkedHashSet this is fine but in the case of Collections.emptySet() we synchronize on a global variable that is accessed from other places. This could be avoided if we first check for #isEmpty() before synchronizing. Let me know if you want me to update the patch accordingly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4681954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5124132", "body": "Yes I did. Do you need my confirmation number?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5124132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5131074", "body": "I did sign the CLA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5131074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5131077", "body": "I did sign the CLA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5131077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5762252", "body": "Done, I also did a rebase against the current master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5762252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12882674", "body": "In theory we could have single rule that implements both `TestRule` and `MethodRule` but it would still have to be defined twice since `@Rule` fields and methods must not be `static`.\n\n``` java\npublic class SampleTests {\n\n    @ClassRule\n    public static final SpringJUnitRule CLASS_RULE = new SpringJUnitRule();\n\n    @Rule\n    public MethodRule methodRule = CLASS_RULE;\n\n} \n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12882674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12898877", "body": "@eeichinger good idea I updated the pull request\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12898877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13084264", "body": "@eeichinger also `TestExecutionListener#beforeTestClass` and `TestExecutionListener#afterTestClass` wouldn't fire. Although `TestExecutionListener` is redundant when you have rules available. I can see your point it makes it easier to use OTOH it's harder to debug why something doesn't doesn't work. It's a trade off, I can live with either solution.\n\nAnd thanks for testing.\n\n**Edit**:\nAlso more `TestExecutionListener` instances would be created.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13084264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13138268", "body": "No, unfortunately a classrule (actually just a [TestRule](http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/TestRule.html)) just gets a callback to affect the class execution (before and after). Basically it's a higher order function.\n\nThere is a [proposal](https://github.com/KentBeck/junit/issues/199) for an API that would do exactly what we need but there doesn't seem to be any progress happening.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13138268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18565737", "body": "Yes I did, for example I already contributed #37 and #64 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18565737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18571935", "body": "Ok good, I'll add it all my future pull requests then :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18571935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18805534", "body": "I renamed `FileSystemPathResource` to `PathResource`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18805534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18892223", "body": "Awesome, thank you\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18892223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34847905", "body": "See issue discussion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34847905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41044073", "body": "Ok, I will in the future.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41044073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195945486", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195945486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196382297", "body": "@jhoeller did a much better fix\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196382297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269856449", "body": "I did sign and agree to the CLA.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269856449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350491204", "body": "The code quality review seems to be hanging because branch analysis doesn't seem to be enabled.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350491204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jeffnelson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/30e40210a8d798246963c826fcbe4c0bce6a5c01", "message": "Extract protected method in AbstractRequestLoggingFilter\n\nIssue: SPR-16245"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156791066", "body": "@fmcejudo - I think you missed the entire point of this PR/change if you suggest `getMessagePayload` be `private`. Putting the logic to get the payload into a `protected` method that can be overridden by child classes is what enables manipulation of the payload.\r\n\r\nMy use case for this is that I am logging the full payload, but need to sanitize/scrub secret values (passwords, shared secrets, auth keys, etc) so they aren't spit out into logs.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156791066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156791751", "body": "I don't disagree, but if you look closely, existing logic was simply copy/pasted to a `protected` method", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156791751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156791915", "body": "see above comment about existing logic being copy/pasted", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156791915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "imasahiro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9af4d65994a85c66988c01ffb0d2e8c4ca76a81", "message": "ResourceBundleMessageSource uses ConcurrentHashMaps instead of synchronization\n\nIssue: https://jira.spring.io/browse/SPR-16235"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356417308", "body": "Thanks @jhoeller!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/356417308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "making": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50b46c9e35722475dcec32a31e5461b3d3dddf1f", "message": "Fix source code in doc\n\nCloses gh-1640"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2fa74055ea3a81246c94d4d60b28f1b6d41f216", "message": "Fix missing uriVariables"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/889", "title": "Add STRICT option to DateTimeFormatter in case of pattern", "body": "Issue: [SPR-13567](https://jira.spring.io/browse/SPR-13567)\n\nAdded STRICT option and changed test case.\n`y` in JSR-310 is different from that of classic Date API.\n\nhttps://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\n\n`y` means not \"year\" but \"year-of-era\". This difference affects in case of STRICT mode.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Linolium": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cb8ad465642d7cfa04403fe076688b5fdcdcb82f", "message": "Overloaded methods in InterceptorRegistration\n\nIssue: SPR-16324"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353781203", "body": "@snicoll sure, here is a [link on issue ](https://jira.spring.io/browse/SPR-16324)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353781203/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Skelotron": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b9e03cb06b617fc052b8a80eeee89324e2ba0cd7", "message": "SPR-16316 \u2014 fix transaction timeout value overflow"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nkjackzhang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ec6eed6c6344c1a89c90217710d0d6b7b80dd112", "message": "Polish Javadoc\n\nCloses gh-1627"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b11d1f5f9b5ee8e0af908f58d7c48e2aba4e9d67", "message": "Fix typos in spring-mvc.xsd\n\nCloses gh-1535"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e49c0e152f6f560be94b12629bdd946d3dec5c8", "message": "Remove unecessary \"<<\"\n\nSee gh-1343"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226110536", "body": "sorry, i haven't, and my change is very small, maybe you can change it by yourself and not merge this pull request into master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226110536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226111917", "body": "thanks, i am reading the  \"contributor guidelines\", and i will sign the CLA later\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226111917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226116613", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226116613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226712979", "body": "I found my commit may not satisfy the \"Format commit messages\", so i will pull a new request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226712979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229907204", "body": "Sorry, I use github web page to make commit.You are welcome to search the remains by yourself.And you can just close this PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229907204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231955307", "body": "But in javadoc, there exist extra \"#\", maybe we can just delete the extra characters.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231955307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231957430", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231957430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dreis2211": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/260ebeca3ada9d0bd2d62c41256cafe81ac8ca03", "message": "Improve performance of some string operations\n\nIssue: SPR-16293"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f4e9fb52a87770763199ad37f5ef0257e68848dc", "message": "Reduce access on user in SimpleBrokerMessageHandler.handleMessageInternal\n\nIssue: SPR-16264"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9fab208fdd4a311f7d3f7587ca0dd6a1aafb553f", "message": "Reduce access on headers for STOMP messaging\n\nIssue: SPR-16165"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ef1623643fef11e0d28c242fe2598c840daf8bc", "message": "Optimize DefaultUserDestinationResolver.resolveDestination()\n\nIssue: SPR-15602"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13b39521d80ca5b736c36572de2159144b2f7b26", "message": "Optimize AntPathMatcher when checking for potential matches\n\nIssue: SPR-15477"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5cfa7e71bb878cde25b03b79cd5b9c58f12a12df", "message": "Use Class.getTypeName() where appropriate\n\nIssue: SPR-15237"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/83929b2b98e7a1f3d4ed5d6e3f5bcd499989110b", "message": "Improve performance of StringUtils.capitalize()\n\nIssue: SPR-15094"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b76dc2ab4364e9082b010ef71b6e08ebe495e2e", "message": "SPR-14901 Allow customization of STOMP message header encoding\n\nFixes SPR-14901"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a929e9ccaaf4682c2a78bec87d8ce94cb24cdb5f", "message": "Implement allocation-friendly method to get user count in SimpUserRegistry\n\nSPR-14930"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/774e4c3dc10035448d12e5f883823c260569f891", "message": "Improve performance of StompEncoder\n\nFixes SPR-14747"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1015", "title": "Changed declaration order of some variables in GenericTypeResolver.resolveReturnTypeForGenericMethod()", "body": "Changed the order to don't declare variables that might not be needed. If declaredTypeVariables.length == 0 is true, the method returns early.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200466044", "body": "I have signed and agree to the terms of the Spring Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/200466044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/201566560", "body": "I have signed and agree to the terms of the Spring Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/201566560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225010359", "body": "I have signed and agree to the terms of the Spring Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225010359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264661944", "body": "Finally had some time to work on this again. Please also see my latest comment in the ticket.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/264661944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292146451", "body": "Closed with e9627a10c7fdbc263601fdd9f0f783b41389ff5d", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292146451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305401403", "body": "@rstoyanchev Thanks for accepting the PR. Is a backport to 4.3.x possible? Would be highly appreciated.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305401403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354552118", "body": "Hi @philwebb,\r\n\r\nI took the freedom to do some benchmarking with roughly the following benchmark:\r\n```\r\n    @Benchmark\r\n    public Method testNew(TestState testState) {\r\n        return ClassUtilsNew.getMethodIfAvailable(Collection.class, \"remove\", testState.params);\r\n    }\r\n\r\n    @Benchmark\r\n    public Method testOld(TestState testState) {\r\n        return ClassUtils.getMethodIfAvailable(Collection.class, \"remove\", testState.params);\r\n    }\r\n```\r\n\r\nThe results below show that the new approach is considerably slower than sticking with the exception (though I wish one could get rid of this overhead):\r\n```\r\nBenchmark                                                             Mode  Cnt        Score         Error   Units\r\nMyBenchmark.testNew                                                  thrpt   10  1205631,942 \u00b1   19528,209   ops/s\r\nMyBenchmark.testNew:\u00b7gc.alloc.rate                                   thrpt   10     2160,500 \u00b1      34,985  MB/sec\r\nMyBenchmark.testNew:\u00b7gc.alloc.rate.norm                              thrpt   10     1880,001 \u00b1       0,001    B/op\r\nMyBenchmark.testNew:\u00b7gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt   10        0,004 \u00b1       0,004  MB/sec\r\nMyBenchmark.testNew:\u00b7gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt   10        0,004 \u00b1       0,003    B/op\r\nMyBenchmark.testNew:\u00b7gc.churn.G1_Old_Gen                             thrpt   10     2155,113 \u00b1     106,008  MB/sec\r\nMyBenchmark.testNew:\u00b7gc.churn.G1_Old_Gen.norm                        thrpt   10     1875,308 \u00b1      86,973    B/op\r\nMyBenchmark.testNew:\u00b7gc.count                                        thrpt   10       91,000                counts\r\nMyBenchmark.testNew:\u00b7gc.time                                         thrpt   10       74,000                    ms\r\nMyBenchmark.testOld                                                  thrpt   10  8600278,472 \u00b1 4189300,388   ops/s\r\nMyBenchmark.testOld:\u00b7gc.alloc.rate                                   thrpt   10      918,050 \u00b1     447,475  MB/sec\r\nMyBenchmark.testOld:\u00b7gc.alloc.rate.norm                              thrpt   10      112,000 \u00b1       0,001    B/op\r\nMyBenchmark.testOld:\u00b7gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt   10        0,003 \u00b1       0,003  MB/sec\r\nMyBenchmark.testOld:\u00b7gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt   10       ? 10?\u00b3                  B/op\r\nMyBenchmark.testOld:\u00b7gc.churn.G1_Old_Gen                             thrpt   10      926,888 \u00b1     446,573  MB/sec\r\nMyBenchmark.testOld:\u00b7gc.churn.G1_Old_Gen.norm                        thrpt   10      113,956 \u00b1      13,283    B/op\r\nMyBenchmark.testOld:\u00b7gc.count                                        thrpt   10       66,000                counts\r\nMyBenchmark.testOld:\u00b7gc.time                                         thrpt   10       49,000                    ms\r\n``` \r\n\r\nThis mainly comes from the additional heap-pressure as the JDK is copying the method array etc.\r\n\r\nThe results above make me wonder if this will actually improve the performance.\r\n\r\nCheers,\r\nChristoph", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354552118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76538497", "body": "You're of course correct. Shows an even better uplift. Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76538497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151870891", "body": "Without looking too deep into it, I believe the \"fix\" here is wrong as using two-dots is actually intended in order to match both the `abc` and `def` package. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151870891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151870901", "body": "Same as above, I believe", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151870901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/158563457", "body": "May I suggest a pre-check for `getParameterCount() == paramTypes.length` in order to avoid possible allocations coming from `getParameterTypes()`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/158563457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/158564498", "body": "May I suggest a pre-check `candidate.getParameterCount() == method.getParameterCount())` in order to avoid possible allocations coming from `getParameterTypes()`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/158564498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Toilal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/76dcde9e31072f7a1b14942aad3581b5dec00f37", "message": "Fix Stomp Broker Relay ignoring destination prefixes in some cases\n\nIssue: SPR-16265"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gro-gg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/591429e538d1e59b47dff4c760cfd8763c57ebd7", "message": "Fix exception message\n\ninitialDelayString is parsed into long, not integer.\n\nCloses gh-1615"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tonymitchell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9f36d170bed59c4801f45c01ae23c89bab3a36ae", "message": "Support identical minPort and maxPort in SocketUtils (#1612)\n\nThis commit fixes a bug where an IllegalStateException was\r\nthrown if the minPort and maxPort values supplied to\r\nSocketUtils.findAvailableTcpPort(int, int) were identical."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ugultopu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/04ab93ceb451882c6e75127897e2f1c5ec33772d", "message": "Add missing verb on the note about relays"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hongxingwz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4b614dc1de49b1ffab14acdf4a91dc8b42427016", "message": "Fix copy/paste in Javadoc\n\nCloses gh-1601"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diesieben07": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0e49e321889d23828c5307842ac25d444ce7ec88", "message": "Handle parameters of Kotlin extension methods correctly\n\nThe EXTENSION_RECEIVER parameter of Kotlin's extension\nmethods appear as normal method parameters to Java and\nthus require a name. The synthetic name \"$receiver\" is\nused here, as it is not a valid Kotlin identifier,\nbut valid in Java.\n\nIssue: SPR-16119"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/147385597", "body": "Except that there is no actual parameter name. We either will always get `arg0` (which is pretty useless) or `$receiver` if Kotlin's `javaParameters` flag is set.\r\nIf you prefer that, I can change it, I just don't think it's very helpful.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/147385597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Yneth": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b487db294ba83f875625b761db4e013e19791c4e", "message": "Fix NullPointer when setting cookies in RequestUriSpec"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343139316", "body": "@rstoyanchev, please, take a look at this issue", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/343139316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "benbenw": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/667e0341fa17149ed531ae4fae28900f7812fcd9", "message": "Improve memory allocations when substituting named parameters.\n\nCreate the buffer with at least the original sql length to avoid\nmultiple re-allocations\nAdd a fast path if the original sql doesn't contain any parameters"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342987404", "body": "Commits squashed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342987404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/149534084", "body": "Done.\r\nThx for the backport", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/149534084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Buzzardo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7964360f799b910e3af15c0f45f59c9ffbfea514", "message": "Fix a broken link"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3736b049d085bec4b469f7f5f1decade5a50059e", "message": "CONTRIBUTING-DOCUMENTATION.adoc edit\n\nI made it be more formal and be easier to read.\n\nCloses gh-1512"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ea0e22218f7f9dbb35e95ff9872ce947043db29b", "message": "Polish\n\nSee gh-1509"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4872084079a9eefc503be73ffac777b30967c97b", "message": "New overview\n\nWe have written a replacement for the current overview, as the beginning of a larger documentation effort."}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1441", "title": "Doc update", "body": "Changed a note to a warning and added more detail.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325787229", "body": "I see that you didn't pull in the other changes I made (capitalization and so on). Should I make another update and pull request for those?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/325787229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327222230", "body": "It seems that my changes got lost in git (which I am far from mastering) and that I inadvertently tried to do a PR against an old version of these files. I'll redo my work and make a new PR.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327222230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333310511", "body": "Sorry. I'm still getting used to git.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333310511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119612265", "body": "I thought about making it into a separate warning. That would have resulted in two adjacent warnings that addressed the same set of annotations, so I combined them. I can split them, though, if that works better.\r\n\r\nI didn't have the problem. Someone else did. Then the topic came up on Slack, where various folks mentioned that they had tried this and had trouble. I thought it rated a documentation update.\r\n\r\nSeveral people have tried to use those annotations within a BeanFactory (or the dependencies of a BeanFactory) and have had trouble as a result. You can see the evidence of it in the following issues:\r\nhttps://jira.spring.io/browse/SPR-9255\r\nhttps://jira.spring.io/browse/SPR-8704\r\nhttps://jira.spring.io/browse/SPR-10349\r\n\r\nIf you can tell me additional details around using @Value in this context, please do. I'll be happy to add them to the document.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119612265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119614400", "body": "Right.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119614400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119631468", "body": "I find the explanation at the bottom of https://github.com/spring-projects/spring-framework/commit/28e114b569d0e3e19ea0e0160704b6726810f428 to be insufficient (no offense meant). It should be a warning. It doesn't mention the consequences: getting an exception.\r\n\r\nIt's a comment in code, and I'm working on the reference guide. Also, it\u2019s about FactoryBean, and I\u2019m dealing with BeanFactory.  If we need to call out the connection between the two to address the issue of these annotations causing a synchronization problem that sometimes raises an exception, please let me know.\r\n\r\nAs for this particular content, suppose we borrow a bit of content from that code comment and make a warning that reads as follows: \r\n\r\n[WARNING]\r\nAdding any of the `@Autowired`, `@Inject`, or `@Resource` annotations to a BeanFactory object or any of its dependencies can result in an `BeanCurrentlyInCreationException`, as the injections performed by those annotations may happen before the BeanFactory object has been completed.\r\n\r\nI still need to know whether to include @Value in the list of annotations that can cause the problem.\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119631468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "BattleRattle": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4dee333a75121f4f6ceb4f62e2da4744a6fda2c6", "message": "Allow empty usernames for BasicAuth\n\nThe RFCs around basic authentication don't explicitly disallow empty\nusernames. On the other hand usernames containing colons are, as colons\nare used to separate the username from the password."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "epabst": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/43d88e4a250c913e9e4047efd20574e9cca96a82", "message": "Move requests.add(request) into finally block.\n\nThis avoids \"IllegalStateException: Expectations already declared\" when\na MockRestServiceServer is used after one request throws an exception.\n\nIssues: SPR-16132"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ocadaruma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/159da04eed43fe643f6df8a0af65f6b3801ca919", "message": "Fix wrong javadoc example\n\nCloses gh-1575"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drumonii": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ff2bea9b6b3bdb1ec0313e82be55c40aa97f77c6", "message": "Missing some double backticks with apostrophes\n\nCloses gh-1566"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/809189be1a251bd84c2bd390d33b45564998a6b2", "message": "URI variables with MockRestRequestMatchers requestToUriTemplate\n\nIssue: SPR-15819"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c9abd99f44ab1bcd84baf5dbf90f1bf873800257", "message": "Add twice() to ExpectedCount as convenience method"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317799625", "body": "@snicoll Created! [SPR-15819](https://jira.spring.io/browse/SPR-15819)\r\n\r\nI'll update the test to include the issue number as a comment later", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317799625/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/90458735", "body": "Doh! Copy and paste error... I'll update that and squash the commit", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/90458735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/129853885", "body": "In regards to the encoded expectedUri, I looked at the recent changes to use URI vars in [MockMvcResultMatchers](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultMatchers.java#L90) and modeled this chage off that.\r\n\r\nWhich option do you prefer? The first option is certainly more convenient. The separate method option also works well because if you are going back to refactor `requestTo` to use URI vars instead of concating, then you can change the method name while at it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/129853885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/130112861", "body": "Sounds good! Wasn't aware of the regression but I'll work on these changes later.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/130112861/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "WilderPereira": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fba2633e6e20d083bf13cb545827b04ba4ff71aa", "message": "Fix doc format\n\nCloses gh-1549"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomfitzhenry": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1fe3e0cd062ec1ccd2803c77026bf64180405e65", "message": "Fix typo in exception message: quite -> quiet\n\nCloses gh-1547"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MottoX": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d9c0151d41eaa7975bf21dba0009043386ae3bed", "message": "Fix typo\n\nCloses gh-1545"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1639", "title": "SPR-16354 - Improve callbacks creation in CglibAopProxy", "body": "Avoid unnecessary `FixedChainStaticTargetInterceptor` creation for methods without advice if the target is a static one and the advice chain is frozen.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dharrigan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b7708d989bb426055839fa38b3e65249fb962a65", "message": "Improve Kotlin documentation readability"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1871c9626de328758b74e14e0f993ce121c4fe92", "message": "Kotlin documentation readability improvements\n\nIssue: SPR-15659"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3384262", "body": "Hi,\n\nThis new pull request is combined with a valid test for packagesToScan with annotations.\n\nI'm not too familiar with XSD configuration, so I've left that out - but the Java code + test is there now.\n\n-=david=-\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3384262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3386342", "body": "Sure, no problem. \n\n-=david=-\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3386342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3387933", "body": "No problemo. happy to help out :-)\n\nOut of curosity, on the spring-framework README(.md) and blog, there is no pointer to an EPF file to import into Eclipse/STS to set up coding conventions/styles/parameters if one is working on Spring projects. Can this be made available so anyone wishing to submit changes can be kept in-line with whatever you guys use for coding conventions?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3387933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3395428", "body": "Sure, no problem :-)\n\n-=david=-\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3395428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3587564", "body": "Hi Arjen,\n\nWonderful! I am happy to be of service :-)\n\n-=david=-\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3587564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nkolosnjaji": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7c5dd03c9db198ed30f85671c873e1b7bc38e89c", "message": "Correct ResourceTransformer name"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Xantier": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1440026fb49200f632cfeb6c1dd38968adf3c1ad", "message": "Change bean registration to use initialize\n\nThis commit changes the reference documentation to conform\nwith the updated API defined in\nhttps://github.com/spring-projects/spring-framework/commit/8b8a6766de01467c8b45b1b9664f0ab2d58f7c69"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eddumelendez": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6f2d58fac6130fb3f471162272c57f2f6f3aef16", "message": "Remove jackson-datatype-jdk7 auto registration\n\n`jackson-datatype-jdk7` is not provided anymore. It's handlers are\nincorporated in core databind."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b2345d67dbce9a0cce5d780bbcf02cd5bc60b1eb", "message": "Upgrade to Jackson 2.9.0\n\nIssue: SPR-15548\nCloses gh-1488"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/204ec6bf9217bf1222c2201e468616ef7daedbc6", "message": "Simplify Netty dependency management by importing its bom\n\nCloses gh-1409"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1667", "title": "Add support to set visibility via Jackson2ObjectMapperBuilder", "body": "See SPR-16411", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1412", "title": "Replace lambdas with method references", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231970443", "body": "@snicoll PR updated. Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/231970443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298435211", "body": "@rstoyanchev PR updated", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298435211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "smaldini": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c216c2144d877b933302b43f4fc14fa873a9710", "message": "update to Bismuth-RC1"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/21203921f08fb98fe1bfdadec3efe63bb9fc2894", "message": "sync with reactor-core snapshot"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/90f4b137674bec7dd9d7597145f41ade29d21109", "message": "update to Bismuth-BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8f78c772b53d6ba433f760b88615dff8a2c122c4", "message": "update to Bismuth-M4"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2677bab560ac7f26dc435d6502c1f8fab13200ef", "message": "Use Bismut-BUILD-SNAPSHOT\nSync 3.1.0.BUILD-SNAPSHOT changes to Operators.checkRequest (removed)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b3a05ebac9028f5dc0d0214e07838016d40809a8", "message": "Inline super SubscriberAdapter with ChannelSendOperator\nAdd support for CoreSubscriber context passing"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cd643704adf1cb3787736452b3c7a96897ecde1c", "message": "Update to reactor core 3.1.0.B-S with context update for monoSendOperator\nExplicit typing for older jvm compilation in BodyExtractor"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba974320434a623d466ed39bb860dca7b368aae3", "message": "prepare for reactor-netty 0.6.1.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dc9f338add26d6290a52a37250a4e120abef7ebc", "message": "Update to reactor core 3.0.4 and netty 0.6 RELEASE (from repo.spring.io/release)"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/804935a8ebbe969a3d6f73412678ac3f4c7c0929", "message": "try less log and increase timeout"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/241d5f7a3ba6a4cf200e43687bd6046a32aad2c8", "message": "Sync reactor-netty client response update and uncomment in tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7d9e8def445fc8211cefb8c82193aaf782afb8d6", "message": "uncomment reactor-netty in tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c201a14ea2283ebbab41c5e91ec57c38665d5b2e", "message": "Temp disabling reactor-netty to unblock pipeline"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2802926c1dae64c1ec067effb4d22c616e1183ba", "message": "update STOMP support to reactor-netty 0.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/70bab23609a63903dde7112983a324748c371146", "message": "update STOMP support to reactor-netty 0.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6922a1c5346a0f9730990986e3cbb984b3f3cb2e", "message": "Sync with latest reactor netty changes"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/870f61fd8ea75ff46f0892c9ccff347fa6d8b6f3", "message": "update STOMP support to reactor-netty"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/85a4e5065d821b088343a3b6a05f210fffd0aa94", "message": "Add log4j2 config to spring-web-reactiv"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/099f5a254e1b599b3322b5b35e749c4c58121b83", "message": "Upgrade to reactor-netty/-ipc to 0.6 snapshots"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262583180", "body": "Clean runs from integration testing point of view from spring-web-reactive, CF and reactor-netty", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262583180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "onionf91": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/78434c8e2043e18040ea8a57868b2cee46fbd8a5", "message": "Release DataBuffers in FreeMarkerView\n\nWhen template processing throws an exception, we must ensure that\n`DataBuffers` are properly released to avoid memory leaks.\n\nIssue: SPR-15966"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1498", "title": "SPR-15850 - Support groovy markup template in WebFlux", "body": " - Migrate groovy markup template implementation from webmvc to webflux.\r\n - Migrate groovy markup template tests from webmvc to webflux.\r\n - Add groovy markup view solver to view resolver registry.\r\n\r\nIssue: SPR-15850", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aahlenst": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b30f6fd991a2aaa91bf0c4f9f88b6e99fc66f2a2", "message": "Ensure that JSON is written to response body\n\nIssue: SPR-15988"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xavier630": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dba1ef0b264c0251078f0558d09fff261c18d348", "message": "Fix Javadoc typo\n\nCloses gh-1531"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nertzy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f4ef5cd451a82d0795d361854a742a56a48da4ec", "message": "Fix broken RequestMappingHandlerAdapter setter\n\nRequestMappingHandlerAdapter.setReactiveRegistry() doesn't actually set the value appropriately.\r\n\r\nFYI: I found this using lgtm.com\r\n\r\nhttps://lgtm.com/projects/g/spring-projects/spring-framework/alerts/?mode=list"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e087db1ecb01fde19775422c1634ad70de63af83", "message": "Fix typo\n\nCloses gh-1364"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gregturn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c98e01ad1fb12ed791f4c09334b01f7d66e6be99", "message": "Create session-based WebSessionIdResolver\n\nIntroduces HeaderSessionIdResolver, which reads session ids from a session header and generates a session response header when new session are created.\n\nRelated issue: SPR-15917"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4be7131ca74c23275837684ce63d839469a0dda", "message": "Implement reactive HiddenHttpMethodFilter\n\nProvides the ability to embed an HTTP verb inside a hidden form field\n(like Thymeleaf's th:method operator).\n\nIssue: SPR-15206"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277796041", "body": "@bclozel Care to review my PR for https://jira.spring.io/browse/SPR-15206?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277796041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277811943", "body": "@rstoyanchev Okay, I've amended the @author tags. \r\n\r\nDidn't know if this was the planned place for WebFlux filters to end up.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277811943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278377240", "body": "@rstoyanchev Regarding how it gets the method param, that is the part I was unclear on regarding Reactive Spring. I know the classic solution leverage getParameter(), which has somehow found it from the form. What is the reactive equivalent to that?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278377240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278394330", "body": "@bclozel @rstoyanchev Okay, I've updated the code (and tests) to leverage form data. Whole thing looks reactive now for sure.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278394330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278445268", "body": "Squashed all the mods into one commit.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278445268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326688965", "body": "@rstoyanchev Please take a look.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326688965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21429973", "body": "Could be this => https://twitter.com/springops/status/844183194886901764", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21429973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119637597", "body": "If FactoryBean and BeanFactory are in the same text, perhaps an admonition like \"Don't confuse FactoryBean, a factory-method built bean with BeanFactory, an internal blah blah for creating beans\" is called for?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119637597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "arend-von-reinersdorff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba50581961d851cbf93afaedc2c268dafead0159", "message": "Minor fix in example code: No quotes for boolean\n\nCloses gh-1511"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333164384", "body": "Thanks for finding the correct link :-)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333164384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "LinkedList": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/721af4f7808bae0d0bb34db298d55d4d45c4b3cf", "message": "Fix wrong instructions for building documentation (#1508)\n\nIssue: SPR-15906"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/972", "title": "Support for @ExceptionHandler exclusions", "body": "Added support for excluding an exception from being handled in a method\nannotated with @ExceptionHandler.\n\nIssue: SPR-13932\n\nI have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/899", "title": "Fix YamlMapFactoryBean wrapping integer keys with square brackets", "body": "Issue: SPR-13398\n\nI have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/53564070", "body": "I don't know. \nThe Jira issue has Fix Version as '5.0 Backlog' so I thought it's planned for 5.0.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/53564070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IAMTJW": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03b409f891f8ae3e2e22fc347695d07211cf5b8e", "message": "Use dedicated addAdvisors\n\nSee gh-1469"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hackerwins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fc7e7a330492e1e4d54d2efaf36ff4574ca84dff", "message": "Fix typo\n\ncloses gh-1465"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simplicii": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3dd6069578a2aea3f87bcfeec10d9156e038c4f5", "message": "Add UTF8 problem+json media type constant\n\nIssue: SPR-15742"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1589", "title": "SPR-16171 MediaType, add application/schema+json", "body": "Implementation of SPR-16171 -  adding MediaTypes\r\n- application/schema+json\r\n- application/schema+json;charset=UTF-8\r\n- application/problem+json;charset=UTF-8", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313395927", "body": "SPR-15742 [https://jira.spring.io/browse/SPR-15742]\r\n\r\n@snicoll Done, thanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313395927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313619958", "body": "@rstoyanchev Hi, why did you close with unmerged commits?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313619958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "khannedy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ac68cc35c2cf776d66c41e8544663f0db1f17166", "message": "Ordered WebMvcConfigurer interceptor registrations\n\nIssue: SPR-15620"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1431", "title": "add value predicate support in BeanUtils.copyProperties()", "body": "In my project, I have some ugly code to merge 2 properties object like this \r\n\r\n```java\r\nConfiguration global = ...\r\nConfiguration config = ...\r\n\r\nConfiguration mergeConfig = new Configuration()\r\nBeanUtils.copyProperties(mergeConfig, global);\r\n\r\nif(config.getFoo() != null){\r\n   mergeConfig.setFoo(config.getFoo());\r\n}\r\n\r\nif(config.getBar() != null){\r\n   mergeConfig.setBar(config.getBar());\r\n}\r\n\r\nif(config.getXxx() != null){\r\n   mergeConfig.setXxx(config.getXxx());\r\n}\r\n```\r\n\r\nMy code only make sure that I only override non null values. This is very ugly because I need to check null in all of attributes.\r\n\r\nThis pull request is to add Predicate support for BeanUtils.copyProperties, so I can merge properties easily.\r\n\r\n```java\r\n\r\nConfiguration global= ...\r\nConfiguration config = ...\r\n\r\nConfiguration mergeConfig = new Configuration();\r\nBeanProperties.copyProperties(mergeConfig, global);\r\nBeanProperties.copyProperties(mergeConfig, config, Object::nonNull)\r\n\r\n```\r\n\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303587741", "body": "@snicoll  this is the jira https://jira.spring.io/browse/SPR-15581", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/303587741/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310523359", "body": "cool, thanks @rstoyanchev ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310523359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "freeman0432": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b14df2b6ea3dd5e6227e217379f0998492bce3a7", "message": "Fix a missing line of xml fragment\n\nCloses gh-1461"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diguage": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1ef5f61ab2b4a88716444f3b513157a5cbb5e190", "message": "Refactor iterator of Map with Java8's Map.forEach\n\nSee gh-1459"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4b1478d830f3cdbc4eb0d50d84f152d7900f30c3", "message": "Replace relevant code with lambda\n\nSee gh-1454"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2efa06237a2b22d7f54e48a6b407cdc75fac7acf", "message": "Use Map#forEach instead of Map#entrySet#forEach\n\nSee gh-1449"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c1d44d9a34a34dd657d113a6e0a45d4704628935", "message": "Use the diamond syntax\n\nCloses gh-1450"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/dab7a7f0ee94d67408b048f29910e0b30c31e03b", "message": "Refact iterator of Map with Java 8 forEach\n\nSee gh-1451"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d33764353e757e2696b91f8a9a6049e93df6e229", "message": "Add EditorConfig\n\nCloses gh-1455"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5288641c5055c83b8cef61bc4c0ed923fa59e995", "message": "Refactor duplicated code\n\nSee gh-1445"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eae63786c22617b3a1824d9b61fdada77120fdd1", "message": "Fixed reference"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1452", "title": "Refact duplicate code", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306040982", "body": "I'm sorry. \r\n\r\nI use Gerrit in the work.So I follow the flow of Gerrit. I rebase `master` to the PR branch: `diguage@java8-map$ git rebase master`. I may break the commit log.  \r\n\r\n**Need I fix the log? How to fix?**", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306040982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306092399", "body": "@lqjack I send a email to you. Let's talk about your comment. Thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306092399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306166155", "body": "I find some test class file do not use the diamond syntax. \r\n\r\nMay I submit the change of the test class files?\r\n\r\n\r\nI create a issue at JIRA: [Use the diamond syntax, remove the type declarations](https://jira.spring.io/browse/SPR-15628)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306166155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306244948", "body": "@rstoyanchev I resubmit the changes.  #1451 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306244948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306501490", "body": "I create a issue at JIRA : [Use Map.forEach instead of Map.entrySet().forEach](https://jira.spring.io/browse/SPR-15627)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306501490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306717790", "body": "I create a issue at JIRA: [[SPR-15631] Refact iterator of Map with Java8's Map.forEach - Spring JIRA](https://jira.spring.io/browse/SPR-15631) ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306717790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306852099", "body": "It has some error. Close and resubmit.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306852099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306853671", "body": "I create an issue at JIRA: [[SPR-15637] Use lambda to refact the code - Spring JIRA](https://jira.spring.io/browse/SPR-15637)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306853671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306990050", "body": "I only refact the interfaces which are added the `@FunctionalInterface` annotation. And, I do not refact the test classes. \r\n\r\n@snicoll  I submit all the refactor.  Please review and merge. Thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/306990050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307292774", "body": "I create an issue at JIRA: [[[SPR-15644] add EditorConfig file, help to unified code style - Spring JIRA]](https://jira.spring.io/browse/SPR-15644)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307292774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307307891", "body": "@snicoll \r\nI'm sorry. I just send PRs to Spring. I am exploring the proper way of cooperation. Please feel free to point out the problem and give some suggestions.\r\n\r\nI have a question: since the master branch changes, if there are some code conflicts after I sent a PR, may I deal with it?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307307891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307312793", "body": "I looked at the EditorConfig at Spring Boot. I will change the config as the file in SpringBoot.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/307312793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308309774", "body": "@jhoeller @snicoll \r\n\r\nI'm sorry for the refined PR. \r\n\r\nI just start to study the source of Spring. Later I try to focus on feature tickets. I hope I can make a little contribution.\r\n\r\nSpring is a great framework. Thank you! Thank Rod! Thank all the contributors.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/308309774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121055175", "body": "Ok. First, I restrict to XML and Java.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121055175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121056087", "body": "`end_of_line = lf` and `max_line_length = 120` are found at [Code Style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style). But I also find some lines are more than 120 characters. \r\n\r\nThe other two are found in codes.\r\n\r\nHow do I change it as follows:\r\n\r\n```\r\nend_of_line = lf\r\ninsert_final_newline = true\r\ntrim_trailing_whitespace = true\r\n```", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121056087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121260099", "body": "I am also thinking about this problem. It meets the requirements, but it will not be used with labmda. Should it be added the `@FunctionalInterface` annotation?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121260099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "philwebb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/72cd24446db45b0f3af483e399fbced392286f96", "message": "Make resolvePropertyName available to subclasses\n\nChange `SystemEnvironmentPropertySource.resolvePropertyName` to a\nprotected final method so that subclasses may call it.\n\nIssue: SPR-15617"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c67542418921ece5be42b1aef7beadd5b36c9737", "message": "Restore AnnotationUtils null argument support\n\nUpdate AnnotationUtils to restore support for `null` arguments in\ncertain methods. Some existing upstream projects were relying on this\nbehavior.\n\nIssue: SPR-15642"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/07ef7a97c775c7b4e20425a0aea198bd49f20b0d", "message": "Cache SpringFactoriesLoader loads\n\nUpdate `SpringFactoriesLoader` to cache property file loads. This helps\nreduce the number of garbage objects created as each load uses an 8K\nchar buffer.\n\nIssue: SPR-15509"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/90477b40a4b92c357184cc182f546ce742b1ffa1", "message": "Defer Charset.availableCharsets() call\n\nChange the `StringHttpMessageConverter` to defer calling\nCharset.availableCharsets() until absolutely necessary to help improve\nstartup times.\n\nIssue: SPR-15502"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/57d2fcef557882097e7fea4b603c437488546988", "message": "Extract CompositeHttpHandler functionality\n\nExtract CompositeHttpHandler to a package private class and add direct\nsupport via `HttpHandler.of(...)`. This removes the need for the\n`HttpHandlerAdapterSupport` class."}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/656e7f801e45cd967b668a1c99a4e38cfd5681c5", "message": "Remove XmlExpectationsHelper hard XML Unit requirement\n\nUpdate XmlExpectationsHelper to use an inner class for XML Unit calls\nso that the XML Unit dependency remains optional.\n\nIssue: SPR-15156"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/984", "title": "Support *Aware for @ComponentScan custom filters", "body": "Support a limited set of *Aware interfaces for TypeFilters created\nvia the @ComponentScan annotation.\n\nIssue: SPR-14009\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/821", "title": "Use method meta-data in getTypeForFactoryMethod", "body": "Update AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod to\nuse already loaded method meta-data when deducing the type of a factory\nmethod.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/820", "title": "Reduce BeanDefinition cloning from isFactoryBean", "body": "Update AbstractBeanFactory.isFactoryBean to only create the merged local\nbean definition when absolutely necessary.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/301", "title": "Support WritableResource property values", "body": "Update DefaultResourceLoader to always attempt FileResource resolution\nbefore URLResource, allowing casting of the result to WritableResource.\n\nAlso update ResourceEditorRegistrar to register a property editor for\nWritableResources.\n\nIssue: \n", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5830915", "body": "Chris,\n\nThe supplied commit fixes the majority of the warnings in the spring code.  Unfortunately I have not had time to fix all test projects as yet, I got as far as spring-jdbc.  I have also not updated any gradle configuration as yet.\n\nOne aspect of the patch that concerns me a little is that some changes may require spring users to change their code (although the changes are binary compatible).  I found this a little late, otherwise I would have submitted these as a separate patch.  \n\nFor example,\nsomeMethod(Class clazz)  changes to someMethod(Class<?> clazz)\n\nThis code continues to compile, but\nsomeMethod(List<Class> classes) changes to someMethod(List<Class<?>> classes)\n\nThis may stop existing code compiling, depending on how it was written:\nList<Class> myList = new ArrayList<Class>();\nSomeClass.someMethod(myList); //broken\n\nbut:\nList<Class<?> myList = new ArrayList<Class<?>();\nSomeClass.someMethod(myList); //fine for both old and new\n\nThere does not seem to be a easy solution for this.  I personally think that the generics should probably be added.\n\nPhil.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5830915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5832465", "body": "I can fixup the whitespace with:\n\nfind . -type f -name \"_.java\" -exec perl -p -i -e \"s/[ \\t]_$//g\" {} \\;  \n\nAny suggestions for backing out the import changes?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5832465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5835963", "body": "I have restored the original imports and removed the whitespace.  Do you want me to create a new pull request with these commits squashed?\n\nIt is a shame that STS \"organize imports\" cannot work, I find it generally useful.  Have you considered changing the rules used in the framework to that STS formatting can be defined?\n\nBTW during these changes I noticed that a lot of resource files are in /src/main/java as well as /src/main/resources.  Is there a reason for this?  I know that Maven would ignore non java files in /src/main/java, does gradle work differently?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5835963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5840623", "body": "To restore the imports I created a copy of the code repository in a different folder then hacked up something to copy the appropriate parts of the code from the correct location.  I then manually fixed up the remaining errors.\n\nLooking again I may have been mistaken about resources being duplicated.  I hit ctrl-shift-R in eclipse and noticed the duplicated files but it turns out they are in /build/resources so I assume they are copied by gradle.  I was not expecting to see resource files in src/test/java (for example /spring-beans/src/test/java/org/springframework/beans/factory/BeanFactoryUtilsTests-dependentBeans.xml), I assumed they would be in /src/test/resources (like /spring-beans/src/test/resources/org/springframework/beans/factory/xml/autowire-constructor-with-exclusion.xml). I wrongly assumed that at some point a migration to the maven folder structure happened and they ended up in there twice.\n\nI will raise a JIRA, tidy up the log message and squash the commits before resubmitting.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5840623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7903032", "body": "Can you foresee any case where the existing BeanInfo needs to be accessed by the BeanInfoFactory?  I am thinking perhaps BeanInfo might augment an existing BeanInfo with additional functionality (ie support traditional getters/setters in addition to some other style).\n\nPerhaps:\n\npublic interface BeanInfoFactory {\n   // Can return a new BeanInfo, wrap the existing or simply return the parameter unchanged\n   BeanInfo getBeanInfo(BeanInfo beanInfo) throws IntrospectionException;\n}\n\nOf course this does mean that potentially beanInfo objects are created then immediately discarded.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7903032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8069524", "body": "NOTE: Apply https://github.com/SpringSource/spring-framework/pull/124 before this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8069524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8310391", "body": "Should ConvertingComparator move to the converter package?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8310391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8353877", "body": "It might be worth @aclement reviewing this one\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8353877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8428139", "body": "Yes, it seemed like the simplest solution.  Thanks for taking a look.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8428139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8437705", "body": "@cbeams I have seen maven projects produce additional test jars that can then be consumed [1], I assume gradle can be even smarter.  Perhaps we can automatically add a test dependency for each internal dependency?\n\n@rwinch Do you think this approach could be extended to use annotations, perhaps using a Rule or Runner?  Something like @RunIfJdk(JavaVersion.VERSION_7).  I have not used 'assume' before, will it work for a single test in class?\n\n[1] http://maven.apache.org/guides/mini/guide-attached-tests.html\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8437705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8469555", "body": "@jhoeller fixed the underling issue directly.  Pull request has been updated with just the new unit tests\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8469555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8471798", "body": "Factory code now covered in https://github.com/SpringSource/spring-framework/pull/144\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8471798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9245965", "body": "@cbeams We should discuss if this needs documentation updates\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9245965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9451096", "body": "@cbeams @jhoeller Any comments on the use of inner static enum (see some but not much precedence in the existing code).  I don't like the idea of a boolean flag because it is not easy to extend.  Also feedback on the names welcome.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9451096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9672124", "body": "Nice catch.  Thanks!\nThis has now been fixed for the next 3.2 and 3.1 releases.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9672124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9689159", "body": "@cbeams Happy to merge this but I think it could do with a brief review.  Specifically:\n1. Is deprecating MBeanRegistrationSupport static finals OK.  I want to replace them with an enum for use with the annotation so it seemed best to refactor this class.\n2. Is there any way to test websphere and weblogic?  I could not find any unit tests for this path in the XML world.  This section of code is currently untested.\n3. Is using a BeanFactory from the MBeanExportConfiguration the best way to get a bean by name in a Configuration class.  Is BeanFactoryAware the best injection technique for the BeanFactory?\n4. Does the reference manual need updating.  I see no explanation of any other enable annotations (other than MVC) so I guess that this is not required?\n\nCheers,\nPhil.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9689159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9784152", "body": "@cbeams : Correct.  Pull 132 fixes this issue (albeit in a slightly different way) \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9784152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9831562", "body": "@cbeams  This commit has now been reworked following the review comments in:\nhttps://github.com/philwebb/spring-framework/issues/1\n\nSpecifically:\n- The use of ExpectedException causes NoSuchMethodErrors for me under both Eclipse and Gradle. Presumably you're getting different results? Please run tests like TypeDescriptorTests to confirm, and let's figure out how to make everything work.\n\n_I have removed ExpectedException for now, we can return to this later_\n- TypeDescriptor has been made final - why? What do you think the likelihood is of this being a breaking change for people, i.e. how likely is it that folks might have extended this type?\n\n_TypeDescriptor is no longer final_\n- #132 contains commits for both SPR-9566 and SPR-9692 - why, i.e. what is the relationship between these two, i.e. why combine both in a single PR?\n\n_This is mainly due to the fact that both issues touch the same areas of code so create atomic pull requests is hard.  This pull request still deals with a number of issues but now the commits are much more logically organized.  I have tried to order them in terms of how controversial they are so that you can work from the bottom up_  \n- both SPR-9566 and SPR-9692 have their fixVersion set for both 3.1.3 and 3.2 RC1. Given the scope of these changes, I am hesitant to backport them to 3.1.3 (still need to understand the complete impact even to 3.2). Do you have a strong case for backporting one or both?\n\n_Neither should be backported IMHO.  I have removed 3.1.3 from the fixVersion field_\n- It appears that these changes modify the conversion algorithm to match superclasses with a higher precedence than interfaces. As per your comments in SPR-9692, this would seem to introduce a backward-compatibility problem. Do you have a rationale as to why this change is merited, i.e. that the previous behavior is simply wrong, that it is very unlikely to actually affect anyone, etc.?\n\n_I spoke to @jhoeller about why the search changed from 3.0 to 3.1, he recalled that there was a good reason but not exactly what it was.  The new algorithm does not fundamentally change the way that the type hierarchy is searched, it just considers java. and javax. packages after other packages (see the updated commit message)._\n\nThanks for the review, it was very helpful!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9831562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9836900", "body": "@cbeams I have updated the request again becuase I thought of a better way to fix the enum issue that does not involve changing the class search order.  See commit 9272f48.  The new implementation simply makes EnumToStringConverter conditional on the fact that no interfaces can be converted.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9836900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9842205", "body": "@gid79 Thanks very much for the pull request and feedback on the JIRA.  I have committed a slightly tweaked variant of your code to the master 3.2 branch.\n\nThanks again!\n-Phil\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9842205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9879117", "body": "@cbeams did you mean SPR-5387?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9879117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9880406", "body": "This includes https://github.com/SpringSource/spring-framework/pull/157\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9880406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9926700", "body": "@dsyer,\n\nThanks for this, I have merged the pull request to master.\n\nDid your original work also have changes to CglibAopProxy?  For me the test on cglib failed so I have applied the same solution as JdkDynamicAopProxy to CglibAopProxy (see https://github.com/SpringSource/spring-framework/commit/3e296974c4b4e6b11d97728073c1df77bb9cc8f6#L0L343)\n\nCheers,\nPhil.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9926700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10024940", "body": "Good catch!  Thanks, this has now been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10024940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10088213", "body": "Thanks @EzequielB this is now merged.\n\nFor future reference it would be good if you could create a branch when submitting pull requests.  I have also slightly tweaked the commit message to keep the first line below 50 chars.\n\nThanks again for the contribution!\nPhil\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10088213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10092185", "body": "Hi @ericweinberg,\n\nCould I ask if you've signed the SpringSource CLA?  See https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement.  If not would you might completing the form (it's easy and just takes a couple minutes).\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10092185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10092413", "body": "Cool, thanks.  I don't need the number.  We always ask if the pull request doesn't include \"I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\".\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10092413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10093490", "body": "@ericweinberg Thanks for the pull request.  This has now been merged.  I slightly tweaked your commit to replace spaces with tabs (see https://github.com/SpringSource/spring-framework/commit/33abee2db2c9a5eefa686c3afa8b7d10e9e5fb15).\n\nCheers,\nPhil.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10093490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10293894", "body": "Hi Stuart,\n\nThanks for the pull request.  This has now been fixed in commit ea95da126af330863eb6b0431e86d3819bc97632.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10293894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10580643", "body": "@rwinch Does this relate at all to https://jira.springsource.org/browse/SPR-9656? I notice that we both touched the same area of code.\n\nI really don't like the way that gradle tries to use the export option on the eclipse project classpath. I would prefer it if it just re-declared what it needed. The other day I found out all optional dependencies end up on the classpath unless you select Run Configurations... -> Classpath then select the user entry click edit and check \"only include exported entries\".\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10580643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10625663", "body": "Hi Oliver,\n\nI have merged the pull request with some minor tweaks (see commit 759c9b35cd4d74aff7b912324751b334bf598f47).\n\nThanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10625663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10739993", "body": "Hi Stevo,\n\nThanks very much for this, I have fixed it a slightly different way in the end (see commit 6ca71abf934ee689f227d5ff864e7a4c4d8ae9d5 for details) but your pull request and comments helped a lot.\n\nCheers,\nPhil.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10739993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10741998", "body": "Now merged (see 2ef99cdda1342b54c11571c3931526948dfcf57e).\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10741998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11149844", "body": "Please hold off on merging this\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11149844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11215508", "body": "Should the individual methods be marked as final? Is it possible that a user would want to subclass and add additional logic to one of those methods?\n\n/cc @rstoyanchev \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11215508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11218474", "body": "Cool, don't worry about the pull request. I can make those changes locally.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11218474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11219071", "body": "I have merged the copy of exclude rules into the new plugin (see commit 455701d2ee6449abd8e5f640e718812d51c97fcd).\n\nI don't think we should merge 66c635078fea01465fb7bb517325c702f8fd22b4 as unfortunately Gradle will will end up putting that exclude rule on every dependency in the generated POM (regardless of it it actual needs it)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11219071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11220478", "body": "When you say \"If someone does not have jdk6Home configured the tests will be skipped\" do you mean all tests or will tests on JDK 7 still run?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11220478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13444412", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13444412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13514311", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13514311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13905179", "body": "Nice one! Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13905179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14059503", "body": "Hi @staale,\n\nHave you signed the Spring CLA?  It is pretty straightforward and should not take long to complete.\n\n[1] https://github.com/SpringSource/spring-framework/blob/3.2.x/CONTRIBUTING.md#sign-the-contributor-license-agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14059503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14125417", "body": "I would prefer to leave the POMs out of git but perhaps we can generate a difference report similar to JDiff when we release? I think as long as the release process spells out that you should compare the POMs that is enough.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14125417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14202309", "body": "@nurkiewicz,\n\nI feel a bit silly asking for such a small change but have you signed the Spring CLA?\n\nhttps://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14202309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14265522", "body": "Merged. Thanks!\n\nBTW for future reference you can amend a pull request by pushing with '-f'. It is quite useful and I do it often myself when reworking things. In this case, after you fix up the file:\n\n```\ngit add .\ngit commit --amend\ngit push origin patch1 -f\n```\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14265522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14265812", "body": "Merged, Thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14265812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14267112", "body": "Hi Jakub,\n\nHave you signed the contributors license agreement?\n\nhttps://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14267112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14303972", "body": "I have gone with option A, it seem more future proof. Cheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14303972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14307394", "body": "Merged with a minor weak to nest the XSD section for consistency with the other examples.\n\nThanks for your work here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14307394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14848938", "body": "I changed the default logic back to only replace attributes if there is not a subclasses. The subclass in the `ServletTestExecutionListener` was needed to override `getSubsequentRequestAttributes`. Looks like this issue will be solved in a different way so I will close this pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14848938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14849643", "body": "Thanks for the contribution! This has now been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14849643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15297976", "body": "Hi Martin,\n\nIs there a JIRA for this issue?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15297976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15343184", "body": "As this pull request does not seem to contain any commits I assume it was opened in error.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15343184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16340295", "body": "Merged, thanks for the fix!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16340295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16340301", "body": "Merged, thanks for the fix!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16340301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16340444", "body": "Now merge. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16340444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16811799", "body": "Hi @youngjee,\n\nThanks for the contribution. Have you signed the contributors license agreement yet? It is pretty straight forward and shouldn't take long.\n\nhttps://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16811799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17916120", "body": "Thanks for the pull request, have you signed the Spring CLA [1]?\n\n[1] https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17916120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18518986", "body": "Hi @marschall,\n\nHave you signed the [Spring CLA](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18518986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18519302", "body": "Hi @Fuud,\n\nCould you please raise a [JIRA](https://jira.springsource.org) issue for this. My initial thoughts are that the current restrictions are probably preferable to adding a new dependency on Objenesis for most people, but JIRA is probably the best place for these discussions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18519302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18567312", "body": "@marschall Thanks, we always try to ask with each pull request just to make sure.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18567312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18581443", "body": "This has now been fixed. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18581443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18871593", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18871593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18880538", "body": "@marschall,\n\nThanks a lot for this excellent contribution. I have committed it with some minor modifications [1] to master so it should be part of the 4.0 release.\n\n[1] https://github.com/philwebb/spring-framework/commit/323ffb2defb83abd8ae6df443c45e6400ef81203 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18880538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19892272", "body": "I see that is the case for paths starting with '/'. The context here is supporting:\n\n```\n@Value(\"file:/some/file\") WritableResource resource. \n```\n\nCurrently the above will only work with Resource\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19892272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20541280", "body": "Could you please raise a [JIRA](https://jira.springsource.org/secure/Dashboard.jspa) for this. Ideally with an [issue](https://github.com/SpringSource/spring-framework-issues#welcome) to reproduce the problem. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20541280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20721950", "body": "Thanks for the pull request. Could you please also raise a [JIRA](https://jira.springsource.org/secure/Dashboard.jspa) for this issue as that is generally our preferred system for tracking bugs.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20721950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20745747", "body": "Thanks. Yes please to the second JIRA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20745747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21349981", "body": "I started looking at this yesterday, from what I can tell it pretty much is perfect :) M2 has been pushed back a couple of days so that we can get to a few issues like this one.\n\nThe one change I was thinking of making was to allow the argument tags and the comma values to be used together, rather than either/or.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21349981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21362882", "body": "I see your point but I have run with the merge arguments options for now. I don't think it's too confusing since the arguments attribute always appears before the nested tags so the order seems fairly logical to me. I also wanted to get this in before M2, we can refine before RC1 if you feel strongly that this is the wrong call.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21362882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21364001", "body": "I assume that this was opened in error.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21364001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21738983", "body": "Thanks for the pull request. Have you [signed the contributors CLA](https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21738983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21822334", "body": "https://jira.springsource.org/browse/SPR-10798\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21822334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22140551", "body": "I think @olivergierke based his from your original pull request but with some modifications to allow Objenesis to be an optional dependency.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22140551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22213951", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22213951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22526822", "body": "Now merged. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22526822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22653588", "body": "@dmak \n\nTry `git rebase --onto`\n\n```\n# Make local master changes\ngit checkout -b myfix\n# Make fixes\ngit fetch upstream\ngit rebase --onto upstream/master master\ngit push origin myfix\n# Submit pull request\n```\n\nif you need to refine after submitting\n\n```\n# Restore local master changes\ngit rebase master\n# Make fixed (probably git commit --amend)\ngit rebase --onto upstream/master master\ngit push origin myfix -f\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22653588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22657769", "body": "I think `rebase --onto` will allow him to keep local changes on master but not submit them as part of the pull request. At least my experiments locally seemed to suggest it might work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22657769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22659298", "body": "I think so. You might want to play with this a temporary git repo to make sure it works as I think it does.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22659298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22999401", "body": "https://jira.springsource.org/browse/SPR-10850\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22999401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23448475", "body": "This is now merged. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23448475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23449275", "body": "Now merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23449275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23449571", "body": "Thanks for the pull request, in the end I have fixed this in a slightly different way (see commit c1dafed886f9f136b788f1a23528d5173167a3e8).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23449571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23459034", "body": "Merged with a few tweaks. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23459034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23487539", "body": "@rstoyanchev do you want this merged before M3?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23487539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24832764", "body": "https://jira.springsource.org/browse/SPR-10928\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24832764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24832789", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24832789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24943876", "body": "@Fuud we went though several code iterations, the final result repackages objenesis as part of spring-core rather than it being an optional dependency. The net result should fix SPR-10594, let me know if you find problems.\n\nCheers for your original contribution, and for raising the issue. It was incredibly helpful.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24943876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24960654", "body": "Thanks for the pull request. In the end I decided to expand the arguments before calling the `KeyGenerator`. Primarily because Spring 4.0 will introduce a new `SimpleKeyGenerator` implementation.\n\nSee 05072e17625e8fd256c1b29a45ef7248a6cecfa8\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24960654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25049965", "body": "Now merged, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25049965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25054875", "body": "Yes please, if you have not already signed the CLA please do so.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25054875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25734656", "body": "@bedge It should be there as a project called \"spring-build-src\"\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25734656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26103335", "body": "Thanks, can I check if you have signed the Spring CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26103335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26151198", "body": "Now merge. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26151198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26152305", "body": "Looks like the corresponding JIRA has been fixed in 4.0\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26152305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26153296", "body": "Looks like this is now fixed\nhttps://github.com/spring-projects/spring-framework/blob/master/src/reference/docbook/scheduling.xml#L383\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26153296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26611474", "body": "I have added a JIRA issue to track this (https://jira.springsource.org/browse/SPR-11005)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26611474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26639964", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26639964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26741224", "body": "I am going to close this one for now until we have a little more understanding about the use-case this covers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26741224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26751954", "body": "Now fixed (in a slightly different way).\n\nThanks for the original pull-request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26751954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27192117", "body": "Opened in error I assume\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27192117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28855943", "body": "Merged, with a few formatting tweaks and using map.entrySet() to iterate items.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28855943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28856185", "body": "Merged. You can just push things like this yourself if you want.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28856185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28871433", "body": "@wilkinsona Is there a JIRA for this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28871433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28911809", "body": "Would it be possible for you to submit these two issues as separate pull requests? Could I also ask if you have signed the Spring CLA?\n\nSee https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28911809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28912410", "body": "Thanks :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28912410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29031468", "body": "Great pull request! This has now been merged into master with a few minor tweaks.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29031468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29035665", "body": "Could you please raise a [JIRA](https://jira.springsource.org) providing a bit of background on why you would like this change.\n\nAlso could I check if you have signed the [CLA](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29035665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29255507", "body": "Nice work! Thanks, this has been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29255507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31677336", "body": "Merged to master. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31677336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31991425", "body": "I think this is the the wrong section. The default profile is not really specifically for spring-test (see `AbstractEnvironment.DEFAULT_PROFILES_PROPERTY_NAME`. We should probably add this in the \"Bean definition profiles and environment abstraction\" but it looks like that entire section is a bit light at the moment.\n\nAlso, your should ideally keep your commit message first line less than 50 chars (see http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31991425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31991831", "body": "I slightly amended the commit message to remove the `.` on the first line, indicate it was a documentation change and add a space after the first line:\n\n```\nRemoved reference to Cactus from documentation\n\nIssue: SPR-11280\n```\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31991831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31992759", "body": "Merged with a minor tweak to the troubleshooting section since we do hard-wrap at 90 chars.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/31992759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32005864", "body": "I squashed to a single commit and pushed to master.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32005864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32078226", "body": "Have you signed the CLA ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32078226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32192507", "body": "Is there a related JIRA issue for this pull-request? (http://jira.springsource.org)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32192507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32427402", "body": "SPR-9771 has been fixed, closing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32427402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32779404", "body": "Not sure that this is the case. I was under the impression that only `spring-core` needed the exclusion. Also the bullet list should probably use `*` rather than `.` for consistency with the rest of the document.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32779404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32794094", "body": "Sorry about the `*`, `.` confusion, I just assumed that they were interchangeable.\n\nFor me this appears to work:\n\n``` xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>temp</groupId>\n    <artifactId>temp</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <target>1.7</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework</groupId>\n                <artifactId>spring-framework-bom</artifactId>\n                <version>4.0.0.RELEASE</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>commons-logging</groupId>\n                    <artifactId>commons-logging</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n```\n$ mvn dependency:list\n```\n\n```\n[INFO] Scanning for projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building temp 0.0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-dependency-plugin:2.8:list (default-cli) @ temp ---\n[INFO] \n[INFO] The following files have been resolved:\n[INFO]    org.springframework:spring-core:jar:4.0.0.RELEASE:compile\n[INFO]    org.springframework:spring-context:jar:4.0.0.RELEASE:compile\n[INFO]    org.springframework:spring-expression:jar:4.0.0.RELEASE:compile\n[INFO]    org.springframework:spring-aop:jar:4.0.0.RELEASE:compile\n[INFO]    aopalliance:aopalliance:jar:1.0:compile\n[INFO]    org.springframework:spring-beans:jar:4.0.0.RELEASE:compile\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 0.902s\n[INFO] Finished at: Mon Jan 20 12:24:10 PST 2014\n[INFO] Final Memory: 12M/245M\n[INFO] ------------------------------------------------------------------------\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32794094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33239906", "body": "Merged with a very minor update.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33239906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33248711", "body": "Looks like this has been applied by Juergen.\n\nThanks for the PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33248711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33982389", "body": "Not problem. Done. You can always use `push -f` if you need to update an exiting pull-request branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33982389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34797222", "body": "Closing as I assume that this was opened in error.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/34797222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35354591", "body": "I assume this was opened in error?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35354591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35920558", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35920558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35921431", "body": "Merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/35921431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38953486", "body": "Thanks for the pull-request but I think we need to leave `DefaultKeyGenerator` as it is for compatibility reasons. If you upgrade to Spring 4.0 you'll find that `SimpleKeyGenerator` is now the default and it doesn't contain this issue.\n\nSee the note [here](http://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/htmlsingle/#cache-annotations-cacheable-default-key) and [SPR-10237](https://jira.spring.io/browse/SPR-10237) for some background\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38953486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38953645", "body": "Looks like @jhoeller has fixed this in a slightly different way. Cheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38953645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39196862", "body": "I think this change might break existing code which expects the current behavior. There is an [existing test](https://github.com/spring-projects/spring-framework/blob/v4.0.3.RELEASE/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java#L435) for this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39196862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39749062", "body": "Are you finding existing build folders that we have missed? Or is this just\na nicety?\nOn Apr 7, 2014 8:53 AM, \"Stevo Slavi\u0107\" notifications@github.com wrote:\n\n> Yes, true, it's agresive. I'm not aware of such package at the moment.\n> Lets assume that build package/dir is unlikely in future too. If it\n> appears, it can be covered with exception like:\n> \n> build/\n> !/spring-_/__/org/springframework/_*/build/\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/spring-projects/spring-framework/pull/511#issuecomment-39747794\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39749062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40796093", "body": "I wasn't even aware of this feature. Nice! I've merged to master and 3.2.x.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40796093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40796692", "body": "I don't think that we can apply this one in it's current form. See comments on 0cdc7dfdc8623341a3feef90b1d20a54226d8eb5\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40796692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41030314", "body": "I think the general consensus was to leave the generated POMs out. I'll close this for now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41030314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41049369", "body": "Good spot, now merged. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41049369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41055686", "body": "Rather than blanket exclude with exceptions I would rather keep the existing specific ignores.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41055686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56702377", "body": "The current approach for supporting multiple `basePackages` has been to call the scanner multiple times. For example that's how `@ComponentScan(basePackages={'com.test1', 'com.test2' ,'com.test3'})` works.\n\nIs there any specific reason why you want the functionality pushed down into the scanner?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/56702377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60284547", "body": "Fixed in 4.1.2 using auto-boxing (see JIRA for details).\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60284547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63861323", "body": "Wait. Did you sign the CLA ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63861323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84512896", "body": "Opened in error?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84512896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84513354", "body": "No problem.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84513354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/155521050", "body": "This seems like quite a specific use-case to add to the `DefaultConversionService`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/155521050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354589149", "body": "@dreis2211 Thanks for writing those benchmarks. I think you're right, running my samples again with the changes reverted showed no difference in startup time. I was convinced that it had made a difference but I guess not.\r\n\r\nI wish there was a quick way to tell if a method existed without the exception, but I guess it's not to be.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354589149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354589163", "body": "Closing due to https://github.com/spring-projects/spring-framework/pull/1628#issuecomment-354589149", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354589163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2088121", "body": "@cbeams The --XX:MaxHeapSize setting was added to the Windows build a little while ago [1]. I assumed that it would be harmless in the default build as well.\n\nNice to see how to run additional code after a task.  I searched so much, with no avail, for that info.\n\n[1] https://github.com/SpringSource/spring-framework/commit/8e7622bb8a6a078d92531b657f105cec953c4166#L0L11\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2088121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2088789", "body": "@cbeams I have made RegistrationPolicy.valueOf package scope. Is that OK with you?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2088789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2089176", "body": "That was my thinking. Plus if we ever removed the deprecated REGISTRATION_ values the public method on the enum would make no sense.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2089176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2504488", "body": "@KingBuzzer,\n\nThanks for raising this. These particular projects are merged into other projects and it was not my intention to change the dependency scope in the published POMs. Unfortunately it appears that the merge dependency is taking precedence and this is indeed a bug.\n\nSee https://jira.springsource.org/browse/SPR-10218 for more details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2504488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2538931", "body": "Commit f92f58d0b37c5bc03a355b9e3e1a0a99fe14478c has fixed this\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2538931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2718310", "body": "It does not look like project specific overrides are supported so we can't fix the shared settings.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2718310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2723516", "body": "@jhoeller Does this not reintroduce SPR-10304? If the typesToMatch is empty typesToMatch[0] will throw ArrayIndexOutOfBoundsException?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2723516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2723920", "body": "Doh! Oh yea... In my head I read typesToMatch.length == 1.  Having a thicky moment :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2723920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3155756", "body": "Whoops!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3155756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3302680", "body": "I think this issue may have been raised already (see [comments in SPR-8684](https://jira.springsource.org/browse/SPR-8684?focusedCommentId=90022&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-90022). If this is a different problem could you please open a new [JIRA](https://jira.springsource.org).\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3302680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3485152", "body": "SPR-10674\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3485152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3494054", "body": "SPR-10683\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3494054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368703", "body": "It was for `List<String>` -> `ArrayList` and was driven by the changes in 57a36f3f56852ac27ace62c1390ddc31bace17ac and a failing SpEL test.\n\nAre you seeing an issue that means `List` -> `List<String>` is also needed?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368809", "body": "First I have heard of that one. Will chat with him and see if we have an issue or at least a test to reproduce it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4570926", "body": "We were under the impression that this annotation would be ignored in JDK 7, I have added a JIRA issue that we will look to address before RC2:\nhttps://jira.springsource.org/browse/\n\n---\n\n@katmatt, we are having trouble replicating this, could you add a comment on the JIRA to help us reproduce it? Cheers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4570926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4761980", "body": "Sorry about that, I have raised https://jira.springsource.org/browse/SPR-11142 if you want to track.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4761980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812894", "body": "I am sure you are right, I have not actually used iBatis. What would be a better choice of name here? Just drop the SqlMap prefix?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812931", "body": "If it is real code, it won't work with Spring 4. Given the 3 day countdown I will change it as suggested and blindly assume that the real code doesn't exist :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4812931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6053872", "body": "Ahh yes, I missed that one. Now fixed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6053872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8280376", "body": "@candrews I've [added you](https://github.com/spring-projects/spring-framework/commit/d5bf6713edc9225023141d06692633a6f8b196d6) as an `@author` (and using your ID). Best we can do I'm afraid without rewriting git history.\n\nThanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8280376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16184277", "body": "FYI This update breaks a [Spring Boot test](https://github.com/spring-projects/spring-boot/blob/3352e60631c4bec64cd10e2bf495ec7fcd310427/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java#L93) where we use a `MockHttpServletRequest` but don't explicitly set a method.\n\n`getRequestMethod` returns `null`, this one exits then `RequestMappingInfo.getMatchingCondition` returns early also with `null`.\n\nWe can update the test to set the method but I thought it was worth raising.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16184277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/26439596", "body": "@rstoyanchev  AspectJ 1.9 beta isn't in `https://repo.spring.io/snapshot`. I think you need both `/milestone` and `/snapshot`. It's probably working on the CI and locally because it's in the Gradle cache. The build fails for me locally.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/26439596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14799973", "body": "I thought that we usually do add empty lines around the constructors.\n\nhttps://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java#L185-L186\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/14799973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/159115909", "body": "Good call. Will rework the PR. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/159115909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/159115927", "body": "Good suggestions. I've updated the PR. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/159115927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "QBNemo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/94618c4f37cfb00ed97c0a621de136eb3f801cab", "message": "Polish doc on RequestMappingHandlerMapping#isHandler"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/224e36948412b258a9e8f4336aa06e5f3645220b", "message": "Reuse constant in DispatcherServlet\n\nSee gh-1398"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/26101892c1b9fa5fe92a20a6bb3661ffada9f650", "message": "Fix typo\n\nCloses gh-1354"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1485", "title": "meaningful constant Ordered.LOWEST_PRECEDENCE", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1429", "title": "Override requiredContextClass() in WebApplicationObjectSupport", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "garyrussell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f9b319d3ba9d3141fd5edc4fde558daebd2c596f", "message": "Revert Incorrect MessagingTemplate Change\n\nThe change to \"optimize\" the template by not rebuilding the reply\nmessage when the original header channels was null was incorrect.\n\nWe need to null out those headers if they were originally null.\n\nIssue: SPR-15991"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e06c4d5116e35e21a4cfb3f202de5a290ae468c4", "message": "Timeout Overrides in Messaging Templates\n\nProvide a mechanism to override the configured send and receive\ntimeouts in the GenericMessagingTemplate.\n\n- overload `doReceive()` to take a receive timeout argument\n- for `sendAndReceive()` methods examine message headers for these\n  timeout values\n  - remove headers to avoid propagation\n  - avoid the unconditional rebuild of the reply message if the\n    original headers weren't present\n- also remove headers from simple `send()` operations\n- change javadocs for the setters to indicate they are now defaults\n- add properties to allow the user to override the header names used\n- change `TemporaryReplyChannel` to use `send` arg and change to static\n  - add package-protected ctor to avoid the compiler creating a\n    synthetic constructor for access\n\nIssue: SPR-15591"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e677342628847104265420a2cb5d3e35b7891caa", "message": "Add originalMessage to ErrorMessage\n\nIssue: SPR-15459"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/80bc8fc59605d962ba60b58d6c6a2ab38822f197", "message": "Implement MessagingException.toString()\n\nIssue: SPR-15091\nCloses gh-1284"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960276", "body": "Looks good to me.\n\nOne little nit...\n\n```\nlogger.debug(name + \" returned null from preSend, i.e. precluding the send.\");\n```\n\nWe usually use `if (logger.isDebugEnabled()) {...}` to avoid the string concatenation when debugging is off.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7005065", "body": "Hi @rstoyanchev ,\n\nWhat drove this change? I kind of liked the addition of the type to the log for classes that override `toString()`, but I suppose it's redundant for those that don't.\n\ncc/ @artembilan\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7005065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15836850", "body": "We should either remove these two, or allow subclasses to somehow override the default behavior. In Spring Integration, we now permit these headers to be mapped (if they hold a `String` instead of the default `MessageChannel`).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15836850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15836885", "body": "e.g. \n\n```\nprotected String[] getTransientHeaderNames();\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15836885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119400775", "body": "@rstoyanchev It turns out this change was incorrect; we need to null-out the channel headers if they were originally null.\r\n\r\nDo you want me to submit another PR, or would you mind just reverting this line?\r\n\r\nThanks (and my apologies).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119400775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119407953", "body": "Sorry - I just issued a new PR on that branch (having first reset it to master).\r\n\r\nI issued another PR: https://github.com/spring-projects/spring-framework/pull/1440\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/119407953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Skarafaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3d290165fb6b37544d23755f5182fac3478210f4", "message": "Find exact matches in WebJarsResourceResolver\n\nPrior to this commit, resolving resources from webjars using the\n`WebJarAssetLocator.getFullPath` could lead to multiple candidates,\nsince this method is trying to find *any* resource matching that path\nunder the given webjar location.\n\nThis commit replaces that call with\n`WebJarAssetLocator.getFullPathExact`, which avoids those multiple\nmatches and only resolves resources if the given path is exact.\n\nIssue: SPR-15526\n(cherry picked from commit e2aa117ff9)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299715338", "body": "Wrong branch!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299715338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299825645", "body": "Of course! https://jira.spring.io/browse/SPR-15526\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299825645/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "andreykaipov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9c226aa742942e4dbfbc5395f80cc8059cbf3831", "message": "Minor typo fix: form -> from\n\nCloses gh-1411"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298368289", "body": "@pivotal-issuemaster Obvious fix", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298368289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "svorcmar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf83e4e8612512ef51272d8a7dd8533686e8a4e4", "message": "Use original query string of forwarded request\n\nPrior to this commit, the AbstractFlashMapManager has used the\noriginating URI but the query string of the forwarded request. That\nresulted to FlashMap not being matched even when both originating\nURI and query string matched the FlashMap attributes. The originating\nquery string is now used to match the forwarded request.\n\nIssue: SPR-15505"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "baot": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/44c31a6aad26ce2a4e7225e93e6fb26612f07b2c", "message": "Fix duplicate STOMP subscription id issue\n\nIssue: SPR-15543"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonathanborenstein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/13dc0cd828d44d303f770c56c116dcb6f290b19f", "message": "Use Java 8 forEach method on Map"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278571058", "body": "https://jira.spring.io/browse/SPR-15238", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278571058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278609661", "body": "https://github.com/jonathanborenstein/spring-framework/commit/79d8cf0acb76069e46e2544a7400313a6cefbb64\r\n\r\nI did add two more uses of it, but didn't make a pull request. Would it be applicable in either of those situations?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278609661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278611901", "body": "Fair enough. Do I get any credit for the change?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278611901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278615098", "body": "Also, about the getOrDefault method, are both the get and default value initiated at the same time, which is the reason that it is slower?\r\n\r\nFor example \r\n\r\n<code>\r\n@Override\r\n\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\r\n\t\tif (shouldShadow(name)) {\r\n\t\t\treturn this.classCache.getOrDefault(name, doLoadClass(name));\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.enclosingClassLoader.loadClass(name);\r\n\t\t}\r\n\t}\r\n\r\n<code>\r\n\r\nWhy would doLoadClass(name) be more expensive? I thought it would only be called if a null value was found.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278615098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282800175", "body": "Did you do something like this instead?\r\n\r\nif (clazz.getDeclaredAnnotation(annotationType) != null){\r\n\t\t\t\treturn true;\r\n\t\t\t}", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282800175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282814369", "body": "https://github.com/spring-projects/spring-framework/pull/1338 - I updated the patch2 with the getDeclaredAnnotation method for the findAnnotation methods where the first parameter is an AnnotatedElement and for when the first parameter is a class. Also for the isAnnotationDeclaredLocally method.\r\n\r\nI should have made this one pull-request/JIRA issue to begin with.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282814369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282816692", "body": "https://github.com/spring-projects/spring-framework/pull/1338/files\r\n\r\nThat's the change I just made. It appears an Annotation array does not even need to be instantiated for both the findAnnotation methods I've updated.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282816692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288426494", "body": "I thought that since the WebClient is part of the WebFlux module, it should be used in those tests. I think it also might be simpler to understand than the RestTemplate.\r\n\r\nWhat are the proper use cases for certain classes in the WebFlux module? Why even use a RouterFunction when you could just use the RequestMapping and return a Flux?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288426494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288436321", "body": "Also, there are very few examples out of all the tests showing how to actually use the post method for the WebClient.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288436321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288498223", "body": "Hmm. I definitely think some sort of side by side comparison should be used with a RestTemplate and a WebClient, just to see how they both work and how they can be used.\r\n\r\nAs far as the WebClientIntegrationTests, it's not using a RouterFunction, I don't think.\r\n\r\nThere's just very little in terms of showing how a WebClient interacts with a RouterFunction. And there is nothing showing a WebClient posting to a RouterFunction.\r\n\r\nThat's why I thought this commit might be worthwhile, at least you can see a post request to a RouterFunction. Maybe it needs to be cleaned up a bit.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288498223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289067757", "body": "For WebClientIntegrationTests, you can replace the get() methods with delete() and it still passes.\r\n\r\nAlso, the RouterFunction returns a ServerResponse, but would it be better to return an EntityReponse?\r\n\r\nOr how do you get the body out of a ServerResponse object?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289067757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297181326", "body": "https://jira.spring.io/browse/SPR-15484", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297181326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21429854", "body": "I use STS and import using Gradle. When I download and import using Gradle I'm getting this error:\r\n\r\nDescription\tResource\tPath\tLocation\tType\r\nThe container 'Project and External Dependencies' references non existing library '/home/jon/Desktop/spring-framework-master-E/spring-core/build/libs/spring-objenesis-repack-2.5.1.jar'\tspring-jdbc\t\tBuild path\tBuild Path Problem\r\n\r\nIt also happens for the cglib jar as well.\r\n\r\nNot sure why this is happening.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21429854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21429929", "body": "Both errors are happening on each Spring Module.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21429929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21430022", "body": "Thanks. I'm guessing it could be that.\r\n\r\nI was wondering if it was a local problem, but that could certainly be it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21430022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21440288", "body": "I looked at their Twitter account and it says they fixed it, but I'm still getting that same error.\r\n\r\nDescription\tResource\tPath\tLocation\tType\r\nThe container 'Project and External Dependencies' references non existing library '/home/jon/Desktop/spring-framework-master-F/spring-core/build/libs/spring-cglib-repack-3.2.5.jar'\tspring-aop\t\tBuild path\tBuild Path Problem\r\n\r\nI'm posting the error here because I thought it had to do with this specific commit. It seems to be only for the cglib and objenesis jars.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21440288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21468850", "body": "That did fix the problem. Thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21468850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lc-nyovchev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e80de55929e32c00b0677574617ed0fa780ce880", "message": "Added httpOnly cookie ResultMatcher"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109849138", "body": "Fixed typo", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/109849138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "olegz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/299b9d60fd40e70e32c8b91eb737586ca656ee94", "message": "SPR-15481 Fixed AnnotationUtils.getValue() operation\n- Fixed AnnotationUtils.getValue() operation to ensure it re-throws AnnotationConfigurationException instead of swallowing it (as it is done in few other operations in AnnotationUtils)\n- Added test\n- Removed unnecessary '@SuppressWarnings(\"unchecked\")'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtigger": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33d7816de38aa7b3040667b1717722206609fd1f", "message": "Remove extraneous asterisk\n\nCloses gh-1397"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234032950", "body": "Figured it out.  My commits were as \"pivotaljohn\" but submitted PR as \"jtigger\". :P\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234032950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "KingBuzzer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/cf50a9a1edd24af61abadaab9b04b6cde0f42e91", "message": "Fix Selenium links in testing.adoc\n\nSelenium wiki & javadoc moved from google code to github.\nAlso a fix to a link for Geb.\n\nCloses gh-1392"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233197812", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233197812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294922523", "body": "I have signed and agree to the terms of the Spring Individual Contributor\r\nLicense Agreement.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294922523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2504073", "body": "Then you cannot use spring-orm and transitively depend on spring-jdbc and spring-tx for instance. This will probably break a lot of builds.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2504073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "michael-simons": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/b426d847e696d1862229b91e18b8fdd496f6d175", "message": "Improve unless condition in caching doc\n\nSee gh-1387"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/33fd94c0982c0a7e9101970e751f3f41eb501042", "message": "Polish condition in caching examples\n\nCloses gh-1386"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208734472", "body": "Welcome.\n\nSt\u00e9phane, one unrelated questions: Why says Github \"This pull request is closed, but the michael-simons:fix-appendix-typo branch has unmerged commits.\" ? Is that a thing on my side or on the way you merge PRs?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208734472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "romeara": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/4a890226ea3c3502809c21b7cd652ba8a43c4c94", "message": "Support for multiple default content types\n\nEnhance FixedContentNegotiationStrategy and places where it is exposed\nto also accept a list of media types.\n\nIssue: SPR-15367"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289597250", "body": "@rstoyanchev - I'd be more than happy to update this PR per your recommendations. The first point makes sense, and looking more into the documentation, it seems the strategies are meant to assume that the client did not use an accept header, so I'll just remove that check.\r\n\r\nThe second was my first thought on this enhancement, but I wasn't sure if the group would be comfortable with the change in existing behavior it would cause. I agree having people add \"*/*\"themselves (and documenting why they would want to) is a good alternative which prevents adding additional APIs.\r\n\r\nI did my best to follow the other contribution guidelines - if anything else needs fixing, please let know and I'll be more than happy to adjust it as well", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289597250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289617952", "body": "@rstoyanchev - I have made the requested changed and squashed/force-pushed to update the branch. Let me know if any further changes are desired.\r\n\r\nNote: In `FixedContentNegotiationStrategy`, I overloaded the constructor to have the `List<MediaType>` signature mentioned, and another with `MediaType...` which is backwards compatible with the previous constructor - please let me know if you want that altered.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289617952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gavvvr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5fd03e45f6f1e30f75a4df43a9e5d201c5f9ffc8", "message": "Fix typo\n\nCloses gh-1383"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pivotaljohn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9287bbb91a9fbaf43549585fb872e731e995943f", "message": "Fix typo in AfterReturningAdviceInterceptor JavaDoc\n\nSee gh-1382"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234028182", "body": "Thought I had!  Followed through the link, and clicked the \"Sign as Individual\" button.... but check currently _still_ says that the CLA is not signed... :(\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234028182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "xyloman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9a9166622eb08e5445ae64daea7ada56fd735d41", "message": "Fix ForwardedHeaderFilter getRequestURL()\n\nPreviously ForwardedHeaderFilter would return the same StringBuffer for every invocation. This\nmeant that users that modified the StringBuffer changed the state of the HttpServletRequest.\n\nThis commit ensures that a new StringBuffer is always returned for ForwardedHeaderFilter.\n\nIssue: SPR-15423"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akarnokd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/68cc57549a56480b723b6112e1bee0de114eeda1", "message": "Restore correct order of terminated flag check"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3312ef0aa23999782264f91fd550b4298be8e4b4", "message": "Refactor AbstractEmitterSubscriber"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292219556", "body": "> For onTimeout it comes from the underlying runtime ...\r\n\r\nI'll restore the original direct emission\r\n\r\n> For the send method crashing ...\r\n\r\nWill restore the original pattern\r\n\r\n> Any pointers on why the CAS+set may not be enough? Curious to learn more.\r\n\r\nI'm not aware of any studies about this, but all of RxJava 2 and Reactor 3 are written via the getAndIncrement() approach. After thinking more about the code, it is likely correct in this case.\r\n\r\n > It orders error signal checking ahead of getting the item but complete signal is after.\r\n\r\nI guess you wanted to delay errors after items. I'll update the code.\r\n\r\n> Also at the end it calls the taskExecutor directly ...  added try-catch protection\r\n\r\nI forgot about that. I'll update the code for that as well.\r\n\r\n> ResponseBodyEmitter .. synchronized(emitter){ ... }\r\n\r\nIsn't `ResponseBodyEmitter` already synchronized on its methods?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292219556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292239147", "body": "https://github.com/spring-projects/spring-framework/commit/43eea41dd6b7260e6ee4c226ece23498e65eafbc#diff-8dc8847c9dbfc64ca96195331492e86eR294\r\n\r\n`if (this.terminated) {`\r\n\r\nThis change is incorrect because the request() before may result in an item and an onComplete signal and this only picks up the complete signal. The correct order is: read terminated, read element, if terminated and element is null -> signal terminated.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292239147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ameyjadiye": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/472954bbb7ea1b385d321aebd19f641d81ad0535", "message": "Polish javadoc\n\nCloses gh-1370"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stonio": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/88e3665d9dafb820511438c5a73f2532d13c5bab", "message": "Update Apache Licence 2.0 URL\n\nCloses gh-1278"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/90388e4701add18ec060e6b2fb219f54c9474429", "message": "Replace size() check with isEmpty()\n\nCloses gh-1333"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/412947a53f60a61a42d7c63c94053f31f94ac95e", "message": "Polish CollectionFactoryTests\n\nCloses gh-1334"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7d062df9926c3bc3fded582479e488ad95a262b0", "message": "Use String#isEmpty()\n\nCloses gh-1335"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281632893", "body": "@snicoll All my commits squashed into a single commit.\r\nMay be backported to 4.3.x branch.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281632893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "linbaiye": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c8fd4cb5840f02881a6e201767c9609642c08c86", "message": "Remove a redundant word\n\nCloses gh-1361"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aviskarBasnet": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bf040c3dc1a8ab927a91f1a91458a3ab3d7cef4b", "message": "Polish doc\n\nSee gh-1349"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284215327", "body": "@snicoll You're welcome!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284215327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pistriak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8417a73913a2352fc988a63d60872f0a98f51734", "message": "Polishing\n\nCloses gh-1340"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kmiya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e95391765ce7632bcef77b957855f2e100c5fee0", "message": "Fix typo in Javadoc"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hengyunabc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2723bd092c5085750dca18aa74cfa8782888b972", "message": "Fix typo\n\nSee gh-1327"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46121873", "body": "I hava updated the test:\nhttps://gist.github.com/hengyunabc/a4651e90db24cc5ed29a\n\nIt seems that myTrimAllWhitespace2 is a better algrithom.\nIf consider about Unocide, like myTrimAllWhitespaceUnicode, it will be very slow.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46121873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "JanespenCerpus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5158207fe08585692f19b9c4e080bddef9c17ea3", "message": "Passing the uri as a string to the MockMvc request builder will cause an encoded uri to become double encoded."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msysyamamoto": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6aa300d733b696628f0c80d3ede10f1676527c1a", "message": "Fix Javadoc in ContentResultMatchers\n\nCloses gh-1322"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbrimley": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/3476d10efad494094829ac28e3bee06c074fc57a", "message": "Honour ErrorHandler if `Cache.put` fails\n\nThis commit makes sure that the `ErrorHandler` is invoked if the cache\nfails to put an element (be it in the main cache or the exception cache).\n\nSee gh-1292\nIssue: SPR-15188"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271928912", "body": "One more thing, when is the M5 5.0.0 Milestone out?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271928912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272287481", "body": "I've added a new test `CacheResultInterceptorTest` for `CacheResultInterceptor` that now tests that a method body value is returned correctly when the cache is in error.  It also checks that the `CacheErrorHandler` is called correctly twice in this scenario, once for the pre method get cache failure and once for the post method put cache failure.\r\n\r\nSo with your `CacheResultInterceptor` it will fail, with my proposed fix it will pass.\r\n\r\nApologise if the the format or anything else is not quite to standard.\r\n\r\nHappy to take further advice and tidy up the test.\r\n\r\nCheers\r\nDavid", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272287481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272468555", "body": "@snicoll Do you want me to tidy up according to the codacy/pr failure?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272468555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275124001", "body": "@snicoll At a high level, it's about providing the same error handling semantics as are provided if you use the @Cachable annotation, the behaviour with @Cacheable is that, on cache failure it always calls the Error Handler for the get (pre-method) and the put (post-method).\r\n\r\n@CacheResult presently only calls the error handler on the get (pre-method) but not on the put (post-method), which has the result of short-circuiting the call.\r\n\r\nI think it's a small oversight on the handling of errors in the @CacheResult annotation.\r\n\r\nMy pull request fixes this and has @CacheResult behave the same way as @Cacheable.\r\n\r\nFixing this will also allow @CacheResult to play nicely with circuit breaker patterns.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275124001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277700603", "body": ":thumbsup:\r\n\r\nPleased to help.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277700603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "grimreaper": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/59bba3763dc296e3a7c9557ecb0af7f78069e647", "message": "Polish javadoc\n\nCloses gh-1311"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/938c6a2acdce13f20bfb58a599f961674d9170dc", "message": "Polish javadoc\n\nCloses gh-1312"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hdpe": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/654e14a86a5035d5cc061fb8f6bb44cdc3b41e7c", "message": "Fix Javadoc in UriComponentsBuilder"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarioAriasC": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/c33ad15b281530f204fef4add2a66b70566d1565", "message": "Add Kotlin JDBC extensions\n\nIssue: SPR-15158"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1af905ca0a97c1e19a60e63a1d62469888fbb12a", "message": "Add Model and ModelMap Kotlin extensions\n\nIssue: SPR-15119"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Shredder121": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f1c7e0f5b220ab00a2354891a49c9f7e59edadb8", "message": "Check for null on the argument instead of the message\n\nSee gh-1307\nIssue: SPR-15196"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/159725843", "body": "I'd leave the original method in there, but I don't know what the Spring Team generally does?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/159725843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/159821960", "body": "Binary compatibility is a delicate thing.\n[It can all be found in JLS 7 Ch. 13](https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html#jls-13.4.15).\nSo adding a return type is not binary compatible.\n\nI also like the builder style much better, but I don't know how Spring views binary compatibility.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/159821960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/160674583", "body": "I guess you're right. Sorry for interfering.\nThen disregard my comment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/160674583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191912245", "body": "I signed one for Spring Boot, but I need to sign one for each project right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191912245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191969701", "body": "Sorry to ask.. who's the project lead for the Spring Framework project?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/191969701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192209403", "body": "```\nThank you but our records indicate that you have already accepted the individual contributor agreement.\nIf you are interested in participating in an additional Spring project, please contact the appropriate project lead and indicate that you have already signed the Spring Contributor Agreement.\nOnce signed agreement covers participating in as many Spring projects as you need.\n```\n\nWell. that answers the question.\n\n@jhoeller So I have already signed it.\n\n```\nI have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192209403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192228380", "body": "I updated the copyright header to match this year, so could you also update that?.\nAnyway, thanks for integrating this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192228380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192234091", "body": "That's okay, just figured you might have missed that.\nJust wanted to let you know.\n\nThanks, have a good day!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192234091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275662139", "body": "Good to hear that it's picked up so quickly!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275662139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275663627", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275663627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/116505309", "body": "Wouldn't this collapse `http://example.com///` to `http:/example.com/`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/116505309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "echoAlexey": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/644b0b8bebaff53022bb58c3417980965920d9ef", "message": "Fix Javadoc for CronSequenceGenerator\n\nCloses gh-1294"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jvz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e0100ea3f189e0ff56b5780d07e1dac159f57245", "message": "Update logging documentation to include Log4j 2\n\nThis also updates the version numbers provided in the sample pom.xml\nsnippets for configuring logging for SLF4J and Log4j 1.x. A sample\nlog4j2.xml file is also given with the same configuration as\ndemonstrated in the log4j.properties example. The link to the Log4j 1.x\nsite has been fixed to point to the 1.2 URL (do note that Log4j 1.2 is\nend of life and is not compatible with JDK 9+).\n\nSee gh-1279"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eiiches": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/613e65f043e36324577eed14e08da3d83b2fa520", "message": "Fix URL decoding issue in reactive @RequestParam\n\n%-encoded strings were injected undecoded into @RequestParam variables,\nwhich does not coincide with spring-webmvc behaviour. This commit\nfixes AbstractServerHttpRequest.getQueryParams() to correctly return\ndecoded name-value pairs.\n\nIssue: SPR-15140"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danielfernandez": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8b7f3a65ed50f176b739d9723d8deff1d4362171", "message": "Fix exception if no RequestDataValueProcessor is present\n\nThis modification fixes the way AbstractView retrieves the\nRequestDataValueProcessor bean, correctly returning null if there\nis no bean of such type at the Application Context.\n\nThis avoids an exception in RedirectView (which extends AbstractView)\nwhen trying to post-process the URL generated for redirection, when\nno RequestDataValueProcessor exists.\n\nIssue: SPR-15136"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a98be035a3ed1b7f37b6ca6573863118672cda4a", "message": "Make the signature of RHOM#writeAndFlush() more flexible\n\nThis modifies the signature of\nReactiveHttpOutputMessage#writeAndFlush(...) in order to\nbe able to use Flux<Flux<DataBuffer>> objects as arguments of\nthis method.\n\nIssue: SPR-14952"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vpavic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/83beb9d57d558d1386c194b7792c88134105dfa4", "message": "Set MockSessionCookieConfig#maxAge default to -1\n\nIssue: SPR-15142"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "trisberg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/5c7aee7d38c3c2d37ae1abc61864736ba5a71c7e", "message": "Updating MySQLMaxValueIncrementer to not rely on MYISAM\n\nWe should no longer rely on MYISAM for the sequence table since this\nengine might not always be available. After this change the storage\nengine used by the sequence table can be MYISAM or INNODB since the\nsequences are allocated using a new connection without being\naffected by any other transactions that might be in progress.\n\nTo allow users to fall back on the original functionality of using\nMYISAM tables for the incrementer, we add a `useNewConnection` flag to\nindicate whether or not to use a new connection for the incrementer.\nThis flag defaults to true.\n\nIssue: SPR-15107"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3897378", "body": "Hi Chris, updated the commit message and rebased to current 3.1.x\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3897378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271956166", "body": "Rebased and squashed the commits. Added a `useNewConnection` flag to allow for falling back on original functionality by setting this flag to false.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271956166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272185886", "body": "We might consider having the default for \"useNewConnection\" to be false in 4.3.x to maintain backwards compatibility and then flip that to true in 5.0.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272185886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "markhobson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2ce2f7d9a5dea5a81d17e2ee64885ac3bf1ac807", "message": "Introduce mime/media types for application/rss+xml\n\nIssue: SPR-15109"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "moores-expedia": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/79c202ab14f597e499eb15fc737bb953f7f9e0a3", "message": "Call getColumnRowMapper() to create the row mapper; prevents requirement to override extractReturnedResults()."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267083203", "body": "@snicoll  here you go: https://jira.spring.io/browse/SPR-15018\r\n\r\nthanks,", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267083203/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "schjan79": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/ba826f1026b337ce7739d45f7e12af4b61c8cfea", "message": "MockRestRequestMatchers can match query params\n\nIssue: SPR-14995"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265283174", "body": "Hi,\r\nI'm a bit confused about the result of codacy:\r\nthere are 2 types of issues, one of them is fixed automatically. The other one says : \"JUnit tests should include assert() or fail()\". The same pattern is used as before (for example at line 44 in class MockRestRequestMatchersTests: public void requestTo() throws Exception {) which means the asserts are in the match method of request matchers returned by the factory methods.\r\n\r\nPlease give me an advice how to fix it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265283174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265849160", "body": "#SPR-14995", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265849160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "bedrin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8315a4033feea39f04a14c0b088e634b13fe774c", "message": "Add consumes attribute to @GetMapping\n\nIssue: SPR-14988"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91230330", "body": "Ok, will revert back to explicit import", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91230330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91231280", "body": "@sbrannen also I haven't seen this requirement in the code style ( https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style ) - worth adding and probably configuring codacy appropriately ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/91231280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fdesu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e4ed1f6ffd899e41140f57ff33d3065d5951545e", "message": "ChannelFutureMono renamed to FutureMono\n\nIn the latest reactor-netty there is renaming\nof ChannelFutureMono class to FutureMono. Thus\nbuild fails on the latest master."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246743756", "body": "@snicoll Can you please review and maybe push further this PR?\nThank you in advance.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246743756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249814748", "body": "Thanks a lot for your opinion @snicoll.\nAgreed, with you, but, yes, let's just wait for an opinion from @jhoeller \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249814748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252880225", "body": "@snicoll \nI've updated PR with your suggestions, and added some more tests to cover changes.\nCould you please take a look?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252880225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258261230", "body": "@jhoeller resolved the original issue with more extensive changes\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258261230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266542022", "body": "@sbrannen \r\nThank you for your remarks, will fix them asap!\r\nCan you please advice if [such declarations](https://github.com/spring-projects/spring-framework/pull/1255/files#diff-d8ea9b54580f6b93b075124892369a62R197) permitted. Or should I pull this classes in the _different files_/_into some class as inner classes_. \r\nAsking because it is forbidden by the Code Style.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/266542022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267824260", "body": "@sbrannen \r\nI amended previous commit and hope that current one is easier to review", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267824260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nicklasholm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9a7028ad0ded832618b76d935b4f7ffe46a0d6fd", "message": "Javadoc fix"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rocketraman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/fada91e538590e2eab0b05230a8a449ca41af695", "message": "Treat Kotlin nullable as non-required\n\nWhere `isOptional` is used, also check for `isNullable` i.e.\nvalues are not considered required if they are Kotlin nullables:\n- spring-messaging: named value method arguments\n- spring-web: named value method arguments\n- spring-webmvc: request parts\n\nThis means that Kotlin client code no longer has to explicity specify\n\"required=false\" for Kotlin nullables -- this information is inferred\nautomatically by the framework.\n\nIssue: SPR-14165"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219235319", "body": "Notes on submission / pending work:\n- I put the kotlin-specific code into a separate module `spring-core-kotlin` to avoid adding the kotlin compiler to the `spring-core` module (inspired from `spring-beans-groovy`).\n- I wasn't sure where to add tests for this. My first though was `MethodParameterTests`, but currently it contains very little in the way of tests. Guidance is appreciated.\n\nOtherwise the implementation turned out to be quite simple and concise.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219235319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219441827", "body": "> Thanks for this PR, I only had a quick look but I would be in favor of not creating a new spring-core-kotlin, instead you could add kotlin dependency as an optional one. After that I will make a detailed review of your PR.\n\nDone!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219441827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222792876", "body": "NOTE: Another place we could use this functionality is when `@Inject` or `@Autowired` is used, the Kotlin nullable information could be used to determine if the value is required or not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222792876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/227478358", "body": "@sdeleuze Ping. Looks like it needs another rebase, but would appreciate a review.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/227478358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245685213", "body": "> Good idea to support that also for @Inject, feel free to add that to your PR and update the title of this JIRA issue to make is less specific.\n\nIt looks more complicated to do this [1], so I'd prefer to have this pull request reviewed as-is for now, just to keep things as simple as possible. We can add the `@Inject` functionality in a subsequent pull.\n\n> Sorry for the delay and thanks for your updated PR. I have added comments on the relevant lines of your commit.\n> \n> Could you also rebase that on top of the new master (Spring Framework 5.0) and add some Kotlin unit tests to check that works?\n\nI have updated the pull with all of your comments taken into account. Thanks!\n\n[1] It looks like a variation of `RequiredAnnotationBeanPostProcessor` is needed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245685213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246015899", "body": "Ping @sdeleuze for review.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246015899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mp911de": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/6261106a93099d714fd38f0b7007f0a40a662170", "message": "Fix TLS detection in URLs for Netty Client RequestFactory\n\nDo not check on non-specified port when scheme is https.\nEnables SSL for https URIs with a specified port.\n\nIssue: SPR-14889"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345027237", "body": "Chiming in here as Lettuce has a similar concept of suspending reads along a Pub/Sub (shared subscriptions) notion. Command parsing is suspended if subscriber demand is satisfied. Pub/Sub can be shared across multiple subscribers and they need to specify their backpressure behavior when obtaining a publisher to not prevent other subscribers from message processing and to not drop messages.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345027237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ejain": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d7b68f8b914c0c0ad698a6c0f66785e192df628c", "message": "Escape (( and )) to prevent asciidoc processing\n\nSee http://asciidoctor.org/docs/user-manual/#user-index\n\nCloses gh-1225"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rand0m86": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/2980e592980e67dd41a0b2f5a079a8d82a252f87", "message": "Fix javadoc syntax\n\nSee gh-1203"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "englishman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/50a44aab5456b9747845b13483e0f2222d76ce60", "message": "Import format fix according to Code Style\n\nCloses gh-1222"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "soldierkam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8143e5fe20dbee05a16554283f4f4b7fbd285051", "message": "HttpClient instance should be shared for each call"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/e5158d47e08e9edc68db6b2b59162b33c5819e26", "message": "EncoderHttpMessageWriter tries to send wildcard type in response header"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/956", "title": "Fix AntPathMatcher.isPattern for URI templates", "body": "I'm not sure but I think AntPathMatcher.isPattern(\"/{bla}.jpg\") should return true.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167647030", "body": "Yes, I did some profiling. Some number before and after (1 minute test):\n\n| Method | Before | After |\n| --- | --- | --- |\n| java.lang.StringBuilder.toString() | 169MB | imperceptible (<50kB) |\n| java.lang.AbstractStringBuilder.expandCapacity(int) | 327MB | imperceptible (<10kB) |\n\nI know that this numbers are app-specific, but I cannot share code. \n\nI signed ICLA today.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167647030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/174332417", "body": "Ups :( I moved my master branch. Now I cannot reopen this PR. Can I create new PR?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/174332417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185209519", "body": "Thanks for merge! My name is 'Marcin Kamionowski'\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/185209519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250300919", "body": "Done https://jira.spring.io/browse/SPR-14763\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250300919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "joshlong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/9b87ea017bc58c0921c0ba20cc1ff099c42eea67", "message": "fix spelling of word 'recommendation'\n\nthis PR fixes the spelling error for the word 'recommendation'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kosmaty": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/0ada3f2dab24f4aa843bf4ce82c7c048a730393e", "message": "Documentation formatting fix\n\nRemoved unnecessary quotation marks that caused improper rendering\nof in-line code.\n\nCloses gh-1180"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/906827ea927a1f68fc4aec72279a9b7b29124085", "message": "Add missing quotation mark\n\nCloses gh-1181"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/commits/eef41fd8abb9234bb857a55142bb20265e84a0a2", "message": "Fix doc style\n\nCloses gh-1172"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "williamhoyle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1711", "title": "SPR-12756: Local visibility for writes to caches with transactional decorators", "body": "This patch adds an alternative to the TransactionAwareCacheDecorator that addresses issues raised in SPR-12756 - it makes writes to decorated caches visible within the scope of the transaction.\r\n\r\nIt is intended to be minimally obtrusive. The current interface is not changed beyond adding a `setCacheDecoratorFactory` method to the `TransactionAwareCacheManagerProxy` to allow the strategy to be selected. The behaviour defaults to use the existing `TransactionAwareCacheDecorator`. ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "burka": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1699", "title": "Take brotli encoding into account for caching", "body": "We use a BrotliResourceResolver to deliver pre compressed content. If we use the `CachingResourceResolver` including `ResourceHandlerRegistry.resourceChain(true)` we cache brotli compressed content and deliver it to only gzip aware clients.  This fix resolves that by taking the brotli encoding into account. As all brotli aware browsers most likely supports gzip I think those two ifs are fine :-)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrey916": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1698", "title": "Polish: Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\"", "body": "Polish: Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\"", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vladad": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1695", "title": "Tokenizer - removing unnecessary boxing", "body": "Instead of \"Integer.valueOf(ch)\" can be simply \"(int) ch\"", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "konrad-kaminski": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1694", "title": "Return correct return type for Kotlin suspending functions in MethodP\u2026", "body": "\u2026arameter.\r\n\r\n    Return type for Kotlin suspending functions (as returned by\r\n    MethodParameter#getParameterType and MethodParameter#getgenericReturnType\r\n    methods) is incorrect. The true return type is the generic parameter\r\n    of the last parameter of the method.\r\n\r\n    This change modifies the behaviour of the aforementioned\r\n    methods so that they work correctly for all cases.\r\n\r\n    Issue: SPR-16515", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1375", "title": "SPR-15413: Add Kotlin coroutines for ListenableFuture", "body": "Prior to this commit there was no support for converting Kotlin\r\n**coroutines** to/from **ListenableFuture**. Following that change a number of\r\nfunctions will be available for such conversion.\r\n\r\nSpecifically these functions are introduced:\r\n\r\n - // for converting suspending lambda to ListenableFuture\r\n   `fun <T> listenableFuture(context: CoroutineContext = CommonPool,\r\n       block: suspend () -> T): ListenableFuture<T>`\r\n\r\n - // for converting Deffered into ListenableFuture\r\n   `fun <T> Deferred<T>.asListenableFuture(): ListenableFuture<T>`\r\n\r\n - // for converting ListenableFuture into suspending function\r\n   `suspend fun <T> ListenableFuture<T>.await(): T`\r\n\r\nThe code in this PR draws heavily on the code from https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-jdk8/src/main/kotlin/kotlinx/coroutines/experimental/future/Future.kt. This is why Roman Elizarov is also an author.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "av-pinzur": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1689", "title": "SPR-16505 - getReader/getInputStream retaining previous result", "body": "SPR-16505", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1688", "title": "SPR-16499 - MockHttpServletRequest.getReader vs. getInputStream", "body": "Issue: SPR-16499", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cruftex": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1687", "title": "SPR-16501: add caching support for cache2k", "body": "[cache2k](https://cache2k.org) is one of the [best performing Java caches](https://cruftex.net/2017/09/01/Java-Caching-Benchmarks-Part-3.html) with a hit rate efficiency similar to Caffeine.\r\n\r\nThe jar size of cache2k is smaller than the currently available alternatives like EHCache and Caffeine. Although its small jar size it comes with XML configuration and JMX support.\r\n\r\nThe direct support of cache2k makes use of the build in `null` value support which leads to less overhead than Caffeine or using the JCache API.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "breglerj": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1661", "title": "SPR-16460 - Add SAP HANA to common database platforms", "body": "Issue: SPR-16460", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "meltsufin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1660", "title": "SPR-16468 - Default to MySQL55Dialect based on InnoDB", "body": "`MySQL5Dialect` set currently as default is based on the MyISAM storage engine, which is not recommended.\r\nMySQL 5.5 has been out since 2010. So, it's pretty safe to go with it as the default dialect.\r\n\r\nRelated to https://github.com/spring-cloud/spring-cloud-gcp/issues/392.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363133195", "body": "@snicoll [Done](https://jira.spring.io/browse/SPR-16468).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363133195/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "logart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1655", "title": "SPR-16425 - Remove square brackets around stringified collections", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pebo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1653", "title": "SPR-14818: Added MissingHeaderException type", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165186673", "body": "Don't know but the package contains similar exceptions like MissingPathVariableException", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165186673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165188692", "body": "Agree with the added complexity. I found https://jira.spring.io/browse/SPR-14818 when trying to return a custom error message for missing headers in the   ResponseEntityExceptionHandler#handleServletRequestBindingException callback. Now my workaround is to check the message text of the ServletRequestBindingException for the text \"Missing request header\".. is there a better way to implement the ResponseEntityExceptionHandler callback?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165188692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "rahulsh1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1635", "title": "SPR-16326 - Add bean details for ImplicitlyAppearedSingletonException", "body": "Captures and appends related details for the bean that resulted in this ImplicitlyAppearedSingletonException along with the exception", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354038348", "body": "@snicoll, added [SPR-16326](https://jira.spring.io/browse/SPR-16326)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354038348/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "agent-ost": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1618", "title": "Let Netty Webclient optionally follow redirects.", "body": "Issue: SPR-16277", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "boroborome": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1613", "title": " SPR-16355 - Add method mockAutowired and getBean to auto mock Autowired fields, t\u2026", "body": "Add method mockAutowired and getBean to auto mock Autowired fields, then it will be easy when mock some complex server with many Autowired fields.It's a new feature.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355490582", "body": "@snicoll I don't known where to create a issue.please give me a link?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355490582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355871509", "body": "This is the issue number : SPR-16355", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355871509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "qxo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1607", "title": "marshalXmlStreamWriter  need respect StaxDriver", "body": "fix namespace issue", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246672012", "body": "jira issue: https://jira.spring.io/browse/SPR-14706\n\nsample code: https://github.com/qxo/spring-pull-1661-test\n\nmvn test will see bug!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246672012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347844569", "body": "XStreamMarshaller.setStreamDriver with StaxDriver  and default namespace , then invoke the method you'll see the issue: not respect the default namespce!\r\n```\r\n\tQNameMap qmap = new QNameMap();\r\n\t\t\tqmap.setDefaultNamespace(\"http://mycompany.com/sample-spring-ws\");\r\n\t\t\tqmap.setDefaultPrefix(\"ns1\");\r\n\t\t\tStaxDriver staxDriver = new StaxDriver(qmap);\r\n\t\t...\t\r\n             setStreamDriver(staxDriver);\t\t\t\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347844569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "higankanshi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1600", "title": "SPR-16216 Make annotation of param can be inherited", "body": "# Purpose\r\nThis PR make spring can read annotations of param from interface or super class.\r\nIt is a sample:\r\n```Java\r\ninterface InterfaceA{\r\n    void method(@TestAnnotation String param0);\r\n}\r\n\r\nclass ClassB implements InterfaceA{\r\n    @Override\r\n    public void method(String param0){\r\n    }\r\n}\r\n```\r\nWhen you create a `ClassB` bean, Spring can find `TestAnnotation` from `ClassB.method param0` even this method is been override.\r\n\r\n# How it work\r\nI will scan all annotations from same signature method from interfaces and super class.\r\n\r\n# Scenarios\r\nI think it is very usefully for feign and service.\r\nWe usually create a feign project for our service(Spring MVC), like this:\r\n```Java\r\n@FeignClient(name = \"Editor\")\r\npublic interface AFeignClient {\r\n    @RequestMapping(path = \"/api/test/{id}\", method = RequestMethod.GET)\r\n    ResultModel getTestResult(@PathVariable(\"id\") String id, @RequestParam(value = \"paging\", required = false) String paging);\r\n```\r\nAs you see, we create a feign client for a API, then we will create controller from this feign client, like this:\r\n```Java\r\n@RestController\r\npublic class ServiceController implements AFeignClient {\r\n    @Override\r\n     ResultModel getTestResult(@PathVariable(\"id\") String id, @RequestParam(value = \"paging\", required = false) String paging){\r\n     // Business code here\r\n    }\r\n}\r\n```\r\nYes, we don't need re-add `RequestMapping` for controller, but we should re-add `PathVariable`, `RequestParam`...It is very easy to forget re-add annotations for controller, and IDE can't add those annotations automatically\r\nThis PR will solve this problem, you just need your controller implement FeignClient then all will be done by spring.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345609752", "body": "@snicoll Ok, has been created([SPR-16216](https://jira.spring.io/browse/SPR-16216)).\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345609752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bianjp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1599", "title": "[Obvious Fix] Fix typos, formatting and escaping in reference documentation", "body": "Fix various typos, formatting and escaping issues that I find while reading through the reference documentation.\r\n\r\nThis is an obvious fix.\r\n\r\nNote: Some symbol combinations (including \"<=\") serve as textual symbol replacements in AsciiDoc, and require escaping when replacement isn't expected. See http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#text-replacement", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151889934", "body": "You're right. I just amended the commit.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/151889934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "quaff": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1597", "title": "SPR-16211 - Change getter method visibility of ParsedSql", "body": "ParsedSql parsedSql = NamedParameterUtils.parseSqlStatement(sql);\r\nparsedSql.getParameterNames(); //NOT public", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/852", "title": "Add EnumToEnumConverter", "body": "sometime we need copy a shadow package for export remote service\ninterface, service interface depend domain object which include domain\nenum type, it is necessary to support conversion between origin Enum\ntype to shadow Enum.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127903930", "body": "@snicoll , I didn't do that, What should I do ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127903930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127908840", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/127908840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/146381540", "body": "I have updated this commit to avoid swallow IllegalArgumentException.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/146381540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345415091", "body": "I have created https://jira.spring.io/browse/SPR-16211", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345415091/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "triggerNZ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1581", "title": "SPR-16141 : SpEL: Fix equality under custom comparator", "body": "This is my first contribution to spring, so please advise if I have missed anything.\r\n\r\nThis PR fixes SPR-16141 by allowing equality checking to defer to the `TypeComparator`'s `canCompare`, rather than hardcoding conditions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rweisleder": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1565", "title": "SPR-7925 Introduce Assert.noNullElements for collections", "body": "As proposed in [SPR-7925](https://jira.spring.io/browse/SPR-7925).\r\n\r\nThe issue also proposes a `noNullKeys(Map)` and `noNullValues(Map)`. If this makes sense I would also implement it with this or a separate PR.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337708982", "body": "PMD complains about missing asserts in the new tests. I just copied existing tests. Is there a better way to check that no exception was raised or is it okay for these tests to leave them without assert?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337708982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "YLesko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1558", "title": "Integrity violation exceptions are being hidden for EXASOL.", "body": "I have discovered that when java.sql.Connection#setAutoCommit set to 'false' PK/FK violations ignored. After debugging I noticed that Exasol does these checks on  java.sql.Statement#close rather than on java.sql.PreparedStatement#executeUpdate. Checked   JdbcUtils class I found that it is ignoring all \"on close\" exceptions however this specific case should be handled because otherwise  transactions  management  won't work with EXASOL. ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "christor": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1553", "title": "SPR-16060 - Enhance AnnotationUtils to find annotations on generic interfaces", "body": "When scanning for annotations on a class that implements a generic interface where the generic\r\ntype is specified in the implementing class, annotation scanning would fail to identify annotations\r\nfrom the interface since the parameter types do not match.\r\n\r\nFor example, given an interface:\r\n```\r\n   public interface Foo<T> {\r\n       @Order\r\n       void foo(T t);\r\n   }\r\n```\r\nand a class:\r\n```\r\n   public class StringFoo implements Foo<String> {\r\n       public void foo(String s) { ... }\r\n   }\r\n```\r\nwhen scanning StringFoo.foo for annotations, no annotations were identified.\r\n\r\nThis commit changes annotation scanning so that when scanning for annotations, the parameters are\r\ncompared for assignability (using Class.isAssignableFrom()) rather than requiring exact matches.\r\n\r\nIssue: SEC-3081", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335668030", "body": "Fixes https://github.com/spring-projects/spring-security/issues/3286", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335668030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335809489", "body": "Done, @sbrannen - https://jira.spring.io/browse/SPR-16060\r\n\r\nIs there anything more that needs to be done?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335809489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341497010", "body": "Just following up to see if there's anything more needed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341497010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355342659", "body": "Just checking in again, since it's been a couple of months. Does this change look reasonable, @jhoeller?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355342659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "NathanQingyangXu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1548", "title": "SPR-9989 Using multiple PropertyPlaceholderConfigurer breaks @Value default value behaviour", "body": "This is a difficult ticket requiring nontrivial refactoring (see comments on https://jira.spring.io/browse/SPR-9989 for details). I explored quite some alternatives and found the following plan most ideal:\r\n\r\n- weak PropertyPlaceholderHelper's implementation to accept a new boolean parameter (ignoreDefault) to control whether default value will be used for a specific StringValueResolver;\r\n\r\n- change AbstractBeanFactory's internal implementation of 'resolveStringValue(String)' to dictate that only the last StringValueResolver will go about default value return (if needed) and ignore default value for all the other ones, by passing appropriate boolean parameter to the above tweaked PropertyPlaceHolderHelper's public method;\r\n\r\nA a new unit testing method named 'resolveEmbeddedDefaultValue' was added to DefaultListableBeanFactoryTests.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muyinchen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1546", "title": "Update SimpleApplicationEventMulticaster.java", "body": "\t@Override\r\n\tpublic void multicastEvent(final ApplicationEvent event, @Nullable ResolvableType eventType) {\r\n\t\tResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event));\r\n\r\n  //Here getTaskExecutor () method to get the foreach loop outside the performance can be optimized\r\n\t\tExecutor executor = getTaskExecutor();\r\n\t\tfor (final ApplicationListener<?> listener : getApplicationListeners(event, type)) {\t\r\n\t\t\tif (executor != null) {\r\n\t\t\t\texecutor.execute(() -> invokeListener(listener, event));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tinvokeListener(listener, event);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bedla": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1544", "title": "SPR-9019 - Clarify docs for usage of @Configurable objects", "body": "Hi,\r\nI had similar issue as SPR-9019 but with LocalContainerEntityManagerFactoryBean and Hibernate creating instances of cutom UserType classes with injected members.\r\nI was digging around and found, that it is all about depend-on as described in docs. But problem was that there is no bean with proper name created as noted in docs. I am sending PR with added alias for aspect bean and old bean name kept, because I want to be backward compatible. I have written note into docs, to be more specific and be able to be found by google search.\r\nHope PR is ok for you.\r\nThx,\r\nIvos ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/712", "title": "SPR-7509 JSP tag spring:eval does not apply @NumberFormat and @DateTimeF...", "body": "...ormat formatting on the expression when using the var attribute\n\nHi, I am sending you pull request witch fixes SPR-7509 according to discussion. Hope you will like it. Thx Ivos\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5414068", "body": "Hi Chris,\nI just signed the agreement as \"Ivo Smid\", do you want to send generated id?\nBest regards\nIvos\n Dne 30.4.2012 11:08 \"Chris Beams\" <\nreply@reply.github.com>\nnapsal(a):\n\n> Ivo, I'm looking at merging this pull request, but need to know that\n> you've signed the SpringSource CLA.  Please follow the instructions in the\n> [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines)\n> and let us know you've filled out the form (it's easy and just takes a\n> couple minutes).\n> \n> Thanks!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/SpringSource/spring-framework/pull/7#issuecomment-5413968\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5414068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5420619", "body": "You are welcome :-) Next time I will be more careful to satisfy contributor guidelines.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5420619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68176304", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68176304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "alesj": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1541", "title": "Add abstraction for method endpoint; wrt SPR-14683.", "body": "@snicoll this should be the minimal needed change.\r\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333117565", "body": "How is this control different from overriding MethodJmsListenerEndpoint::createMessageListenerInstance method?\r\nAs I see it, it's just a bit easier way to do it.\r\n\r\n> What happens if something else would like to tune how the endpoint is created?\r\n\r\nThis is per BeanFactory, and, imho, I guess one wants the same behavior for whole BF's context?\r\nAt least from my experience, where you probably know better.\r\n\r\n> I think it would be interesting if you shared what you are actually changing in the endpoint\r\n\r\nHere: \r\n* https://github.com/alesj/java-spring-cloud/blob/reg1/opentracing-spring-cloud/src/main/java/io/opentracing/contrib/spring/cloud/jms/TracingJmsListenerEndpointRegistry.java#L99-L120\r\n\r\nA simple way to properly add tracing for all JMS communication.\r\nSpecially for any kind of \"@JmsListener\" (payload) usage.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333117565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333480359", "body": "@snicoll or if we could be (easily) able to enhance the incoming / outgoing jms Message instance.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333480359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kk580kk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1523", "title": "Spr 15950 PathMatchingResourcePatternResolver.java cannot find any resources in jar file in weblogic and websphere", "body": "In my project, I used this code to find resources in jar file. It works nice in tomcat and spring-boot:run but cannot find any resources in jar file in weblogic and websphere . So by read this stackoverflow https://stackoverflow.com/questions/17429736/spring-configuration-files-loading-not-working-on-websphere-7 I think rewrite PathMatchingResourcePatternResolver() maybe the best answer. Issue: SPR-15950 huangjie 2017/9/11 09:29 ", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328393861", "body": "https://jira.spring.io/browse/SPR-15950", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328393861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328567313", "body": "@rstoyanchev \r\nI'll try  to use tabs ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328567313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328698825", "body": "@rstoyanchev I have formatted the code now", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328698825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330818611", "body": "In this situation catch the MalformedURLException  and fall back to normal function is the best choice. This change only for websphere and weblogic. @lqjack \r\nReuse the function framework provided maybe better answer. But could you tell me which function?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330818611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wuyuyan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1522", "title": "SPR-15944  solve the bug of i18n dynamic switching", "body": "when we set \"localeResolver\" to realize the i18n dynamic switching, if we access to the jsp page directly, it's invalid.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stepio": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1506", "title": "Allow configuring separate CaffeineSpec properties per Cache name", "body": "Hi,\r\n\r\nI've implemented a minor improvement which we already use in our project with Spring and Guava Cache (have not migrated to Caffeine yet).\r\n\r\nWith this extension we're able to use a single simple `GuavaCacheManager`, just specifying the needed configuration through properties.\r\n\r\nIn my opinion this suites well for both Spring Framework and Spring Boot projects as allows to achieve more without implementing new code (just setting properties).", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324671772", "body": "Duplicates https://github.com/spring-projects/spring-boot/issues/9301 and https://github.com/spring-projects/spring-boot/issues/7235.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324671772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324677367", "body": "Sorry for wasting your time, I did searched in Spring Framework PRs, but forgot to check Spring Boot issues. Anyway I don't think that this functionality is replaceable by Spring `Configuration` class with multiple `Cache` beans.\r\nMy use case is:\r\n1. Implementing new integration with external service, I often cache the received data. But I usually don't want to waste much time on defining each new `Cache` too precisely (with all the appropriate options as separate keys from properties) - I just mark a new business method with `Cacheable` annotation with specific label.\r\n2. At the same time we usually need to do fine-tuning in Production to prevent unnecessary load on the appropriate service while keeping the data up-to-date. So I can easily achieve this with Caffeine's well-documented specification - just leave the appropriate note in JIRA for DevOps team with public link to get more information from.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324677367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324694779", "body": "Hi @ben-manes ,\r\n\r\nThank you very much for the Caffeine itself and your valuable comments above. Hope that I fulfilled them properly with the latest change.\r\n\r\nHi @snicoll ,\r\n\r\nIn response to your comment, I've created `getNativeCacheBuilder` method. Also I made `refreshKnownCaches` protected to allow invoking it in extended implementations.\r\n\r\nP.S.: I fully understand that the PR in general most probably would be declined, but still I'll keep it up-to-date while it's open.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324694779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324710433", "body": "Thanks @snicoll !", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324710433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330814078", "body": "Hi @jhoeller ! Any thoughts on this?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330814078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "NielsDoucet": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1496", "title": "SPR-14555", "body": "Resolve map of dependencies by keying on an enum value instead of bean name.\r\nThis is more a proof of concept than a complete implementation, as I believe there are many ways to go about this.\r\n\r\nI chose the route to just leave resolving beans by type in place, and remap the keys by searching a method on the value type that returns the expected key type.\r\nIf multiple methods have the return type, this throws an exception.\r\nIf multiple beans resolve to the same key, this throws an exception.\r\n\r\nVery open to suggestions and guidance towards a complete solution.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flintmail": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1492", "title": "Avoid NoSuchMethodException generation", "body": "In my application this exception is generated at rate ~2000 exceptions per one minute (it is generated inside spring-data-jpa, my application intensively interacts with database).\r\n\r\nThis change may help to avoid slow operation of creation exception and its stack trace.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marijnm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1477", "title": "SPR-7582 - Rebuild Advisor chain when interceptor list is updated in ProxyFactoryBean", "body": "When getObject() on ProxyFactoryBean is called it might not be\r\nfully initialized yet, leading to an exception. This is fine, but\r\nthe empty Advisor chain is never rebuilt, not even after initialization\r\nhas finished. This leads to 'no-op' proxies which don't do anything.\r\n\r\nIssue: SPR-7582", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xnslong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1474", "title": "SPR-15762: improve performance of ContentCachingRequestWrapper", "body": "The `ContentCachingInputStream` class has only implemented the `int read()` method of the stream, let the corresponding `read(byte[], int, int)` method inherit from the `InputStream` class.\r\n\r\nHowever, reading a few bytes from an `InputStream` with a loop call of the `int read()` method and a call with the `read(byte[], int, int)` method differs a lot. The latter method is much faster than the former method. My code and result for this comparison are listed bellow.\r\n\r\n```java\r\nbyte[] bytes = new byte[100_000]; // 100k\r\n// test reading an input stream with loop method\r\nByteArrayInputStream in1 = new ByteArrayInputStream(bytes);\r\nlong start = System.nanoTime();\r\nfor (int i = 0; i < 100_000; i++) {\r\n    in1.read();\r\n}\r\nSystem.out.println(\"loop calling cost: \" + (System.nanoTime() - start) + \"ns\");\r\n\r\n// test reading the same input stream with batch method\r\nByteArrayInputStream in2 = new ByteArrayInputStream(bytes);\r\nbyte[] buffer = new byte[1000];\r\nint c = 0;\r\nstart = System.nanoTime();\r\nwhile (c < 100_000) {\r\n    c += in2.read(buffer);\r\n}\r\nSystem.out.println(\"batch calling cost: \" + (System.nanoTime() - start) + \"ns\");\r\n```\r\n\r\nFinally, I got the following result on my machine.\r\n\r\n```\r\nloop calling cost: 9158452ns\r\nbatch calling cost: 85389ns\r\n```", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314701773", "body": "@snicoll I have created a jira issue [SPR-15762](https://jira.spring.io/browse/SPR-15762). How can I associate this PR to that issue?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314701773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "qcq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1471", "title": "refactor redundancy code in spring-core/src/main/java/org/springframe\u2026", "body": "\u2026work/util/CommonsLogWriter.java", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Flounn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1402", "title": "Support for the last day in month cron expression", "body": "Add the support of the code \"L\" for the field day of month in the cron expression.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301424010", "body": "@snicoll : Jira issue created => [https://jira.spring.io/browse/SPR-15547](https://jira.spring.io/browse/SPR-15547)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301424010/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tkrah": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1355", "title": "SPR-11587: Support multiple TilesContainer per ServletContext", "body": "Why i did this - because Spring fails to properly support multiple TilesContainer per ServletContext because its using a \"null\" key mapping, multiple container in different FrameworkServlets will override each others factory. See ticket for details.\r\n\r\nQuestion to be answered:\r\n\r\n1. Should i include visibility/extension changes according to the ticket in this one or do another changeset - still tbd?\r\n2. Are the test enhancements / naming made sufficient?\r\n\r\nDiscussion in general:\r\n\r\nStill need to polish it to the coding guidelines - but want to get early feedback on the general refactoring \r\nstuf, if it fits your expectations or how todo it better.\r\nPackage visibility access on many properties is not my favourite - should i refactor those in getters or pass the needed references to each instance via construction parameters? Any other ideas?\r\n\r\nICLA  submitted.\r\n\r\nIssue: SPR-11587", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sjardine": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1336", "title": "SPR-6384 - Allows exclusion of columns in the insert statement.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akiraly": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1324", "title": "SPR-13735 - Move ChainedTransactionManager from spring-data commons to spring-tx", "body": "- copy \"org.springframework.data.transaction\" package from spring-data-commons as \"org.springframework.transaction.chained\" into spring-tx module\r\n- change logger from slf4j to commons-logging", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285943297", "body": "@lqjack Because afaik spring-framework (and spring-tx) uses the commons-logging API and not the slf4j API for logging.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285943297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "springrain": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1291", "title": "SPR-15121 - Update DataSourceTransactionManager.java", "body": "IsolationLevelDataSourceRouter.determineCurrentLookupKey returns the result was null, since AbstractPlatformTransactionManager.getTransaction (TransactionDefinition definition) before calling doBegin(Object transaction, TransactionDefinition definition), setCurrentTransactionIsolationLevel(Integer isolationLevel) is not set, but get a connection, it's bug.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271578514", "body": "  [issue](https://jira.spring.io/browse/SPR-15121)\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271578514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "raphw": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1283", "title": "SPR-8190: Added support for Byte Buddy AOP proxies and bean subclassing instantiation strategy.", "body": "The suggested proxy makers are working but this is still work in progress. I require input for any further steps:\r\n\r\nThere is still no mechanism to specify a specific another byte code provider. Also, there is potential of sharing code for the cglib and Byte Buddy proxy classes unit tests but for this PR, i tried to not change any existing code. There are no explicit tests for the cglib bean proxy maker which could serve as a specimen which is why this call is untested.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/341", "title": "SPR-10851: Clean stack trace from SQLExceptionTranslator", "body": "Removed error-irrelevant translation stack frames from exception stack trace after exceptions were created by an SQLExceptionTranslator.\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23018947", "body": "I just discovered this https://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md now. I will add a new pull request with respect to the contribution plan.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23018947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23033844", "body": "Reopened at https://github.com/SpringSource/spring-framework/pull/341\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23033844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "d4ksn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1249", "title": "Fix minor issue in HtmlCharacterEntityDecoder", "body": "Hello, I think that there's something incorrect when I read the code.\r\nAlthough this is not a severe problem, the code just worked all fine.\r\nBut I just want to get it right, and improve a little on performance :D", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fededonna": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1246", "title": "ThreadPoolExecutorFactoryBean add ability to prestart threads", "body": "Sometimes you want the executor given by ThreadPoolExecutorFactoryBean to be already hot. Thread initialization can be accomplished with MethodInvokingBean, but that is a little bit tricky.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slovdahl": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1237", "title": "Add SockJS clients for EventSource transport", "body": "There were no transport implementations available in spring-websocket\r\nthat were able to use the EventSource transport method. This commit\r\nadds EventSource transports based on RestTemplate, Jetty and Undertow.\r\n\r\nThis commit also extracts some common code that can be shared between\r\nXHR and EventSource transports to the `AbstractHttpTransport` class.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260427950", "body": "Please note that the actual parsing of multiline events is still missing in all three client implementations. I gave it a try but still haven't succeeded in writing a spec-compliant multiline parser. Any help with writing the parsers would be much appreciated!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/260427950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/261006422", "body": "I do understand that the EventSource transport isn't as generally useful as the other transports. It's mostly useful in different kinds of test situations. I implemented it as part of a master thesis where I compare different HTTP push mechanisms.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/261006422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AustinSong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1218", "title": "SPR-14818 - Add exception MissingServletRequestHeaderException", "body": "Reason : I am implementing a Restful API and needed to add a custom header value to all responses.  Some endpoint contained required request headers and wanted to customize the output for the specific situation of missing header values, by handling a more specific exception than ServletRequestBindingException.\n\nGeneral usage benefit: This is more consistent with the implementation of required request parameters.  There exists a MissingServletRequestParameterException for the specific situation of missing required request parameters.  A more specific exception is beneficial.\n\nIssue: SPR-14818\n\nI have agreed to the ICLA.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kazuki-ma": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1179", "title": "handle -> whenComplete because new CompletionStage (return null) is not needed.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wertklop": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1176", "title": "SPR-5503 - Fix get message from resource of basename with dots and refactor license ResourceBundleMessageSourceTests", "body": "Fix get message from resource of basename with dots and refactor license ResourceBundleMessageSourceTests\n\nPrior to this commit, doesn't get message from ReloadableResourceBundleMessageSource if basename exist dots but slashes, for example \"package.name.messages.properties\". Following that change, these names are valid for getting messages\n\nIssue: SPR-5503\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18981224", "body": "why not `original.getSource();` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18981224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ptahchiev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1169", "title": "SPR-14705 Add support for CommonsVfs resources.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olsson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1137", "title": "SPR-14592: Reactive response extractor does not invoke error handler", "body": "Fix for SPR-14592. When getting a `response()` from the `ResponseExtractors`, the `responseErrorHandler` is now consulted before passing forward the `ResponseEntity`.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hyojinbae": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1130", "title": "extendHandlerExceptionResolvers is not supported yet.", "body": "In current version, extendHandlerExceptionResolvers method overrided by\nmy custom WebMvcConfigurer is not triggered.\nThis patch trigger extendHandlerExceptionResolvers and I think this\nwould be useful.\nAnd, WebMvcConfigurerComposite seems like a bug.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Akirus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1128", "title": "Improved StringUtils", "body": "Improved following StringUtils methods:\n- mergeStringArrays:\n  now this method have a linear complexity instead of quadratic.\n- splitArrayElementsIntoProperties:\n  optimized case when charsToDelete param is empty\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73499276", "body": "but your way is not equivalent to original, just becouse result can contains same items if same items   present in a first array.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73499276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73506068", "body": "just look at original code\n\n```\nList<String> result = new ArrayList<>();\n        result.addAll(Arrays.asList(array1));\n        for (String str : array2) {\n            if (!result.contains(str)) {\n                result.add(str);\n            }\n        }\n        return toStringArray(result);\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73506068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73513922", "body": "yes, i did mistake) i can say that it would be really faster on large string arrays, but slower on small arrays.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73513922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "niaoge": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1117", "title": "SPR-14488 - FastOutputStreamWriter to improve tps of http response and save memory", "body": "", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233671827", "body": "jiar issue created ,and ref url filled ,https://jira.spring.io/browse/SPR-14488\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233671827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mdeinum": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1116", "title": "SPR-14471 - Add autowiring support to SpringBeanJobFactory", "body": "This commit introduces autowiring support to the SpringBeanJobFactory.\nIt will call the autowireBean method if an AutowireCapableBeanFactory has\nbeen injected. The autowiring will be done on either the Job or the delegate\nof the DelegatingJob which contains a Runnable.\n\nA test has been added to verify the correct behavior of the autowiring and\nas well as retaining the initial support of using the job data for wiring dependencies.\n\nIssue: [SPR-14471](https://jira.spring.io/browse/SPR-14471)\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45085293", "body": "Fixed imports and replaced spaces with tabs.\n\nThe CLA has been signed years ago, this isn't my first (nor last :) ) pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45085293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45085990", "body": "I know, no problem. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45085990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45325063", "body": "I ran the tests before I checked everything in and the only 3 tests that where failing, for me, where the 3 tests which required the `jmxmp` protocol. While I was trying to figure out why they where failing I noticed the comments and the referenced issue. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45325063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45326905", "body": "I fixed the test cases (missing call to `start()` in some test cases. I still have 3 failing tests due to the `jmxmp` protocol, what should I do about those?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45326905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242336298", "body": "@snicoll Not sure, as @BastianVoigt hasn't responded to the inquiries from @sbrannen for over a year. His user account is in JIRA so maybe someone can drop him an email? His initial patch was mentioned, so he should get a message about that from GitHub shouldn't he?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242336298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9649221", "body": "There is already a general section about this in the explanation about init/destroy methods of the containers. You might want to put a reference in there back to that section (http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-default-init-destroy-methods) (See the last paragraph of that section).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/9649221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mhlz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1078", "title": "Fix getFieldValues to allow proper extending", "body": "I'm currently using Spring 4.3.0.RC2 (via Spring Boot 1.4.0.M3) and I noticed that in some circumstances CORS headers were added multiple times, which causes the request to fail.\n\nI noticed that the DefaultCorsProcessor does perform a check to see if the headers were already added, however that check didn't seem to work.\n\nI traced the problem back further to ServletServerHttpResponse and its class ServletResponseHttpHeaders which extends HttpHeaders. The DefaultCorsProcessor uses the getAccessControlAllowOrigin function to check for the headers. That function in turn uses the protected function getFieldValues to build a comma delimited string. This function accesses this.headers directly, instead of using the get function which causes this problem, since ServletResponseHttpHeaders only overwrites the get function.\n\nI changed the protected getFieldValues function to use the get function which should fix the problem, but is a fairly trivial change.\n\nAs a workaround I registered the CorsFilter manually instead of relying on Spring Boots autoconfiguration (which uses an HttpInterceptor instead of a filter)\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225570234", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225570234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225801751", "body": "I fixed the import order in that file.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/225801751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "benelog": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1075", "title": "SPR-4691 - Add SimpleJdbcUpdate", "body": "I have signed and agree to the terms of the Spring Individual Contributor License Agreement.\n\nThis patch is about https://jira.spring.io/browse/SPR-4691\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221968626", "body": "[SPR-14296](https://jira.spring.io/browse/SPR-14296) is fixed by https://github.com/spring-projects/spring-framework/commit/65f6ea320a13bc4d1f702ff44e871e68dfbcaba2 . \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221968626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224608717", "body": "It is fixed by https://github.com/spring-projects/spring-framework/commit/cc7781ecf323f7c9fbc6959bfabf73df613c274e\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224608717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226098423", "body": "@snicoll \nIs there any feedback on this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/226098423/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350072395", "body": "@snicoll \r\nThis PR widely affects AbstractJdbcInsert, TableMetaDataContext. As I mentioned on the JIRA issue, this task may be suitable for maintainers of Spring framework.\r\n\r\nhttps://jira.spring.io/browse/SPR-4691?focusedCommentId=128931&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-128931\r\n\r\nI resolved conflicts, but feel free to close the PR. I expect that the Spring framework team will solve it in a better way.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350072395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/66901459", "body": "You can refer  [Spring-Framework-Code-Style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#import-statements) for the ordering of import statements.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/66901459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/66210746", "body": "@tomsquest\nI fixed a typo ( configuaration -> configuration ), and rebased on master again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/66210746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Youmoo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1058", "title": "Edit code comment and minor improvement to `PatternsRequestCondition`", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208840278", "body": "I have signed agree to the terms of the SpringSource Individual Contributor License Agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/208840278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sgrillon14": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1054", "title": "Add MediaType IMAGE_SVG", "body": "When you do a Web Service to Expose a svg (example: web service expose flags of the world)\r\n\r\nin my RestControler I use this syntax:\r\n@RequestMapping(value = \"/{country}\", method = RequestMethod.GET, produces = MediaType.IMAGE_SVG_VALUE) \r\n\r\ninstead of\r\n\r\n@RequestMapping(value = \"/{country}\", method = RequestMethod.GET, produces = \"image/svg+xml\")\r\n\r\nis more smart :)\r\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263583282", "body": "I had personal licence (I'm an individual contributor)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263583282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ckalan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1051", "title": "Server side includes", "body": "A new feature to include a response within another one. There are many questions on the web and stackoverflow about whether spring mvc supports this and as far as I know there is no default implemantion within the framework. \n\nASP .NET MVC provides this feature as \"Child actions\" and Grails also has this feature which we have used in many projects. While this is not a \"MVC\" related feature, it is especially helpful in MVC environments where a controller action view can include other helper actions. This is different than including partial views such that, this \"child action\"  can implement business rules or can query some database etc. This helps build more reusable sub components while separating controller logic and view logic. \n\nWhile this is possible by writing a custom tag to coordinate your business logic and separate it from the view logic, including a controller method response is more rapid, easier for the developer and view technology ignorant.\n\n**Usage**\nSay for instance a shopping cart summary is displayed on all pages by the \"CartController\" -> \"display\" handler method. Then the view developer will use it like this:\n\n```\n<s:include path=\"${s:mvcUrl('CC#display')}\" >\n  <s:param name='mode' value='summary' />\n</s:include>\n```\n\nAn example prototype project to show various usage scenarios and capabilities can be found\n[here](https://github.com/Rabbytes/spring-webmvc-include-example).\n\n**Implementation**\nI grabbed some part from Grails and some from Tomcat's  SSI filter implementation. \n\nCurrent implementation depends on StreamByteBuffer class authored by Graeme Rocher in Grails framework to capture the response in a in-memory buffer.Since this buffer uses chunks, it should be way more performant than a standard ByteArrayOutputStream especially for too many write operations.Graeme uses one byte buffer and one char buffer for write operations but I used byte buffers for both the printwriter and the outputstream.\n\nIncluded request has its own request params given to the constructor but if requested, it may also fall back to the original request params. Generally, this fallback is not a good choice because decreases reusability but in some cases, you find yourself copying request params from the main request to the child requests. For instance when displaying a product detail page, you may include child actions which all depend on the same product id. One way to do this is to set it as an attribute in the main request and allow child actions to get it. Fallback to main request params solves this issue but maybe an improvement can be to filter these params with a \"whitelist\" or \"blacklist\". \n\nAnother improvement may be to prevent child actions to respond to direct requests. In ASP .NET MVC you can define \"ChildActionOnly\" handler methods which can only be used within an include. Grails does not have this feature.\n\nAdditionaly in the future, we may put some kind of hierarchical state to the request attributes so that a handler method can check if it is working within a parent handler. This may help deciding on what and how to display based on the hierarchical handler stack. For instance, ASP .NET action exception handler uses this information when rendering exception response.\n\nAlthough I have some unit tests here, and I created a sample project to see this in action, I could not find a way to write some functional tests. \n\n**Example Project**\n[Example project on Github](https://github.com/Rabbytes/spring-webmvc-include-example)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erik-wramner": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1045", "title": "Add client-side polling delay to JMS message listeners.", "body": "AQ JMS scales poorly when there are many threads waiting for messages\non the same queue. When a message arrives all threads wake up and\ncompete for it, consuming CPU in the database. It is much better to\nsleep on the client side between polling attempts when a receive\nreturned without a message. That way it is possible to use a large\nnumber of threads/sessions without overloading the server. Other\nJMS providers may have the same problem.\n\nI have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n\nIssue: SPR-14225\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214181396", "body": "Yes, I have signed the CLA. Do you want me to post the confirmation \nnumber?\n\n-Erik\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214181396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214210228", "body": "Great. One thing though. I intend to submit another issue with pull \nrequest for adding a client side timeout in \nDefaultMessageListenerContainer#receiveMessage. I'll save the long \nmotivation for the issue, but it helps us a lot with performance using \nAQ JMS. That client timeout only works really well if receiveMessage in \nthe base class calls receiveNoWait when configured with a zero timeout. \nHow the exact implementation is done doesn't matter, I look forward to \ntesting your solution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214210228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "julianladisch": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1025", "title": "fix month in yyyy-HH-dd", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "selkhateeb": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1008", "title": "Add a way to disable SSL verification", "body": "This is similiar to curl --insecure (-k) where sometimes you don't want ssl verification.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1007", "title": "Implementing Jackson MixIn's", "body": "This commit implements Jackson MixIn's on MappingJacksonValue and its processors: MappingJackson2HttpMessageConverter and MappingJackson2XmlHttpMessageConverter\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/659", "title": " afterCompletion method parameter maybe miss.", "body": "Repair HandlerMaping method execution if an exception occurs cannot be obtained in the interceptor.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58377853", "body": "@sdeleuze \uff0cHello, my English is weak, but I need in the actual project after the interceptor according to intercept to the abnormal record operation log.The interceptor class code below:\n\n``` java\n @Override\n    public void afterCompletion(HttpServletRequest request,\n                                HttpServletResponse response, Object arg2, Exception arg3)\n            throws Exception {\n        if (arg2 instanceof HandlerMethod) {\n            HandlerMethod method = (HandlerMethod) arg2;\n            AdminLog methodAnnotation = method.getMethodAnnotation(AdminLog.class);\n            if (methodAnnotation != null) {\n                if (RequestThread.getCurrentUser() != null) {\n                    String action = methodAnnotation.action();\n                    String module = methodAnnotation.module();\n//                    if (RequestThread.getException() != null) {\n                    if(arg3!=null){\n//                        this.adminLogService.addLog(\"[failed]\" + action + \":\" + RequestThread.getException().getMessage(), module);\n                        this.adminLogService.addLog(\"[failed]\" + action + \":\" + arg3.getMessage(), module);\n                    } else {\n                        this.adminLogService.addLog(\"[success]\" + action, module);\n                    }\n                }\n            }\n        }\n    }\n```\n\nBelow is part of the code of the DispatcherServlet used to invoke the method of the interceptor:\n\n``` java\nvoid triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)\n            throws Exception {\n\n        if (getInterceptors() == null) {\n            return;\n        }\n        for (int i = this.interceptorIndex; i >= 0; i--) {\n            HandlerInterceptor interceptor = getInterceptors()[i];\n            try {\n                interceptor.afterCompletion(request, response, this.handler, ex);\n            }\n            catch (Throwable ex2) {\n                logger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\n            }\n        }\n    }\n```\n\nDon't know if such instructions are too vague, but I feel there is exception parameters should be passed to the triggerAfterCompletion, otherwise the interceptor will not be able to receive this exception.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58377853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58382987", "body": "Hi,@rstoyanchev ,  @sdeleuze, Yes, The Controller class has @RequestMapping annotationed method and has a @ExceptionHandler  annotationed method is used to handle exceptions in parent class, but still need a interceptor class used to record the success or failure of the operation. In this case, so if an exception occurs, I hope I can in the interceptor can know abnormal happened.\nMy English is very sorry.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58382987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58384884", "body": "AdminBaseController\n\n``` java\npackage com.ssdd.manager.web;\n\nimport com.sdyc.utils.json.JsonObjectUtils;\nimport com.ssdd.common.RequestThread;\nimport com.ssdd.manager.CurrentAdminUser;\nimport org.apache.commons.lang.exception.ExceptionUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authz.AuthorizationException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic abstract class AdminBaseController\n{\n\n    protected Log log = LogFactory.getLog(this.getClass());\n\n\n    /**\n     * \u5f02\u5e38\u9875\u9762\u63a7\u5236\n     *\n     * @param runtimeException\n     * @return\n     */\n    @ExceptionHandler(RuntimeException.class)\n    public ModelAndView runtimeExceptionHandler(HttpServletRequest request,\n                                                HttpServletResponse response, RuntimeException runtimeException)\n    {\n\n\n//This is not elegant way, abnormal storage to the ThreadLocal\n        RequestThread.setException(runtimeException);\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"success\", false);\n        if (runtimeException instanceof AuthenticationException || runtimeException instanceof AuthorizationException)\n        {\n\n            map.put(\"msg\", \"\u5bf9\u4e0d\u8d77\uff0c\u60a8\u6ca1\u6709\u6b64\u64cd\u4f5c\u7684\u6743\u9650\uff0c\u8bf7\u4e0e\u5e10\u53f7\u7ba1\u7406\u5458\u8054\u7cfb\");\n\n        } else\n        {\n            map.put(\"msg\", runtimeException.getMessage());\n            map.put(\"trace\", ExceptionUtils.getFullStackTrace(runtimeException));\n            log.error(\"\u540e\u53f0\u51fa\u73b0\u9519\u8bef\", runtimeException.getCause());\n        }\n\n        if (\"XMLHttpRequest\".equals(request.getHeader(\"X-Requested-With\")))\n        { // EXTJS\n            try\n            {\n                response.getWriter().println(JsonObjectUtils.beanToJson(map));\n            } catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n            return null;\n        } else\n        {\n            return new ModelAndView(\"/admin/error\", map);\n        }\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u4e0d\u662f\u8d85\u7ea7\u7528\u6237\n     *\n     * @return\n     */\n    public boolean currentAdminUserIsSuperman()\n    {\n        CurrentAdminUser o = RequestThread.getCurrentUser(CurrentAdminUser.class);\n        return o.isSuperman();\n    }\n}\n```\n\nAdminLogInterceptor \n\n``` java\n\npackage com.ssdd.manager.web;\n\nimport com.ssdd.common.RequestThread;\nimport com.ssdd.manager.AdminLog;\nimport com.ssdd.manager.service.AdminLogService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * \u7ba1\u7406\u65e5\u5fd7\u8bb0\u5f55\u62e6\u622a\u5668\n *\n * @author Administrator\n */\npublic class AdminLogInterceptor implements HandlerInterceptor {\n\n    @Autowired\n    AdminLogService adminLogService;\n\n\n    @Override\n    public void afterCompletion(HttpServletRequest request,\n                                HttpServletResponse response, Object arg2, Exception arg3)\n            throws Exception {\n        if (arg2 instanceof HandlerMethod) {\n            HandlerMethod method = (HandlerMethod) arg2;\n            AdminLog methodAnnotation = method.getMethodAnnotation(AdminLog.class);\n            if (methodAnnotation != null) {\n                if (RequestThread.getCurrentUser() != null) {\n                    String action = methodAnnotation.action();\n                    String module = methodAnnotation.module();\n//                    if (RequestThread.getException() != null) {\n                    if(arg3!=null){\n//                        this.adminLogService.addLog(\"[failed]\" + action + \":\" + RequestThread.getException().getMessage(), module);\n                        this.adminLogService.addLog(\"[failed]\" + action + \":\" + arg3.getMessage(), module);\n                    } else {\n                        this.adminLogService.addLog(\"[success]\" + action, module);\n                    }\n                }\n            }\n        }\n    }\n\n\n    @Override\n    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,\n                           Object arg2, ModelAndView arg3) throws Exception {\n\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request,\n                             HttpServletResponse response, Object arg2) throws Exception {\n\n\n        return true;\n    }\n\n}\n\n```\n\nThe above is my code, you can reference.If really need to pass a null here, please let me know.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58384884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59677573", "body": "\u66f4\u65b0\u6700\u65b0\u4ee3\u7801\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59677573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59677650", "body": "\u66f4\u65b0\u6700\u65b0\u4ee3\u7801\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59677650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "awgtek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/1000", "title": "Update StoredProcedure.java declareParameter method JavaDoc", "body": "Add child's method for throwing to javadoc.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lqjack": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/987", "title": "fix the SPR-14022", "body": "", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269259323", "body": "why introduce kotlin to the spring framework ? just for simpility? ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269259323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285932629", "body": "@akiraly why do you change  logger from slf4j to commons-logging?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285932629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "modestukasai": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/978", "title": "Primary bean override restriction for non primary beans with same names", "body": "Disabled overriding primary bean, when creating non primary bean with the same name.\nPlease read below issue description for more info.\n\nIssue: [SPR-13980](https://jira.spring.io/browse/SPR-13980)\n\nNote: I have received an explanation, that factory bean name override is higher than `Primary` annotation override. Is that true?\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sewolf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/959", "title": "DefaultListableBeanFactory getBeansOfType initialize beans when includeNonSingletons is false", "body": "Hi,\n\nI have a question:  \nin DefaultListableBeanFactory the method call getBeansOfType(MyClass.class, false, true) will initialize lazy singleton beans, but the call getBeansOfType(class, true, true) not. \nIs this a correct behaviour?\n\nRegards,\nSergej\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rs017991": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/943", "title": "Fixed NPEs in AntPathMatcher", "body": "I noticed that the MVC Test **redirectedUrl** matcher fails with a NullPointerException if there happens to be no Redirected URL on the response (the test should still fail, but with a proper assertion error).\n\nOne way to fix this would be to **assertNotNull** in the respective **MockMvcResultMatchers** method before calling the **AntPathMatcher**, but I thought it would be more appropriate to fix the underlying null-safety issues. You may disagree.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alezx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/933", "title": "fix getFileName on windows", "body": "Issue: SPR-5284\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sedran": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/916", "title": "Add support of Callable for TaskScheduler methods.", "body": "Closes SPR-12062.\nCreates class CallableWrapperRunnable to wrap Callable objects with Runnable interface. In all TaskScheduler methods which takes Callable parameter, the CallableWrapperRunnable object is used to wrap the Callable object. Then, the old TaskScheduler method which takes Runnable parameter is called.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djechelon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/910", "title": "Empty attributes in TagWriter", "body": "Support for empty HTML attributes (like \"required\", \"ng-disabled\"...)\nIf you want to use this tool for a custom tag in a project that is mainly Angular-oriented, you may want to write attributes without values.\nAnd since members are private, you cannot extend TagWriter (another proposal could be \"protecting\" fields).\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224208448", "body": "Please forgive me if I didn't follow any of the contribution guidelines, but this is a trivial improvement, so trivial that I have hand-written the code and omitted testing. It is meant as a proposal and is to be reviewed by Spring developers because I don't have a Spring development environment ready to go.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224208448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224244134", "body": "Just for sake of completeness here is the only way to achieve the same result with existing Spring code\n\n```\n            <bean class=\"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean\">\n                <property name=\"deserializersByType\">\n                    <map key-type=\"java.lang.Class\">\n                        <entry>\n                            <key>\n                                <value>java.lang.String</value>\n                            </key>\n                            <bean class=\"Some.Deserializer\" />\n                        </entry>\n                    </map>\n                </property>\n```\n\nAnd yea, sorry, but I was pretty sure to have found `deserializers()` method in the builder, unfortunately I was wrong :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224244134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20313170", "body": "To quote @guybrush: \"Pretty please with marshmallows, don't change `public` APIs during a bugfix release\".\r\nI was inheriting `PropertySourcesPropertyResolver` and referencing `protected conversionService` directly.\r\n\r\nNot much of a burden, simply had to replace direct references with the appropriate getter. In 5 minutes my code compiled again, but I thought I could simply upgrade the JARs from SPR 4.3.4 to 4.3.5 since it was a simple bugfix release.\r\n\r\n\ud83d\ude04 I hope next time upgrade will be smoother. This was just a comment that took the same time to fix the code \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20313170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ljtfreitas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/907", "title": "Add support to any Iterable types on PropertyAccessor", "body": "Sometimes, for better clarity of the application model, we create objects that encapsulate a Collection, and this object comes to represent a collection of a certain type in the application model. To simplify `for-each` operations, this object must implement `java.lang.Iterable`. Example:\n\n``` java\npublic class MyType {\n    @NotNull\n\u00a0\u00a0\u00a0 private String name;\n}\n\npublic class MyTypesGroup implements Iterable<MyType> {\n\u00a0\u00a0\u00a0 private Collection <MyType> myTypes = new ArrayList <MyType> ();\n\n    @Override\n    public Iterator<MyType> iterator() {\n         return myTypes.iterator();\n    }\n\n\u00a0\u00a0\u00a0 // model methods\n}\n\npublic class MyAggregateType {\n     @Valid\n\u00a0\u00a0\u00a0\u00a0 private MyTypesGroup myTypesGroup MyTypesGroup = new ();\n}\n```\n\nDatabind, get and set properties operations, typically used with `BeanWrapper`, they are not supported for these objects (in the above example, something like \"myTypesGroup[0].name\"). \n\nIn my use case, with Hibernate Validator, the path will be generated \"myTypesGroup[0].name\" (Hibernate Validator au), occurring an exception when the Spring tries to extract the property value (to generate the error message on the Spring MVC)\n\nThis pull request adds `java.lang.Iterable` as a supported type for reading properties by `PropertyAccessors`.\n\nI have signed and agree to the terms of the Spring ICLA.\n\nThanks (and sorry for any English errors :))\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "keik": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/894", "title": "Fix typos", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joshiste": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/893", "title": "Add @DeferredImport", "body": "I ran into the issue to defer the processing of my conditional configurations.\nSince the set of imported classes isn't dynamic I think its odd to implement a DeferredImportSelector and it would come in handy having an annotation complementing the selector.\n\nCLA is signed\n\nIssue SPR-13583\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shrz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/888", "title": "Fix markup in documentation for URI template patterns.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tobiasmh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/878", "title": "Modify creation of the ScheduledTaskRegistrar to be a Spring managed bean", "body": "Modify creation of the ScheduledTaskRegistrar to be a Spring managed bean. SPR-13506\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/25312236", "body": "If you guys are happy with moving forward on an implementation for this after the discussion takes place in Jira, I am happy to rewrite the code as needed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/25312236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rocky-peng": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/870", "title": "RequestParam plus MultipartFIle", "body": "if there is a controller method with code like this:\n\n```\npublic void uploadFile( @RequestParam(value = \"file\",required = true) MultipartFile file){\n    //some code\n}\n```\n\nand there is no header which name is \"Content-Type\" in the request,then the method \"resolveName\" will throw MultipartException which is from the method \"assertIsMultipartRequest\" even if the value of attribute which name is \"required\" is true. \n\nThe expected response should be throw MissingServletRequestParameterException i think. Because it is convenient for coder to execute the same code when there is no enough parameters.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bohrqiu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/863", "title": "ignore illegal String in SpringFactoriesLoader#loadFactoryNames", "body": "I write a spring-boot app\uff0cbut when config EnableAutoConfiguration like as follows\uff1a\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.yiji.boot.core.configuration.AppConfiguration,\\\ncom.yiji.boot.core.configuration.LogConfiguration,\\\ncom.yiji.boot.core.configuration.HeraConfiguration,\n```\n\na comma at the end\uff0cand throw exception `class path resource [.class] cannot be opened because it does not exist`.this is because `SpringFactoriesLoader#loadFactoryNames` dont ignore blank character.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132898842", "body": "what is CLA \uff0c\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132898842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132899649", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132899649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akalotkin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/833", "title": "Configure embedded database with properties", "body": "Spring embedded database support isn't very configurable at the moment.\nThese changes related to SPR-12455.\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118437498", "body": "No. I'm commiting my updates.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118437498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118880659", "body": "I've fixed all issues.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/118880659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "magJ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/815", "title": "Allow StopWatch to be started on construction", "body": "Simplify starting stopwatch after construction\n\nReturn \"this\" from the start method of the stopwatch,\nso that a stopwatch can be constructed and started in one line.\nMost of the time you use the stopwatch you want to start it\nright away, this saves a line of code and makes the stopwatch\na preferable approach to a simple system time comparison.\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n\nIssue: SPR-13106\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/159763182", "body": "@Shredder121 I\u2019m not sure what you mean by leave the original method in?\nSince the modified method has the same signature then we have have both.\nOriginally I implemented it with a new distinct constructor, but after feedback I changed it to this builder patternish design.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/159763182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/160500075", "body": "@Shredder121 Looks like the policy is to try and maintain binary compatibility between minor versions. Although the wording seems to indicate that exceptions are often made. I doubt this change would warrant an exception.\nhttp://docs.spring.io/spring-security/site/docs/current/reference/html/introduction.html#release-numbering\n\nHowever it is worth mentioning that the change was suggested by a core contributor @philwebb on the JIRA issue tracker. Phil also noted the binary compatibility issue, presumably if he suggested the change, then it could pass his bar as far as making an exception to the binary compatibility goal.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/160500075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mkanev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/768", "title": "Expose SimpleCommandLineArgsParser methods and fields", "body": "For example you work with Spring Boot + Spring Batch and you need to validate command line arguments as `JobParameters` in batch job.\nBy default Spring Boot uses `SimpleCommandLinePropertySource` to resolve `Environment` parameters. This `PropertySource` implementation recognize `--optName[=optValue]` as argument with name `optName` and value `optValue`.\nOn the other hand Spring Batch provides `DefaultJobParametersConverter` to resolve job parameters. This converter recognize `--optName[=optValue]` as _non-identifying_ argument with name `-optName` and value `optValue`. And if you want to use `JobParametersValidator` to validate requred and optional keys in `JobParameters` you need to check for `-optName` rather then `optName`. Or implement custom `JobParametersConverter` which will detect these arguments right.\nThis functionality is pretty common but there are no JIRA features or discussions in mailing lists. This commit is to expose `SimpleCommandLineArgsParser` methods and extract fields for `--` and `=` to implement `SimpleCommandLineJobParametersConverter` in Spring Batch project.\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thomasdarimont": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/767", "title": "Document @Bean definitions via default methods", "body": "Update chapter \u201cDeclaring a bean\u201d to mention the @default method bean definition approach.\n\nIssue: SPR-12882\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/368", "title": "Issue: SPR-10919", "body": "Added support to ConfigurationClassParser to deal with @Bean annotated Java 8 default Methods. Introduced getInterfaces() Method to SourceClass to be able to consider @Bean annotated Bean factory methods on interfaces. Added additional processing step to doProcessConfigurationClass(\u2026) to process information in interfaces. Introduced getRawCandidateMethods(\u2026) to ConstructorResolver that is able to consider default Methods in addition to the previous raw candidates if executed on Java 8 or later. Added test case for feature.\n\nAll existing and new tests pass.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ManicRooks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/758", "title": "Allow subclass adaptation of @Scheduled runnable creation.", "body": "Small change in ScheduledAnnotationBeanPostProcessor to allow subclass adaptation of @Scheduled runnable creation. This allows generic behaviour for scheduled tasks to be added in one place.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dcoraboeuf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/752", "title": "SPR-12771 The builder port must always be set", "body": "Context: [SPR-12771](https://jira.spring.io/browse/SPR-12771)\n\nWhen the `X-Forwarded-Port` is set, its value should always be taken into account. When looking at the `org.springframework.web.util.UriComponentsBuilder#fromHttpRequest` code, we see in the end that the `port` must always be set into the `builder`. If not, we have cases where the `port` remains set to `80`.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10039104", "body": "If X-Forwarded-Port is set to 443, by a SSL nginx proxy for example for the application running on http/8080, the builder's port remains set to 8080?\nThis check has been removed in the previous version of ServletUriComponentsBuilder\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10039104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10045415", "body": "It looks exactly like it. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10045415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ericbottard": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/748", "title": "Fix SpEL Compilation mode IMMEDIATE.", "body": "Require 1 interpreted pass only (instead of 2)\n\ncc @aclement \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Xiaoshuai": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/736", "title": "access user-agent via requestContext", "body": "Our colleagues want to access the \"user-agent\" in freemarker.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhotari": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/732", "title": "allow passing a TestContext and TestContextBootstrapper instance to TestContextManager", "body": "https://jira.spring.io/browse/SPR-12683 in Spring Jira\n\n/cc @sbrannen @jhoeller \n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/475", "title": "unwrap transaction bound connection proxy pointing to same TransactionAwareDataSourceProxy", "body": "Possibly related to https://jira.springsource.org/browse/SPR-6949\n\nI've noticed in debugging of Grails apps (which uses TransactionAwareDataSourceProxy + LazyConnectionDataSourceProxy) that the connection gets wrapped twice in a proxy that uses TransactionAwareInvocationHandler as it's handler.\n\nThe reason for this is the logic in TransactionAwareInvocationHandler that checks for the transaction bound connection. \n\nThis is the code in https://github.com/lhotari/spring-framework/blob/6a043e3/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java#L219\n\n```\n            if (this.target == null) {\n                if (this.closed) {\n                    throw new SQLException(\"Connection handle already closed\");\n                }\n                if (shouldObtainFixedConnection(this.targetDataSource)) {\n                    this.target = DataSourceUtils.doGetConnection(this.targetDataSource);\n                }\n            }\n            Connection actualTarget = this.target;\n            if (actualTarget == null) {\n                actualTarget = DataSourceUtils.doGetConnection(this.targetDataSource);\n            }\n\n            if (method.getName().equals(\"getTargetConnection\")) {\n                // Handle getTargetConnection method: return underlying Connection.\n                return actualTarget;\n            }\n```\n\nIt looks like this doesn't take into account that target might already be a proxy for the same TransactionAwareDataSourceProxy instance and it should unwrap it to prevent an extra level of calls.\nThis doesn't cause real problems in applications, but there will always be an extra proxy call for each call to a connection method.\n\nThis PR contains logic to unwrap the extra proxy.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janesser": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/729", "title": "SPR-5580 Adding ChildOf annotation to apply MergedBeanDefinition to annotated beans.", "body": "How to reference parent-bean from annotated spring, like with component-scan?\n\nThe question came up during work life when we were trying to shift towards component-scan. Found that \"historical\" issue with most of the most given.\n\nHere some pull-request extended with some comments and a test-case.\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/72311427", "body": "See https://github.com/spring-projects/spring-framework/pull/729\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/72311427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/72927735", "body": "PR updated.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/72927735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297101306", "body": "Hi @snicoll, what is wrong with SPR-6343? IMO situation is unchanged since. Cheers, Jan", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297101306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/23915768", "body": "Right, gonna fix it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/23915768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "flozano": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/719", "title": "Improve Netty4ClientHttpRequestFactory configurability and memory usage (SPR-12623)", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/10861717", "body": "maybe it should be 'gsonBuilder' must not be null\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/10861717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "hadri3n": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/716", "title": "Add 'public' visibility to facilitate tags (such as Select) extension.", "body": "Unless there is any side effect, when customizing JSP tags (e.g. extending SelectTag),  being able to access OptionWriter would be rather helpful.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcokrikke": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/699", "title": "Improved DataBinder Javadoc for xxx*yyy pattern matching.", "body": "The default documentation does not mention xxx_yyy pattern matching,\nwhich is, however, supported by PatternMatchUtils. Such a pattern\ncan be useful for matching nested properties in all elements of a\ncollection (e.g. property[_].nestedProperty).\n\nThe documentation is also inconsistent in other places in the \nframework where PatternMatchUtils is used, but I do not know if this \nis on purpose.\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mtopolnik": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/684", "title": "Adapter ScrollableResults -> Spliterator", "body": "Spliterator is the source of data for the Java 8 Stream. This commit\ncontributes a Spliterator that wraps Hibernate's ScrollableResults.\n\nThe commit also contributes an abstract base class which captures\nthe concern of splitting into batches of configurable size, thus\nsupporting automatic parallelization of the stream.\n\nIssues: SPR-12349, SPR-12388\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MoonJongMin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/673", "title": "Some methods in the org.springframework.core.task.AsyncListenableTaskExecutor class need to be added.", "body": "org.springframework.core.task.AsyncListenableTaskExecutor has submitListenable(Callable<T>) method.\nThis return ListenableFuture object after\nListenableFutureTask.execute(ListenableFutureTask future).\nAs Juergen Hoeller mentioned in the\nSPR-12358(https://jira.spring.io/i#browse/SPR-12358),\nif the async task has already been fully executed at the time of the\naddCallback call,\nSpring's ListenableFutureCallbackRegistry is executing the callback in\nthe caller's thread\nsince the async thread can't be used for it anymore.\nI think AsyncListenableTaskExecutor is needed to be improved in order to\nadd callback\nbefore ListenableFutureTask.execute(ListenableFutureTask future) method\nis called.\n\nISSUE : SPR-12364\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/671", "title": "Fix First invocation of org.springframework.core.task.AsyncListenableTaskExecutor executes in same thread as caller", "body": "With relation to SPR-12358, as Juergen Hoeller and S\u00e9bastien Deleuze commented in the Spring JIRA, adding a special delay time in the executor looks enough. We can think that the thread in the AsyncTaskExecutor will call callback method. But if a developer puts pretty much time spending code block between AsyncTaskExecutor's submitListenable and ListenableFuture's addCallback, that will not be enough. It might be the same problem.\nSo I slightly changed ListenableFutureCallbackRegistry.java in order to run a callback in a new thread when AsyncTask is already finished. At least this will prevent being blocked.\n\nIssue: SPR-12358\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/567", "title": "In connection with \"[SPR-11126] problem converting empty parameter to", "body": "In connection with \"[SPR-11126] problem converting empty parameter to List\", \nthe resolveName(String, MethodParameter, NativeWebRequest) method\nin the RequestParamMethodArgumentResolver.java has been slightly\nchagned.\nIn case that MethodParameter is related to List type,\nString[](with legnth 1) value will be returned itself\nwithout being changed to String.\n\nIssue : SPR-11126\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/566", "title": "In case that reqeust url includes \"=\" char in front of first semicolon,", "body": "In case that reqeust url includes \"=\" char in front of first semicolon,\nPathVariable do not work properly.\nProblem is that @PathVariable value includes matrixVariable String.\n\nFor example, if Spring MVC Controller method has @RequestMapping(value =\n/bar/{foo}\", method = RequestMethod.GET) and request url is\nhttp://localhost:8080/context/bar/abc;key=xyz, we expect @PathVariable\nfoo == \"abc\" and @MatrixVariable key == \"xyz\". Actually this works well.\nBut when request url is\nhttp://localhost:8080/context/bar/name=abc;key=xyz,\ndespite expectations that @PathVariable foo == \"name=abc\" and\n@MatrixVariable key == \"xyz\", @PathVariable foo == \"name=abc;key=xyz\".\n\nI modified so that @PathVariable foo may have \"name=abc\".\n\nIssue : SPR-11897\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40781064", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40781064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40837831", "body": "Thank you for review. As your thought, I found some point in the spring-web.\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40837831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46992638", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46992638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47040571", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47040571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47046690", "body": "I submitted a pull request again. This will replace https://github.com/spring-projects/spring-framework/pull/517.\nI just modified 2 files with this bug but previous pull request submitted 4 files with my mistake.\nThank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47046690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marenzo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/647", "title": "Removing problematic creation of unnecessary RequestConfig", "body": "The explicit (possibly again) creation of RequestConfig for HttpContext is wrong, since if someone passes default RequestConfig to the HttpClient object (via setDefaultRequestConfig, as seen here: http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html#setDefaultRequestConfig(org.apache.http.client.config.RequestConfig)) it will override it and making the developers to override for nothing the createHttpContext each time, instead of just using the already provided feature of setting default RequestConfig.\n\nInstead of this condition, and making people overriding this class for just re-configuring RequestConfig for each HttpComponentsClientHttpRequestFactory, maybe it should be replaced with other conditions that checks if there's ANY RequestConfig, and if not then to create a new one.\n\nAnyway, currently this condition is wrong and as my point of view it is kind of a bug.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "salmar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/645", "title": "Added support for ResponseMessage response type in @Controller message handling methods", "body": "Prior to this commit, the only way to override the destination to send the response of message handling methods was by using _@SendTo_ or _@SendToUser_, which doesn't allow building dynamic destinations. \n\nThe added _ResponseMessage_ return type brings more flexibility when specifying the response message, which can be created using a builder, e.g\n\n``` java\n@MessageMapping(\"/dest\")\npublic ResponseMessage<String> handle() {\n        return ResponseMessage.destination(\"/queue/dest1\").toUser(\"sergi\").body(\"hi\");\n}\n```\n\nOther examples:\n\n``` java\nnew ResponseMessage<String>(\"hi there\", \"/topic/dest1\");\nResponseMessage.destination(\"/topic/dest1\").body(PAYLOAD);\nResponseMessage.destinations(\"/queue/dest1\", \"/queue/dest2\").toUser(USERNAME).body(PAYLOAD);\nResponseMessage.destination(\"/queue/dest1\").toCurrentUser().body(PAYLOAD);\nResponseMessage.destination(\"/queue/dest1\").toCurrentUserNoBroadcast().body(PAYLOAD);\n```\n\nIssue: SPR-12170\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/55566411", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/55566411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "candrews": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/631", "title": "Add Travis CI configuration", "body": "Add basic Travis CI configuration.\n\nTravis will test pull request and branches to ensure they compile and pass tests.\n\nGo to https://travis-ci.org/profile/ and flip the switch to \"ON\" for \"spring-projects/spring-framework\" then merge this pull request.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26444918", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26444918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41431615", "body": "Note this pull request currently has test failures. I'm waiting for information on how Spring would like those failures fixed, see https://github.com/spring-projects/spring-framework/pull/532\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41431615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52867258", "body": "This change was made in e863f9a3715cd2a6cc20c764c3ded1ad4f8bffc9 (except it uses FileCopyUtils instead of StreamUtils, but the result is the same).\n\nThis PR should probably be closed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52867258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52868926", "body": "A series of commits has been made that addresses the issue that pull requests would fix, so I think it should be closed.\n\n@trask do you still have the Groovy bean performance problem you mentioned at https://jira.spring.io/browse/SPR-11875?focusedCommentId=105103&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-105103 ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52868926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52879370", "body": "I've enabled this on my fork so you can see that it works and how it looks: https://travis-ci.org/candrews/spring-framework/\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52879370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52924015", "body": "Same change made by in 8eac87064dd0d0884b830be68e2a6921f10bfede#diff-d41d8cd98f00b204e9800998ecf8427e\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52924015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57379563", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57379563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57379927", "body": "The referenced issue https://jira.spring.io/browse/SPR-10500 has been fixed by a series of commits - this pull request should be closed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57379927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57520755", "body": "Posted on the spring-framework-contrib mailing list: https://groups.google.com/d/msg/spring-framework-contrib/sbwZqOVeYtA/m8kLlVAXt6AJ\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57520755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59052091", "body": "@bclozel @snicoll @jhoeller Can someone please review (and hopefully merge) this pull request? I'd really like to see it included at some point and (imho) it's not really a big change.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59052091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65319162", "body": "@bclozel  I just rebased this as decc5cd1ae61284345d501a7aaaf77fe7e172e92 changed a few things around causing conflicts.\n\nCan you take a look and this and let me know what else needs to be done in order for this change to be merged?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/65319162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68460754", "body": "I think I showed in my comment at https://jira.spring.io/browse/SPR-12081?focusedCommentId=108698&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108698 this method is faster and more memory efficient than the current implementation.\n\nSince Spring 4.2 has been branched, now seems like a great time to accept to this PR - is there anything more I can do to assist in achieving that goal?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68460754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/69203725", "body": "Thanks, @bclozel!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/69203725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131811780", "body": "I think we may want to disable Feature.USE_TRANSIENT_ANNOTATION and enable Feature.FORCE_LAZY_LOADING - I find such a configuration to be much more expected. However, my PR just does the default configuration.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/131811780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132444452", "body": "@sdeleuze I've updated the PR - thanks for the feedback!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132444452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8265172", "body": "@bclozel I'm kind of sad that I don't have to appear as the commit's author... I was really hoping to get credit for this work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8265172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69352430", "body": "I'm honestly not sure... this was a long time ago. I've changed it to `java` as I agree that makes more sense.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69352430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69352445", "body": "Travis CI is using 1.8.0_65 as is... that doesn't seem so bad. In the interest of saving build time, it seems best not do `sudo apt-get update && sudo apt-get install oracle-java8-installer` as your junit example does. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/69352445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Polve": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/612", "title": "Enable the possibility to automatically copy selected headers from input message", "body": "Extension to @SendToUser annotation to allow the possibility to automatically copy selected headers from input message to output message.\nUseful to implement RPC pattern and track the association between request and reply.\n\nThis is a proposal to solve https://jira.spring.io/browse/SPR-12048\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hangsublim": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/604", "title": "add testNullSafeToStringWithXSSValue testcase to objectUtilsTests", "body": "In the absence of a message string for the error code, this is the message that gets written as the error.\nSo ObjectUtils class, nullSafeToString method parameter can contains XSS attack script value.\nSo I added convertXSSValue method and testCase.\n\nWhen the vaule contains script then the method converting the value safe.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/603", "title": "add asserBufferedRequestBodyFalseConfig in HttpComponentsClientHttpRequestFactoryTests", "body": "The HttpComponentsClientHttpRequestFactory throw UnsupportedOperationException when bufferRequestBody is set false. So I added testcase HttpComponentsClientHttpRequestFactoryTests to recommend about use SimpleClientHttpRequestFactory if bufferRequestBody is set false.\nBecause no buffer can not use OutputStream result.\nTestcase is useful of knowing the fact. And I added comment at that testcase.\n\nIssue: SPR-11981\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alien11689": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/598", "title": "[SPR-12159] Add filtered properties", "body": "Sometimes I need to load only subset of properties from files.\n\nhttps://jira.spring.io/browse/SPR-12159\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/54586256", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/54586256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cshannon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/581", "title": "Adding cacheSharedConsumers configuration for CachingConnectionFactory", "body": "There could be use cases to allow more fine grained control in the CachingConnectionFactory so the user can specify what is and isn't cached. Consumers, shared consumes, durables, no durables, etc could potentially be configured separately so that some types are cached and some not cached.  Therefore I split up the configuration of caching of consumers and shared consumers so either type can be configured separately.  Durable/non-durables could also be split up too in another commit.\n\nIssue: SPR-11958\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49477113", "body": "Closing request since support for this has already been rolled into 4.1.RC\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49477113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milgarubanjuk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/575", "title": "edit exception list type as Exception instead of Throwable", "body": "I've changed the exception list type from Throwable to Exception. It's more clear when @ExceptionHandler annotation use.\n\nIssue: https://jira.spring.io/browse/SPR-11933\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47636054", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47636054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50307364", "body": "hi~ any updates on this issue?\nThough that would break backward compatibility, that method only accepts Exception.\nI may think no one use throwable(or Error) type, so it doesn't cause any other issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50307364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52621334", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52621334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "trask": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/570", "title": "SPR-11875: Performance regression for custom autowireBean calls with many properties", "body": "Please see SPR-11875.\n\nThis commit reverts e1d11ec99d40051ecdb60191c49bc587373a031d and uses ConcurrentReferenceHashMap to fix SPR-8956 memory leak instead.\n\nAutowire benchmark https://github.com/trask/spring-autowire-benchmark is back in line with Spring 3.1.4 after this.\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "boazj": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/569", "title": "Fixed [SPR-11897]", "body": "Please refer to [SPR-11897](https://jira.spring.io/browse/SPR-11897).\n\nThe gist of the bug is that in the case of posting \"a=a;b=c\" as a path variable when shouldRemoveSemicolonContent is false, the matrix parameters are evaluated as [a->a, b->c] and the path variable remains \"a=a;b=c\" whilst in the case of \"aa;b=c\" the matrix parameters are evaluated as [b->c] and the path variable is passed as \"aa\" thus leading to inconsistent and undocumented behavior when a '=' sign is present in the pre-matrix (before the first semicolon) part of the path.\nThis fix assumes that parsing the pre-matrix part of the path was a desired feature (due to lack of official comment on SPR-11897) but that the returned path variable should omit what spring parsed as matrix variables.\n\nI've added several tests to validate this and fix other tests that expected it (for example: in case of having a path variable that it's first character is a semicolon, the test expected the entire value and not an empty string - I changed it to an empty string as all these values were parsed as matrix variables)\n\nCommit message:\nFixed SPR-11897 in a way that does not harm the feature (?) of parsing key=value in\nthe pre-matrix part of the path as though it was a matrix variable\n- added test to validate that scenario\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47327844", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47327844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "serioussam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/561", "title": "Added a cache to transaction manager lookup to alleiviate locking issue...", "body": "Added a cache to tranbsaction manager lookup to alleiviate locking issues when we have more than one transaction manager present in application.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "f0rth3": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/538", "title": "Poi excel view", "body": "Add abstract view for xlsx document using apache-poi\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "youngjee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/507", "title": "Fix return zero size array with empty String parameter in StringUtils.delimiitedListToStringArray", "body": "Prior to this commit, zero size String array returns if StringUtils.delimitedListToStringArray is called with parameter empty String (\"\")\n\nI think, after call StringUtils.delimitedListToStringArray(\"\", \",\", null);\n\nit should return one size String array -> [\"\"]\n\nbut it returns zero size String array.\n\nStringUtils.delimitedListToStringArray(null, \",\", null) & StringUtils.delimitedListToStringArray(\"\", \",\", null)\n\nshould returns differently. However there are same results.\n\nThere's no logic for empty String(\"\"), but just is for null parameter.\n\nI added if statement for \"\" parameter. The result will be one size String array.\n\nAnd also in SPR-11126, the issue will be fine.\n\nIssue: SPR-11126\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/276", "title": "[SPR-9719] Improve TypeUtils.isAssignable recognize TypeVariable types", "body": "I add th code in TypeUtils and TypeUtilsTest.\n\nIn isAssignable method, the case when parameter is TypeVariable is added.\n\nThis is reported in Jira SPR-9719: TypeUtils.isAssignable does not recognize TypeVariable types\n\nAfter checking if lhsType is instanceof Class<?>, rhsType will be check TypeVariable.\n\nelse if(rhsType instanceof TypeVariable) {\n   Type[] types = ((TypeVariable<?>)rhsType).getBounds();\n\n```\nfor(int i=0; i<types.length; i++) {\n   if(isAssignable(lhsClass, types[i])) return true;\n}\n```\n\n}\n\nPlease consider this.\n\nI hope that I can contribute.\nThanks.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16990489", "body": "Thanks.\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16990489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39186293", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39186293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39276617", "body": "I think the testcase ,when String is null and empty, shouldn't have been same.\n\nIs there any purpose that empty String and null String return same result? \n\nI changed the testcase \n\npublic void testCommaDelimitedListToStringArrayWithEmptyStringProducesEmptyArray() {\n        String[] sa = StringUtils.commaDelimitedListToStringArray(\"\");\n        assertTrue(\"String array isn't null with null input\", sa != null);\n        assertTrue(\"String array length == 0 with null input\", sa.length == 0);\n}\n\n-> sa.length==1 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39276617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cbaldwin74": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/481", "title": "Add merge support to nested collection properties", "body": "Prior to this change, the merge attribute on nested collections was not\nhandled properly which would result in the typical replacement\nbehaviour. This is because during the merging of the parent and child\nbeans the parent bean would have nested BeanDefinition objects while the\nchild would have a property with the nested name\n(beanA.beanB.propertyName). When it came time to look for matching the\nproperty names it would be looking for the nested name which would not\nexist in the parent.\n\nThe implementation of MutablePropertyValues.addProperty(PropertyValue)\nwill now try to find a chain of nested BeanDefinition objects that match\nthe nested property name and walk down the chain of beans and find the\nproperty and then merge if applicable.\n\nA JUnit test has been added to check for the new behaviour.\n\nIssue: SPR-9552\n\nI have signed and agree to the terms of the SpringSource Individual \nContributor License Agreement.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37559834", "body": "@sbrannen, you're welcome. Glad to have helped. If you have any other work that I could help with feel free to let me know.\n\n@cbaldwin74\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/37559834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "asaikali": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/456", "title": "Add trip clarifying that @Transactional is not applicable to @BeforeClass methods", "body": "This tip is needed because when using `@BeforeClass` with TestNG tests  unlike JUnit by the time `@BeforeClass` is called the whole application context is setup and and dependency injection is working therefore as a user it easy to assume that @Transactional should be working but it dose not work and then you waste lots of time trying to figure out why, until you make a call to `TransactionSynchronizationManager.isActualTransactionActive()` and discover that `@Transactional` is not supposed to be used with `@BeforeClass` when working with TestNG\n\nFor example \n\n``` java\n\n@ContextConfiguration(locations = { \"classpath:test.xml\" })  \n@Transactional\n@TransactionConfiguration(defaultRollback = true)\n@ActiveProfiles({ \"development\", \"standalone\", \"test-db\" })\npublic class TransactionalTest extends AbstractTransactionalTestNGSpringContextTests\n{\n    @BeforeClass\n    @Transactional\n     public void setupDB()\n     {\n          // the following assert fails before there is no TX\n          assertThat(TransactionSynchronizationManager.isActualTransactionActive()).isTrue(); \n          // do some stuff that needs a tx\n     }\n}\n```\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pacciu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/433", "title": "Update TransactionSynchronizationUtils.java", "body": "Change proposal for issue [#SPR-7907] at:https://jira.springsource.org/browse/SPR-7907\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jameskleeh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/417", "title": "Update AbstractMessageSource.java", "body": "Add method to pass in arguments along with a MessageSourceResolvable\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mouyang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/402", "title": "Converting Number to Models in Spring MVC", "body": "I had a Converter<Integer, Object> class I wanted to use to build a model off a @RequestMapping.  The conversion mechanism only worked with Converter<String, Object> instances.  I expected the request parameter my situtation to be an Integer, so I wanted to use the framework to validate parameters as opposed to adapting my existing class into a Converter<String, Object>.\n\nThe documentation has not been updated to reflect this feature.  I am waiting for approval of this enhancement before doing so.\n\nIssue: SPR-11060\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32413979", "body": "Hello, I made some further comments in JIRA (https://jira.springsource.org/browse/SPR-11060).  Hopefully this explains the motivation of this pull request.  Any feedback would be appreciated.  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32413979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paturuv": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/387", "title": "Enhanced with ability to add advice to ProxyFactory - http://forum.sprin...", "body": "...g.io/forum/spring-projects/web-services/723874-ability-to-seamlessly-execute-custom-java-code-around-the-invocation-of-a-webservice\n\nPlease refer to the following post for details:\n\nhttp://forum.spring.io/forum/spring-projects/web-services/723874-ability-to-seamlessly-execute-custom-java-code-around-the-invocation-of-a-webservice\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26501482", "body": "Please refer to the following post on spring forum for more details:\nhttp://forum.spring.io/forum/spring-projects/web-services/723874-ability-to-seamlessly-execute-custom-java-code-around-the-invocation-of-a-webservice\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26501482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26683926", "body": "Thank You, Phil, Looking forward for it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26683926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031302", "body": "To externalize the ability to add single custom advice\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031326", "body": "Modified to pass the self reference to the constructor, for setting the target source\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031342", "body": "Adding all the custom advices to the ProxyFactory bean\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031359", "body": "Setter method to set advice list\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031366", "body": "Getter method to get the advice list\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7031366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "vvictorlee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/361", "title": "Add \"ignoreResourceNotFound\" attribute to the @PropertySource", "body": "Currently, a file is required to exist if it is added to the @PropertySource annotation. If the application already \nhas the properties it needs, it should be possible to launch it without the associated file being present:\n\n```\n@PropertySource(value = \"classpath:/notexists.properties\", ignoreResourceNotFound = true)\n```\n\nAdding new attribute 'ignoreResourceNotFound' to @PropertySource,\nuser can decide to ignore the not-existing resource.\n- default is false\n- The ignoreResourceNotFound is supported for XML-based application\n  context by context:property-placeholder\n\nConfigurationClassParser is changed to load properties regarding option 'ignoreResourceNotFound', \nand PropertySource is changed to have new member 'boolean ignoreResourceNotFound'. \nThank you.\n\nissue: SPR-10932\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25055577", "body": "Maybe this issue needs assignee. (https://jira.springsource.org/browse/SPR-10820)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25055577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38890985", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38890985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38891001", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38891001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38891011", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38891011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jeffbrown": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/355", "title": "Beanbuilder spring4", "body": "I am working with Juergen to get the bean builder code to a state such that it can be included in Spring 4.  The code represented in this pull request has been tested with Grails 2.4 snapshots and so far everything works well (more testing is pending). If we can get something into the Spring code base so that a build snapshot can be published that will greatly simplify work that we need to do to verify and finalize this code.  As it is all of the testing is being done in my local development environment where I have built this latest snapshot code and installed it into my local maven repo for consumption by Grails snapshots and related plugins.  Having this snapshot published to a public repo will allow us to do more thorough testing in our CI environment.  Please let me know whatever I can do to help move forward with this.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1772210", "body": "I think spring-lang-groovy was already in the list so it is there twice now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1772210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1775388", "body": "Something that will need to be addressed if the code is moved into any of the other subprojects is configuring the joint compiler.  Right now the spring-lang-groovy subproject is configured with this...\n\n```\ncompileJava.enabled=false\nsourceSets {\n    main {\n        groovy {\n            srcDir 'src/main/java'\n        }\n    }\n}\n```\n\nWhat that does is disables the java compiler for this subproject and adds the src/main/java directory to the groovy compiler's set of source directories.  That way when the groovy compiler runs it will find all of the files under src/main/groovy and src/main/java and make sure they all get compiled together.  They need to be compiled together because there are bidirectional dependencies between the java and the groovy code.\n\nThere are another couple of options.\n\nOne other option is to not do any special configuration stuff but put all of the .java source files in the .groovy source directory.  If you do this, then the groovy compiler will find them by default and no special config is necessary.  This feels funky to me, but it works.\n\nAnother option is to not disable the java compiler but instead just remove src/main/java from the java compilers set of source directories and in addition to that, add src/main/java to the set of groovy source directories.  That looks something like this...\n\n```\nsourceSets {\n    main {\n        groovy.srcDir 'src/main/java'\n        java.srcDirs = []\n    }\n}\n```\n\nThat would be instead of (not in addition to) the other configuration snippet I showed above.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1775388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1781660", "body": "Luke,\n\nWhen you say \"This is a more accurate model\", to which \"This\" are you referring?\n\nThere is standalone Java source in this project.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1781660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "beamerblvd": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/354", "title": "Added HTML close policy tag to control tag close style", "body": "This commit adds a new `<spring:htmlClosePolicy>` tag that can be used to specify how generated HTML tags are closed\u2014XML style (`/>`) or HTML style (`>`). This is necessary to properly generate W3C validator-compliant HTML code.\n\nIssue: SPR-10916\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18880541", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18880541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18958351", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18958351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19151864", "body": "Has anyone had a chance to look at this? I'm eager to make any revisions necessary so that we can get this merged. Some of the classes affected (`DispatcherServlet`, `FrameworkServlet`, etc.) are often-changed, and I'd hate for the merge to get messy and create a lot of work for y'all.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19151864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19151893", "body": "Has anyone had a chance to look at this simply change? I'd love to get this in before 4.0.M2.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19151893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19151905", "body": "*simple change\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19151905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19919922", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19919922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21201051", "body": "I posted this pull request nearly six weeks ago. I understand that some back-and-forth and revisions may be necessary before it can be approved. However, is six weeks I haven't received a single comment. The back-and-forth and revisions can't happen if I don't get any feedback. Can someone please look at this? I don't want it to sit there for so long that it's no longer mergable, and I really wanted it to be merged for Milestone 2.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21201051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21348478", "body": "I assume from the lack of comments after nearly seven weeks that this pull request is perfect :) ... can someone please merge it so that it will be part of Milestone 2?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21348478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21348955", "body": "According to JIRA, 4.0 M2 releases today. @philwebb said he wanted to get this into Milestone 2, and I share that desire. If there are simple revisions that need to be made, I can turn that around in 2-3 hours this afternoon. If there are more major revisions that need to be made, it's going to take me several days. @jhoeller, has this reached the top of your list yet?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21348955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21350867", "body": "Thanks!\n\nAs for your thoughts on allowing argument tags and comma values to be used together, I don't see how that can work. Unlike the `<spring:param>`, which consist of a key and a value, arguments for a message are _just_ a value and must be specified in the order they are numbered in the message. Consider this:\n\n``` xml\n<spring:message code=\"my.message.code\" arguments=\"15.25,World\">\n    <spring:argument value=\"8.6\" />\n    <spring:argument>This is another argument</spring:argument>\n</spring:message>\n```\n\nWhich argument is argument number 1? 2? 3? 4? IMO, this doesn't work and is extremely confusing. Requiring either/or is the simplest approach and doesn't require the user to understand the rules of merging the `arguments` attribute and the `<spring:arguments>` elements.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21350867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21363489", "body": "I do believe that could cause more problems than it will solve, but we'll see. Thanks for merging! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21363489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21365358", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement. Changes need to be merged into master and then also into 3.1.x and 3.2.x.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21365358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21371735", "body": "I have signed and agree to the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21371735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21372092", "body": "The first commit accidentally replaced some individual imports with wildcard (*) imports. The second commit corrected/reverted this. The total diff is clean.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21372092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21415635", "body": "I have signed and agree to the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21415635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "byungseok": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/332", "title": "Array type bean cannot be proxied because is is final class", "body": "AnnotationAwareAspectJAutoProxyCreator(AbstractAutoProxyCreator) class\nhas wrapIfNecessary() method. In this method, Spring AOP tries to \nfigure out whether current bean must be proxied or not.\n\nBecause array type bean is not skipped with current code, \nAnnotationAwareAspectJAutoProxyCreator tries to create proxy having \ninterfaces which array class implements.(java.lang.Cloneable, etc)\nFollowing Aspect could produce this with &lt;jdbc:embedded-database>.\n\n@Around(\"target(org.springframework.core.io.Resource[])\")\n\nMaybe this is usage error case, but repro project attached in issue\n(https://jira.springsource.org/browse/SPR-10793) shows side effect\nof above situation(absence of array type skipment). \n\nBean &lt;jdbc:embedded-database> has inner bean &lt;jdbc:script>, and inner\nbean is type of org.springframework.core.io.Resource[]. Although\nconfigured aspect was @Around(\"bean(foo)\"), inner bean &lt;jdbc:script>\nwas proxied resulting java.lang.IllegalArgumentException: Cannot \nconvert value of type [com.sun.proxy.$Proxy6 implementing...........\n\nInvalid pointcut match was problem of aspectweaver, but if array type\nbean can be skipped from wrapIfNecessary() method, this side effect \ncould be eliminated.\n\nThank you.\n\nIssue: SPR-10793\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38895524", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/38895524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GeorgeVan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/309", "title": "Add scaleToUse to org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal.", "body": "", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815001", "body": "Not yet. How to sign?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40815001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40818010", "body": "Singned by now. Just read source code for fun then,so pulled request casually and did not read that link. \ud83d\ude04 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40818010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "obecker": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/293", "title": "Add support for MethodExecutor in FunctionReference", "body": "This commit enhances FunctionReference to also support MethodExecutor\ninstances for evaluation (besides static java.lang.reflect.Method\ninstances). This enables dynamic SpEL function definitions where the\nfunction to be executed is not known at compile time.\n\nAdditionally this commit\n- removes all mentions of lambda function definitions in comments since\n  they are not implemented\n- fixes the type name in the message of the thrown\n  SpelEvaluationException in case the value of the function has the wrong\n  type and cannot be executed\n\nIssue SPR-10589\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5947530", "body": "I have added the note on the Individual Contributor License Agreement, however I'm not sure if I should (or if I even can) change the commit message as required be the guidelines.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5947530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5948981", "body": "## The appropriate commit message should probably read as follows:\n\nPass null values through the converter before checking for null in boolean operators OpOr, OpAnd, OperatorNot\n\nSince null values might be converted into something meaningful in\nGenericConversionService.convertNullSource(), the boolean operator\nimplementations OpOr, OpAnd, and OperatorNot must check the\nvalue(s) for null after type conversion, not before.\nMoreover, ExpressionUtils.convertTypedValue() must not prevent\nnull values from being passed to the converter.\nA use case would be the treatment of null as false, like in Groovy for example.\n\nIssue: SPR-9445\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5948981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6692677", "body": "@cbeams @giovannidalloglio regarding test for Double first or test for BigDecimal first:\n\nIf one operand is Double and the other is BigDecimal, then the operation should treat both as BigDecimal. So the test for BigDecimal first is correct.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6692677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18469833", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18469833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18469914", "body": "It would be great if this change could be accepted for the 3.2 branch so I could use it on my current projects.\nHowever, since this is an enhancement, the corresponding documentation should probably extended as well (unless it becomes an undocumented feature in version 3.2 ...) The relevant chapter is http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/expressions.html#expressions-ref-functions\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18469914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/885668", "body": "all of the removed code will be executed in ExpressionUtils.convertTypedValue(), so there's no need to do it separately here\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/885668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "teddyjoo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/285", "title": "Add method that execute batch update by named param", "body": "Prior to this commit, BatchSqlUpdate class didn't override \nupdateByNamedParam() method but overrided update() method only.\n\nNow BatchSqlUpdate class support both method.\nThis change would make BatchSqlUpdate class more consistent\nbecause parent SqlUpdate class supports both method.\n\nTo add new method, existing codes from SqlUpdate class and \nBatchSqlUpdate class were reused.\n\nIssue: SPR-10435\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17919389", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17919389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gpitteloud": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/277", "title": "Add support for @Parameters in SpringJUnit4ClassRunner", "body": "Prior to this commit, it was not possible to use JUnit's @Parameters\nannotation in a test that runs within the Spring TestContext\nframework, in order to run each test multiple times with values\ndefined by the invocation of the @Parameters static method, as it is\nthe case with JUnit's Parameterized runner.\n\nThis commit introduces such support, by delegating either to a\nparameters-aware spring runner, or to the standard Spring runner,\ndepending on the presence or absence of a public static method\nannotated with @Parameters.\n\nSpringJUnit4ClassRunner now just makes the decision and delegates\nto another runner. The code that was once in SpringJUnit4ClassRunner\nis now in a package-protected internal runner\n(InternalSpringJUnit4ClassRunner), which is used either directly or\nthrough the package-protected, parameters-aware spring runner\n(SpringJUnit4ParameterizedClassRunner).\n\nThe TestContextManager is created once and reused for each set of\nparameters. If @IfProfileValue is present on the class level and the\ncriteria is not matched, the TestContextManager is not created,\nother annotations (@ContextConfiguration, @TestExecutionListeners)\nare not parsed, and the test class is immediately ignored.\n\n@BeforeClass/@AfterClass methods and TestExecutionListener's\nbeforeTestClass/afterTestClass methods are each executed once for\na parameterized test class.\n\nIssue: SPR-5292\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n\nGa\u00ebtan\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kpankowski": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/227", "title": "SPR-10250 - BufferedImageHttpMessageConverter redefine content type of HttpOutputMessage", "body": "More details here: https://jira.springsource.org/browse/SPR-10250\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dsyer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/162", "title": "SPR-9335: catch exceptions explicitly where possible", "body": "This change restores the old behaviour in Spring 3.0, as near\nas I can tell, without breaking the Groovy aspect changes\nintroduced in 3.1.\n\nSince no-one has come up with a test case for all the catch blocks\nand there is no test project for the WAS case (I tried) we have to\nrely on the users in the JIRA thread to test this change.\n", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6481845", "body": "@Sam: thanks for the file header comment.  I fixed it and obliterated your comment by re-pushing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6481845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9298398", "body": "I rebased this onto master and cleaned it up a bit.  Just 2 files now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9298398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10061925", "body": "@Rossen the proposed patch is based on snakeYaml.  I've been using it for over a year now and it seems pretty good.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10061925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11284808", "body": "@slorber The proposed change already includes a PropertiesFactoryBean from which you can create a PropertySource trivially.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11284808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14692953", "body": "When it fails, what is the value of `timeZone`?  Maybe the test `timeZone.equals(TimeZone.getTimeZone(\"CET\"))` is failing, but you are actually in that time zone?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14692953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14693311", "body": "New patch fixes timezone explicitly instead of using default.  Should pass even in Europe now!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14693311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16347483", "body": "I'm still working on this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16347483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "twicksell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/135", "title": "Proposed fix for SPR-8097", "body": "Resubmitting pull request for SPR-8097 with some test case fixes and squashed commits.\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samion": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/107", "title": "Implementation for https://jira.springsource.org/browse/SPR-9585", "body": "Implemented wildcard support for profile selection.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nurkiewicz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/84", "title": "Passing lookup-method args to bean constructor", "body": "<lookup-method/> should allow specifying any number of parameters.\nThese parameters should be passed directly to the constructor of the\nnewly created bean.\n\nPreviously <lookup-method/> had to be parameterless. Now if you provide\nany parameters to that method, they are passes directly (1 to 1) to the\nbean constructor, just like if they were declared using\n<constructor-arg/>. The idea was originally suggested here:\n\nhttp://nurkiewicz.blogspot.com/2010/08/creating-prototype-spring-beans-on.html\n\nThis change is based entirely on a patch provided by Karl Pietrzak.\n\nI submitted CLA.\n\nIssue: SPR-7431\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12625753", "body": "Unfortunately my pull request causes `testReplaceMethodOverrideWithSetterInjection()` in `org.springframework.beans.factory.xml.XmlBeanFactoryTests` to fail. It's this assertion:\n\n```\nTestBean notJenny = oom.getPrototypeDependency(\"someParam\");\nassertTrue(!\"Jenny\".equals(notJenny.getName()));\n```\n\nit makes sure that overloaded `getPrototypeDependency(String)` method is not modified by Spring and only parameterless `getPrototypeDependency()` is overriden by `lookup-method` mechanism. This behavior changes after applying this patch. Now all methods, no matter if they have parameters or not, are overriden by `lookup-method` mechanism.\n\nThis means that `lookup-method` with parameters is not really backward compatible - in case there was more than one overloaded method. I am not sure how big this is. Applying `lookup-method` only if target bean has matching constructor (not always, what this pull request does) will help a little, but won't get rid of incompatibility completely. \n\nMy reviewed code is available at [SPR-7431b branch](https://github.com/nurkiewicz/spring-framework/tree/SPR-7431b).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12625753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14202922", "body": "@philwebb I have, quite some time ago - but I can't find any ref. num. And I feel a bit silly to admit I made a mistake in initial commit, I blame GitHub inline editor. Either pull both commits or simply fix it in master and disregard this pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14202922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "eyealike": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/10", "title": "Re: SPR-8941: Lifecycle processing ignores phases for circularly dependent SmartLifecycle beans", "body": "First stab at a fix this issue. For discussion see http://jira.springsource.org/browse/SPR-8941.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbeams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/1628303", "body": "Committed!  Thanks, Josh.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/1628303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/2076506", "body": "Rebased these changes into subversion trunk after review with Juergen.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/2076506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3171935", "body": "Hey Sam,\n\nNo worries.  Just a test.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3171935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3249531", "body": "Hi Costin,\n\nThese changes are now committed, but they have been cherry-picked instead of merged in order to cope with a number of local changes to the 3.1.x branch that you could not yet have seen.  You may be well aware of how to deal with such a situation, but just in case: you'll need to reset your 3.1.x branch against origin in order to reconcile the differences, e.g.\n\n```\n$ git fetch origin\n$ git reset --hard 3.1.x origin/3.1.x\n```\n\nThe above assumes that you don't have any additional commits on 3.1.x since the ones you've submitted here.  There are ways to deal with that too, if necessary.\n\nA few other things, since we're just getting started with the whole pull request thing:\n- You'll notice that I've updated the comments for each commit, generally following the [guidelines](http://spheredev.org/wiki/Git_for_the_lazy#Writing_good_commit_messages) laid out in Pro Git.  Would you mind moving to this style for your commits against the framework?\n- I think it'll be a good idea going forward to submit separate pull requests for separate atomic changes / JIRA issues.  That way any discussion thread can be dedicated to a single issue and not hold up the others making it in on their own.\n- We'll get something set up in JIRA that allows you to transition issues into a \"pull request submitted\" or \"waiting for review\" state so that you don't have to actually resolve issues that have not yet been merged.  Until then, just keep doing what you're doing and I'll keep an eye on things; just thought I'd mention.\n- You'll notice that I added 3.2 M1 as a fixVersion to the issues as well.  You can do the same going forward, since these issues really do need to be applied to both branches.\n- If you sync up and look at repository history in gitk (or whatever you use), you'll see that your changes have been applied against 3.1.x and then merged against master (3.2.x).  This will be the way things generally get done, just so you know.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3249531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3377346", "body": "I can look at this tomorrow if you're interested in a review.  Is there an associated JIRA issue?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3377346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3393537", "body": "See pull request #14\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3393537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3444086", "body": "Thanks, Ollie.  @jhoeller, your thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3444086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3758482", "body": "Hi Tadaya.  Are you actually focused here on building 3.1.x?  If you're OK building 3.2.x (which includes all changes from 3.1.x), then you can use the new Gradle build.  See https://github.com/SpringSource/spring-framework#building_from_source\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3758482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3776565", "body": "Resolved as \"Works as Designed\" in JIRA.  Closing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3776565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3777423", "body": "Closing, as SPR-7721 was fixed some time ago.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3777423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3777441", "body": "Closing, as SPR-7679 was resolved some time ago.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3777441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3777472", "body": "@aclement could you take a look at this?  I'll assign the JIRA issue to you as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3777472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3778707", "body": "@lepirlouit - you probably need to set your email address and name in the GitHub admin console.  You should also set your `git config --global user.name` and `... user.email` properties.\n\nWith minor tweaks, I've committed these changes at SpringSource@17cf465d239605632fee99d8c869ea5fd0bee14c, meaning you can pick them up immediately via 3.1.0.BUILD-SNAPSHOT.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3778707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3814090", "body": "Hey Thomas - looks good, could you just touch up the commit message per my comments in trisberg#1 / c7582e9?\n\nIf you `git commit --amend`, update the commit comment, and then `git push -f fixes-for-SimpleJdbcInsert`, this pull request will automatically update.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3814090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3825191", "body": "Thanks Thomas.  Please note the re-worked commit comment and updated date range in the license headers of the affected sources at 9fb6e2313ccf54fc3b2936f33e470f9eb1418a5c.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3825191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3858733", "body": "Hi Stefan,\n\nCould you provide a little more background here, i.e. the use case that prompted these changes?\n\nAlso, please provide a JUnit test (or consider modifying the existing XmlBeanDefinitionReaderTests).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3858733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3999539", "body": "Hi Phillipe, thanks for the submission.  We've just added a [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) doc to the wiki.  Please read through that and follow the instructions, particularly with regard to the CLA and commit comment formatting.  Note that it's fine for you to collapse these two commits into one given that they are addressing the same concern.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3999539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3999573", "body": "Hi Phillipe,\n\nThese changes should be fine; as mentioned in #37, please just touch up the commit according to the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines)\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3999573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4000934", "body": "Hi Stevo, thanks for the submission (and thanks for [all](35) [the](36) [others](38), too!).  We've just worked up a [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) doc.  Please read this over and touch up these pull requests accordingly.  This should streamline things going forward.  Cheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4000934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4006974", "body": "This is looking great, Stevo.  Thanks for taking the time to polish this up.\n\nJust a couple additional things to change.\n\nRegarding the subject line:\n\nInstead of\n\n```\nEhCacheFactoryBean.getObjectType specific before bean is created\n```\n\nConsider the following\n\n```\nPredict specific object type in EhCacheFactoryBean\n```\n\nFrom the \"Format commit messages\" section of the guidelines:\n- It is an imperative statement (1.)\n- It begins with a capitalized verb (2.)\n- It comes in at 50 characters or less (4.)\n- It concisely explains what this change does\n\nThe body of the commit comment looks good, though one line comes in at 74 characters instead of 72 (5.), and recognition of the CLA should actually go in the _pull request comments_, not the commit comment (4. from \"Submit your pull request\").\n\nNote that I haven't reviewed deeply the actual substance of the commit (though at a glance it looks good).  I just wanted to get these corrections in here as quickly as possible as I know you have other pull requests that you may be polishing up in the meantime.\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4006974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4081251", "body": "Stevo,\n\nI've committed the pull request, with a few changes:\n1. Rebased your branch locally against latest springsource/master (nothing you could reasonably do about this, since you initiated the request days ago); we do this so that the merge history is as tight and near-linear as possible.\n2. Touched-up grammar in the commit comment (not a big deal)\n3. Updated the Apache license headers to reflect that the sources have now been edited in 2012 (previous dates were 2011 and 2009).  This is an easy one to forget, but should always be double-checked and done.\n4. Removed trailing whitespace in the original commit.  I recommend switching on \"Show Whitespace Characters\" if you're using Eclipse, or whatever its equivalent is in IDEA. Eclipse is particularly bad about leaving trailing whitespace around after newlines.\n5. Removed those newlines entirely, following suit with the formatting in other parts of the class, e.g. #decorateCache has logic very similar to what is now in #getObjectType, but does not have newlines between conditional blocks.\n6. Added Javadoc explaining the behavior of #getObjectType, as it is now non-trivial.\n7. Added assertions where necessary in EhCacheSupportTests to properly cover the new logic in #getObjectType.  Prior to this, coverage was near-zero.  You did add a meaningful assertion in your original commit (thanks), but please be sure to provide reasonable coverage for all non-trivial changes.\n\nWith that said, the implementation itself looks really good, and Author: attribution is retained as the substance of your changes are intact.\n\nCongrats on your first commit, and thanks so much for taking the time with this and all the other issues lately!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4081251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4082458", "body": "Regarding {@link ...} tags in Javadoc, it's a good question.  This is one area of the framework where there are definitely different styles as you point out.\n\n2 and 4 require importing the type in order to save space in the {@link ...} tag.  There is nothing fundamentally 'wrong' with doing this, but we don't do it in the framework for a couple of reasons: First and most importantly, the set of imports in a given file has real significance to us as maintainers.  It's a quick way of reasoning about this class and its relationships without a full static analysis.  When documentation-only imports creep in, it makes this less meaningful.  Second, it is not a complete solution.  There are many cases where we refer in {@link} and {@see} tags to classes that cannot be imported due to being in higher-level packages.  Because of the way we generate our Javadoc, this is not a problem for the rolled up public API documentation (i.e. the links all work there), but it would be impossible to import these classes at the source level.\n\nSo for the reasons above, the best approach is to go with 2 _if_ the type has already been imported, i.e. is already actually used in the class at the source level:\n\n```\nimport foo.bar.Inject;\n@{@link Inject}\n```\n\nthe benefit here is that this requires as little duplication as possible, and is quite refactoring-friendly.\n\nif the type in question is not used at the source level, then go with 3:\n\n```\n{@link foo.bar.Inject @Inject}\n```\n\nthis avoids the need to import and renders the link as a short name instead of fully-qualified.\n\nAs you mention above, this does create a slight inconsistency in the rendered Javadoc, because in 3 the ampersand is not part of the hyperlink, whereas in 4 it is.  This is basically a compromise worth making because of the brevity and refactoring friendliness of 2 and the fact that when using 3, the fully-qualified names can get quite long, meaning that due to line breaks, the {@link} can end up being the first character of that line of javadoc, and it is illegal to lead with a '@' character, unless you're dealing with a legal javadoc param like 'see', 'author', 'param', etc.\n\nIt's not perfect, but that's more due to idiosyncrasies of Javadoc than anything else.\n\nThanks for asking!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4082458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4236331", "body": "Thanks for the submission, Tadaya. @sbrannen, can you take a look at this?\n\nIdeally, we would avoid the introduction of the @ParentContextConfiguration annotation, perhaps in favor of a 'parent' attribute that can accept a nested @ContextConfiguration, e.g.\n\n``` java\n@ContextConfiguration(\n    locations = \"child-context.xml\",\n    parent = @ContextConfiguration(\"parent-context.xml\"))\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class SomeTests {\n\n    @Autowired\n    protected ApplicationContext applicationContext;\n    // applicationContext.getParent() returns the parent app context\n}\n```\n\nUnfortunately, however, the above cannot work because it creates a cycle in the definition of the ContextConfiguration annotation (actually doesn't compile).  Still, perhaps we can come up with something a bit more elegant than yet another annotation here.  I imagine Sam has already thought about this quite a bit, so I'll turn it over to him for comments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4236331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240174", "body": "Yeah, perhaps @ContextHierarchy to communicate the semantics a bit better there.\n\nOn Feb 29, 2012, at 4:57 PM, Rossen Stoyanchev wrote:\n\n> Maybe an array of `@ContextConfiguration` annotations -- the first one is the parent of the second one, and so on...\n> \n>   @ContextConfigurations({\n>       @ContextConfiguration(\"parent-context.xml\"),\n>       @ContextConfiguration(\"child-context.xml\")\n>   })\n>   public class SomeTests {\n> \n>   }\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/43#issuecomment-4240154\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240600", "body": "good question.  will let @sbrannen weigh in when he gets a chance to look at this.\nOn Feb 29, 2012, at 5:10 PM, Rossen Stoyanchev wrote:\n\n> Also at the moment spring-test-mvc has [a programmatic way](https://github.com/SpringSource/spring-test-mvc/blob/master/src/main/java/org/springframework/test/web/server/setup/MockMvcBuilders.java) of doing the equivalent of `@ContextConfiguration`. Given that parent contexts will also [need to be supported](https://github.com/SpringSource/spring-test-mvc/issues/12) there, I'm beginning to wonder if the TestContext framework couldn't offer a code-based alternative to `@ContextConfiguration`, which spring-test-mvc could then build on. Don't know enough about `@RunWith` but perhaps the test could implement a callback interface such as ApplicationContextInitializer?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/43#issuecomment-4240474\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4240600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256423", "body": "Hi Phani,\n\nThanks for these fixes, they're now merged.  I have reworked the commit comments slightly, please take a look at 6c602d7bbc2f5a897ed1dc4ffa04b1155d9947d4 and 00d9c3f5e801acf2c73c0c643dfedcfcf80534e1.\n\nNotice the grammar in the subject line, length of the subject line, etc.  These commits now follow the \"format commit messages\" instructions in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) as closely as possible.\n\nAlso, please submit any future pull requests from a branch other than \"master\".  From the contributor guidelines:\n\n## Use short branch names\n\nBranches used when submitting pull requests should preferably be named according to JIRA issues, e.g. 'SPR-1234'.    Otherwise, use succinct, lower-case, dash (-) delimited names, such as 'fix-warnings', 'fix-typo', etc. In fork-and-edit cases, the github default 'patch-1' is fine as well. This is important, because branch names show up in the merge commits that result from accepting pull requests, and should be as expressive and concise as possible.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256548", "body": "Merged with minor touch-ups to commit comment (see 924c869b8a).  Thanks, Stevo.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256656", "body": "Hey Mike, thanks for this. Sorry to inject a bit of bureaucracy for such a minor commit, but could you check the box on our contributor license agreement and respond here letting us know this is done?  It's a one-time thing.\n\nhttps://support.springsource.com/spring_committer_signup\n\nbtw, this is mentioned in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256792", "body": "@rstoyanchev, could you review this commit for correctness wrt to HTML escaping, etc?  Just give a +1 here and I'll do the merging; just want to run it by you before doing so.\n\n@sslavic, in the meantime you could make one minor tweak on the commit comment side - I believe you're wrapping the body of comments at ~50 characters just as is done in the subject line.  It's actually better to go as close to 72 characters as possible in the body.  Besides for reasons of consistency with other commits, this helps ensure that `git log` output is more vertically concise.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4256792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257383", "body": "Thanks.  They've been linked in JIRA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257481", "body": "A single pull request is ok, as long as individual commits in the PR represent distinct atomic changes.\n\nI can merge #35 first, that's fine.  Rebase them if you like, but if I don't get to merging it right away, I'll rebase it again locally before committing anyway.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4267361", "body": "Juergen Hoeller\n\nOn Mar 1, 2012, at 7:27 PM, Mike Krumlauf wrote:\n\n> Chris,\n> The form is asking who is the project lead.  What name should I use to fill\n> in that box?\n> \n> Thanks,\n> Mike Krumlauf\n> \n> On Thu, Mar 1, 2012 at 06:45, Chris Beams <\n> reply@reply.github.com\n> \n> > wrote:\n> > \n> > Hey Mike, thanks for this. Sorry to inject a bit of bureaucracy for such a\n> > minor commit, but could you check the box on our contributor license\n> > agreement and respond here letting us know this is done?  It's a one-time\n> > thing.\n> > \n> > https://support.springsource.com/spring_committer_signup\n> > \n> > btw, this is mentioned in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > \n> > https://github.com/SpringSource/spring-framework/pull/44#issuecomment-4256656\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/44#issuecomment-4267129\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4267361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4268370", "body": "And merged!  Thanks, Mike.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4268370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4372248", "body": "@aclement, please take a look.\n\nOn Mar 7, 2012, at 5:09 PM, giovannidalloglioreply@reply.github.com wrote:\n\n> Hi.\n> \n> Some time ago, we found that the BigDecimals was not considered in the supported operations by  Expression Language. I also opened an issue: https://jira.springsource.org/browse/SPR-8716\n> \n> If you are interested, we'd like to share our enhancement.\n> \n> The updated operators are:\n> - gt\n> - ge\n> - lt\n> - le\n> - eq\n> - ne\n> - plus\n> - minus\n> - divide\n> - multiply\n> - power\n> - modulus\n> \n> You can merge this Pull Request by running:\n> \n>  git pull https://github.com/giovannidalloglio/spring-framework master\n> \n> Or you can view, comment on it, or merge it online at:\n> \n>  https://github.com/SpringSource/spring-framework/pull/54\n> \n> -- Commit Summary --\n> - Added BigDecimal capabilities to SpEl numeric operators\n> \n> -- File Changes --\n> \n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDivide.java (13)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java (15)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGE.java (14)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java (14)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLE.java (14)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java (14)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpMinus.java (14)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpModulus.java (9)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpMultiply.java (9)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java (14)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OpPlus.java (12)\n> M spring-expression/src/main/java/org/springframework/expression/spel/ast/OperatorPower.java (10)\n> M spring-expression/src/test/java/org/springframework/expression/spel/OperatorTests.java (183)\n> \n> -- Patch Links --\n> \n>  https://github.com/SpringSource/spring-framework/pull/54.patch\n>  https://github.com/SpringSource/spring-framework/pull/54.diff\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/54\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4372248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4389890", "body": "Hi Abdull,\n\nThanks for the fix.  Could you quickly sign our contributor license agreement?  Instructions can be found in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4389890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4390805", "body": "Thanks.  A couple quick additonal things:\n\n1) Please update your git config (at least for this project) to reflect your real name. (e.g. \"First Last me@mail.com\" instead of \"Abdull me@mail.com\").  This can be done with `git config user.name \"First Last\"`.  I'll add a note about this in the contributor guidelines.\n2) Please touch up the commit comment to follow the format laid out in the contributor guidelines.\n\nOnce complete, please `git push -f` against your patch-1 branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4390805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4395185", "body": "Hi Jyothi,\n\nI have not yet taken a look at your commits, but thanks in advance.  Please read through the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) and touch things up accordingly, e.g. with regard to squashing commits, commit comment formatting, signing the SpringSource CLA, etc.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4395185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4429603", "body": "Hi Tristan, thanks for the submission.  @rstoyanchev will take a closer look at this for substance, but in the meantime, please give the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) a(nother) read and touch up the following:\n- squash commits - these three commits appear to represent a single atomic change\n- polish commit comment subject and body\n- update license header date ranges\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4429603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4448149", "body": "Thanks.  Here's how you can \"make this the only commit on this branch\":\n\n```\ngit fetch springsource # assuming 'springsource' is the name of the remote for https://github.com/SpringSource/spring-framework\ngit checkout 301-redirects\ngit reset --hard springsource/master\ngit cherry-pick 17bcd8f17e831037b9e8aba6cc82a60691fe0f43\ngit push -f origin 301-redirects # assuming 'origin' is the name of the remote for your fork of spring-framework\n```\n\nThis will update this pull request to contain only the touched-up commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4448149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4518227", "body": "Thanks, Stevo.  @poutsma, could you give a +1 on this?  I'll do the merge, just want to make sure you've had a look first.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4518227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4519376", "body": "Merged.  Stevo, there were several changes that I made along the way:\n- Updated Apache license headers\n- Cleaned up new whitespace (trailing whitespace in newly-added empty lines)\n- Cleaned up old whitespace (FlightType had inconsistent mix of spaces vs. tabs)\n- Minor changes to the commit comment (subject line sentence structure, add articles where missing in body)\n\nEach of these are detailed in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4519376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4590802", "body": "See commit d2251a12c3638ad3349ab95a7887bcbbb0674f7f, which reverts JibxUnmarshallerTests to Latin-1 instead of UTF-8.  This was causing test failures on at least some systems.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4590802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4674489", "body": "Just do a forced push (-f) against your existing small-memory-fixes branch\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4674489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5120948", "body": "Hi Phillipe,\n\nCould you indicate whether you've signed the CLA, per the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines)?  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5120948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5129468", "body": "No, just need to know that it's been done.  Please add a note to your other open pull requests to this effect as well, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5129468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5170805", "body": "There were test failures after merging this pull request.  See fdded0768ebd65f040f0e9c970f50a22ee99d005 for a follow-on commit that takes care of these problems by updating everything to slf4j 1.6.1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5170805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5175794", "body": "@djkieras - it looks like this may have been a mistake.  Perhaps you forgot to select the correct target branch when submitting?  What are you trying to accomplish?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5175794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5176458", "body": "I see.  First, thanks for the contribution!  To answer your question, yes -- the 3.1.x branch is actively maintained and we'll see a 3.1.2 release in the near future.  Unfortunately, it's a little tricky managing backports against this branch, and it's something that I haven't yet documented explicitly.\n\nSo you have a couple options at the moment:\n1. Do nothing, and rest assured that SPR-9147 will be completed in preparation for the 3.1.2 release\n2. Take a shot at the backport yourself\n\nIf you go with (2), you'll want to do a couple things first:\n- Carefully read the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).  Again, specific instructions for performing backports aren't there yet, but you'll want to be familiar with everything there anyway, particularly with regard to the CLA (contributor license agreement -- don't worry, it's easy).\n- Study how backports against 3.1.x have been done thus far.  The best way to do this is with the following command:\n\n```\ngit log 3.1.x --grep 'Backport-Issue'\n```\n\nFrom there, you can try to `git cherry-pick` the commit from master onto 3.1.x and then `git commit --amend` in order to touch up the commit message, add the footer key/value entries, and generally make it look like the other backport issues.  You'll want to be very careful when performing this cherry-picking, because the project directory structure changed dramatically between 3.1 and 3.2.  Git is pretty good about compensating for this, but when there are newly added or deleted files, it can often fail to do \"the right thing\", meaning that you need to manually move files around, etc.\n\nAlso, you'll want to separate the slf4j version changes into a separate pull request (also per the contributor guidelines).  Is that actually an issue on the 3.1.x build?  It hasn't come up before at all.\n\nYou can simply close this pull request and open a new one, or you can modify it by changing the target branch from SpringSource:master to SpringSource:3.1.x.  If you do it this way, then touch up your local 3.1.x branch until it looks just right, and then do a force push against your fork, i.e. `git push -f origin 3.1.x:3.1.x`.  That will update this pull request with only the changes you've finally committed on your local 3.1.x, and then we can consider merging it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5176458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5248363", "body": "Thanks for the submission.  Please read and follow the instructions in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) and we'll take a look at this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5248363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5413619", "body": "Merged.  Thanks, Stevo.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5413619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5413693", "body": "This is merged, thanks Stevo.  Please note however that a couple modifications were necessary:\n- a number of the changed lines had trailing whitespace.  This is probably an artifact of your editor.  Consider making whitespace visible while editing (\"Show Whitespace Characters\" in Eclipse); or just examine carefully the output of `git diff` before pushing commits.  If you have color diffs enabled, you'll see trailing whitespace in red.\n- Apache copyright headers were not updated in most files, i.e. 2002-2011 being updated to 2002-2012.\n\nBoth of the above are covered in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n\nThis is a big improvement; it reduced the number of javadoc warnings from 265 to 103.  Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5413693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5413968", "body": "Ivo, I'm looking at merging this pull request, but need to know that you've signed the SpringSource CLA.  Please follow the instructions in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) and let us know you've filled out the form (it's easy and just takes a couple minutes).\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5413968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5414300", "body": "Thanks for the quick response!  You don't need to post the generated ID here (but do keep track of it).  On any future pull requests, you can just add the following line in a comment:\n\n```\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n```\n\nNote that I just updated the contributor guidelines document to make this clear.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5414300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5418210", "body": "This change has been merged, but note that several modifications were necessary:\n- The original commit added `OpPlusTest` under the old `org.springframework.expression` module.  This has been corrected such that the test lives under the new `spring-expression` module.\n- `OpPlusTest` has been renamed to `OpPlusTests` to follow convention with the rest of the framework.\n- A number of whitespace changes were necessary.  Particularly one line had trailing whitespace, which should always be avoided.\n- The `@since` tag on `OpPlusTests` was updated from 3.0 to 3.2\n- `@author Ivo Smid` tag added to `OpPlus`, as the contribution is significant enough to merit doing so.\n- The commit message was updated to adhere to the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n- `@code` tags now replace `<code/>` tags in Javadoc.\n- Javadoc now wraps at 90 characters.\n- The new OpPlus#convertTypedValueToString method visibility has been decreased from protected to private.  This is to avoid adding new elements to the public API until it is deemed necessary.  Users are free to request that this method be opened back up, based on legitimate use cases.\n\nMost of the items above are covered in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).  Please review it completely before future submissions.\n\nThanks for the contribution, Ivo!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5418210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5434838", "body": "@poutsma,\n\nThanks for putting this together.  Overall I think it's a good idea.\n\n### style\n- ASL copyright headers should be 2002-2012 for consistency.  I agree this makes little sense for new sources, but this the overwhelming convention throughout the rest of the framework.\n- there is an unused JspConfigDescriptor import in DispatcherServletInitializerTests\n- to fix the two-commits problem, squash the two commits into one (e.g. using `git rebase -i`), then do a `git push -f` against your SPR-9300 branch.  This pull request will automatically update, showing that there is just one commit now.\n- please add the \"Issue: SPR-9300\" footer to your commit comment, as per the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines). please eliminate the trailing period from the subject line of the commit comment as well.\n- `@since` tags read \"3.1.2\", but it's not clear to me that we'll backport this yet.  I would prefer not to until we've at least vetted it during the 3.2 M1 phase.  After that, if there's consensus we could possibly backport in a 3.1.3, but in any case the `@since` tags should be updated to read \"3.2\".\n- javadoc `@return` tags etc that are long enough for a line break shouldn't be indented after the line break.  I agree this reads better in the sources, but it's not the convention throughout the rest of the framework.\n\n### content\n- I'll echo @jhoeller and @rstoyanchev with regard to providing support for multiple dispatcher servlets.  I think it would clarify the matter if we restrict support only to a single servlet.  This is by far the majority case (I don't know if I can think of actually seeing a multiple-DS config in the wild, though I'm sure it's out there on occasion).  This means that the `servletName` property will in most cases go unused, and we'll have to explain that in the Javadoc.  It means that the `getServletNames` method is immediately confusing, because most folks only have a single DS.  It also means that folks who do wish to override `getServletNames` will always have to box up the name of their servlet in a String[]{...}.  I'm of the mind that most users barely understand the configuration and mechanics of the Spring DispatcherServlet, if at all.  Whatever we can do to make things simple and straightforward is good in my book -- and that's why I generally like these subclasses -- but dislike the multi-servlet support.  Last point: if someone really wants the multi-servlet approach, an Abstract_Multi_DispatcherServletInitializer could be created/contributed.  That would prove that at least one real user wants it.\n- I think that the packaging is sensible.  No problems from my side.\n- I don't think it's necessary to provide the ServletContext as a parameter to #createServletApplicationContext.  At least I can't think of a use case at the moment.\n- these new classes should be documented in order to be useful.  Please consider adding references to Javadoc where appropriate (like `@see` tags in WebApplicationInitializer, ContextLoaderListener, DispatcherServlet, etc), and also of course the reference documentation.  At least please add a JIRA issue for this.  It wouldn't make for a bad blog post, either when 3.2 M1 drops.  With regard to Javadoc on the classes themselves, what you've already written looks good.  You may have noticed that I've been taking an example-driven approach, actually putting typical usage snippets in the Javadoc (see WebApplicationInitializer itself).  This would be nice for consistency and usability in your implementations as well.\n- I agree that the naming of AbstractAnnotationConfigDispatcherServletInitializer is unfortunate, but it is consistent (with the other types in the hierarchy and with the AnnotationConfig[Web]ApplicationContext hierarchy).  We've gone this long without abbreviating classes, I'm not sure why we'd start now.  I'm open to other opinions/naming suggestions, though -- based on the feedback I've been getting so far, people do seem interested in the code-based approach to servlet container configuration, so it's likely enough that these classes will get used.  Naming shouldn't scare them off.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5434838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436590", "body": "@swachter,\n\nThis looks like a reasonable addition, but there are a number of things that need to be touched up before your changes can be merged.\n\nFirst, please read the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) completely.  You'll find instructions there on each of the following items:\n- indicate that you have signed the SpringSource contributor license agreement\n- fix whitespace errors, e.g. use tabs not spaces and eliminate all trailing whitespace\n- squash/rebase into a single commit\n- create a JIRA issue corresponding to this pull request\n- follow the commit comment formatting guidelines\n- issue the pull request from a branch with the same name as the JIRA issue\n- issue the pull request against `master`, not `3.1.x` (backports will be considered by the team later).\n\nNote that you'll need to issue a separate pull request in order to change the branch name.  Just reference this pull request in the new one by typing #28 somewhere in the request.\n\nThe best thing to do is to sync up to the latest sources from SpringSource/spring-framework, create a new branch called SPR-#### from the master branch, apply your changes there, touch up the items mentioned above and issue a new pull request from that branch.  Shouldn't take too long.\n\nFor now, I'm closing this pull request in anticipation of the new one.\n\nThanks for taking the time to contribute!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436735", "body": "Hi Sergey,\n\nThanks for the submission!\n\nFirst, regarding the slf4j conflicts: we're not seeing HibernateJtaTransactionTests failing under [the 3.1.x CI build](https://build.springsource.org/browse/SPR-B31X), so it's not clear to me why it's happening for you.  We did just make a similar change in master (upgrading slf4j-jcl to 1.6.1), but there is a different build system in place there.  The 3.1.x line looks stable for us.  Can you give some details about your Java vendor / version, Ant version, etc?\n\nYou may not have meant to do this, but you also added a second commit regarding ConfigurationClassEnhancer to this pull request, which you can see above.  Pull requests should be dedicated to a single issue, and that's why we ask that folks submit pull requests from dedicated topic branches, not from long-lived branches like master, 3.1.x, etc.\n\nPlease double-check that you're still seeing the dependency issue, and read and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) document completely.  I'm closing this pull request, because you'll need to issue a new one anyway (in order to submit from a topic branch).  When you submit the new pull request, please mention this one by typing #71 somewhere in the pull request comment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436773", "body": "Closing this pull request as the submitter indicated he won't be signing the SpringSource CLA this time around and making the other necessary modifications as specified in the contributor guidelines.  @rstoyanchev will take the implementation from here in the linked JIRA issue (which is scheduled for 3.2 M1).  In any case, thanks @allnightlong for bringing this to our attention!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436898", "body": "Hi @Dridi,\n\nThanks for the contribution.  Please read and follow the instructions in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines), particularly signing the SpringSource CLA (it's easy and just takes a moment).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5436898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5440163", "body": "@Dridi, in the interest of expediency, I've merged these changes into master.  You can see the commit at f779c199ea272cf61781e120b1ab2efc50de0cbb.  I'm closing this pull request and resolving the JIRA issue, but please do fill out the CLA as requested and leave a comment here indicating that you've done so.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5440163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5457012", "body": "Thanks, SPR-7764 has been resolved as a duplicate.  FYI, I've created a backport task against 3.1.x for this fix that you may wish to watch: https://issues.springsource.org/browse/SPR-9363\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5457012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5457105", "body": "Thanks Tadaya, @rstoyanchev, can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5457105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5533464", "body": "@rstoyanchev, looks like you're already on this based on the linked jira issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5533464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5533604", "body": "Movin,\n\n[`ReloadableResourceBundleMessageSource`](http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/context/support/ReloadableResourceBundleMessageSource.html) should already provide what you're looking for here: it can accept any of Spring's resource prefixes, such as `classpath:` or `file:`.  Will that work for you just as well?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5533604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5567966", "body": "Did you consider adding functionality to `ReloadableResourceBundleMessageSource` instead?  Adding a `ClassPathResourceBundleMessageSource` is confusing when this kind of behavior is already part of the reason the `Reloadable` variant exists.\n\nFor this reason, I'm not sure this change will make it into the framework in its current form.  Possibly if this were an improvement to the existing `Reloadable` variant -- whether that's worth the effort on your part is of course up to you.\n\nIn any case, however, you'll want to take a close look at the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) document and follow the instructions there -- for this pull request or any in the future.\n\nLet me know if you intend to do anything further with this pull request.  I'll close it if not, but I'm happy to work with you further if you wish.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5567966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5577043", "body": "That sounds good, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5577043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5665730", "body": "Thanks, Chin!  This was very thorough!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5665730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5688968", "body": "Giovanni, could you please indicate that you've signed the CLA per the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines)?\n\nAlso please check that there are no conflicts with some recent changes that were made to OpPlus.  You can rebase against the latest SpringSource/master and do a force push to update this branch.  Ideally, you should actually submit the pull request from a branch named SPR-8716, instead of your master branch.  This is also covered in the guidelines.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5688968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5693516", "body": "David, as mentioned at [SPR-9405](https://jira.springsource.org/browse/SPR-9405), this work overlaps heavily with [SPR-7782](https://jira.springsource.org/browse/SPR-7782).  One thing you'll want to do is read through and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).  Feel free to make the necessary changes and force push them back up to this branch.\n\nI'm not sure that the separate classes are really necessary here.  We should be able to simply add an additional Log instance where necessary, giving it its own dedicated category name.  In any case, give SPR-7782 and the contributor guidelines a read, and then let's discuss further.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5693516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5712831", "body": "Thanks, Ollie!  This is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5712831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5718680", "body": "No problem.  Git takes a little time to get used to, but it's worth it!  Feel  free to simply create a new pull request with the cleaned-up commits.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5718680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5721498", "body": "In addition to the contributor guidelines, you might find it helpful, Giovanni, to simply browse through the commit log to see how other commits look.  You can easily do this with `git log`, and particularly with `git log --author=cbeams`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5721498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5735756", "body": "Closing per comments at https://jira.springsource.org/browse/SPR-9323\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5735756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5736141", "body": "Thanks Philippe!  This is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5736141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5737313", "body": "Hi Philippe,\n\nStill happy to commit this; could you touch up the commit comment formatting per the guidelines?  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5737313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5737763", "body": "Merged.  Note that the commit comment was updated slightly, a line of trailing whitespace removed, and else blocks formatting changed from:\n\n```\n} else {\n```\n\nto\n\n```\n}\nelse {\n```\n\nfor consistency.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5737763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5740721", "body": "Thanks, Nikita.  This is now merged.  The substance of your commit was pretty solid, but note that there were a number of changes necessary before actually committing:\n- Reformatting of commit comment, including subject line, content of body and updating your Author: metadata\n- Formatting of new `static final` fields\n- Completing Javadoc for new #getMethodParameterAnnotations\n- Updating Apache license header date ranges\n- Consistent formatting of braces, e.g. opening `{` on same line, not newline; `else {` on newline instead of same line `} else {`\n- Use of Spring's own `Assert` class instead of native Java assertions\n\nAlso, for any future pull requests, please submit from a topic branch with the same name as the JIRA issue, e.g. SPR-9298.\n\nMost of the items above are covered in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5740721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5741747", "body": "@poutsma, just a ping on this.  We can still get this into 3.2 M1 if you're interested.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5741747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5741877", "body": "Hi Richard,\n\nThanks for the submission.  What led you to this?  i.e. did you run into a thread-safety issue around existing TypeConverters?\n\nIn any case, please carefully read and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) and we'll get this committed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5741877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5741930", "body": "@jhoeller, @costin -- what shall we do with this after all?  It's a shame to see these changes sit here, but it's not quite clear whether they should be committed as yet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5741930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742048", "body": "Hi Taylor,\n\nThanks for the submission.  We're gearing up for the 3.2 M1 release, and it's a possibility to get this committed.  It still needs review, but the first thing you should do is carefully read and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n\nI'm closing this pull request.  Per the guidelines, you'll want to open two new ones, each dedicated to the respective SPR-8087 and SPR-9166 issues.\n\nPlease also comment on the JIRA issues with links back to these pull requests.\n\nI'll be happy to work with you in reviewing these changes.  Let's see if we can get them in.  Cheers!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742177", "body": "Hi Jyothi,\n\nJust following up here, did you see my comments above regarding the contributor guidelines?  Please read and follow those to take the next step in getting this committed.  Also, you should submit these changes against `master`, not `3.1.x`.  I'm closing this pull request, because you'll need to create a new pull request in order to submit against `master` anyway.  Please do create a new one!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742322", "body": "Thanks Richard, understood.  I'll \"re-implement\" accordingly ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5747970", "body": "Hi Dimitry,\n\nThanks for the submission!\n\nWe're just gearing up for the 3.2 M1 release, and at least with regard to the `JacksonObjectMapperFactoryBean`, we'd like to see about getting this into the framework.\n\nCould you read and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines)?  The first thing to do would be separating these into two separate pull requests -- you can see the rest of the details in the doc.\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5747970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5753023", "body": "Looks great, Petr.  Thanks!  This is now merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5753023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5753086", "body": "Yes, that's fine.  We won't release until later in the week, for sure.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5753086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5759720", "body": "Hey Stevo, a solid implementation as usual.  Thanks, and this is now merged.  Just a couple notes on what I did before actually merging it:\n- fixed trailing whitespace issues\n- fixed `} else {` syntax => `else {` (such that else is on a newline)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5759720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5759873", "body": "86eba90 has been committed as 51ae6845ad0aaa1b8ea6f002ddd4f8ded45a9dbc, just updating the commit comment.  Stevo, also notice that this was submitted with your yahoo.com address, whereas your other commits have been from gmail.  I updated this as well.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5759873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5761318", "body": "Thanks, Stevo, this is merged.  Take a look at 6ffb0436fa55fb73048a5a9133a98e122e490119; you'll see I applied your fix to the `#toCodeForSuffix` method as well, and for the same reasons.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5761318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5761348", "body": "Closing this based on the comment thread.  Thanks Tristan.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5761348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5761826", "body": "Thanks, Andy.  This is committed, with a number of minor polishing changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5761826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5762394", "body": "Nice!  Thanks Philippe, this is committed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5762394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5762589", "body": "Thanks, Stevo!  Committed, after changing Apache license date ranges and touching up the commit comment for minor  grammar issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5762589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5763299", "body": "@sbrannen, could you take a look and comment here?  I see that SPR-7655 is currently in the 3.2 Backlog, but if you're happy with Tadaya's contribution here, perhaps it could be fast-tracked for 3.2 M1.\n\nTadaya, thanks for the submission.  While Sam is taking a look, could you please read through and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines)?  There are a number of things that should be touched up, e.g. commit comments, squashing into a single commit, signing the CLA, etc.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5763299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5764738", "body": "Hi Hannes,\n\nPer my comments on SPR-8941, this is looking pretty good with regard to content.  Please read through and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) (which didn't exist when you first submitted this pull request), and we'll go from there.\n\nA couple things that aren't expressly in the guidelines:\n- whitespace in method invocations/declarations (`getPhase(bean)`, not `getPhase( bean )`, etc)\n- braces on same line, not newline, etc\n- don't use `final` on local variables unless necessary (nothing wrong with this, it just hasn't been the convention in the rest of the framework)\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5764738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5775019", "body": "Great, thanks!  We'll wait for @sbrannen's feedback now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5775019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5781334", "body": "Hi Scott,\n\nThanks for the submission.  From an implementation point of view it looks like a good start.  Let's back up for a moment, however, and consider the case for this feature.\n\nWhen SPR-4774 was originally submitted in March 2008, Bean Validation 1.0 (JSR-303) hadn't yet gone through even a draft review and the final release was more than a year and a half out.  So David's original idea of a complete annotation-based validation approach following suit with Spring's @Component model made a lot of sense.\n\nBut JSR-303 did go final in the meantime, and has since enjoyed wide adoption.  You mention in your description above `LocalValidatorFactoryBean`, but I haven't yet seen an analysis of this proposed feature with regard to the existing features in Spring's JSR-303 support, e.g. what value it adds beyond or orthogonal to the status quo.\n\nI'll hold off at this point on enumerating my own detailed thoughts about this, but will say that if in our JSR-303 support we have an solution that hits ~80% of actual use cases, I would be remiss to introduce yet another validation approach, particularly when we already have Validator interfaces both Spring and standardized, @Valid and (in Spring 3.1) @Validated.  The introduction of additional @Validator and @Validate annotations at this point would almost certainly be confusing to the very audience they intend to help.\n\nWhat are your thoughts here?  What unique value does this new annotation-based model offer that cannot be achieved otherwise in modern-day Spring, e.g. through existing JSR-303 support and possibly in combination with custom Validator implementations when necessary?\n\nBy the way, your point about Spring's single validator model is well-taken.  It is unnecessarily constraining.  A very easy solution to this would be to introduce a `CompositeValidator` implementation which acts as the one and only validator in the system but itself accepts multiple validators and delegates calls to them.  This has precedent elsewhere in the framework as you may well know, and an issue and pull request with this new class would be welcome.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5781334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5783117", "body": "No problem.  You've already forked SpringSource/spring-framework, so you're good there.\n- Just update to the latest from SpringSource/spring-framework\n- create two branches called `SPR-9125` and `SPR-9130`\n- cherry-pick, rebase, etc your changes for each of these issues onto their specific branches.\n- make sure you follow the contributor guidelines with regard to commit comments, style, and everything else.\n- issue two pull requests, one for each branch.\n\nGit can indeed be a bit tricky at first, but it's worth the effort!  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5783117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5831155", "body": "First, thanks!\n\nI haven't read the above completely yet, but will.  I've glanced over the commit and notice that there is a bit of trailing whitespace (at least one incidence) and many places in which newlines between imports have been removed.  Eclipse does this.  It will take the following:\n\n```\norg.junit...\n\norg.springframework...\n```\n\nand turn it into\n\n```\norg.junit...\norg.springframework...\n```\n\nIt should remain the former.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5831155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5831506", "body": "Also, your rules around static imports are different than the convention in the framework.  I would recommend simply leaving imports alone.  This could be a little tricky to back out with such a large commit, but I'm sure it's possible.  We'll figure it out.  I can also show you what the conventions are for imports, but I cannot get Eclipse to strictly follow them; I do it by hand.  So with this volume it's again probably best to leave them as-is.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5831506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5839624", "body": "Ok, thanks for doing that.  I'm curious how you restored the imports.  `git reset -p` would have been one way, but still pretty manual.\n\nBasically we never rely strictly on formatters.  I personally use 'organize imports', but always scrutinize the diff before committing and manually tweak as necessary to preserve existing formatting and conventions.\n\nDo you mean there are cases in which the same resource file exists in both locations, or are you pointing out that we have a split between these two locations in general?  Perhaps give a few examples and we'll discuss.\n\nAs far as the commits go, you can squash back into a single commit, put a commit comment back in place, and then force push back to this branch, at which point there will only be a single commit to consider merging.\n\nBy the way, in your original commit comment for acfbc64, line lengths went beyond the 72 character margin mentioned in the [contributor guidelines|https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines].\n\nAlso, given that this is such a substantive change, please create a JIRA issue (Task) and reference it with \"Issue:\" in the commit comment as mentioned in the guidelines.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5839624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5843723", "body": "Assuming you have the three commits above sitting as the three most recent commits on your SPR-9300 branch, you should be able to do the following:\n\n```\ngit rebase -i HEAD^^^\n```\n\nThe editor will open and you'll see the following:\n\n```\npick fd6d390 Add abstract WebApplicationInitializers\npick 7fc18a5 Fixed merge conflicts\npick 5288ac4 Polishing\n```\n\nchange this to read:\n\n```\npick fd6d390 Add abstract WebApplicationInitializers\nfixup 7fc18a5 Fixed merge conflicts\nfixup 5288ac4 Polishing\n```\n\nquit the editor, rebasing occurs, and you're left with a single commit which you can then force-push back to to your remote, updating the pull request in the process.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5843723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5849573", "body": "Thanks, Arjen; this is merged.  Note that I made several changes that you can see here: https://gist.github.com/2769617. The most substantive among these is the renaming of `#addContextLoaderListener` to `#registerContextLoaderListener` and likewise `#addDispatcherServlet` to `#registerDispatcherServlet`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5849573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5936940", "body": "Thanks, Tomasz.  Will take a look!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5936940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5946861", "body": "Hi Oliver, thanks for the submission! I'll take a look at this -- in the meantime, please carefully read the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) and make the necessary updates.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5946861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5949010", "body": "Thanks, Oliver.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5949010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6062461", "body": "Thanks, Scott.  For future reference, please\n- update your git config to use your vmware address for commits to spring-\\* projects.  You'll notice that b992c3d3f27b44fe3203012e636ac7dca3cf4858 has been amended to this effect.\n- use `@since 3.2` instead of `@since 3.2.0`.  I realize this may seem inconsistent next to `@since 3.0.5` declarations, but historically we have always dropped the third digit if zero.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6062461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6100580", "body": "Thanks, Ollie!\n\nMerged, note slight rewording in commit comment to match guidelines, and `catch` blocks placed on newline instead of sameline to follow formatting conventions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6100580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6352914", "body": "Hi Tim,\n\nPlease read through and follow the [contributor guidelines|https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines], thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6352914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6392764", "body": "Thanks, Tim.  Definitely looking better.  Will take a deeper look as time allows.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6392764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6545101", "body": "Thanks Jan.  It looks like you've read the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines); please indicate that you've signed the CLA as requested there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6545101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6547432", "body": "Thanks, Jan.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6547432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6776214", "body": "SPR-9528 has been resolved.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6776214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6776242", "body": "Thanks, Eric.  See resolution comments at SPR-9287.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6776242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6872867", "body": "Thanks, Rob!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6872867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6917457", "body": "Hi Jose,\n\nFirst, thanks for taking the time to contribute.  Please carefully read or re-read the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) document and make corrections as necessary based on the instructions there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6917457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6927816", "body": "Thanks Jose, please take a look again at the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines), particularly with regard to:\n1. signing the SpringSource CLA and indicating that you have done so here in the pull request comment thread\n2. formatting of the commit comment\n3. submitting pull requests from a topic branch (e.g. named SPR-9375) as opposed to submitting from your master branch\n4. using your complete real name in Author: metadata (instead of the current value of `jose <naranja82@gmail.com>`)\n\nNote that with the exception of 3, you do not need to create a new pull request to correct these issues, and don't worry about the branch name this time around.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6927816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7559618", "body": "Thanks Andy, I'll get this in shortly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7559618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7559907", "body": "Thanks, Andy.  @sbrannen, if you beat me to this, feel free to merge.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7559907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7674886", "body": "Thanks.  Please read through and follow the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) and we'll see about getting this in.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7674886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7674903", "body": "Thanks, Andy.  I've scheduled SPR-9486 for 3.2 M2 and will get this merged in.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7674903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7997398", "body": "Thanks, this is now merged. @poutsma and @jhoeller, please see my comments at [SPR-9677](https://jira.springsource.org/browse/SPR-9677?focusedCommentId=82841&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-82841).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7997398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8131670", "body": "thanks, but do note that you can always push more changes against a branch and update an existing pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8131670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8333258", "body": "Thanks, Phil. These commits have been reviewed and applied to master. Some edits were made for both style and content. To allow you to review those changes easily, I've pushed my review branch to https://github.com/cbeams/spring-framework/compare/SPR-9729. You'll notice that these commits have been rebased into a more proper form on master, however. Let's discuss via email or Skype if you have questions about any of these changes.\n\nPer your comment at #124, indeed ConvertingComparator should be moved to the convert package; specifically to to convert.converter. I'll send you a screenshot from Structure101 that demonstrates this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8333258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8436527", "body": "Hey Rob,\n\nI see this is under src/test in spring-core. In our current Gradle build arrangement, this will be accessible only to classes within spring-core. i.e. Assumptions could not be used from spring-beans.\n\nI have been meaning to look into sharing test classpaths across dependend projects -- it would allow us to clean up many duplicate test classes, e.g. the many variants of TestBean. Even if we wouldn't actually take the time to clean the old ones up, it would avoid the creation of further dupes in the future (See MockHttpServletRequest for a particularly nasty example)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8436527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8459316", "body": "Thanks, Ollie.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8459316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8463155", "body": "Thanks, Phil. These changes are in. See [SPR-9586-review](https://github.com/cbeams/spring-framework/compare/SPR-9586-review) to see what changed on the way in. See 73832f8c6e51eb305b88dfc11815801d18b4d567 for the final commit message.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8463155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8613463", "body": "Thanks, Arjen.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8613463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9233964", "body": "Great to see this, Sam. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9233964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9388394", "body": "Thanks, Phil!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9388394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9639346", "body": "@jhoeller, I believe you're handling this? I've assigned SPR-9880 to you and marked waiting for triage.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9639346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9639462", "body": "Thanks, Dave. Will give this a look when putting together 3.2 RC1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9639462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9724696", "body": "Thanks, Andy! This has been merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9724696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9769062", "body": "Closing as this pull request appears to be superseded by #132. @philwebb, please confirm.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9769062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9769753", "body": "Thanks Satyapal. As you may have already noticed, this is now available in both 3.1.3 and 3.2 snapshots.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9769753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9775920", "body": "Hey Phil, this has been reviewed per philwebb#2 and is now merged into springsource/master. To answer your questions above:\n1. Deprecating the statics is fine. You'll see that I refactored the location of the translation method, however.\n2. The XML side is presumably quite well-tested in the wild, and I've double-checked that it's been brought over to the @Configuration side accurately. That's the best we can do for the moment.\n3. BeanFactoryAware is fine. For end-users, I would probably recommend the use of @Autowired or @Inject to inject the BeanFactory at the field level, simply because this is more concise, and follows form with how @Autowired is used elsewhere in the @Configuration model. However, we don't use @Autowired / @Inject within the framework, and using BeanFactoryAware ensures there is zero chance for ambiguity. i.e. it will always be the actual enclosing BeanFactory that gets injected (avoiding the quite somewhat unusual case that someone has another bean in the container that implements BeanFactory and would thus cause an autowiring ambiguity).\n4. The ref docs should be updated to include all @Enable annotations. For the moment, you can just create a subtask off SPR-8943 to \"Document @EnableMBeanExport\". Assign to yourself and schedule as you see fit, so long as it's in prior to 3.2 GA. As an aside, it would be appreciated if you would also create a more general task to \"Document @Enable\\* annotations\" and schedule it for 3.2 Backlog, just so we don't forget about this. @EnableMBeanExport might blaze the trail there, figuring out where this documentation should go, i.e. all in one place, next to the XML equivalents, etc. We can discuss that offline -- we've dealt with that kind of thing before in the ref docs.\n\nThanks again for getting this in.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9775920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9776677", "body": "Merged! Thanks, Marten.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9776677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9865190", "body": "Thanks, Eric. Resolved by @jhoeller in https://jira.springsource.org/browse/SPR-9876\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9865190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9865310", "body": "I've asked @jhoeller to take a look at this in SPR-7121, but the issue is currently in the General Backlog; as such it's fairly likely it'll go without being addressed. Phil, if you feel strongly about getting this in, please bring it up with Juergen or on our weekly call.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9865310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9879208", "body": "Weird. No, I meant SPR-7121, thanks (updated above too)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9879208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9897784", "body": "Thanks, Phil, this is now merged into SpringSource/master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9897784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9902272", "body": "Thanks Phil, this is merged. Take a look at 38bfb2b to see a couple naming changes, and a combined interface/enum-based approach to preserve both convenience and flexibility (indeed, per your comment above, ensuring that the solution is easily extensible -- not only by us but by users too).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9902272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9903147", "body": "Closing this based on @philwebb's comment above that #161 is now inclusive of this PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9903147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9903404", "body": "@isopov, thanks for the submission, but it's not actually required to mark the implementation of #getAsyncExecutor with @Bean. The user may do so if they wish to actually expose the executor as a bean to be managed by the container, but keep in mind that in other arrangements, there may already be one or more @Bean methods that expose executors, and #getAsyncExecutor may get used as a simple method for choosing which one among them is to be used when handling @Async methods.\n\nBasically, either approach can be correct, but I left it off in the original Javadoc to make sure it didn't appear to users that they were _required_ to add @Bean to #getAsyncExecutor implementations.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9903404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9904103", "body": "Thanks Phil, this is merged. See 377b47f for changes made during the review.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9904103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9904738", "body": "Thanks Phil, this is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9904738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9937381", "body": "Thanks, Phil. This is merged with only very minor modifications.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9937381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9939050", "body": "Ah, thanks for pointing this out. This is because `ThreadPoolTaskExecutor`'s `#afterPropertiesSet` method must be called in order to initialize it. You can call this method directly within the `#getAsyncExecutor` method, but the more appropriate solution is indeed to manage the object as a `@Bean`.\n\nI've just created https://jira.springsource.org/browse/SPR-9934 to track this. You might want to put a watch on it.\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9939050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9954133", "body": "Thanks, Sam. Indeed that's correct.\n\nOn Oct 31, 2012, at 6:07 PM, Sam Brannen notifications@github.com wrote:\n\n> Hi guys,\n> \n> This was apparently addressed without an official pull request merge in the following commits:\n> \n> 914a1b2\n> 2081521\n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9954133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10022057", "body": "Thanks! @philwebb perhaps you can merge?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10022057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10296485", "body": "Thanks Ollie, this is merged. See the review commit to see what changed; also touched up the commit comment to adhere to the guidelines.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10296485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10317836", "body": "@zhouzhonghua, it looks like this pull request was perhaps just an experiment. I'm closing it, but please let us know if there's something you're interested in contributing, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10317836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10632010", "body": "I'm sure this change is reasonable enough on the merits that Rob has laid out. However, isn't the real solution here to configure our gradle build such that modules can depend on other modules' build/classes/test output? This has come up a number of times, most recently by @philwebb. It would have a number of benefits, primarily avoiding this kind of duplication.\n\nNote that there are tricky cases, like `MockHttpServletResponse` and friends. We have no fewer than 5 copies of this in the framework (!):\n\n```\n$ find . -name MockHttpServletResponse.java\n./spring-orm/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java\n./spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java\n./spring-web/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java\n./spring-webmvc/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java\n./spring-webmvc-portlet/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java\n```\n\nThe canonical, production version of this class lives in `spring-test`, but has been reproduced elsewhere to avoid a cyclic module dependency between lower-level modules that can also benefit from `MockHttpServletResponse` for testing purposes.\n\nSo what is the \"right\" solution here, actually? It's as if `MockHttpServletResponse` should live somewhere that can be shared broadly for consumption throughout the framework, but should ultimately end up being published in the `spring-test` artifact for consumption by users. This is somewhat reminiscent of @rwinch's `merge-dist.gradle` functionality.\n\nI'm open for ideas. Should probably become a separate issue / pull-request, but if anyone wants to do this work, please go for it.\n\n/cc @sbrannen \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10632010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10724367", "body": "Thanks, Ollie. Just in time for RC2 as well!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10724367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10726447", "body": "done, thanks Rob.\n\nOn Nov 26, 2012, at 6:52 PM, Rob Winch notifications@github.com wrote:\n\n> I created SPR-10039 for this change (since it could have some reasonable performance enhancements for users) which will need to specify the Fix Version as 3.2.0.RC2 release. I do not have access to do this, so hopefully someone else can ensure the JIRA gets updated.\n> \n> /cc @cbeams @jhoeller\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10726447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10749441", "body": "Thanks Rob, this is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10749441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11775878", "body": "Hi Dave, thanks for the submission. This is building right now and should be available via 3.2.1.BUILD-SNAPSHOT shortly.\n\nPlease take a moment follow up here indicating that you accept the SpringSource contributor guidelines, thanks.\n\nAlso note that, per the [contributor guidelines](https://github.com/SpringSource/spring-framework/blob/3.2.x/CONTRIBUTING.md), there were actually a couple things that needed changing with this pull request, including:\n- using unix, not DOS line feeds (notice how big the diff for this PR was - this is because your editor/IDE saved the file with CRLF (Windows) line feeds)\n- commit comment formatting - see updated text at d91a419fdc4f520ba8e443e689998f4e7b5a2b2c.\n\nThe most important thing is the contribution, but mentioning the above such that things might go even smoother next time.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11775878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11862566", "body": "JUnit assumption / performance test segregation work is now complete with SPR-9984. JDK6/7/8 testing is another matter we can discuss on the weekly call. Thanks Phil and Rob for the work toward this end. The tests are a real pleasure to run now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11862566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11944317", "body": "Hi Dave,\n\nThanks for the contribution. It may be a few days before Phil or I can look into this further. In the meantime, it would be helpful if you take a look through the contributor guidelines once again (I know you mentioned you'd be doing this in #206). Indeed, squashing into a single commit would be helpful here. Currently, there are three commits, one being a merge commit, and two containing apparently the same diff (which is strange, and I haven't fully looked into why as yet). Also check out the guidelines on subject lines - try to form the subject as an imperative statement, beginning with a verb, e.g. \"Use parameter names during MBeanInfo assembly\"\u2014then expand on that in the body as you already have. Also, in the future it would be helpful if you submit pull requests from a \"topic branch\" named according to the JIRA issue ID. Here you've submitted the PR directly from your 3.2.x branch. Better is to create a new branch called SPR-9985 (`git checkout -b SPR-9985 3.2.x` will do the trick). Then push that branch up to your remote (`git push origin SPR-9985`) and then create a pull request via the web UI against this branch as per usual.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11944317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11947526", "body": "Thanks, Biju! @rstoyanchev perhaps you'd like to do the merge here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11947526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11948092", "body": "Hi Stevo!\n\nThis has been merged into the `cleanup-3.2.x` branch, which will eventually be merged into `3.2.x` (and also eventually into `master`).\n\nA couple notes:\n- submit future PRs against `3.2.x` for the time being (the contributor guidelines have been updated to this effect)\n- don't forget to update your copyright template to reflect that it's 2013! (I've already fixed this one up when merging)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11948092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12148059", "body": "Thanks, Glyn. You may care to take a look at commits 654c07db344310d8582c433dc643b0a256c8cc7e and b8f408ed5faae1bf266331063bc2ea575962bead to understand changes I made during the review.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12148059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12149389", "body": "@acogoluegnes, @rstoyanchev, you may want to take a look at 7413779, in which I polish up the commit merged earlier here. And thanks Arnaud for the contribution! Good to see you around.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12149389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12595985", "body": "Thanks, Dave. See @jhoeller's comments at https://jira.springsource.org/browse/SPR-9985.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12595985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12664551", "body": "new PR: #219 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12664551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14102828", "body": "I've taken a look at this, and the biggest problem I'm seeing so far is regarding merge conflicts. For example, if 3.2.x contains generated poms with <version> values of 3.2.2.BUILD-SNAPSHOT, merging 3.2.x into master becomes problematic, because the generated poms there already have <version> values of 4.0.0.BUILD-SNAPSHOT.\n\nIt's true that we already have this problem with the 'version' value in build.properties, but this is just a single file, which makes it more manageable. I use Git's 'rerere' option to remember the merge conflict resolution for build.properties and automatically re-apply it every time I do a merge from 3.2.x into master, and we could conceivably have the same arrangement for all the pom files, but if someone besides me is doing that merge, then it starts to get ugly (i.e. it's going to feel non-trivial to that person to get it right).\n\nThe main value of checking in the generated poms, as I see it, is being able to quickly assess what's changed in the dependency manifest, which is particularly valuable at release preparation time. However, now that we have the automatic sorting of dependencies handled, I think that continuing to do more manual diffs against previous pom versions is a fine compromise.\n\nI was going to mention that we could also leave the in place the new `generatePom` task, but forego tying it to the build, and leave any generated pom.xml artifacts as ignored by git, but in reality, any time you do a `gradle install`, the generated pom is written to `build/poms/pom-default.xml` anyway. Perhaps this is good enough?\n\nAlso, I noticed that the poms being generated from `generatePom` contain invalid `<scope>optional</scope>` elements, instead of the correct `<scope>compile</scope><optional>true</optional>`. However, when doing a regular `gradle install`, the poms published to `build/poms/pom-default` and `~/.m2/repository` have the correct arrangement.\n\nIn short, I'm recommending we leave this change out, and just roll with the deterministically-ordered <dependencies> changes that have already been committed. Your thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14102828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14114577", "body": "Closing this PR, as I think it's no longer relevant (correct me if I'm wrong). We've done quite a bit of work on warnings, and there will probably be more to go, but it'll continue to be incremental.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14114577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14678644", "body": "Closing, as it appears this PR was merged with commit 3eb361066067438efbcf0758e78f229e2655a599.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14678644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14684745", "body": "Thanks, Dave.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14684745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14951409", "body": "Thanks, @sslavic. @philwebb, the condition was originally `>` anyway. The change to `>=` dates back to [this commit](https://github.com/cbeams/spring-framework-2.5.x/commit/8f0eb79d5f5db1504a4a420bead0888b0abbda97). Take a look there, especially at the associated unit tests, and at  to understand any potential side-effects of changing it back.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14951409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18545685", "body": "This is good, thanks Dave. And timely too, as I'm working on some CLI-related bits too. Please see 46d47fe regarding a few tweaks that I made before merging.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18545685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18724499", "body": "Philippe, thanks for the submission and your clear attention to detail!\n\n@philwebb, I've assigned the JIRA issue to you for review and merging. I'm recommending that we go with `PathResource` naming as opposed to `FileSystemPathResource`, but otherwise this looks good on cursory review.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18724499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18725032", "body": "Thanks, Carson. This has been cherry-picked to master as opposed to 3.2.x.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18725032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19892145", "body": "Hey @philwebb, I don't know the larger context here, but thought I'd check: are you aware that FilesystemResourceLoader already attempts FileResources by default?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19892145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63810238", "body": "Nice! Thanks, Brian.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63810238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63879824", "body": "Heh... ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/63879824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/925766", "body": "Adapted from original commit at kdvolder@1b255a1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/925766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1520308", "body": "@stevemac007, have you considered adding a JIRA issue about this?  A single comment here will probably get lost.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1520308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1775063", "body": "@jeffbrown - oops, thanks. After discussing with @jhoeller, we're actually going to fold the new module into the existing modules after all. So this will soon be moot.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1775063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2088461", "body": "Ah, that's right. I had forgotten about adding the MaxHeapSize setting on the Windows side. That was done to avoid build failures on the windows CI machine. We should put that bit back. Go ahead if you like.\n\nOn Nov 1, 2012, at 5:20 PM, Phil Webb notifications@github.com wrote:\n\n> @cbeams The --XX:MaxHeapSize setting was added to the Windows build a little while ago [1]. I assumed that it would be harmless in the default build as well.\n> \n> Nice to see how to run additional code after a task. I searched so much, with no avail, for that info.\n> \n> [1] SpringSource/spring-framework@8e7622b#L0L11\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2088461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2089142", "body": "I suppose that'll be fine. The idea was to keep it public and allow anyone who wants to adapt from the #REGISTRATION_\\* constants to the new enum style the opportunity to do so; but given that in practice this will probably only come up in relation to use of MBeanRegistrationSupport and subclasses, those same users can just call the now-deprecated #setRegistrationBehavior(int) as per usual.\n\nThanks.\n\nOn Nov 1, 2012, at 7:12 PM, Phil Webb notifications@github.com wrote:\n\n> @cbeams I have made RegistrationPolicy.valueOf package scope. Is that OK with you?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2089142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2393864", "body": "@philwebb, this change causes `./gradlew clean api` to fail, because spring-core's asmRepackJar and cglibRepackJar tasks are not executed, meaning that these JARs are not available on the classpath when `javadoc` is trying to resolve symbols.\n\nYour comment states that \"This commit also updates the api JavaDoc task to ensure that dependencies are not resolved too early.\" \u2014 what was the actual problem here? Why was it \"bad\" to have deps resolving early?\n\nIn any case, can you see about fixing this up? I'd prefer not to go the route of having `api` depend on (cglib|asm)RepackJar tasks \u2014 this means that `api` has to know \"too much\", IMO.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2393864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2429625", "body": "Thanks, @sbrannen. Just noted that the copyright headers haven't been updated to 2013. Also, a minor point, but the the test methods named \"_OneSecond_\" aren't exactly accurate anymore now that the timeouts have been reduced from 1000ms to 20ms.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2429625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2711793", "body": "@rwinch, shouldn't this pointcut get the @CodeGenerationHint as well, given that it contains an `if`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2711793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2711809", "body": "@rwinch, this might have just been a one-time formatting mistake, but your ASL template was out of the ordinary here. As you can see, I've reformatted it as per usual below. You might want to double-check your template just in case.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2711809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2711815", "body": "@rwinch, I also made this change, assuming that there's no need for a @CodeGenerationHint given that no `if` is used in the pointcut declaration. Does that look correct to you?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2711815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713471", "body": "/cc'ing @rstoyanchev, just in case he doesn't otherwise see this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2714891", "body": "Ah, good to know, thanks!\n\nOn Feb 28, 2013, at 5:23 PM, Rob Winch notifications@github.com wrote:\n\n> FYI..I figured out what happened. My code templates were automatically getting formatted. Specifically Use code formatter was checked under Window > Preferences > Java > Editor > Templates\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2714891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2714909", "body": "@philwebb, is that something we should fix/remove in the shared eclipse settings?\n\nOn Feb 28, 2013, at 5:26 PM, Chris Beams cbeams@vmware.com wrote:\n\n> Ah, good to know, thanks!\n> \n> On Feb 28, 2013, at 5:23 PM, Rob Winch notifications@github.com wrote:\n> \n> > FYI..I figured out what happened. My code templates were automatically getting formatted. Specifically Use code formatter was checked under Window > Preferences > Java > Editor > Templates\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2714909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2720619", "body": "Well, I'm not sure it's really a problem anyway. I have that box checked globally, and I haven't run into the ASL header formatting issue that Rob saw. Maybe we should just keep an eye out if it continues to be a nuisance.\n\nOn Mar 1, 2013, at 12:40 AM, Phil Webb notifications@github.com wrote:\n\n> It does not look like project specific overrides are supported so we can't fix the shared settings.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2720619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "costin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3381592", "body": "https://jira.springsource.org/browse/SPR-8999\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3381592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5824625", "body": "@cbeams, @jhoeller\n\nSince I'm working on some internal improvements to the scripting \nsupport, I would postpone this for M2 (which makes sense anyway with M1 \nso close to the release date).\n\nOn 05/16/12 5:15 PM, Chris Beams wrote:\n\n> @jhoeller, @costin -- what shall we do with this after all?  It's a shame to see these changes sit here, but it's not quite clear whether they should be committed as yet.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/14#issuecomment-5741930\n\n## \n\nCostin\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5824625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dturanski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3395799", "body": "@garyrussell @olegz It looks like we can refactor spring-integration-scripting to use this. To @cbeams question 1. I have a possible UC for the arguments:\nTo instantiate a Ruby engine:\n...java\nSystem.setProperty(\"org.jruby.embed.localvariable.behavior\", \"transient\");\nSystem.setProperty(\"org.jruby.embed.localcontext.scope\", \"threadsafe\");\n...\nAlso, for Python engine.eval() doesn't work the same way. I need to invoke engine.get() to get the result. In SI, I have\n...java\nabstract postProcess(Object result, ScriptEngine engine, Script script)\n...\nI think it would be a good add to ScriptEvaluator\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3395799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ttddyy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3769888", "body": "Hi Chris,\n\nyup, no problem to switch to 3.2.x (master branch?)\n\nI saw your gradle merge right after I made my pull request.\nI left my request just in case somebody may use it. :)\n\nLet me try the new gradle build.\n\nThanks,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3769888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4241624", "body": "I think we also need to consider the inheritance.\nWhen @ContextConfiguration has \"inheritLocations=true\", it traverse the parent classes and merge the annotation attributes.\n\nHow about adding \"order\" attribute, so that child class can specify which context config to override.\n\n``` java\n@ContextHierarchy({\n  @ContextConfiguration(value=\"parent-context.xml\", order=0),\n  @ContextConfiguration(value=\"child-context.xml\", order=1)\n})\npublic class BaseTests {\n}\n\n@ContextHierarchy({\n  // merge the child context, not the parent one\n  @ContextConfiguration(value=\"another-child-context.xml\", order=1, inheritLocations=true),\n})\npublic class ConcreteTests extends BaseTests {\n}\n```\n\nnot sure, more than two levels of parent-child hierarchy is really practical or not.\n\nThanks,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4241624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5563225", "body": "Hi @rstoyanchev, the change is meant for xml config.\n\nI have an old app which uses SimpleHandlerMapping, and one interceptor is mapped to multiple URLs.\n\nHere is example:\n\n /foo/\\* => interceptorA, interceptorB, interceptorC, interceptorD\n /bar/\\* => interceptorA, interceptorB\n /baz/\\* => interceptorC, interceptorD\n\nThe url-interceptor mapping direction is: url => interceptors\n\nold app:\n\n``` xml\n<bean class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n  <property name=\"interceptors\" ref=\"allInterceptors\"/>\n  <property name=\"urlMap\">\n    <map>\n      <entry key=\"/foo/*\" value-ref=\"fooController\"/>\n    </map>\n  </property>\n</bean>\n<bean class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n  <property name=\"interceptors\">\n    <list>\n      <ref bean=\"interceptorA\"/>\n      <ref bean=\"interceptorB\"/>\n    </list>\n  </property>\n  <property name=\"urlMap\">\n    <map>\n      <entry key=\"/bar/*\" value-ref=\"barController\"/>\n    </map>\n  </property>\n</bean>\n<bean class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n  <property name=\"interceptors\">\n    <list>\n      <ref bean=\"interceptorC\"/>\n      <ref bean=\"interceptorD\"/>\n    </list>\n  </property>\n  <property name=\"urlMap\">\n    <map>\n      <entry key=\"/baz/*\" value-ref=\"bazController\"/>\n    </map>\n  </property>\n</bean>\n<util:list id=\"allInterceptors\">\n  <ref bean=\"interceptorA\"/>\n  <ref bean=\"interceptorB\"/>\n  <ref bean=\"interceptorC\"/>\n  <ref bean=\"interceptorD\"/>\n</util:list>\n```\n\nIn spring 3.1, url-interceptor mapping direction has been changed: interceptor => urls\nThis requires me to sort out existing url-interceptor mappings to the new interceptor based direction.\n\n``` xml\n<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\">\n  <property name=\"interceptors\">\n    <list>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/foo/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorA\"/>\n      </bean>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/foo/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorB\"/>\n      </bean>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/foo/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorC\"/>\n      </bean>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/foo/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorD\"/>\n      </bean>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/bar/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorA\"/>\n      </bean>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/bar/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorB\"/>\n      </bean>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/baz/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorC\"/>\n      </bean>\n      <bean class=\"org.springframework.web.servlet.handler.MappedInterceptor\">\n        <constructor-arg index=\"0\" value=\"/baz/*\"/>\n        <constructor-arg index=\"1\" ref=\"interceptorD\"/>\n      </bean>\n    </list>\n  </property>\n</bean>\n```\n\nwith mvc namespace (haven't tried but something like this):\n\n``` xml\n<mvc:interceptors>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <ref bean=\"interceptorA\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <ref bean=\"interceptorB\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <ref bean=\"interceptorC\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/foo/*\"/>\n    <ref bean=\"interceptorD\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/bar/*\"/>\n    <ref bean=\"interceptorA\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/bar/*\"/>\n    <ref bean=\"interceptorB\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/baz/*\"/>\n    <ref bean=\"interceptorC\"/>\n  </mvc:interceptor>\n  <mvc:interceptor>\n    <mvc:mapping path=\"/baz/*\"/>\n    <ref bean=\"interceptorD\"/>\n  </mvc:interceptor>\n</mvc:interceptors>\n```\n\nWith the pull request change, I don't need to re-map the url-interceptor mapping directions.\n\nAfter the change:\n\n``` xml\n<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\">\n  <property name=\"interceptorsByPath\">\n    <map>\n      <entry key=\"/foo/*\" value-ref=\"allInterceptors\"/>\n      <entry key=\"/bar/*\">\n        <list>\n          <ref bean=\"interceptorA\"/>\n          <ref bean=\"interceptorB\"/>\n        </list>\n      </entry>\n      <entry key=\"/baz/*\">\n        <list>\n          <ref bean=\"interceptorC\"/>\n          <ref bean=\"interceptorD\"/>\n        </list>\n      </entry>\n    </map>\n  </property>\n</bean>\n```\n\nThe biggest benefit is no need to convert the mapping direction for old app. \"url -> interceptors\" (before 3.1) to \"interceptor -> urls\" (3.1 style) in xml.\n\nThanks,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5563225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5592996", "body": "Hi, I think those examples would be a great plus for spring documentation.\n\nOne thing I'd like to notice is:\n\nto accommodate spring3.1 style, I have to convert:\n\n**mapping-1** : _(url => interceptors)_\n\n```\n/foo/* => interceptorA, interceptorB, interceptorC, interceptorD\n/bar/* => interceptorA, interceptorB\n/baz/* => interceptorC, interceptorD\n```\n\nto\n\n**mapping-2** : _(interceptor => urls)_\n\n```\ninterceptorA => /foo/*, /bar/*\ninterceptorB => /foo/*, /bar/*\ninterceptorC => /foo/*, /baz/*\ninterceptorD => /foo/*, /baz/*\n```\n\nFor my case, the conversion was a bit of work since there were many combination of interceptors and urls.\nSo, I took different approach to create a FactoryBean to generate a list of MappedInterceptors based on the above mapping-1 style(`Map<String, List<HandlerInterceptor>>`). ([previous pull request](https://github.com/SpringSource/spring-framework/pull/72))\n\nCurrently, there is no way to specify the mapping-1 style in RequestMappingHandlerMapping.\nIf RequestMappingHandlerMapping plans to keep supporting the mapping-1 style(url-to-interceptors mapping), I think my change, having a setter _setInterceptorsByPath(...)_, is good for that.\n\nRegards,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5592996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5774863", "body": "Hi Chris,\n\nI pushed the cleaned-up version(commit comments, squash, add license).\nCLA signed.\n\nThe pull requested branch was created before the contributor guideline, so it has an extra in branch name. I'm not sure renaming the remote-branch(delete and create) to pull-requested-branch works fine or not. So, i just kept it as is.  Let me know if I need to rename it.\n\nThanks,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5774863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10791110", "body": "Hello @sbrannen \n\nBy looking the change, I'm just wondering about closing of application context.\n\nWhen cached AppCtx is removed by GC, does the AppCtx  get closed?\nIf not, normally AppCtx  registers shutdown hook to JVM to close itself (`AbstractApplicationContext#registerShutdownHook()`). Does it work properly?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10791110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10814785", "body": ":D\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10814785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16462914", "body": "it's a small change but big benefit for ones who tweak spring-test framework. :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16462914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18807302", "body": "ah, this is nice!!\nno need to bloat the `SpringExtension` class for new feature\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18807302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "swachter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3863457", "body": "I wrote a custom NamespaceHandler that allows to embed OASIS XML catalogs in Spring configurations. The catalog entries may contain relative URLs that should be resolved relative to the catalog, i.e. the Spring configuration.\n\nI will try to supply a unit test and push it into my pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3863457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3885594", "body": "I changed the patch slightly and added the XmlBeanDefinitionReaderTests.testBaseUri method.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3885594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sslavic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3930413", "body": "Created a separate branch on my repo for this fix, and submitted a new pull request https://github.com/SpringSource/spring-framework/pull/35\n\nClosing this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/3930413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4006192", "body": "Amended and force pushed changed commit for this pull request - fixed broken test, formatted commit message, added note on ICLA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4006192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4009918", "body": "Chris,\n\nI've amended 3 out of 4 of my current pull requests - hopefully I got them OK this time. Anyway, thanks for your patience and support.\n\nRemaining one (36) is javadoc related. Among other things, have to check javadoc line lengths there. While working on the issue I've noticed several approaches being used in javadoc for linking to annotations. Here are examples:\n\n1)\n@{@link foo.bar.Inject}\n\n2)\nimport foo.bar.Inject;\n@{@link Inject}\n\n3)\n{@link foo.bar.Inject @Inject}\n\n4)\nimport foo.bar.Inject;\n{@link Inject @Inject}\n\nMaybe it would be wise to use one only, consistently. Is there agreement among Spring developers, which approach is preferred? Or is mixup of different approaches OK?\n\nPersonally, I prefer ones (2, 4) with import statements (even when annotation is not actually used in the type) as they make javadoc compact, and refactoring packages will update references (so \"typesafe\"). Difference between the two is whether @ is or isn't part of the link (so different font colour for @ and annotation type in the link), and compactness. In pull request 36 (which I'll amend) I used more 4 and 3, but thinking now, 2 seems best of all.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4009918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257107", "body": "Will change comment.\n\nBtw, there are two similar and somewhat related issues SPR-5383 and SPR-5381\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257420", "body": "@cbeams I will change title and description of this pull request, rebase it to latest master and also align javadoc changes with your [comment](https://github.com/SpringSource/spring-framework/pull/41#issuecomment-4082458).\n\nSince pull request contains lots of changes (all only for numerous warnings reported when building api), would it be easier for validation and accepting the pull request to split it somehow or is single pull request with everything OK?\n\nWould be great if [pull request 35](https://github.com/SpringSource/spring-framework/pull/35) was accepted first. Have to adjust pull request description there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4257420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4260948", "body": "@rstoyanchev Your explanation sounds reasonable, no need to change anything. Maybe just add same explanation to the SPR-5386 ticket and close it as \"works as designed\", and close this pull request. Probably similar action for related ticket, SPR-5381, is appropriate too. SPR-5383 although somewhat related is different.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4260948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4261213", "body": "Could be, SPR-5383 was created back in 2009. No affected version is reported there either. Will try to reproduce with 3.1.1, and post results as ticket comment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4261213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4270600", "body": "@cbeams Commit comment updated.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4270600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4290982", "body": "@rstoyanchev Created new one, master branch based pull request #48\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4290982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4300442", "body": "@rstoyanchev You're welcome. it's my pleasure. You've forgotten to close/resolve the ticket in JIRA (SPR-5984). Affected version should be changed there to 3.1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4300442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14954791", "body": "@cbeams Before creating this pull request I've checked, all tests including multi variants tests from that commit you mention, pass. I haven't added any new tests to verify that variant processing is and isn't being done - to test that one would have to mock/spy java.lang.String and mockito unlike jmockit AFAIK cannot do that. mockito tests are more readable, jmockit more powerful.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14954791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39747794", "body": "Yes, true, it's agresive. I'm not aware of such package at the moment. Lets assume that build package/dir is unlikely in future too. If it appears, it can be covered with exception like:\n\n```\nbuild/\n!/spring-*/**/org/springframework/**/build/\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39747794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39751921", "body": "There is one exception, \"build\" directory which shouldn't be ignored, namely \"buildSrc\\src\\main\\groovy\\org\\springframework\\build\\\"\n\nSo\n\n```\nbuild/\n!/spring-*/**/org/springframework/**/build/\n```\n\nis appropriate replacement. IMO it's trivial but still maintainability improvement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39751921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2504422", "body": "@KingBuzzer It's a bad practice to use undeclared dependencies. In Apache Maven world maven-dependency-plugin analyze goal can help one flush out this and similar bad practices.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2504422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5310393", "body": "Just noticed [commons-fileupload 1.3.1 release announcement](http://mail-archives.apache.org/mod_mbox/commons-user/201402.mbox/%3C52F373FC.9030907%40apache.org%3E) and [CVE-2014-0050](http://seclists.org/fulldisclosure/2014/Feb/41) and thought of fixing this in Spring by upgrading, only to find it's already done. Well done for the team!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/5310393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mjkrumlauf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4267129", "body": "Chris,\nThe form is asking who is the project lead.  What name should I use to fill\nin that box?\n\nThanks,\nMike Krumlauf\n\nOn Thu, Mar 1, 2012 at 06:45, Chris Beams <\nreply@reply.github.com\n\n> wrote:\n> \n> Hey Mike, thanks for this. Sorry to inject a bit of bureaucracy for such a\n> minor commit, but could you check the box on our contributor license\n> agreement and respond here letting us know this is done?  It's a one-time\n> thing.\n> \n> https://support.springsource.com/spring_committer_signup\n> \n> btw, this is mentioned in the [contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines).\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/SpringSource/spring-framework/pull/44#issuecomment-4256656\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4267129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4268217", "body": "Contributor form has been filled out.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4268217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Abdull": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4390603", "body": "Hi Chris,\n\nCLA signed. My munged confirmation number is 22xx0120xx80xx855.\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4390603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4390893", "body": "Sorry, can't do this. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4390893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tburch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4432889", "body": "Hi Chris,\n\nI rebased all the changes (including the header dates and updated commit message) into this commit - https://github.com/tburch/spring-framework/commit/17bcd8f17e831037b9e8aba6cc82a60691fe0f43\n\nI'm somewhat of a git newbie, so I'm not sure how to make this the only commit on this branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4432889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4454326", "body": "Hi @rstoyanchev,\n\nI had thought about using a HandlerInterceptor, however, the use case I'm trying to solve for is that I'd like to return an actual View if possible and when it's not possible, we'd like to return a 301 redirecting to another page (for SEO value). \n\nHere's the use case in a controller:\n\n```\n@RequestMapping(value = \"/product/{productId}\")\npublic String findProduct(Model model, @PathVariable String productId) {\n    Product p = null\n    //some logic to look up the product\n    if (p == null) {\n        return UrlBasedViewResolver.PERMANENT_REDIRECT_URL_PREFIX + \"/product-not-found\";\n    }\n    model.addAttribute(\"product\", p);\n    return \"product\";\n}\n```\n\nI could have this method return a RedirectView (with a 301) or a View, but it'd be great to be able to return Strings everywhere for consistency.\n\n@cbeams Thanks for the help! I fixed the commits on my branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4454326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4460242", "body": "We use a mix of 302s (for the Post/Redirect/Get flow) and wanted to use 301s instead of 302s for things that don't exist anymore. I had also thought about subclassing UrlBasedViewResolver, but we're using the ScalateViewResolver which extends AbstractTemplateViewResolver, so I don't have an easy way to do this.\n\nI didn't know about being able to return an Object from a controller, however we just switched to 3.1, so I'll have to look into that a little further. Being able to return a String to do a 302/301 seemed like the natural way to go and makes it really clear what's going on.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4460242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5337672", "body": "@rstoyanchev I ended up using the String vs RedirectView approach for now with the work around described in SPR-9218. However, I think it'd still be nice to support 301 and 302 redirects without having to make the controller method return Object.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5337672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dukehoops": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4939580", "body": "FYI, I already submitted the CLA request\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/4939580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "djkieras": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5175874", "body": "Forgive me, this is my first time contributing.\n\nI did select the 3.1.x branch.  My goal was to help backport the SPR-9147 changes as we are experiencing that issue with Spring 3.1.1.  Is that branch no longer actively being maintained?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5175874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "allnightlong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5282785", "body": "Here is jira ticket https://jira.springsource.org/browse/SPR-9336\n\nMy main point is: when I'm returning com.sun.syndication.feed.rss.Channel from controller method, it should convert to rss view **by default**. It may also convert to json, but only if I set corresponding accept-type. Currently in coverter list MappingJacksonHttpMessageConverter stands before RssChannelHttpMessageConverter, so by default  com.sun.syndication.feed.rss.Channel converting to json rether rss.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5282785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sgri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5396575", "body": "I have cloned the Spring Framework Git repository and tried to build  branch 3.1.x from command line with Ant, then got the error above.\nEnvironment: Ubuntu 12.04,  Apache Ant  (both versions 1.8.1 and 1.8.2 produce the same result),  Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5396575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Dridi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5454526", "body": "Hi @cbeams,\n\nThank you for the review/merge.\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n\nYou can probably close this issue I mention in SPR-9176 :\nhttps://issues.springsource.org/browse/SPR-7764\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5454526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "movink": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5566348", "body": "Unfortunately it did not satisfy our requirement. we need the support for classpath*:. As an example, the \"wrapper\" web application (to expose modules as services) need to load all the i18n files from all of its jar files by the name pattern.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5566348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5575957", "body": "Thanks Chris,\nYes, I thought modifying ReloadableResourceBundleMessageSource, but as it is for our product, we have our extension to spring as separate as possible so did not want to modify core spring itself and re-build. I dont mind spending some time to add this extension to  ReloadableResourceBundleMessageSource and re-submit. Sure I will go through the guidelines to see what else I need.\n\nSo for now, I think we can close this pull request and I will resend you a one when I am done with the modification.\n\nAgain, thank you for insight on this\n\nKind regards\nMovin\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5575957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "giovannidalloglio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5717984", "body": "It seems that I made a mess!\n\nPlease, forgive me: I'm not used to Git, and I'm trying to repare...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5717984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5719181", "body": "Following your suggestion, i'm closing this pull request, to create a new with cleaned-up commits.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5719181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5835898", "body": "I amended my work, rebasing on current Spring's master.\n\nI hope that this'll be the right time.\n\n@cbeams: you commented my choice:\n\n> performance: the `if` block for `Double` should come first, then the `else if` for `BigDecimal`.  The former is more likely to be used than the latter, meaning that this arrangement will result in fewer cycles being used up.\n\nThis is a choice: to not risk the calculation error due to the double approximation (is this the same error that this issue want to fix?). Using the BigDecimal as first choice, we get away from this risk.\n\nDo you agree?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5835898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11281718", "body": "PS I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11281718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11373743", "body": "**WARNING!!!**\n\nI just discovered that I forgot an important thing: the inheritance of the AC configuration files in integration tests!\n\nAt the moment I \"put together\" all `@ContextConfiguration` in a single list, but I miss the necessary tests to understand how to behave in case the flags _inheritLocations_ and _inheritInitializers_.\n\nI suspect (very much) that my pull request should be extended.\nI'll think about these days, and I hope to deal with them.\n\nI apologize for this momentary oversight.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11373743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12664349", "body": "I fixed the problems, and rebased, but there are too much commits, I'm closing this pull request, and open a fresh new one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12664349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12942685", "body": "I'm sorry.\n\nI forget to mention that this is the \"correct and working\" version of the previously closed pull request # 201 (as referenced by cbeams).\n\nPS I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12942685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29057771", "body": "This pull request was superseed by https://github.com/spring-projects/spring-framework/pull/393\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29057771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "shred": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742211", "body": "Yes, we ran into a serious bug in our software that was very hard to track. A better API doc would have avoided it, see SPR-8659, which describes the issue very well. The note that type converters are not thread safe, should be much more prominent than they are at the moment.\n\nFrankly, I'm not quite keen on going through the chores of signing a CLA form and reading pages of commit guidelines, just for a lame patch that consists of four lines of simple JavaDoc. Please use it as you like...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742477", "body": "Thank you! :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5742477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dmak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5782915", "body": "Hi Chris!\n\nI am newbie with Git -- sorry I if I've done it wrong. Will it be OK if I fork your Spring repo, and then I will create two branches (one per issue), commit + pull to you?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5782915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6132023", "body": "I have created new pull requests:\n- [#88](https://github.com/SpringSource/spring-framework/pull/88) for [SPR-9125](https://jira.springsource.org/browse/SPR-9125).\n- [#89](https://github.com/SpringSource/spring-framework/pull/89) for [SPR-9130](https://jira.springsource.org/browse/SPR-9130).\n\nThus this pull request can be discarded.\n\nBTW in addition to [Contributor guidelines](https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines) I have found [Code conventions](http://www.springsource.org/jira) useful.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6132023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6335481", "body": "Rossen, I have signed the contributor's license agreement, no problem with that. Reference number: 29120120614092721\nSam, classes have been renamed. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6335481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6454591", "body": "Hm, I have downloaded conventions from Spring site. Sorry that it took you time, perhaps there are minor.\n\nI am OK with removal of date constants. I even hope that they are defined somewhere in Spring, as they are the templates for corresponding standards.\n\nThanks for making everything happen.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6454591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8096214", "body": "Rossen, are there any plans to switch to Jackson 1.7+? I have a wish to add custom serializers/deserializers support (see [JacksonHowToCustomSerializers](http://wiki.fasterxml.com/JacksonHowToCustomSerializers)), but suggested infrastructure was added in 1.7. There is also `jackson-databind:2.0.1` available for `spring-web` project, but would it be correct to migrate `JacksonObjectMapperBeanFactory` to that codebase?\n\nAlso [SPR-9125](https://jira.springsource.org/browse/SPR-9125) looks to be complete, should I close it?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8096214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8119177", "body": "Alright, I will create a separate JIRA ticket for that & implement this. We can leave `JacksonObjectMapperBeanFactory` as it is now, and have support for custom serializers only for Jackson 2. For majority of users that would be alright.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8119177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8137984", "body": "I've created [pull request #129](https://github.com/SpringSource/spring-framework/pull/129). Maybe your can also comment on [pull request #128](https://github.com/SpringSource/spring-framework/pull/128).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8137984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8196368", "body": "Indeed that package in tests raises questions. The original idea was to allow access to protected fields of corresponding classes. I couldn't find a way to actually check in unit tests that custom serializer was added to Jackson config, so I used \"package injection\". Another alternative would be to use reflection, but that can fail unit test one day when Jackson version will be upgraded. Or I can disable these few checks, believing that code works OK, and remove classes and that packages. What would you suggest?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8196368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8198159", "body": "In practice I cannot extend `NumberHttpMessageConverter` from `StringHttpMessageConverter` because of `HttpMessageConverter<T>` parametrization, unless `<Object>` is used as a parameter. But I fully agree with your idea to have a universal convertor. Should I start a new branch for that or I can change the rails in existing branch?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8198159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8237089", "body": "@poutsma: Isn't it a good idea to deprecate `StringHttpMessageConverter` in favour of `StringToObjectHttpMessageConverter`? Delegation is not a problem, if one really needs to keep original `StringHttpMessageConverter`. And yes... delegation will also need some extra (XML) configuration of the delegate, which will not look very elegant altogether.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8237089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8241315", "body": "Thanks for great hint. I have applied this technique to test suite.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8241315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8257780", "body": "Because `StringHttpMessageConverter` also has some properties one may wish to configure. Arjen, please have a look at current version (with no delegation). From my perspective delegation will cause unnecessary complication. On the other side, current version has some code duplication with `StringHttpMessageConverter`. Let me know your opinion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8257780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8451115", "body": "Please checkout how it looks like now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8451115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8605578", "body": "This is very fair question. Somebody who designed Jackson architecture decided that there should be [`JsonSerializer#handledType()`](http://grepcode.com/file/repo1.maven.org/maven2/com.fasterxml.jackson.core/jackson-databind/2.0.4/com/fasterxml/jackson/databind/JsonSerializer.java#JsonSerializer.handledType%28%29) method, however [`JsonDeserializer`](http://grepcode.com/file/repo1.maven.org/maven2/com.fasterxml.jackson.core/jackson-databind/2.0.4/com/fasterxml/jackson/databind/JsonDeserializer.java#JsonDeserializer) does not have it. It makes it possible to register serializes without extra information needed. However I think I saw also the function to register serlializers by class. Would you vote to add support for it to `Jackson2ObjectMapperFactoryBean`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8605578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8790853", "body": "Is there anything else I can add to this pull request or improve something? Let me know.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8790853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8849095", "body": "No problem to merge everything in one change. Should I have created a new branch for that? That would result a new pull I guess. Doing everything in one go from the beginning is challenging.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8849095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8859743", "body": "Rossen, great work! You have reworked the class considerably. One minor remark: Will it make sense to refer `StringHttpMessageConverter.DEFAULT_CHARSET` in `ObjectToStringHttpMessageConverter`? For example, have declaration `public static final Charset DEFAULT_CHARSET = StringHttpMessageConverter.DEFAULT_CHARSET;` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8859743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8864279", "body": "I will play with [squashing](http://stackoverflow.com/questions/5189560/how-can-i-squash-my-last-x-commits-together-using-git) \u2013 this is very new to me. Sorry if that will result some (further) noise in this pull request (need to be ignored).\n\nYour solution for `setSerializersByType()` is absolutely right, the hint was in `SimpleSerializers#addSerializer(JsonSerializer<?> ser)` function, which your perhaps managed to find. Honestly I intended to ask the details at Jackson maillist but got stuck with subscription :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8864279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8891296", "body": "Rossen, how can I contact you concerning other (further) Spring improvements/sweeties? Email/twitter? I am interested to work on [SPR-5192](https://jira.springsource.org/browse/SPR-5192) and provide a helper class to [share locale independent properties among several ResourceBundles](http://stackoverflow.com/questions/12589043). I need your advise concerning these two features.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8891296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9609867", "body": "There is minor issue with usage of `ObjectToStringHttpMessageConverter` for typed collections. In particular, the limitation comes from limited API `AbstractHttpMessageConverter.canWrite(Class<?> clazz, MediaType mediaType)` which is passed a class of returned value. By looking at this class it is not clear what is the collection parametrization. So, `ObjectToStringHttpMessageConverter` will report OK for returned value `java.util.Collection<MyBean>` (actually seen as `java.util.Collection<?>`), however will fail to convert it to string (because of missing convertor for `MyBean`). This is not the limit of `ConversionService.canConvert()` API which supports passing of `TypeDescriptor`, but `AbstractMessageConverterMethodProcessor` which should hint the `HttpMessageConverter` with parametrization type. See my [stackoverflow post](http://stackoverflow.com/a/12979543/267197) for more information.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9609867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14490806", "body": "Closed as implemented via `commonMessages` property in `AbstractMessageSource`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14490806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22495006", "body": "Sorry for extra noise with **this.** \u2013 I did it manually. From [that very commit](https://github.com/dmak/spring-framework/commit/8260a11c9078d048bcf798a8a32ae707052f04f8) important is thread-safety note (basically, there is no thread-safety threat).\n\n`setSerializationInclusion()` is the only \"central\" change, see [this very commit](https://github.com/dmak/spring-framework/commit/28cd71859255e203b210a9ce4d25a01f3ec04cd4).\n\nAlso [migration to Jackson 2.2 API](https://github.com/dmak/spring-framework/commit/2adebee2ace5e66936d52ca5962a39ad2551a586) is important, as eliminates use of reflection (`DirectFieldAccessor`).\n\nSorry that I put it into one box \u2013 creating three separate branches (and pulls) is a bit of overhead for me. What would be the best way to approach?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22495006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22496552", "body": "The null checks in the constructors are removed because this check is delegated to setters.\n\n_The current combination of constructors and setters provides all necessary options._\n\nNot really. There is no null-check in setters.\n\nThe array of marshallers is something which is \"extra\". In principle you're right: the complexity could be moved one level up, as my intention was mainly to use this renewed class in conjunction with `<mvc:message-converters>`:\n\n```\n<mvc:annotation-driven>\n    <mvc:message-converters>\n        <bean class=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n            <property name=\"marshallers\">\n                <array>\n                    <bean class=\"org.springframework.oxm.jaxb.Jaxb2Marshaller\">\n                        <property name=\"marshallerProperties\">\n                            <map>\n                                <entry key=\"com.sun.xml.bind.xmlHeaders\" value=\"&lt;?xml-stylesheet type='text/xsl' href='statistics-all.xsl'?&gt;\" />\n                                <entry key=\"#{T(javax.xml.bind.Marshaller).JAXB_FORMATTED_OUTPUT}\">\n                                    <value type=\"java.lang.Boolean\">true</value>\n                                </entry>\n                            </map>\n                        </property>\n                        <property name=\"classesToBeBound\">\n                            <array>\n                                <value>org.mycompany.model.AllStatisticsSet</value>\n                            </array>\n                        </property>\n                    </bean>\n                    <bean class=\"org.springframework.oxm.jaxb.Jaxb2Marshaller\">\n                        <property name=\"marshallerProperties\">\n                            <map>\n                                <entry key=\"com.sun.xml.bind.xmlHeaders\" value=\"&lt;?xml-stylesheet type='text/xsl' href='statistics.xsl'?&gt;\" />\n                                <entry key=\"#{T(javax.xml.bind.Marshaller).JAXB_FORMATTED_OUTPUT}\">\n                                    <value type=\"java.lang.Boolean\">true</value>\n                                </entry>\n                            </map>\n                        </property>\n                        <property name=\"classesToBeBound\">\n                            <array>\n                                <value>org.mycompany.model.StatisticsSet</value>\n                            </array>\n                        </property>\n                    </bean>\n                </array>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\nSo in principle array is not needed. Refactoring that away is not a big deal, most important is that `canRead()`/`canWrite()` are overridden. Should I make another try / pull?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22496552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22577402", "body": "Rossen, here goes [pull#334](https://github.com/SpringSource/spring-framework/pull/334). This one can be closed. I have found there are some problems with it BTW.\n\nI wonder why git keeps track on all merges I did? I do usually the following:\n- Fetch from upstream.\n- Merge into my master.\n- Pull to origin.\n- Create branch & switch to new branch.\n- Make changes, commit and pull to original.\n\nbut still it says 14 commits instead of one. However on the tab \"Files Changed\" there are exactly the changes I've made (correct), but displays \"Showing 2 changed files with 141 additions and 23 deletions\". That blows my mind. I have hardly made 40 changes in those two files.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22577402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22605329", "body": "I will do my best to understand your advise in pull#334.\n\nYes, I got your question. Extra setters are optional, only one setter is essential. Other setters are also \"strange\" in the way that they take a boolean as parameter, but they really don't need that parameter.\n\nI was thinking about having extra helpers to avoid long XML constructions with `<util:constant>` in favour of short properties. Please feel free to choose any policy: maybe there are better alternatives. The given enum is unlikely to grow.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22605329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22609718", "body": "Rossen, many thanks for your short but important explanation.\n\nIndeed I made a commit into (say) `/gradlew` and that screwed up everything? I always create branches for changes, and changes in branches do not touch files which I changed before creating a branch.\n\n_adds unnecessary noise to the commit history_\n\nTo history \u2013 yes, to shown diff \u2013 no. The diff is clean (in a way that that it shows exactly what I've changed in branch, that includes all comments/notes you've made in all pulls). I think github could be improved in showing the history list \u2013 that is really weird. Noise that I create \u2013 that my fault and my disease to keep everything perfect. My apologies for that.\n\n_you'll always what's called a Fast Forward, i.e. there is no need for a 3 way merge._\n\nI hope that really works :) My last [pull#334](https://github.com/SpringSource/spring-framework/pull/334) was really a 1-commit fix into the branch after series of merges with origin. However github still shows all merges since mesozoic era. I can't explain that.\n\n_There is no need to do \"pull to origin\" if you don't make changes in master._\n\nIn my story `origin` = `https://github.com/dmak/spring-framework` and `upstream` = `https://github.com/SpringSource/spring-framework`.\n\nI can't commit changes to branch without committing the results of merge. Logical?\n\nWhat ideally I want to achieve:\n- I would love to divert from upstream in my origin. That may touch configuration files, maybe dependencies. I want these changes to be propagated to branches I create after.\n- Branches themselves are clean: they change only the files I intend to change and they don't collide with changes I made in previous change.\n\nIf that does not work that ruins my view of hallow git.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22609718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22658734", "body": "Many thanks, Phil. I will certainly try it out. If I may ask: is `git rebase --onto upstream/master master` equivalent to `git rebase --onto upstream/master master myfix`? (just to be sure, as [documentation](http://git-scm.com/book/en/Git-Branching-Rebasing#More-Interesting-Rebases) uses syntax with three different branch names).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22658734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22662666", "body": "To my big surprise string-to-enum worked fine:\n\n```\n<bean class=\"....Jackson2ObjectMapperFactoryBean\"\n        p:autoDetectFields=\"false\"\n        p:failOnEmptyBeans=\"false\"\n        p:indentOutput=\"true\"\n        p:serializationInclusion=\"NON_NULL\"\n        p:simpleDateFormat=\"yyyy-MM-dd\"\n>\n```\n\nSo I am happy with just one setter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22662666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24455748", "body": "Can this patch be ported to 4.x branch? Thanks a lot in advance!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24455748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24487445", "body": "Thanks for quick reply, Juergen!\r\nYou have captured the idea correctly. In our application we are also concerned about the security and would like to re-use the code from `StaxUtils.createDefensiveInputFactory()`. From one side we can copy-paste it, but it's better to rely on more experienced team (Spring). In other words, I am not interested in infrastructural changes per ce, but rather care about code duplication.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24487445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "scottfrederick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5789786", "body": "Chris,\n\nThanks for the comments. \n\nI'm not proposing a new way of doing validation, just a new way of registering validators. The combination of annotation-based bean validation with JSR-303 support, and class-based validation for more complex uses cases is sufficient. What is lacking in my mind is a way to register class-based validators in a way that is consistent with modern Spring MVC programming models. \n\nDeveloping class-based validators using the Spring `Validator` interface is very easy and straight-forward. When you want a class-based validator to be used by a Controller, the current options are to either set a single validator into the binder in an `@InitBinder` method of a Controller, or to inject one or more validators into a Controller and call them manually in the body of a handler method (which is what many sample projects do). Both of these options cause duplication of code when the same validator is used in multiple Controllers, and the cleaner option of using `@InitBinder` allows only a single validator to be used in a Controller. \n\nI would summarize my proposal this way: \n1. Make class-based validators eligible for component scanning, and have the framework invoke the right ones when `@Valid` parameters are detected on a handler method. \n2. Remove the need to implement an interface for class-based validators and make method signatures flexible. \n\nThe first part was really the genesis of my proposal, and the more important part. \n\nThe second part is more in the category of syntax sugar, but would take class-based validation along the same evolutionary path that Controllers took - removing interfaces and manual registration in favor of flexible method signatures and component scanning with annotations. In these regards, class-based validation just seems a bit left behind to me. \n\nIf the second part is too much of a departure from the status quo, then a compromise solution would be to just add a new stereotype annotation for validators to make them eligible for component scanning, and implement the kind of `CompositeValidator` you mentioned as the one-and-only default system-wide validator. The `CompositeValidator` would  delegate to the appropriate validators (including `LocalValidatorFactoryBean`) at the right time. I have code that does exactly this in my fork (following the model of other Composites added to support Java config in Spring 3.1), but haven't added those changes to this pull request yet. \n\nA further compromise would be to just implement the CompositeValidator and use `@Component` on validator classes, but I think having a specific stereotype annotation for validator classes would be better. \n\nI'm happy to adjust this pull requests as necessary and add the `CompositeValidator` part if there is any interested in evolving class-based validation in this way. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5789786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5797440", "body": "One use case for class-based validation over JSR-303 bean validation is when an external data source needs to be consulted. A common example is validating that an object with a given name doesn't already exist in the system, or than a property of an object won't conflict with an existing object. Injecting services/repositories/beans into implementations of `Validator` to accomplish this is very clean and keeps responsibilities nicely separated, while injecting dependencies like this into a domain class so it can self-validate is almost always a bad idea in terms of SRP. I do agree that JSR-303 validation covers most MVC validation needs, but class-based validation still has a place in many of the apps I work on. \n\nI went down the path of changing `DataBinder` to accept multiple `Validators` a while ago. This is definitely the place to start with this change, as it is the root of the single-validator issue. That change started to feel messy to me, but I can't remember exactly why. I do remember I was having to touch a lot more classes that I though I would going in, it could be that I just got nervous about the footprint of the change. It would be worthwhile to take another run at it.\n\nOne philosophical issue that drives this conversation one way or another is whether a class-based validator is more closely bound to a given domain object, or to a Controller (i.e. a set of request handling methods). I tend to think of them as being bound to a domain object, similar to Converters and Formatters, so I see value in registering all of them at the system level and letting the framework sort out when to invoke the right ones. If you tend to think of them as more closely bound to a Controller, then the `@InitBinder` approach makes more sense. \n\nIf the right change is to register `Validator` implementations globally, then following the way that Converters and Formatters are currently registered might be preferable to component scanning with a new stereotype annotation. I would be happy with either option. \n\nIf the right change is to allow the registration of multiple validators with `@InitBinder`, then it will be important to allow a Controller to do this without disabling JSR-303 validation in that Controller, as the two approaches can easily be mixed. To this end, `DataBinder` and other involved classes would need something like `setValidators()` and `addValidators()` in addition to retaining `setValidator()` for backward compatibility. \n\nMy initial proposal was definitely meant to be more evolutionary than revolutionary - a refinement of the validation mechanisms already in place rather than a replacement for them. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5797440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5875215", "body": "OK Rossen, I'm finally coming around to what you have been saying here. I was familiar with simple custom field-level constraints with JSR-303, but the part I was missing was that custom constraints can be injected with dependencies in a Spring app. This is mentioned in the docs, so I should have seen it before. \n\nWriting two classes (a constraint annotation and a constraint implementation) is more cumbersome than just implementing the Spring `Validator` interface, but not by too much. I haven't tried unit testing a custom constraint implementation, something that is very easy to do with a `Validator` implementation. It seems like this approach should work for most of the cases where I would fall back to `Validator`. \n\nIf this is the guidance and strategic direction for validation in Spring MVC, then I think the documentation should reflect this better than it does now. The Spring `Validator` interface is featured prominently in [the docs](http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/validation.html) (for historical reasons I think), and JSR-303 support is discussed much further down on the same page. This led me to believe that both approaches are supported equally in the framework, and should be able to be used together. In fact `Validator` implementations are much harder to use cleanly (i.e. without just injecting the `Validator` into a Controller and calling it manually) and it is difficult to mix approaches in the same app - hence my attempts to promote `Validator` implementations to first-class citizens. \n\nIn fact, given this direction, it seems that the `Validator` approach should essentially be deprecated, and documented as such. Also, better examples of a custom constraint (like the ones in the `Validator` section) might have gotten my attention better than the simple skeleton that is currently in the docs. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5875215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5883498", "body": "> Yes, looking at the documentation, there is section 6.2 \"Validation using Spring's Validator interface\" and section 6.7  \"Spring 3 Validation\". \n\nNot to get too far off topic, but... Parts of the Spring docs, e.g. the page in discussion here, seem to be divided into historical and new (\"Spring 3 ...\") sections. This distinction is becoming increasingly irrelevant as Spring 3 becomes less \"new\", especially since the docs are versioned (so people using older versions of the framework can see the docs without the Spring 3 additions). I would argue that there should be just one top-level section on validation instead of these sections being so far away from each other with text linking them together. \n\n> I'm also wondering if there isn't room to make it easier to apply existing Spring Validator types when also using Bean Validation.\n\nAnd now, the discussion comes full circle :-). My original proposal was very specific (since it was in the form of a pull request) and maybe overreaching (in regard to making validator method signatures more flexible). This was probably not the best way to start a conversation like this one, but my thoughts on the subject are summarized by your sentence. IMO either enhancements should be made to make the `Validator` approach relevant going forward, or it should be deprecated to eliminate confusion and hacks. \n\nA few approaches to applying `Validator` implementations have been suggested in this pull request and thread. Your last suggestion does have the benefit of a smaller footprint as it doesn't require changes to the \"single system-wide validator\" limitation, which I think would require small code changes in a bunch of places to correct while maintaining backward compatibility. \n\nIt seems like this should also be a JIRA issue. Should there be one to cover doc improvements and code enhancements, or separate issues?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5883498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5914111", "body": "See: \n\nhttps://jira.springsource.org/browse/SPR-9436\nhttps://jira.springsource.org/browse/SPR-9437\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5914111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidthexton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5827622", "body": "I've had a read and commented on SPR-7782. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/5827622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ianbrandt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6254482", "body": "I'm hoping to get at least the existing methods into a point release as soon as possible.  Perhaps the new methods should really be included in a separate pull request?  The existing methods lack test coverage as well, but they're just being migrated unchanged.\n\nI could perhaps add some in-memory test coverage with [H2](http://www.h2database.com/) using its [compatibility modes](http://www.h2database.com/html/features.html#compatibility).  The documentation for MySQL mode doesn't say anything about ``` as an escape character, but I could request enhancements as needed.  These would be more [integration tests as opposed to unit tests](http://www.artima.com/weblogs/viewpost.jsp?thread=126923) however, and they wouldn't run as fast accordingly.  I'm not sure what the Spring policy is on this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6254482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "maxcom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6326857", "body": "done\n\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6326857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tmeighen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6358660", "body": "Thanks Chris,\n\nI'll take care of this today.\n\nt.\n\nSent from my iPhone\n\nOn 2012-06-15, at 2:42 AM, Chris Beams\nreply@reply.github.com\nwrote:\n\n> Hi Tim,\n> \n> Please read through and follow the [contributor guidelines|https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines], thanks.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/96#issuecomment-6352914\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6358660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12618642", "body": "Resolved by Juergen Hoeller: https://jira.springsource.org/browse/SPR-5387\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12618642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "DavidBiesack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6396502", "body": "Rossen Stoyanchev reply@reply.github.com writes:\n\n> The change has been merged. \n> \n> Note that I've corrected white space formatting (tabs instead of spaces), updated the commit comment with the issue number, and rebased the change on top of the latest in master. This means your fork needs a hard reset to correct its history. For the future I recommend submitting pull requests from a dedicated branch since you can then simply remove the temporary branch once the pull request has been merged.\n\nThanks. I'm very new to GitHub and somewhat of a Git novice. I missed the Help step of creating a branch in my fork before starting to make the change. Doh!\n\nI've done a \n\n git reset --hard\n\nin my local source dir, but I don't know how to proceed to merge the file to match the version you committed. Or can/should I just remove my fork on GitHub? any harm in that (since I don't need it)? \n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-framework/pull/92#issuecomment-6393679\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6396502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "remast": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6547277", "body": "Hi, I have already signed the CLA online using the web form. I hope that's ok now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6547277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nachogiljaldo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6920574", "body": "Mmm... there were some wrong things. I will close this pull request and open a new one.\n\nKind regards,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/6920574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "satyapalreddy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7536990", "body": "Without any source code changes, I first added about 28 test cases involving floats and doubles. Among the newly added test cases (to SpringEL300Tests), the following 6 test cases failed:\n\nSPR_9486_floatFunctionResolverTest\nSPR_9486_addFloatWithFloatTest\nSPR_9486_subtractFloatWithFloatTest\nSPR_9486_multiplyFloatWithFloatTest\nSPR_9486_floatDivideByFloatTest\nSPR_9486_floatModulusFloatTest\n\ne.g. SPR_9486_subtractFloatWithFloatTest which subtracts two floats. The output in plain java seem different than when evaluated by SpEL\n\n```\n@Test\npublic void SPR_9486_subtractFloatWithFloatTest() {\n    try {\n        Number expectedNumber = 10.21f - 10.2f;\n        ExpressionParser parser = new SpelExpressionParser();\n        StandardEvaluationContext context = new StandardEvaluationContext();\n        org.springframework.expression.Expression expression = parser.parseExpression(\"10.21f - 10.2f\");\n        Number result = expression.getValue(context, null, Number.class);\n        Assert.assertEquals(\"Equal assertion failed for SPR_9486_subtractFloatWithFloatTest Test: \", expectedNumber, result);\n    } catch (Exception e) {\n        e.printStackTrace();\n        Assert.fail(\"Test failed - SPR_9486_subtractFloatWithFloatTest\");\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/7536990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "wkleu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8130738", "body": "Closing this pull request to create new pull request using correct branch name as per contributor guidelines\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8130738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "debu999": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8814610", "body": "Thanks for your help. I was initially confused regarding this. Now its fine. Either we can use the match to have exact match or else we can pick it up from the body.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8814610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tempredirect": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8815633", "body": "just to be clear this patch makes both methods the same, i.e. there is no functional difference between the two methods.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/8815633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "edalquist": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9355807", "body": "Thinking about this further I believe the actual best solution would be to further simplify the comparison and for all predicates where the type does not match fall back to:\n\nreturn this.getClass().getName().compareTo(other.getClass().getName());\n\nWith the hard-coded \"return -1;\" for comparing non SpecialRequesTypePredicates you could get into a situation where X.compareTo(Y) == -1 and Y.compareTo(X) == -1 which is invalid as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9355807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "isopov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9943150", "body": "Sorry, It seems that I have deleted my comment after your have replied. Really - ThreadPoolExecutor needs to be initialized that is done either manually with initialize() method, of as managed bean with afterPropertiesSet() - but this initialization is present in the example in Javadoc, so everything seems to be fine. \n\nSorry for misleading deletion of the erroneous comment and not editing it.\n\nEdit: the deleted comment referred to gist: https://gist.github.com/3986160 where ThreadPoolExecutor is used without initializing and throws exception.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/9943150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346328503", "body": "I see. Sorry. Really nulls are possible in that case.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346328503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ericweinberg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10092311", "body": "Hi @philwebb  \n\nI already signed the form back on October 26, 2012. Let me know if you need me to post the confirmation number. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10092311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nickshanks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10358070", "body": "I just wanted to say, to the author and anyone else who finds this, that this patch is evil. Just because the HTTP spec doesn't say you _can_ do something, does **not** mean you shouldn't do it, especially when it makes perfect sense and appears to be just something the HTTP authors overlooked.\n\nIt is also a breaking change for clients that are relying on the Accept header to be present.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10358070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10372422", "body": "On 14 November 2012 15:26, Rossen Stoyanchev notifications@github.comwrote:\n\n> Well I provided a commenthttps://jira.springsource.org/browse/SPR-9491?focusedCommentId=79847&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-79847to that extent in the JIRA ticket even if I didn't have a specific case in\n> mind. If you do feel free to add more detail. Thanks!\n\nI was googling for information on use of Accept with 415 responses and\nfound the pull request, that's all.\nI had already asked this:\nhttp://stackoverflow.com/questions/13274218/responding-appropriately-with-a-415-error-in-a-restful-web-app\n\nIf you'd like to answer there, feel free!\n\n## \n\nNicholas.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10372422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matsev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10386501", "body": "@nickshanks The reason why I wrote the [Jira issue](https://jira.springsource.org/browse/SPR-9491) and created this pull request was that I had trouble debugging my rest service. When I found that the client did not receive the Accept header despite being set by the DefaultExceptionHandlerResolver (as stated in the original issue and in my [comment](https://jira.springsource.org/browse/SPR-9491?focusedCommentId=79806&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-79806)), I checked the spec and found that there was nothing there. Based on these two facts, I concluded that the removal would not break any clients, since it was not working for me in the first place. Consequently, I removed a few lines of code in an attempt to simplify the implementation.\n\nFor me it was not a big deal, the issue was resolved without any further action, and as you can see the pull request has been closed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10386501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41959816", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41959816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44662657", "body": "Looks good, and I agree that it is a simpler solution than mine. \n\nWhen wrote the tests that you refer to, I did not consider that the actual call to `cancel()` method would trigger a `CancellationException` and you have a point, perhaps it should?\n\nThe reason why I wrote those tests was I wanted to verify that `ListenableFutureCallback`'s `onSuccess()` and `onFailure()` methods were not triggered after the `SettableListenableFuture.cancel()` was called. Consequently, if it decided that `cancel()` should trigger a `CancellationException`, then those two tests should be rewritten so that any subsequent call to `set()` does not trigger the `onSuccess()` callback, and any subsequent call to `setException()` does not trigger any more calls to `onFailure()`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44662657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45510852", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45510852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49661709", "body": "@rstoyanchev I just noticed that these constants are already present as part of the [HttpStatus](http://docs.spring.io/spring-framework/docs/4.0.x/javadoc-api/org/springframework/http/HttpStatus.html) enum. Perhaps they should be imported from there, rather than being duplicated in the `HttpHeaders` class?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/49661709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "blagerweij": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10795098", "body": "I've made a few improvements to Jackson2ObjectMapperBeanFactory:\n- support for specifying the ObjectMapper class name (e.g. to support XML marshalling with XmlMapper)\n- support for specifying a list of Modules using a setter\n- support for autodetecting any Module in the BeanFactory\n\nIs anyone interested in these changes ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/10795098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "slorber": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11283764", "body": "By the way, why not a YamlPropertySource\n\nI'm using one at work, also based on SnakeYaml:\nhttp://stackoverflow.com/a/13470704/82609\n\nIt creates a property source with dot between nested paths.\nxxx:\n   yyy: 123\n\nWill give property xxx.yyy=123\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11283764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11284901", "body": "@dsyer that's true, I guess i'll try to refactor my code when your code will be released :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11284901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "acogoluegnes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11409528", "body": "Yes, I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11409528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "daveboden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11912161", "body": "Appreciate your efforts and comments Chris! I've got a double learning curve to get over: Git forking / maintenance and the Spring contributions. I'll give the guidelines a good read and get there!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11912161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11919965", "body": "Hopefully this one's a bit better:\n\nhttps://github.com/SpringSource/spring-framework/pull/211\n\nAlthough I do need to learn how to squash commits (there are 3 in this pull request...). Feedback very welcome if there's room for improvement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/11919965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12524845", "body": "Replaced with pull request on its own SPR-9985 branch: https://github.com/SpringSource/spring-framework/pull/217\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12524845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4760691", "body": "This line hasn't survived to Spring 3.2.5.RELEASE. The method's behaviour has therefore changed for \"is\" accessors from 3.2.4.RELEASE. It's returning void methods because it's no longer restricted to returning only boolean or Boolean return type methods.\n\nNew block reads:\n{code}\n                    if (method.getName().equals(prefix + methodSuffix)\n                            && method.getParameterTypes().length == numberOfParams\n                            && (!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {\n                        return method;\n                    }\n{code}\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4760691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4762180", "body": "Many thanks Phil. Our unit tests caught it as part of a throwaway trial Spring upgrade, so absolutely no effort expended on my side. Nice one for raising the Jira!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4762180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "bijukunjummen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12003448", "body": "Oh, okay, I misunderstood the meaning of default - I thought it is the handlerMappings, handlerAdapters that get created when mvc:annotation-driven/ is used, not the  handlerMappings, handlerAdapters created when nothing but DispatcherServlet is defined.\n\nLet me go ahead and close this pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12003448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26827198", "body": "I am closing this for now, I will contribute it back as another pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/26827198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39340583", "body": "Closing this issue - agree that this is behaving per design.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39340583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40499263", "body": "Yes @snicoll, I have signed the CLA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/40499263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59377249", "body": "As discussed on https://jira.spring.io/browse/SPR-12341, SimpleCacheManager does this today, so it will be as simple as assigning the customized GuavaCaches directly to SimpleCacheManager.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59377249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "glyn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12216658", "body": "Thanks Chris. Looks good to me.\n\nRegards,\nGlyn\n\nOn 11 Jan 2013, at 15:13, Chris Beams wrote:\n\n> Thanks, Glyn. You may care to take a look at commits 654c07d and b8f408e to understand changes I made during the review.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12216658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "eugenp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12239154", "body": "I have, yes - not sure how to check the end result, but it's signed: \nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12239154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25132503", "body": "Hi @rstoyanchev - I'm on holiday right now with very sporadic internet access, so I'll look into this (and edit this comment with the answer) just as soon as I get back home. Thanks. Eugen. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25132503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "eeichinger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12775880", "body": "just a quick note that the profile check could make use of assumptions: from the org.junit.Assume javadoc \"The default JUnit runner treats tests with failing assumptions as ignored\"\n\nassumeTrue(\"required profile not active\", ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass()));\n\nshould do the trick\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12775880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12777164", "body": "also it seems safe to stick with MethodRule - @Deprecated has been removed as of junit 4.11 due to numerous user requests and the junit team has no intention to deprecate it again: https://github.com/KentBeck/junit/pull/519\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/12777164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13047436", "body": "@marschall cool. not sure how many people are actually using @BeforeClass, but I mostly don't. so it's a bit of an inconvenience always having to the define both rules. Asfaik you can safely create two separate instances of TestContextManager as they're accessing the same static contextcache anyway. This way one has to define the @ClassRule only if you really need it for @BeforeClass\n\nOther than that I've taken your code and use it 2 projects already, works like a charme!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13047436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13129218", "body": "the TestExecutionListeners should be stateless anyway, so no problem. But I see your point that TestExecutionListeners might expect before/afterTestClass to be called before before/afterTest get called. None of the default TestExecutionListeners do so, but custom ones might break. Which I'd say leaves it up to the user to configure the @ClassRule if his test setups require so\n\njust wondering: does the junit api allow for a classrule to register an instance rule?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13129218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13174898", "body": "send a pull request... :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13174898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24023606", "body": "how about a callback approach? Scenario: web request comes in, needs to submit 1-n requests to backends e.g. using AsyncRestTemplate. Would be easy to return a DeferredResult and set the result once the backend request completes:\n\n``` java\n@RequestMapping(\"doSomething\") \npublic DeferredResult<String> doSomething() {   \n     DeferrredResult<> pendingResult = new DeferredResult<String>();\n\n    myAsyncTemplate.get( \"http://.....\", new ResultHandler<String>() {\n               public void processResult(String result) {\n                     pendingResult.setResult( result );\n               }\n          });   \n\n    return pendingResult;\n }\n```\n\nstupid idea? Is there another way/better way to do this that I am not aware of?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24023606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wesleyhall": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13891293", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/13891293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "staale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14028782", "body": "https://jira.springsource.org/browse/SPR-10329 - JIRA link\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14028782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nealeu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14106192", "body": "Chris, Sam: Any progress on when this'll get merged?  It's a sweet feature :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14106192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jmnarloch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14273266", "body": "Ah yes, I have accepted the aggrement.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14273266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50919878", "body": "Associated JIRA issue: https://jira.spring.io/browse/SPR-12055\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50919878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50933294", "body": "Eventually I was thinking about rewriting the MockHttpServletRequest to use HttpHeaders for storing the headers collection, but I guest that this would break the backward compatibility since the headers could store any kind of object at the moment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50933294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50964840", "body": "Cool, thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50964840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50971232", "body": "Associated JIRA issue: https://jira.spring.io/browse/SPR-12058\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50971232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124066913", "body": "Cool thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124066913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/149008113", "body": "Cool, thanks!\n\nThe IAE was exactly what we were struggling with, but your solution is way more elegant.\n\nThanks again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/149008113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/155899342", "body": "@jhoeller @rstoyanchev @poutsma may I ask you on your opinion on this topic?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/155899342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156217059", "body": "Thanks, I've addressed all the issues. If you would consider merging this PR, please also take a look at https://github.com/spring-projects/spring-framework/pull/915, there are completely independent, but provide complementary functionality, so that you would be able to intercept a request and for instance log the response payload or do rewriting of the request body.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156217059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/163306041", "body": "Any luck with this pull request?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/163306041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/44226174", "body": "I've added this wrapper to streamline the execution of the callbacks, though LIFO callback execution could still break the ordering, making the client code handler being invoked prior the interceptors callbacks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/44226174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "michail-nikolaev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14460954", "body": "Fixed type in javadoc\n- {code\n- {@code\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14460954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14472529", "body": "One more typo fixed:\n\nFurthermore, sometimes it is required to resolve active profiles for test at runtime. There are several possible reasons for it:\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14472529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14614512", "body": "Just interesting - are you planning to merge it before 3.2.2 release? (need to plan activities for project)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14614512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14619420", "body": "OK, thanks you.\nI'll update pull request to the latest sources then issue will moved to some 4.0 M\\* version.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/14619420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "karlbennett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15027507", "body": "No sorry I haven't yet. Will do it now :)\n\nOn 17 March 2013 17:36, Sam Brannen notifications@github.com wrote:\n\n> Karl, have you signed the contributor license agreementhttps://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md\n> ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SpringSource/spring-framework/pull/261#issuecomment-15026894\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15027507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15027605", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15027605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/55483588", "body": "P.S. I have already signed the CLA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/55483588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "martinlippert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15298169", "body": "no, not yet... :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/15298169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16249714", "body": "Any news on this one? :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16249714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "kryger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16045898", "body": "Whoops, I'll rework this to follow the contributing guidelines\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16045898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nkxiaochuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16270985", "body": "Don't know\n\nOn Fri, Apr 12, 2013 at 1:37 AM, Martin Lippert notifications@github.comwrote:\n\n> Any news on this one? :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SpringSource/spring-framework/pull/263#issuecomment-16249714\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/16270985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "josebarragan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17797948", "body": "Please include this absolutely simple commit, to allow use of IntelliJ IDEA to contribute\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/17797948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Fuud": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18399883", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18399883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18532631", "body": "Ok.\nLets discuss at https://jira.springsource.org/browse/SPR-10594\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18532631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18676679", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18676679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18676835", "body": "https://jira.springsource.org/browse/SPR-10606\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/18676835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20463297", "body": "There is no comments on issue for a month. Is pull request processing works in Spring Source?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20463297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22140412", "body": "I already done it :)\nPlease take a look at https://github.com/SpringSource/spring-framework/pull/290\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22140412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23651765", "body": "/cc @philwebb  @jhoeller \n\nOne task, SPR-10594, two implementations, two pull requests, 3 months, 0 comments, task in \"Waiting for Triage\" state.\nWill be any progress ever? What are you waiting for?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23651765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24382800", "body": "@philwebb Why you merged this request not mine?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24382800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24977666", "body": "@philwebb Can you please close this pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24977666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24977729", "body": "@jhoeller @philwebb \nRelated task still in Waiting For Triage state. Can you do something with this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24977729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "eric-vlaanderen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19814854", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19814854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "antonio-marrero": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19959710", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/19959710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "leo524891010": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20541046", "body": "Hi Philwebb,\n\nI am using the new feature \"unless\", but it is not working. I am using ehcache as the cache container.\n\nHere is the thread I opened in stackoverflow: \nhttp://stackoverflow.com/questions/17440526/using-element-unless-for-cacheable-spring-3-2-3-not-working\n\nIf you could know a little about what is going on, I am really glad to know and appreciate your help.\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20541046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20542757", "body": "I have pasted all the necessary codes related with caching to JIRA. Hope that helps.\n\nJIRA link: https://jira.springsource.org/browse/SPR-10724\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20542757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marcioj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20560885", "body": "Race condition :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20560885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sfussenegger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20722843", "body": "@philwebb [SPR-10731](https://jira.springsource.org/browse/SPR-10731)\n\nbtw, there is also an unneeded dependency on spring-core. I've created [molindo-instrument](https://github.com/molindo/molindo-instrument) as a temporary workaround for this issue where you can easily verify this. Do I have to create another pull request and JIRA issue for that?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20722843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20748426", "body": "see [SPR-10732](https://jira.springsource.org/browse/SPR-10732)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20748426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20748456", "body": "see #313 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/20748456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Xaerxess": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21742644", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/21742644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "janm399": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22885857", "body": "How about I split it and tackle the `HandlerMethodArgumentResolvers` first, and have another PR for the `WebSocketHandler`. Would it be easiest to close this PR and submit two new ones?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22885857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23254905", "body": "Let me tackle the first one now; and then get cracking on the second part in earnest tomorrow. I'll rip out the raw support and see how it fits into the structure that already exists. I can see what you're trying to do; and that raw is not really any kind of protocol. I was trying to hijack the message and return value converters; especially if I have an application that uses STOMP (for example) for most part of its operations, but then needs to support raw websockets, especially from native code (like iOS).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23254905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23256164", "body": "As a side note, should we consider using the JDK 1.7-style diamonds so that we don't repeat the generic types? The current codestyle seems to be \n\n``` java\nprivate List<HandlerMethodArgumentResolver> customArgumentResolvers = new ArrayList<HandlerMethodArgumentResolver>();\n```\n\nBut we could use \n\n``` java\nprivate List<HandlerMethodArgumentResolver> customArgumentResolvers = new ArrayList<>();\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23256164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23363251", "body": "I need to get my JIRA ticketing in order!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23363251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23364758", "body": "Works perfectly for me; your change makes sense.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23364758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "clemp6r": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22999616", "body": "Thanks for creating the SPR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/22999616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "GabiAxel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23069625", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23069625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/5893877", "body": "Right, I tried to stick to the convention as in getDefaultContentType()\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/5893877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ok2c": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23409837", "body": "All tests in spring-web pass for me\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23409837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23419145", "body": "My pleasure, Arjen. I hope they prove of some use.\n\nI have a general question regarding contributions to Spring 4.0. Would it be permissible to make fairly minor albeit incompatible changes to some implementation classes, given this is going to be a major release? What is your API/ABI compatibility policy for Spring 4.0? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23419145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23425055", "body": "Fair enough. I opted for a more conservative, API/ABI compatible approach at the expense of having to add a compatibility layer for older APIs.\n\nPlease review\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23425055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481504", "body": "There is also a tiny performance / memory footprint optimization I would like you to consider pulling in (see   f080dd2)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481968", "body": "Sorry if my previous update messed up the changeset. I'll resubmit my changes with a new pull request \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23481968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23483273", "body": "Arjen, I pulled the latest code off upstream master and re-created my initial patch incorporating your feedback and some minor optimizations. I hope I did not make things any worse.  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23483273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sivaprasadvalluru": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23500492", "body": "Thanks for comments. Will upload tests by this weekend as suggested.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/23500492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30604644", "body": "Rossen,\nI added tests as suggested by you.\nPlease review my changes and add comments.\n\nI didnt write for content negotiation view resolvers.\nOnce i am sure that these changes are perfect, i will add code for Content negotiation view resolver also.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30604644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sleepred": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24974052", "body": "Is this pull-request being watched in now? Assignee not specified in jira-issue.\nOr should I write a CLA in advance?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/24974052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bedge": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25734587", "body": "Is this the reason why buildSrc code is not shown in an eclipse project?\nWhat's the work-around to get eclipse to pick up the buildSrc/src/main/{java,groovy} dirs?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/25734587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pbobruk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27643041", "body": "This has been fixed in https://github.com/spring-projects/spring-framework/commit/326154270fa6338010a1c047044fc4a9f21e910b\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27643041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4465463", "body": "I think, that it should be greater than or equal, because in a multithreaded environment, the counter can be exceeded.\n\n``` java\nif (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {\n                                                           ^^^^\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4465463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "chelu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27734069", "body": "Closed as both issues are now resolved.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27734069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27734125", "body": "Closed as issue is now resolved.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/27734125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7184604", "body": "Added to avoid casting `MethodMetadata` reference to `StandarMethodMetada` in `ConfigurationClass.validate()`. I think it makes sense because it defines the method when overloaded and does not introduce complex changes downstream.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/7184604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "wayshall": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28068942", "body": "because when the request is a multipart request, spring mvc framework can not return the hidden method correctly. HiddenHttpMethodFilter get the hidden method value by request.getParameter(methodParam) directly, but it will be return null when the request is a multipart request, so HiddenHttpMethodFilter only work in a common request. Maybe there are better way to fix it, but I think spring mvc should fix it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28068942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28578960", "body": "omg\u2026\u2026You are right!\nI am sorry, I have not notice that the MultipartFilter has exsited.\nI only add MultipartResolver in spring configuration.\nI'm sorry for my carelessness again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28578960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "evpaassen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28481574", "body": "```\nuseRegsiteredSuffixPatternMatch -> useRegisteredSuffixPatternMatch\n      ^^                                 ^^\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28481574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "samuelteixeiras": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28912294", "body": "Ok , I will send the pull requests separate and sign in the Spring CLA\n first.\n\n2013/11/20 Phil Webb notifications@github.com\n\n> Would it be possible for you to submit these two issues as separate pull\n> requests? Could I also ask if you have signed the Spring CLA?\n> \n> See\n> https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/spring-projects/spring-framework/pull/412#issuecomment-28911809\n> .\n\n## \n\n\"Nenhum de n\u00f3s \u00e9 t\u00e3o bom quanto todos juntos\"\ntwitter : @samuelteixeiras\n\n  Samuel Teixeira\n  Computa\u00e7\u00e3o UFC\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/28912294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikesir87": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29286676", "body": "Excellent!  I figured there'd probably be another way you'd want to handle it and after looking at the change, it totally makes sense.  Thanks for taking care of it so quickly!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/29286676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4179855", "body": "I'm interested to know why this change occurred.  We have been following along with 4.0 and can no longer deploy our apps into our Glassfish instance due to ClassNotFound's being thrown from this change.\n\nIs there any expectation that Glassfish 4.0 will be supported?  I'm not aware of any ETA/release date for 4.0.1  \n\nI'd be happy to contribute a pull-request, but wanted to check in first.  I'm thinking it would check the DefaultHandshakeHandler whether it's Glassfish 4.0 or beyond and then provide an upgrade strategy that uses the TyrusEndpoint that's appropriate.  Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4179855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4187851", "body": "Just submitted the pull request - #364 Let me know what you think.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4187851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "VasylTretiakov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30539174", "body": "Sorry about the commit duplication issue. I'll try to avoid it in the future.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30539174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11775896", "body": "Hello,\n\nI did so because the code was not being rendered in bold in the browser,\nbut rather broke the formatting of the code that followed it.\n\nIt seemed to me like a problem of asciidoc. I tried playing with escape\nsequences, but never got the bold word highlighting working. Hence I\nthought that it would be easier to remove the *\\* formatting, so that the\nsource would be rendered with proper code highliting. At least it looks\nnice and clean, while the emphasis is already in the surrounding text.\n\nRegards,\nVasyl\nOn Apr 18, 2014 5:08 PM, \"St\u00e9phane Nicoll\" notifications@github.com wrote:\n\n> In src/asciidoc/index.adoc:\n> \n> > @@ -4386,7 +4386,7 @@ specifying the parent bean as the value of this attribute.\n> > \n> > ```\n> > <bean id=\"inheritsWithDifferentClass\"\n> >         class=\"org.springframework.beans.DerivedTestBean\"\n> > ```\n> > -           **parent=\"inheritedTestBean\"** init-method=\"initialize\">\n> \n> I see in multiples place that you have removed the *\\* syntax around\n> configuration options that we want to mark in bold. This sounds like a good\n> idea to me. Can you explain why you removed it? Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/spring-projects/spring-framework/pull/430/files#r11774516\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11775896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "floresj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30858048", "body": "Awesome, thank you. You guys are fast.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/30858048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kkroner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32215152", "body": "I can't find one for the description field directly.  https://jira.springsource.org/browse/SPR-9771 seems to be the same improvement, but for the CalendarName.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/32215152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "guidomedina": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33982138", "body": "@philwebb Update SPR please, I recreated the pull request to fix the target branch (Should be easier to merge now), it is the same branch, just fixed the pull request target branch to be 3.2.x\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/33982138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "HimalayFei": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36789000", "body": "I am using Spring. Can you please explain how should I set throwExceptionIfNoHandlerFound to true, should it some somewhere in my web.xml or spring.xml?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36789000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36790582", "body": "I tried putting them in init-param in web.xml, doesnt seem to work. I am verifying this by using @ControllerAdvice in a class, and @ExceptionHandler(NoHandlerFoundException.class) on its method. An example or some documentation link on this will be of great help.\n       - init-param\n            param-name throwExceptionIfNoHandlerFound param-name\n            param-value true param-value\n       - init-param\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36790582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36793260", "body": "I dont think if DefaultServletHttpRequestHandler is registered as I don't see any mvc:default-servlet-handler/ in my spring context, is there a way to check and disable that? Also can you please double check if I am setting throwExceptionIfNoHandlerFound properly in my web.xml using init-param, param-name and param-value.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36793260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36800480", "body": "While debugging HttpServletBean.init() I realized all I needed is \"gradle clean\" as I recently upgraded to Spring4. Thanks guys!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/36800480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cloudmark": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39004496", "body": "@rstoyanchev Would it be possible to change the Fix version of https://jira.spring.io/browse/SPR-11506 from 4.1 RC1 to 4.0.4? FYI - I rebased from master.      \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39004496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41919973", "body": "Cool dude :) Thanks a lot! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41919973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mbknor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39534984", "body": "https://jira.spring.io/browse/SPR-11656\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39534984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "royclarkson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39783205", "body": "rebased against the latest changes from master and fixed merge issues\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/39783205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41430280", "body": "rebased against master and fixed merge issues\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41430280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41445345", "body": "Removed the dependency on Java 8 Base64 in favor of commons-codec.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41445345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43143845", "body": "Added GsonFactoryBean, which migrates many of the convenience properties away from GsonHttpMessageConverter. Updated commit and PR description. Rebased against master and fixed merge issues. cc: @rstoyanchev \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/43143845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192681064", "body": "@jhoeller yes, will do that shortly. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192681064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192688670", "body": "Created [SPR-14024](https://jira.spring.io/browse/SPR-14024)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192688670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/10862521", "body": "Corrected this in the updated PR. Thanks for reviewing!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/10862521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11859397", "body": "Realized I used the Java 8 Base64 encoder. This needs to be reworked to remove the Java 8 dependency.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/11859397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "panchenko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41383956", "body": "Just did so.\nI have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41383956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/61049817", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/61049817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120569930", "body": "Wouldn't it be simpler to convert primitive class to the corresponding wrapper initially (when initializing SingleColumnRowMapper#requiredType) ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120569930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120570605", "body": "This PR can be closed, as the corresponding change was performed for the whole codebase in b4095c3e1d61fc7279e6b2ca105ec60c3cd7128c\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120570605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120571086", "body": "This PR can be closed, JIRA issue is already resolved by aadb93f30c6b481a9244ba3f553389a4a32e2088\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120571086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/215302829", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/215302829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10571998", "body": "This change causes exceptions for us. We are using PostgreSQL and passing String values for JSON fields as Types.OTHER using JdbcTemplate. \nIMHO JdbcTemplate should not be too smart - if I pass String as OTHER - it should reach the driver as is. OTHER is documented as \n_indicates that the SQL type is database-specific and gets mapped to a Java object that can be accessed via the methods getObject and setObject_\nSo, probably some other place using OTHER is just not doing that correctly?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10571998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10572045", "body": "Sure, filed https://jira.spring.io/browse/SPR-12890\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10572045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sorra": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41462990", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/41462990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44408656", "body": "Ticket resolved by Juergen.\nPlease close this PR, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44408656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gcuisinier": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44096451", "body": "No,  where is it?\nLe 24 mai 2014 20:23, \"St\u00e9phane Nicoll\" notifications@github.com a \u00e9crit :\n\n> Hey, have you signed the CLA ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/spring-projects/spring-framework/pull/546#issuecomment-44095263\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44096451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44099228", "body": "I've signed !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44099228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "artembilan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44511633", "body": "Pushed.\n\nThe real wish to have it in the 4.0.x is about a future Spring Integration WebSockets support and\ncompatibility with SF version 4.1.x as well as with 4.0.x\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/44511633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51403579", "body": "@snicoll , cool work anyway.\n\nSince you advocate the mapping of ALL headers by default you owe us a wise advice how to avoid breaking changes for SI after this migration :smile:  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/51403579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304350787", "body": "> JUnit tests should include assert() or fail()\r\n\r\nLooks like `ArgumentCaptor` and `assert...` afterwards should be used instead of asserts in the `Answer`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304350787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304350841", "body": "> JUnit tests should include assert() or fail()\r\n\r\nLooks like `ArgumentCaptor` and `assert...` afterwards should be used instead of asserts in the `Answer`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304350841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6957833", "body": "Hi Rossen!\nWoundn't you mind to explain how it cleans `ThreadLocal` resources from `interceptor.preSend` if it returns `null`? \nI don't see `finally` in the main `send` code.\nAnd here we don't invoke any `afterSendCompletion`, if the first `interceptor.preSend` returns `null`. And even don't invoke `afterSendCompletion` of this first iterceptor.\nOr do we leave it to the iterceptor implementation, as for `ThreadLocal` clean to the `afterSendCompletion` anyway?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6957833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960059", "body": "Got it. Thanks. Right, if can't do anything automatically the protection oursevles with Docs is a good compromise.\nWell, it is one more breaking change for us, but we should do that anyway.\nI'm take a look closer, when will come up to the solution for SI.\n\n@garyrussell, any objections for this solution?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960349", "body": "Now we can't conver this functionality until SF 4.1 will be minimal for SI: seems to me a lot of reflection is needed now for our `AbstractMessageChannel.ChannelInterceptorList` to determine, if target `ChannelInterceptor` has those new methods or not for SF 4.0.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6960349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1607902", "body": "Hi, Arjen!\nWell, won't it be backported into Spring 3.1 ?\nIn the Spring Integration 3.0 we plan to add URI Templating for `<ws:outbound-gateway>` to support all Spring WS transports: https://jira.springsource.org/browse/INT-2720\nBut this release will depend on Spring 3.1 ...\nOr do you propose to port your changes into Spring Integration for backward compatibility? ;-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1607902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1607940", "body": "Does it work with these:\njms:{destination}?deliveryMode={deliveryMode}&priority={priority}\nxmpp:{user}\n?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1607940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616872", "body": "Thank you, Arjen, for your time and your excellent work.\nI'll discuss with @markfisher about 3.1 or 3.2 or some other workaround for Spring Integration\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/1616872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15904917", "body": "`to {@ MessageHeaders}` I think\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15904917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15904938", "body": "s/TO/to and `MessageHeaders` again\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15904938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905084", "body": "So, `Matcher` or `Mapper`? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905196", "body": "If it is `protected`, subclasses can override it, hence `HeaderMatcher` has to be visible, but it is `package` level\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905251", "body": "Minor, but would it better to have good name for the variable\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905317", "body": "s/HeaderMapper/HeaderMatcher \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905421", "body": "`Map headers` - imperative\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15905421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15906022", "body": "Seems for me `to implement` is redundand, since `Strategy` assumes an implementation\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15906022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15906218", "body": "Does it really should be `static`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15906218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15906292", "body": "`Assert.notEmpty` - we really should finish with `IllegalArgumentException` here\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/15906292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/118760546", "body": "` this.` ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/118760546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/118760589", "body": "` this.`, too", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/118760589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "zhang-yan-talendbj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45066641", "body": "test\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45066641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulojribp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45763641", "body": "Ok, no problem. I understand what `@ComponentScan` does. My commit was to make the relation between the `main` configuration `ctx.scan(\"com.acme\");` and annotated way.\n\nBut it's ok. The commit you linked really is much more complete. Thanks to the comment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45763641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pidster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45989101", "body": "This is great! This is of very great interest to RTI.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/45989101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48876448", "body": ":)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48876448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "eujungkim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46954745", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/46954745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48890875", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48890875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52651487", "body": "I create a JIRA issue for this commit.\n\nhttps://jira.spring.io/browse/SPR-12098\n\nIf additional explanation is needed, please let me know.\n\nThanks.\n\nEujung Kim\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52651487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "aantono": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47736150", "body": "To run tests it requires Google's protoc compiler binary to be installed on the machine.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/47736150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7123471", "body": "Would this not throw an NPE given the assertion test on line :91?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7123471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lfarmer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48374134", "body": "I noticed the use of Matchers on other methods, but in our case a String sufficed.  Do you have a specific use case in which a Matcher would be used in this scenario?\n\nI suppose some syntactic sugar would be nice for this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48374134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48376088", "body": "Thanks for that Rossen, will make some amendments and push the updates.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48376088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48666883", "body": "Think I may have misunderstood how pull requests work :)  I rebased my changes and seem to have them included in this??  \n\nThe latest has the refactor,  I have made it more explicit that we are dealing with codes.  I have also added the matcher using startsWith as the test example.\n\nHope the list above doesn't cause any issues?  As you can tell, this is my first pull request :) \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48666883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48738647", "body": "Excellent, thanks Rossen!\n\nOn Fri, Jul 11, 2014 at 2:40 PM, Rossen Stoyanchev <notifications@github.com\n\n> wrote:\n> \n> This is now merged in master. Note that this PR doesn't have the latest\n> changes you made. I picked those up directly from your fork and applied\n> some additional minor changes.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-framework/pull/588#issuecomment-48730991\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48738647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adamskogman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48876579", "body": "Excellent! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/48876579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "overmindx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50563079", "body": "I have signed agree to the terms of the SpringSource Individual Contributor License Agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50563079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "itcai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50588319", "body": "The problem still exist in 3.2.x branch and I tried your solution, but it didn't work.\nError messages:\norg.jibx.runtime.JiBXException: Unable to access binding 'binding'\nMake sure classes generated by the binding compiler are available at runtime\n\norg.jibx.runtime.JiBXException: Unable to access binding information for class org.springframework.oxm.jibx.Flights\nMake sure the binding has been compiled\n\nBTW, OS is WIN7 64bit with JDK8\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/50588319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "leizhiyuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52409728", "body": "@sbrannen I create a new pull request to fix these issues,thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52409728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421124", "body": "@sbrannen  I tried to sign,but can't visit https://support.springsource.com/spring_committer_signup. maybe the website crashed?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421425", "body": "@sbrannen  You are welcome.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52421425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52730211", "body": "@sbrannen  the website is ok now, and I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52730211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52859326", "body": "Thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52859326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52936248", "body": "I am sorry, I will squash the result soon.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52936248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53880197", "body": "Ok,thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53880197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8110609", "body": "@Li-Lee  \u4f60\u662f\u54ea\u4f4d\u5c0f\u4f19\u4f34?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8110609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cp149": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52410179", "body": "Sorry,I checked out the 4.1 version today,and find TransactionContextHolder used ThreadLocal, so the issue is fixed in 4.1,please pass it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/52410179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AddoSolutions": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53433261", "body": "Honestly, I don't know exactly where this should go, but this has got to be in there somewhere.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/53433261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sumiplus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57161406", "body": "Thanks!\n\n\u5728 2014-09-26 19:40:47\uff0c\"Juergen Hoeller\" notifications@github.com \u5199\u9053\uff1a\n\nClosed #652.\n\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57161406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "unpush": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57570836", "body": "Oops\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/57570836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "olomix": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58142916", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/58142916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "vincentKim1218": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59756790", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59756790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "antonigaudi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59891356", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59891356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59899485", "body": "Let's think about the case of setting wrong config class name.\n\n[before change]\n1. A user set wrong config class name and call AnnotationConfigWebApplicationContext.refresh().\n : No Exception is occurred.\n   & Just INFO log : \"No annotated classes found for specified class/package...\"\n2. A user try to get bean defined in right config class\n : NoSuchBeanDefinitionException is occurred.\n\n[after change]\n1. A user set wrong config class name and call AnnotationConfigWebApplicationContext.refresh().\n : BeanDefinitionStoreException is occurred.\n2. A user cannot try to get bean.\n\nI think that if config class location is wrong, it would be better to inform it in application loading time than in getting bean time.\n\nthanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59899485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60021261", "body": "I close this pull request because of Juergen Hoeller's explanation.\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60021261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "luckybomb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59936106", "body": "Yes, I have signed. \n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/59936106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "RyuSangGi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60194668", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60194668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ksseo0701": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60520504", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60520504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "iamjs77": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60701530", "body": "Hi. \nI think String comparison operations should be equals(). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60701530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60701958", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/60701958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marceloverdijk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66169676", "body": "@rstoyanchev no in old PR the method returns HeadersBuilder and not BodyBuilder (which should be the case)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66169676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xiaolongzuo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66888978", "body": "Is anyone here?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66888978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66909000", "body": "@snicoll Thank you very much.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/66909000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/71437142", "body": "@snicoll  Yes.I have resubmited PR with #728,this PR can be closed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/71437142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168313637", "body": "I'm sorry I forgot.\nI have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168313637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "colinmorelli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68450176", "body": ":+1: looks good\n\nBuilt my project against this to test it out and it solves the issue I was having as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/68450176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mgooty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/70631867", "body": "Yes I have signed the CLA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/70631867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jaymes-bearden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75479448", "body": "Wrong branch. Resubmitting pull request against the 4.1.x branch. See https://github.com/spring-projects/spring-framework/pull/743\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75479448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75616143", "body": "Sounds good!\n\nI'll look for more exit points for error frames and code up those enhancements too. I'll see if I can address the other posted comments too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75616143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ryanskow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75648992", "body": "Thank you for the idea!  We tried that approach first actually, but ran into issues when running within Spring Boot.  We found a way around that now and used your suggestion.  Please see the updated pull request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/75648992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/59729119", "body": "```\nif (parts.length == 0) {\n            throw new InvalidMimeTypeException(mimeType, \"'mimeType' must not be empty\");\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/59729119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/59729131", "body": "Leading whitespace still breaks:\n`MimeTypeUtils.parseMimeType(\" ;\");`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/59729131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fromi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76034443", "body": "Seems like there are two interfaces named \"HandlerMethodArgumentResolver\"...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76034443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76067836", "body": "I solved my problem by creating a custom HandlerMethodArgumentResolver. I copied the \"supportsParameter\" method from AuthenticationPrincipalArgumentResolver, and most of \"resolveArgument\" method from PrincipalMethodArgumentResolver.\nI am sad with this solution though!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76067836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76412694", "body": "Fantastic, I saw that it was supposed to handle WS security in a better way, but I did not knew if @AuthenticationPrincipal was going to be managed.\nAny info if this is compatible with current spring boot version, or when it will be referenced in a new spring boot release ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76412694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cooniur": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76430480", "body": "I'd like to do more test. Thanks!\n\nOn Friday, February 27, 2015, St\u00e9phane Nicoll notifications@github.com\nwrote:\n\n> It's not that easy. You just broke collection injection (which is\n> excercised by the test you had to change).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-framework/pull/747#issuecomment-76382452\n> .\n\n## \n\nSent from Gmail Mobile\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76430480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76452115", "body": "@snicoll \nThanks for pointing this out! I'll try to find another solution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/76452115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/101865417", "body": "@rubesMN \nNo, it hasn't happen yet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/101865417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aqzwss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84512800", "body": "Update\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84512800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84513078", "body": "Yep! Sorry! I'm a beginner\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/84513078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dgtombs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90552914", "body": "I realized my author name was using a nickname. I will close this PR and submit a new one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90552914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cynicLT": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90589757", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90589757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "erizzo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90937961", "body": "The comments in SpringJUnitMethodRule mention that ExpectedException is not supported; is that indeed true? If so, can you elaborate a bit?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/90937961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ashamk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/92470002", "body": "Please remove my email id\nOn 7 Apr 2015 19:00, \"David Tombs\" notifications@github.com wrote:\n\n> The use of RedirectAttributes was documented in four places in the\n> reference documentation. This commit merges some of the places and links\n> properly between them.\n> \n> Issue: SPR-12759\n> \n> I have signed and agree to the terms of the SpringSource Individual\n> \n> ## Contributor License Agreement.\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/spring-projects/spring-framework/pull/771\n> Commit Summary\n> - Improve RedirectAttributes reference docs\n> \n> File Changes\n> - _M_ src/asciidoc/web-mvc.adoc\n>   https://github.com/spring-projects/spring-framework/pull/771/files#diff-0\n>   (83)\n> \n> Patch Links:\n> - https://github.com/spring-projects/spring-framework/pull/771.patch\n> - https://github.com/spring-projects/spring-framework/pull/771.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-framework/pull/771.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/92470002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DR9885": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93868925", "body": "Opened a Ticket: https://jira.spring.io/browse/SPR-12926\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/93868925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gdelprete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/97482619", "body": "This patch uses a snapshot of Reactor release 2.0.1 . Using the last released version 2.0.0.RELEASE results in this exeception:\n\n```\nCaused by: java.lang.NoClassDefFoundError: reactor/io/net/Spec$TcpClientSpec\n    at org.springframework.messaging.tcp.reactor.Reactor2TcpClient$1.apply(Reactor2TcpClient.java:96) ~[spring-messaging-4.2.0.BUILD-SNAPSHOT.jar:4.2.0.BUILD-SNAPSHOT]\n    at reactor.io.net.NetStreams.tcpClient(NetStreams.java:511) ~[reactor-net-2.0.0.RELEASE.jar:na]\n    at org.springframework.messaging.tcp.reactor.Reactor2TcpClient.connect(Reactor2TcpClient.java:154) ~[spring-messaging-4.2.0.BUILD-SNAPSHOT.jar:4.2.0.BUILD-SNAPSHOT]\n    at org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.startInternal(StompBrokerRelayMessageHandler.java:405) ~[spring-messaging-4.2.0.BUILD-SNAPSHOT.jar:4.2.0.BUILD-SNAPSHOT]\n    at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.start(AbstractBrokerMessageHandler.java:164) ~[spring-messaging-4.2.0.BUILD-SNAPSHOT.jar:4.2.0.BUILD-SNAPSHOT]\n    at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) ~[spring-context-4.2.0.BUILD-SNAPSHOT.jar:4.2.0.BUILD-SNAPSHOT]\n    ... 18 common frames omitted\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/97482619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rubesMN": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/101846921", "body": "Did this ever get in?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/101846921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "echatman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103964701", "body": "Yes\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/103964701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nivolg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107004007", "body": "I have seen BackOff and I use expotential backoff with max recovery interval 5 minutes. It what we need.\nBut problem is when jms destination is not available for a long time, consumer start sleeping continuously \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107004007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107005739", "body": "Consumer sleep continuosly for 5 minutes and when I stop application at this moment then it freeze until consumer wake up. It actual for a fixed backoff with interval 30 sec for example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/107005739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bartprokop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112180743", "body": "Hi St\u00e9phane,\n\nI agree with your point of view (I had similar concerns when decided if it is worth to initiate the pull request process). Could you please consider the following:\n- The JMS spec doesn't forbid to set the JMS Destination. It only says, that it is set when JMS provider dispatch message to the queue and also that setter is provided to allow it to be set to meaningful value on message reception.\n- My pull requests will cover only those corner cases when Message is returned from listener.\n- I can alter my pull request to nullify the JMSDestination after retrieval - note that when calling session.createXXXMessage it is set to null (or rather never set at all) - checked with IBM MQ and Active MQ clients. I'm aware that this point can be perceived as anti-pattern. However this would make completely no difference to underlying JMS provider.\n- I believe that all of JMS implementations clearly ignore it on dispatch.\n- I was aware of JMS spec, when proposing this change and I still think it is more elegant and purposeful than modifying request message.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112180743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112217894", "body": "Right, EE7 is more strict here.\n\nI think there are three cases (when using JmsListener annotated method model):\n1. request-reply scenario. The request have a JMSReplyTo set. I've actually exploited this to achieve the point 3 below.\n2. processing messages and sending result back to predefined queue - using SendTo annotation.\n3. processing message but the destination where to send response is determined during request processing. There is no elegant solution to do this. I can always return void and use JMSTemplate or hack request JMSReplyTo - but this is not elegant solution.\n\nYou are right that a kind of \"tuple\" that contains a Message and Destination returned from JmsListener annotated method would do the job. Actually the tuple do not have to contain Message object. It could be anything that can be converted to Message in accordance to Spring programming model. Does it also makes sense to allow return array of messages to be dispatched?\n\nI'll create relevant JIRA ticket ASAP.\n\nCheers,\n\nBart\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112217894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112223276", "body": "JIRA ticket SPR-13133 created.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/112223276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ndebeiss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120410528", "body": "I created the Jira : https://jira.spring.io/browse/SPR-13218\nMany thanks for all the work on Spring, and following of issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120410528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120415084", "body": "It is done :-) ! You want the confirmation number ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/120415084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "felixbarny": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123212176", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123212176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123332709", "body": "I've discovered this after upgrading from spring-security 3 to 4 as with version 4, the Pragma header is set by default.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/123332709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "paulvi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124468135", "body": "Just did it\n\n confirmation number is 131420150724102817\n\nhttps://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement does not says who is Project Lead\n\nBTW, isn't this documentation ? https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING-DOCUMENTATION.adoc\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/124468135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "chrylis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125655820", "body": "Ack, I knew I shouldn't have trusted the \"helpful\" PR suggestion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125655820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125754061", "body": "Yes, I have, under me at Gmail. Previous contributions in a number of places, particularly Cloud Connectors.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/125754061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214472490", "body": "Is the current-request-host guaranteed to be just `localhost` for requests on this path? If not, a cookie returned from request to `foo.example.com` without a domain set will be valid for `*.example.com`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214472490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "m-szalik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/126261090", "body": "It has been changed already.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/126261090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "elreydetodo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/128365470", "body": "There's a minor typo in one of the unit tests, though arguably it will still work even then. The patch looks like exactly what I was hoping for. Thanks, Craig!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/128365470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xueyumusic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132207318", "body": "I signed CLA just now, thank you!\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/132207318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "auk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/136724024", "body": "I have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/136724024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/136725807", "body": "Yes, twice already\nFor project lead Rossen Stoyanchev and you Brian Clozel.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/136725807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GeorgeCGV": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/142224737", "body": "@rstoyanchev sure, here we go: [Jira Issue - SPR-13478](https://jira.spring.io/browse/SPR-13478). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/142224737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Hronom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150963298", "body": "Thanks for your comments.\n\nI add sign of Spring Individual Contributor License Agreement (ICLA) to my initial comment.\n\nAlso I create [issue in JIRA](https://jira.spring.io/browse/SPR-13607)\n\nI created changes that breaks API, because I got a problem with tests, which does not breaks, when my API accidentally has changed. So the default comparison mode is very error prone. And I think that by removing \"default method\" we remove oportunity for developers to go in a wrong way.\n\nAlso this problem can be solved by setting `STRICT` mode for default method, but, I think this breaks some test cases in more bad way, because code compiled but tests fails, after upgrading version of Spring Framework.\n\nSo on my opinion, the better way is to break API, so when compilation fails, developers can find what goes wrong faster.\n\nSorry for my bad english I hope you understand what I try to explain=)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150963298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151508678", "body": "Looks like `(String expected, String actual, boolean strict)` is acceptable for my case.\nI commit changes with overloaded method.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151508678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331671091", "body": "Why this not accepted yet?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/331671091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "robertwhitebit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150975260", "body": "Hi! :smile:\n\n> how did you achieve this?\n\nThere is going to be a new check in the [sevntu.checkstyle](https://github.com/sevntu-checkstyle/sevntu.checkstyle) project (very soon!). This check...\n\n> \"Checks that if tokens are separated by whitespaces, it has to be a single space. Separating tokens by tabs or multiple spaces will be reported. Currently the check doesn't support [horizontal alignment](https://google.github.io/styleguide/javaguide.html#s4.6.3-horizontal-alignment).\"\n\nSo, I just used the new [sevntu.checkstyle](https://github.com/sevntu-checkstyle/sevntu.checkstyle) check `SingleSpaceSeparator`, which reported all violations, and also a very simple/primitive python script which fixed them automatically. Here is the [checkstyle configuration](https://gist.github.com/robertwhitebit/692c954da71c8b76260c#file-checkstyle-xml) and the [python script](https://gist.github.com/robertwhitebit/692c954da71c8b76260c#file-p-py) (tested and used on Ubuntu only).\n\nFirst, you have to run Checkstyle to generate the `checkstyle-result.xml` file and then you run the python script. Adapt the path to the `checkstyle-result.xml` file if necessary in the python script. You should definitively rerun Checkstyle to check if there are still violations.\n\nI'll let you know when the new check has been merged into the sevntu.checkstyle project, so you can also use the new Checkstyle check.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150975260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "romani": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150992131", "body": "Checks is released - https://github.com/sevntu-checkstyle/sevntu.checkstyle/releases/tag/1.16.0 .\n\nafter some period of testing on real opensource and close projects , this Check will be merged to main project - [checkstyle](https://github.com/checkstyle/checkstyle).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/150992131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218764324", "body": "I do not know :( , we need smb to move this Check to main project.\nWe are still in moratorium period, new check is allowed only if smb fix 5 functional bugs before introduction of new Check. Details - https://groups.google.com/d/msg/checkstyle-devel/JbhfiiSqKsQ/2vkapmxkDgAJ\n\nWhat is a problem to use Check from sevntu-checkstyle project ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/218764324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219041538", "body": "@rnveach ,  looks like you have a enough bug fixes for checkstyle. \nCan you move this Check to main project ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219041538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vladsoroka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151782739", "body": "yep, I've just signed it\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151782739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "arturgspb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151937942", "body": "Changes merged https://github.com/spring-projects/spring-framework/commit/11d1f050e9bb02c70086176b841e6a766f21fb4e\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/151937942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Gordiychuk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/154757590", "body": "I not foud special module where I can put JMH benchmarks for it fix, that why they absent in commit. What do you think about create special module with benchmarks? It module will safe from performance degradation(I plan to show one of these cases in the near future) and also allow demonstrate performance improvements \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/154757590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ben-manes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156785350", "body": "This provides the implementation for [[SPR-13690] Caffeine caching support](https://jira.spring.io/browse/SPR-13690).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/156785350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/158869788", "body": "An example of using the ARC paper's P8 trace with a maximum size of 65,536 to show the effects of a large cache in a single-threaded context. Ehcache spends all of its time constructing the random sample, which I guess must be done via walking an iterator (instead of sampling an array). This is a kind of scary result that could lead to poor response times if the cache is user facing.\n\n```\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 Policy           \u2502 Hit rate \u2502 Hits       \u2502 Misses     \u2502 Requests   \u2502 Time    \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 linked.Lru       \u2502 36.10 %  \u2502 15,249,933 \u2502 26,993,852 \u2502 42,243,785 \u2502 4.493 s \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 sampled.Random   \u2502 33.36 %  \u2502 14,093,695 \u2502 28,150,090 \u2502 42,243,785 \u2502 7.128 s \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 product.Caffeine \u2502 50.43 %  \u2502 21,302,116 \u2502 20,941,669 \u2502 42,243,785 \u2502 16.18 s \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 product.Ehcache2 \u2502 36.16 %  \u2502 15,275,313 \u2502 26,968,472 \u2502 42,243,785 \u2502 1.566 m \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 product.Ehcache3 \u2502 33.07 %  \u2502 13,968,421 \u2502 28,275,364 \u2502 42,243,785 \u2502 4.187 m \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/158869788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277275867", "body": "If you change your configuration by increasing the expiration and your test breaks by not advancing enough, isn't that a bad testing method? Similarly you might want to disable caching to make tests simpler. I would guess that it's preferable to make tests explicit so this method might be undesirable.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277275867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324684217", "body": "These request sounds like a nice usability improvement to me, so naively I'd be for them. Unfortunately since I don't have projects that use Spring Cache, I don't have the experience to advocate one way or the other and trust the expert's opinion. I forked the Guava integration and made minimal changes to assist the adoption.\r\n\r\nIf this was to move forward I would make the following asks,\r\n - Please move me to the 3rd author, as if I made myself first it was accidental.\r\n - Is `getCache` if called on every AOP operation, then `computeIfAbsent` should be avoided. It locks [pessimistically](https://github.com/ben-manes/caffeine/wiki/Benchmarks#compute) for subtle reasons, though JDK9 does add partial prescreening by checking the first entry in the bucket. A get-then-compute should be preferred in contended code paths. You could do this or use an unbounded Caffeine cache since it implements this idiom.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324684217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "uthark": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157105022", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157105022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157248616", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/157248616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dgomesbr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/164629747", "body": "+1 since it would help spring-cloud/spring-cloud-commons#36\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/164629747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hynbroth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167334253", "body": "learning\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/167334253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davinkevin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168217434", "body": "It's not compatible with a @Controller and return type FileSystemResource ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168217434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "drahkrub": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168484699", "body": "@davinkevin @bclozel @rstoyanchev @poutsma https://jira.spring.io/browse/SPR-13834 - Add support for http byte-range requests for non-static resources\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168484699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "icha024": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168890090", "body": "https://jira.spring.io/browse/SPR-13836\n\nI have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/168890090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "PeterSt66": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173873251", "body": "Have a look at MediaTypeUtils which is used during MediaType constructing, you might need to add it there too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/173873251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "logicg8": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186445971", "body": "I apologize for the delay. I have not signed the CLA. I read the CONTRIBUTING-DOCUMENTATION.adoc but did not see reference to signing the CLA for documentation contribution. Based on your comment, I was going to sign the CLA, but the form advises to get authorization from my employer. I can check into that. In the interim, should I rework my PR to only include the new changes? Or can this PR even be accepted without a CLA?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/186445971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gognamunish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/189767271", "body": "Hi sbrannen,\n\nAre there any plans for @ViewScoped as in JSF?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/189767271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "OnlyRebbits": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192583747", "body": "Maybe \n\n\u53d1\u81ea \u7f51\u6613\u90ae\u7bb1\u5927\u5e08\n\u57282016\u5e7403\u670805\u65e5 05:45\uff0cSt\u00e9phane Nicoll \u5199\u9053:\n\n@jhoeller I think that PR is outdated now, right?\n\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/192583747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "radai-rosenblatt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194164259", "body": "the project i linked to can be made to compile against either the latest release or a dev build (in pom properties). the test fails vs the latest release, but passes after this fix is applied.\n\nsee this SO question for background - http://stackoverflow.com/questions/35883022/spring-generic-application-event-failing-to-reach-destination\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194164259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194360262", "body": "ok, i've signed the CLA\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194360262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cristiancota": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194968341", "body": "I've done it because of this: https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#mind-the-whitespace\n\nAnd thanks for the reply! :+1:\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/194968341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andyjojo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195357110", "body": "Hi Jhoeller\n\nissue created\nhttps://jira.spring.io/browse/SPR-14041\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195357110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "willseeyou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195644744", "body": "update from origin\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/195644744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mariusneo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196524732", "body": "@bclozel yes, I did sign a CLA. This is the confirmation number I've received : 166920160311043459 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/196524732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/202743518", "body": "I've updated the version of xmlunit to 2.1.0 (it was recently released) to avoid code duplication (I had copied previously, with xmlunit 2.0.0 dependency,  methods from DifferenceEvaluators in the spring-framework tests).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/202743518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "malkusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198460979", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/198460979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tmyjoe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/201754472", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/201754472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/206310210", "body": "I've created a ticket for this.\nhttps://jira.spring.io/browse/SPR-14124\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/206310210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "laszlocsontos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203342273", "body": "Thanks for the explanation! Basically, I'd like to get rid of that nasty workaround (see _GroovyAwareAnnotationTransactionAttributeSource_ on [SPR-14095](https://jira.spring.io/browse/SPR-14095)) I have temporarily, as it adds some unwanted complexity (having to replace _tx:annotation-driven_ and configure TX handling manually).\n\n> it subtly changes the applicability of class-level metadata not only for Groovy objects but also for other kinds of synthetic methods. \n\nCould we possibly introduce a flag and keep this functionality switched off by default?\n\n> Method-level metadata works fine on 4.2.x even with Groovy objects, after all.\n\nDo you mean that SPR-14095 doesn't affect 4.2.x, but only 4.1.x and 4.3.x? If I remove your changes from _AbstractFallbackTransactionAttributeSource_, test method _transactionAttributeDeclaredOnGroovyClass()_ in _AnnotationTransactionAttributeSourceTests_ fails.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203342273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yuyonglucky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203941488", "body": "update\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/203941488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LYDXY": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/206209095", "body": "where is the JdbcTemplate ? can't find; was it changed position?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/206209095/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidreher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/206219830", "body": "@cswzxly I think you are in the wrong thread. We are not using JdbcTemplate in our commits, nor did we move it ...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/206219830/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/61837209", "body": "To be honest, I just didn't see it. I will change this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/61837209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mogren": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/209471471", "body": "This is not the correct solution, will close the PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/209471471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "venilnoronha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211381169", "body": "@rstoyanchev thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211381169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211392377", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211392377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214360062", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/214360062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "LuoYuWuSheng": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211770281", "body": "yes, Sorry for that\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/211770281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "reflexdemon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/215682116", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/215682116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ferstl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/217733257", "body": "I have signed and agree to the terms of the Spring Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/217733257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rnveach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219061306", "body": "@sbrannen Romani is pinging me for the CS project from here.\n@romani I will start it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/219061306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jcagarcia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/220931201", "body": "So, if this changes will not be applied, will be necessary to apply [this](https://github.com/DISID/disid-proofs/blob/master/spring-boot-exception-handling/SimpleMappingExceptionResolver/src/main/java/com/springsource/petclinic/web/exceptions/CauseAdviceSimpleMappingExceptionResolver.java) workaround everytime I want to throw a custom exception from Spring Formatter to be able to check cause exception?\n\nRegards,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/220931201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/220986289", "body": "Hi @rstoyanchev , that's perfect! \n\nI've updated the JIRA ticket too with some useful information.\n\nRegards and thanks for your support!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/220986289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "padilo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221830372", "body": "With `cache` operator you can retrieve the events without replaying the business logic, but you can't add those events to using the spring cache as it isn't serializable, so like `Optional` you have make it serializable somehow. Also using the `cache` operator you will have a back-pressure problem as it will store it in memory, using infinite streams of data will be a problem.\n\nThe `cache` operator, as I understand, it doesn't provide a mechanism to add events to a persistent cache, I think Spring can help here.\n\nYes, the implementation uses an `ArrayList` to store the retrieved events as it's retrieved, it has some benefits doing this way, at it can be retrieve from the cache as a Iterable or whatever async implementation as long as it has a Wrapper implementation.\n\nAbout infinite streams, I don't think spring cache should support it, as if we store the values it will full the cache, and if we store the logic between events it will force the classes involved to be `Serializable` and potentially many more race conditions (`ThreadLocal`, etc...). Also if it has to execute business logic it will not be a cache at all.\n\nWith current implementation it should be quite straightforward to implement it for other async wrappers, but maybe it need some change to fit in all cases or to be more understandable. :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221830372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221864752", "body": "I understand and I'm completely agree. This kind of feature should fit very well with current needs in Spring 5.0 and having in mind the whole picture, this is not an easy task and should be take with very care.\n\nThank you very much for your feedback :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/221864752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240072291", "body": "Sure I'll try to address this today. Still WIP to move to `ReactiveAdapter`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240072291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240537381", "body": "Still pending some formatting errors, import order and so on (I'll correct this on another commit, probably tomorrow).\n- Rebased on top of master\n- Removed `rx.Observable` support.\n- Added `Mono` support with some tests.\n- Also added `rx.Single` using `ReactiveAdapter` to convert to `Mono`. (can be removed if not required right now).\n\nCurrently, if I haven't misunderstood you, we won't support `Flux` in favor of `Mono<List<T>>`\n\n@snicoll I'm not sure if this is what you mean by use `ReactiveAdapter`. It would be very nice to have a `ReactiveAdapterRegistry` separating `Mono` from `Flux` adapters, because this way I didn't have to register each `Mono` equivalent class of each reactive library, and It would be more straightforward to use the `ReactiveAdapter`.\n\nAnother point I found is that there is a difference with `Mono` and `Single`:\n- Mono doesn't accept a null event, Single does.\n- Mono can have zero events. Single doesn't.\n\nIn the conversion using `ReactiveAdapterRegistry` It throws an error when you try to convert a `Single` with nulll event to `Mono`. There is an ignored test in `CacheRxJavaTests.nullValue` because of that.\n\nI'll work on having the formatting 100% ok, while wait for feedback.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240537381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241142583", "body": "Rebased on top of master and fixed import order, should be ok now.\n\n@snicoll Thank you ;). I'll take a look to the `@RequestMapping` reactive handling.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241142583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241210669", "body": "Not sure if we can use `ReactiveAdapter.getDescriptor().isMultiValue()` to only cache reactive single event classes, instead of having to register `rx.Single`on `CacheResultWrapperManager`.\n\nIf done this way I think it would work transparently and any new conversion that the `ReactiveAdapterRegistry` has, it would be supported by Spring Cache without having to explicitly register it, and the need to add the optional dependency. Taking a look at `ReactiveAdapterRegistry` we would have `CompletableFuture` support too.\n\nI'm not 100% sure, but it sounds good in my head :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241210669/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241244816", "body": "Ok, thank you ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/241244816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245678789", "body": "Rebased on top of master, improved `ReactiveAdapter` integration. Now all single events reactive implementation registered on `ReactiveAdapterRegistry` are supported, now is much simplier.\n\nThere isn't support to `Mono<Optional<?>>`, I think Mono can emit an event or don't emit anything, so it's not needed at all. But thinking on another single event implementations as Future or Single It can have sense..\nSome ignored tests are on `ReactorTests` related to that. To support it I think some additional attributes are needed on  `CacheOperationMetadata`, but maybe this PR should be merged before trying to solve this optional reactive case.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245678789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251171976", "body": "Thanks @snicoll for all your time and your feedback :wink: It was fun to implement it and to look how to fit it in Spring Cache. And also I learn something about Reactor. :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251171976/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zhoulifu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222425169", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222425169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222869468", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/222869468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "fisache": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224182270", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224182270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "RG9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224312338", "body": "Thank you for help.\n\nHere is an issue [SPR-14338](https://jira.spring.io/browse/SPR-14338).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224312338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224609939", "body": "Yes, thank you, now I can only write some unit tests :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/224609939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pwielgolaski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/228124359", "body": "Bump it up, maybe we could merge it\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/228124359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jayarampradhan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229085566", "body": "@snicoll Yes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229085566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229086692", "body": "@snicoll Thanks for the reply..I saw the contribution doc and signed that and updated the comment as wel. please let me know if anything I am missing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/229086692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jmithmstr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230358415", "body": "Please, do not use try-with-resources as exceptions from close() are not ignored. And I do not want those exceptions thrown up when everything but the close was OK.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/230358415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232487062", "body": "Is this pull request blocked because I need to create a jira issue or because you need to create a jira issue? Or it is not blocked at all and you need to decide what to do?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232487062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "darklynx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232027791", "body": "@snicoll I only read the `CONTRIBUTING.md` after I have already submitted the PR, very structured and self-explaining document. I'll sign the CLA tonight and post corresponding message here. Do I need to create a ticket for this PR in the Spring JIRA or since the changes do not fix any bug and do not add any new feature to the library this step can be omitted?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232027791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232030221", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232030221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232193510", "body": "I have just created an issue in Spring JIRA: https://jira.spring.io/browse/SPR-14456 :)\nI'm not sure how to tag this PR with ticket, but probably the ticket can now be closed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232193510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "spodgurskiy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232142272", "body": "Here is the issue https://jira.spring.io/browse/SPR-14453\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232142272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pivotal-issuemaster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232145531", "body": "@fisache Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1108)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1108) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232145531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232145657", "body": "@fisache Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1108)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232145657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232158158", "body": "@spodgurskiy Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1070)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1070) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232158158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232204097", "body": "@spodgurskiy Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1070)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232204097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232378886", "body": "@philipp-classen Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1109)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1109) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232378886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232978957", "body": "@olaf-otto Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1111)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1111) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232978957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232979692", "body": "@olaf-otto Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1111)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232979692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233187684", "body": "@donhuvy Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1114)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1114) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233187684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233187732", "body": "@donhuvy Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1114)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233187732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233380245", "body": "@niaoge Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1117)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1117) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233380245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233382341", "body": "@niaoge Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1117)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233382341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878162", "body": "@ckalan Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1051)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1051) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878372", "body": "@myhorin Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1007)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1007) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878541", "body": "@jtigger Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=999)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=999) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233878541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233879245", "body": "@rs017991 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=943)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=943) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233879245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234032611", "body": "@jtigger Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=999)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234032611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234214616", "body": "@poutsma Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1119)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1119) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234214616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234226280", "body": "@poutsma Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1119)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234226280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234767179", "body": "@elvin-henry Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1120)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1120) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234767179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235225695", "body": "@ehlxr Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1120)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1120) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235225695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235265990", "body": "@violetagg Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1121)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1121) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235265990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235595858", "body": "@violetagg Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1121)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235595858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236408921", "body": "@chandramcsr Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1127)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1127) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236408921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236733320", "body": "@Akirus Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1128)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1128) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236733320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236734103", "body": "@Akirus Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1128)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236734103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/237513160", "body": "@kduhyun Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1129)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1129) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/237513160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/237625085", "body": "@hyojinbae Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1130)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1130) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/237625085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238798150", "body": "@kduhyun Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1129)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238798150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238804024", "body": "@hyojinbae Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1130)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238804024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238804304", "body": "@dimitrovchi Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1104)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1104) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238804304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238942733", "body": "@soulfrozen Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1131)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1131) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238942733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/239154788", "body": "@igormukhin Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1132)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1132) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/239154788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/239776349", "body": "@satimovm Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1134)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1134) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/239776349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240054626", "body": "@igormukhin Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1132)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240054626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240097614", "body": "@oneToMany Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1135)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1135) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240097614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240404249", "body": "@padilo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1066)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1066) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240404249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240527843", "body": "@padilo Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1066)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/240527843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242163042", "body": "@dreis2211 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1139)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1139) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242163042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242482913", "body": "@ttddyy Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1144)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1144) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242482913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242673929", "body": "@hall-wong Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1145)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1145) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242673929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242765171", "body": "@ttddyy Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1144)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242765171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242999933", "body": "@destan Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1149)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1149) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242999933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243000017", "body": "@destan Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1149)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243000017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243402183", "body": "@neetkee Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1150)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1150) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243402183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243403242", "body": "@neetkee Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1150)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243403242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243533829", "body": "@sylvainlaurent Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1151)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1151) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243533829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243546865", "body": "@sylvainlaurent Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1151)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243546865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244491095", "body": "@sumitvyas02 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1155)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1155) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244491095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244690789", "body": "@jmithmstr Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1090)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1090) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244690789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244691897", "body": "@TinaLan-525 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1157)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1157) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244691897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245188760", "body": "@hwhmusic Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1160)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1160) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245188760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245228093", "body": "@qxo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1161)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1161) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245228093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245231740", "body": "@qxo Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1161)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/245231740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246943325", "body": "@kosmaty Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1172)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1172) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246943325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246945106", "body": "@kosmaty Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1172)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/246945106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247427590", "body": "@wertklop Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1176)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1176) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247427590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247622412", "body": "@lockLX Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1177)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1177) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247622412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247842244", "body": "@kazuki-ma Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1179)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1179) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247842244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247842470", "body": "@kazuki-ma Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1179)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247842470/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247926547", "body": "@wertklop Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1176)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/247926547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250755594", "body": "@imdanshraaj Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1190)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1190) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250755594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250948162", "body": "@heart1988 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1191)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1191) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/250948162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251313227", "body": "@VikneswaranThangarasu Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1195)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1195) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251313227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251342044", "body": "@yulinling1230 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1196)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1196) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/251342044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253633013", "body": "@rand0m86 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1203)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1203) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253633013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253633462", "body": "@rand0m86 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1203)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253633462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253847096", "body": "@DevWantJustHaveFun Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1207)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1207) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253847096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253847645", "body": "@DevWantJustHaveFun Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1207)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/253847645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255513325", "body": "@caoxie Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1216)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1216) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255513325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256523739", "body": "@ejain Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1225)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1225) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256523739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256542581", "body": "@ejain Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1225)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/256542581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257080264", "body": "@huaqh1024 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1226)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1226) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/257080264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258356059", "body": "@qh529 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1229)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1229) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258356059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258603334", "body": "@imdanshraaj Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1230)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1230) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258603334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259072052", "body": "@lianyiwuming Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1232)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1232) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259072052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259344253", "body": "@zlikun Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1234)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1234) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/259344253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/261221387", "body": "@smaldini Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1239)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1239) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/261221387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/261225820", "body": "@smaldini Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1239)!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/261225820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263060118", "body": "@Yevhenii-Melnyk Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1247)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1247) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263060118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263060493", "body": "@Yevhenii-Melnyk Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1247)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263060493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263329128", "body": "@d4ksn Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1249)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1249) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263329128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263331101", "body": "@d4ksn Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1249)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263331101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263582362", "body": "@sgrillon14 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1054)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1054) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263582362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263583924", "body": "@sgrillon14 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1054)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/263583924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265275546", "body": "@schjan79 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1256)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1256) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265275546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265279969", "body": "@schjan79 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1256)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265279969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265522849", "body": "@nbaradar Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1260)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1260) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/265522849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267071288", "body": "@moores-expedia Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1269)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1269) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267071288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267072805", "body": "@moores-expedia Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1269)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267072805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267277774", "body": "@zhaoshengxuan108 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1271)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1271) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267277774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267282075", "body": "@zhaoshengxuan108 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1272)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1272) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267282075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268787324", "body": "@viartemev Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1275)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1275) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268787324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268787785", "body": "@viartemev Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1275)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/268787785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269644417", "body": "@einarpehrson Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1277)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1277) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269644417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269855606", "body": "@jvz Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1279)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1279) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269855606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269855666", "body": "@jvz Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1279)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269855666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269968924", "body": "@raphw Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1283)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1283) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269968924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269969045", "body": "@raphw Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1283)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269969045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270454993", "body": "@einarpehrson Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1277)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270454993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271502144", "body": "@Robin7Ma Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1290)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1290) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271502144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271504588", "body": "@Robin7Ma Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1290)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271504588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271536232", "body": "@springrain Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1291)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1291) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271536232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271541755", "body": "@springrain Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1291)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271541755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272158557", "body": "@echoAlexey Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1294)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1294) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272158557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272159811", "body": "@echoAlexey Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1294)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/272159811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273151460", "body": "@rwadazhao Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1299)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1299) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/273151460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277113589", "body": "@grimreaper Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1311)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1311) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277113589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277113617", "body": "@grimreaper Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1312)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1312) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277113617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277235328", "body": "@ulich Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1315)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1315) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277235328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277236867", "body": "@ulich Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1315)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277236867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279217643", "body": "@melgene Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1323)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1323) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279217643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279217695", "body": "@melgene Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1323)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279217695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279533152", "body": "@akiraly Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1324)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1324) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279533152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279533922", "body": "@akiraly Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1324)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279533922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279645778", "body": "@JanespenCerpus Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1326)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1326) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279645778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279647191", "body": "@JanespenCerpus Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1326)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279647191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279890120", "body": "@LuoYuWuSheng Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1328)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1328) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279890120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281259468", "body": "@ywang1988 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1332)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1332) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281259468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282489074", "body": "@pistriak Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1339)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1339) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282489074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282489250", "body": "@pistriak Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1339)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282489250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282553920", "body": "@kineck Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1341)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1341) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282553920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282629078", "body": "@chenjianyao Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1342)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1342) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282629078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284028546", "body": "@wltjr Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1344)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1344) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284028546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284172150", "body": "@sethrife Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1346)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1346) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284172150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284174586", "body": "@sethrife Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1346)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284174586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284344085", "body": "@ChengShuangGitHub Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1350)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1350) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284344085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284699857", "body": "@neo01124 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1351)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1351) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284699857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284700036", "body": "@neo01124 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1351)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284700036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286010321", "body": "@QBNemo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1354)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1354) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286010321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286013392", "body": "@QBNemo Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1354)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/286013392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287619536", "body": "@Andrei94 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1358)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1358) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287619536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287620871", "body": "@Andrei94 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1358)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287620871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287686745", "body": "@huabao310 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1359)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1359) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/287686745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288790241", "body": "@nertzy Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1364)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1364) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288790241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288790481", "body": "@nertzy Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1364)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288790481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289391764", "body": "@arturgspb Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1366)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1366) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289391764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289393362", "body": "@arturgspb Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1366)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/289393362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290971391", "body": "@jerrylye Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1371)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1371) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290971391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291500354", "body": "@jhordies Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1372)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1372) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291500354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291500867", "body": "@jhordies Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1372)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291500867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291580209", "body": "@lc-nyovchev Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1373)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1373) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291580209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291580575", "body": "@lc-nyovchev Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1373)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/291580575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292637681", "body": "@xyloman Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1381)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1381) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292637681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292644180", "body": "@xyloman Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1381)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292644180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293502789", "body": "@tianrobin Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1385)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1385) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293502789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293821256", "body": "@backend-developer Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1388)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1388) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293821256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294335778", "body": "@prashiln79 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1391)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1391) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294335778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295211475", "body": "@dmitriyartanov Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1393)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1393) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295211475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295212273", "body": "@dmitriyartanov Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1393)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295212273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295299537", "body": "@alexander-riss Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1394)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1394) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295299537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295299856", "body": "@alexander-riss Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1394)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295299856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295853007", "body": "@RaviRajamani Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1396)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1396) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295853007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296838414", "body": "@janesser Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=729)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=729) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296838414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296838775", "body": "@janesser Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=729)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/296838775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297125146", "body": "@Flounn Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1402)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1402) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297125146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297139911", "body": "@Flounn Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1402)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/297139911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298316611", "body": "@yaozheDx Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1410)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1410) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298316611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298367394", "body": "@andreykaipov Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1411)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1411) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298367394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298555553", "body": "@gvdenbro Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1413)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1413) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298555553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298556991", "body": "@gvdenbro Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1413)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298556991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299190801", "body": "@LeeRenbo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1415)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1415) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299190801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299192162", "body": "@LeeRenbo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1416)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1416) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299192162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299711148", "body": "@Skarafaz Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1418)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1418) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299711148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299711466", "body": "@Skarafaz Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1418)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/299711466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301002025", "body": "@pathfinder2104 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1424)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1424) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301002025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301004883", "body": "@pathfinder2104 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1424)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301004883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301356427", "body": "@SamG1000 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1428)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1428) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301356427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301356512", "body": "@SamG1000 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1428)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301356512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302366931", "body": "@tempestLXC Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1430)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1430) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302366931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304432838", "body": "@danlihome Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1437)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1437) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/304432838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305957904", "body": "@diguage Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1444)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1444) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305957904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305974661", "body": "@diguage This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305974661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309000679", "body": "@rbonifacio Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1460)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1460) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309000679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309009971", "body": "@rbonifacio Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1460)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309009971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309196551", "body": "@freeman0432 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1461)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1461) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309196551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309196872", "body": "@freeman0432 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1461)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309196872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311218643", "body": "@hackerwins Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1465)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1465) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311218643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311218801", "body": "@hackerwins Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1465)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/311218801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875504", "body": "@eyealike Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=10)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=10) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875588", "body": "@samion Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=107)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=107) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875606", "body": "@twicksell Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=135)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=135) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875667", "body": "@nurkiewicz Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=84)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=84) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/312875667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313293348", "body": "@IAMTJW Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313293348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313294431", "body": "@IAMTJW Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313294431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313725193", "body": "@qcq Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1471)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1471) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313725193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313725722", "body": "@qcq Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1471)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/313725722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314507144", "body": "@xnslong Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1474)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1474) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314507144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314507956", "body": "@xnslong Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1474)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314507956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314604279", "body": "@solidjb Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1475)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1475) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314604279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314604625", "body": "@solidjb Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1475)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314604625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/315675779", "body": "@LarsOL Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1478)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1478) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/315675779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/315676554", "body": "@LarsOL Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1478)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/315676554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316083855", "body": "@tasnemhou Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1479)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1479) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316083855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316959175", "body": "@jonasholtkamp Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1483)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1483) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/316959175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319570713", "body": "@sjkim2322 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1489)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1489) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319570713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319571169", "body": "@sjkim2322 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1489)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319571169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319812250", "body": "@douraid Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1491)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1491) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319812250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319814304", "body": "@douraid Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1491)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319814304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320103694", "body": "@flintmail Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1492)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1492) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320103694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320105208", "body": "@tminussi Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1493)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1493) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320105208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320105716", "body": "@flintmail Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1492)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320105716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320105990", "body": "@tminussi Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1493)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320105990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320391424", "body": "@ooooow Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1494)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1494) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320391424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320392081", "body": "@ooooow Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1494)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/320392081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/321619617", "body": "@dwshmilyss Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1495)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1495) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/321619617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322383982", "body": "@redrainz Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1497)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1497) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322383982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322959989", "body": "@guanmu Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1500)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1500) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322959989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/323898449", "body": "@liuxuehai Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1502)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1502) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/323898449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324266968", "body": "@zsoltii Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1503)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1503) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324266968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324269019", "body": "@zsoltii Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1503)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324269019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324451274", "body": "@bbohl Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1504)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1504) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324451274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324451960", "body": "@bbohl Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1504)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324451960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324519817", "body": "@kikuchanj1990 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1505)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1505) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324519817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324652895", "body": "@stepio Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1506)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1506) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324652895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324658450", "body": "@stepio Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1506)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324658450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326560671", "body": "@lipengli001 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1514)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1514) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/326560671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327060199", "body": "@mage234 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1515)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1515) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/327060199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328035532", "body": "@Xantier Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1519)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1519) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328035532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328035679", "body": "@Xantier Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1519)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328035679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328267720", "body": "@wuyuyan2256 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1521)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1521) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328267720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328268305", "body": "@wuyuyan Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1522)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1522) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328268305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328285509", "body": "@wuyuyan Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1522)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/328285509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/329794159", "body": "@sandeepjariya Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1529)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1529) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/329794159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330701406", "body": "@xavier630 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1531)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1531) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330701406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330701603", "body": "@xavier630 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1531)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/330701603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332818070", "body": "@mikeeastin Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1536)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1536) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332818070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332915546", "body": "@nkolosnjaji Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1537)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1537) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332915546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332918078", "body": "@nkolosnjaji Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1537)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/332918078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333321023", "body": "@MottoX Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1545)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1545) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333321023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333321103", "body": "@MottoX Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1545)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333321103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333359977", "body": "@muyinchen Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1546)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1546) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333359977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333511034", "body": "@muyinchen Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1546)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333511034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333722716", "body": "@tomfitzhenry Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1547)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1547) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333722716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333722787", "body": "@tomfitzhenry Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1547)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333722787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335059367", "body": "@krishs09 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1550)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1550) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335059367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335190554", "body": "@teerapat2539 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1551)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1551) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335190554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335190823", "body": "@teerapat2539 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1551)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335190823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335667575", "body": "@christor Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1553)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1553) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335667575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335667694", "body": "@christor Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1553)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335667694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336048124", "body": "@Arxemond777 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1556)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1556) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336048124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336052612", "body": "@Arxemond777 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1556)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336052612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336240931", "body": "@YLesko Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1558)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1558) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336240931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336241897", "body": "@YLesko Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1558)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336241897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336758830", "body": "@IlilIliI Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1564)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1564) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336758830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337814651", "body": "@jinyuzhou Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1567)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1567) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337814651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337928890", "body": "@reachvali Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1568)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1568) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/337928890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338143247", "body": "@lonre Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1569)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1569) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338143247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338143398", "body": "@lonre Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1569)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338143398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338464142", "body": "@ruslan5t Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1572)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1572) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338464142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338464202", "body": "@ruslan5t Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1572)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338464202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340071637", "body": "@stevenschlansker Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1579)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1579) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340071637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340071801", "body": "@stevenschlansker Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1579)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340071801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340469329", "body": "@epabst Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1580)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1580) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340469329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341028727", "body": "@zhouchangfu Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1582)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1582) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341028727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341522437", "body": "@jmax01 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1583)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1583) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341522437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341522754", "body": "@jmax01 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1583)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341522754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342981961", "body": "@Yneth Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1590)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1590) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342981961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342982131", "body": "@Yneth Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1590)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/342982131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345592856", "body": "@higankanshi Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1600)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1600) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345592856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345593059", "body": "@higankanshi Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1600)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345593059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345669467", "body": "@hongxingwz Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1601)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1601) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/345669467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346960428", "body": "@martin1yness Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1604)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1604) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346960428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346960650", "body": "@martin1yness This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346960650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347020470", "body": "@imasahiro Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1605)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1605) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347020470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347020665", "body": "@imasahiro Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1605)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347020665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347923822", "body": "@hadjiski Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1608)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1608) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347923822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347925412", "body": "@hadjiski Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1608)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/347925412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348401674", "body": "@xiaoshuang-lu Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1610)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1610) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348401674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348402534", "body": "@xiaoshuang-lu Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1610)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348402534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348841451", "body": "@ugultopu Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1611)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1611) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348841451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348841590", "body": "@ugultopu This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/348841590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349246556", "body": "@boroborome Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1613)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1613) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349246556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349266112", "body": "@gro-gg Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1615)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1615) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349266112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349266386", "body": "@gro-gg Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1615)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349266386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349470162", "body": "@Mischi Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1026)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1026) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349470162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349523902", "body": "@boroborome Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1613)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349523902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349812213", "body": "@tonymitchell Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1612)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1612) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349812213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349817778", "body": "@tonymitchell Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1612)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349817778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349930260", "body": "@liyongscys Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1617)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1617) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349930260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349931561", "body": "@agent-ost Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1618)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1618) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349931561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349931679", "body": "@agent-ost Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1618)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349931679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349946206", "body": "@sunlin901203 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1619)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1619) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/349946206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352378119", "body": "@tempestLXC Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1625)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1625) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352378119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353349475", "body": "@mathieu-pousse Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1626)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1626) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353349475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353351081", "body": "@mathieu-pousse Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1626)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353351081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353758501", "body": "@Linolium Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1634)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1634) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353758501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353758629", "body": "@Linolium Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1634)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/353758629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355634625", "body": "@karthik-Adiga Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1638)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1638) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/355634625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357431620", "body": "@EnvOut Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1642)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1642) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357431620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357431749", "body": "@EnvOut Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1642)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/357431749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358337455", "body": "@JanStureNielsen Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1645)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1645) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358337455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358337583", "body": "@JanStureNielsen Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1645)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/358337583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359161742", "body": "@mrmaus Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1648)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1648) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359161742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359161768", "body": "@mrmaus Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1648)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359161768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359468565", "body": "@neonailol Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1649)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1649) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359468565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359468729", "body": "@neonailol Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1649)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359468729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360507868", "body": "@ketan Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1652)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1652) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360507868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360508069", "body": "@ketan Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1652)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360508069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360710101", "body": "@pebo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1653)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1653) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360710101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360710210", "body": "@pebo Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1653)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360710210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360987023", "body": "@logart Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1655)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1655) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360987023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360987080", "body": "@logart Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1655)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/360987080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362054922", "body": "@adamlehenbauer Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1656)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1656) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362054922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362074052", "body": "@adamlehenbauer Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1656)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362074052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362245710", "body": "@liaozan Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1658)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1658) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362245710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362246036", "body": "@liaozan Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1658)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362246036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363038961", "body": "@bungrudi Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1663)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1663) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363038961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363095177", "body": "@jmnarloch Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=915)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=915) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363095177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363128223", "body": "@pkostrzewa Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1664)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1664) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363128223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363128570", "body": "@pkostrzewa Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1664)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363128570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "philipp-classen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232381768", "body": "Just realized that the list is sorted later, anyway. I'm closing the request, as keeping the order is not necessary.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/232381768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cmx1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233866795", "body": "oh ,my god ,so good !!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233866795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xenoterracide": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233953042", "body": "https://jira.spring.io/browse/SPR-14496\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/233953042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "khatchad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234965061", "body": "Hi @bclozel. Thank you for this feedback! Indeed, running sonar before and after the refactoring is something we've not previously considered and would be of interest. Also, please let us know if you would ever be interested in applying the refactoring to your new Spring 5.0 branch.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/234965061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GleyderC": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235807139", "body": "Hello,\n\ntrigger@ifttt.com has been retired. Use trigger@recipe.ifttt.com to trigger your Email Channel Recipes.\n\n\u2014The IFTTT Team\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235807139/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359124133", "body": "Hello,\n\ntrigger@ifttt.com has been retired. Use trigger@applet.ifttt.com to trigger your Email Channel Applets.\n\n\u2014The IFTTT Team\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/359124133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "phillescott": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235835056", "body": "Yea no problems.\n\nCheers for the feedback\n\nSent from my iPhone\n\n> On 28 Jul 2016, at 18:13, St\u00e9phane Nicoll notifications@github.com wrote:\n> \n> @phillescott thank you so much for the PR Phill. I've commented on Jira.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235835056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235845737", "body": "Although this will still lookup the cache by cache name not the name of the cache bean in the application context. \n\nSent from my iPhone\n\n> On 28 Jul 2016, at 18:40, Googlemail phill.escott@googlemail.com wrote:\n> \n> Yea no problems.\n> \n> Cheers for the feedback\n> \n> Sent from my iPhone\n> \n> > On 28 Jul 2016, at 18:13, St\u00e9phane Nicoll notifications@github.com wrote:\n> > \n> > @phillescott thank you so much for the PR Phill. I've commented on Jira.\n> > \n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub, or mute the thread.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235845737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235857359", "body": "Yes I do agree. It just we have a use case where were dynamically selecting a cache based on profile (it's an SSM cache and the cache name must match the SSM cache) so I was looking up by bean name as it would be constant. No worries though; it's an edge case that I accounted for and just thought I'd submit PR for it.\n\nCheers for being helpful with the responses\n\nSent from my iPhone\n\n> On 28 Jul 2016, at 19:32, St\u00e9phane Nicoll notifications@github.com wrote:\n> \n> That's much better IMO. If you create a Cache bean named foo and it's Cache#getName returns bar I would expect bar to be the valid name. If you feel otherwise, just align the cache name and the bean name.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/235857359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236091880", "body": "Ah sorry its a SimpleSpringMemcached (\nhttps://www.javacodegeeks.com/2013/06/simple-spring-memcached-spring-caching-abstraction-and-memcached.html)\nimplementation.\n\nI've managed to sort it through an alias they supply. I was just too keen\nto commit something haha!\n\nEnjoy your weekend.\n\nOn 28 July 2016 at 21:49, St\u00e9phane Nicoll notifications@github.com wrote:\n\n> I have no idea what \"SSM cache\" is but if it's your code (or you are\n> willing to extend it) you could something like this:\n> \n> public class SsmCache implements Cache, BeanNameAware {\n> \n>   private String name;\n> \n>   @Override\n>   public String getName() {\n>     return this.name;\n>   }\n> \n>   @Override\n>   public void setBeanName(String name) {\n>     this.name = name;\n>   }\n> }\n> \n> That way you are sure that getName() always match the bean name. That's\n> another way to achieve the same use case.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/spring-projects/spring-framework/pull/1124#issuecomment-235872744,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AB9Lar-jolWAr77GUCHzuNh_-FFUOvbLks5qaJdXgaJpZM4JW45b\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236091880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cskinfill": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236555975", "body": "Is this supported in spring now?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236555975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "testark": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236585435", "body": "Is it in your roadmap to merge this anytime soon?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/236585435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dimitrovchi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238918295", "body": "@snicoll , yes, because I've found that my IDE organizes imports in a slightly different way that in your project. Therefore the diff is too big. Excuse me for that, I'm going to fix it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/238918295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hall-wong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242888278", "body": "@sbrannen Well, here are steps to reproduce this error:\nafter I clone this repo, I import the project to Eclipse;\nthen I run `gradle eclipse`, and NPE is thrown;\nThis error occurred on my MacBook Pro, I don't have log now, I'll post it later.\n\nAnd I run `import-into-eclipse` script on my PC(Windows 7, 64-bit), but it caused another error:\n\n> Downloading https://services.gradle.org/distributions/gradle-3.0-bin.zip\n> Exception in thread \"main\" java.net.SocketTimeoutException: Read timed out\n>         at java.net.SocketInputStream.socketRead0(Native Method)\n>         at java.net.SocketInputStream.socketRead(Unknown Source)\n>         at java.net.SocketInputStream.read(Unknown Source)\n>         at java.net.SocketInputStream.read(Unknown Source)\n>         at sun.security.ssl.InputRecord.readFully(Unknown Source)\n>         at sun.security.ssl.InputRecord.read(Unknown Source)\n\nShould I upgrade Gradle to 3.0 manually(my Gradle's version is 2.14.1)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/242888278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243021396", "body": "Well, I can't reproduce this error on my MacBook after I reboot it.\nHowever, after I finish `gradle eclipse` command, I can import the sub-project correctly, everything seems fine.\nThanks for the guide.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243021396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kartoffelsup": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243001198", "body": "What do you think about this one?\n\n``` java\npublic enum StompCommand {\n\n  // client\n  CONNECT(SimpMessageType.CONNECT, 0),\n  STOMP(SimpMessageType.CONNECT, 0),\n  DISCONNECT(SimpMessageType.DISCONNECT, 0),\n  SUBSCRIBE(SimpMessageType.SUBSCRIBE, 3),\n  UNSUBSCRIBE(SimpMessageType.UNSUBSCRIBE, 2),\n  SEND(SimpMessageType.MESSAGE, 13),\n  ACK(SimpMessageType.OTHER, 0),\n  NACK(SimpMessageType.OTHER, 0),\n  BEGIN(SimpMessageType.OTHER, 0),\n  COMMIT(SimpMessageType.OTHER, 0),\n  ABORT(SimpMessageType.OTHER, 0),\n\n  // server\n  CONNECTED(SimpMessageType.OTHER, 0),\n  MESSAGE(SimpMessageType.MESSAGE, 15),\n  RECEIPT(SimpMessageType.OTHER, 0),\n  ERROR(SimpMessageType.OTHER, 12);\n\n  private static final int DESTINATION_REQUIRED = 1;\n  private static final int SUBSCRIPTION_ID_REQUIRED = 2;\n  private static final int CONTENT_LENGTH_REQUIRED = 4;\n  private static final int BODY_ALLOWED = 8;\n\n  private final int flags;\n  private final SimpMessageType simpMessageType;\n\n  StompCommand(final SimpMessageType simpMessageType, final int flags) {\n    this.flags = flags;\n    this.simpMessageType = simpMessageType;\n  }\n\n  public SimpMessageType getMessageType() {\n    return simpMessageType;\n  }\n\n  public boolean requiresDestination() {\n    return (flags & DESTINATION_REQUIRED) != 0;\n  }\n\n  public boolean requiresSubscriptionId() {\n    return (flags & SUBSCRIPTION_ID_REQUIRED) != 0;\n  }\n\n  public boolean requiresContentLength() {\n    return (flags & CONTENT_LENGTH_REQUIRED) != 0;\n  }\n\n  public boolean isBodyAllowed() {\n    return (flags & BODY_ALLOWED) != 0;\n  }\n}\n```\n\n``` java\npublic class StompCommandTest {\n\n  private static final Collection<StompCommand> destinationRequired = asList(SEND, SUBSCRIBE, MESSAGE);\n  private static final Collection<StompCommand> subscriptionIdRequired = asList(SUBSCRIBE, UNSUBSCRIBE, MESSAGE);\n  private static final Collection<StompCommand> contentLengthRequired = asList(SEND, MESSAGE, ERROR);\n  private static final Collection<StompCommand> bodyAllowed = asList(SEND, MESSAGE, ERROR);\n\n  private static final Map<StompCommand, SimpMessageType> messageTypes = new EnumMap<>(StompCommand.class);\n\n  static {\n    messageTypes.put(StompCommand.CONNECT, SimpMessageType.CONNECT);\n    messageTypes.put(StompCommand.STOMP, SimpMessageType.CONNECT);\n    messageTypes.put(StompCommand.SEND, SimpMessageType.MESSAGE);\n    messageTypes.put(StompCommand.MESSAGE, SimpMessageType.MESSAGE);\n    messageTypes.put(StompCommand.SUBSCRIBE, SimpMessageType.SUBSCRIBE);\n    messageTypes.put(StompCommand.UNSUBSCRIBE, SimpMessageType.UNSUBSCRIBE);\n    messageTypes.put(StompCommand.DISCONNECT, SimpMessageType.DISCONNECT);\n  }\n\n  @Test\n  public void getMessageType() throws Exception {\n    for (final Map.Entry<StompCommand, SimpMessageType> stompToSimp : messageTypes.entrySet()) {\n      assertEquals(stompToSimp.getKey().getMessageType(), stompToSimp.getValue());\n    }\n  }\n\n  @Test\n  public void requiresDestination() throws Exception {\n    for (final StompCommand stompCommand : StompCommand.values()) {\n      if (destinationRequired.contains(stompCommand)) {\n        assertTrue(stompCommand.requiresDestination());\n      } else {\n        assertFalse(stompCommand.requiresDestination());\n      }\n    }\n  }\n\n  @Test\n  public void requiresSubscriptionId() throws Exception {\n    for (final StompCommand stompCommand : StompCommand.values()) {\n      if (subscriptionIdRequired.contains(stompCommand)) {\n        assertTrue(stompCommand.requiresSubscriptionId());\n      } else {\n        assertFalse(stompCommand.requiresSubscriptionId());\n      }\n    }\n  }\n\n  @Test\n  public void requiresContentLength() throws Exception {\n    for (final StompCommand stompCommand : StompCommand.values()) {\n      if (contentLengthRequired.contains(stompCommand)) {\n        assertTrue(stompCommand.requiresContentLength());\n      } else {\n        assertFalse(stompCommand.requiresContentLength());\n      }\n    }\n  }\n\n  @Test\n  public void isBodyAllowed() throws Exception {\n    for (final StompCommand stompCommand : StompCommand.values()) {\n      if (bodyAllowed.contains(stompCommand)) {\n        assertTrue(stompCommand.isBodyAllowed());\n      } else {\n        assertFalse(stompCommand.isBodyAllowed());\n      }\n    }\n  }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243001198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25120510", "body": "Prefix*", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25120510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76537375", "body": "Couldn't this be done even better? Like:\n\n``` java\nenum StompCommand {\n    CONNECT(SimpMessageType.CONNECT); // ,etc..\n\n    private final SimpMessageType simpType;\n\n    StompCommand(SimpMessageType simpType) {\n      this.simpType = simpType;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76537375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76538636", "body": "Instead of checking for null here, why not just pass SimpMessageType.OTHER instead of null to the constructors?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76538636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/90385963", "body": "The comment sounds a bit wrong to me. :o", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/90385963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "neetkee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243987115", "body": "I checked it again, without workarounds. It's not working now, looks like at first time I invoked gradle build from IDEA's gradle window. So checked it **with**  workarounds and got this from Build -> Rebuild Project:\n\n```\nError:(80, 51) java: cannot access io.netty.util.ReferenceCounted\n  class file for io.netty.util.ReferenceCounted not found\nError:(84, 36) java: cannot access io.netty.util.ByteProcessor\n  class file for io.netty.util.ByteProcessor not found\nError:(214, 36) java: cannot find symbol\n  symbol:   method release()\n  location: variable byteBuf of type io.netty.buffer.ByteBuf\n/spring-framework/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java\n```\n\nThen I tried to build it from CLI and got another error:\n\n```\n /spring-framework/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java:109: error: cannot find symbol\n                                Operators.getAndSub(this.demand, 1L);\n                                         ^\n```\n\nIt can't find this method in reactor, I guess.\n\nSorry in advance for this confusion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/243987115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244334022", "body": "Turns out, that almost no changes needed in this instruction, at least until JetBrains not resolve issues?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244334022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "destan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244530861", "body": "@snicoll sorry I misinterpret the feature.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/244530861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "YanshuoShang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249769145", "body": "yes,this is more smart\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/249769145/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "apixandru": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252336316", "body": "I have signed and agree to the terms of the Spring Individual Contributor\nLicense Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252336316/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "heffebaycay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252443187", "body": "Alright, thanks for improving the fix!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/252443187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DevWantJustHaveFun": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254139692", "body": "Hello, thanks for your response, in some projects, I have this kind of code \n\n> @RequestMapping(value = \"/ping\", method = RequestMethod.HEAD)\n> @ResponseStatus(value = HttpStatus.OK)\n> public void ping()\n> {\n>           // pong ....\n> }\n\nI use this with a load balancer (Haproxy), the goal of this method is to check the health of my springboot application.\n\nI want just to add a new annotation shortcut like \"@GetMapping\"\n\n> @HeadMapping(value = \"/ping\")\n> @ResponseStatus(value = HttpStatus.OK)\n> public void ping()\n> {\n>     // pong ....\n> }\n\nIf you have a better syntax for my case, please tell me. \nThanks, \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254139692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254207799", "body": "Ok, I have tested your solution it's work (with @ResponseStatus(value = HttpStatus.OK))\n\nbut I have two points \n\n1/ it's not obvious  in the code, if I see that in an API, I will try to call the endpoint with a \"GET\" method not a \"HEAD\" \n\n2/ With my solution if you call the endpoint with a GET method you will get an error 405 \"Method Not Allowed\" but not with the @GetMapping, for me it's look better because my \"ping\" method should be used only with \"HEAD\"\n\n> curl -i -X HEAD http://localhost:8080/ping\n> \n> HTTP/1.1 200 OK\n> Set-Cookie: JSESSIONID=KHbbUS4TsdPxBUbD6NUT0vJCuxwGuuJjWI2PjlTh; path=/\n> Content-Length: 0\n> Date: Mon, 17 Oct 2016 13:16:21 GMT\n> Set-Cookie: SERVERID=; Expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/\n> \n>  curl -i -X GET http://localhost:8080/ping\n> \n> HTTP/1.1 405 Method Not Allowed\n\nWhat do you think about that ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254207799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254219185", "body": "@jhoeller Thanks for your reponse.\n\nAnnotations  shorcut like `@GetMapping`  are cool because more readable and they reduce boilerplate.\nThey are more like annotations defined in the JSR-339, and the @HEAD annotation exist in the JSR-339.\n\nI have no problem with the usage of @RequestMapping(method=HEAD) but I thought this method was forgotten in the Spring implementation of the `@RequestMapping` shortcut annotations \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254219185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254609526", "body": "Ok, I will continue to use my custom annotation in my own project, you can decline the pull request, if it's not relevant for the framework.\nAnyway thanks for your time.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254609526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255697395", "body": "@snicoll  it's necessary to create a jira ticket for this PR ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255697395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255706379", "body": "@snicoll  thanks for your response, just out of curiosity what is the shorter options ? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/255706379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dawud-tan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254156852", "body": "nice.. :D\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/254156852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23057924", "body": "hm.. a lot of refactor happen.. >.< :3", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23057924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hadrienk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258441742", "body": "This render InputStreamResource created by ResourceHttpMessageConverter unusable. A solution could be to skip InputStreamResource altogether, I don't know if it would have side effects.\n\n``` java\n    @Override\n    public void close() {           public void close() {\n -      this.connection.disconnect();        +      if (this.responseStream != null) {\n +          try {\n +              StreamUtils.drain(this.responseStream);\n +              this.responseStream.close();\n +          }\n +          catch (IOException e) { }\n +      }\n    }           }\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258441742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "findepi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258697859", "body": "I'm aware of https://jira.spring.io/browse/SPR-13721 but that did not provide out-of-the-bxo String-to-Duration conversion for overrides. I.e. without the proposed changes, the example set forth in the PR description won't work. As the property overrides are often used for configuration, this PR adds, as an additional bonus, support for simple representation that is both really human readable and natural.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/258697859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271424839", "body": "I still believe this patch brings something good to Spring. However, I guess it's not going to be merged (am I right, @jhoeller?). Therefore closing it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/271424839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kervin521": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262446265", "body": "I can find or query Entity(s),Only to set Property of Entity,but auto update to data base,I can't saveOrUpdate operation.\r\n\r\nfor example:\r\n\r\nList<A> list = commonService.findByCriteria(criteria);\r\nfor(A a:list){\r\n    a.setStatus(1);// default is 0;\r\n}\r\nfollow up,A-->status=1 will auto update to data base;\r\nwhy?\r\nhow to handle to avoid to happen?\r\n\r\nprotect frame:\r\n1.spring 4.3.2+hibernate 5.1.0\r\n2.spring 3.2.17+hibernate 3.6.10\r\nThe above two combinations have existed this problem \r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/262446265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zhaoshengxuan108": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267277937", "body": "update from origin", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/267277937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "geoand": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269788284", "body": "I love the way Kotlin is being introduced in a non-intrusive manner into Spring!\r\nTwo awesome technologies working together seamlessly just makes our lives simpler :) ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/269788284/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "coryfoo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270264246", "body": "Any reason why this PR has been open for almost 2 years without any comments?  What is the hold up for getting this functionality into the next (or any) release?  ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/270264246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pgrimard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274604684", "body": "That's great!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274604684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274817602", "body": "I like the approach you've taken with `RenderingContext`.  The template loader is a nice way to keep templates modular and composable within the render function.  With the introduction of rendering context, the `template` variable seems a little less important.  I see it as a convenience if the render function doesn't need the added functionality of the rendering context, but ultimately the same template could be retrieved simply using the rendering context.  So replacing the `template` argument with the rendering context could be an option, although a breaking change.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274817602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274827772", "body": "Makes sense \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/274827772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275159042", "body": "This will be release as part of Spring 5?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/275159042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ulich": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277347976", "body": "thank you for taking your time!\r\n\r\ni was rather thinking of more like acceptance testing, like testing that my app returns a cached value and it also refreshes the cache at some point. maybe for some reason the configuration of `expireAfterWrite` gets lost by accident or is no longer supported in a newer version (and you configured it via properties in spring-boot, so no compiler checks), then you have an app that never ever refreshes the value again. there is no way of ensuring this right now.\r\n\r\nwhat I basically want to test is the cache configuation and if my configuration does what i want.\r\n\r\nfor not having to adapt the test when the expiry time is changed: it is just like any other test where you rely on some constant value: you could create a constant out of it and reuse it in the tests...\r\n\r\nMaybe you could rethink now that I elaborated. But I am also not angry if it does not get merged :)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277347976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "janetgregory": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277868164", "body": "I'm sorry but I want to opt out, unsubscribe\nOn Feb 6, 2017 1:20 PM, \"violetagg\" <notifications@github.com> wrote:\n\n> ------------------------------\n> You can view, comment on, or merge this pull request online at:\n>\n>   https://github.com/spring-projects/spring-framework/pull/1317\n> Commit Summary\n>\n>    - Simplify the calculation of UndertowServerHttpRequest.uri\n>\n> File Changes\n>\n>    - *M* spring-web/src/main/java/org/springframework/http/server/\n>    reactive/UndertowServerHttpRequest.java\n>    <https://github.com/spring-projects/spring-framework/pull/1317/files#diff-0>\n>    (20)\n>\n> Patch Links:\n>\n>    - https://github.com/spring-projects/spring-framework/pull/1317.patch\n>    - https://github.com/spring-projects/spring-framework/pull/1317.diff\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/spring-projects/spring-framework/pull/1317>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AYYhbSDfCcDPlI4BIlj7ywQ6DOKfNyrhks5rZ2R2gaJpZM4L4isb>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/277868164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285865151", "body": "I want to opt out of this.. im not good at this thank you\n\nOn Feb 13, 2017 4:51 PM, \"Pivotal Issuemaster\" <notifications@github.com>\nwrote:\n\n> @akiraly <https://github.com/akiraly> Thank you for signing the Contributor\n> License Agreement\n> <https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1324>\n> !\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/spring-projects/spring-framework/pull/1324#issuecomment-279533922>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AYYhbcRWyrPqjquv1tyInXgHjZjl6ZOcks5rcNBLgaJpZM4L_w8f>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285865151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "atomcat1978": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278622257", "body": "Is this ever going to be merged into the main branch? I think, it would be useful to add support for Advisors on the same way. I had to override the class in my project to get this functionality.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/278622257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "melgenek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279444605", "body": "@sdeleuze There is no possibility to access class members as well as field injection (only default constructor injection). But in practice controllers most likely call business services and define request mappings.\r\n\r\nThe problem I came up with while writing this message is unit testing of such controllers. And I don't have solution for this issue.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279444605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279833047", "body": ">  current implementation is suboptimal (route are evaluated for each request and not just at RouterFunction creation\r\n\r\n@sdeleuze, I noticed such behaviour. This issue will raise in Java as well as in Kotlin. Possible solution is to implemet lazy router function. The following can be done using Kotlin, but should be fixed for java too.\r\n```kotlin\r\nabstract class LazyRouterFunction : RouterFunction<ServerResponse> {\r\n\tval routerFunction: RouterFunction<ServerResponse> by lazy {\r\n\t\tRouterDsl().apply(routes).router()\r\n\t}\r\n\tabstract val routes: RouterDsl.() -> Unit\r\n\toverride fun route(request: ServerRequest): Mono<HandlerFunction<ServerResponse>> {\r\n\t\treturn routerFunction.route(request)\r\n\t}\r\n}\r\n```\r\nAnd the usage is like the following: \r\n```kotlin\r\n@Controller\r\nclass LazyController : LazyRouterFunction() {\r\n\toverride val routes: RouterDsl.() -> Unit = {\r\n\t\t(GET(\"/foo/\") or GET(\"/foos/\")) { req -> handle(req) }\r\n\t\taccept(MediaType.APPLICATION_JSON).apply {\r\n\t\t\tDELETE(\"/api/foo/\", this@LazyController::handle)\r\n\t\t}\r\n\t}\r\n\tfun handle(req: ServerRequest) = ServerResponse.ok().build()\r\n}\r\n```\r\n\r\n@sdeleuze @rstoyanchev There is a question I am concerned about : complexity of request handler \r\nsearch. It seems that the `RouterFunction` approach in worst case can reach `O(n)` if the last `n`th function is the one that applies to request. Does `RequestMapping` makes things better, closer to hashmap complexity `O(1)`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/279833047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "linead": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280821211", "body": "Could this be backported to the 4.3.x?\r\n\r\nThis forced me to back out our annotation based caching as without being able to use this you end up with a system that fails catastrophically when the cache is down and the provided mechanism of a custom error handler allows for the get and put operations to be non-fatal on error; it will always fall over when the described issue happens with cache result. \r\n\r\nHappy to contribute towards this, I find it strange that cache failures would by default cause fatal errors (to a request).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280821211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280821906", "body": "Thanks for the backport and sorry for missing that, that's awesome news to me :)\r\n\r\nI just wonder if it needs to be fatal, the system is still in a working state and the only indication of a failure goes direct back to the user, also without the cache being part of the healthcheck we can't even have a failed node be removed from the rotation.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280821906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280822516", "body": "no worries :+1: thanks to both of you for getting this fixed :)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/280822516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Vijendra07Kulhade": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281768062", "body": "I tried using these changes with `AsyncRestTemplate`. `BufferingAsyncClientHttpRequestFactory` is only implementing `AsyncClientHttpRequestFactory` and `AsyncRestTemplate` constructor takes `ClientHttpRequestFactory` also. It will break during autowiring.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/281768062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chenjianyao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282629094", "body": "1", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/282629094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mathieuales": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/283707942", "body": "Great !\r\nWhich is the minimal release for this new feature ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/283707942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wltjr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284031290", "body": "The file has been removed from master. I resubmitted against the 4.3.x branch", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284031290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284737973", "body": "Ok sounds good", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/284737973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "seanmmills": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285144193", "body": "If approved, can this be cherry-picked to the 4.3.x branch as well?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/285144193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Andrei94": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288316089", "body": "@snicoll review please? :)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/288316089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290319919", "body": "@snicoll changes made :smiley: ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/290319919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294431805", "body": "@jhoeller any news about this PR?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294431805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jhordies": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292152965", "body": "@jhoeller Thanks for your fast reaction. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/292152965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nolines": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293175887", "body": "Hi, collegues. Any news about this issue? ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/293175887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lucasljj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294322364", "body": "this pr change more than just indent...", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294322364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alex-on-java": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294323578", "body": "@lucasljj I meant that we could move code left for better readability. This change doesn't affect logic of code.\r\nBut if you could propose better naming for this pr, I will be glad o hear it from you.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/294323578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dmitriyartanov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295591016", "body": "Can you give me link on Jira?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295591016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295812564", "body": "I have creating issue https://jira.spring.io/browse/SPR-15470\nWhat I have to do next?\n\n\u0447\u0442, 20 \u0430\u043f\u0440. 2017 \u0433. \u0432 12:57, St\u00e9phane Nicoll <notifications@github.com>:\n\n> https://jira.spring.io/browse/SPR\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/spring-projects/spring-framework/pull/1393#issuecomment-295602024>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AaezpmTOgMnqkVrSir2nCHjK-nZOhnWmks5rxwHNgaJpZM4NBgMS>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/295812564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gvdenbro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298561604", "body": "@snicoll I've created the following Jira ticket: https://jira.spring.io/browse/SPR-15504 ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298561604/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298648472", "body": "@rstoyanchev I've adapted the code in order to remove the regex and it uses the same style as for the x-forwarded-host. it introduces a bit of code duplication though.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298648472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "HomoEfficio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298891804", "body": "I don't understand what the first sentence exactly means:\r\n\r\n> The problem with this solution is that syntax such as `foo[bar]` or even `foo[1][bar]` indicates a map index in JavaBeans conventions where \"bar\" is the map key.\r\n\r\nBut I guess you mean, \r\n\r\n>`foo[bar]` will be ok, but `foo['bar']` or `foo[\"bar\"]` will not be ok. \r\n\r\nIf my guess is right, I will close this pull request and submit another pull request which resolves the problem above.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298891804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298958613", "body": "Oh, I don't have to close this pull request.\r\nI just amended my commit which resolved the problems above.\r\nPlease review it again.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298958613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298997110", "body": "When MVC controller resolves the arguments, `WebRequestDataBinder` is not used.\r\nInstead, `ServletRequestDataBinder` is used.\r\n\r\nAnd `ServletRequestDataBinder.bind()` executes `MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request);`, which invokes `WebUtils.getParametersStartingWith()` which returns a new Map.\r\n\r\nI added some logic inside `WebUtils.getParametersStartingWith()`.\r\n\r\nSo the test code of the `WebUtils` should be like below:\r\n```java\r\nMap<String, Object> params = new HashMap<>();\r\nparams.put(\"myMap[foo1]\", \"bar1\");\r\nparams.put(\"myMap['foo2']\", \"bar2\");\r\nparams.put(\"myMap[\\\"foo3\\\"]\", \"bar3\")\r\n\r\nMockHttpServletRequest request = new MockHttpServletRequest();\r\nrequest.setParameters(params);\r\nMap<String, Object> paramMap = WebUtils.getParametersStartingWith(request, \"\");\r\n\r\nassertEquals(\"bar1\", paramMap.get(\"myMap.foo1\"));\r\nassertEquals(\"bar2\", paramMap.get(\"myMap.foo2\"));\r\nassertEquals(\"bar3\", paramMap.get(\"myMap.foo3\"));\r\n```\r\n\r\nThis new `paramMap` is used to produce a `MutablePropertyValues` which is eventually bound to a model object by the `DataBinder`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/298997110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "daggerok": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300232429", "body": "@snicoll I created one here: https://jira.spring.io/browse/SPR-15529\r\ncan you please change label?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300232429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/116622484", "body": "@Shredder121, you are talking about URL, but not URI, which actually i'm replacing..\r\nso answering on your question: no, it wouldn't, it should collapse only URI: `///` -> `/`\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/116622484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "alexander-riss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300472740", "body": "any comments on this?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/300472740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301715490", "body": "issue created: SPR-15553 and commit updated", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301715490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pathfinder2104": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301002906", "body": "Yes sure, working on it right now. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301002906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301005335", "body": "here is the issue link: https://jira.spring.io/browse/SPR-15537", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/301005335/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "steviemo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302926533", "body": "Is there not possible NPE if subs.get(sessionId) returns null? How about:\r\n\r\nfinal LinkedMultiValueMap<String, String> subs = entry.getValue();\r\nfinal List<String> subscriptionsForSession = subs.get(sessionId);\r\nif (null == subscriptionsForSession || !subscriptionsForSession.contains(subsId)) {\r\n    subs.add(sessionId, subsId);\r\n}\r\nthis.accessCache.put(cachedDestination, subs.deepCopy());", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/302926533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Zarkopafilis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305406045", "body": "It's true that some are not such common responses and that 500 errors are\nsomething that needs to be handled a different way sometimes but\nnevertheless, wouldn't it be handy to have these extra methods?\n\nOn Thu, Jun 1, 2017, 05:21 Rossen Stoyanchev <notifications@github.com>\nwrote:\n\n> The ResponseEntity static factory methods are for common responses. This\n> PR adds many error codes that should be processed in a cross-cutting\n> fashion and should not appear in many places. If you're producing a 500\n> error code from many different places I'd say you're probably doing\n> something wrong.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/spring-projects/spring-framework/pull/1407#issuecomment-305370628>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AFL1MuhuWD0tZIQh3hGfmLDSTPqcoNg4ks5r_iArgaJpZM4NJHpz>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305406045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Enigo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305423656", "body": "@snicoll, hey, [issue](https://jira.spring.io/browse/GREENHOUSE-658) raised, but I accidentally miss-clicked the project :( Is it possible to move the issue to the Spring Framework (SPR)?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305423656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305432457", "body": "Great, thanks! [Issue](https://jira.spring.io/browse/SPR-15604) raised)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/305432457/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60829507", "body": "Thanks for reply! Updated my commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60829507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60829726", "body": "Oh, all right! Updated.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/60829726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/123605916", "body": "I'm sure you meant `Assert.notNull` :) fixed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/123605916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rbonifacio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309009933", "body": "@pivotal-issuemaster thanks for message. I've just signed the Contributor License Agreement.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309009933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tonymanou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309683203", "body": "Sorry for the delay, I just created the JIRA issue [SPR-15683](https://jira.spring.io/browse/SPR-15683)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309683203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309683990", "body": "Oh well... Seems like PR #1442 provides a fix for this issue as well.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/309683990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xhaggi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310084892", "body": "@jhoeller mind taking a look", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/310084892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22680474", "body": "We can't enable auto escaping feature of freemarker for all variable outputs because it'll escape the bind status values twice in case `defaultHtmlEscape` setting is enabled.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22680474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Tradunsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314554534", "body": ":+1: ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314554534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "solidjb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314750993", "body": "@snicoll - Created [SPR-15763](https://jira.spring.io/browse/SPR-15763)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314750993/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314939759", "body": "@jhoeller - Do you have a release target?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314939759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314939859", "body": "@jhoeller - Also, thank you for picking this up so quickly. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314939859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314940031", "body": "@jhoeller- nevermind, I see in the jira ticket. Thanks again. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/314940031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ArseniyChern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/315540958", "body": "Nice job +1 rep ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/315540958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "radarsh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317053599", "body": "Why is this issue still unresolved?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317053599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "drautb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317734221", "body": "https://github.com/spring-projects/spring-framework/commit/d7a7b08b0845da9a0ee6ebae2db2f853e77c5214.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/317734221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "anilkumarkatta204": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319671850", "body": "Closing this pull request as these changes are not required. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/319671850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tminussi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322945929", "body": "Hello.\r\nI am sure you guys have been pretty busy, but do you have any word on this?\r\nThanks,\r\n\r\nThales", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/322945929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zsoltii": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324272134", "body": "jira issue: https://jira.spring.io/browse/SPR-15892", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324272134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bbohl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324662878", "body": "[SPR-15900 ](https://jira.spring.io/browse/SPR-15900) created", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/324662878/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zzt93": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333425230", "body": "@snicoll  [Jira issue](https://jira.spring.io/browse/SPR-16032) created.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/333425230/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Iykechuks11": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/334991451", "body": "I can help solve some problems.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/334991451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "krishs09": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335059560", "body": "Retrieve", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/335059560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pablocloud": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336626514", "body": "A real case in my work place is : \r\n\r\nWe have a really big hazelcast instance that's shared among all internal apps, and it is exposed via rest.\r\nThis instance doesnt know wich types the other apps use or wich one he is going to serialize, it just receives \"objects\" and creates a cache for it.\r\n\r\nThis way we have a single cache system and one App can use data from another.\r\n\r\nWhy rest and not to use the hazelcast connector? Simple, the app doesnt even know whats on the other site, it could be a Hazelcast, Coherence, JCache, EhCache...\r\n\r\nJust thought this could be usefull for some people.\r\n\r\nHave a good day\r\n\r\nPD: if this shouldn't be here, can you tell me where to put this?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/336626514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ruslan5t": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338653977", "body": "Probably it could be closed because of same reason as https://github.com/spring-projects/spring-framework/pull/1574", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/338653977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stevenschlansker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340898784", "body": "@snicoll https://jira.spring.io/browse/SPR-16138", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/340898784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "danesavot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341576792", "body": "Any update about this PR approval? SimpleJdbcUpdate would come in handy. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341576792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jmax01": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341805979", "body": "Closing to do only on master.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341805979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341806148", "body": "Closing to redo without cherry picks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/341806148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "madgnome": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346181928", "body": "Codacy/PMD complains about missing asserts in the new tests but I followed the existing pattern in the test. is there a way to ignore?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/346181928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351833452", "body": "Thanks a lot for fixing it @poutsma, your solution is cleaner indeed!\r\n\r\nCould you double check that this use case is working?\r\n```\r\ntestTokenizeAsJsonToken(\r\n\t\t\t\tsingletonList(\"true\"),\r\n \t\t\t\tsingletonList(JsonToken.VALUE_TRUE));\r\n```", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351833452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "denis-zhdanov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350980695", "body": "Sorry, created a ticket - [SPR-16291](https://jira.spring.io/browse/SPR-16291)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/350980695/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352249029", "body": "Hi @snicoll,\r\n\r\nCould you please hint me on the usual time taken for triaging new Spring tickets?\r\n\r\nRegards, Denis", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352249029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jxblum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351197268", "body": "Closing pull request in favor of a topic branch containing the fix.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351197268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jasonbritton-wk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351472556", "body": "We could certainly make use of this improvement as well.  Just because a set of caches are managed by the same manager doesn't mean they should be forced to use the same configuration.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/351472556/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hadjiski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352042073", "body": "What is the process now, just waiting or am I missing something?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352042073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352278737", "body": "Hey, can you please create the jira ticket for me and link it to the PR, I don't have the time right now to create a jira account to the spring project. Thanks\n\n\u00a0\n\n\u00a0\n\nGesendet:\u00a0Freitag, 15. Dezember 2017 um 18:38 Uhr\nVon:\u00a0\"St\u00e9phane Nicoll\" <notifications@github.com>\nAn:\u00a0spring-projects/spring-framework <spring-framework@noreply.github.com>\nCc:\u00a0hadjiski <radi_freiburg@web.de>, Mention <mention@noreply.github.com>\nBetreff:\u00a0Re: [spring-projects/spring-framework] Enhanced MockRestResponseCreators by a withStatus with body and media type (#1608)\n\n\n@hadjiski sorry, this one got overlooked. We need a Jira issue for this change, can you please create one?\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n\u00a0", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352278737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352467599", "body": "What's the point of having other withStatus methods, but not this generic one, never mind, as u like.\n\nGesendet von meinem Windows 10 Phone\n\nVon: Rossen Stoyanchev\nGesendet: Montag, 18. Dezember 2017 15:55\nAn: spring-projects/spring-framework\nCc: hadjiski; Mention\nBetreff: Re: [spring-projects/spring-framework] Enhanced MockRestResponseCreators by a withStatus with body and media type (#1608)\n\nThe description \"Otherwise I have to...\" does not match the actual change.\nAs far as I can see the actual change creates an overloaded withStatus method that also takes body and contentType. However the expected syntax for that is withStatus(...).body(..).conentType(..). If you really want such a shortcut simply create your own static method and use it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352467599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "einarpehrson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352054314", "body": "Declining this PR since @sdeleuze pushed these changes in his commits 554662e and 73a81f9.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352054314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "snihc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352260397", "body": "***", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352260397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "iarroyo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352446089", "body": "+1", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352446089/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "adperezmorales": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352446967", "body": "I faced the same problem while using constructor injection of proxies in proxies. I sorted it out using targetName in ProxyFactoryBean instead of target referencing the bean, because changing bean order definition is not always possible. This fix can be helpful in many situations", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/352446967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "KitHat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354957561", "body": "@snicoll there is one already https://jira.spring.io/browse/SPR-16340", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/354957561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fmcejudo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362048029", "body": "Also, because there are two commits for only one file and purpose, you might want to squash them into one with rebase -i HEAD~2\r\n\r\nhttps://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362048029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156773683", "body": "this might be better being private encapsulation, as it is going to be used just in the current class. What do you think?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156773683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156776308", "body": "From my point of view, to avoid nested indentation, this might be done like `if(wrapper==null){ return null; }` and keep coding the other use cases outside of the block.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156776308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156779966", "body": "In order to make this more fluent and java 8 style, what about having this as an Optional? . so `getMessagePayload(request).ifPresent(msg.append(\";payload=\")::append)`. Just as an idea", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156779966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156782253", "body": "Does it make sense to be less or equal to zero? would it be wrapper null in that case? if so, the this condition might be removed", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156782253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156785195", "body": "This method, to work with Optional, it might have the signature\r\n `private Optional<String> getMessagePayload(HttpServletRequest request)`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156785195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156881449", "body": "alright, but in the other hand,  \"Try and leave this world a little better than you found it.\" - Robert Stephenson Smyth Baden-Powell, the father of scouting", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/156881449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165158891", "body": "might we have this as `if(variableValue == null) {  return \"\"; }`? and afterward keep evaluating the variable... so, I had in mind something like:\r\n` if(Collection.class.isAssignableFrom(variableValue.getClass())){\r\n      return ((Collection) variableValue).stream().map(Object::toString).collect(Collectors.joining(\",\"));\r\n} else {\r\n   return variableValue.toString();\r\n}`\r\n\r\nso, we are safe from a NullPointerException and avoiding nested blocks, what makes the code cleaner, and using a little bit more streams collections features. \r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#joining-java.lang.CharSequence\r\n\r\nWhat do you think?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165158891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165169091", "body": "Is this the right place to sit the exception?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165169091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165171355", "body": "In my humble opinion, this is fine as it used to be, as including a new class is adding also complexity. So, what are the advantages adding this exception class just to manage this one? But this is my opinion!!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165171355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165333661", "body": "I see what you mean, they throw more specific exception, more meaningful. I guess it is alright, let see if someone else give their opinion. So far, I don't have anything better from the top of my head!! ;) good work!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/165333661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "oalmali": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362756831", "body": "This is really needed why this PR was abandoned? Without this response body could be read only once.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362756831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "baynezy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362792895", "body": "I don't see any issue adding the new exception. It properly extends the existing exception so is backwards compatible. The code is now more descriptive of the issue.\r\n\r\nThis fixes a challenge we have, which we have had to solve with string parsing so this is a great PR in my opinion. Please approve ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/362792895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pkostrzewa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363134428", "body": "@sbrannen, improves readability. As this is my first contribution to open source I'd rather not make breaking changes for now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/issues/comments/363134428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sschulze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/529825", "body": "According to the HTML-Spec, the Content-Type can be suffixed by optional parameters. In my scenario (using ExtJs/Sencha Touch) the parameter \"charset\" is transferred. So getContentType()==\"application/x-www-form-urlencoded; charset=UTF-8\".\nI'd suggest to use \"startsWith\" instead of \"equals\".\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/529825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "stevemac007": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1420758", "body": "Why was the null check around the validator in the validate() method removed?  I can agree that to call validate() without a validator set is probably wrong, but migrating from pre spring 3.1 up here causes some wierd NPE's when calling validate().\n\nThe null check is still in place on the validate(Object... validationHints) method.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1420758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ldaley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1775436", "body": "@jeffbrown This is a more accurate model. If I understand, you have no standalone Java source in this project. It's always better to be explicit about this kind of thing and model it thoroughly than being implicit about it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1775436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ractive": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1805780", "body": "Any comments why the OSGi headers have been removed or how OSGi compatibility will be ensured?\nhttp://forum.springsource.org/showthread.php?129344-Spring-3-2-Milestone-1-and-OSGi-meta-data\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/1805780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Powerrr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2238239", "body": "Shouldn't this `if` block be moved inside the `getRawType(Type, Map<TypeVariable, Type>)` method so that other methods (such as `resolveParameterType(...)` and `resolveReturnType(...)`) could handle generic arrays too?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2238239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "graemerocher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713423", "body": "Unfortunately this commit has broken stuff in Grails as we provide our own GrailsWebRequest instance which is always being overridden by Spring due to the new instanceof check, whilst previously it was left in place. There is also no way to customize this behaviour :(\n\nAny way to make this customizable?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713608", "body": "Reported https://jira.springsource.org/browse/SPR-10342\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/2713608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043413", "body": "I don't understand this change, it makes testing the setting of the `Expires` header much more difficult surely? You now have to go to the source of `MockHttpServletResponse` and look up the private `DATE_FORMAT` variable and then construct a formatted date from the long number in order to write a test. Surely this is not an improvement?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043849", "body": "ok so `long getDateHeader(String name)` is an alternative, but it is a breaking change as `String getHeader(String name)` now returns the formatted string, I assume this has been added to some upgrade notes somewhere?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13043849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ElArabeLoco": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3302564", "body": "This breaks the form tag action in a portlet environment. In a portlet environment, the @action attribute must be kept as is, because it is usually generated by the portlet container via the portlet:actionURL/ tag, and that action does not necessarily start with the context root of the web application.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3302564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "vorko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3653375", "body": "there's a regression . see https://jira.springsource.org/browse/SPR-10752\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/3653375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nebhale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4367007", "body": "@philwebb Does the 'refine resolve() algorithm to support narrowed types' in the commit log refer to types that are narrowed like `List` -> `ArrayList` or narrowed like `List` -> `List<String>`.  If it's the latter, I don't think that it's fixed (as indicated by last night's snapshot, `20131018-023*`).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4367007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368780", "body": "Yeah.  @olivergierke and I found it the other day when I was trying to inject a copy of `PagedResourcesAssembler` as created automatically.  I was trying to autowire `PagedResourcesAssembler<Build>` and it didn't work (even though we observed the bean definition logs for the former).  I believe that he chatted with @jhoeller about it, but I'm not sure if the bug has been captured anywhere.  Suffice to say, that behavior still doesn't work today.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4368780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4369035", "body": "Whoops.  Just opened [SPR-11004](https://jira.springsource.org/browse/SPR-11004) with a simple test-case in it.  I'll make a reference between to two.  Thanks for the input @olivergierke.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4369035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "zyro23": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4451996", "body": "will this still work if a username contains a \"/\"? thanks, zyro\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4451996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4455952", "body": "tbh just wondering. give this a super low prio if any at all. but also i do not think we explicitely got usernames constrained to not include slashes... so the next user registration might be the one :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4455952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4575117", "body": "hi, what is the expected behavior of\n- @SendTo without a value if there is no destination message header?\n- @MethodMapping without a value?\n\ni think using the annotated methods name as fallback in both cases would be a sensible default?\nor is this by chance already the current behavior and i managed to miss it :) ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4575117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4579315", "body": "yup, thank you. eagerly awaiting the docs :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4579315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4771195", "body": "this import seems to have a transitive dependency on reactor. this makes it currently (spring-4.0.rc2) not possible to enable the stomp relay via messageBrokerRegistry.enableStompBrokerRelay() in a project without reactor...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4771195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4774317", "body": "https://jira.springsource.org/browse/SPR-11153\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4774317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4933879", "body": "does this invocation respect proxies? i had no luck trying to annotate a handler method with anything else than the messaging-specific annotations... im thinking of transactional behavior, method-based security, aop, etc.? thanks, zyro\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4933879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4946361", "body": "it looks like this hard-coded \"queue\" suffix for the subscription prefix makes it impossible to use a pattern like \"/user/exchange/amq.direct/...\" instead of \"/user/queue/...\".\ne.g. with rabbitmq this means to be restricted to durable, no-auto-delete queues atm?\nif someone can quickly confirm this observation, ill raise a jira.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4946361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6956398", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6956398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24751668", "body": "are the newly added `BeanDefinitionRegistryPostProcessor`s not supposed to be sorted as well?\r\n\r\nwe are having an ordering problem where one `BeanDefinitionRegistryPostProcessor` adds multiple other `BeanDefinitionRegistryPostProcessor`s. those additional ones get applied in arbitrary order (i.e. not in the order that would correspond to their `Ordered` precedence).\r\n\r\nthank you for any feedback/opinion in advance!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24751668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "katmatt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4547605", "body": "@philwebb How is this supposed to work when using JDK < 8? java.lang.annotation.repetable seems to have @Retention(RetentionPolicy.RUNTIME)... We just tried to run an example which uses @PropertySource using JDK 1.7 and it fails with a ClassNotFoundException! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4547605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "krishna-reddy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4922221", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/4922221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "btiernay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6512395", "body": "Is this now the case?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/6512395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Antibrumm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7386217", "body": "I just discovered a little bug during the initialization phase of the Jackson2ObjectMapperFactoryBean. It does not seem to have an impact on the running system finally.\n\n`getObjectType` is called before `afterPropertiesSet` thus the `ObjectMapper` can be null at this time, leading in an `InvalidArgumentException` during start up. \n\n```\n@Override\npublic Class<?> getObjectType() {\n    Assert.notNull(this.objectMapper, \"ObjectMapper must not be null\");\n    return this.objectMapper.getClass();\n}\n```\n\nThis is stated in the `getObjectType()` documentation:\n\n\"This method can be called before this FactoryBean has been fully initialized. It must not rely on state created during initialization; of course, it can still use such state if available.\"\n\n```\njava.lang.IllegalArgumentException: ObjectMapper must not be null\n   at org.springframework.util.Assert.notNull(Assert.java:112) ~[spring-core-4.1.0.BUILD-SNAPSHOT.jar:4.1.0.BUILD-SNAPSHOT]\n   at org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.getObjectType(Jackson2ObjectMapperFactoryBean.java:489) ~[spring-web-4.1.0.BUILD-SNAPSHOT.jar:4.1.0.BUILD-SNAPSHOT]\n   at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getTypeForFactoryBean(FactoryBeanRegistrySupport.java:66) ~[spring-beans-4.1.0.BUILD-SNAPSHOT.jar:4.1.0.BUILD-SNAPSHOT]\n   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:781) [spring-beans-4.1.0.BUILD-SNAPSHOT.jar:4.1.0.BUILD-SNAPSHOT]\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7386217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gdrouet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7599874", "body": "@rstoyanchev this assertion continues force the user to set at least one location\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7599874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20003539", "body": "@rstoyanchev I suspect this change to cause an error in my application. I have `RxJava` 1 in my classpath and get a `java.lang.NoClassDefFoundError: io/reactivex/Completable`. You should prefix `Completable::complete` with `rx` package to avoid `RxJava` 2 reference.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20003539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "romank0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7873493", "body": "I think this fix is incorrect as it will introduces discrepancy between database notion of rollback to savepoint and `JdbcTransactionObjectSupport` (and its clients) view of rollback to savepoint. That is this fix does not allow  replicate scenario absolutely valid in database:\n\n```\nBEGIN;\nSAVEPOINT A;\nROLLBACK TO SAVEPOINT A;\nROLLBACK TO SAVEPOINT A;\nCOMMIT;\n```\n\nI believe the correct fix is like this https://github.com/romank0/spring-framework/commit/e2b7b2af026f3dc73bd66b12b906120b1a62f05c\nThe reason I didn't create PR for this is [the bug](https://issues.apache.org/jira/browse/OPENJPA-2530) in openjpa `rollbackToSavepoint` which is used for integration tests. The bug prevents this fix from working.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7873493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "aldoluciano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7940195", "body": "Amazed at how quick this was addressed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/7940195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andrei-ivanov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8406208", "body": "typo?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8406208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21784020", "body": "Typo: implmenting", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21784020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "donnchadh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8932743", "body": "This seems like quite a significant change in behaviour. On the next call to this method most of the logic will be skipped due to the check at the beginning:\n\n``` java\n        if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {\n            return this.transactionManager;\n        }\n```\n\nI'm seeing behaviour where the qualifier seems to be ignored because of this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8932743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8946442", "body": "I've created https://jira.spring.io/browse/SPR-12541 for this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/8946442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "vbochenin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10162594", "body": "When you call getParameterMap(), Tomcat,  for example, reads parameters from InputStream, so impossible to read input stream in servlet \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10162594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10163673", "body": "https://jira.spring.io/browse/SPR-12810\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10163673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cemo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10700157", "body": "thank you @rstoyanchev \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10700157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "soudmaijer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10798168", "body": "Awesome! :thumbsup:\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10798168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tgkprog": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10936610", "body": "Cant use in cache as not serialize. Can we initialize the serialization id?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/10936610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "VladRassokhin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11747566", "body": "It's better/faster to use `systemId.indexOf(DTD_NAME, lastPathSeparator);`\nThis would prevent incorrect behaviour on next line if systemId would be 'http://something/spring-beans/dtd/spring-beans.dtd'\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11747566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "and1kaney": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11765397", "body": "if setDontSetAutoCommitFalse(true), quartz run with non transactional\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11765397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "brbsk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11954609", "body": "Hi,\nis `beforeTestClass` method intended to close a test ApplicationContext before a given test class without opening a new context for this test class?\nBest regards,\nB.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11954609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955152", "body": "You're welcome, and thank you very much for your answer :)\n\nI've asked this question because actually I am facing a little problem with this at the moment. I have a test class annotated as follows:\n`@TestExecutionListeners({CustomDirtiesContextTestExecutionListener.class})`\n`@SpringApplicationConfiguration(classes = Application.class, initializers = TestProfileInitializer.class)`\nMy `CustomDirtiesContextTestExecutionListener` extends `DirtiesContextTestExecutionListener` and implements `beforeTestClass` method in exactly the same way as `DirtiesContextTestExecutionListener`'s \n`afterTestClass` does. However during the test execution the context is only being closed without a new context being created.\n\nI am afraid that there might be no point in closing a context before the test without providing it a new one. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955342", "body": "Yes, I got this to work. Thanks a lot! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955380", "body": "I simply added the `DependencyInjectionTestExecutionListener` than you've mentioned to my `@TestExecutionListeners({CustomDirtiesContextTestExecutionListener.class, DependencyInjectionTestExecutionListener.class})` ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955722", "body": "4.1.6.RELEASE\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11955722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11959940", "body": "You're welcome, I'm glad I could help :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/11959940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gedankennebel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12269718", "body": "nice one !! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12269718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "winterbe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12326190", "body": "As a side note: There's a nasty nashorn bug when sharing ScriptEngines upon different threads even if the evaluated scripts are thread safe: \n\nhttps://bugs.openjdk.java.net/browse/JDK-8075006\n\nThis bug can easily destroy your servers thread pool as I had to experience lately. ;)\n\nIt's fixed for 8u60. I wouldn't recommend to use a shared ScriptEngine prior to this fix. \n\nI fixed this issue by using a pool of engines (instead of thread-locals). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12326190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hpham": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12906857", "body": "Hi J\u00fcrgen,\n\n@Transactional(propagation = Propagation.SUPPORTS, isolation = Isolation.REPEATABLE_READ, readOnly = true)\n\nif you have this transactional configuration, you would also get the warning, although you do not need a transaction. Is this correct?\n\nHanh\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/12906857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "EternalSpring": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13464228", "body": "perfect !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13464228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "greg-pendlebury": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13506676", "body": "I think this line has introduced a bug discussed here: http://stackoverflow.com/questions/32612027/spring-4-web-java-lang-illegalargumentexception-no-matching-constant-for-0\n\nThe status code is being tested before it is set sometimes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/13506676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cnsgithub": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14410357", "body": "Hi, This (or a related commit) seems to have severe impact on Spring deployments on Wildfly. ClassNotFoundExceptions found all over the place. With 4.2.2 everything worked fine. Please take a look. I'm copying the root exception here.\n\nIt seems that the spring module wants to directly access classes of the deployment (*.ear). I don't think this should be the case, as the modules should be strictly separated and shouldnt have a dependency on the deployment, whereas the deployment can have dependency to spring\n\n```\nCaused by: java.lang.RuntimeException: java.lang.ClassNotFoundException: ,mypackage.ApplicationException from [Module \"org.springframework:main\" from local module loader @6321e813 (finder: local module finder @79be0360 (roots: C:\\server\\WildFly\\wildfly-9.0.1.Final\\modules,C:\\server\\WildFly\\wildfly-9.0.1.Final\\modules\\system\\layers\\base))]\n    at org.springframework.asm.ClassWriter.getCommonSuperClass(ClassWriter.java:1684)\n    at org.springframework.asm.ClassWriter.getMergedType(ClassWriter.java:1654)\n    at org.springframework.asm.Frame.merge(Frame.java:1426)\n    at org.springframework.asm.Frame.merge(Frame.java:1337)\n    at org.springframework.asm.MethodWriter.visitMaxs(MethodWriter.java:1475)\n    at org.springframework.cglib.core.CodeEmitter.visitMaxs(CodeEmitter.java:842)\n    at org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer$1.visitMaxs(UndeclaredThrowableTransformer.java:56)\n    at org.springframework.cglib.core.CodeEmitter.visitMaxs(CodeEmitter.java:842)\n    at org.springframework.cglib.core.CodeEmitter.end_method(CodeEmitter.java:138)\n    at org.springframework.cglib.proxy.MethodInterceptorGenerator.generate(MethodInterceptorGenerator.java:131)\n    at org.springfr\n```\n\njboss-deployment-structure.xml\ncontains dependency: <module name=\"org.springframework\" meta-inf=\"export\" export=\"true\"/>\n\nspring module.xml\n\n```\n<module xmlns=\"urn:jboss:module:1.1\" name=\"org.springframework\">\n    <resources>\n        <resource-root path=\"aopalliance-1.0.jar\"/>\n        <resource-root path=\"aspectjrt-1.8.7.jar\"/>\n        <resource-root path=\"aspectjweaver-1.8.7.jar\"/>\n        <resource-root path=\"spring-aop-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-aspects-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-beans-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-context-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-context-support-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-core-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-expression-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-instrument-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-instrument-tomcat-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-jdbc-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-jms-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-messaging-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-orm-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-oxm-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-test-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-tx-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-web-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-webmvc-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-webmvc-portlet-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-websocket-4.2.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-security-config-4.0.3.RELEASE.jar\"/>\n        <resource-root path=\"spring-security-core-4.0.3.RELEASE.jar\"/>  \n        <resource-root path=\"spring-security-web-4.0.3.RELEASE.jar\"/>\n    </resources>\n    <dependencies>  \n        <module name=\"javax.api\"/>\n        <module name=\"javax.annotation.api\"/>\n        <module name=\"javax.el.api\"/>\n        <module name=\"javax.enterprise.api\"/>\n        <module name=\"javax.ejb.api\"/>\n        <module name=\"javax.faces.api\"/>\n        <module name=\"javax.interceptor.api\"/>\n        <module name=\"javax.persistence.api\"/>\n        <module name=\"javax.servlet.api\"/>\n        <module name=\"javax.jms.api\"/>\n        <module name=\"javax.servlet.jsp.api\"/>\n        <module name=\"javax.transaction.api\"/>\n        <module name=\"org.hibernate\"/>      \n        <module name=\"org.apache.commons.lang\"/>\n        <module name=\"org.apache.commons.logging\"/>  \n        <module name=\"org.jboss.vfs\"/>\n        <module name=\"org.quartz\"/>\n     </dependencies>  \n</module>\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14410357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14416053", "body": "I dont know why but issue creation seems to be disabled on github? maybe i dont have rights? Please just copy+paste this into the appropriate place, its faster than having me to figure out how to do it..\n\nBy the way i know the reason why it happens as well now. Since WildFly has multiple classloaders (per module) the getClass().getClassLoader() call below is causing an exception as it will try to use the spring module classloader for any package name (passed as string). My suggestion would be to pass the ClassLoader of the *.ear / deployment where the Spring Beans are loaded to make it compatible again with Wildfly 9\n\n```\npublic class ClassWriter extends ClassVisitor {  ....\n\n protected String getCommonSuperClass(final String type1, final String type2) {\n        Class<?> c, d;\n        ClassLoader classLoader = getClass().getClassLoader();\n        try {\n            c = Class.forName(type1.replace('/', '.'), false, classLoader);\n            d = Class.forName(type2.replace('/', '.'), false, classLoader);\n        } catch (Exception e) {\n            throw new RuntimeException(e.toString());\n        }\n        if (c.isAs\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14416053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "briandilley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14635373", "body": "what was this removed?\n\nAlso, current implementation returns a doubly url encded url when calling getUR() (for Servlet impl)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14635373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Hinsteny": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14648225", "body": "Now that the Log4jConfigurer  is Deprecated . What should be used for log4j of log4j2 ?\n\nthanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14648225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "PascalSchumacher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14965679", "body": "should be \"reasonably\" I guess\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/14965679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/26986181", "body": "Nitpick: With cglib 3.2.6 this comment is no longer accurate as 3.2.6 uses asm 6.0.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/26986181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/53564001", "body": "I guess this should be 4.3?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/53564001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "40lsgy1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15640111", "body": "When I want to cache data in ServletInputStream, I find ContentCachingRequestWrapper in Spring. Thank you and your code. But I do not understand is it ok that cachedContent is never closed in your code? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15640111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "libetl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15907865", "body": "Thank you for your help,\nRegards,\nLionel. (Reporter of SPR-13917)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15907865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ngbalk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15962794", "body": "Was this commit intended to resolve CVE-2013-6430?\nhttp://pivotal.io/security/cve-2013-6430\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/15962794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tzvatot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16033518", "body": "what version of spring 4.2.x will the fix be included in?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16033518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "juanmf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16668229", "body": "In LocalVariableTableParameterNameDiscoverer.java#getParameterNames(Method m)\nI think returning null is a bad Idea. It's probably the reason why we are getting null pointer exception. Maybe an empty String[] would be a better implementation of the API.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16668229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ElomAtsouAgboka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16920527", "body": "Hi, I am relatively new on Spring. I have just two years of experience. I am reading the code and I have some gap that I will like someone to help me with it. `Configuration<?> configuration` declaration has been used. I can't see anywhere on the page which package this Configuration<?> element belongs to. Maybe I am not using Github well. Someone help.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16920527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "zhwwashere": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16928862", "body": "cool\uff01\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16928862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "junwchina": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16968759", "body": "Hello, When will you release this feature to a release version?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16968759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16982883", "body": "Got it. Thanks :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/16982883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "aalmazzo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17057904", "body": "We are using AppDynamics in our production system and we had an outage because this APM started sending a header with an empty value \"singularity\", \"\".\n\nHopefully this can be addressed by Spring promptly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17057904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "klaus-sap": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17398673", "body": "In sql-error-codes.xml, could you add \"HDB\" as databaseProductName? This is the name which you get from the Hana JDBC driver.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17398673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kibertoad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17743325", "body": "Any chance for a new RC with this change in the nearby future? Otherwise new Hibernate is unusable with Spring, and we'd rather avoid using snapshot builds.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17743325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17743486", "body": "Great news! Thank you, will wait for that then.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/17743486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "zjunothing": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18184507", "body": "good work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18184507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "php-coder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18211365", "body": "@bclozel You forgot to update setter after changing the default value: https://github.com/spring-projects/spring-framework/blob/3ce49819f2f7a425ecc05c1f50a7fac296fc051d/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java#L133-L139\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18211365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "chenrui333": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18673365", "body": "can we add `@since 4.0` for this API? Just a thought.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18673365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18688248", "body": "Cool, thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18688248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Fireflyever": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18943330", "body": "Hi Snicoll, \n\nCould I know why there is no protection for duplicate register TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME under registerTransactionalEventListenerFactory?\n\nI can see like other method: registerTransactionAspect and configureAutoProxyCreator, there has protection for duplicate bean registration.\n\nMany Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/18943330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "maksymkovalenko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19150333", "body": "What's not clear is how to control HTTP status code when `Observable` (or `Single`) returns error. For example, depending on the error, I might want to return specific error code (and maybe body). Even in success case, I might want to return `200` or `204`.\nTest does not demonstrate this, what's the recipe?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19150333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19151641", "body": "Isn't `@ExceptionHandler` for sync methods only? And for async results like `Observable`, is it really applicable?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19151641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tangleiao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19374529", "body": "optional(\"javax.faces:javax.faces-api:2.2\")\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19374529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mjustin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19596225", "body": "409 is Conflict; 412 is Precondition Failed: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes .  That said, the code seems to be correct; it's just the documentation that has this error.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19596225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "joshlandin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19852854", "body": "It's worth noting that this change to org.springframework.util.CollectionUtils.mergePropertiesIntoMap() has the potential to break users that are using PropertyPlaceholderConfigurer with their own Properties instance plugged-in overriding getProperty(String). Given the above change, their override will never be called for properties merged into the placeholder configurer. Their workaround is to also override Hashtable.get(Object) in their custom class.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19852854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "javase": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19996008", "body": "I want to get a list about what's new in spring 5.x, where can I get the list ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/19996008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hazendaz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20203778", "body": "@kazuki43zoo I got caught by this too in psi-probe.  I'm still stumbling my way through learning spring.  I have a fix in place but know there is a better way.  Please share solution you use with handler method when you get a chance ;)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20203778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gjd6640": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20276425", "body": "This change may have introduced a bug. I'm writing up the details in a Jira ticket now and will link to that here in a bit.\r\n\r\nIt appears that you simplified the code in this class by moving the SimpleMessageConverter initialization to the top. This enabled removal of a method and a constructor. However, the side-effect of this change is that classes that extend MessageListenerAdapter or this class and rely on _their_ implementation of \"initDefaultStrategies()\" being invoked at time of construction no longer get that behavior. The result is a break in compatibility between Spring 4.1.0+ and versions prior to it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20276425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dl1ely": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20282870", "body": "Line https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java#L265 does not allow to escape from the own ContextPath without constructing an absolute URL. We are running behind the Zuul reverse proxy and need to redirect from a login service to some startpage service which are on the same port seen from the outside. Using `response.sendRedirect(\"/start/\")` would redirect to `http://server:port/start/` before, now it redirects to `http://server:port/RedirectSenderContextPath/start/`. Is this expected behaviour?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20282870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "CallMeLingMin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20327774", "body": "\u636e\u54c8\u5e02\u98ce\u53e3\u6d6a\u5c16\u4e0a\u7684\u770b\u6cd5\u4e86", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20327774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nestabur": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20661979", "body": "What would be the expectation if the value is added twice? is the value duplicated?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20661979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662055", "body": "is there no test covering this scenario?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662083", "body": "Thx for the clarification ;)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662403", "body": "But it is not covering the addition of headers when there are existing headers added by the factory, isn't it?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20662403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rajadilipkolli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20676343", "body": "@jhoeller Just Asking if we can consider using Objects.requireNonNull(obj, message) instead of Assert.notNull ? I know using Assert.notNull is common practice across Spring Framework", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20676343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20676488", "body": "Agreed", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20676488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/173407237", "body": "I would prefer to use TimeUnit.SECONDS.sleep(startupDelay); If you are ok with this suggestion I will submit PR", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/173407237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/173415368", "body": "@igor-suhorukov Updated comment and this should be fine now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/173415368/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "yluhadiya7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20990323", "body": "@philwebb This change is missing in 4.1.9 release. Can you please confirm if its no more needed in 4.1.9. We are using 4.1.9 and facing issues similar to SPR-11394 in our production environment. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20990323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20992271", "body": "@snicoll Absolutely will follow proper mediums to discuss issues. I will raise issue on tracker with all possible details. \r\nThanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/20992271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sucg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21032188", "body": "Hi, Why override removeEldestEntry() method? \r\nThe CacheLimit default value is 1024,we have a problem.\r\nFirstly, we connected 5000 clients, and sended 5000 message for each client. All 5000 clients received msg.\r\nSecondly, we disconnected the 5000 clients, and reconnected 5000 clients again.\r\nFinally, we also sended 5000 messages for each client, only 1024 clients received msg. we want that all 5000 clients can receive message.\r\n\r\nThanks~\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21032188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "herau": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21654255", "body": "causing issue in Spring boot 2.0.0-SNAPSHOT \r\n\r\n`spring-boot/spring-boot/src/test/java/org/springframework/boot/logging/java/JavaLoggingSystemTests.java:[67,17] cannot find symbol [ERROR] symbol: class Jdk14Logger`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21654255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mgerlach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21706845", "body": "Hi @jhoeller removal of this method broke org/springframework/data/spring-data-commons/2.0.0.BUILD-SNAPSHOT/spring-data-commons-2.0.0.BUILD-20170410.151338-20.jar!/org/springframework/data/util/ClassTypeInformation where it is called in line 129 --- I am aware of the deprecation, any hints on how to replace the call?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21706845/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21707290", "body": "@olivergierke already created https://jira.spring.io/browse/SPR-15429 ... ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21707290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "seckinozden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21821296", "body": "It seems like this assert gonna fail every time.  \"?key=value\" string is concatenated at the end of the RequestURL, but the base string which is used to compare the RequestURL does not have that part. Is this implemented on this way on purpose, or is this a detail that is unnoticed?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/21821296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "D-Lover": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22027161", "body": "Refactor \uff1f", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22027161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "diy19901030": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22528716", "body": "@jhoeller hello~ when I compiler the spring-web, always have the error ,As following: org.springframework.http.client.reactive.AbstractClientHttpRequest.doCommit(Supplier<? extends Mono<Void>>){\r\n...\r\nList<? extends Mono<Void>> actions = this.commitActions.stream()\r\n\t\t\t\t.map(Supplier::get).collect(Collectors.toList()); \r\n// Here give the error message :\"Error: incompatible types: type inference is not in conformity with the ceiling\"\r\n}\r\nCan you give me some sugestion? Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22528716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jpushpendradolphin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22971842", "body": "good one", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/22971842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "usulkies": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23050302", "body": "When running jdeps -jdkinternals  on the spring-jdbc-3.2.18.RELEASE.jar it gives a warning that it uses JDK Internal API: com.sun.rowset.CachedRowSetImpl which will not be supported in future java versions. It suggests to replace it with javax.sql.rowset.RowSetProvider", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23050302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sbuettner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23433365", "body": "Curious whether it would be possible to use a constant for `new byte[0]` like for the headers with ` HttpHeaders.EMPTY` instead of creating a new object each time?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23433365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23434568", "body": "@poutsma Thank you for the detailed response (no pun intended). \r\n\r\nI thought it could help when testing for empty responses but I guess thats more of a side issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23434568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "perceptron8": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23462283", "body": "NPE?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23462283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23464325", "body": "@rstoyanchev How about functionally equivalent, null-safe* replacement?\r\n\r\n```\r\npublic static final Comparator<PathPattern> SPECIFICITY_COMPARATOR = Comparator.nullsLast(\r\n\tComparator.<PathPattern>\r\n\t\tcomparingInt(p -> p.isCatchAll() ? 1 : 0)\r\n\t\t.thenComparingInt(p -> p.isCatchAll() ? p.getNormalizedLength() : p.getScore())\r\n\t\t.thenComparingInt(p -> p.isCatchAll() ? p.getScore() : p.getNormalizedLength())\r\n\t);\r\n```\r\n\r\n* is it really necessary?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23464325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23630374", "body": "That's nice :) What about https://github.com/spring-projects/spring-framework/commit/08dfce2cb551aeb660502fd48a20abe7a8c82226#commitcomment-23464325?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23630374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23631703", "body": "@rstoyanchev Still NPE? Once again - please, take a look at https://github.com/spring-projects/spring-framework/commit/08dfce2cb551aeb660502fd48a20abe7a8c82226#commitcomment-23464325\r\n\r\nAlso, you should probably rewrite your test to be more direct:\r\n\r\n```\r\nassertTrue(SPECIFICITY_COMPARATOR.compare(null, null) == 0);\r\nassertTrue(SPECIFICITY_COMPARATOR.compare(parse(\"/non-null\"), null) < 0);\r\nassertTrue(SPECIFICITY_COMPARATOR.compare(null, parse(\"/non-null\")) > 0); // here's your NPE!\r\nassertTrue(SPECIFICITY_COMPARATOR.compare(parse(\"/non-null\"), parse(\"/non-null\")) == 0);\r\nassertTrue(SPECIFICITY_COMPARATOR.compare(parse(\"/hotels/*\"), parse(\"/hotels/**\")) < 0);\r\n// and so on...\r\n```\r\n\r\nYou don't need to sort a collection.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23631703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23635890", "body": "This is really minor, but...\r\n1. `.thenComparingInt(PathPattern::getScore)` could be used to eliminate boxing,\r\n2. `-x` performs better than `-1 * x` (negation is cheaper than multiplication).\r\n\r\n... and thanks for positive feedback ;)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23635890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jjzazuet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23784157", "body": "Nice! This helped me correct incorrect content payloads sent by Android 7's `WebSocket` implementation. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/23784157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wuyuyan2256": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24188233", "body": "I am sorry, above description is wrong. It's correct in the following,\r\nwhen we set \"localeResolver\" to realize the i18n dynamic switching, if we access to the jsp page directly, it's invalid.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24188233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "voidc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24646940", "body": "Hi, I am curious why you cast the Throwable Mono here. This causes a ClassCastException for me, whereas the method [bodyToMono(Class<T>)](#diff-0b2f3488b6ba2af28d0422a4123e9e5bR417) above shows the correct behavior. Could you please explain this decision?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24646940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24647023", "body": "Hi, I am curious why you cast the Throwable Mono here. This causes a ClassCastException for me, whereas the method [bodyToMono(Class)](#diff-0b2f3488b6ba2af28d0422a4123e9e5bR413) above shows the correct behavior. Could you please explain this decision?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24647023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24647455", "body": "Fixed in https://jira.spring.io/browse/SPR-16025", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/24647455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dgrahn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25339405", "body": "With this commit, how can `/{*path}` style URI matching be used?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25339405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25352927", "body": "Thanks. I'm going to point this out to the Baeldung article.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/25352927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "zshamrock": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27315105", "body": "Nice!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27315105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gitcodex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27319571", "body": "hi,\r\nThe following does in fact work  `<beans profile=\"p1,!p2\">`.\r\nBut, this does not work  `<beans profile=\"!p1,!p2\">`\r\nInterestingly, this works ` <beans profile=\"[{!p1},{!p2}]\">`\r\n\r\nI've checked in spring 3.2.x + and also in 5.0.0.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/27319571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "IronWong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/28027789", "body": "I have a web application in which I use Spring framework, when I did a security analysis with Acunetix, I got several errors, among them the Directory Traversal.\r\n\r\nThis is Acunetix's remediation:\r\nUsers of affected Spring versions should upgrade to the latest version:\r\nUsers of 3.2.x should upgrade to 3.2.12 or later\r\nUsers of 4.0.x should upgrade to 4.0.8 or later\r\nUsers of 4.1.x should upgrade to 4.1.2 or later\r\n\r\nThe version of Spring that I was using was 4.2.4, the recommendation was to update to the last release of the version used, in this case it would be 4.2.9, I made the change of version and ran the Acunetix software again but it keeps on taking me out the same problem.\r\n\r\nHow can i fix this problem?Thanks in advance.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/comments/28027789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "caesar-ralf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/5893779", "body": "this else is not really necessary because of the return introduced above\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/5893779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/5894300", "body": "ow, well. It's more a cosmetic review than really necessary. Up to you :) \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/5894300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kaustubhkeshav": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/8169234", "body": "Hi, I was trying to implement a custom patch for this solution on my own. That's when I saw that you guys were already working on this. If you throw an exception when getBody is called, then how will the body be flushed to the stream?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/8169234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "dreambrother": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33253565", "body": "+1\nI've tested FormHttpMessageConverter and it is broken for HttpComponentsClientHttpRequestFactory with setBufferRequestBody set to false\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33253565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33254509", "body": "It's already created\nhttps://jira.spring.io/browse/SPR-11199\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/33254509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "johnktims": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/36435726", "body": "Evaluate*\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/36435726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/36435753", "body": "Evaluate\\* \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/36435753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nithril": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/39945570", "body": "> @CrossOrigin is a meta-annotation in this context.\n\nThis is the meaning of the annotation name. Is `CrossOriginSetAsMetaAnnotation` better ? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/39945570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/40059461", "body": "Thanks for the link!\nDo you expect a new commit or as you take the issue on JIRA, are you correcting the issue on your own?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/40059461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "brunokrebs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/61824026", "body": "So why haven't you changed this one as well?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/61824026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "a-derevyanko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73420957", "body": "You can create HashSet from Arrays.asList(array1) (the \"result\" list is not required). \n\nBut this way is not clear. I see an easier way:\n/*\nSet<String> result = new LinkedHashSet<>();\nCollections.addAll(result, array1);\nCollections.addAll(result, array2);\n*/\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73420957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73504774", "body": "It is a Set. Not List.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73504774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73513322", "body": "Sorry, you was right. But HashSet wrapping looks like overengineering (original result.addAll(Arrays.asList(array1)) too :), can be replaced with Collections.addAll()). Have you tested, how your improvement works on large String arrays? How much faster your proposal than the original?\n\n---\n\nBut you did the same mistake like me) If second array contains duplicate items, you put to  \"result\" _both_ of duplicates (because your stringSet dont know about new items in result).  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/73513322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "guonudt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76528913", "body": "I think it should be\n `charsToDelete.indexOf(str.charAt(i)) == -1` \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/76528913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "wangrangzhi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/89449833", "body": "Why two \"the\"?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/89449833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mymvsy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/92757487", "body": "good", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/92757487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "284831721": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/106101033", "body": "gr8 job", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/106101033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/106101383", "body": "nice!  is a ----> has a ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/106101383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "AlexanderHagenhoff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/23892634", "body": "The placeholder `%s` is not used.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/23892634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "luyuanwan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/117632552", "body": "\u5728\u8fd9\u91cc\u52a0\u4e86\u4e00\u4e2a\u5224\u65ad\uff0c\u8868\u793a\u6ca1\u770b\u61c2\u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e2a\u5224\u65ad", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/117632552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/117882873", "body": "I think function squashSlashes should move to some tool utility class. :)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/117882873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "liuxipeng": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121274837", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/121274837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "deodeveloper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/123520716", "body": "Using standard way of spring exceptions being thrown by using org.springframework.util.Assert\r\nHow about ```Assert.isNull(expression, \"Cron expression cannot be null!\")``` ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/123520716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "shorn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/125210309", "body": "I'm not going to get to this any time soon - feel free to reject or do own fix.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/125210309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "ooooow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/139633460", "body": "org.springframework.web.client.RestClientException: Could not extract response: no suitable HttpMessageConverter found for response type [interface org.springframework.core.io.InputStreamSource] and content type [application/octet-stream]\r\nI need custom HttpMessageConverter ?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/139633460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "simonbasle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/150904415", "body": "@marcingrzejszczak note the `exchange()` is still valid but then the example should use `flatMap(response -> ...)` rather than `then` (change from Reactor 3.1.0.RELEASE)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/150904415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "marcingrzejszczak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/150904806", "body": "yeah, it's actually written later in the javadocs. I guess in this example we want the simplest case so I've picked the `retrieve` one. Does it make sense or should I change it?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/150904806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "tomsquest": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/66208284", "body": "typo `configuaration` -> `configuration`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-framework/pulls/comments/66208284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}