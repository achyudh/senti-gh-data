{"_default": {"1": {"tkanov": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/100", "title": "Net::LDAP.new deprecation warning", "body": "When `encryption` parameter is passed as String to Net::LDAP.new\r\n\r\n```\r\nldap_options = {\r\n  ...\r\n  encryption: 'ssl',\r\n}\r\nldap = GitHub::Ldap.new ldap_options\r\n```\r\n\r\nit produces the following [deprecation warning](https://github.com/ruby-ldap/ruby-net-ldap/blob/78e97ed69dc9ebbf06b04e7e70ceb046c23de75c/lib/net/ldap.rb#L622)\r\n`Deprecation warning:  please give :encryption option as a Hash to Net::LDAP.new`\r\n\r\nAt [present](https://github.com/ruby-ldap/ruby-net-ldap/blob/78e97ed69dc9ebbf06b04e7e70ceb046c23de75c/lib/net/ldap.rb#L483), the `encryption` value must be a Hash with parameters, which consists of two keys:\r\n`method:` - `:simple_tls` or `:start_tls`\r\n`tls_options:` - Hash of options for that method", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/99", "title": "Fix for deprecation warning: please give :encryption option as a Hash\u2026", "body": "\u2026 to Net::LDAP.new", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "doublemarket": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/98", "title": "Add support for handling Active Directory member attribute with Range suffix", "body": "[Depending on a `MaxValRange` setting on an Active Directory server](https://support.microsoft.com/ja-jp/kb/2009267), the server can return the `member;Range=[low]-[high]` (e.g. `member;Range=0-1499`) attribute including certain number of users instead of the `member` attribute including all users when a number of users in a group exceeds the `MaxValRange` value.\n\nSince the filters in the [lib/github/ldap/filter.rb](https://github.com/github/github-ldap/blob/b75ef743fd68c8df51194a56a44db5c009831261/lib/github/ldap/filter.rb#L9) don't care the `member` attribute with the `Range` suffix, no users can be found.\n\nThe filter should be able to handle the `member` attribute with the `Range` suffix and also it needs to support pagination if the `Range` suffix exists.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/98/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davesims": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/90", "title": "`rake` and `rake test` fails ", "body": "Running `rake` or `rake test` fails with the following (with and without `bundle exec`):\n\n``` sh\n\u279c  github-ldap git:(feature/multi_domain) rake\n/Users/davesims/github/github-ldap/test/test_helper.rb:20:in `<top (required)>': undefined method `after_run' for MiniTest:Module (NoMethodError)\n        from /Users/davesims/github/github-ldap/test/domain_test.rb:1:in `require_relative'\n        from /Users/davesims/github/github-ldap/test/domain_test.rb:1:in `<top (required)>'\n        from /Users/davesims/github/github/vendor/ruby/11323111113067d8fc579071c01d83e9f161adc4/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n        from /Users/davesims/github/github/vendor/ruby/11323111113067d8fc579071c01d83e9f161adc4/lib/ruby/2.1.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:10:in `block (2 levels) in <main>'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:9:in `each'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:9:in `block in <main>'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:4:in `select'\n        from /Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:4:in `<main>'\nrake aborted!\nCommand failed with status (1): [ruby -I\"lib:test\" -I\"/Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib\" \"/Users/davesims/github/github/vendor/gems/2.1.7/bundler/../ruby/2.1.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb\" \"test/**/*_test.rb\" ]\n\nTasks: TOP => default => test\n(See full trace by running task with --trace)\n```\n\nWorkaround is to run test files directly through ruby & bundler\n\n``` sh\n\u279c  github-ldap git:(feature/multi_domain) bundle exec ruby -Ilib:test test/**/*_test.rb\nRun options: --seed 6062\n\n# Running:\n\n....................................................\n\nFinished in 3.112345s, 16.7077 runs/s, 23.4550 assertions/s.\n\n52 runs, 73 assertions, 0 failures, 0 errors, 0 skips\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/90/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mtodd": {"issues": [{"url": "https://api.github.com/repos/github/github-ldap/issues/86", "title": "Connection required on initialization", "body": "When instantiating a `GitHub::Ldap` object, a connection is established and query performed to determine the server's capabilities which are used to configure the appropriate membership search strategies.\n\nI'd like to avoid having to connect and query on object instantiation and only perform the query when it's absolutely needed.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/86/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/e7de8e7e45350fb2a784269d81ac905b66319edc", "message": "Setup test hosts for connection caching"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/2b8005820670574b9d4d03381d8c808c9fff04c4", "message": "Rename mock_connection to ldap\n\nStylistic preference to be more consistent with other tests."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/64c6e08eade8c609337aad8f76f3428a699e7576", "message": "Configure connection with GitHub::Ldap::Test#options\n\nAlso use that port value, as it changes depending on the integration test\nLDAP server in use."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/142e3fd273b2d8ecb59e0127109647aa5b6eab85", "message": "Test Ruby 2.0"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35576269", "body": "@calavera :shipit: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35576269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35925178", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35925178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37227973", "body": ":metal:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37227973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37241784", "body": "Change looks good!\n\nWondering if we should open this up further to customization instead of maintaining a hardcoded list of names (in a followup pull).\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37241784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38329924", "body": ":sparkles:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38329924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49687020", "body": "@mcolyer I haven't. Tests aren't working, and this doesn't really do anything until you subscribe to the events that the instrumentation service will emit when in use.\n\n@rtomayko :ok_hand: happy to hear more of what you were thinking. I'm basing this off of https://github.com/jch/html-pipeline/pull/45 somewhat since it's been super helpful in making the HTML pipeline's internal workings visible for external logging et al.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49687020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/github/github-ldap/comments/8163055", "body": "@jch some background:\n\nIn every operation at the `Net::LDAP` level (like `Net::LDAP#search`), there's a check for an `@open_connection`:\nhttps://github.com/ruby-ldap/ruby-net-ldap/blob/5a63639554fa092001dc5eb46f034dcff655af89/lib/net/ldap.rb#L657\n\nIf there's not one, it'll open a new connection, bind (implicitly), and then perform the operation.\n\nIn order for an `@open_connection` to exist, the operation has to be called inside the `Net::LDAP#open` block, which opens a connection, binds (implicitly), and yields itself still open.\n\nSo that's the basics. When there's an open connection that is shared, it uses the same socket for every search/operation performed in serial, without problem, since it has to wait for the previous operation to finish entirely before it can start sending more shit at the server.\n\nThe problem comes in when, with a shared connection, one search is performed while another is in the midst of returning results.\n\nTo break this down further, when we search with an `@open_connection`, we `write` to the socket and then we read, repeatedly, until we get a `SearchResultDone` message. Until then, we can get `SearchResultEntry` or `SearchResultReference` messages which are the entries (and references) we're searching for ([4.1.1](http://tools.ietf.org/html/rfc4511#section-4.1.1), [4.5.2](http://tools.ietf.org/html/rfc4511#section-4.5.2));\nhttps://github.com/ruby-ldap/ruby-net-ldap/blob/5a63639554fa092001dc5eb46f034dcff655af89/lib/net/ldap/connection.rb#L402-L429\n\nNote that `search{ |entry| ... }` is called when we get a `SearchReturnedData` message, not when all of the entries have finished transmitting to us, so the server might still be in the process of transmitting results, so...\n\nWhat happens if we `write` a new search query when a previous search's results are still being transmitted? What _should_ we do, in that situation, when we're sharing a connection? Should we explode? Should we [Abandon Operation](http://tools.ietf.org/html/rfc4511#section-4.11)? Should that be configurable? Are servers capable of handling multiple concurrent queries over the same socket, and we're just mishandling it on the client side?\n\nI want to be able to use `Net::LDAP#open`, and we can do that today so long as we guarantee that we aren't calling `Net::LDAP#search` inside a `Net::LDAP#search{ |entry| ... }` block.\n\n---\n\nFor the record, here's the relevant output from the failing test:\n\n```\n{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>\n  [\"uid=user6,ou=People,dc=github,dc=com\",\n   \"uid=user7,ou=People,dc=github,dc=com\",\n   \"uid=user8,ou=People,dc=github,dc=com\",\n   \"uid=user9,ou=People,dc=github,dc=com\",\n   \"uid=user10,ou=People,dc=github,dc=com\"],\n \"cn=nested-group1,ou=Groups,dc=github,dc=com\"=>\n  [\"uid=user1,ou=People,dc=github,dc=com\",\n   \"uid=user2,ou=People,dc=github,dc=com\",\n   \"uid=user3,ou=People,dc=github,dc=com\",\n   \"uid=user4,ou=People,dc=github,dc=com\",\n   \"uid=user5,ou=People,dc=github,dc=com\"]}\n******\n{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>\n  [\"cn=nested-group1,ou=Groups,dc=github,dc=com\",\n   \"uid=user6,ou=People,dc=github,dc=com\",\n   \"uid=user7,ou=People,dc=github,dc=com\",\n   \"uid=user8,ou=People,dc=github,dc=com\",\n   \"uid=user9,ou=People,dc=github,dc=com\"],\n \"uid=user10,ou=People,dc=github,dc=com\"=>[]}\n\n  1) Failure:\nGitHubLdapOpenTest#test_open_with_subsearches [test/domain_test.rb:296]:\n--- expected\n+++ actual\n@@ -1 +1 @@\n-{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>[\"uid=user6,ou=People,dc=github,dc=com\", \"uid=user7,ou=People,dc=github,dc=com\", \"uid=user8,ou=People,dc=github,dc=com\", \"uid=user9,ou=People,dc=github,dc=com\", \"uid=user10,ou=People,dc=github,dc=com\"], \"cn=nested-group1,ou=Groups,dc=github,dc=com\"=>[\"uid=user1,ou=People,dc=github,dc=com\", \"uid=user2,ou=People,dc=github,dc=com\", \"uid=user3,ou=People,dc=github,dc=com\", \"uid=user4,ou=People,dc=github,dc=com\", \"uid=user5,ou=People,dc=github,dc=com\"]}\n+{\"cn=nested-group2,ou=Groups,dc=github,dc=com\"=>[\"cn=nested-group1,ou=Groups,dc=github,dc=com\", \"uid=user6,ou=People,dc=github,dc=com\", \"uid=user7,ou=People,dc=github,dc=com\", \"uid=user8,ou=People,dc=github,dc=com\", \"uid=user9,ou=People,dc=github,dc=com\"], \"uid=user10,ou=People,dc=github,dc=com\"=>[]}\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8163055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8176727", "body": "@jch AD only supports UDP queries against the rootDSE (metadata about the directory, not data itself). It falls outside the spec so I'm not at all concerned with supporting UDP.\n\nI want to avoid clever solutions to this problem; it'll be too easy to cause deadlocks and inscrutable runtime behavior. I want to avoid having to bake this sophisticated behavior in and instead make it possible to wrap up our primitives in a way that providing connection pooling, query queueing, etc can be done outside of the library.\n\nConnection pooling sounds like a good idea, honestly, but at the same time an order of magnitude more complicated; what behavior do we expect when the pool is exhausted?\n\nRE: the message ID, if servers are capable of handling multiple concurrent requests, differentiating which result is for which request based on the message ID, then we might have a simple solution. Hoping to add sufficient instrumentation to understand this scenario better today.\n\nOtherwise, I think what I'm going to propose is a that we do not allow a search on an open connection already servicing a search, raising an exception. A user should not unwittingly build something that causes bad behavior/data. We can add a flag so that the user can define the expected behavior (`abandon_pending_operation: true` or `raise_on_pending_operation: true`).\n\nI plan to also look through the CPAN Net::LDAP library to see how it handles connections, multiple queries, etc.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8176727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8182441", "body": "Opened https://github.com/ruby-ldap/ruby-net-ldap/pull/133 to track this issue more generally.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8182441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851167", "body": "References `escaped_login` which was removed above.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851310", "body": "`Group` \"is a\" `Domain`? Are we missing a common base class? My intuition says that Group and Domain have separate concerns and Group should not inherit from Domain. What are we specifically gaining from this?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851677", "body": ":+1: that sounds like it represents the domain object's components more precisely.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851695", "body": "`present?` would switch this negating negative to a single positive statement.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851726", "body": "Would it make sense to assemble a Set here instead?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851830", "body": "`results.concat` reuses the same `Array` object instead of creating a new one.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892435", "body": "orite :tophat: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892539", "body": ":ok_hand: not worth the extra effort to comply with Set contracts, etc. Can revisit this after more usage.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9892539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9963263", "body": "This the same as calling `load_cache`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9963263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139723", "body": "Possible refactoring:\n\n``` ruby\n@member_entries ||= member_names.map { |m| @ldap.domain(m).bind || nil }.compact\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139794", "body": ":+1:\n\nCould we add a comment here indicating that this entry is intentionally wrong?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277036", "body": "`first` was inconsistent.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277045", "body": "Pretty sure that the base domain (this `dc=github,dc=com`) entry is created when booting up ApacheDS with the `--domain` option set, since this was causing the error.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/16277045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sbryant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/34c2685bd07ae79c6283f14f1263d1276a162f28", "message": "Merge pull request #101 from github/jonabc/tls-options\n\nEnable TLS validation"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/a7380b20ff9a3a1f04055256376fbc502704084d", "message": "Fix up tests"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d2be945fe9421ff2452c2764a26ba3519ca77f87", "message": "Missed a couple of empty tls_options"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/79065bae794fef53475be01403b4cbf412a01011", "message": "Fix missing paren"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/07adb9baab59b138f3db5d42eb96ca8cbff4a705", "message": "Update test to reflect verify_mode"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b52284ca3519be60bea4e8e26690b59466fa3d20", "message": "Use tls_options as a Hash\n\n`:verify_mode` is used to specify how the certificate is verified, if at all."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/28005055", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/28005055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32518496", "body": "/cc @calavera @jmickeyd \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32518496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35671998", "body": ":sparkles: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35671998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49660507", "body": "These changes look good to me.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49660507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357264", "body": "Missed the actual class. :facepunch: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962049", "body": "The fields we filter on should be configurable.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188913", "body": "I think that multi type support is confusing. I'm killing it in favor of something more explicit.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15189313", "body": "I've updated the doc comments to be clear on what we expect.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15189313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jonabc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/272c61d02f1400b50180173fcf9bd725b5356295", "message": "fix tls_options on nil input"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/d88eb773c46b3d1cb467fed2d40291b4ed71b5b4", "message": "update comments"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/1052cea7f94a4df6aa2bfb46c7f4844ad35bb827", "message": "Merge pull request #102 from github/dbussink/tls-options-directly\n\nExpose TLS options directly"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/c8007663132028f0ce41903f47f208807e52f9a4", "message": "Enable TLS validation\n\nenable by setting `validate_encryption: true` on initialization options"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbussink": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/5a50c9cd75a6fbcacaa2115c4203bc9de468aac9", "message": "Expose TLS options directly"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/cb093d2f1076452bee68752fbc81958489fa8f99", "message": "Release 1.10.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/b7c0b8901104cdd1c77294de4a0e7d69ce2cc189", "message": "bump version to 1.10.1"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/04f0d1b1a8eeb86f00e4ec225b931ad0e1ebf899", "message": "bump net-ldap to 0.16.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/github/github-ldap/comments/7947556", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/7947556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8160050", "body": ":+1: nice reproduction of the problem in test. I haven't looked at the definition of `open` yet, but is it possible that the `closed` and `open` results are using different underlying connection objects? It'd also be good to print out the intermediate search results in the outer loop and make sure the inner loop is iterating over the same set of `child_dn`'s\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8160050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8174761", "body": "@mtodd :sparkles: awesome explanation.\n\nThe LDAP spec recommends \"connection-oriented, reliable transports\", with TCP being an example. But AD also allows [search over UDP](http://msdn.microsoft.com/en-us/library/cc717362.aspx), so it's really up to the implementation. I'm a relative noob with socket programming, but general socket wiki pages suggest that they are bi-directional and your failing test above matches this behavior: We can write a new search request to the socket before we finish reading results from the last request.\n\nThe two solutions that come to mind are:\n- queue requests to shared connection and execute them serially\n- wrap the shared connection with a lock. If the connection's in use, create a fresh connection and execute the query there\n\nThese two approaches can also be combined. The latter approach sounds iffy to me because there'll be a race condition if we're executing the queries in threads. Also are binds expensive? Is it worthwhile to establish a new connection to kick off a search if one is already running? Or is it better to just wait?\n\nIf we do queue requests, we can also provide an interface to inspect and modify the queue. If there's a long running search, the client can abandon and enqueue another search with a more restrictive filter.\n\nSome food for thought of connection pooling also https://github.com/ruby-ldap/ruby-net-ldap/issues/11\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8174761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8174957", "body": "> What happens if we write a new search query when a previous search's results are still being transmitted? \n\nThe spec for LDAP message envelopes' Message ID (http://tools.ietf.org/html/rfc4511#section-4.1.1.1) suggests that we should be able to distinguish between multiple search requests by the Message ID:\n\n> All LDAPMessage envelopes encapsulating responses contain the messageID value of the corresponding request LDAPMessage.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8174957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8180322", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8180322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8191621", "body": "> AD only supports UDP queries against the rootDSE (metadata about the directory, not data itself). It falls outside the spec so I'm not at all concerned with supporting UDP.\n\nNice catch. I wasn't planning on supporting UDP in any case, just one of the google results I came across.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8191621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8203687", "body": ":+1: makes sense to me. I would kill the `stub_search` method and just do the more verbose stubbing inline for less brain parsing, but totally up to you.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8203687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/github-ldap/comments/8206675", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/8206675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "lildude": {"issues": [], "commits": [{"url": "https://api.github.com/repos/github/github-ldap/commits/b75ef743fd68c8df51194a56a44db5c009831261", "message": "Merge pull request #96 from lildude/lildude/multiple-ldap-servers\n\nAdd support for passing a list of ldap servers"}, {"url": "https://api.github.com/repos/github/github-ldap/commits/9315cee5510b2d2360d745a404411840b154dda8", "message": "Use port from options\n\nWe don't care too much about the port in testing. Using the port in the options allows us to test against ApacheDS and OpenLDAP without adding any additional conditionals."}, {"url": "https://api.github.com/repos/github/github-ldap/commits/7be5c555d33eea1ccd2de3ce8d29ccfbbf2c9c0f", "message": "Merge master and manually resolve merge conflicts"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wuranbo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/81", "title": "*bugfix) uncomment the install script.", "body": "Make more consistency to the description in README.\nI spend not a few time to know this thing, while following the README to finish my job.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmickeyd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/27975461", "body": "Although this works with AD and OpenLDAP, it looks like it was only very recently supported by Apache. https://issues.apache.org/jira/browse/DIRSERVER-434\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/27975461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856402", "body": "I'm still a tad worried that an LDAP server which is currently working will explode if we send this control.  But I think the trade off is probably worth it, as there are many more AD users than anything else it seems. @github/enterprise-support do you have a feeling on the number of users we have on old ApacheDS?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33858612", "body": "@michaeltwofish sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33858612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "calavera": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32586296", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/32586296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856242", "body": "this sounds like a good idea, should we merge it?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33856242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35572802", "body": "@mtodd I think I'm going to merge this and release a new version, everything we need for now it's here.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35572802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35915968", "body": "This is ready to merge. I'll release a new version and bump it in github with the changes in the api, it's a pretty straightforward change.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/35915968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/36662733", "body": "this is working nicely, releasing a new version.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/36662733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37199546", "body": "Which makes me think that this is going to break integrations for people that don't have that schema enabled either.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37199546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37222922", "body": "This definitely helps. Merging.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37222922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37244826", "body": "As far as I know there should not be more objectClass that represents groups, this should cover all our use cases. I hope people don't try to implement their own.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37244826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37315758", "body": "This is going to require more changes than I anticipated. I'm going to leave it on hold until I finish something else that I left behind.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37315758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37853448", "body": "This should be ready to merge. Two things have changed here:\n1. Since `posixGroup` is not exclusionary with `groupOfNames` and `groupOfUniqueNames`, we need to support both lookups in the same ldap entry.\n2. Since `memberUid` only references a `uid` and not a `dn` we need to be able to search for users in every domain base configured, hence that global `search_domains`.\n\nI'll release a new minor version and upgrade the affected projects when this is merged.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/37853448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122124", "body": "This is on hold until we figure out how to solve some dependencies issues.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122137", "body": "This is working properly. Merging!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/38122137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/github/github-ldap/comments/5414764", "body": "@kansaichris would you mind to create a PR the next time you modify this library? This change broke several tests. We could have detected it easily with a PR.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/comments/5414764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851380", "body": "yes, a group is actually a domain. You can search entries specifically under a group like you do under a domain.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851408", "body": "wait, after a second thought, we might not need it.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851464", "body": "I think we can avoid part of this if we pass the ldap entry to the constructor and we stop inheriting from Domain.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9851464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854032", "body": "the problem is that every entry is a different object, so a set won't remove duplicated elements anyways.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854033", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854519", "body": "there is no `present?` in ruby.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9854519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10000144", "body": "it's not. The cache must be created at this point, avoiding to create a new hash and merging it later to the cache.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10000144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962350", "body": "agreed\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/9962350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139817", "body": "yes!\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139935", "body": "sorry, I like `each_with_object` better :stuck_out_tongue_winking_eye:\n\nI rather control what I put into the final array than put whatever and iterate later to remove nil elements.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/10139935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "michaeltwofish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33859656", "body": "@kansaichris After we launch 11.10.330, it might be worth noting on the [Configuring LDAP page](https://enterprise.github.com/help/articles/configuring-ldap-authentication) that directory services must support paged result sets.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/33859656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "mcolyer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49651661", "body": "@mtodd I've done a quick once over but I haven't worked in this code before.\n\nHave you verified that previous behavior works and that we get the logging output we expect since tests are failing?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49651661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "rtomayko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49658647", "body": "I'm going to try a slightly different direction that taps in at a single chokepoint. We won't have great details on what generated the query but I'm a little concerned about introducing so much change in a bugfix release. I'll leave this here and start another PR for that.\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49658647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188638", "body": "Hmm, isn't this already supported by passing a Hash? From the comment:\n\n```\n     # Internal - Configure virtual attributes for this server.\n      # If the option is `true`, we'll use the default virual attributes.\n      # If it's a Hash we'll map the attributes in the hash.\n```\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/15188638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mjmdavis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49738455", "body": ":fireworks: \n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49738455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MikeMcQuaid": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49750965", "body": "@mtodd Is this something we'll want to backport?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/issues/comments/49750965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "gregose": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357128", "body": "`Net::LDAP::Filter.escape`?\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357431", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/github/github-ldap/pulls/comments/7357431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}}}}