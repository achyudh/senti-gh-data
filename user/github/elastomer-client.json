{"_default": {"1": {"TwP": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/158", "title": "Incorporate new ES 5.X features", "body": "We need to pull in new features from ES 5.X that are not yet supported by the gem. When the gem is used with an ES 2.X cluster, a sensible empty result should be returned from these methods.\r\n\r\n- [x] Delete by query [docs](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-delete-by-query.html) @look #185\r\n- [x] Task management API [docs](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/tasks.html) @elireisman #187 \r\n- [x] Raise `IllegalArgument` exceptions when returned from Elasticsearch #184 \r\n- [x] Upgrades tp + github/github deployment(s) of `elastomer-client` to pull in `VersionSupport` shims for ES2~ES5 transition period @elireisman @look (multiple patches)\r\n- [ ] Pattern for parameter validation @twp [here](https://github.com/github/elastomer-client/pull/198)\r\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/125", "title": "Support the \"field stats\" API", "body": "The [field stats](https://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-field-stats.html) API is very handy for picking out min / max values for fields along with other metrics. We should add this to the client.\n\n/cc @grantr @chrismwendt \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/5", "title": "Logging", "body": "We need to add some logging to the `Client` class. For each request the client makes, we should output a detailed debug message to a logger of some sort. I really like how Tire does it; logging a curl command that you can copy/paste and use directly. Also, outputting the status code of the response would be good, too ...\n\n```\n[200] curl -XGET 'http://localhost:9200/index/_search' -d '...'\n```\n\nNot sure how to handle large bodies and what not. And I don't think we need to log responses.\n\ncc @github/search\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/5/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/github/elastomer-client/commits/3cb73144d8583d0fa057fa3cfe27c3d2300aef7b", "message": "Merge pull request #199 from github/parameter-validation-cleanup\n\nParameter validation cleanup"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/4750e3ee6e46b9cbef142f2aa1fc440b2386b11e", "message": "removing unused methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/9c4773b01ee85c87fd18b84280dd606b34054a7e", "message": "Remove redundant parameter validations\n\nWe can rely on the ApiSpec validatioins that are handled down in the\nclient request method."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f7df211f5832f76a41e1b830288f7be5c784f5e0", "message": "Merge pull request #198 from github/parameter-validation\n\nRequest Parameter Validation"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f38be923ab40d58a46c7b53bf0447bad6078e497", "message": "remove redundant param validation"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8103fc97e442f3b6d0f0559f71a3debe341e812d", "message": "use strict request param checking"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/bdde4c711b8adda4b3537ac238796a5bd5c1c102", "message": "adding the missing `timeout` param"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/feb7d4ae8591821027e9da67f429c340df65a895", "message": "configurable parameter validation"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e5febbb9a41a1b6a1c64cae6d4e4d5fb072bd0a6", "message": "Method for validating request params\n\nThis method will validate request params and raise an exception if an\ninvalid param is found."}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/579942b434ec4fb07b6fb39d0269ec61058117b3", "message": "removing unused constant"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d480ea7d296c9797fc997f52b2e94ff0e28a3c23", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/50808767afac94c0e381b4a1652c2f9229a0d921", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/becf689f5aa70d5f119601a4f932326b161aa9d4", "message": "refactoring and adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/d791df7e9e39147e1a4fae37c696f0ad5117e27e", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/37bc992171b40d2acda2f7e04e909de373cf4afb", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/e1188bc3ca983de2f630beca7dbb96273567d52a", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/f2d4f81ce923237d96c8f62c40ada1e943fc69ac", "message": "also allow path parts here"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/79d6ca28b47cc40a0e9e2786d581dbe1984a7513", "message": "fixing up hash syntax"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/88a71d33fac90345224a43b9a56385046008d168", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/a568603ba88477041febd774bd7427db34f97dc6", "message": "validating request params"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/247e6022e693bdc20d9f78b2d6ce710d40789425", "message": "adding validity checker methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/c5f1d8a9b6b14d4d1388f56e51b2e18e8c152c98", "message": "adding validity checker methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/06c5940c5d84151fa3d38da05d46ba8da89ad6af", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/acfb71076f5eb2263d9b8055d45316b22a7da3b7", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/302f81eb865397799bbc69ae17d04cbc9ee4e616", "message": "adding rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/20d7fb376e8ebf5396648b1acfbdf8018b87982d", "message": "adding rest_api descriptors to cluster methods"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/906e7412e12e3320ff491d0f8ca54710de45410e", "message": "fixing up tests"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/2ebd3c00b0822d4580e3a10e06d72f1c6fb18d1b", "message": "fixing deprecation warning"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/1f701d01d820939aa96fd196c5c0c801983fd808", "message": "add a rest_api descriptors"}, {"url": "https://api.github.com/repos/github/elastomer-client/commits/8851d51b5d9b6eded49677774640faa42e7e99d7", "message": "add a rest_api descriptor"}], "pull_requests": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/200", "title": "Removing `op_type` shims", "body": "This removes the `op_type` shim methods from the `VersionSupport` class. They are no longer needed now that we have parameter validation built into the client.\r\n\r\n/cc @elireisman ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16532134", "body": "The question is, should we expand this idea to the other methods that accept a request body? And by that I mean, should we allow all methods to accept either a Hash or a JSON encoded String?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16532134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16549877", "body": "@grantr I've added the PUT / POST semantics to document indexing. Gonna close out this PR. Also, all the code is done for bulk stuff, too.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16549877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593094", "body": "@grantr I was thinking about a `next` and `next_document` method ... easy enough to do.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593586", "body": "Well, except the `next_document`. We'd have to keep the previous set of results around in order to iterate on them. And an offset into the 'hits' array.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16593586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16661079", "body": "Thanks for the feedback everyone! Here are some of the changes in direction that have taken place\n\nThe client part of this library is completely stand alone. It implements a one-to-one mapping of the ElasticSearch API and the places where it diverges are well documented. You can use the client library by requiring just the client code ....\n\n``` ruby\nrequire 'elastomer/client'\nclient = Elastomer::Client.new\n```\n\nThere are two block helpers in the client code: one to help with `bulk` action requests and one to help with `scan` queries over an entire collection of results without using an incrementing offset in the query.\n\nThe whole client is built on top of Faraday. The adapter is configurable when initializing the client. Currently we are using the https://github.com/geemus/excon gem as the adapter. It appears to be faster than net-http-persistent. But we can and should do some experiments to figure out what gives us the best performance.\n\nLast of all, I want to say that I have avoided writing this client code since day one at GitHub. It is not something that I really wanted to do, but everything else has proven to be overly complex (tire) or complete but intractable (eson). So I wrote up this client in anger - I wanted something that we could start using as quickly as possible. If this code gets pulled out into a separate gem, then great! If it never sees the light of day outside of GitHub, then great! I just wanted to get something usable out in the hands other developers. Again, I regret suggesting eson to @jbarnette and @tclem for the https://github.com/github/id project. That was a mistake, and this codebase is my attempt to rectify that error.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16661079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16948494", "body": ":+1: Thanks for implementing. Just throw some documentation links in there back to the ElasticSearch API guide.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16948494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961684", "body": "I'm a :+1: on merging this. We can address warmers later.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17207560", "body": "I'm pretty pleased with the current state of this branch. Gonna merge in the morning, so speak up if you have something to say.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17207560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/3042100", "body": "It is definitely faster when running the testsuite locally\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042113", "body": "And @technoweenie is using excon for sending audit log data to elasticsearch from the .com app. So I'm mostly cargo culting this change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042138", "body": "@grantr but since this is an option to the client, you can choose your back end adapter at runtime. We should run some experiments and see what gives the best performance.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303772", "body": "@grantr after the `body` is converted to a JSON string, we don't perform another JSON encode operation. The middleware is smart enough to leave the string as is and just put a JSON content type in the request header.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/25665444", "body": "Yeah, my hands started shaking a little and the nervous tic by my eye came back for a few minutes.", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/25665444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3988327", "body": "Completely agree about the inconsistency surrounding duplicating params. It is something that should be addressed in its own pull request, since I'm not entirely sure at what level to handle it at the moment.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3988327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024606", "body": "When I was first working on this, I was tempted to throw it up in the `Client#request` method and check each param for every request. That felt a bit heavyweight, and then I stuffed it here since this is the only parameter I currently care about having a CSV transformation.\n\nThe Addressable gem will format params into CSV when they are part of the path - i.e. for `/{index}{/type}/_search` if the :type passed in as an Array of types, then we get `/index-name/type1,type2,type3/_search` as the result. I was expecting a similar expansion for param values, but alas, it only grabs the last value in the array. I did not dig too much into Addressable to see what was really happening. Perhaps there is an option flag or setting.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024615", "body": "I know, right! :boom:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024688", "body": "Easy enough to change.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4024688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097011", "body": "The .com codebase already has a few sub-classes of Elastomer::Error. Those will eventually find their way into the gem in one form or another.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097053", "body": "Habit of mine - just so I know what the end tag pertains to without having to <SHIFT-5> on the tag.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044745", "body": "``` ruby\nquery, params = extract_params(query, params) if params.nil?\n```\n\nSince the `extract_params` method only alters the arguments if the params is really nil. We can avoid a method call and an Array creation (for passing back the args) by checking for the nil condition first.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044783", "body": "We don't have any other search methods in the index. Does it make sense to put this here?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4044783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4049399", "body": "And if params is truly nil, we can just drop it from the `extract_params` method signature provided we do the nil check outside the method.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4049399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4172561", "body": "So the more I think about this the more I think we should just stick these search-type methods wherever they are needed or makes sense. The `scan` method exists at the client, index, and docs level. So the same should work for the multi-search method, too.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4172561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "chrismwendt": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/128", "title": "Add setting to automatically refresh the index", "body": "Lots of nondeterministic test failures are caused by forgetting to refresh the index after writing or before reading. It would be convenient if elastomer-client had a setting which handled refreshing automatically.\n\nFor performance, it could be \"smart\" and only refresh if a write has happened since the last refresh.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wags": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/127", "title": "Running script/test fails", "body": "When I run `script/test`, I get the following error message:\n\n```\nbundler: command not found: testrb\nInstall missing gem executables with `bundle install`\n```\n\nThis is despite a successful run of `script/bootstrap`:\n\n```\nGem environment up-to-date\nInstalling hooks into /home/administrator/elastomer-client\nSuccessfully installed hooks into /home/administrator/elastomer-client\n```\n\n_I installed Ruby 2.2.4 using **rbenv** on Ubuntu 14.04._\n\nHas anyone encountered this error before? I have not been able to determine if it is a missing gem issue or something else. Thank you!\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkirsche": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/124", "title": "Consider utilizing Elasticsearch Transport for communication not standard HTTP API", "body": "For better performance, consider using the [Elasticsearch Transport](https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-transport) which handles connecting to multiple nodes in the cluster, rotating across connections, logging and tracing requests and responses, maintaining failed connections, discovering nodes in the cluster, and provides an abstraction for data serialization and transport.\n\nThis should also be able to allow the use of Excon, Patron and other adapters in a similar manner to what you have which are supported with Elasticsearch's official client\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grantr": {"issues": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/105", "title": "Bulk helper should instrument entire operation", "body": "The Bulk helper can issue multiple requests behind the scenes if requested. In this case we should instrument the entire operation as a single action in addition to the underlying scan/bulk request actions.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/91", "title": "Test API coverage against the spec", "body": "ES has a well defined API spec here: https://github.com/elasticsearch/elasticsearch/tree/master/rest-api-spec/api\n\nWe should test our API coverage against specific versions. On that note, we should probably explicitly note which versions we support (where support means we strive for 100% coverage) and which we don't (coverage might be incomplete). We could even add methods in the client for determining whether the connected version of ES is officially supported.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/91/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/80", "title": "Allow apps to configure faraday logger", "body": "This code in haystack reaches into elastomer-client's Faraday object to set the logger:\n\n```\nif Rails.env.development?\n    Haystack.elastomer_client.connection.response :logger, Rails.logger\n  end\n```\n\nhttps://github.com/github/haystack/blob/master/config/initializers/elasticsearch.rb#L18-L20\n\nThis shouldn't be necessary. Elastomer::Client should provide a method to set a logger object.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/80/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/69", "title": "Compatibility across ES versions", "body": "#68 introduced version-specific behavior to a few methods. Since this might happen more often, we should think of a clean way to do version-specific stuff that avoids version checks everywhere. /cc @TwP @jnunemaker\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/69/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456899", "body": "Things I want in an elasticsearch client:\n- Exposure of dead-simple elasticsearch api methods\n- Higher level index configuration tools (mapping, settings)\n- Bulk indexing and scrolling block helpers\n- Index deployment management (rotation, open/close, enable/disable indexing)\n- Migrations (mapping schemas, schema change detection, reindex into same or new index)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456955", "body": "Some interesting ideas about query construction here: [matthuhiggins/arelastic](https://github.com/matthuhiggins/arelastic)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16456955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16457090", "body": "This client may also be useful to look at: http://rubydoc.info/gems/elastic_record\n\nIt's mostly written by the author of arelastic above. The repo is private and licensing status is nebulous, so I wouldn't use any of it directly.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16457090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16515594", "body": "I like the idea of leaving high-level integrations to separate gems. Avoids building ActiveSupport-isms into the basic actions.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16515594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16588380", "body": "@TwP this is perfect! \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16588380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16589407", "body": "Just had a thought. This could be slightly more flexible if the code inside the loop was extracted to a method. Then the Scan object could be used to iterate without the block helpers. \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16589407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16594118", "body": "next document could be interesting, but not really necessary I think.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16594118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16808942", "body": "Maybe the client can take a :verbose level or :trace => true option that increases the logging level to include requests and responses?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16808942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16809102", "body": "We can't require activesupport for the low level client, but at a higher level we should use ActiveSupport::Notifications and a LogSubscriber.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16809102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16947837", "body": "Working on the missing index actions in #7\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16947837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960296", "body": "That's all the missing index actions except warmers. Warmers are tricky (and similar to percolators) so we should probably discuss how to handle them in the api.\n\nI think maybe a subobject like Index::Warmers might be a good abstraction? Sort of like the Docs object.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960960", "body": "index.warmers.delete\nindex.warmer('test').create(query)\nindex.warmer('test').delete\nindex.warmer('test').get\n\nHmmm.. Not sure I like the .get method. Not sure if this is worth doing. @TwP what do you think? It feels sort of wrong to have get_warmer/put_warmer/delete_warmer methods in the Index class.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16960960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961302", "body": "@TwP I'll move warmer stuff to a different PR. Ok to merge this?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16961302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17040730", "body": "I haven't quite figured out what the method signature should be for Explain and More Like This. Both operate on a specific document, already indexed, by id.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17040730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17042121", "body": "I guess explain and more like this are pretty similar to the delete action, which takes the :id in the params hash, so that's what I'll do.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17042121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17092454", "body": "These are the simple ones. Multi Search and Percolate seem like they might need more discussion. Ok to merge?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17092454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17101143", "body": "Oops, pushed multi_search anyway.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/17101143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/3042064", "body": "Is excon actually an improvement?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042193", "body": "As long as it remains a configurable option I'm fine with it. And I agree good to be consistent with the clients being used elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3042193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303652", "body": "@technoweenie is there a way to get the request body out of a `Faraday::Response` object?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303668", "body": ":-1: I don't like how this doubles the json dump load for each request, even if instrumentation is not enabled. Can we move that to the instrument method at least?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303800", "body": "@TwP oh good. Ignore me then.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/8191798", "body": "I think I'd add some opinion words here like \"We think these things are better handled...\"\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/8191798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986380", "body": ":aciton works? :wink:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986398", "body": "What is securerandom for?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986447", "body": "I'd like to avoid requiring activesupport as a dependency for the base client. Instrumentation is both optional and user-specific so I think its dependencies should also be optional. Can we pull all this into elastomer/instrumentation.rb and attempt to require activesupport there? Or maybe wrap all the instrument calls with `if defined?(ActiveSupport::Notifications)`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986519", "body": "Is the dup necessary? Would like to avoid creating more hashes than is necessary\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986601", "body": "We already dup the hash in some places with merge, and update_params destructively modifies the hash. We should decide on a policy and stick to it everywhere. If we decide to dup, we should aim for only one copy.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986615", "body": "Maybe this can check for respond_to?(:instrument)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/3986615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022207", "body": "Very nitpicky, but I would change this to `params[:_id].nil? || params[:_id].to_s.empty?` to avoid creating empty strings for every index call without an id.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022237", "body": "Should this be `cluster.shutdown`?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022288", "body": "I wonder if we could change the parameter handling of faraday (maybe add a middleware?) so it translates array parameters and repeated parameters into CSV.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022315", "body": "+:100:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4022315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079062", "body": "Hmm this is tricky. I guess adding the nil check and dropping params from the method signature sort of removes the need for the method at all. But I don't like the repetition of that stanza everywhere. What do you think? useful method or not?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079089", "body": "No, I didn't consider that. It should only go where other search methods go. :+1:\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079120", "body": "Does scan even belong in the index? Maybe that should go in docs also.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079139", "body": "Or maybe scan should stay in index since it's mostly useful for admin stuff like reindexing, and scroll should go in docs since scroll is more query-y (it supports sorting).\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079146", "body": "The fact that there's a discussion about this at all might mean that the docs/index split is getting fuzzy.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4079146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wfarr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16478464", "body": "So I've been hacking on https://github.com/wfarr/stretch as an API only ES client.\u00a0\n\nIt's green field and doesn't have to worry about any upstream implementation details right now.\u00a0\n\nIt maps DIRECTLY to the API -- I'm even pondering doing validation of params on the library side rather than having ES just throw 404s and what all.\u00a0\n\nIt has 0 intention of ActiveRecord integration. IMO, that's a concern that should be wrapped up in a higher level library.\u00a0\n\nI have a lot of thoughts on the query and indexing API I still need to roll into stretch, but I'm really happy with the direction it's going.\u00a0\n\nI'd love to see Elastomer or another gem act as an abstraction for use with ActiveRecord/Rails on top of stretch some day.\n\nOn Tue, Apr 16, 2013 at 9:57 AM, Grant Rodgers notifications@github.com\nwrote:\n\n> This client may also be useful to look at: http://rubydoc.info/gems/elastic_record\n> \n> ## It's mostly written by the author of arelastic above. The repo is private and licensing status is nebulous, so I wouldn't use any of it directly.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/1#issuecomment-16457090\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16478464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16483082", "body": "Absolutely.\n\nOn Tue, Apr 16, 2013 at 4:52 PM, David Graham notifications@github.com\nwrote:\n\n> It would be nice to use HTTP keep-alive and connection pooling in whatever client we choose.  I suspect the reason search is so slow right now is it creates a fresh connection for each request.\n> \n> ## ![image](https://f.cloud.github.com/assets/122102/389031/69b169b4-a6f0-11e2-8c49-3a027b75654e.png)\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/1#issuecomment-16479146\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16483082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16706768", "body": "IMO, http requests with bodies should be _a_ level of logging but likely not the default.\n\nAs far as logging request bodies goes, strip new lines and compress multiple spaces into a single space.\n\nOn Sat, Apr 20, 2013 at 6:20 PM, Tim Pease notifications@github.com\nwrote:\n\n> We need to add some logging to the `Client` class. For each request the client makes, we should output a detailed debug message to a logger of some sort. I really like how Tire does it; logging a curl command that you can copy/paste and use directly. Also, outputting the status code of the response would be good, too ...\n> \n> ```\n> [200] curl -XGET 'http://localhost:9200/index/_search' -d '...'\n> ```\n> \n> Not sure how to handle large bodies and what not. And I don't think we need to log responses.\n> \n> ## cc @github/search\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/5\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16706768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16821018", "body": "I'd much prefer to keep it in UNIX convention and offer info, error, debug, etc log levels.\n\nOn Mon, Apr 22, 2013 at 11:05 AM, Grant Rodgers notifications@github.com\nwrote:\n\n> ## Maybe the client can take a :verbose level or :trace => true option that increases the logging level to include requests and responses?\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/github/elastomer/issues/5#issuecomment-16808942\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16821018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dgraham": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16479146", "body": "It would be nice to use HTTP keep-alive and connection pooling in whatever client we choose.  I suspect the reason search is so slow right now is it creates a fresh connection for each request.\n\n![image](https://f.cloud.github.com/assets/122102/389031/69b169b4-a6f0-11e2-8c49-3a027b75654e.png)\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/issues/comments/16479146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "technoweenie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/3303666", "body": "`Response#body`\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303677", "body": "Oh I'm sorry, I misread.  No, we clobber the body currently.  This is something planned for Faraday v1.0 though... `response.request.body`.  Fuck that rack-style env hash.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/3303677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "shayfrendt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/13362664", "body": "Can we get this new version pushed up to Rubygems? :smile: \n\n``` sh\n$ gem list -r elastomer-client\n\n*** REMOTE GEMS ***\n\nelastomer-client (0.6.0)\n```\n\ncc/ @grantr \n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/13362664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "look": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/comments/25665344", "body": "\ud83d\ude31 ", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/comments/25665344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jbarnette": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096528", "body": "Big :thumbsdown: for this and all the dynamic cleverness below it. It's bad to grep, bad for other maintainers, and bad for you a few months from now.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096543", "body": "I also don't think that it's worth breaking out multiple errors until you can make a compelling case - in production code - to do so. I think that just\n\n``` ruby\nmodule Elastomer\n  class Error < StandardError\n  end\nend\n```\n\ncould take you a long way.\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096575", "body": "`Bundler.require` is gross. But if you're going to use it, why is the multi_json require below necessary?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096583", "body": "What's with these ending comments?\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4096583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097187", "body": "\"absence\"\n", "reactions": {"url": "https://api.github.com/repos/github/elastomer-client/pulls/comments/4097187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}