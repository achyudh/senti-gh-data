{"_default": {"1": {"mrmark": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1436", "title": "Issues with NFS mounts and S3", "body": "Hello!\r\n\r\nThe root of the problem is that the SDK does not always close open file handlers.  This is not a problem with non-NFS mounts and it is only a problem if you attempt to delete the folder in which the open file handler is using.\r\n\r\n**File download example use case:**\r\n* Create a temporary directory on the NFS mount.\r\n* Use `\\Aws\\S3\\S3Client::getObject` to download an object *that does not exist in S3*.  Set `SaveAs` to a file path within the temporary directory on the NFS mount.\r\n* Delete the temporary directory by iterating files and deleting each one.  Once the directory is empty, remove the directory.\r\n\r\n*Workaround*: instead of passing in a file path into `SaveAs`, pass in the file `resource` handler itself and ensure it is closed after calling `\\Aws\\S3\\S3Client::getObject`.\r\n\r\n**Multipart upload example use case:**\r\n* Create a temporary directory on the NFS mount.\r\n* Use `\\Aws\\S3\\S3ClientTrait::upload` to upload a large file which would trigger multipart upload (16Mb or larger).\r\n* Delete the temporary directory by iterating files and deleting each one.  Once the directory is empty, remove the directory.\r\n\r\n*Workaround*: None found, need to avoid using multipart uploads by using `\\Aws\\S3\\S3Client::putObject`.\r\n\r\n**Example error:**\r\nBoth of the above use cases result in an error that looks like this:\r\n> Warning: unlink(/path/to/directory/being/deleted/.nfs676dc60d2899deb8000000c5): Device or resource busy in /path/to/script.php on line X\r\n\r\nSome info about the `.nfs` files, http://nfs.sourceforge.net/#faq_d2\r\n\r\n**Solutions:**\r\n* Update the SDK to close these?\r\n* Is it possible for me to add middleware or listen to some events to automatically close these?\r\n* Others? Open to suggestions.\r\n\r\nCheers and thanks for the help.  This is likely an edge case, so I'll understand if there isn't much that can be done.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "et304383": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1323", "title": "Please add/fix support for assume role CLI profiles in .aws/credentials", "body": "#1030 was closed and appears to remain unresolved as of 3.31.0.\r\n\r\nI expect that if I have this in `.aws/credentials`:\r\n\r\n```\r\n[profile1]\r\noutput = json\r\nregion = us-east-1\r\naws_access_key_id = A**************\r\naws_secret_access_key = *****************\r\n\r\n[profile2]\r\noutput = json\r\nregion = us-east-1\r\nrole_arn = arn:aws:iam::123456789012:role/Developer\r\nsource_profile = profile1\r\n```\r\n\r\nI should be able to simply set the env var:\r\n\r\n```\r\nexport AWS_PROFILE=profile2\r\n```\r\n\r\nAnd then this should work:\r\n```\r\n$ec2_client = new Aws\\Ec2\\Ec2Client([\r\n  'region' => 'us-east-1',\r\n  'version' => 'latest'\r\n]);\r\n```\r\n\r\nThis does not.  As I noted on the other issue, CredentialsProvider is throwing this error:\r\n\r\n```\r\nFatal error: Uncaught Aws\\Exception\\CredentialsException: No credentials present in INI profile 'profile2' (/var/www/.aws/credentials) in /var/www/html/vendor/aws/aws-sdk-php/src/Credentials/CredentialProvider.php:394\r\n```\r\n\r\nThis should work exactly like boto3 and just work.  The SDK should detect that the profile is an assume role type with a role_arn value and perform the assume role call to get credentials.  **I should not have to modify the code to explicitly declare a credentials provider**.\r\n\r\nIf I am simply missing a step please clarify, but I believe code should be agnostic to whether it's running with the env var AWS_PROFILE set or running on EC2.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1323/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justin-yan": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1301", "title": "Default Region for Client Instantiation", "body": "Tried to find existing or similar issues but didn't spot any - #1239 might be kind of similar.\r\n\r\nThe immediate problem I'm facing is that I would like to be able to have a default region that comes from the credential provider chain.  An example from the Java SDK: https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-region-selection.html#default-region-provider-chain\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bradynpoulsen": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1239", "title": "Feature: Configure Services' Endpoint URLs via Environment Variables", "body": "I've been looking the documentation about environment variables and see that you are able to configure credentials, regions, and profiles using environment variables, but I do not see a way to configure the endpoint url option to point to our internal proxy.\r\n\r\nMy suggestion is to configure the endpoint url if either the `AWS_<REGION>_<SERVICE>_ENDPOINT` or `AWS_<SERVICE>_ENDPOINT` (in that order of priority) environment variables are available.\r\n\r\nI suggest making this change in one of these locations (that I have found so far) in order of suggestion preference:\r\n * [`Aws\\ClientResolver::_default_endpoint_provider`](https://github.com/aws/aws-sdk-php/blob/master/src/ClientResolver.php#L615-L619)\r\n * [`Aws\\Endpoint\\PartitionEndpointProvider::getPartition`](https://github.com/aws/aws-sdk-php/blob/master/src/Endpoint/PartitionEndpointProvider.php#L38-L47)\r\n\r\nFor reference purposes:\r\n * [`Aws\\Credentials\\CredentialsProvider`](https://github.com/aws/aws-sdk-php/blob/master/src/Credentials/CredentialProvider.php#L214-L229) use of environment variables\r\n * [PHP `getenv` Documentation](http://php.net/manual/en/function.getenv.php)", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1243", "title": "Added support to configure client endpoints through environment variables", "body": "Closes #1239", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "umesecke": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1101", "title": "Discussing MultipartUploader's handling of seekable streams", "body": "The multipart uploader does some 'special' handling of streams I'd like to discuss.\n\nStreams are only treated as seekable if the underlying resource is a filehandle (\"wrapper_type = plainfile\", see [AbstractUploader::getUploadCommands()](https://github.com/aws/aws-sdk-php/blob/master/src/Multipart/AbstractUploader.php#L46)). In the MultipartUploader implementations for S3 and Glacier there is even access to the underlying url and a new stream is created opening the file for each part, bypassing the original stream (see [MultipartUploader::createPart()](https://github.com/aws/aws-sdk-php/blob/master/src/S3/MultipartUploader.php#L90)).\n\nAs a result, all streams that don't have an underlying file are first copied into a new stream backed by \"php://temp\". That means they are written into a temporary file in a location provided by sys_get_temp_dir(). PHP writes the data to disk if the size is larger than 2 MB which is the case for every but maybe the last part of a multipart upload.\n\nThis all brings (a) latency because of copying data to disk, (b) additional space requirements on disk, (c) additional open filehandles and (d) the risk of the disk running full. This is done even if the stream is declared as seekable by it's implementation. And in case of an error and restarting the uploader all this buffering is repeated for parts that are still to be transmitted.\n\nIs there a reason for doing this and depending on the underlying source of a stream? Shouldn't it be the responsibility of the stream's implementation to handle all that?\n\nThe only reason I can think of is that multiple streams all have their own seek position and don't interfere with other consumers of the underlying file in an async program execution context. But shouldn't it be sufficient to call seek() before reading from the stream to make sure it is back in the right position? I am not aware of current multithreading features in other php implementations (HHVM, etc) but at least in plain old PHP I have no situation in mind where a seek() directly followed by a read() in the same \"unit of work\" should be disturbed by other code re-seeking the stream.\n\nFor non-seekable streams I can see that this buffering is necessary because the parts are uploaded concurrently. But if the source stream is seekable I don't think all this is needed.\n\nIn my case (and the reason I am writing all this) I have a seekable stream implementation that handles reading parts of a large file from multiple third-party API calls. Providing that stream to the multipart uploader first buffers the parts on disk which has the high risk of the disk running full in case of multiple concurrent requests in my application. This leaves me with either implementing multipart uploads using the low-level API myself or creating a stream wrapper for my stream implementation faking to be a \"plainfile\".\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "assembledadam": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1081", "title": "Using the SDK for CloudSearch is a pain", "body": "A snippet from a call like this:\n\n```\n$cloudSearchClient->search([\n    'query' => \"(phrase field=_id 'some-permalink')\",\n    'queryParser' => 'structured',\n])->get('hits');\n```\n\nGives me this result:\n\n```\narray:2 [\n  \"id\" => \"some-permalink\"\n  \"fields\" => array:10 [\n    \"category\" => array:1 [\n      0 => \"screenshots\"\n    ]\n    \"permalink\" => array:1 [\n      0 => \"some-permalink\"\n    ]\n    \"date\" => array:1 [\n      0 => \"2016-06-21T11:25:22Z\"\n    ]\n    \"site_permalink\" => array:1 [\n      0 => \"videogamer\"\n    ]\n    \"created_at\" => array:1 [\n      0 => \"2016-06-21T11:24:40Z\"\n    ]\n    \"subtype\" => array:1 [\n      0 => \"images\"\n    ]\n    \"keywords\" => array:2 [\n      0 => \"dead by daylight\"\n      1 => \"pc\"\n    ]\n    \"name_en\" => array:1 [\n      0 => \"Dead by Daylight Screenshots\"\n    ]\n    \"type\" => array:1 [\n      0 => \"content\"\n    ]\n    \"body_en\" => array:1 [\n      0 => \"Check out these screenshots from Dead by Daylight\"\n    ]\n  ]\n]\n```\n\nWhy on earth is every result field an array? Even single value fields (like INT fields) return an array with a single value, which is extremely unhelpful.  \n\nIt wouldn't be SO bad if you could put this straight back into CloudSearch with uploadDocument(), but you can't - the API complains that array types are not accepted for fields with single values, e.g.: `\"Field \"category\" must have array type to have multiple values\".`\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ppaulis": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/924", "title": "random cURL errors on HTTPS requests to SWF and DynamoDB", "body": "Hello!\n\nwe recently switched on our EC2 instances from the v2 to v3 (most recent version) of the PHP SDK. We use SWF, DynamoDB and S3. Since we switched to the v3, we are facing cURL errors that appear completely randomly it seems:\n\nThe application has thrown an exception!\n Aws\\Swf\\Exception\\SwfException\n Error executing \"PollForActivityTask\" on \"https://swf.us-east-1.amazonaws.com\"; AWS HTTP error: cURL error 56: SSL read: error:00000000:lib(0):func(0):reason(0), errno 104 (see http://curl.haxx.se/libcurl/c/libcurl-errors.html)\n\nSometimes the exception appears twice per hour, sometimes once in three hours... there's no scheme.\n\nWe already switched back to an older AMI and updated cURL from 7.35.0 (there is a problem with chunked upload in the 7.35) to 7.36.0 but nothing helps. We are polling SWF for activity tasks with long polling enabled, so there shouldn't be too many requests.\n\nI googled this of course before opening an issue, but the only topics I found either date from 2012-2013 or were related to a broken load balancer on AWS. And that would probably be too much of a coincidence in our case...\n\nDoes anyone know about this problem..? I can't even say if it's a problem in the SDK or something else. So I'm grateful for every hint you can give me!\n\nThanks a lot!\nPascal\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/924/reactions", "total_count": 9, "+1": 9, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Alorel": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/808", "title": "[suggestion] split the composer package into separate components?", "body": "Hi!\n\nOur company only uses the S3 and SQS libraries, however, in order to have these installed via Composer, the entire AWS package needs to be downloaded, inflating Composer's autoload files. Would it perhaps be possible to split the AWS SDK into separately installable components (e.g. `composer require aws/s3-php-dk`) which would then have some requirements of their own (e.g. the s3 package would require aws/common-php)?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/808/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kstich": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/c682b8d0f1d5cf4a933f89e4304e4fb8e4fa78f6", "message": "RDS PreSignedUrl Missing DestinationRegion Fix (#1471)\n\n* Add DestinationRegion to RDS models and documentation overrides for PresignedUrlMiddleware use.\r\n\r\n* Add Changelog Document."}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/25bd24905fff81cf375f67c72d28928e16035289", "message": "S3 \"Size\" Update for ListObjects, ListObjectsV2, ListObjectVersions, and ListParts (#1466)\n\n* Update S3 Size object to reflect being a long.\r\n\r\n* Add Changelog Document."}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/aa80759463253d9877e081340014d13fdadac6cc", "message": "Correct phpunit/phpunit version for 7.2 with lowest. (#1470)"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/e4785a016936017ceed000e9f632f6d950c5cabe", "message": "Update Travis to send coverage for optimal and lowest settings of PHP 7.1. Update CodeCov to report after receiving both coverages. (#1469)"}], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1463", "title": "Retry Specific cURL Error Codes", "body": "Implements a method to retry `CURLE_*_ERROR` based failures for `AwsExceptions` preceeded by `ConnectExceptions` that do not return true from `->isConnectionError()`.\r\n\r\nResolves #924 \r\n\r\n/cc @jeskew ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkopachev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/cb9f2baaaa13ae9cdb6e8299789a4e725626f766", "message": "Change default timeouts documentation to reflect real world value (#1460)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mudhoney": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/9ac39085d84e39e6ca06d3d13dbcd641b78f9341", "message": "use AwsException and fix usage of exception (#1464)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carusogabriel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/6357a8f3639393fb46da98600e3dd576e4cc3fd2", "message": "Fix misspelling class PresignUrlMiddleware (#1461)"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/b54f7504bc68dd1f4f760298a1d80c46b5562fa2", "message": "[CS] Clean up extra lines from documentation (#1455)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qmcree": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1465", "title": "Update `Aws\\PhpHash::$context` docblock with `HashContext` type.", "body": "With PHP 7.2, the `hash` extension was updated to use objects instead of resources. See https://secure.php.net/manual/en/migration72.incompatible.php#migration72.incompatible.hash-ext-to-objects .", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DeepDiver1975": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1424", "title": "Add support for verionId to class StreamWrapper", "body": "This change adds support for versionId to the stream wrapper. This allows to read a version of an object by appending the versionId query string\r\n\r\n```PHP\r\n $s = file_get_contents('s3://bucket/key?versionId=1234567890');\r\n```\r\n\r\nUnit tests have been added.\r\n\r\nPlease let me know if you agree on this change. THX", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mtdowling": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10028966", "body": "Thanks for submitting the first PR!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10028966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171410", "body": "You can use both SDK1 and SDK2 in the same application without any conflicts. SDK1 does not use namespaces, so the namespaces in SDK2 will never cause a conflict. We have a detailed guide that can help walk you through installing both SDKs and using them side by side in the same application: http://docs.amazonwebservices.com/awssdkdocsphp2/latest/sidebysideguide/sdk-php2-welcome-side-by-side-guide.html. This should help you take advantage of the features in the new SDK while still allowing you to use the old version of the SDK until you are able to migrate your application.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10375589", "body": "Client objects have factory methods for each HTTP method. You don't have to use a RequestFactory directly; calling things like `$client->get()`, `$client->put()`, `$client->post()`, etc will use the RequestFactory object owned by the client to create and return a RequestInterface object.\n\nHere's an example of using the client factory methods to create a signed URL (I'm also using a time helper):\n\n```\necho $s3->createPresignedUrl($s3->get(BUCKET . '/testing123.jpg'), '+5 minutes');\n```\n\nHope that helps.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10375589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10433299", "body": "Here are a couple examples from recent forum posts:\nhttps://forums.aws.amazon.com/thread.jspa?threadID=109840&tstart=0\nhttps://forums.aws.amazon.com/message.jspa?messageID=399919#399919\n\nWe'll work on putting a strategy in place to provide better high-level documentation.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10433299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447300", "body": "Sounds good to me. I've removed S3_.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447404", "body": "Multiple versions is the goal\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600446", "body": "If we're following the Symfony2 coding standards, then new lines aren't required for these types of return statements. It's only if the return is the last line of the function and not inside of a conditional block. http://symfony.com/doc/2.0/contributing/code/standards.html#structure\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600487", "body": "I don't know. I just fix those by hand. It actually makes the code less readable in my opinion.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698763", "body": "Thanks, fixed :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959949", "body": "Thanks for pointing this out. This is actually an issue with Guzzle where a Content-Type is not being properly set on a request when a body is specified. I'll update Guzzle to ensure that a Content-Type is set if it can be guessed.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959952", "body": "Thanks for the tip! I'll make this change.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959980", "body": "Good catch. I was unable to pass any sort of `$options` variable to the stream wrapper's rmdir() method, so I've removed that bit of code.  I also made it so that specifying more than just a bucket will trigger an error.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959997", "body": "Good points. I've updated the stream wrapper to use \"seekable\" as a stream_context_option. I've also updated the `getParams()` function to filter out any custom stream context options so that they don't make it into any Amazon S3 command option settings (just calling unset on the known custom options like seekable).\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3473934", "body": "Should this be moved before the ThrottlingErrorChecker?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3473934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474136", "body": "Same here, right?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3516120", "body": "Should this be:\n\n``` php\n} elseif ($global && (!$region || ($region && $description->getData('namespace') !== 'S3'))) {\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3516120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3984828", "body": "Makes sense\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3984828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6724681", "body": "> Removing the section on not using the Phar because it seems that it is version dependent on whether or not it is supported by APC. PHP 5.5's OPcache also supports Phars.\n\nI don't think this recommendation has enough evidence to keep this section.. There are contradicting statements as to whether phars are cached by APC.\n- http://pecl.php.net/package/phar\n- http://www.reddit.com/r/PHP/comments/13uwgk/phar_performance/c77kmjb\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6724681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083679", "body": "I think the options should be documented in this docblock.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083697", "body": "Should have a better description\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083753", "body": "I think that having to pass a CloudTrailClient and S3Client into the iterator would be preferred rather than creating one.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104506", "body": "Could just use `+=` here.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104841", "body": "Can you add a comment that states why you are doing this and adding the Accept-Encoding header (e.g., \"In order for cURL to automatically inflate response data...\")\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983608", "body": "What's the value in defining all of these constants? Do we expect developers to actually use these constants given that the difference between typing \"limit_key\" and `Aws\\Common\\Iterator\\AwsResourceIterator::LIMIT_KEY` is 41 characters (66 characters if you import the class with a `use` statement)?\n\nI don't think constants add any value for data bags like this, and even less sense for data bags that source their data from string values provided from configuration files.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983758", "body": "Regarding the `map` and `filter` functions: Should we add these methods given that PHP already has an idiomatic way of decorating iterators, and that these types of filter and map operations are really simple with generators?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985535", "body": "These values are part of a configuration format, meaning they are already part of an external API. Being able to change the name of these keys seems like a weak argument considering that changing the name of these keys is a breaking change that should only be done in the most extreme cases.\n\nThis approach of defining constants for configuration keys could also lead to inconsistencies in the SDK. For example, would we add constants for configuration formats that have nested hashes and keys?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ashishtilara": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171580", "body": "Thanks for the prompt reply.\n\nHowever, what happens in 6 months time when some of my code uses 1.4, some of it uses 2.0, and some of it uses 2.2? Or in a years time when some is using 3.0?\n\nYou can't (and shouldn't) have to guarantee perfect backwards-compatibility between all future versions.\n\nWhat strategy should I use for using SDKs 2.0, 2.1, 2.2, 3.0, 3.1, etc all in the same PHP context side-by-side? Is there anything that can be done upstream (by you) to help? \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10208466", "body": "@skyzyx Pardon my frustration, but this doesn't really answer my concerns. We have a massive code base, and it is literally impractical for us to move wholesale to a new library version every time you push out an update. We will likely always have classes that use 1.4, others using 1.5 and now potentially new classes using 2.0, and these classes all need to be able to used together. We don't have the resources or the risk-appetite to update everything all at once.\n\nEven though you say you don't anticipate future breaking changes, you can never guarantee that, so we are stuck in a predicament. If there will never be upstream support for use-cases such as ours, then we will just have to figure something out ourselves. Thanks for your input.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10208466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jeremeamia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10175254", "body": "Good catch. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10175254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10237709", "body": "@ashishtilara I'm not sure I fully understand your use case. We've never had anyone come to us that required dependencies on a full gamut of different versions of the SDK within the same codebase. I'd like to better understand what the problem actually is and what solutions you might have in mind. You had mentioned including the version in the namespace, but I have not seen any other libraries that are doing this, and it also is not really compatible with PSR-0. Are their any _other_ libraries that you consume that allow you to run multiple versions in the same codebase? I'd be willing to look at those for ideas, but I'm not personally aware of any other libraries out there that support the type of behavior you are asking for. I really would like to see what we can do to help you, but I'm not sure if there is bulletproof solution that is beneficial to everyone else, that doesn't involve you having to do some refactoring at some point.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10237709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348761", "body": "I responded to your forum post earlier today with a fix: https://forums.aws.amazon.com/thread.jspa?threadID=109616&tstart=0\n\nThe docs are wrong for the Body option. We will work on getting that fixed.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349259", "body": "Yes, `file_get_contents()` should work fine.\n\nAlso, you can use the `EntityBody` object from Guzzle in conjunction with `fopen`:\n\n```\n'Body' => EntityBody::factory(fopen($file, 'r'))\n```\n\nThis might work better for larger files since you won't have to load the entire file into memory at once as you would with `file_get_contents()`.\n\nI apologize for misleading you with my previous comment.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10371999", "body": "Yep, you got it! For any enum-like values we have classes under the Enum namespace for that client. Hopefully we can better call information like that out as we improve our docs.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10371999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372321", "body": "Right here on the GitHub issue tracker is going to be the easiest for us to track. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10373459", "body": "We'll check it out.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10373459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565363", "body": "Instead of `self` or `static`, does using `Enum` work?\n\n```\npublic static function values()\n{\n    $class = get_called_class();\n    if (!isset(Enum::$cache[$class])) {\n        $reflected = new \\ReflectionClass($class);\n        Enum::$cache[$class] = $reflected->getConstants();\n    }\n\n    return Enum::$cache[$class];\n}\n```\n\nThat was the intention of using `self`.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565571", "body": "What happens when you turn on errors beforehand? Do you get any error messages?\n\n```\nerror_reporting(-1);\nini_set('display_errors', 'on');\nrequire 'aws.phar';\n```\n\nWhat version of PHP are you using?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567739", "body": "Suhosin does not allow phars by default. You need to enable phars specifically. I've not personally done this before, but I've read that you can do it by adding a PHP ini setting to the `suhosin.ini` (possibly located at `/etc/php5/cli/conf.d/suhosin.ini` for Ubuntu).\n\n```\nsuhosin.executor.include.whitelist = phar\n```\n\nLet me know how that goes.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2413929", "body": "Happy New Year!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2413929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2567973", "body": "We need to audit which regions we use for the service docs since not all services support us-west-2 or require a region.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2567973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580186", "body": "Whoops!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580191", "body": "Be careful or else soon you'll have to work on Boto. :smile:\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600474", "body": "Do I need to pass something different to cs-fixer to not do that?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2718706", "body": "Awesome! This will be really helpful. Great work.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2718706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2960412", "body": "Good work @mtdowling. And thanks @gwkunze for the helpful insights on this commit.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2960412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474082", "body": "Hmmm... yeah, it probably should be. \"Good eye!\", as my little league coach would say.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474659", "body": "Yep, I already changed that one. Running tests.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3982702", "body": "Maybe a more specific runtime exception like UnexpectedValueException would be better. Also, I think checkIntegrity() would be better returning a boolean value and the download() method should throw the exception. What do you think about that?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3982702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6701930", "body": "What is the rationalization for removing this section? Is there anything that should be kept or recommended in a different way?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6701930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6726395", "body": "Makes sense.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6726395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985117", "body": "Actually, I wish we would have had them earlier. It would've made refactoring a lot easier. I would consider them useful to the internals in case we end up changing our iterator spec in the future.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985217", "body": "You are thinking about a future world in which people are exclusively using PHP 5.4+ or PHP 5.5+. The reason you implemented the MapIterator and FilterIterator classes in Guzzle is because, while PHP does have an idiomatic way of decorating iterators, there are no iterators in PHP 5.3 worth using to decorate with to get this behavior. I thought it would be a nice little addon to expose the usefulness of those iterator classes without having to find and import them. Not an altogether important feature, so if you want to object, I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "skyzyx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10178857", "body": "> However, what happens in 6 months time when some of my code uses 1.4, some of it uses 2.0, and some of it uses 2.2? Or in a years time when some is using 3.0?\n> \n> You can't (and shouldn't) have to guarantee perfect backwards-compatibility between all future versions.\n\nThe SDK should be viewed as a complete set by itself. Once SDK 2.x has complete support for all services, you should plan to migrate fully, and all of the 2.x code in your project should all come from the same version of the SDK.\n\nSDK 1.x started life in 2005 as a third-party open-source project called Tarzan. That codebase lasted for 7 years, and we expect that the code that we've recently shipped should last us another several years \u2014 even if we eventually version it as 3.0, 4.0, etc.\n\nThe reason why this particular change is so impactful is because of the changes that occurred in the PHP language when 5.3 came out. Switching to namespaces forced us to break everything. From the changes we've seen in 5.4 and in previews of 5.5, we don't see changes of this magnitude having to happen again for a long time.\n\n> What strategy should I use for using SDKs 2.0, 2.1, 2.2, 3.0, 3.1, etc all in the same PHP context side-by-side? Is there anything that can be done upstream (by you) to help?\n\nYou shouldn't. Any SDK code that you use should all be the same version of 1.x or all the same version of 2.x (and possibly 3.x and 4.x). Again, it took us 7 years before we had to go back and do a ground-up rewrite of the code.\n\nInstead of thinking in terms of version numbers, think in terms of generations.\n\n**First Generation:**\n- Tarzan 1.0 (2005)\n- Tarzan 1.1 (2005)\n- Tarzan 2.0 (2008)\n- CloudFusion 2.5 (2010; renamed)\n- AWS SDK for PHP 1.0 (2010; renamed; formerly CloudFusion 3.0)\n- ...\n- AWS SDK for PHP 1.5.15 (2012; equivalent to CloudFusion 3.5.15)\n\n**Second Generation:**\n- AWS SDK for PHP 2.0 (2012; equivalent to Guzzle-based SDK for AWS 1.0)\n- ...\n\nWe currently provide compatibility for jumping between _generations_ of SDK. You should use all the same version of one generation alongside all the same version of the other generation. Even though this _appears_ to be a jump from 1.x to 2.x, you shouldn't necessarily expect the same kinds of changes from our eventual 3.0.\n\nIt would be reasonable to suggest that a future 3.0 release might leverage Traits (new in PHP 5.4; not compatible with 5.3). In this case, _some_ changes might be required, but we anticipate them being _adjustments_ to the existing SDK 2.0 API, instead of being a wholesale rewrite that we're presently experiencing with the move from the older Tarzan/CloudFusion codebase to the new Guzzle-based codebase.\n\nAny time we've been forced to release a breaking change, we've made it a point to call it out **very specifically** in our release notes, change log, API reference documentation, and other update-related documentation. On the off-chance that a minor breaking change has to be made, we will continue to thoroughly document those changes in the places that we think people will look (it's _always_ a good idea to read release notes before upgrading, but we know that some customers don't).\n\nIf you're using Composer to install either SDK (definitely a best practice, and the de-facto successor to PEAR/Pyrus), it would be wise to scope updates down to minor releases (e.g., 1.5._, 2.0._) to make sure that you don't jump up to a new major version (e.g., 1._, 2._) without knowing it (whereas I'm defining version numbers as `<architecture>.<major>.<minor>`, like the Linux kernel, Mac OS X, and Firefox releases before 4.0).\n\nMake sense? :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10178857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10563845", "body": "Could you submit a pull request and any relevant unit tests for this?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10563845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2415421", "body": "Yay!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2415421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447141", "body": "Should this really be called `Aws\\S3\\Enum\\Event::S3_REDUCED_REDUNDANCY_LOST_OBJECT`?\n\nIt seems we can strip \"S3_\" from the constant name since it's just a namespace in the S3 API itself.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447257", "body": "`x86_64` and `i386` seem like perfect candidates for Enums (i.e., `X86_64` and `I386`). Perhaps aliased to `64_BIT` and `32_BIT`?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447271", "body": "In the Double Rainbow version of the repository, I'd added plain-english versions of some of these constants. They were grouped under STANDARD_, HIGH_MEM_, HIGH_CPU_, HIGH_IO_ and CLUSTER_.\n\nThinking about readability, CLUSTER_GPU_4X (or even CLUSTER_GPU_4XLARGE) reads better than CG1_4XLARGE IMO.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447337", "body": "Is the intention here to move to supporting multiple versions of a service? Or simply to notate which version we're working with?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447341", "body": "Sexy. Thanks. :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023247", "body": "Was removing this return intentional?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5337386", "body": "Actually, PSR-1 explicitly avoids making recommendations for variable/property names\u2026 only method names.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5337386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985599", "body": "Allowing `map()` and `filter()` methods which are _chainable_ would be farking awesome.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "martinbean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348879", "body": "Thanks, @jeremeamia. I tried the wrapping the file name in `fopen()` as per your suggestion, but get the following exception now:\n\n> Validation errors: [Body] must be of type string or object\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348983", "body": "Actually, I think I may have solved it: I used `file_get_contents()` instead.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349422", "body": "Hi Jeremy. No problem. Thanks for clearing this up for me! Much appreciated. I\u2019m new to this Guzzle :wink: \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10362302", "body": "Another question: how do I mark a uploaded file as public? I\u2019m reading the API documentation again (http://docs.amazonwebservices.com/aws-sdk-php-2/latest/class-Aws.S3.S3Client.html) but it\u2019s not too clear the expected values. I\u2019m guessing I want to set something for the `ACL` key, but not _what_ to set it as. Sample values would be great if possible?\n\n**EDIT:** Fixed it myself (again)! To mark a file as public, I imported the `Aws\\S3\\Enum\\CannedAcl` class and used the `CannedAcl::PUBLIC_READ` class constant.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10362302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372056", "body": "Cool. Is there a channel where I can report small things like this that are hard-to-understand or could be better-documented if I come across anything?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372342", "body": "No problem.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10561583", "body": "I\u2019ve decided to use [Uploadify](http://uploadify.com) to upload the file via Flash, but still having difficulties.\n\nWith the new PHP SDK, how do I pass custom fields as policy options to `PostObject`? I have the following in my PHP script:\n\n``` php\n$bucket = (string) $container['misc_config']->images->amazon->bucket;\n$options = array(\n    'acl' => CannedAcl::PUBLIC_READ,\n    'Content-Type' => 'audio/mpeg',\n    'key' => 'audio/a-test-podcast.mp3',\n    'success_action_redirect' => (string) $container['misc_config']->main->base_url . 'upload/success/',\n    'success_action_status' => 201,\n    //array('starts-with', '$key', 'audio/'),\n    //array('starts-with', '$folder', ''),\n    array('starts-with', '$Filename', ''),\n    //array('starts-with', '$\n);\n$postObject = new PostObject($container['amazon_s3'], $bucket, $options);\n```\n\nBut I keep getting the following error in the XML response:\n\n> Invalid Policy: Invalid Condition: unknown operation 'array'.\n\nIf I remove `array('starts-with', '$Filename', '')` from the above code snippet, then I get the following error message:\n\n> Invalid according to Policy: Extra input fields: filename\n\nWhat\u2019s the syntax for adding these additional fields to my policy?\n\n**EDIT:** Found the solution, and I don\u2019t even know how! In my `$options` array, I now have:\n\n``` php\n$options = array(\n    'acl' => CannedAcl::PUBLIC_READ,\n    'Content-Type' => 'audio/mpeg',\n    'key' => 'audio/a-test-podcast.mp3',\n    'success_action_redirect' => (string) $container['misc_config']->main->base_url . 'upload/success/',\n    'success_action_status' => 201,\n    'filename' => '^'\n);\n```\n\nDon\u2019t ask my have I managed to arrive at this solution, since it\u2019s not documented anywhere I don\u2019t think!\n\nAlthough I am now faced with yet another issue. When using a Flash-based uploaded, how can I actually redirect on successful upload? My JavaScript function to instantiate Uploadify looks like this:\n\n``` js\n$('#file_upload').uploadify({\n    'buttonClass': 'button',\n    'buttonText': 'Upload',\n    'formData': <?php echo json_encode($formInputs); ?>,\n    'fileObjName': 'file',\n    'fileTypeExts': '*.mp3',\n    'height': 36,\n    'multi': false,\n    'onUploadError': function(file, errorCode, errorMsg, errorString) {\n        console.log('onUploadError', file, errorCode, errorMsg, errorString);\n    },\n    'onUploadSuccess': function(file, data, response) {\n        console.log('onUploadSuccess', file, data, response);\n    },\n    'swf': '/assets/site/swf/uploadify.swf',\n    'uploader': '<?php echo $uploadPath; ?>',\n    'width': 120\n});\n```\n\nThe content of my success page is logged in the console as the `data` argument, but I\u2019d like to actually _redirect_ to that page, rather than having the response available to me in JavaScript. Is this an issue with Flash, JavaScript, Uploadify, what?\n\nFinally, how can I enforce that only files with an **.mp3** extension are uploaded?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10561583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dominikgehl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374435", "body": "Ok, found out how to make it work:\n\n```\n$rf->create(\n         'GET', \n         $s3->getBaseUrl() . '/' . BUCKET . '/testing123.jpg'\n    )->setClient($s3)\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374486", "body": "Would be nice to have a wrapper though which accepted a bucket name, file name and expiration time and would do the above magic behind the scenes ...\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "digitaldoener": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10566491", "body": "``` php\npublic static function values()\n{\n    $class = get_called_class();\n    if (!isset(Enum::$cache[$class])) {\n        $reflected = new \\ReflectionClass($class);\n        Enum::$cache[$class] = $reflected->getConstants();\n    }\n\n    return static::$cache[$class];\n}\n```\n\nDo not work.\n\nI think this bug report https://bugs.php.net/bug.php?id=53915 (fixed in 5.3.6) should characterize the error. The bug should occur up to php version 5.3.6, too. Since \\Aws\\Common\\Enum.php is an abstract class and every of the listed subclasses (http://docs.amazonwebservices.com/aws-sdk-php-2/latest/class-Aws.Common.Enum.html) inherid from this class the error should effect every where self::[constant] is used.\n\nLike in \n\n``` php\nnamespace Aws\\DynamoDb\\Enum;\n\nuse Aws\\Common\\Enum;\n\nclass Type extends Enum\n{\n    const S  = 'S';\n    const N  = 'N';\n    const B  = 'B';\n\n    const SS = 'SS';\n    const NS = 'NS';\n    const BS = 'BS';\n\n    const STRING     = self::S;\n    const NUMBER     = self::N;\n    const BINARY     = self::B;\n\n    const STRING_SET = self::SS;\n    const NUMBER_SET = self::NS;\n    const BINARY_SET = self::BS;\n}\n```\n\nI use this call to cause the error\n\n``` php\n                Zend_Debug::dump(\\Aws\\DynamoDb\\Enum\\Type::values());\n                $test = array(\n                        'Id' => '10101',\n                        'test' => 10101,\n                );\n                Zend_Debug::dump(\\Aws\\DynamoDb\\Model\\Item::fromArray($test));\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10566491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "semiosis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567139", "body": "Still no errors/output with the extra error reporting stuff.\n\nPHP 5.3.10-1ubuntu3.4 with Suhosin-Patch (cli) (built: Sep 12 2012 18:59:41) \n(ubuntu precise with latest updates)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10568332", "body": "Success!  That worked perfectly.  Thank you so much.  :D\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10568332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "supercool27": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2465989", "body": "OK..\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2465989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "stloyd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698729", "body": "Typo =) `;` =)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/3520621", "body": "IMO you should add it to `suggest`.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/3520621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gwkunze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959456", "body": "Instead of turning $mode into an octal string, isn't it simpler to compare with octal integer literals? Something like:\n\n``` php\nif ($mode & 0700 == 0700) {\n    $params['ACL'] = 'public-read';\n} elseif ($mode & 0600 == 0600) {\n    $params['ACL'] = 'authenticated-read';\n} else {\n    $params['ACL'] = 'private';\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959477", "body": "I'm not exactly sure when (if ever) STREAM_MKDIR_RECURSIVE is set since the rmdir php function has not arguments to specify it. But regardless, the fact that if it _is_ set this implementation will disregard any 'Key' parameter and remove the entire bucket:\n\n``` php\nrmdir('s3://my-bucket/some-dir'); // Assuming STREAM_MKDIR_RECURSIVE is set this will remove my-bucket completely\n```\n\nI think this is kind of scary and non-intuitive and it might be better to make this into a slightly less destructive implementation.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959496", "body": "Unless I'm mistaken, the semicolon (and practically any, if not any character) is a legal in a Key value for an S3 Object. By using it as a separator for options I think you're limiting the use of the stream wrapper, in some - to be honest - esoteric situations. So this might be a non-issue. \nOtherwise the only thing I can imagine for these kinds of options if to add them before the key instead of after it, although that might be ugly and non-url-ish.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959506", "body": "Or you could add features like 'seekable' to the stream context options. But that would require changing the stream context option value so that the options that are passed verbatim to the various commands are under some key so other kinds of options like 'seekable' can be stored in there as well.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959540", "body": "I use the S3StreamWrapper so that [Symfony](https://github.com/symfony/symfony) and [Assetic](https://github.com/symfony/AsseticBundle) can install their resources (css, images and javascript) to S3 so the content can be hosted by CloudFront. Since you can only provide a location where it will copy all the resources you can effectively only set a single stream context. This means you can't use the stream context options to set the Content-Type header properly unless you want them to be the same for all your resources (which you don't :) ) \n\nThis is the reason my [implementation](https://github.com/gwkunze/S3StreamWrapper/blob/master/src/S3StreamWrapper/S3StreamWrapper.php#L330) tries to detect the MIME type by looking at the extension of the key. It might be better to use the [FileInfo](http://www.php.net/manual/en/book.fileinfo.php) so file extensions aren't needed.\n\nSo perhaps a feature similar to this, or maybe the ability to add a callback function to the stream context options which can inspect and modify the parameters before an object is written would be nice.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pborreli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023312", "body": "yes, as parent::wait is void\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bakura10": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332641", "body": "Should be $publicKey for PSR-1\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332647", "body": "Should be $privateKey for PSR-1\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332651", "body": "Should be $privateDetails\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332657", "body": "You guessed it... =)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gws": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200223", "body": "Might `if (PHP_VERSION_ID >= 50400)` work better here? It's designed for comparisons, and version strings can have interesting vendor-specific attributes in them.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "datibbaw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200876", "body": "Seems like a good idea :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"mrmark": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1436", "title": "Issues with NFS mounts and S3", "body": "Hello!\r\n\r\nThe root of the problem is that the SDK does not always close open file handlers.  This is not a problem with non-NFS mounts and it is only a problem if you attempt to delete the folder in which the open file handler is using.\r\n\r\n**File download example use case:**\r\n* Create a temporary directory on the NFS mount.\r\n* Use `\\Aws\\S3\\S3Client::getObject` to download an object *that does not exist in S3*.  Set `SaveAs` to a file path within the temporary directory on the NFS mount.\r\n* Delete the temporary directory by iterating files and deleting each one.  Once the directory is empty, remove the directory.\r\n\r\n*Workaround*: instead of passing in a file path into `SaveAs`, pass in the file `resource` handler itself and ensure it is closed after calling `\\Aws\\S3\\S3Client::getObject`.\r\n\r\n**Multipart upload example use case:**\r\n* Create a temporary directory on the NFS mount.\r\n* Use `\\Aws\\S3\\S3ClientTrait::upload` to upload a large file which would trigger multipart upload (16Mb or larger).\r\n* Delete the temporary directory by iterating files and deleting each one.  Once the directory is empty, remove the directory.\r\n\r\n*Workaround*: None found, need to avoid using multipart uploads by using `\\Aws\\S3\\S3Client::putObject`.\r\n\r\n**Example error:**\r\nBoth of the above use cases result in an error that looks like this:\r\n> Warning: unlink(/path/to/directory/being/deleted/.nfs676dc60d2899deb8000000c5): Device or resource busy in /path/to/script.php on line X\r\n\r\nSome info about the `.nfs` files, http://nfs.sourceforge.net/#faq_d2\r\n\r\n**Solutions:**\r\n* Update the SDK to close these?\r\n* Is it possible for me to add middleware or listen to some events to automatically close these?\r\n* Others? Open to suggestions.\r\n\r\nCheers and thanks for the help.  This is likely an edge case, so I'll understand if there isn't much that can be done.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "et304383": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1323", "title": "Please add/fix support for assume role CLI profiles in .aws/credentials", "body": "#1030 was closed and appears to remain unresolved as of 3.31.0.\r\n\r\nI expect that if I have this in `.aws/credentials`:\r\n\r\n```\r\n[profile1]\r\noutput = json\r\nregion = us-east-1\r\naws_access_key_id = A**************\r\naws_secret_access_key = *****************\r\n\r\n[profile2]\r\noutput = json\r\nregion = us-east-1\r\nrole_arn = arn:aws:iam::123456789012:role/Developer\r\nsource_profile = profile1\r\n```\r\n\r\nI should be able to simply set the env var:\r\n\r\n```\r\nexport AWS_PROFILE=profile2\r\n```\r\n\r\nAnd then this should work:\r\n```\r\n$ec2_client = new Aws\\Ec2\\Ec2Client([\r\n  'region' => 'us-east-1',\r\n  'version' => 'latest'\r\n]);\r\n```\r\n\r\nThis does not.  As I noted on the other issue, CredentialsProvider is throwing this error:\r\n\r\n```\r\nFatal error: Uncaught Aws\\Exception\\CredentialsException: No credentials present in INI profile 'profile2' (/var/www/.aws/credentials) in /var/www/html/vendor/aws/aws-sdk-php/src/Credentials/CredentialProvider.php:394\r\n```\r\n\r\nThis should work exactly like boto3 and just work.  The SDK should detect that the profile is an assume role type with a role_arn value and perform the assume role call to get credentials.  **I should not have to modify the code to explicitly declare a credentials provider**.\r\n\r\nIf I am simply missing a step please clarify, but I believe code should be agnostic to whether it's running with the env var AWS_PROFILE set or running on EC2.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1323/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justin-yan": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1301", "title": "Default Region for Client Instantiation", "body": "Tried to find existing or similar issues but didn't spot any - #1239 might be kind of similar.\r\n\r\nThe immediate problem I'm facing is that I would like to be able to have a default region that comes from the credential provider chain.  An example from the Java SDK: https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-region-selection.html#default-region-provider-chain\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bradynpoulsen": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1239", "title": "Feature: Configure Services' Endpoint URLs via Environment Variables", "body": "I've been looking the documentation about environment variables and see that you are able to configure credentials, regions, and profiles using environment variables, but I do not see a way to configure the endpoint url option to point to our internal proxy.\r\n\r\nMy suggestion is to configure the endpoint url if either the `AWS_<REGION>_<SERVICE>_ENDPOINT` or `AWS_<SERVICE>_ENDPOINT` (in that order of priority) environment variables are available.\r\n\r\nI suggest making this change in one of these locations (that I have found so far) in order of suggestion preference:\r\n * [`Aws\\ClientResolver::_default_endpoint_provider`](https://github.com/aws/aws-sdk-php/blob/master/src/ClientResolver.php#L615-L619)\r\n * [`Aws\\Endpoint\\PartitionEndpointProvider::getPartition`](https://github.com/aws/aws-sdk-php/blob/master/src/Endpoint/PartitionEndpointProvider.php#L38-L47)\r\n\r\nFor reference purposes:\r\n * [`Aws\\Credentials\\CredentialsProvider`](https://github.com/aws/aws-sdk-php/blob/master/src/Credentials/CredentialProvider.php#L214-L229) use of environment variables\r\n * [PHP `getenv` Documentation](http://php.net/manual/en/function.getenv.php)", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1243", "title": "Added support to configure client endpoints through environment variables", "body": "Closes #1239", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "umesecke": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1101", "title": "Discussing MultipartUploader's handling of seekable streams", "body": "The multipart uploader does some 'special' handling of streams I'd like to discuss.\n\nStreams are only treated as seekable if the underlying resource is a filehandle (\"wrapper_type = plainfile\", see [AbstractUploader::getUploadCommands()](https://github.com/aws/aws-sdk-php/blob/master/src/Multipart/AbstractUploader.php#L46)). In the MultipartUploader implementations for S3 and Glacier there is even access to the underlying url and a new stream is created opening the file for each part, bypassing the original stream (see [MultipartUploader::createPart()](https://github.com/aws/aws-sdk-php/blob/master/src/S3/MultipartUploader.php#L90)).\n\nAs a result, all streams that don't have an underlying file are first copied into a new stream backed by \"php://temp\". That means they are written into a temporary file in a location provided by sys_get_temp_dir(). PHP writes the data to disk if the size is larger than 2 MB which is the case for every but maybe the last part of a multipart upload.\n\nThis all brings (a) latency because of copying data to disk, (b) additional space requirements on disk, (c) additional open filehandles and (d) the risk of the disk running full. This is done even if the stream is declared as seekable by it's implementation. And in case of an error and restarting the uploader all this buffering is repeated for parts that are still to be transmitted.\n\nIs there a reason for doing this and depending on the underlying source of a stream? Shouldn't it be the responsibility of the stream's implementation to handle all that?\n\nThe only reason I can think of is that multiple streams all have their own seek position and don't interfere with other consumers of the underlying file in an async program execution context. But shouldn't it be sufficient to call seek() before reading from the stream to make sure it is back in the right position? I am not aware of current multithreading features in other php implementations (HHVM, etc) but at least in plain old PHP I have no situation in mind where a seek() directly followed by a read() in the same \"unit of work\" should be disturbed by other code re-seeking the stream.\n\nFor non-seekable streams I can see that this buffering is necessary because the parts are uploaded concurrently. But if the source stream is seekable I don't think all this is needed.\n\nIn my case (and the reason I am writing all this) I have a seekable stream implementation that handles reading parts of a large file from multiple third-party API calls. Providing that stream to the multipart uploader first buffers the parts on disk which has the high risk of the disk running full in case of multiple concurrent requests in my application. This leaves me with either implementing multipart uploads using the low-level API myself or creating a stream wrapper for my stream implementation faking to be a \"plainfile\".\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "assembledadam": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1081", "title": "Using the SDK for CloudSearch is a pain", "body": "A snippet from a call like this:\n\n```\n$cloudSearchClient->search([\n    'query' => \"(phrase field=_id 'some-permalink')\",\n    'queryParser' => 'structured',\n])->get('hits');\n```\n\nGives me this result:\n\n```\narray:2 [\n  \"id\" => \"some-permalink\"\n  \"fields\" => array:10 [\n    \"category\" => array:1 [\n      0 => \"screenshots\"\n    ]\n    \"permalink\" => array:1 [\n      0 => \"some-permalink\"\n    ]\n    \"date\" => array:1 [\n      0 => \"2016-06-21T11:25:22Z\"\n    ]\n    \"site_permalink\" => array:1 [\n      0 => \"videogamer\"\n    ]\n    \"created_at\" => array:1 [\n      0 => \"2016-06-21T11:24:40Z\"\n    ]\n    \"subtype\" => array:1 [\n      0 => \"images\"\n    ]\n    \"keywords\" => array:2 [\n      0 => \"dead by daylight\"\n      1 => \"pc\"\n    ]\n    \"name_en\" => array:1 [\n      0 => \"Dead by Daylight Screenshots\"\n    ]\n    \"type\" => array:1 [\n      0 => \"content\"\n    ]\n    \"body_en\" => array:1 [\n      0 => \"Check out these screenshots from Dead by Daylight\"\n    ]\n  ]\n]\n```\n\nWhy on earth is every result field an array? Even single value fields (like INT fields) return an array with a single value, which is extremely unhelpful.  \n\nIt wouldn't be SO bad if you could put this straight back into CloudSearch with uploadDocument(), but you can't - the API complains that array types are not accepted for fields with single values, e.g.: `\"Field \"category\" must have array type to have multiple values\".`\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/1081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ppaulis": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/924", "title": "random cURL errors on HTTPS requests to SWF and DynamoDB", "body": "Hello!\n\nwe recently switched on our EC2 instances from the v2 to v3 (most recent version) of the PHP SDK. We use SWF, DynamoDB and S3. Since we switched to the v3, we are facing cURL errors that appear completely randomly it seems:\n\nThe application has thrown an exception!\n Aws\\Swf\\Exception\\SwfException\n Error executing \"PollForActivityTask\" on \"https://swf.us-east-1.amazonaws.com\"; AWS HTTP error: cURL error 56: SSL read: error:00000000:lib(0):func(0):reason(0), errno 104 (see http://curl.haxx.se/libcurl/c/libcurl-errors.html)\n\nSometimes the exception appears twice per hour, sometimes once in three hours... there's no scheme.\n\nWe already switched back to an older AMI and updated cURL from 7.35.0 (there is a problem with chunked upload in the 7.35) to 7.36.0 but nothing helps. We are polling SWF for activity tasks with long polling enabled, so there shouldn't be too many requests.\n\nI googled this of course before opening an issue, but the only topics I found either date from 2012-2013 or were related to a broken load balancer on AWS. And that would probably be too much of a coincidence in our case...\n\nDoes anyone know about this problem..? I can't even say if it's a problem in the SDK or something else. So I'm grateful for every hint you can give me!\n\nThanks a lot!\nPascal\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/924/reactions", "total_count": 9, "+1": 9, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Alorel": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/808", "title": "[suggestion] split the composer package into separate components?", "body": "Hi!\n\nOur company only uses the S3 and SQS libraries, however, in order to have these installed via Composer, the entire AWS package needs to be downloaded, inflating Composer's autoload files. Would it perhaps be possible to split the AWS SDK into separately installable components (e.g. `composer require aws/s3-php-dk`) which would then have some requirements of their own (e.g. the s3 package would require aws/common-php)?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/808/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kstich": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/c682b8d0f1d5cf4a933f89e4304e4fb8e4fa78f6", "message": "RDS PreSignedUrl Missing DestinationRegion Fix (#1471)\n\n* Add DestinationRegion to RDS models and documentation overrides for PresignedUrlMiddleware use.\r\n\r\n* Add Changelog Document."}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/25bd24905fff81cf375f67c72d28928e16035289", "message": "S3 \"Size\" Update for ListObjects, ListObjectsV2, ListObjectVersions, and ListParts (#1466)\n\n* Update S3 Size object to reflect being a long.\r\n\r\n* Add Changelog Document."}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/aa80759463253d9877e081340014d13fdadac6cc", "message": "Correct phpunit/phpunit version for 7.2 with lowest. (#1470)"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/e4785a016936017ceed000e9f632f6d950c5cabe", "message": "Update Travis to send coverage for optimal and lowest settings of PHP 7.1. Update CodeCov to report after receiving both coverages. (#1469)"}], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1463", "title": "Retry Specific cURL Error Codes", "body": "Implements a method to retry `CURLE_*_ERROR` based failures for `AwsExceptions` preceeded by `ConnectExceptions` that do not return true from `->isConnectionError()`.\r\n\r\nResolves #924 \r\n\r\n/cc @jeskew ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkopachev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/cb9f2baaaa13ae9cdb6e8299789a4e725626f766", "message": "Change default timeouts documentation to reflect real world value (#1460)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mudhoney": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/9ac39085d84e39e6ca06d3d13dbcd641b78f9341", "message": "use AwsException and fix usage of exception (#1464)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carusogabriel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/6357a8f3639393fb46da98600e3dd576e4cc3fd2", "message": "Fix misspelling class PresignUrlMiddleware (#1461)"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/commits/b54f7504bc68dd1f4f760298a1d80c46b5562fa2", "message": "[CS] Clean up extra lines from documentation (#1455)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qmcree": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1465", "title": "Update `Aws\\PhpHash::$context` docblock with `HashContext` type.", "body": "With PHP 7.2, the `hash` extension was updated to use objects instead of resources. See https://secure.php.net/manual/en/migration72.incompatible.php#migration72.incompatible.hash-ext-to-objects .", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DeepDiver1975": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/1424", "title": "Add support for verionId to class StreamWrapper", "body": "This change adds support for versionId to the stream wrapper. This allows to read a version of an object by appending the versionId query string\r\n\r\n```PHP\r\n $s = file_get_contents('s3://bucket/key?versionId=1234567890');\r\n```\r\n\r\nUnit tests have been added.\r\n\r\nPlease let me know if you agree on this change. THX", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mtdowling": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10028966", "body": "Thanks for submitting the first PR!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10028966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171410", "body": "You can use both SDK1 and SDK2 in the same application without any conflicts. SDK1 does not use namespaces, so the namespaces in SDK2 will never cause a conflict. We have a detailed guide that can help walk you through installing both SDKs and using them side by side in the same application: http://docs.amazonwebservices.com/awssdkdocsphp2/latest/sidebysideguide/sdk-php2-welcome-side-by-side-guide.html. This should help you take advantage of the features in the new SDK while still allowing you to use the old version of the SDK until you are able to migrate your application.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10375589", "body": "Client objects have factory methods for each HTTP method. You don't have to use a RequestFactory directly; calling things like `$client->get()`, `$client->put()`, `$client->post()`, etc will use the RequestFactory object owned by the client to create and return a RequestInterface object.\n\nHere's an example of using the client factory methods to create a signed URL (I'm also using a time helper):\n\n```\necho $s3->createPresignedUrl($s3->get(BUCKET . '/testing123.jpg'), '+5 minutes');\n```\n\nHope that helps.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10375589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10433299", "body": "Here are a couple examples from recent forum posts:\nhttps://forums.aws.amazon.com/thread.jspa?threadID=109840&tstart=0\nhttps://forums.aws.amazon.com/message.jspa?messageID=399919#399919\n\nWe'll work on putting a strategy in place to provide better high-level documentation.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10433299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447300", "body": "Sounds good to me. I've removed S3_.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447404", "body": "Multiple versions is the goal\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600446", "body": "If we're following the Symfony2 coding standards, then new lines aren't required for these types of return statements. It's only if the return is the last line of the function and not inside of a conditional block. http://symfony.com/doc/2.0/contributing/code/standards.html#structure\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600487", "body": "I don't know. I just fix those by hand. It actually makes the code less readable in my opinion.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698763", "body": "Thanks, fixed :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959949", "body": "Thanks for pointing this out. This is actually an issue with Guzzle where a Content-Type is not being properly set on a request when a body is specified. I'll update Guzzle to ensure that a Content-Type is set if it can be guessed.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959952", "body": "Thanks for the tip! I'll make this change.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959980", "body": "Good catch. I was unable to pass any sort of `$options` variable to the stream wrapper's rmdir() method, so I've removed that bit of code.  I also made it so that specifying more than just a bucket will trigger an error.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959997", "body": "Good points. I've updated the stream wrapper to use \"seekable\" as a stream_context_option. I've also updated the `getParams()` function to filter out any custom stream context options so that they don't make it into any Amazon S3 command option settings (just calling unset on the known custom options like seekable).\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3473934", "body": "Should this be moved before the ThrottlingErrorChecker?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3473934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474136", "body": "Same here, right?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3516120", "body": "Should this be:\n\n``` php\n} elseif ($global && (!$region || ($region && $description->getData('namespace') !== 'S3'))) {\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3516120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3984828", "body": "Makes sense\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3984828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6724681", "body": "> Removing the section on not using the Phar because it seems that it is version dependent on whether or not it is supported by APC. PHP 5.5's OPcache also supports Phars.\n\nI don't think this recommendation has enough evidence to keep this section.. There are contradicting statements as to whether phars are cached by APC.\n- http://pecl.php.net/package/phar\n- http://www.reddit.com/r/PHP/comments/13uwgk/phar_performance/c77kmjb\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6724681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083679", "body": "I think the options should be documented in this docblock.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083697", "body": "Should have a better description\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083753", "body": "I think that having to pass a CloudTrailClient and S3Client into the iterator would be preferred rather than creating one.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8083753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104506", "body": "Could just use `+=` here.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104841", "body": "Can you add a comment that states why you are doing this and adding the Accept-Encoding header (e.g., \"In order for cURL to automatically inflate response data...\")\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8104841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983608", "body": "What's the value in defining all of these constants? Do we expect developers to actually use these constants given that the difference between typing \"limit_key\" and `Aws\\Common\\Iterator\\AwsResourceIterator::LIMIT_KEY` is 41 characters (66 characters if you import the class with a `use` statement)?\n\nI don't think constants add any value for data bags like this, and even less sense for data bags that source their data from string values provided from configuration files.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983758", "body": "Regarding the `map` and `filter` functions: Should we add these methods given that PHP already has an idiomatic way of decorating iterators, and that these types of filter and map operations are really simple with generators?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8983758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985535", "body": "These values are part of a configuration format, meaning they are already part of an external API. Being able to change the name of these keys seems like a weak argument considering that changing the name of these keys is a breaking change that should only be done in the most extreme cases.\n\nThis approach of defining constants for configuration keys could also lead to inconsistencies in the SDK. For example, would we add constants for configuration formats that have nested hashes and keys?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ashishtilara": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171580", "body": "Thanks for the prompt reply.\n\nHowever, what happens in 6 months time when some of my code uses 1.4, some of it uses 2.0, and some of it uses 2.2? Or in a years time when some is using 3.0?\n\nYou can't (and shouldn't) have to guarantee perfect backwards-compatibility between all future versions.\n\nWhat strategy should I use for using SDKs 2.0, 2.1, 2.2, 3.0, 3.1, etc all in the same PHP context side-by-side? Is there anything that can be done upstream (by you) to help? \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10171580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10208466", "body": "@skyzyx Pardon my frustration, but this doesn't really answer my concerns. We have a massive code base, and it is literally impractical for us to move wholesale to a new library version every time you push out an update. We will likely always have classes that use 1.4, others using 1.5 and now potentially new classes using 2.0, and these classes all need to be able to used together. We don't have the resources or the risk-appetite to update everything all at once.\n\nEven though you say you don't anticipate future breaking changes, you can never guarantee that, so we are stuck in a predicament. If there will never be upstream support for use-cases such as ours, then we will just have to figure something out ourselves. Thanks for your input.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10208466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jeremeamia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10175254", "body": "Good catch. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10175254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10237709", "body": "@ashishtilara I'm not sure I fully understand your use case. We've never had anyone come to us that required dependencies on a full gamut of different versions of the SDK within the same codebase. I'd like to better understand what the problem actually is and what solutions you might have in mind. You had mentioned including the version in the namespace, but I have not seen any other libraries that are doing this, and it also is not really compatible with PSR-0. Are their any _other_ libraries that you consume that allow you to run multiple versions in the same codebase? I'd be willing to look at those for ideas, but I'm not personally aware of any other libraries out there that support the type of behavior you are asking for. I really would like to see what we can do to help you, but I'm not sure if there is bulletproof solution that is beneficial to everyone else, that doesn't involve you having to do some refactoring at some point.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10237709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348761", "body": "I responded to your forum post earlier today with a fix: https://forums.aws.amazon.com/thread.jspa?threadID=109616&tstart=0\n\nThe docs are wrong for the Body option. We will work on getting that fixed.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349259", "body": "Yes, `file_get_contents()` should work fine.\n\nAlso, you can use the `EntityBody` object from Guzzle in conjunction with `fopen`:\n\n```\n'Body' => EntityBody::factory(fopen($file, 'r'))\n```\n\nThis might work better for larger files since you won't have to load the entire file into memory at once as you would with `file_get_contents()`.\n\nI apologize for misleading you with my previous comment.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10371999", "body": "Yep, you got it! For any enum-like values we have classes under the Enum namespace for that client. Hopefully we can better call information like that out as we improve our docs.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10371999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372321", "body": "Right here on the GitHub issue tracker is going to be the easiest for us to track. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10373459", "body": "We'll check it out.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10373459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565363", "body": "Instead of `self` or `static`, does using `Enum` work?\n\n```\npublic static function values()\n{\n    $class = get_called_class();\n    if (!isset(Enum::$cache[$class])) {\n        $reflected = new \\ReflectionClass($class);\n        Enum::$cache[$class] = $reflected->getConstants();\n    }\n\n    return Enum::$cache[$class];\n}\n```\n\nThat was the intention of using `self`.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565571", "body": "What happens when you turn on errors beforehand? Do you get any error messages?\n\n```\nerror_reporting(-1);\nini_set('display_errors', 'on');\nrequire 'aws.phar';\n```\n\nWhat version of PHP are you using?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10565571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567739", "body": "Suhosin does not allow phars by default. You need to enable phars specifically. I've not personally done this before, but I've read that you can do it by adding a PHP ini setting to the `suhosin.ini` (possibly located at `/etc/php5/cli/conf.d/suhosin.ini` for Ubuntu).\n\n```\nsuhosin.executor.include.whitelist = phar\n```\n\nLet me know how that goes.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2413929", "body": "Happy New Year!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2413929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2567973", "body": "We need to audit which regions we use for the service docs since not all services support us-west-2 or require a region.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2567973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580186", "body": "Whoops!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580191", "body": "Be careful or else soon you'll have to work on Boto. :smile:\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2580191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600474", "body": "Do I need to pass something different to cs-fixer to not do that?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2600474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2718706", "body": "Awesome! This will be really helpful. Great work.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2718706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2960412", "body": "Good work @mtdowling. And thanks @gwkunze for the helpful insights on this commit.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2960412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474082", "body": "Hmmm... yeah, it probably should be. \"Good eye!\", as my little league coach would say.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474659", "body": "Yep, I already changed that one. Running tests.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3474659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3982702", "body": "Maybe a more specific runtime exception like UnexpectedValueException would be better. Also, I think checkIntegrity() would be better returning a boolean value and the download() method should throw the exception. What do you think about that?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/3982702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6701930", "body": "What is the rationalization for removing this section? Is there anything that should be kept or recommended in a different way?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6701930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6726395", "body": "Makes sense.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6726395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985117", "body": "Actually, I wish we would have had them earlier. It would've made refactoring a lot easier. I would consider them useful to the internals in case we end up changing our iterator spec in the future.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985217", "body": "You are thinking about a future world in which people are exclusively using PHP 5.4+ or PHP 5.5+. The reason you implemented the MapIterator and FilterIterator classes in Guzzle is because, while PHP does have an idiomatic way of decorating iterators, there are no iterators in PHP 5.3 worth using to decorate with to get this behavior. I thought it would be a nice little addon to expose the usefulness of those iterator classes without having to find and import them. Not an altogether important feature, so if you want to object, I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "skyzyx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10178857", "body": "> However, what happens in 6 months time when some of my code uses 1.4, some of it uses 2.0, and some of it uses 2.2? Or in a years time when some is using 3.0?\n> \n> You can't (and shouldn't) have to guarantee perfect backwards-compatibility between all future versions.\n\nThe SDK should be viewed as a complete set by itself. Once SDK 2.x has complete support for all services, you should plan to migrate fully, and all of the 2.x code in your project should all come from the same version of the SDK.\n\nSDK 1.x started life in 2005 as a third-party open-source project called Tarzan. That codebase lasted for 7 years, and we expect that the code that we've recently shipped should last us another several years \u2014 even if we eventually version it as 3.0, 4.0, etc.\n\nThe reason why this particular change is so impactful is because of the changes that occurred in the PHP language when 5.3 came out. Switching to namespaces forced us to break everything. From the changes we've seen in 5.4 and in previews of 5.5, we don't see changes of this magnitude having to happen again for a long time.\n\n> What strategy should I use for using SDKs 2.0, 2.1, 2.2, 3.0, 3.1, etc all in the same PHP context side-by-side? Is there anything that can be done upstream (by you) to help?\n\nYou shouldn't. Any SDK code that you use should all be the same version of 1.x or all the same version of 2.x (and possibly 3.x and 4.x). Again, it took us 7 years before we had to go back and do a ground-up rewrite of the code.\n\nInstead of thinking in terms of version numbers, think in terms of generations.\n\n**First Generation:**\n- Tarzan 1.0 (2005)\n- Tarzan 1.1 (2005)\n- Tarzan 2.0 (2008)\n- CloudFusion 2.5 (2010; renamed)\n- AWS SDK for PHP 1.0 (2010; renamed; formerly CloudFusion 3.0)\n- ...\n- AWS SDK for PHP 1.5.15 (2012; equivalent to CloudFusion 3.5.15)\n\n**Second Generation:**\n- AWS SDK for PHP 2.0 (2012; equivalent to Guzzle-based SDK for AWS 1.0)\n- ...\n\nWe currently provide compatibility for jumping between _generations_ of SDK. You should use all the same version of one generation alongside all the same version of the other generation. Even though this _appears_ to be a jump from 1.x to 2.x, you shouldn't necessarily expect the same kinds of changes from our eventual 3.0.\n\nIt would be reasonable to suggest that a future 3.0 release might leverage Traits (new in PHP 5.4; not compatible with 5.3). In this case, _some_ changes might be required, but we anticipate them being _adjustments_ to the existing SDK 2.0 API, instead of being a wholesale rewrite that we're presently experiencing with the move from the older Tarzan/CloudFusion codebase to the new Guzzle-based codebase.\n\nAny time we've been forced to release a breaking change, we've made it a point to call it out **very specifically** in our release notes, change log, API reference documentation, and other update-related documentation. On the off-chance that a minor breaking change has to be made, we will continue to thoroughly document those changes in the places that we think people will look (it's _always_ a good idea to read release notes before upgrading, but we know that some customers don't).\n\nIf you're using Composer to install either SDK (definitely a best practice, and the de-facto successor to PEAR/Pyrus), it would be wise to scope updates down to minor releases (e.g., 1.5._, 2.0._) to make sure that you don't jump up to a new major version (e.g., 1._, 2._) without knowing it (whereas I'm defining version numbers as `<architecture>.<major>.<minor>`, like the Linux kernel, Mac OS X, and Firefox releases before 4.0).\n\nMake sense? :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10178857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10563845", "body": "Could you submit a pull request and any relevant unit tests for this?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10563845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2415421", "body": "Yay!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2415421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447141", "body": "Should this really be called `Aws\\S3\\Enum\\Event::S3_REDUCED_REDUNDANCY_LOST_OBJECT`?\n\nIt seems we can strip \"S3_\" from the constant name since it's just a namespace in the S3 API itself.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447257", "body": "`x86_64` and `i386` seem like perfect candidates for Enums (i.e., `X86_64` and `I386`). Perhaps aliased to `64_BIT` and `32_BIT`?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447271", "body": "In the Double Rainbow version of the repository, I'd added plain-english versions of some of these constants. They were grouped under STANDARD_, HIGH_MEM_, HIGH_CPU_, HIGH_IO_ and CLUSTER_.\n\nThinking about readability, CLUSTER_GPU_4X (or even CLUSTER_GPU_4XLARGE) reads better than CG1_4XLARGE IMO.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447337", "body": "Is the intention here to move to supporting multiple versions of a service? Or simply to notate which version we're working with?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447341", "body": "Sexy. Thanks. :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2447341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023247", "body": "Was removing this return intentional?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5337386", "body": "Actually, PSR-1 explicitly avoids making recommendations for variable/property names\u2026 only method names.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5337386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985599", "body": "Allowing `map()` and `filter()` methods which are _chainable_ would be farking awesome.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/8985599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "martinbean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348879", "body": "Thanks, @jeremeamia. I tried the wrapping the file name in `fopen()` as per your suggestion, but get the following exception now:\n\n> Validation errors: [Body] must be of type string or object\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348983", "body": "Actually, I think I may have solved it: I used `file_get_contents()` instead.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10348983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349422", "body": "Hi Jeremy. No problem. Thanks for clearing this up for me! Much appreciated. I\u2019m new to this Guzzle :wink: \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10349422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10362302", "body": "Another question: how do I mark a uploaded file as public? I\u2019m reading the API documentation again (http://docs.amazonwebservices.com/aws-sdk-php-2/latest/class-Aws.S3.S3Client.html) but it\u2019s not too clear the expected values. I\u2019m guessing I want to set something for the `ACL` key, but not _what_ to set it as. Sample values would be great if possible?\n\n**EDIT:** Fixed it myself (again)! To mark a file as public, I imported the `Aws\\S3\\Enum\\CannedAcl` class and used the `CannedAcl::PUBLIC_READ` class constant.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10362302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372056", "body": "Cool. Is there a channel where I can report small things like this that are hard-to-understand or could be better-documented if I come across anything?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372342", "body": "No problem.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10372342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10561583", "body": "I\u2019ve decided to use [Uploadify](http://uploadify.com) to upload the file via Flash, but still having difficulties.\n\nWith the new PHP SDK, how do I pass custom fields as policy options to `PostObject`? I have the following in my PHP script:\n\n``` php\n$bucket = (string) $container['misc_config']->images->amazon->bucket;\n$options = array(\n    'acl' => CannedAcl::PUBLIC_READ,\n    'Content-Type' => 'audio/mpeg',\n    'key' => 'audio/a-test-podcast.mp3',\n    'success_action_redirect' => (string) $container['misc_config']->main->base_url . 'upload/success/',\n    'success_action_status' => 201,\n    //array('starts-with', '$key', 'audio/'),\n    //array('starts-with', '$folder', ''),\n    array('starts-with', '$Filename', ''),\n    //array('starts-with', '$\n);\n$postObject = new PostObject($container['amazon_s3'], $bucket, $options);\n```\n\nBut I keep getting the following error in the XML response:\n\n> Invalid Policy: Invalid Condition: unknown operation 'array'.\n\nIf I remove `array('starts-with', '$Filename', '')` from the above code snippet, then I get the following error message:\n\n> Invalid according to Policy: Extra input fields: filename\n\nWhat\u2019s the syntax for adding these additional fields to my policy?\n\n**EDIT:** Found the solution, and I don\u2019t even know how! In my `$options` array, I now have:\n\n``` php\n$options = array(\n    'acl' => CannedAcl::PUBLIC_READ,\n    'Content-Type' => 'audio/mpeg',\n    'key' => 'audio/a-test-podcast.mp3',\n    'success_action_redirect' => (string) $container['misc_config']->main->base_url . 'upload/success/',\n    'success_action_status' => 201,\n    'filename' => '^'\n);\n```\n\nDon\u2019t ask my have I managed to arrive at this solution, since it\u2019s not documented anywhere I don\u2019t think!\n\nAlthough I am now faced with yet another issue. When using a Flash-based uploaded, how can I actually redirect on successful upload? My JavaScript function to instantiate Uploadify looks like this:\n\n``` js\n$('#file_upload').uploadify({\n    'buttonClass': 'button',\n    'buttonText': 'Upload',\n    'formData': <?php echo json_encode($formInputs); ?>,\n    'fileObjName': 'file',\n    'fileTypeExts': '*.mp3',\n    'height': 36,\n    'multi': false,\n    'onUploadError': function(file, errorCode, errorMsg, errorString) {\n        console.log('onUploadError', file, errorCode, errorMsg, errorString);\n    },\n    'onUploadSuccess': function(file, data, response) {\n        console.log('onUploadSuccess', file, data, response);\n    },\n    'swf': '/assets/site/swf/uploadify.swf',\n    'uploader': '<?php echo $uploadPath; ?>',\n    'width': 120\n});\n```\n\nThe content of my success page is logged in the console as the `data` argument, but I\u2019d like to actually _redirect_ to that page, rather than having the response available to me in JavaScript. Is this an issue with Flash, JavaScript, Uploadify, what?\n\nFinally, how can I enforce that only files with an **.mp3** extension are uploaded?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10561583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dominikgehl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374435", "body": "Ok, found out how to make it work:\n\n```\n$rf->create(\n         'GET', \n         $s3->getBaseUrl() . '/' . BUCKET . '/testing123.jpg'\n    )->setClient($s3)\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374486", "body": "Would be nice to have a wrapper though which accepted a bucket name, file name and expiration time and would do the above magic behind the scenes ...\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10374486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "digitaldoener": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10566491", "body": "``` php\npublic static function values()\n{\n    $class = get_called_class();\n    if (!isset(Enum::$cache[$class])) {\n        $reflected = new \\ReflectionClass($class);\n        Enum::$cache[$class] = $reflected->getConstants();\n    }\n\n    return static::$cache[$class];\n}\n```\n\nDo not work.\n\nI think this bug report https://bugs.php.net/bug.php?id=53915 (fixed in 5.3.6) should characterize the error. The bug should occur up to php version 5.3.6, too. Since \\Aws\\Common\\Enum.php is an abstract class and every of the listed subclasses (http://docs.amazonwebservices.com/aws-sdk-php-2/latest/class-Aws.Common.Enum.html) inherid from this class the error should effect every where self::[constant] is used.\n\nLike in \n\n``` php\nnamespace Aws\\DynamoDb\\Enum;\n\nuse Aws\\Common\\Enum;\n\nclass Type extends Enum\n{\n    const S  = 'S';\n    const N  = 'N';\n    const B  = 'B';\n\n    const SS = 'SS';\n    const NS = 'NS';\n    const BS = 'BS';\n\n    const STRING     = self::S;\n    const NUMBER     = self::N;\n    const BINARY     = self::B;\n\n    const STRING_SET = self::SS;\n    const NUMBER_SET = self::NS;\n    const BINARY_SET = self::BS;\n}\n```\n\nI use this call to cause the error\n\n``` php\n                Zend_Debug::dump(\\Aws\\DynamoDb\\Enum\\Type::values());\n                $test = array(\n                        'Id' => '10101',\n                        'test' => 10101,\n                );\n                Zend_Debug::dump(\\Aws\\DynamoDb\\Model\\Item::fromArray($test));\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10566491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "semiosis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567139", "body": "Still no errors/output with the extra error reporting stuff.\n\nPHP 5.3.10-1ubuntu3.4 with Suhosin-Patch (cli) (built: Sep 12 2012 18:59:41) \n(ubuntu precise with latest updates)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10567139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10568332", "body": "Success!  That worked perfectly.  Thank you so much.  :D\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/issues/comments/10568332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "supercool27": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2465989", "body": "OK..\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2465989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "stloyd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698729", "body": "Typo =) `;` =)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2698729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/3520621", "body": "IMO you should add it to `suggest`.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/3520621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gwkunze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959456", "body": "Instead of turning $mode into an octal string, isn't it simpler to compare with octal integer literals? Something like:\n\n``` php\nif ($mode & 0700 == 0700) {\n    $params['ACL'] = 'public-read';\n} elseif ($mode & 0600 == 0600) {\n    $params['ACL'] = 'authenticated-read';\n} else {\n    $params['ACL'] = 'private';\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959477", "body": "I'm not exactly sure when (if ever) STREAM_MKDIR_RECURSIVE is set since the rmdir php function has not arguments to specify it. But regardless, the fact that if it _is_ set this implementation will disregard any 'Key' parameter and remove the entire bucket:\n\n``` php\nrmdir('s3://my-bucket/some-dir'); // Assuming STREAM_MKDIR_RECURSIVE is set this will remove my-bucket completely\n```\n\nI think this is kind of scary and non-intuitive and it might be better to make this into a slightly less destructive implementation.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959496", "body": "Unless I'm mistaken, the semicolon (and practically any, if not any character) is a legal in a Key value for an S3 Object. By using it as a separator for options I think you're limiting the use of the stream wrapper, in some - to be honest - esoteric situations. So this might be a non-issue. \nOtherwise the only thing I can imagine for these kinds of options if to add them before the key instead of after it, although that might be ugly and non-url-ish.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959506", "body": "Or you could add features like 'seekable' to the stream context options. But that would require changing the stream context option value so that the options that are passed verbatim to the various commands are under some key so other kinds of options like 'seekable' can be stored in there as well.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959540", "body": "I use the S3StreamWrapper so that [Symfony](https://github.com/symfony/symfony) and [Assetic](https://github.com/symfony/AsseticBundle) can install their resources (css, images and javascript) to S3 so the content can be hosted by CloudFront. Since you can only provide a location where it will copy all the resources you can effectively only set a single stream context. This means you can't use the stream context options to set the Content-Type header properly unless you want them to be the same for all your resources (which you don't :) ) \n\nThis is the reason my [implementation](https://github.com/gwkunze/S3StreamWrapper/blob/master/src/S3StreamWrapper/S3StreamWrapper.php#L330) tries to detect the MIME type by looking at the extension of the key. It might be better to use the [FileInfo](http://www.php.net/manual/en/book.fileinfo.php) so file extensions aren't needed.\n\nSo perhaps a feature similar to this, or maybe the ability to add a callback function to the stream context options which can inspect and modify the parameters before an object is written would be nice.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/comments/2959540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pborreli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023312", "body": "yes, as parent::wait is void\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/2023312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bakura10": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332641", "body": "Should be $publicKey for PSR-1\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332647", "body": "Should be $privateKey for PSR-1\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332651", "body": "Should be $privateDetails\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332657", "body": "You guessed it... =)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/5332657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gws": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200223", "body": "Might `if (PHP_VERSION_ID >= 50400)` work better here? It's designed for comparisons, and version strings can have interesting vendor-specific attributes in them.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "datibbaw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200876", "body": "Seems like a good idea :)\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-php/pulls/comments/6200876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}