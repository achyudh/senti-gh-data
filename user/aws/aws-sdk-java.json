{"_default": {"1": {"nezihyigitbasi": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1451", "title": "Error: \"The authorization header is malformed\"", "body": "We have a user report saying that he is getting \r\n\r\n```\r\nThe authorization header is malformed; the region 'us-east-1' is wrong; expecting 'eu-west-1'\r\n````\r\n\r\nafter (I believe) moving from the deprecated `new AmazonS3Client(...)` to the new `AmazonS3ClientBuilder`. \r\n\r\nPreviously I raised a question about how to set the region properly in #1423 and based on that we set it to `us-east-1` with the new builder API and I guess that's causing this problem.\r\n\r\nIn the working version [here](https://github.com/prestodb/presto/blob/c5e1b7c1b636f4d45fcb3e9bd542d13d58de9a43/presto-hive/src/main/java/com/facebook/presto/hive/s3/PrestoS3FileSystem.java#L631-L666) is how we create a new s3 client.\r\n\r\nAnd [here](https://github.com/prestodb/presto/blob/master/presto-hive/src/main/java/com/facebook/presto/hive/s3/PrestoS3FileSystem.java#L624-L675) is the version that throws this error (I suspect L671 is causing the issue).\r\n\r\nNote that `pinS3ClientToCurrentRegion` is `false` when the user gets the error. The problem goes away when `pinS3ClientToCurrentRegion` is set to `true`, but the user has buckets in multiple regions so that's not an option.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paksv": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1450", "title": "AWS Pricing API missing certain instance types", "body": "I'm trying to use Pricing API, but it looks like certain instance types are missing (\u04415.large for eu-west-3). For example:\r\n```\r\n        Filter parisFilter = new Filter().withType(FilterType.TERM_MATCH).withField(\"location\").withValue(\"EU (Paris)\");\r\n        Filter c5Filter = new Filter().withType(FilterType.TERM_MATCH).withField(\"instanceType\").withValue(\"c5.large\");\r\n        AWSPricing pricing = AWSPricingClientBuilder.standard().withCredentials(creds).withRegion(\"us-east-1\").build();\r\n        pricing.getProducts(\r\n                new GetProductsRequest()\r\n                        .withServiceCode(\"AmazonEC2\")\r\n                        .withFilters(parisFilter, c5Filter)\r\n        )\r\n                .getPriceList()\r\n                .forEach(System.out::println);\r\n```\r\nThe code above returns nothing, despite c5.large is actually available for eu-west-3.\r\nc5.18xlarge is also missing.\r\n\r\nIf I change instance type filter to c5.xlarge, the code will return 4 lines:\r\n```\r\n{\"product\":{\"productFamily\":\"Compute Instance\",\"attributes\":{\"enhancedNetworkingSupported\":\"Yes\",\"memory\":\"8 GiB\",\"dedicatedEbsThroughput\":\"Upto 2250 Mbps\",\"vcpu\":\"4\",\"locationType\":\"AWS Region\",\"storage\":\"EBS only\",\"instanceFamily\":\"Compute optimized\",\"operatingSystem\":\"Windows\",\"physicalProcessor\":\"Intel Xeon Platinum 8124M\",\"clockSpeed\":\"3.0 Ghz\",\"ecu\":\"16\",\"networkPerformance\":\"Up to 10 Gigabit\",\"servicename\":\"Amazon Elastic Compute Cloud\",\"instanceType\":\"c5.xlarge\",....}\r\n....\r\n```\r\n\r\nAnother inconvenient thing is that I cannot filter by region code (like eu-west-3), only by Human Readable name, which is not available anywhere else.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "millems": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1449", "title": "XMLInputFactory Lock Contention", "body": "https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/http/StaxResponseHandler.java#L91-L98\r\n\r\n```Java\r\n        XMLEventReader eventReader;\r\n        synchronized (xmlInputFactory) {\r\n            try {\r\n                eventReader = xmlInputFactory.createXMLEventReader(content);\r\n            } catch (XMLStreamException e) {\r\n                throw handleXmlStreamException(e);\r\n            }\r\n        }\r\n```\r\n\r\nXML response processing is serialized around creating a XML reader, and at least one customer has reported contention acquiring an XML reader in the code above at ~2k TPS.\r\n\r\nThe SDK should consider pooling `XMLInputFactory` instances or storing them thread-locally. Note: this synchronized pattern is used for `XMLInputFactory` instances elsewhere. We should also consider fixing this globally for the SDK.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OndraZizka": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1448", "title": "Uploading from a stream from cloudfront fails non-deterministically", "body": "We are observing something similar to  https://github.com/aws/aws-sdk-java/issues/749 .\r\n\r\nWe upload a file to S3, wait until it's done. Then we open an URLConnection to this file via CloudFront, and upload it somewhere again, using it's InputStream.\r\n\r\nIn some cases, this fails with: \r\n\r\n    SdkClientException: More data read than expected: dataLength=457963; expectedLength=454759;\r\n\r\nThe expected is correct length of the file. I have no idea where the extra data are coming from.\r\n\r\nProvided that S3 confirmed the upload was done, and CloudFront is supposed to cache it transparently, what else could be the cause?\r\nWhat should we do to prevent this from happening?\r\n\r\nDownloading locally and uploading will cause a major performance drawback.\r\nGiving it \"some time\" is not a deterministic solution.\r\n\r\n```\r\ncom.amazonaws.SdkClientException: More data read than expected: dataLength=457963; expectedLength=454759; includeSkipped=false; in.getClass()=class com.amazonaws.internal.ReleasableInputStream; markedSupported=false; marked=0; resetSinceLastMarked=false; markCount=0; resetCount=0\r\n! at com.amazonaws.util.LengthCheckInputStream.checkLength(LengthCheckInputStream.java:155)\r\n! at com.amazonaws.util.LengthCheckInputStream.read(LengthCheckInputStream.java:109)\r\n! at com.amazonaws.internal.SdkFilterInputStream.read(SdkFilterInputStream.java:82)\r\n! at com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream.read(MD5DigestCalculatingInputStream.java:98)\r\n! at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)\r\n! at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)\r\n! at java.io.BufferedInputStream.read(BufferedInputStream.java:345)\r\n! at com.amazonaws.internal.SdkBufferedInputStream.read(SdkBufferedInputStream.java:76)\r\n! at com.amazonaws.internal.SdkFilterInputStream.read(SdkFilterInputStream.java:82)\r\n! at com.amazonaws.event.ProgressInputStream.read(ProgressInputStream.java:180)\r\n! at com.amazonaws.internal.SdkFilterInputStream.read(SdkFilterInputStream.java:82)\r\n! at org.apache.http.entity.InputStreamEntity.writeTo(InputStreamEntity.java:140)\r\n! at com.amazonaws.http.RepeatableInputStreamRequestEntity.writeTo(RepeatableInputStreamRequestEntity.java:160)\r\n! at org.apache.http.impl.DefaultBHttpClientConnection.sendRequestEntity(DefaultBHttpClientConnection.java:156)\r\n! at org.apache.http.impl.conn.CPoolProxy.sendRequestEntity(CPoolProxy.java:160)\r\n! at org.apache.http.protocol.HttpRequestExecutor.doSendRequest(HttpRequestExecutor.java:238)\r\n! at com.amazonaws.http.protocol.SdkHttpRequestExecutor.doSendRequest(SdkHttpRequestExecutor.java:63)\r\n! at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:123)\r\n! at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:272)\r\n! at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)\r\n! at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)\r\n! at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\r\n! at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\r\n! at com.amazonaws.http.apache.client.impl.SdkHttpClient.execute(SdkHttpClient.java:72)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeOneRequest(AmazonHttpClient.java:1189)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeHelper(AmazonHttpClient.java:1029)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.doExecute(AmazonHttpClient.java:741)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeWithTimer(AmazonHttpClient.java:715)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.execute(AmazonHttpClient.java:697)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.access$500(AmazonHttpClient.java:665)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutionBuilderImpl.execute(AmazonHttpClient.java:647)\r\n! at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:511)\r\n! at com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:4227)\r\n! at com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:4174)\r\n! at com.amazonaws.services.s3.AmazonS3Client.putObject(AmazonS3Client.java:1722)\r\n! at ...repository.service.impl.S3RepositoryService.write(S3RepositoryService.java:315)\r\n```\r\n\r\nSee also https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/util/LengthCheckInputStream.java", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maczikasz": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1447", "title": "Allow monitoring of Connection pool ", "body": "Our Application keeps running into :\r\n\r\n `Unable to execute HTTP request: Timeout waiting for connection from pool\r\ncom.amazonaws.SdkClientException: Unable to execute HTTP request: Timeout waiting for connection from pool`\r\n\r\nWe are suspecting that our pool settings is too low, but it seems to be impossible to create monitoring on the current status of the connection pool.\r\n\r\nThe connection manager or the connection manager factory is not injectable, there are no JMX beans available, and the MetricsCollector is only called after the request is executed.\r\n\r\nAm i missing something that would allow me to monitor in order to fix the problem, or is it really not possible?", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apara": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1445", "title": "ProgessEvents continue to arrive after TransferManager.shutdownNow()", "body": "We create a TransferManager, register a ProgressListener, and then waitForCompletion().  After the transfer is done we invoke shutDownNow(false).  However, the invocations to ProgressListener.progressChanged still continue to happen even after shutdownNow() returns.  I suspect this is due to the fact that notifications have been queued up for asynchronous delivery already and continue to be delivered.  \r\n\r\nAre the notifications somehow related to a specific TranscodeManager?  is there a way to purge any remaining notifications?  I actually think that TranscodeManager.shutdown() should probably purge any unprocessed notifications.\r\n\r\nIs this a bug or intended operation?  \r\n\r\n```\r\n        TransferManager aws = new TransferManager(client);\r\n\r\n        try {\r\n            Transfer upload = aws.upload(req);\r\n            if (listener != null) {\r\n                upload.addProgressListener(new ProgressListener() {\r\n                    long totalBytesTransferred;\r\n\r\n                    //THIS METHOD CONTINUES TO BE INVOKED even AFTER upload.waitForCompletion() returns.\r\n                    public void progressChanged(ProgressEvent progressEvent) {\r\n                        this.totalBytesTransferred += progressEvent.getBytesTransferred();\r\n                        ...\r\n                    }\r\n                });\r\n            }\r\n\r\n             //HERE we wait for upload to complete\r\n            upload.waitForCompletion();\r\n        } \r\n        finally {\r\n            //HERE we shutdown the TransferManager, but ProgressListener.progressChanged continue to be invoked\r\n            aws.shutdownNow(false);\r\n        }\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daisieh": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1444", "title": "Is the documentation correct re: md5 vs ETag?", "body": "If I understand the situation correctly, an object's ETag is equivalent to its md5 checksum if it was uploaded in a single part and less than 5GB in size, but is calculated differently otherwise. However, the [getETag javadoc](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/ObjectMetadata.html#getETag--) says that the ETag *is* the same as the md5 checksum, and the [getContentMD5 doc](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/ObjectMetadata.html#getContentMD5--) says that this will be the same as the ETag. Is this documentation out of date?", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ruenzuo": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1443", "title": "AmazonEC2Exception Error Code: RequestExpired from AmazonEC2 initialised with StaticCredentialsProvider", "body": "We're seeing a lot of this exceptions in our `aws-sdk-java` usage with the following stack trace:\r\n```\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: Request has expired. (Service: AmazonEC2; Status Code: 400; Error Code: RequestExpired; Request ID: 213aa903-1660-42b7-838f-176cbed53e74)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.handleErrorResponse(AmazonHttpClient.java:1639)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeOneRequest(AmazonHttpClient.java:1304)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeHelper(AmazonHttpClient.java:1056)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.doExecute(AmazonHttpClient.java:743)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeWithTimer(AmazonHttpClient.java:717)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.execute(AmazonHttpClient.java:699)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.access$500(AmazonHttpClient.java:667)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutionBuilderImpl.execute(AmazonHttpClient.java:649)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:513)\r\n\tat com.amazonaws.services.ec2.AmazonEC2Client.doInvoke(AmazonEC2Client.java:15651)\r\n\tat com.amazonaws.services.ec2.AmazonEC2Client.invoke(AmazonEC2Client.java:15627)\r\n\tat com.amazonaws.services.ec2.AmazonEC2Client.executeDescribeInstances(AmazonEC2Client.java:7621)\r\n\tat com.amazonaws.services.ec2.AmazonEC2Client.describeInstances(AmazonEC2Client.java:7597)\r\n\tat com.amazonaws.services.ec2.AmazonEC2Client.describeInstances(AmazonEC2Client.java:7633)\r\n```\r\n\r\nWe don't use the `aws-sdk-java` directly, but through another tool which creates an instance of `AmazonEC2` with `StaticCredentialsProvider`.\r\n\r\nAccording to the `RequestExpired` [error code description](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html):\r\n\r\n> The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for presigned URLs), or the date stamp on the request is more than 15 minutes in the future. If you're using temporary security credentials, this error can also occur if the credentials have expired.\r\n\r\nWe're not using temporary security credentials, the `StaticCredentialsProvider` is initialised with an `AWSCredentials` directly (`AWSAccessKeyId` and `AWSSecretKey`).\r\n\r\nI don't understand how this could happen. As far as I can tell, the static credentials don't need to be refresh at any point and the computer time settings are configured correctly. \r\n\r\nI can't really share a sample project showing this because it's hard to reproduce, we only have the Java logs. Is there something we could do different to avoid the `RequestExpired` error?\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ardias": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1442", "title": "Protocol changes from version 226 -> 277", "body": "Hi All,\r\nI have a question regarding version after 226 that is making my \"integration\" tests fail.\r\nI'm using Hoverfly (http proxy) to capture the requests and responses made using the SDK and with version 200 (1.11.200) everything was working fine. \r\nNow i needed support for Global Tables and so updated my sdk version to the latest release, 257. With this version I'm having problems with S3 and DynamoDb. Something changed that is making Hoverfly either not return data (for example DynamoDb `listTables`) or return different data (S3).\r\nI've tested with various versions and it seems this started to happen when going from version 226 to 227.\r\n\r\nMy question is, did something change in the core protocol that may be making Hoverfly fail?", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "emilva": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1440", "title": "Api Gateway missing from Principal.Services enum", "body": "Api Gateway is missing from [Principal.Services enum](https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/auth/policy/Principal.java#L151), which makes it impossible to create IAM policies like:\r\n```{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"Service\": \"apigateway.amazonaws.com\"\r\n      },\r\n      \"Action\": \"sts:AssumeRole\"\r\n    }\r\n  ]\r\n}```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1441", "title": "Add AmazonApiGateway to Principal.Services", "body": "I need to be able to create an IAM Policy with Api gateway as a Principal Service as specified in the [docs](https://docs.aws.amazon.com/apigateway/latest/developerguide/permissions.html). Right now it is impossible with the Java SDK as it is missing from `Principal.Services`. Fixes #1440\r\n\r\n\r\n  ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glicht": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1439", "title": "Provide target region on Request object for xray-sdk ", "body": "Hi,\r\n\r\nCurrently the xray-sdk for Java is unable to report the target region for outgoing aws service calls.  \r\n\r\nA reply from the xray team (@jamesdbowman) has indicated that this is actually a limitation in the aws-sdk-java, that it doesn't provide this information as part of the Request object.\r\n\r\nI am opening this feature request to add the target region information to the Request so we can have this information as part of the xray traces.\r\n\r\nSee following issue and reply at aws-xray-sdk-java: https://github.com/aws/aws-xray-sdk-java/issues/7\r\n\r\nthanks,\r\n\r\nGuy", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fpolzer": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1438", "title": "Reported region list for data.iot seems to be wrong", "body": "Looking into the SDK docs at https://docs.aws.amazon.com/general/latest/gr/rande.html#iot_region tells that the things-shadow service (data.iot) should be enabled for the us-east-2 region.\r\n\r\nBut when using the API it tells that it isn't supported.\r\n\r\nLooking into the SDK code it seems that the json list for the supported regions for the data.iot endpoint seems to miss some region entries that should be supported due to the SDK docs:\r\n\r\n\"data.iot\" : {\r\n\t\"defaults\" : {\r\n\t\t\"credentialScope\" : {\r\n\t\t\t\"service\" : \"iotdata\"\r\n\t\t},\r\n\t\t\"protocols\" : [ \"https\" ]\r\n\t},\r\n\t\"endpoints\" : {\r\n\t\t\"ap-northeast-1\" : { },\r\n\t\t\"ap-northeast-2\" : { },\r\n\t\t\"ap-southeast-1\" : { },\r\n\t\t\"ap-southeast-2\" : { },\r\n\t\t\"eu-central-1\" : { },\r\n\t\t\"eu-west-1\" : { },\r\n\t\t\"us-east-1\" : { },\r\n\t\t\"us-west-2\" : { }\r\n\t}\r\n}", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gerrit-hntschl": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1436", "title": "Lambda: Provide access to ObjectMapper in LambdaInvokerFactory", "body": "Hi,\r\n\r\nI need to set the date format for the `ObjectMapper` and now have to resort to reflection.\r\nPlease make the static `MAPPER` accessible or allow to set your own instance.\r\n\r\nBest regards,\r\nGerrit", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flound1129": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1433", "title": "Feature Request: EC2 Resource Serialization for Cloud Formation Template", "body": "Maybe I'm missing something, but there doesn't seem to be an easy way to add an EC2 resource (Instance, Volume, etc.) directly to a CloudFormation template.\r\n\r\nCould a method be added to EC2 objects that returns and ObjectNode in the correct format for adding to the CF template?  ", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samrajcse": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1432", "title": "CJK Characters are not listed in S3 Object listing", "body": "We have few files in S3 with CJK characters. Those files are not listed with the valid format. This issue is also available in AWS s3 console too. \r\n\r\nPlease look into this ASAP.\r\n\r\n**Reference Screenshot:**\r\n\r\n![image](https://user-images.githubusercontent.com/696988/34525522-400224cc-f0c5-11e7-811f-1c9e47b6383a.png)\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arvinds26": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1431", "title": "Error Message: The bucket is in this region: us-east-1. Please use this region to retry the request", "body": "I am using below code to download an object, getting an error as in subject. \r\nConditions : \r\n1. Access Id and Secret Key should be included in the program (not using credentials file OR environment variables)\r\n2. Using \"AmazonS3Client\" instead of builder\r\n\r\npublic static void main(String[] args) throws IOException {    \t\r\n        AmazonS3 s3 = new AmazonS3Client(new BasicAWSCredentials(\"AKIAJH5K4ZJ6ZQB2F4XB\", \"SB5FkD1YztHppJH9dsR5LSxbWjhjfWmNKu1I2TB89\"))\r\n        .withRegion(Region.getRegion(Regions.US_WEST_2));\r\n        String bucketName = \"my-first-s3-bucket-\" + UUID.randomUUID();\r\n        String key = \"MyObjectKey\";\r\n\r\n System.out.println(\"Downloading an object\");\r\n            S3Object object = s3.getObject(new GetObjectRequest(\"s3.amazonaws.com/bucketforwso2\", \"/bucketforwso2/HTML-CHEAT-SHEET-768x8555.pdf\", \"C:\\\\Users\\\\ar337815\\\\Desktop\"));\r\n//            System.out.println(\"Content-Type: \"  + object.getObjectMetadata().getContentType());\r\n//            displayTextInputStream(object.getObjectContent());\r\n            System.out.println(\"Downloaded!\");\r\n}\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rdifalco": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1430", "title": "Many XML Parse Exceptions when calling S3 deleteObjects", "body": "We are calling `deleteObjects` at a high rate and often get these which can be a drag. When I retry the request in a unit test in isolation it succeeds.  I'm guessing some there is some slow down message or something else that the AWS SDK code can't parse correctly. I guess what I'd like is for these kinds of parse exceptions to include a stringified version of the `InputStream` in the `AmazonSdkClientException`.  For example, it would be fantastic if you just added the raw stringified response here:\r\n```\r\nXmlResponsesSaxParser#parseXmlInputStream\r\n            throw new SdkClientException(\"Failed to parse XML document with handler \"\r\n                + handler.getClass(), t);\r\n```\r\nHere's the exception. I think all `Failed to parse` exceptions would benefit from this. \r\n```\r\ncom.amazonaws.SdkClientException: Failed to parse XML document with handler class com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$DeleteObjectsHandler\r\n\tat com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser.parseXmlInputStream(XmlResponsesSaxParser.java:156) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser.parseDeletedObjectsResult(XmlResponsesSaxParser.java:448) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.model.transform.Unmarshallers$DeleteObjectsResultUnmarshaller.unmarshall(Unmarshallers.java:262) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.model.transform.Unmarshallers$DeleteObjectsResultUnmarshaller.unmarshall(Unmarshallers.java:258) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.internal.S3XmlResponseHandler.handle(S3XmlResponseHandler.java:62) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain.handle(ResponseHeaderHandlerChain.java:44) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain.handle(ResponseHeaderHandlerChain.java:30) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.response.AwsResponseHandlerAdapter.handle(AwsResponseHandlerAdapter.java:70) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.handleResponse(AmazonHttpClient.java:1507) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeOneRequest(AmazonHttpClient.java:1225) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeHelper(AmazonHttpClient.java:1029) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.doExecute(AmazonHttpClient.java:741) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeWithTimer(AmazonHttpClient.java:715) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.execute(AmazonHttpClient.java:697) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.access$500(AmazonHttpClient.java:665) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutionBuilderImpl.execute(AmazonHttpClient.java:647) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:511) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:4227) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:4174) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat com.amazonaws.services.s3.AmazonS3Client.deleteObjects(AmazonS3Client.java:2100) ~[rest-server-2.35.259.jar:2.35.259]\r\n\tat \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_91]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_91]\r\n\tat java.lang.Thread.run(Thread.java:745) [?:1.8.0_91]\r\nCaused by: org.xml.sax.SAXParseException: Premature end of file.\r\n\tat com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1438) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:1019) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:118) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:848) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:777) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141) ~[?:1.8.0_91]\r\n\tat com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213) ~[?:1.8.0_91]\r\n\tat com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser.parseXmlInputStream(XmlResponsesSaxParser.java:142) ~[rest-server-2.35.259.jar:2.35.259]\r\n\t... 27 more\r\n```", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Supagoat": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1429", "title": "Support for cli 'compose' command", "body": "I don't see a way in the Java API to do what the ecs cli 'compose' command does.  Are there plans to add that to the Java API?", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saurabhhv": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1428", "title": "java.lang.NoClassDefFoundError: Could not initialize class com.amazonaws.util.Base64", "body": "Can someone please suggest how to fix this error\r\n\r\n2017-12-28 15:52:08,265 ERROR [stderr] (default task-38) java.lang.NoClassDefFoundError: Could not initialize class com.amazonaws.util.Base64\r\n2017-12-28 15:52:08,266 ERROR [stderr] (default task-38)        at com.amazonaws.services.s3.AmazonS3Client.putObject(AmazonS3Client.java:1730)\r\n\r\nI am using \"aws-java-sdk-bom\" and tried to solve with version \"1.11.109\" and the latest \"1.11.255\" but the error do not get resolved.\r\n\r\nThanks in advance.\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yatindra": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1426", "title": "Missing Access Key details in GuardDuty finding resource", "body": "AWS Console shows the Access Key details (Access Key, Principal ID, Username) for GuardDuty API Access findings.\r\n\r\nThis is also documented in the `GetFindings` API Docs found here: https://docs.aws.amazon.com/guardduty/latest/ug/get-findings.html\r\n\r\n```\r\n{\r\n    \"findings\": [\r\n        {\r\n            \"resource\": {\r\n                \"accessKeyDetails\": {\r\n                    \"accessKeyId\": \"string\",\r\n                    \"principalId\": \"string\",\r\n                    \"userType\": \"string\",\r\n                    \"userName\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nBut the same is not available in the `com.amazonaws.services.guardduty.model.Resource`\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wingice": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1425", "title": "slash in secret-key causes aws-sdk-java-s3 403 when putObject", "body": "I encountered the same issue again.  Getting a new secret-key without forward slash made the 403 go away.\r\nPlease reference :\r\nhttps://forums.aws.amazon.com/thread.jspa?threadID=134011\r\n\r\naws-java-sdk-s3: 1.11.255\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kumar-Patil": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1418", "title": "premature end of file", "body": "Hi ,\r\n\r\nAll of sudden i am getting below error from aws sdk. please help me to handle this error.\r\n\r\ncom.amazonaws.http.DefaultErrorResponseHandler: Unable to parse HTTP response (Invocation Id:31fe4b5d-02b3-b44e-f8e6-031b2c75ba85) content to XML document ''\r\n! org.xml.sax.SAXParseException: Premature end of file.\r\n! at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)\r\n! at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)\r\n! at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400)\r\n! at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)\r\n! at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1472)\r\n! at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:1014)\r\n! at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602)\r\n! at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505)\r\n! at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:841)\r\n! at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:770)\r\n! at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)\r\n! at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:243)\r\n! at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:339)\r\n! at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:121)\r\n! at com.amazonaws.util.XpathUtils.documentFrom(XpathUtils.java:162)\r\n! at com.amazonaws.util.XpathUtils.documentFrom(XpathUtils.java:169)\r\n! at com.amazonaws.http.DefaultErrorResponseHandler.parseXml(DefaultErrorResponseHandler.java:124)\r\n! at com.amazonaws.http.DefaultErrorResponseHandler.documentFromContent(DefaultErrorResponseHandler.java:105)\r\n! at com.amazonaws.http.DefaultErrorResponseHandler.createAse(DefaultErrorResponseHandler.java:84)\r\n! at com.amazonaws.http.DefaultErrorResponseHandler.handle(DefaultErrorResponseHandler.java:71)\r\n! at com.amazonaws.http.DefaultErrorResponseHandler.handle(DefaultErrorResponseHandler.java:47)\r\n! at com.amazonaws.http.AwsErrorResponseHandler.handleAse(AwsErrorResponseHandler.java:50)\r\n! at com.amazonaws.http.AwsErrorResponseHandler.handle(AwsErrorResponseHandler.java:38)\r\n! at com.amazonaws.http.AwsErrorResponseHandler.handle(AwsErrorResponseHandler.java:24)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.handleErrorResponse(AmazonHttpClient.java:1561)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeOneRequest(AmazonHttpClient.java:1249)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeHelper(AmazonHttpClient.java:1030)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.doExecute(AmazonHttpClient.java:742)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeWithTimer(AmazonHttpClient.java:716)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.execute(AmazonHttpClient.java:699)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutor.access$500(AmazonHttpClient.java:667)\r\n! at com.amazonaws.http.AmazonHttpClient$RequestExecutionBuilderImpl.execute(AmazonHttpClient.java:649)\r\n! at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:513)\r\n! at com.amazonaws.services.cloudwatch.AmazonCloudWatchClient.doInvoke(AmazonCloudWatchClient.java:969)\r\n! at com.amazonaws.services.cloudwatch.AmazonCloudWatchClient.invoke(AmazonCloudWatchClient.java:945)\r\n! at com.amazonaws.services.cloudwatch.AmazonCloudWatchClient.getMetricStatistics(AmazonCloudWatchClient.java:634)\r\n! at ", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gatla1234": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1415", "title": "Downloading object from SSE KMS encrypted S3 bucket fails", "body": "Hello There, I am trying to download the object from S3 bucket(which is  encrypted with AWS KMS key).  \r\nAmazonS3ClientBuilder s3ClientBuilder = AmazonS3ClientBuilder.standard().withCredentials(awsCredentialsProvider).withClientConfiguration(clientConfiguration).withForceGlobalBucketAccessEnabled(true).withRegion(Regions.US_EAST_1);\r\n                 s3client = s3ClientBuilder.build();\r\n\r\nDownload download = txManager.download( newGetObjectRequest(bucketName,key), file); where txManager is TransferManager object built by passing s3client.\r\n\r\nThis code snippet is throwing the error saying...\"The request signature we calculated does not match the signature you provided. Check your key and signing method. (Service: Amazon S3; Status Code: 403; Error Code: SignatureDoesNotMatch\"\r\n\r\nFull Logs:::::\r\ncom.amazonaws.services.s3.model.AmazonS3Exception: The request signature we calculated does not match the signature you provided. Check your key and signing method. (Service: Amazon S3; Status Code: 403; Error Code: SignatureDoesNotMatch;\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.handleErrorResponse(AmazonHttpClient.java:1639)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeOneRequest(AmazonHttpClient.java:1304)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeHelper(AmazonHttpClient.java:1056)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.doExecute(AmazonHttpClient.java:743)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeWithTimer(AmazonHttpClient.java:717)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.execute(AmazonHttpClient.java:699)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutor.access$500(AmazonHttpClient.java:667)\r\n\tat com.amazonaws.http.AmazonHttpClient$RequestExecutionBuilderImpl.execute(AmazonHttpClient.java:649)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:513)\r\n\tat com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:4319)\r\n\tat com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:4266)\r\n\tat com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1406)\r\n\tat com.amazonaws.services.s3.transfer.DownloadTaskImpl.getS3ObjectStream(DownloadTaskImpl.java:42)\r\n\tat com.amazonaws.services.s3.transfer.DownloadCallable.retryableDownloadS3ObjectToFile(DownloadCallable.java:281)\r\n\tat com.amazonaws.services.s3.transfer.DownloadCallable.call(DownloadCallable.java:135)\r\n\tat com.amazonaws.services.s3.transfer.DownloadCallable.call(DownloadCallable.java:53)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n\r\n\r\n\r\n-->I am using my accessKey and secret key inorder to build s3client. The java sdk version is 1.11.235. The above code snippet is working normally for Non-encrptyted buckets.  But throwing error for encrypted buckets.\r\n\r\nI also tried \t\r\nSSECustomerKey sseKey=new SSECustomerKey(AWSKmsId);\r\nHere AWSKmsId I am providing is base64 encoded and this is the same key I provided to encrypt the bucket and I gave while putting the object to the same bucket.\r\n \r\nDownload download = txManager.download(newGetObjectRequest(bucketName,key).withSSECustomerKey(sseKey),\r\n\t\t\t\t\t\tfile);\r\n\r\nThis code snippet is throwing error Saying...\"Bad request\".\r\n\r\n--->I want to add one more Comment that, without using transfer manager I am able to download the file from SSE KMS encrypted object normally, even without passing any KMS key. But If I am using Transfer Manager, then It is throwing error saying...\" The request signature we calculated does not match the signature you provided. Check your key and signing method. (Service: Amazon S3; Status Code: 403; Error Code: SignatureDoesNotMatch\"\r\n\r\n\r\nCould you please help me regarding this...Thanks", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timcharper": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1411", "title": "US-East-1 Missing from S3 Regions (was hard to find reference that US_Standard should be used)", "body": "http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html indicates that S3 does run in us-east-1, but you won't find an enum value here: https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/Region.java#L69\r\n\r\nThis page indicates that us-east-1 is US_Standard: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\r\n\r\nMight be nice to mention this in the docs somehow.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csimmons0": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1408", "title": "Support passing null to a DynamoDBTypeConverter", "body": "The DynamoDBTypeConverted annotation and the DynamoDBTypeConverter interface do not allow a converter to change null into something else. I avoid using nullable pointers in all of my code, choosing to use Optional instead. I would like to be able to use a DynamoDBTypeConverter to change null fields into empty Optionals. I've already written a converter to do this, expecting it to work, but I just noticed that it's not working because the SDK doesn't pass null to a converter.\r\n```\r\npublic class OptionalConverter<Clazz> implements DynamoDBTypeConverter<Clazz, Optional<Clazz>>\r\n{\r\n    @Override\r\n    public Clazz convert(Optional<Clazz> object)\r\n    {\r\n        return object.orElse(null);\r\n    }\r\n\r\n    @Override\r\n    public Optional<Clazz> unconvert(Clazz object)\r\n    {\r\n        return Optional.ofNullable(object);\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djar": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1395", "title": "Invalid write Attributes.", "body": "Running the following piece of code with \"attributeName\" set to something like \"test\".  I always get invalid write attributes. \r\nRead permissions for this user attribute always get updated successfully.  Just not the write one.  Could this be a bug?\r\n\r\n\"Invalid write attributes specified while updating a client\"\r\n\r\n\r\n```\r\n\r\n\t\tCollection<SchemaAttributeType> customAttributes = new ArrayList<SchemaAttributeType>();\r\n\t\tSchemaAttributeType attribute = new SchemaAttributeType();\r\n\t\tattribute.setMutable(true);\r\n\t\tattribute.setName(attributeName);\r\n\t\tattribute.setAttributeDataType(AttributeDataType.String);\r\n\t\tcustomAttributes.add(attribute);\r\n\t\tAddCustomAttributesRequest addCustomAttributesRequest = new AddCustomAttributesRequest();\r\n\t\taddCustomAttributesRequest.setUserPoolId(this.userPoolId);\r\n\t\taddCustomAttributesRequest.setCustomAttributes(customAttributes);\r\n\t\tAddCustomAttributesResult result = this.cognitoClient.addCustomAttributes(addCustomAttributesRequest );\r\n\t\t\r\n\t\t//set attribute to read/writeable\r\n\t\tUpdateUserPoolClientRequest updateUserPoolClientRequest = new UpdateUserPoolClientRequest();\r\n\t\tupdateUserPoolClientRequest.setUserPoolId(this.userPoolId);\r\n\t\tupdateUserPoolClientRequest.setClientId(this.clientId);\r\n\t\tCollection<String> readAttributes = new ArrayList<String>();\r\n\t\treadAttributes.add(\"custom:\"+attributeName);\r\n\t\tCollection<String> writeAttributes = new ArrayList<String>();\r\n\t\twriteAttributes.add(\"custom:\"+attributeName);\r\n\t\t//updateUserPoolClientRequest.setClientId(\r\n\t\tupdateUserPoolClientRequest.setReadAttributes(readAttributes );\r\n\t\tupdateUserPoolClientRequest.setWriteAttributes(writeAttributes );\r\n\t\tthis.cognitoClient.updateUserPoolClient(updateUserPoolClientRequest );\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oscerd": {"issues": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1390", "title": "Add a verify credentials method to AmazonWebServiceClient", "body": "It would be useful to have a method to verify the credentials provided to the client before doing any operations.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/1390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hankwallace": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1446", "title": "Adds toItem function to InternalUtils", "body": "Adds the `toItem` function to convert a map of item information to an `Item`. There was already a `toItemList` function in there, but not one for a single item.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oscarlvp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1437", "title": "Moved the assertion verification out of the setEnabledProtocols method.", "body": "If there is a bug in prepareSocket that prevents setEnabledProtocols from being called, the covering tests never fail as no assertion is verified. The extreme case is that you can remove the entire code of prepareSocket and no test will complain about it. This pull request contains a small change to improve the tests in order to catch that kind of error.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ksperling": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1367", "title": "Use 8k buffers when downloading into file", "body": "Writes <= 8k use a stack-allocated buffer whereas larger writes will malloc() / free() a fresh buffer for each write. Since there doesn't appear to be any particular reason to use a 10k buffer, it makes sense to align with the \"preferred\" buffer size of the JVM of 8k. See http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/601a2304ff4a/src/share/native/java/io/io_util.c#l58", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevin860": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1322", "title": "Add 'stripKeyPrefix' option to TransferManager's downloadDirectory method", "body": "Added an option to strip key prefixes to change downloadDirectory method behaviour without breaking backwards compatibility.\r\n\r\nSee #1321", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesridgway": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1313", "title": "Updating S3AbortableInputStream#close abort delegation", "body": "Updating S3AbortableInputStream#close to delegate to S3ObjectInputStream#abort if there is any data remaining in the stream.\r\n    \r\nThis is now consistent with the current documentation, and also ensurers that super.abort() is being triggered (which was being done by S3AbortableInputStream#abort and not S3AbortableInputStream#close). Therefore the abort behaviour via abort and close are now consistent.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joeyvandijk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1234", "title": "Invalid javascript header, not complaint with the embedded IANA reference", "body": "As described in http://www.ietf.org/rfc/rfc4329.txt application/x-javascript was temporary but not final and therefore this should be changed, while (new) embedded (tv) browsers do support IANA standards, but could perhaps not-know/skip application/x-javascript support which will mean that Javascript will not be executed.\r\n\r\nI do understand that many plugins depend on this reference (like the Jenkins S3 plugin), but this is invalid. Any input about use-cases that could be impacted?\r\n\r\nSame issue with `v2` version: https://github.com/aws/aws-sdk-java-v2/pull/69 and https://wiki.jenkins.io/display/JENKINS/S3+Plugin is using this file for example.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kiiadi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1229", "title": "Dynamo DB Polymorphism (Feedback Requested)", "body": "In response to issue #832, this introduces a new `@DynamoDBSubTyped` annotation to describe known sub-types of a class along with a string-identifier for those types that is persisted to the Dynamo table and allows the sub-type information to be persisted at save and retrieved at load time.\r\n\r\nExample usage:\r\n\r\n```java\r\n@DynamoDBSubTyped({\r\n\t@SubType(name = \"firstSubType\", value = FirstSubType.class),\r\n\t@SubType(name = \"secondSubType\", value = SecondSubType.class)\r\n})\r\nclass BaseClass { }\r\n\r\nclass FirstSubType extends BaseClass { }\r\nclass SecondSubType extends BaseClass { }\r\n```\r\nBy default the type name is stored in a String field in Dynamo called \"_type\"; this can be customized by providing the \"attributeName\" property to the `@DynamoDBSubTyped` annotation. This attribute can refer to an property already on the object or if it doesn't exist as a property of the object it will be created in the dynamo db table. It must be of type `java.lang.String`.\r\n\r\nThe above example allows the following:\r\n\r\n```java\r\nmapper.save(firstSubType);\r\nmapper.save(secondSubType);\r\n\r\nFirstSubType loadedFirstSubType = (FirstSubType) mapper.load(BaseClass.class, /*some id for firstSubType*/);\r\n```\r\n\r\nAlso works with when scanning/querying:\r\n\r\n```java\r\nList<BaseClass> objects = mapper.scan(BaseClass.class);\r\nobjects.forEach(o -> System.out.println(o.getClass())); \r\n/* prints FirstSubType.class, SecondSubType.class */\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bawejakunal": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1223", "title": "performance bottleneck fix for issue #1215", "body": "A depth first directory traversal leads to unnecessary network calls to S3 API and drastically reduces performance. In case of recursive download with prefix, simple listing and filtering of object keys should be sufficient.\r\n\r\nDetails:  https://github.com/aws/aws-sdk-java/issues/1215", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cnauroth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1206", "title": "Improve error messages when using proxy server.", "body": "If using a proxy server and the AWS exception does not\r\ncontain a request ID, then that's a potential sign that the\r\nrequest was rejected at the proxy server, because the\r\nrequest ID is assigned at the AWS server side.  This patch\r\nhelps users troubleshoot this by including the proxy host in\r\nthe exception message.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ialmetwally": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1204", "title": "Update ClientConfiguration.java", "body": "Explicitly specify that the request timeout is for the whole request including all retires and not for a single retry to avoid confusion.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "soo-aws": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1180", "title": "updating SES sample code to use builder instead of deprecated constructors", "body": "Got a ticket from internal customer regarding this sample ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kishore25kumar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1163", "title": "Bug fixed when sending null in AttributeUpdate", "body": "When trying to send null in AttributeUpdate.put the call to updateItem is failing. Here is the piece of code which will fail without this fix.\r\n\r\n``` \r\nfinal DynamoDB dynamoDB = new DynamoDB(amazonDynamoDBClient);\r\nfinal Table table = dynamoDB.getTable(TABLE_NAME);\r\nfinal AttributeUpdate attributeUpdate = new AttributeUpdate(\"test\").put(null);\r\ntable.updateItem(PARTITION_KEY_NAME, PARTITION_KEY_VALUE, SORT_KEY_NAME, SORT_KEY_VALUE, attributeUpdate);  \r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apeeters": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1155", "title": "Correct javadoc for setExpirationTimeRuleId: for internal use only", "body": "Add javadoc similar to setExpirationTime.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HunterSherms": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1133", "title": "Adding Equals and Hashcode to GetObjectRequest and S3ObjectBuilder", "body": "Adding Equals and Hashcode to GetObjectRequest and S3ObjectBuilder to improve the ability to unit test methods that create and use these objects.\r\n\r\nhttps://github.com/aws/aws-sdk-java/issues/1029", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dalbani": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1132", "title": "[S3] Support setting the listing delimiter for S3Objects", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mfenniak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1125", "title": "Clear last used provider when refreshing AWSCredentialsProviderChain", "body": "Currently `AWSCredentialsProviderChain`'s cache of the last used credential provider is maintained across `refresh()` invocations in the provider chain.  This means that after you've accessed the credentials once, `refresh()` effectively only refreshes the credential provider that was previously accessed; you can never switch to one earlier in the chain via a refresh.\r\n\r\nThis PR clears the cached last provider in a refresh.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rajeshbalamohan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1105", "title": "Optimize memory usage when reading response in XmlResponsesSaxParser", "body": "When responses are read, XmlResponsesSaxParser sanitizes the data. XmlResponsesSaxParser::sanitizeXmlDocument converts it back to String and passes it on to a ByteArrayInputStream. This ends up occupying lots of memory when the responses are bigger. Patch addresses this and helps in reducing the memory usage.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vvondra": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/1015", "title": "Pass DynamoDb mapper config when using Table Mapper", "body": "This is to fix the following scenario\r\n\r\n```java\r\n     new DynamoDBMapper(\r\n            dynamoDB,\r\n            DynamoDBMapperConfig.builder()\r\n                .withTableNameOverride(withTableNameReplacement(tableName))\r\n                .build()\r\n     ).newTableMapper(DomainObject.class);\r\n```\r\n\r\nIn the scenario above, the TableMapper does not respect the mapper config, e.g. in this case the table name override. When loading the object, it uses the `@DynamoDbTable` annotation to find the table name instead of using the override table value.\r\n\r\nSome methods already use `config`, but these PR makes the whole class consistent.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "es1220": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/599", "title": "Add custom update action by @DynamoDBAttribute's new property", "body": "I want to set specify update action each non-key attributes.\n\nAdd custom update action by @DynamoDBAttribute saveAction.\nThis action is performed when DynamoDBMapperConfig's SaveBehabior is CUSTOM.\nIf saveAction is not define (default NONE), it will perform the same as UPDATE does.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fulghum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2447559", "body": "Thanks for the patch Ryan.  We'll get this bug fix released in the next SDK version.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2447559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2824046", "body": "Changes for .project and .classpath look good.  I like electrum's comment about generating the OSGi manifest file so that it doesn't need to be updated by hand.  We can take a look at our build and deploy process on this side to see how we can fit that in.  I'd prefer not to provide any JDT preferences if possible.  Are there some specific compiler settings in there that were fixing some problems?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2824046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3024759", "body": "Thanks for the contribution Thomas!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3024759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3621519", "body": "Thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3621519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3656862", "body": "Thanks Andrew!  We appreciate the contribution.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3656862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3841083", "body": "Thanks for the pull request Hannes. We'll get this out in the next SDK release.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3841083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3986339", "body": "Hey Usman, thanks for the pull request. We like the idea of offering an alternative to polling Futures.  Callbacks into some interface like this would be a nice way to do it.  We need to discuss this on our team a little more, both design, and how we'd integrate these changes into our setup here.  \n\nIf you want the Maven pom change faster, we can split that out as a separate pull request and get that one merged in quickly.  \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3986339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4060363", "body": "Thanks for contributing the bug fix\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4060363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4162502", "body": "Thanks for the contribution Clayton!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4162502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4294354", "body": "Thanks for the contribution Marc.  This fix will go out in the next SDK release.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4294354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5476319", "body": "Hey Grant, thanks for submitting this patch.  We'll get this released in the next version of the AWS SDK for Java.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5476319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2918799", "body": "Let's use errorResponse.getStatusCode() here for setStatusCode to make sure we're reporting the right status code, just in case it isn't a 500 when this gets triggered.  \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2918799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2932660", "body": "I think the best thing for now is to set the real HTTP status code in StatusCode, just to avoid any confusion down the road.\n\nbut... I really like your idea about custom retry logic.  We've talked about supporting that several times over the past year or so, and I think it'd come in handy for a couple of good use cases.  We've had a few design brainstorming sessions around it, and it's great to hear that there's more interest in it from other developers.  \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2932660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/4006297", "body": "Looks like this comment should mention RFC 822 instead.  not a big deal if we take the comments out, since the variable names have the same information in them.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/4006297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/4006371", "body": "can we capitalize the 'r' just to be consistent with the other member names.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/4006371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/16682976", "body": "I like the idea of only using the AWS_PROFILE env var if a user hasn't explicitly specified one in the constructor.  This change seems pretty close to that behavior, except for the edge case where a user has explicitly passed \"default\" into the constructor.  \n\nCould you tweak the code to account for that case?  I don't think we'd want the AWS_PROFILE env var to be used in any case where a user did pass in an explicit profile name.  This behavior would also keep the handling of the AWS_PROFILE env var consistent with the other AWS SDKs.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/16682976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/19837658", "body": "It would be great to give this constructor a simple Javadoc description - to be consistent with the rest of the constructors in this class.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/19837658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ryantenney": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2448873", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2448873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "xoba": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2724913", "body": "after thinking about this a few more days, i think i'm actually satisfied calling the addRequestHandler method on the implementation classes like com.amazonaws.services.s3.AmazonS3Client directly... thus, i'm sort of \"cancelling\" my pull request. \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2724913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "electrum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2795383", "body": "Why are the Eclipse project files needed for a Maven project?  Install the m2e plugin and Eclipse will generate the project from the POM.\n\nThe OSGi manifest should be generated as part of the Maven build (for example, using the maven-bundle-plugin) rather than being a static file in the source tree.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2795383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3088744", "body": "Closing as this was added in 1.2.13.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3088744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "thallgren": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2797943", "body": "Maven can handle both approaches, i.e. a static OSGi manifest or a generated one. The Eclipse project files provided with this commit will not interfere with that. There are many projects at Eclipse.org that provides both Maven and Eclipse artifacts. This means that while you certainly may use m2e, it's not a requirement. The Eclipse IDE is fully capable of producing the bundle without it.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2797943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2831365", "body": "The problem with generating the OSGi is that you then also impose a requirement for a specific build system. Using the manifest as the pristine source for dependencies (somehting that Maven is capable of today), removes this requirement. The IDE is then sufficient to build the bundle. That means that other build tools that depend on the functionality provided by the IDE can build it too.\n\nThe JDT preferences were added to remove compiler warnings. The package contains a lot of unused imports and some raw types that should be parameterized.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/2831365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "usmanismail": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3946470", "body": "\"If there is interest I ....\"  Yes please.  We want to implement the an [HttpAsyncClient](http://hc.apache.org/httpcomponents-asyncclient-dev/index.html) version of the AmazonHttpClient and this would be great first step. We can avoid duplication of effort.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3946470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3950318", "body": "Resubmitting with cleaned up diff\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3950318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3986651", "body": "Please keep us posted as and when you can about what you decide about callback interfaces, there is no point duplicating efforts.\n\nPlease commit the pom change as convenient its not significant and so don't waste cycles on it.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/3986651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4230981", "body": "See my pull request https://github.com/amazonwebservices/aws-sdk-for-java/pull/11 I already updated the client to send the callback interface with a somewhat positive response. We wrote a asynchronous user management server using jetty continuations to support a lot of concurrent clients per node. We were bound by the overhead of polling futures for which I wrote my changes. Although the AWS client is no longer the bottle neck I think we can squeeze some more performance out of our system if we can limit the number blocked threads. Your change would be small step in making the internal http client customizable. \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4230981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4475077", "body": "Also added support for simpledb\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4475077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "eyealike": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4230332", "body": "Sorry for the late response. I am not sure the refactoring I suggested would help with an asynchronous client. Wouldn't the async client turn the entire control flow inside out? The application would have to pass in callback interfaces and those would have to be passed down all the way to the HTTP client, right? The refactoring I suggested would be completely transparent at the application level.\n\nAlso, I am not very encouraged by Amazon's response (or lack thereof) to this pull request. They are probably not very interested in letting applications customize the HTTP client.\n\nWhat are you trying to achieve with making the AWS client asynchrounous? Does your application have many concurrent requests?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4230332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mlimotte": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4294430", "body": "Good news.  Thanks, Jason.\n\nOn Fri, Mar 2, 2012 at 4:23 PM, Jason Fulghum <\nreply@reply.github.com\n\n> wrote:\n> \n> Thanks for the contribution Marc.  This fix will go out in the next SDK\n> release.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/amazonwebservices/aws-sdk-for-java/pull/15#issuecomment-4294354\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4294430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "memory": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4295129", "body": "Thanks, Jason!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4295129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zachmu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4532199", "body": "Thanks for the bug fix!  We implemented a slightly different fix to correct additional issues with key handling, but it's there in the tip of master.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4532199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5920149", "body": "Hi Ivan,\n\nI really like this idea!  However, for this to be a complete solution, it really needs to be more general and two-way: i.e., the type dispatcher interface would need to also persist information about an object's type when writing back to DynamoDB.\n\nI think I would prefer to see this implemented at a much more basic level, perhaps by a configuration enum in DynamoDBMapperConfig that allows customers to name an attribute in which to store the fully-qualified name of the java class being persisted, optionally attaching an implementation of TypeDeterminator that can determine the name of the attribute to store type info in, the actual value to store for a given type, and return a class to instantiate for a given service response.  Make sense?\n\nZach\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5920149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rajeshkp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4804513", "body": "I guess it makes a lot of sense to move the dependencies into the POM, so that we can do away with the pre-requisites related to SWF and the test specific files. When will this change be merged into the main branch\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/4804513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "phambryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5582134", "body": "Need to move unit tests into test section before you can <scope>test</scope> \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5582134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "itoshkov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5925596", "body": "I like the TypeDeterminator name you suggest for the interface. I'm not a native English speaker and coming up with good names isn't always easy.\n\nI think your suggestion is on a higher level of abstraction (as it hides the type determination), but is actually _less_ general than mine. For example, it won't be able to directly handle legacy data. You'll have to first add this additional attribute to all items, and this may not always work.\n\nThat said, I don't see why we can't have both.\n\nA somewhat manual way to implement your proposal on top of mine would be to:\n- Add a determinant attribute to the base of the persistent hierarchy:\n\n``` java\nclass User {\n    @DynamoDBAttribute(attributeName = \"determinant\")\n    public String getDeterminant() { return getClass().getCannonicalName(); }\n}\n```\n- Use a TypeDeterminator which just loads the named class.\n\nI'm not sure how to make the first step more elegant. Probably some specialized annotation?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/issues/comments/5925596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ijuma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/380439", "body": "Seems like this version is not in the Central Maven repo. Any chance it could be added? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/380439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rafael81": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4322375", "body": "Please include this changes to the release note. It's important. The reason is jsonignore annotation does not work using 1.9.6 in my biz project . But I can't realize it... After removing aws-java-sdk 1.5.7 then I noticed it. So I think other developer should know this changes.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4322375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jrmartin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4887578", "body": "Hello, will this release be available in the maven repository? I only see up to 1.6.8 in here http://maven-repository.com/artifact/com.amazonaws/aws-java-sdk. Tryiing to use the bundle in a virgo project. \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4887578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4888021", "body": "I see, I wanted to use the 1.6.9 OSGI bundle in a virgo project that uses maven, the virgo project is rejecting the normal jar dependency.  \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4888021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4888587", "body": "Cool, I'll give these a try.thanks\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4888587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "david-at-aws": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4887671", "body": "Looks like that site is running with an out-of-date view of maven central, perhaps because of a mixup where the artifacts we produced were temporarily switched to OSGi bundles instead of normal jars? Version 1.6.9.1 (which corrects the bundle thing) IS available in maven central: http://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk/1.6.9.1/\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4887671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4888135", "body": "Version 1.6.9 (http://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk/1.6.9/) has the bundles as output if you'd like to give that a shot. Alternatively you can build the SDK from source, which still has the packaging as 'bundle' in the pom.xml.\n\nYou may also be interested in https://github.com/aws/aws-sdk-java/pull/48, where we're discussing how to get the SDK set up for OSGi in a more permanent fashion.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/4888135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ankon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/7821392", "body": "Since you're now referring to that version also in the modules, it would make sense to also update it there (in `<parent>` and `<version>` and potentially the dependencies). \n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/7821392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ellecer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/14406413", "body": "maven-compiler-plugin version should be 3.0 or higher to support the element 'forceJavaCompilerUser' - see https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#forceJavacCompilerUse\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/14406413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nec-mas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/25773518", "body": "with this version, i can not define my tagging provider anymore.\r\nUploadContext is not a public class, so i can not implement the ObjectTaggingProvider interface.", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/25773518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "d-tarasenka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/26543646", "body": "Hello,\r\n\r\nwhat's about Object#hashCode here? Now I've got LambdaSerializationException", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/comments/26543646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "garnold": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2919130", "body": "Understood.  The spirit of using `SC_INTERNAL_SERVER_ERROR` explicitly was to trigger an automatic retry in `AmazonHttpClient#shouldRetry`.  Note that we store the real HTTP status code/text in  `AmazonServiceException#setErrorCode`.\n\nI guess it comes down to whether there are cases where an AWS service might return an empty response where you wouldn't want to automatically retry?  Perhaps the better change would be to support user-defined retry logic and/or error handlers?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2919130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2935188", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2935188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2935236", "body": "FWIW we have a number of instances where we've created custom retry logic further up in the application stack (ie. facades around specific services, particularly EMR).  But this is one of the few times that we've needed to apply it at the HTTP layer.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/2935236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3015300", "body": "Hey Jason, it turns out that setting the status code in the error response handler ends up having no effect because it's eventually overwritten in `AmazonHttpClient#handleErrorResponse`, so I've removed it here.\n\nAnd on another note, after making this change we discovered that the reason our EMR API calls were failing is due to a \"505 HTTP Version Not Supported\".  Looks like this has been a frequent issue with other services on the forums[1] but thought I'd let you know anyway.\n\n[1] https://forums.aws.amazon.com/thread.jspa?threadID=72406\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3015300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "weitzj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3190770", "body": "This file can be ignored\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3190770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3190820", "body": "Needs this extra check, since some File-Objects in FileList might be directories.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3190820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3190805", "body": "Fail gracefully. Since it is possible for a user to call this method with a NULL FileList, the default behaviour is to change the TransferState to completed, as it would have been with an empty FileList.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3190805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "pas256": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3863248", "body": "What was the actual change in this file? Looks like it might have been a tab vs space indentation thing?\n\nThis kind of thing breaks attribution (git blame), so there is a chance the PR will be rejected because of it.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/3863248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "edaniels": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/19838316", "body": "done. updated others that use externalId as well.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/19838316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "hansonchar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27243353", "body": "This looks a bit convoluted:\n\n``` java\n    private static final int MAX_RETRIES_BEFORE_MAX_BACKOFF =  (int)(Math.log(MAX_BACKOFF_IN_MILLISECONDS / SCALE_FACTOR) / Math.log(2));\n```\n\nWhy not just:\n\n``` java\n    private static final int MAX_RETRIES_BEFORE_MAX_BACKOFF =  6;\n```\n\n?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27243353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27243427", "body": "The change of bit-wise shift from 1 to 1L also looks unnecessary.  This increase the runtime overhead, albeit very small, with no advantages.  What am I missing ?\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27243427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27278486", "body": "I'd vote for simplicity and change the constant when the other values are changed, instead of having readability to suffer.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27278486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27278538", "body": "I'd vote to keep it simple and keep the 1 instead of 1L.  Nothing to do with optimization, but more  to simplicity and readability.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27278538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27299924", "body": "Hi @amrasarfeiniel, may I withdraw my original comment/vote?  Just realized I misread the code.  I know this is minor, but 1L is nicer and more correct, and reflect the intent (of using the long type) more closely.  My apologies.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27299924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27299931", "body": "Hi @amrasarfeiniel, may I withdraw my original comment/vote?  Just realized I misread the code.  I know this is minor, but 1L is nicer and more correct, and reflects the intent (of using the long type) more closely.  My apologies.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27299931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30204089", "body": "We can get rid of the \"success\" variable if we moved line 164-165 to line 152.\n\nFurthermore, we can then get rid of line 141 by declaring `masterSecret` at line 143:\n\n``` java\nObject masterSecret = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n```\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30204089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30206058", "body": "I see why the need for the success flag now.\n\nOn SecurityException, even though It's not thrown by the security manager, it's a security violation.  I agree this is probably the wrong exception, but not sure if there is a better one.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30206058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "amrasarfeiniel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27248422", "body": "because if someone changes the other constants, then 6 will no longer be correct.  This value actually depends on the other values here.  In my experience, people will make changes to these when they decide there are better values and not realize they need to change this.  Then you could be sad.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27248422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27248633", "body": "it may not be important, but the delay actually is a long, and part of the overflow problem was that it was integer overflowing, not long overflowing.  Also, the perf of bitshifts and multiplies is totally insignificant relative to s3's perf, so that really shouldn't be a concern here.  If you're worried about optimizing perf, you should be looking elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27248633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27317786", "body": "ok, if I do that I'll also add a comment on the other constants about how people need to update this new one if they update the others and give them the formula I used for it.  Is that better?  I'm definitely not committing the magic number 6 with no context.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/27317786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rmuir": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30205185", "body": "This method will catch its own securityexception if we do that. This needs to be differentiated between that of an actual securityexception coming from doPrivileged(), which is not a checked exception, hence will not be wrapped in PriviligedActionException.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30205185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30205332", "body": "Personally, i wouldn't throw a SecurityException here at all, then you could do the simplification you suggest. Its absolutely the wrong exception for AWS logic to be throwing from this method: its \"Thrown by the security manager to indicate a security violation.\"\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30205332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30206226", "body": "I wanted to not \"break the api\" and change the exception type, to make this change less invasive, to not have any impact on backwards compatibility, or other concerns. Personally, i think IllegalStateException is a good one for this case though.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/30206226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "SalusaSecondus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/31536799", "body": "This should probably throw an SSLException as it is a clear violation of the protocol.\n", "reactions": {"url": "https://api.github.com/repos/aws/aws-sdk-java/pulls/comments/31536799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}