{"_default": {"1": {"belgoros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/99", "title": "Faraday call fails behind a proxy", "body": "Hello, I've just had the same issue, - the same code works fine out of proxy but fails if there is proxy.\r\nHere is what the `env` command displays in the Terminal:\r\n```\r\nhttp_proxy=http://host-name.net:80\r\nHTTP_PROXY=http://host-name.net:80\r\nhttps_proxy=http://host-name.net:80\r\nHTTPS_PROXY=http://host-name.net:80\r\nno_proxy=127.0.0.1,localhost,10.1*.*.*,....some.others.sites.com\r\nNO_PROXY=127.0.0.1,localhost,10.1*.*.*,som.others.sites.com\r\n```\r\nHere is the error I get when trying to access Google APIs:\r\nIPAddr::InvalidAddressError (invalid address), see below function:\r\n```\r\ndef auth_client\r\n    Signet::OAuth2::Client.new(\r\n      authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n      token_credential_uri: 'https://www.googleapis.com/oauth2/v3/token',\r\n      client_id: ENV['GOOGLE_KEY'], client_secret: ENV['GOOGLE_SECRET'],\r\n      scope: 'email profile', redirect_uri: 'http://localhost:4200/oauth2callback'\r\n    ).tap do |client|\r\n      client.code = params['code']\r\n      client.fetch_access_token!\r\n    end\r\n  end\r\n```\r\nThe line that fails is:\r\n```\r\nclient.fetch_access_token!\r\n```\r\nHere are my settings:\r\n```\r\nruby 2.4.0\r\ngem 'google-api-client', '~> 0.19.3'\r\ngem 'jwt', '~> 2.1.0'\r\ngem 'signet', '~> 0.8.1'\r\ngem 'figaro', '~> 1.1.1'\r\nrails '5.1.4'\r\n```\r\nIf I unset the proxy setting, here is the error I have:\r\n```\r\nFaraday::ConnectionFailed (Failed to open TCP connection to www.googleapis.com:443 (No route to host - connect(2) for \"www.googleapis.com\" port 443)):\r\n```\r\nAny ideas on what is wrong here ? Thank you.\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phallguy": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/90", "title": "Use case vs standard oauth2 gem", "body": "I apologize if this is covered elsewhere already but couldn't really find what I'm looking for. I'm doing some up-front research for a project trying to decide which dependencies to take on. The [oauth2](https://rubygems.org/gems/oauth2) gem from intridea has ben around for quite some time and is used by several other ruby projects when working with OAuth 2 APIs. \r\n\r\nWhy would a project use signet instead of the standard oauth2 gem?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/90/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rusikf": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/88", "title": "Detect expired token", "body": "How to detect if user oauth2 offline token has been expired and refresh it ?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rems75": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/87", "title": "Missing \"approval_prompt\" in authorization_uri", "body": "I wrote a Rails app synching with Google Calendar. I'm currently trying to obtain new refresh_tokens from the API as a bug prevented me from saving them in the first place.\r\nI am using approval_prompt: force (or prompt: consent I have tried both), the code is: \r\n   \r\n    google_client = Signet::OAuth2::Client.new({\r\n         client_id: ENV.fetch('GOOGLE_CLIENT_ID'),\r\n         client_secret: ENV.fetch('GOOGLE_CLIENT_SECRET'),\r\n         authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n         scope: Google::Apis::CalendarV3::AUTH_CALENDAR_READONLY,\r\n         redirect_uri: 'http://localhost:8000/google_calendar',\r\n         access_type: \"offline\",\r\n         approval_prompt: \"force\"\r\n      })\r\n\r\n    URI = google_client.authorization_uri.to_s\r\n\r\nThe URI does not contain the approval_prompt that I would expect (and when I add it manually, I do get prompted for consent). Am I missing something? ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sporkmonger": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/84", "title": "Signet still uses client_id and client_secret parameters instead of Authorization header", "body": "\"Including the client credentials in the request-body using the two parameters is NOT RECOMMENDED and SHOULD be limited to clients unable to directly utilize the HTTP Basic authentication scheme (or other password-based HTTP authentication schemes).  The parameters can only be transmitted in the request-body and MUST NOT be included in the request URI.\"\r\n\r\nBack in draft 7 or so when Signet was originally written, it was the other way around, where `client_id` and `client_secret` were the recommended approach. However nowadays, lots of auth servers don't support these parameters (auth servers MAY support them) and Signet should switch to doing what the final RFC recommends.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/51", "title": "Comparing signatures with `==` is bad security practice due to byte-wise short-circuit being a potential source of subtle timing attack.", "body": "If you compare user supplied signature to calculated signature using `==`, Ruby will helpfully abort the comparison early if you have a mismatch between the signatures. There's at least a few places in Signet that do this, with the OAuth 1 server code that @mechazoidal contributed being the most exposed to the issue. In a nutshell, you probably want a non-short-circuited equality check for that.\n\nRealistically, I doubt anyone could actually build an exploit for this in large part due to Ruby's wildly varying runtimes for web requests, but I don't really want to find out the hard way, so this should probably get eliminated as even a possibility, just in case.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/7", "title": "signet as Faraday middleware?", "body": "With the switch to Faraday, it might make sense to offer signet as Faraday middleware rather than acting as a front-end to it.  E.g.\n\n```\nclient = Signet::OAuth2::Client.new...\naccess_token = ... # get access token\n\nconn = Faraday.new do |builder|\n  builder. user Signet::OAuth2::Client, access_token\nend\n\nconn.get(...)\n```\n\n(Copied from @sqrrrl's issue on the original Signet project.)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/7/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5426381", "body": "Is the issue that assertion/extension grant types may not require a client ID or secret?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5426381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858", "body": "OK, in that case, I suspect the checks for client ID and secret should be reintroduced, but restricted only to the scenarios where they would apply. So you probably need to check the grant type before doing the check.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336", "body": "Fixed in 7a22c04.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053", "body": "Yeah, that issue is happening on master right now.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888", "body": "Gotcha. Merging...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550", "body": "Is this a change to the JWT spec?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232", "body": "The Travis test failures look legit. Please resolve for 1.8.7 and 1.9.2.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252", "body": "Uh oh... That sounds like it'll be a pain to resolve.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872", "body": "Can you produce a minimal test case? I've been completely unable to duplicate this. And this seems like the kind of thing that would cause a billion test failures if it were happening in anything but the edgiest of edge cases... \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991", "body": "Is there a place to file bugs against the API console?\n\nIt doesn't work with [Pow](http://pow.cx/). Reports 'OAuth 2 redirect URL \"https://example.dev/oauth2callback\" is invalid.'\n\nDiscovered while trying to hunt this bug down. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480", "body": "Actually, the Signet test cases catch this already.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888", "body": "As expected, this is turning out to be incredibly difficult to track down. :cry:\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037", "body": "Aha. That's why I can't find it. I already fixed it. And I believe you are correct that that is the commit that did it. The `gsub!` is the culprit I think. Regardless, it's resolved in 2.3.4.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566", "body": "Master is passing. I'll merge and update if the failures come back.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782", "body": "@brainopia Could you look at this? I think you were the last person to do anything with `expires_at`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4354794", "body": "@sqrrrl Anything else pending on signet you want me to get in before I cut a release?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4354794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/6594630", "body": "@jagwire I just pushed a release, but didn't see #41 until after I'd done so.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6594630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8503371", "body": "I assume the parameters in the form encoded body and JSON body are equivalent and otherwise identical once parsed into a `Hash`?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8503371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8513536", "body": "Travis doesn't seem to have the `jruby-20mode` binary available anymore?\n\nMight need to move it to the allowed failures portion of the build matrix.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8513536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664234", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664253", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664317", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664329", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "seuros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/77", "title": "Replace faraday with HTTPI", "body": "@sqrrrl  \nRecently i was updating an application that has the the adsword gem, and i noticed that this gem use a different http wrapper than the rest of google's gem.\n\nDo you think it make sense to replace Faraday with HTTPI  ? i could do it in the coming days.\n\nAlso travis is not configured for this project.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/77/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/19d386a603411f558461d654ec1b8ffbf0f6250c", "message": "version bump"}, {"url": "https://api.github.com/repos/google/signet/commits/459017fe0315922f2d74f16acabb72642c238ed8", "message": "Fix Licence"}, {"url": "https://api.github.com/repos/google/signet/commits/25dab938e1cb4663f3cf01306431de449477bed2", "message": "test latest version of ruby"}, {"url": "https://api.github.com/repos/google/signet/commits/590ddd5cf02c82ea45b9bab6475a9306e555bc00", "message": "there is no rails here."}, {"url": "https://api.github.com/repos/google/signet/commits/642a1d25abf586843d6b264c1ad8d7d269271f3d", "message": "remove compact folder"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbem": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/75", "title": "After upgraded to 0.7.3 i started to get \"Missing token endpoint URI\" Error message", "body": "I guys, after updating the gem to 0.7.3, the auth stop working fine. \n\nWhat i'm doing is this:\n\n``` ruby\n    client = Signet::OAuth2::Client.new(access_token: token)\n\n    service = Google::Apis::PlusV1::PlusService.new\n\n    service.authorization = client\n\n    profile = service.get_person('me', fields: 'displayName,emails/value,image,gender,id')`\n\n```\n\nwhen the request is done it throughs  \"Missing token endpoint URI\"  this is working with the previous version. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbackeus": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/50", "title": "Gemspec dependency version conflict with code", "body": "In your gemspec you have specified JWT version ~>1.0 and faraday version ~>0.9.\n\nBut inside your oauth 2 client you override the dependencies with incompatible versions.\n\nEnd result is it's impossible to use the signet gem with Bundler, which will install the gemspeced dependencies and subsequently raise error when trying to initialize the oauth client:\n\n```\n/home/runner/.rbenv/versions/2.1.3/lib/ruby/gems/2.1.0/gems/bundler-1.7.11/lib/bundler/rubygems_integration.rb:266:in `block in replace_gem': can't activate jwt (~> 0.1.4), already activated jwt-1.2.0. Make sure all dependencies are added to Gemfile. (Gem::LoadError)\n    from /home/runner/mynewsdesk/vendor/bundle/ruby/2.1.0/gems/signet-0.4.5/lib/signet/oauth_2/client.rb:25:in `<top (required)>'\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/50/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jagwire": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/41", "title": "TypeError (Can't convert Hash into String) OAuth2 client", "body": "While I thought it was to be fixed in c3efb8b68cfdca8a50a6435c401cfd0665500d1b I'm still seeing this issue at oauth_2/client.rb:258\n\nI'm merely following the example from: https://developers.google.com/drive/web/credentials\n\nPlease advise.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6527628", "body": "Not to be annoying, but did a release ever get cut to include these changes? I still see 0.5.0 on RubyGems...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6527628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sqrrrl": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/11", "title": "Update id_token to match spec", "body": "Minor fix required to the id_token validation. The audience (aud) may now be either a string or array, validation will need to be updated.\n\nAlso worth improving the validation in general to check issued & expiration times.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/d5d3445adc273d2d730923f999e8cc7c14d62f6a", "message": "Mark test as pending util test data can be verified"}, {"url": "https://api.github.com/repos/google/signet/commits/621515ddeec1dfb6aef662cdfaca7ab30e90e5a1", "message": "Merge pull request #89 from pkern/master\n\nAdd the configured scope to the access token request."}, {"url": "https://api.github.com/repos/google/signet/commits/3d19c17c0ecf598a652364be82fd4c30728a7e78", "message": "Merge pull request #76 from foxtacles/master\n\nAdd DateTime conversion"}, {"url": "https://api.github.com/repos/google/signet/commits/ede9ac4a9dd915ba23107dae98c0eada6cd98e33", "message": "Merge pull request #78 from seuros/master\n\nDrop old code and test in recent version of ruby."}, {"url": "https://api.github.com/repos/google/signet/commits/45660a6a12e3b83dee8710295a77854e82a9fc66", "message": "Merge pull request #79 from chutzimir/expires_at_should_be_updated\n\nThe \"expires_at\" attribute should also be recalculated on refresh"}, {"url": "https://api.github.com/repos/google/signet/commits/7ae73a5e2bdaf80eb6027972190bd60a4ef289c8", "message": "Merge pull request #85 from koic/integer_unification\n\nInteger Unification for Ruby 2.4.0+"}, {"url": "https://api.github.com/repos/google/signet/commits/92cce13573ecef916c25d7d0db30c40e3d76ddae", "message": "Release 0.7.3"}, {"url": "https://api.github.com/repos/google/signet/commits/2ec58a60760775983b2b22f6f6c9cdd477f5f284", "message": "Relax exception check"}, {"url": "https://api.github.com/repos/google/signet/commits/d9060814dbe95701c6890be6a4cac7af88adb759", "message": "Bump version"}, {"url": "https://api.github.com/repos/google/signet/commits/d711d32c543f66e7a4a94d3333a06c7cba6e3755", "message": "Fix expiry check when expires_at is nil. Assume expired"}, {"url": "https://api.github.com/repos/google/signet/commits/4cd847a8522b2d51f36ff9dd281030b87fa9793b", "message": "Remove oauth1 google service spec since no longer supported by google"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5430024", "body": "Yes, the JWT assertion profile doesn't include either of them as parameters since its in the assertion itself. Even some of the other profiles like user credentials don't explicitly require the two be set.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5430024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968", "body": "Hmm, not sure the spec supports making these required in any circumstance.\n\nhttp://tools.ietf.org/html/draft-ietf-oauth-v2-25#section-2.3.1\n\n```\nAlternatively, the authorization server MAY support including the\nclient credentials in the request body using the following\nparameters:\nclient_id\n     REQUIRED.  The client identifier issued to the client during\n     the registration process described by Section 2.2.\nclient_secret\n     REQUIRED.  The client secret.  The client MAY omit the\n     parameter if the client secret is an empty string.\n\nIncluding the client credentials in the request body using the two\nparameters is NOT RECOMMENDED, and should be limited to clients\nunable to directly utilize the HTTP Basic authentication scheme (or\nother password-based HTTP authentication schemes).  The parameters\ncan only be transmitted in the request body and MUST NOT be included\nin the request URI.\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945", "body": "Yes, see http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06#section-4.1.3\n\n\"aud\" may be either an array of string/uris or just a single string/uri.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044", "body": "My hunch is it was introduced around https://github.com/sporkmonger/addressable/commit/2069f252a747b89adf70ba9673cb3e39789f1ff0\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109", "body": "Need to sign the CLA before I can merge - https://developers.google.com/open-source/cla/individual\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4364757", "body": "Not at the moment :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4364757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dazuma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/440b8357fe02151db031a4d5decb2540995d85ee", "message": "Update changelog and version for 0.8.1 release"}, {"url": "https://api.github.com/repos/google/signet/commits/cac065932ad3d537005f5d08273605182ce61a37", "message": "Recover support for Ruby 1.9.3 (#97)"}, {"url": "https://api.github.com/repos/google/signet/commits/2e22545cf2087813d34ee755455ed09af222b2a0", "message": "Update 0.8 changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/2adc7bf601ad05effe84495fbae1aa1a43afc965", "message": "Made using the configured scope in token requests opt-in per discussion on PR #89"}, {"url": "https://api.github.com/repos/google/signet/commits/e4b6e76dd1f1def73d43be47113d97224918152e", "message": "Update changelog for 0.8.0 release"}, {"url": "https://api.github.com/repos/google/signet/commits/c50ab22074e7d23458d648b5d8b511e6dafd0bc0", "message": "Add bundler tasks"}, {"url": "https://api.github.com/repos/google/signet/commits/c6d09b7770e070c29e8d7c0edcd574b29e5a191d", "message": "Update ruby versions to test on travis"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mvastola": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/2f30b67352f49f479ed8d326e7c72ebe86fa310f", "message": "Signet::OAuth2::Client#decoded_id_token should take optional (#96)\n\n&keyfinder block for JWT.decode\r\n\r\nCloses #95; Closes #96"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EdwardBetts": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/416fccf13e9a772e5a7a773128e9037fc840d817", "message": "correct spelling mistake (#92)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jurriaan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/c9d21b365d2b668c11a6b737f95236b70037c2e9", "message": "Support ruby-jwt 2.0 (#93)\n\n* Support ruby-jwt 2.0\r\n\r\nThis version of ruby-jwt requires specification of the algorithm (see\r\nhttps://github.com/jwt/ruby-jwt/pull/184) for more information.\r\n\r\n* Use specific version of JRuby to fix CI for now"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/96ffadbd7897372b708ee0db1f47e7d24e35c678", "message": "Add the configured scope to the access token request."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/5e7b79b74d97fdf43e2ee513037d30afc1e102e2", "message": "Integer Unification for Ruby 2.4.0+"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chutzimir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/0e6090ca2cf2568d8450192af783f32170d23df1", "message": "The \"expires_at\" attribute should also be recalculated on refresh\n\nBy nil-ing the expires_at attribute, next time expires_at is accessed\nthrough the reader, it will get recalculated.\n\nAs it is currently, when refreshing the access_token, the issued_at,\nexpires_in would get updated, but expires_at may still indicate that the\ntoken has expired."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "foxtacles": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/770dd9411cbfddaa136bc58af23a14cebfdfce5b", "message": "Merge remote-tracking branch 'upstream/master'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sajithapps": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/98", "title": "Fixing to_json to adopt calling with argument", "body": "to_json expects 0 argument but passed 1", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmitchell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/82", "title": "A null auth is expired", "body": "Wasn't refreshing the token if it had no issued at", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rbpawle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/81", "title": "Corrected '!= nil' to '!...nil?'", "body": "Since upgrading to Ruby 2.3 we've seen some failures inside the signet gem when calling the google-adwords-api gem which references signet. We've found that changing all '!= nil' statments to '!...nil?' statements fixes the problem.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "confiks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/80", "title": "Don't doubly encode ampersand in OAuth1 plaintext signature method", "body": "I was having trouble connecting to an OAuth1 provider with the PLAINTEXT signature method using Signet. It seems that the ampersand in the signature is being doubly encoded, and that therefore my OAuth1 provider fails to accept the signature.\r\n1. The ampersand is first encoded in [plaintext.rb](https://github.com/google/signet/blob/master/lib/signet/oauth_1/signature_methods/plaintext.rb#L17).\r\n2. The signature value is then passed through `generate_temporary_credential_request` / `generate_token_credential_request` / `generate_authenticated_request` to [`generate_authorization_header`](https://github.com/google/signet/blob/master/lib/signet/oauth_1.rb#L217) where the value (the signature) is encoded again.\r\n\r\nI removed the encoding step in the generation of the signature itself, and let it be encoded properly in `generate_authorization_header`. I updated the plaintext test case accordingly. I'm wondering if this fix is correct and how the compatibility is for other providers, seeing that this library has been doing this for such a long time already.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joncalhoun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/63", "title": "Fixed issue #41 where redirect_uris couldn't be passed in as a hash", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xelwarto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/48", "title": "Changes to OAuth2 authentication JSON output", "body": "Example code located on the Google developers site for Ruby (https://developers.google.com/api-client-library/ruby/auth/web-app) utilizes the JSON output of the authentication information in a stored session for creating the OAuth2 client. While this works correctly for the first fetch of the access token, the JSON output does not provide adequate information regarding the expiration of the access token. With out the expiration information it is impossible to track and test for an expired access token in subsequent API executions. The changes in this PR add the **expires_in** and **issued_at** parameters to the JSON output which allows the client to properly track and verify if the access token has expired.\n\nAdditionally, while testing the creation of an OAuth2 client using the JSON output I came across an exception with how the authorization URI was being created. The following error was reported:\n\n```\n/usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `sort!': comparison of Array with Array failed (ArgumentError)\n    from /usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `query_values='\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2.rb:152:in `generate_authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:263:in `authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:853:in `to_json'\n```\n\nThe issue was the result of mismatched hash key types ... the resulting merge of the query_values hash had a mix of both Symbol and String key types. This PR includes changes to normalize the query_values hash before the merge.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AnalogJ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/39", "title": "added ability to access raw response parameters from credential.", "body": "Some oAuth1 services return the access token and secret with some additional meta data like `expiry` and `id` information which is currently inaccessible. I've added a `@raw` accessor to the credential class to allow developers to access additional metadata if needed. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdewyea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/30", "title": "fix verify_request_components variable assignment", "body": "If `request` is an array, `verify_request_components` raises a `NoMethodError` when trying to access `request.method`.\n\nTo reduce the number of conditionals, this commit also makes the assumption that if `options[:adapter]` is supplied, we want to adapt the `request`.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "travisbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8283533", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338449) (merged 6b6d700e into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338517) (merged 9b2ae8ba into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338991) (merged 09f065fb into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rmacklin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8304848", "body": "The failures on Travis CI are \"Signet::AuthorizationError: 464 Authorization failed. Server message: 465 Timestamp is too far from current time\" (only on some versions of ruby). They don't happen locally, so it looks like it might just be a clock issue.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8304848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236", "body": "When I was tracking down the warnings, I commented out those 2 lines to make sure they were the cause. But I realized it was stupid to keep them commented out instead of just removing them. I've made the change in my fork (though I didn't make a new pull request).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sanemat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/11660863", "body": "`\\xAA` is invalid encoding in UTF-8. This is ascii-8bit.\n\n```\n/Users/sane/work/ruby-study/signet/lib/signet.rb:22: invalid multibyte escape: /[\\s\\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]/ (SyntaxError)\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /[\\s\\x21-\\x26\\x28-\\x5B\\x5D-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nevir": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/16558827", "body": "@sporkmonger it looks like the 1.8 series test failures are [from `master`](https://travis-ci.org/google/signet/builds/5471849)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16558827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "brainopia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/17150195", "body": "@sporkmonger I've looked but I don't see any reason for such a sporadic behavior. The only suggestion to check if tests are ran in random order and if so can this fail be repeated using the same seed.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17150195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pauljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/21006111", "body": "The offending default is imposed here: https://github.com/google/signet/blob/4532135f5c3c923e75c39fd1871a8937627ef182/lib/signet/oauth_2/client.rb#L247\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/21006111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/22605354", "body": "I was just trying to keep the same default behaviour but allow support for changing it but I agree that it isn't really for Signet to decide these defaults for you anyway so have removed. \n\nThe specs showing the default behaviour for access_type and response_type have been left in but maybe they could be removed? \n\nI also added a raise to fail fast if trying to request an authorization uri with both approval_prompt and prompt parameters.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22605354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "alauper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4302808", "body": "When do you plan on cutting a new gem version?  the latest on RubyGems (0.5.0) does not include these changes.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4302808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "taka-oyama": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6580080", "body": "+1. still seeing this error.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6580080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jww": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/7630407", "body": "Any chance of breaking out the hashification occurring in the to_json serialization methods into their own to_hash methods? \n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/7630407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Ailenswpu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/18241429", "body": "@sqrrrl @sporkmonger \nI'm using signet for GooglePlay IAP verification on 2014, I can get  access_token from the code directly:\n\n``` ruby\n\n client =  Signet::OAuth2::Client.new(\n          token_credential_uri: 'https://accounts.google.com/o/oauth2/token',\n          audience: 'https://accounts.google.com/o/oauth2/token',\n          scope: 'https://www.googleapis.com/auth/androidpublisher',\n          issuer: 'example@developer.gserviceaccount.com',\n          signing_key: Google::APIClient::KeyUtils.load_from_pkcs12('some path'), 'notasecret'),\n        person: 'ailen@big-bang-games.com')\n        client.fetch_access_token!\n```\n\nhow can i do the same thing of the new version of signet?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/18241429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pjg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/22446586", "body": "This commit is causing this error while accessing Google APIs using `google-api-client`:\r\n\r\n```\r\nAuthorization failed.  Server message:\r\n{\r\n \"error\": \"unsupported_grant_type\",\r\n \"error_description\": \"Invalid grant_type: \"\r\n}\r\n```\r\n\r\nThe fix is to include the following in the authorization (example is in Rails):\r\n\r\n```\r\nauthorization = Signet::OAuth2::Client.new(...)\r\nauthorization.expires_in = 1.week.from_now\r\n```\r\n\r\nReference: https://github.com/google/signet/issues/75#issuecomment-231954956", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/22446586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}, "2": {"belgoros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/99", "title": "Faraday call fails behind a proxy", "body": "Hello, I've just had the same issue, - the same code works fine out of proxy but fails if there is proxy.\r\nHere is what the `env` command displays in the Terminal:\r\n```\r\nhttp_proxy=http://host-name.net:80\r\nHTTP_PROXY=http://host-name.net:80\r\nhttps_proxy=http://host-name.net:80\r\nHTTPS_PROXY=http://host-name.net:80\r\nno_proxy=127.0.0.1,localhost,10.1*.*.*,....some.others.sites.com\r\nNO_PROXY=127.0.0.1,localhost,10.1*.*.*,som.others.sites.com\r\n```\r\nHere is the error I get when trying to access Google APIs:\r\nIPAddr::InvalidAddressError (invalid address), see below function:\r\n```\r\ndef auth_client\r\n    Signet::OAuth2::Client.new(\r\n      authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n      token_credential_uri: 'https://www.googleapis.com/oauth2/v3/token',\r\n      client_id: ENV['GOOGLE_KEY'], client_secret: ENV['GOOGLE_SECRET'],\r\n      scope: 'email profile', redirect_uri: 'http://localhost:4200/oauth2callback'\r\n    ).tap do |client|\r\n      client.code = params['code']\r\n      client.fetch_access_token!\r\n    end\r\n  end\r\n```\r\nThe line that fails is:\r\n```\r\nclient.fetch_access_token!\r\n```\r\nHere are my settings:\r\n```\r\nruby 2.4.0\r\ngem 'google-api-client', '~> 0.19.3'\r\ngem 'jwt', '~> 2.1.0'\r\ngem 'signet', '~> 0.8.1'\r\ngem 'figaro', '~> 1.1.1'\r\nrails '5.1.4'\r\n```\r\nIf I unset the proxy setting, here is the error I have:\r\n```\r\nFaraday::ConnectionFailed (Failed to open TCP connection to www.googleapis.com:443 (No route to host - connect(2) for \"www.googleapis.com\" port 443)):\r\n```\r\nAny ideas on what is wrong here ? Thank you.\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phallguy": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/90", "title": "Use case vs standard oauth2 gem", "body": "I apologize if this is covered elsewhere already but couldn't really find what I'm looking for. I'm doing some up-front research for a project trying to decide which dependencies to take on. The [oauth2](https://rubygems.org/gems/oauth2) gem from intridea has ben around for quite some time and is used by several other ruby projects when working with OAuth 2 APIs. \r\n\r\nWhy would a project use signet instead of the standard oauth2 gem?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/90/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rusikf": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/88", "title": "Detect expired token", "body": "How to detect if user oauth2 offline token has been expired and refresh it ?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rems75": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/87", "title": "Missing \"approval_prompt\" in authorization_uri", "body": "I wrote a Rails app synching with Google Calendar. I'm currently trying to obtain new refresh_tokens from the API as a bug prevented me from saving them in the first place.\r\nI am using approval_prompt: force (or prompt: consent I have tried both), the code is: \r\n   \r\n    google_client = Signet::OAuth2::Client.new({\r\n         client_id: ENV.fetch('GOOGLE_CLIENT_ID'),\r\n         client_secret: ENV.fetch('GOOGLE_CLIENT_SECRET'),\r\n         authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n         scope: Google::Apis::CalendarV3::AUTH_CALENDAR_READONLY,\r\n         redirect_uri: 'http://localhost:8000/google_calendar',\r\n         access_type: \"offline\",\r\n         approval_prompt: \"force\"\r\n      })\r\n\r\n    URI = google_client.authorization_uri.to_s\r\n\r\nThe URI does not contain the approval_prompt that I would expect (and when I add it manually, I do get prompted for consent). Am I missing something? ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sporkmonger": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/84", "title": "Signet still uses client_id and client_secret parameters instead of Authorization header", "body": "\"Including the client credentials in the request-body using the two parameters is NOT RECOMMENDED and SHOULD be limited to clients unable to directly utilize the HTTP Basic authentication scheme (or other password-based HTTP authentication schemes).  The parameters can only be transmitted in the request-body and MUST NOT be included in the request URI.\"\r\n\r\nBack in draft 7 or so when Signet was originally written, it was the other way around, where `client_id` and `client_secret` were the recommended approach. However nowadays, lots of auth servers don't support these parameters (auth servers MAY support them) and Signet should switch to doing what the final RFC recommends.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/51", "title": "Comparing signatures with `==` is bad security practice due to byte-wise short-circuit being a potential source of subtle timing attack.", "body": "If you compare user supplied signature to calculated signature using `==`, Ruby will helpfully abort the comparison early if you have a mismatch between the signatures. There's at least a few places in Signet that do this, with the OAuth 1 server code that @mechazoidal contributed being the most exposed to the issue. In a nutshell, you probably want a non-short-circuited equality check for that.\n\nRealistically, I doubt anyone could actually build an exploit for this in large part due to Ruby's wildly varying runtimes for web requests, but I don't really want to find out the hard way, so this should probably get eliminated as even a possibility, just in case.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/7", "title": "signet as Faraday middleware?", "body": "With the switch to Faraday, it might make sense to offer signet as Faraday middleware rather than acting as a front-end to it.  E.g.\n\n```\nclient = Signet::OAuth2::Client.new...\naccess_token = ... # get access token\n\nconn = Faraday.new do |builder|\n  builder. user Signet::OAuth2::Client, access_token\nend\n\nconn.get(...)\n```\n\n(Copied from @sqrrrl's issue on the original Signet project.)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/7/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5426381", "body": "Is the issue that assertion/extension grant types may not require a client ID or secret?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5426381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858", "body": "OK, in that case, I suspect the checks for client ID and secret should be reintroduced, but restricted only to the scenarios where they would apply. So you probably need to check the grant type before doing the check.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336", "body": "Fixed in 7a22c04.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053", "body": "Yeah, that issue is happening on master right now.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888", "body": "Gotcha. Merging...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550", "body": "Is this a change to the JWT spec?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232", "body": "The Travis test failures look legit. Please resolve for 1.8.7 and 1.9.2.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252", "body": "Uh oh... That sounds like it'll be a pain to resolve.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872", "body": "Can you produce a minimal test case? I've been completely unable to duplicate this. And this seems like the kind of thing that would cause a billion test failures if it were happening in anything but the edgiest of edge cases... \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991", "body": "Is there a place to file bugs against the API console?\n\nIt doesn't work with [Pow](http://pow.cx/). Reports 'OAuth 2 redirect URL \"https://example.dev/oauth2callback\" is invalid.'\n\nDiscovered while trying to hunt this bug down. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480", "body": "Actually, the Signet test cases catch this already.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888", "body": "As expected, this is turning out to be incredibly difficult to track down. :cry:\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037", "body": "Aha. That's why I can't find it. I already fixed it. And I believe you are correct that that is the commit that did it. The `gsub!` is the culprit I think. Regardless, it's resolved in 2.3.4.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566", "body": "Master is passing. I'll merge and update if the failures come back.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782", "body": "@brainopia Could you look at this? I think you were the last person to do anything with `expires_at`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4354794", "body": "@sqrrrl Anything else pending on signet you want me to get in before I cut a release?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4354794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/6594630", "body": "@jagwire I just pushed a release, but didn't see #41 until after I'd done so.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6594630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8503371", "body": "I assume the parameters in the form encoded body and JSON body are equivalent and otherwise identical once parsed into a `Hash`?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8503371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8513536", "body": "Travis doesn't seem to have the `jruby-20mode` binary available anymore?\n\nMight need to move it to the allowed failures portion of the build matrix.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8513536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664234", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664253", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664317", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664329", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "seuros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/77", "title": "Replace faraday with HTTPI", "body": "@sqrrrl  \nRecently i was updating an application that has the the adsword gem, and i noticed that this gem use a different http wrapper than the rest of google's gem.\n\nDo you think it make sense to replace Faraday with HTTPI  ? i could do it in the coming days.\n\nAlso travis is not configured for this project.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/77/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/19d386a603411f558461d654ec1b8ffbf0f6250c", "message": "version bump"}, {"url": "https://api.github.com/repos/google/signet/commits/459017fe0315922f2d74f16acabb72642c238ed8", "message": "Fix Licence"}, {"url": "https://api.github.com/repos/google/signet/commits/25dab938e1cb4663f3cf01306431de449477bed2", "message": "test latest version of ruby"}, {"url": "https://api.github.com/repos/google/signet/commits/590ddd5cf02c82ea45b9bab6475a9306e555bc00", "message": "there is no rails here."}, {"url": "https://api.github.com/repos/google/signet/commits/642a1d25abf586843d6b264c1ad8d7d269271f3d", "message": "remove compact folder"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbem": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/75", "title": "After upgraded to 0.7.3 i started to get \"Missing token endpoint URI\" Error message", "body": "I guys, after updating the gem to 0.7.3, the auth stop working fine. \n\nWhat i'm doing is this:\n\n``` ruby\n    client = Signet::OAuth2::Client.new(access_token: token)\n\n    service = Google::Apis::PlusV1::PlusService.new\n\n    service.authorization = client\n\n    profile = service.get_person('me', fields: 'displayName,emails/value,image,gender,id')`\n\n```\n\nwhen the request is done it throughs  \"Missing token endpoint URI\"  this is working with the previous version. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbackeus": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/50", "title": "Gemspec dependency version conflict with code", "body": "In your gemspec you have specified JWT version ~>1.0 and faraday version ~>0.9.\n\nBut inside your oauth 2 client you override the dependencies with incompatible versions.\n\nEnd result is it's impossible to use the signet gem with Bundler, which will install the gemspeced dependencies and subsequently raise error when trying to initialize the oauth client:\n\n```\n/home/runner/.rbenv/versions/2.1.3/lib/ruby/gems/2.1.0/gems/bundler-1.7.11/lib/bundler/rubygems_integration.rb:266:in `block in replace_gem': can't activate jwt (~> 0.1.4), already activated jwt-1.2.0. Make sure all dependencies are added to Gemfile. (Gem::LoadError)\n    from /home/runner/mynewsdesk/vendor/bundle/ruby/2.1.0/gems/signet-0.4.5/lib/signet/oauth_2/client.rb:25:in `<top (required)>'\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/50/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jagwire": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/41", "title": "TypeError (Can't convert Hash into String) OAuth2 client", "body": "While I thought it was to be fixed in c3efb8b68cfdca8a50a6435c401cfd0665500d1b I'm still seeing this issue at oauth_2/client.rb:258\n\nI'm merely following the example from: https://developers.google.com/drive/web/credentials\n\nPlease advise.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6527628", "body": "Not to be annoying, but did a release ever get cut to include these changes? I still see 0.5.0 on RubyGems...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6527628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sqrrrl": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/11", "title": "Update id_token to match spec", "body": "Minor fix required to the id_token validation. The audience (aud) may now be either a string or array, validation will need to be updated.\n\nAlso worth improving the validation in general to check issued & expiration times.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/d5d3445adc273d2d730923f999e8cc7c14d62f6a", "message": "Mark test as pending util test data can be verified"}, {"url": "https://api.github.com/repos/google/signet/commits/621515ddeec1dfb6aef662cdfaca7ab30e90e5a1", "message": "Merge pull request #89 from pkern/master\n\nAdd the configured scope to the access token request."}, {"url": "https://api.github.com/repos/google/signet/commits/3d19c17c0ecf598a652364be82fd4c30728a7e78", "message": "Merge pull request #76 from foxtacles/master\n\nAdd DateTime conversion"}, {"url": "https://api.github.com/repos/google/signet/commits/ede9ac4a9dd915ba23107dae98c0eada6cd98e33", "message": "Merge pull request #78 from seuros/master\n\nDrop old code and test in recent version of ruby."}, {"url": "https://api.github.com/repos/google/signet/commits/45660a6a12e3b83dee8710295a77854e82a9fc66", "message": "Merge pull request #79 from chutzimir/expires_at_should_be_updated\n\nThe \"expires_at\" attribute should also be recalculated on refresh"}, {"url": "https://api.github.com/repos/google/signet/commits/7ae73a5e2bdaf80eb6027972190bd60a4ef289c8", "message": "Merge pull request #85 from koic/integer_unification\n\nInteger Unification for Ruby 2.4.0+"}, {"url": "https://api.github.com/repos/google/signet/commits/92cce13573ecef916c25d7d0db30c40e3d76ddae", "message": "Release 0.7.3"}, {"url": "https://api.github.com/repos/google/signet/commits/2ec58a60760775983b2b22f6f6c9cdd477f5f284", "message": "Relax exception check"}, {"url": "https://api.github.com/repos/google/signet/commits/d9060814dbe95701c6890be6a4cac7af88adb759", "message": "Bump version"}, {"url": "https://api.github.com/repos/google/signet/commits/d711d32c543f66e7a4a94d3333a06c7cba6e3755", "message": "Fix expiry check when expires_at is nil. Assume expired"}, {"url": "https://api.github.com/repos/google/signet/commits/4cd847a8522b2d51f36ff9dd281030b87fa9793b", "message": "Remove oauth1 google service spec since no longer supported by google"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5430024", "body": "Yes, the JWT assertion profile doesn't include either of them as parameters since its in the assertion itself. Even some of the other profiles like user credentials don't explicitly require the two be set.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5430024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968", "body": "Hmm, not sure the spec supports making these required in any circumstance.\n\nhttp://tools.ietf.org/html/draft-ietf-oauth-v2-25#section-2.3.1\n\n```\nAlternatively, the authorization server MAY support including the\nclient credentials in the request body using the following\nparameters:\nclient_id\n     REQUIRED.  The client identifier issued to the client during\n     the registration process described by Section 2.2.\nclient_secret\n     REQUIRED.  The client secret.  The client MAY omit the\n     parameter if the client secret is an empty string.\n\nIncluding the client credentials in the request body using the two\nparameters is NOT RECOMMENDED, and should be limited to clients\nunable to directly utilize the HTTP Basic authentication scheme (or\nother password-based HTTP authentication schemes).  The parameters\ncan only be transmitted in the request body and MUST NOT be included\nin the request URI.\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945", "body": "Yes, see http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06#section-4.1.3\n\n\"aud\" may be either an array of string/uris or just a single string/uri.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044", "body": "My hunch is it was introduced around https://github.com/sporkmonger/addressable/commit/2069f252a747b89adf70ba9673cb3e39789f1ff0\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109", "body": "Need to sign the CLA before I can merge - https://developers.google.com/open-source/cla/individual\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4364757", "body": "Not at the moment :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4364757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dazuma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/440b8357fe02151db031a4d5decb2540995d85ee", "message": "Update changelog and version for 0.8.1 release"}, {"url": "https://api.github.com/repos/google/signet/commits/cac065932ad3d537005f5d08273605182ce61a37", "message": "Recover support for Ruby 1.9.3 (#97)"}, {"url": "https://api.github.com/repos/google/signet/commits/2e22545cf2087813d34ee755455ed09af222b2a0", "message": "Update 0.8 changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/2adc7bf601ad05effe84495fbae1aa1a43afc965", "message": "Made using the configured scope in token requests opt-in per discussion on PR #89"}, {"url": "https://api.github.com/repos/google/signet/commits/e4b6e76dd1f1def73d43be47113d97224918152e", "message": "Update changelog for 0.8.0 release"}, {"url": "https://api.github.com/repos/google/signet/commits/c50ab22074e7d23458d648b5d8b511e6dafd0bc0", "message": "Add bundler tasks"}, {"url": "https://api.github.com/repos/google/signet/commits/c6d09b7770e070c29e8d7c0edcd574b29e5a191d", "message": "Update ruby versions to test on travis"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mvastola": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/2f30b67352f49f479ed8d326e7c72ebe86fa310f", "message": "Signet::OAuth2::Client#decoded_id_token should take optional (#96)\n\n&keyfinder block for JWT.decode\r\n\r\nCloses #95; Closes #96"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EdwardBetts": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/416fccf13e9a772e5a7a773128e9037fc840d817", "message": "correct spelling mistake (#92)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jurriaan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/c9d21b365d2b668c11a6b737f95236b70037c2e9", "message": "Support ruby-jwt 2.0 (#93)\n\n* Support ruby-jwt 2.0\r\n\r\nThis version of ruby-jwt requires specification of the algorithm (see\r\nhttps://github.com/jwt/ruby-jwt/pull/184) for more information.\r\n\r\n* Use specific version of JRuby to fix CI for now"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/96ffadbd7897372b708ee0db1f47e7d24e35c678", "message": "Add the configured scope to the access token request."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/5e7b79b74d97fdf43e2ee513037d30afc1e102e2", "message": "Integer Unification for Ruby 2.4.0+"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chutzimir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/0e6090ca2cf2568d8450192af783f32170d23df1", "message": "The \"expires_at\" attribute should also be recalculated on refresh\n\nBy nil-ing the expires_at attribute, next time expires_at is accessed\nthrough the reader, it will get recalculated.\n\nAs it is currently, when refreshing the access_token, the issued_at,\nexpires_in would get updated, but expires_at may still indicate that the\ntoken has expired."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "foxtacles": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/770dd9411cbfddaa136bc58af23a14cebfdfce5b", "message": "Merge remote-tracking branch 'upstream/master'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sajithapps": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/98", "title": "Fixing to_json to adopt calling with argument", "body": "to_json expects 0 argument but passed 1", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmitchell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/82", "title": "A null auth is expired", "body": "Wasn't refreshing the token if it had no issued at", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rbpawle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/81", "title": "Corrected '!= nil' to '!...nil?'", "body": "Since upgrading to Ruby 2.3 we've seen some failures inside the signet gem when calling the google-adwords-api gem which references signet. We've found that changing all '!= nil' statments to '!...nil?' statements fixes the problem.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "confiks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/80", "title": "Don't doubly encode ampersand in OAuth1 plaintext signature method", "body": "I was having trouble connecting to an OAuth1 provider with the PLAINTEXT signature method using Signet. It seems that the ampersand in the signature is being doubly encoded, and that therefore my OAuth1 provider fails to accept the signature.\r\n1. The ampersand is first encoded in [plaintext.rb](https://github.com/google/signet/blob/master/lib/signet/oauth_1/signature_methods/plaintext.rb#L17).\r\n2. The signature value is then passed through `generate_temporary_credential_request` / `generate_token_credential_request` / `generate_authenticated_request` to [`generate_authorization_header`](https://github.com/google/signet/blob/master/lib/signet/oauth_1.rb#L217) where the value (the signature) is encoded again.\r\n\r\nI removed the encoding step in the generation of the signature itself, and let it be encoded properly in `generate_authorization_header`. I updated the plaintext test case accordingly. I'm wondering if this fix is correct and how the compatibility is for other providers, seeing that this library has been doing this for such a long time already.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joncalhoun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/63", "title": "Fixed issue #41 where redirect_uris couldn't be passed in as a hash", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xelwarto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/48", "title": "Changes to OAuth2 authentication JSON output", "body": "Example code located on the Google developers site for Ruby (https://developers.google.com/api-client-library/ruby/auth/web-app) utilizes the JSON output of the authentication information in a stored session for creating the OAuth2 client. While this works correctly for the first fetch of the access token, the JSON output does not provide adequate information regarding the expiration of the access token. With out the expiration information it is impossible to track and test for an expired access token in subsequent API executions. The changes in this PR add the **expires_in** and **issued_at** parameters to the JSON output which allows the client to properly track and verify if the access token has expired.\n\nAdditionally, while testing the creation of an OAuth2 client using the JSON output I came across an exception with how the authorization URI was being created. The following error was reported:\n\n```\n/usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `sort!': comparison of Array with Array failed (ArgumentError)\n    from /usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `query_values='\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2.rb:152:in `generate_authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:263:in `authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:853:in `to_json'\n```\n\nThe issue was the result of mismatched hash key types ... the resulting merge of the query_values hash had a mix of both Symbol and String key types. This PR includes changes to normalize the query_values hash before the merge.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AnalogJ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/39", "title": "added ability to access raw response parameters from credential.", "body": "Some oAuth1 services return the access token and secret with some additional meta data like `expiry` and `id` information which is currently inaccessible. I've added a `@raw` accessor to the credential class to allow developers to access additional metadata if needed. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdewyea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/30", "title": "fix verify_request_components variable assignment", "body": "If `request` is an array, `verify_request_components` raises a `NoMethodError` when trying to access `request.method`.\n\nTo reduce the number of conditionals, this commit also makes the assumption that if `options[:adapter]` is supplied, we want to adapt the `request`.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "travisbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8283533", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338449) (merged 6b6d700e into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338517) (merged 9b2ae8ba into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338991) (merged 09f065fb into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rmacklin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8304848", "body": "The failures on Travis CI are \"Signet::AuthorizationError: 464 Authorization failed. Server message: 465 Timestamp is too far from current time\" (only on some versions of ruby). They don't happen locally, so it looks like it might just be a clock issue.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8304848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236", "body": "When I was tracking down the warnings, I commented out those 2 lines to make sure they were the cause. But I realized it was stupid to keep them commented out instead of just removing them. I've made the change in my fork (though I didn't make a new pull request).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sanemat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/11660863", "body": "`\\xAA` is invalid encoding in UTF-8. This is ascii-8bit.\n\n```\n/Users/sane/work/ruby-study/signet/lib/signet.rb:22: invalid multibyte escape: /[\\s\\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]/ (SyntaxError)\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /[\\s\\x21-\\x26\\x28-\\x5B\\x5D-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nevir": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/16558827", "body": "@sporkmonger it looks like the 1.8 series test failures are [from `master`](https://travis-ci.org/google/signet/builds/5471849)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16558827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "brainopia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/17150195", "body": "@sporkmonger I've looked but I don't see any reason for such a sporadic behavior. The only suggestion to check if tests are ran in random order and if so can this fail be repeated using the same seed.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17150195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pauljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/21006111", "body": "The offending default is imposed here: https://github.com/google/signet/blob/4532135f5c3c923e75c39fd1871a8937627ef182/lib/signet/oauth_2/client.rb#L247\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/21006111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/22605354", "body": "I was just trying to keep the same default behaviour but allow support for changing it but I agree that it isn't really for Signet to decide these defaults for you anyway so have removed. \n\nThe specs showing the default behaviour for access_type and response_type have been left in but maybe they could be removed? \n\nI also added a raise to fail fast if trying to request an authorization uri with both approval_prompt and prompt parameters.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22605354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "alauper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4302808", "body": "When do you plan on cutting a new gem version?  the latest on RubyGems (0.5.0) does not include these changes.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4302808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "taka-oyama": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6580080", "body": "+1. still seeing this error.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6580080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jww": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/7630407", "body": "Any chance of breaking out the hashification occurring in the to_json serialization methods into their own to_hash methods? \n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/7630407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Ailenswpu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/18241429", "body": "@sqrrrl @sporkmonger \nI'm using signet for GooglePlay IAP verification on 2014, I can get  access_token from the code directly:\n\n``` ruby\n\n client =  Signet::OAuth2::Client.new(\n          token_credential_uri: 'https://accounts.google.com/o/oauth2/token',\n          audience: 'https://accounts.google.com/o/oauth2/token',\n          scope: 'https://www.googleapis.com/auth/androidpublisher',\n          issuer: 'example@developer.gserviceaccount.com',\n          signing_key: Google::APIClient::KeyUtils.load_from_pkcs12('some path'), 'notasecret'),\n        person: 'ailen@big-bang-games.com')\n        client.fetch_access_token!\n```\n\nhow can i do the same thing of the new version of signet?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/18241429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pjg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/22446586", "body": "This commit is causing this error while accessing Google APIs using `google-api-client`:\r\n\r\n```\r\nAuthorization failed.  Server message:\r\n{\r\n \"error\": \"unsupported_grant_type\",\r\n \"error_description\": \"Invalid grant_type: \"\r\n}\r\n```\r\n\r\nThe fix is to include the following in the authorization (example is in Rails):\r\n\r\n```\r\nauthorization = Signet::OAuth2::Client.new(...)\r\nauthorization.expires_in = 1.week.from_now\r\n```\r\n\r\nReference: https://github.com/google/signet/issues/75#issuecomment-231954956", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/22446586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}, "3": {"belgoros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/99", "title": "Faraday call fails behind a proxy", "body": "Hello, I've just had the same issue, - the same code works fine out of proxy but fails if there is proxy.\r\nHere is what the `env` command displays in the Terminal:\r\n```\r\nhttp_proxy=http://host-name.net:80\r\nHTTP_PROXY=http://host-name.net:80\r\nhttps_proxy=http://host-name.net:80\r\nHTTPS_PROXY=http://host-name.net:80\r\nno_proxy=127.0.0.1,localhost,10.1*.*.*,....some.others.sites.com\r\nNO_PROXY=127.0.0.1,localhost,10.1*.*.*,som.others.sites.com\r\n```\r\nHere is the error I get when trying to access Google APIs:\r\nIPAddr::InvalidAddressError (invalid address), see below function:\r\n```\r\ndef auth_client\r\n    Signet::OAuth2::Client.new(\r\n      authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n      token_credential_uri: 'https://www.googleapis.com/oauth2/v3/token',\r\n      client_id: ENV['GOOGLE_KEY'], client_secret: ENV['GOOGLE_SECRET'],\r\n      scope: 'email profile', redirect_uri: 'http://localhost:4200/oauth2callback'\r\n    ).tap do |client|\r\n      client.code = params['code']\r\n      client.fetch_access_token!\r\n    end\r\n  end\r\n```\r\nThe line that fails is:\r\n```\r\nclient.fetch_access_token!\r\n```\r\nHere are my settings:\r\n```\r\nruby 2.4.0\r\ngem 'google-api-client', '~> 0.19.3'\r\ngem 'jwt', '~> 2.1.0'\r\ngem 'signet', '~> 0.8.1'\r\ngem 'figaro', '~> 1.1.1'\r\nrails '5.1.4'\r\n```\r\nIf I unset the proxy setting, here is the error I have:\r\n```\r\nFaraday::ConnectionFailed (Failed to open TCP connection to www.googleapis.com:443 (No route to host - connect(2) for \"www.googleapis.com\" port 443)):\r\n```\r\nAny ideas on what is wrong here ? Thank you.\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phallguy": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/90", "title": "Use case vs standard oauth2 gem", "body": "I apologize if this is covered elsewhere already but couldn't really find what I'm looking for. I'm doing some up-front research for a project trying to decide which dependencies to take on. The [oauth2](https://rubygems.org/gems/oauth2) gem from intridea has ben around for quite some time and is used by several other ruby projects when working with OAuth 2 APIs. \r\n\r\nWhy would a project use signet instead of the standard oauth2 gem?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/90/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rusikf": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/88", "title": "Detect expired token", "body": "How to detect if user oauth2 offline token has been expired and refresh it ?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rems75": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/87", "title": "Missing \"approval_prompt\" in authorization_uri", "body": "I wrote a Rails app synching with Google Calendar. I'm currently trying to obtain new refresh_tokens from the API as a bug prevented me from saving them in the first place.\r\nI am using approval_prompt: force (or prompt: consent I have tried both), the code is: \r\n   \r\n    google_client = Signet::OAuth2::Client.new({\r\n         client_id: ENV.fetch('GOOGLE_CLIENT_ID'),\r\n         client_secret: ENV.fetch('GOOGLE_CLIENT_SECRET'),\r\n         authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n         scope: Google::Apis::CalendarV3::AUTH_CALENDAR_READONLY,\r\n         redirect_uri: 'http://localhost:8000/google_calendar',\r\n         access_type: \"offline\",\r\n         approval_prompt: \"force\"\r\n      })\r\n\r\n    URI = google_client.authorization_uri.to_s\r\n\r\nThe URI does not contain the approval_prompt that I would expect (and when I add it manually, I do get prompted for consent). Am I missing something? ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sporkmonger": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/84", "title": "Signet still uses client_id and client_secret parameters instead of Authorization header", "body": "\"Including the client credentials in the request-body using the two parameters is NOT RECOMMENDED and SHOULD be limited to clients unable to directly utilize the HTTP Basic authentication scheme (or other password-based HTTP authentication schemes).  The parameters can only be transmitted in the request-body and MUST NOT be included in the request URI.\"\r\n\r\nBack in draft 7 or so when Signet was originally written, it was the other way around, where `client_id` and `client_secret` were the recommended approach. However nowadays, lots of auth servers don't support these parameters (auth servers MAY support them) and Signet should switch to doing what the final RFC recommends.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/51", "title": "Comparing signatures with `==` is bad security practice due to byte-wise short-circuit being a potential source of subtle timing attack.", "body": "If you compare user supplied signature to calculated signature using `==`, Ruby will helpfully abort the comparison early if you have a mismatch between the signatures. There's at least a few places in Signet that do this, with the OAuth 1 server code that @mechazoidal contributed being the most exposed to the issue. In a nutshell, you probably want a non-short-circuited equality check for that.\n\nRealistically, I doubt anyone could actually build an exploit for this in large part due to Ruby's wildly varying runtimes for web requests, but I don't really want to find out the hard way, so this should probably get eliminated as even a possibility, just in case.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/7", "title": "signet as Faraday middleware?", "body": "With the switch to Faraday, it might make sense to offer signet as Faraday middleware rather than acting as a front-end to it.  E.g.\n\n```\nclient = Signet::OAuth2::Client.new...\naccess_token = ... # get access token\n\nconn = Faraday.new do |builder|\n  builder. user Signet::OAuth2::Client, access_token\nend\n\nconn.get(...)\n```\n\n(Copied from @sqrrrl's issue on the original Signet project.)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/7/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5426381", "body": "Is the issue that assertion/extension grant types may not require a client ID or secret?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5426381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858", "body": "OK, in that case, I suspect the checks for client ID and secret should be reintroduced, but restricted only to the scenarios where they would apply. So you probably need to check the grant type before doing the check.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336", "body": "Fixed in 7a22c04.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053", "body": "Yeah, that issue is happening on master right now.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888", "body": "Gotcha. Merging...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550", "body": "Is this a change to the JWT spec?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232", "body": "The Travis test failures look legit. Please resolve for 1.8.7 and 1.9.2.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252", "body": "Uh oh... That sounds like it'll be a pain to resolve.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872", "body": "Can you produce a minimal test case? I've been completely unable to duplicate this. And this seems like the kind of thing that would cause a billion test failures if it were happening in anything but the edgiest of edge cases... \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991", "body": "Is there a place to file bugs against the API console?\n\nIt doesn't work with [Pow](http://pow.cx/). Reports 'OAuth 2 redirect URL \"https://example.dev/oauth2callback\" is invalid.'\n\nDiscovered while trying to hunt this bug down. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480", "body": "Actually, the Signet test cases catch this already.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888", "body": "As expected, this is turning out to be incredibly difficult to track down. :cry:\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037", "body": "Aha. That's why I can't find it. I already fixed it. And I believe you are correct that that is the commit that did it. The `gsub!` is the culprit I think. Regardless, it's resolved in 2.3.4.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566", "body": "Master is passing. I'll merge and update if the failures come back.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782", "body": "@brainopia Could you look at this? I think you were the last person to do anything with `expires_at`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "seuros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/77", "title": "Replace faraday with HTTPI", "body": "@sqrrrl  \nRecently i was updating an application that has the the adsword gem, and i noticed that this gem use a different http wrapper than the rest of google's gem.\n\nDo you think it make sense to replace Faraday with HTTPI  ? i could do it in the coming days.\n\nAlso travis is not configured for this project.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/77/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/19d386a603411f558461d654ec1b8ffbf0f6250c", "message": "version bump"}, {"url": "https://api.github.com/repos/google/signet/commits/459017fe0315922f2d74f16acabb72642c238ed8", "message": "Fix Licence"}, {"url": "https://api.github.com/repos/google/signet/commits/25dab938e1cb4663f3cf01306431de449477bed2", "message": "test latest version of ruby"}, {"url": "https://api.github.com/repos/google/signet/commits/590ddd5cf02c82ea45b9bab6475a9306e555bc00", "message": "there is no rails here."}, {"url": "https://api.github.com/repos/google/signet/commits/642a1d25abf586843d6b264c1ad8d7d269271f3d", "message": "remove compact folder"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbem": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/75", "title": "After upgraded to 0.7.3 i started to get \"Missing token endpoint URI\" Error message", "body": "I guys, after updating the gem to 0.7.3, the auth stop working fine. \n\nWhat i'm doing is this:\n\n``` ruby\n    client = Signet::OAuth2::Client.new(access_token: token)\n\n    service = Google::Apis::PlusV1::PlusService.new\n\n    service.authorization = client\n\n    profile = service.get_person('me', fields: 'displayName,emails/value,image,gender,id')`\n\n```\n\nwhen the request is done it throughs  \"Missing token endpoint URI\"  this is working with the previous version. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbackeus": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/50", "title": "Gemspec dependency version conflict with code", "body": "In your gemspec you have specified JWT version ~>1.0 and faraday version ~>0.9.\n\nBut inside your oauth 2 client you override the dependencies with incompatible versions.\n\nEnd result is it's impossible to use the signet gem with Bundler, which will install the gemspeced dependencies and subsequently raise error when trying to initialize the oauth client:\n\n```\n/home/runner/.rbenv/versions/2.1.3/lib/ruby/gems/2.1.0/gems/bundler-1.7.11/lib/bundler/rubygems_integration.rb:266:in `block in replace_gem': can't activate jwt (~> 0.1.4), already activated jwt-1.2.0. Make sure all dependencies are added to Gemfile. (Gem::LoadError)\n    from /home/runner/mynewsdesk/vendor/bundle/ruby/2.1.0/gems/signet-0.4.5/lib/signet/oauth_2/client.rb:25:in `<top (required)>'\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/50/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jagwire": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/41", "title": "TypeError (Can't convert Hash into String) OAuth2 client", "body": "While I thought it was to be fixed in c3efb8b68cfdca8a50a6435c401cfd0665500d1b I'm still seeing this issue at oauth_2/client.rb:258\n\nI'm merely following the example from: https://developers.google.com/drive/web/credentials\n\nPlease advise.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sqrrrl": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/11", "title": "Update id_token to match spec", "body": "Minor fix required to the id_token validation. The audience (aud) may now be either a string or array, validation will need to be updated.\n\nAlso worth improving the validation in general to check issued & expiration times.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/d5d3445adc273d2d730923f999e8cc7c14d62f6a", "message": "Mark test as pending util test data can be verified"}, {"url": "https://api.github.com/repos/google/signet/commits/621515ddeec1dfb6aef662cdfaca7ab30e90e5a1", "message": "Merge pull request #89 from pkern/master\n\nAdd the configured scope to the access token request."}, {"url": "https://api.github.com/repos/google/signet/commits/3d19c17c0ecf598a652364be82fd4c30728a7e78", "message": "Merge pull request #76 from foxtacles/master\n\nAdd DateTime conversion"}, {"url": "https://api.github.com/repos/google/signet/commits/ede9ac4a9dd915ba23107dae98c0eada6cd98e33", "message": "Merge pull request #78 from seuros/master\n\nDrop old code and test in recent version of ruby."}, {"url": "https://api.github.com/repos/google/signet/commits/45660a6a12e3b83dee8710295a77854e82a9fc66", "message": "Merge pull request #79 from chutzimir/expires_at_should_be_updated\n\nThe \"expires_at\" attribute should also be recalculated on refresh"}, {"url": "https://api.github.com/repos/google/signet/commits/7ae73a5e2bdaf80eb6027972190bd60a4ef289c8", "message": "Merge pull request #85 from koic/integer_unification\n\nInteger Unification for Ruby 2.4.0+"}, {"url": "https://api.github.com/repos/google/signet/commits/92cce13573ecef916c25d7d0db30c40e3d76ddae", "message": "Release 0.7.3"}, {"url": "https://api.github.com/repos/google/signet/commits/2ec58a60760775983b2b22f6f6c9cdd477f5f284", "message": "Relax exception check"}, {"url": "https://api.github.com/repos/google/signet/commits/d9060814dbe95701c6890be6a4cac7af88adb759", "message": "Bump version"}, {"url": "https://api.github.com/repos/google/signet/commits/d711d32c543f66e7a4a94d3333a06c7cba6e3755", "message": "Fix expiry check when expires_at is nil. Assume expired"}, {"url": "https://api.github.com/repos/google/signet/commits/4cd847a8522b2d51f36ff9dd281030b87fa9793b", "message": "Remove oauth1 google service spec since no longer supported by google"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5430024", "body": "Yes, the JWT assertion profile doesn't include either of them as parameters since its in the assertion itself. Even some of the other profiles like user credentials don't explicitly require the two be set.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5430024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968", "body": "Hmm, not sure the spec supports making these required in any circumstance.\n\nhttp://tools.ietf.org/html/draft-ietf-oauth-v2-25#section-2.3.1\n\n```\nAlternatively, the authorization server MAY support including the\nclient credentials in the request body using the following\nparameters:\nclient_id\n     REQUIRED.  The client identifier issued to the client during\n     the registration process described by Section 2.2.\nclient_secret\n     REQUIRED.  The client secret.  The client MAY omit the\n     parameter if the client secret is an empty string.\n\nIncluding the client credentials in the request body using the two\nparameters is NOT RECOMMENDED, and should be limited to clients\nunable to directly utilize the HTTP Basic authentication scheme (or\nother password-based HTTP authentication schemes).  The parameters\ncan only be transmitted in the request body and MUST NOT be included\nin the request URI.\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945", "body": "Yes, see http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06#section-4.1.3\n\n\"aud\" may be either an array of string/uris or just a single string/uri.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044", "body": "My hunch is it was introduced around https://github.com/sporkmonger/addressable/commit/2069f252a747b89adf70ba9673cb3e39789f1ff0\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109", "body": "Need to sign the CLA before I can merge - https://developers.google.com/open-source/cla/individual\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dazuma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/440b8357fe02151db031a4d5decb2540995d85ee", "message": "Update changelog and version for 0.8.1 release"}, {"url": "https://api.github.com/repos/google/signet/commits/cac065932ad3d537005f5d08273605182ce61a37", "message": "Recover support for Ruby 1.9.3 (#97)"}, {"url": "https://api.github.com/repos/google/signet/commits/2e22545cf2087813d34ee755455ed09af222b2a0", "message": "Update 0.8 changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/2adc7bf601ad05effe84495fbae1aa1a43afc965", "message": "Made using the configured scope in token requests opt-in per discussion on PR #89"}, {"url": "https://api.github.com/repos/google/signet/commits/e4b6e76dd1f1def73d43be47113d97224918152e", "message": "Update changelog for 0.8.0 release"}, {"url": "https://api.github.com/repos/google/signet/commits/c50ab22074e7d23458d648b5d8b511e6dafd0bc0", "message": "Add bundler tasks"}, {"url": "https://api.github.com/repos/google/signet/commits/c6d09b7770e070c29e8d7c0edcd574b29e5a191d", "message": "Update ruby versions to test on travis"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mvastola": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/2f30b67352f49f479ed8d326e7c72ebe86fa310f", "message": "Signet::OAuth2::Client#decoded_id_token should take optional (#96)\n\n&keyfinder block for JWT.decode\r\n\r\nCloses #95; Closes #96"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EdwardBetts": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/416fccf13e9a772e5a7a773128e9037fc840d817", "message": "correct spelling mistake (#92)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jurriaan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/c9d21b365d2b668c11a6b737f95236b70037c2e9", "message": "Support ruby-jwt 2.0 (#93)\n\n* Support ruby-jwt 2.0\r\n\r\nThis version of ruby-jwt requires specification of the algorithm (see\r\nhttps://github.com/jwt/ruby-jwt/pull/184) for more information.\r\n\r\n* Use specific version of JRuby to fix CI for now"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/96ffadbd7897372b708ee0db1f47e7d24e35c678", "message": "Add the configured scope to the access token request."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/5e7b79b74d97fdf43e2ee513037d30afc1e102e2", "message": "Integer Unification for Ruby 2.4.0+"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chutzimir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/0e6090ca2cf2568d8450192af783f32170d23df1", "message": "The \"expires_at\" attribute should also be recalculated on refresh\n\nBy nil-ing the expires_at attribute, next time expires_at is accessed\nthrough the reader, it will get recalculated.\n\nAs it is currently, when refreshing the access_token, the issued_at,\nexpires_in would get updated, but expires_at may still indicate that the\ntoken has expired."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "foxtacles": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/770dd9411cbfddaa136bc58af23a14cebfdfce5b", "message": "Merge remote-tracking branch 'upstream/master'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sajithapps": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/98", "title": "Fixing to_json to adopt calling with argument", "body": "to_json expects 0 argument but passed 1", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmitchell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/82", "title": "A null auth is expired", "body": "Wasn't refreshing the token if it had no issued at", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rbpawle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/81", "title": "Corrected '!= nil' to '!...nil?'", "body": "Since upgrading to Ruby 2.3 we've seen some failures inside the signet gem when calling the google-adwords-api gem which references signet. We've found that changing all '!= nil' statments to '!...nil?' statements fixes the problem.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "confiks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/80", "title": "Don't doubly encode ampersand in OAuth1 plaintext signature method", "body": "I was having trouble connecting to an OAuth1 provider with the PLAINTEXT signature method using Signet. It seems that the ampersand in the signature is being doubly encoded, and that therefore my OAuth1 provider fails to accept the signature.\r\n1. The ampersand is first encoded in [plaintext.rb](https://github.com/google/signet/blob/master/lib/signet/oauth_1/signature_methods/plaintext.rb#L17).\r\n2. The signature value is then passed through `generate_temporary_credential_request` / `generate_token_credential_request` / `generate_authenticated_request` to [`generate_authorization_header`](https://github.com/google/signet/blob/master/lib/signet/oauth_1.rb#L217) where the value (the signature) is encoded again.\r\n\r\nI removed the encoding step in the generation of the signature itself, and let it be encoded properly in `generate_authorization_header`. I updated the plaintext test case accordingly. I'm wondering if this fix is correct and how the compatibility is for other providers, seeing that this library has been doing this for such a long time already.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joncalhoun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/63", "title": "Fixed issue #41 where redirect_uris couldn't be passed in as a hash", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xelwarto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/48", "title": "Changes to OAuth2 authentication JSON output", "body": "Example code located on the Google developers site for Ruby (https://developers.google.com/api-client-library/ruby/auth/web-app) utilizes the JSON output of the authentication information in a stored session for creating the OAuth2 client. While this works correctly for the first fetch of the access token, the JSON output does not provide adequate information regarding the expiration of the access token. With out the expiration information it is impossible to track and test for an expired access token in subsequent API executions. The changes in this PR add the **expires_in** and **issued_at** parameters to the JSON output which allows the client to properly track and verify if the access token has expired.\n\nAdditionally, while testing the creation of an OAuth2 client using the JSON output I came across an exception with how the authorization URI was being created. The following error was reported:\n\n```\n/usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `sort!': comparison of Array with Array failed (ArgumentError)\n    from /usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `query_values='\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2.rb:152:in `generate_authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:263:in `authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:853:in `to_json'\n```\n\nThe issue was the result of mismatched hash key types ... the resulting merge of the query_values hash had a mix of both Symbol and String key types. This PR includes changes to normalize the query_values hash before the merge.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AnalogJ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/39", "title": "added ability to access raw response parameters from credential.", "body": "Some oAuth1 services return the access token and secret with some additional meta data like `expiry` and `id` information which is currently inaccessible. I've added a `@raw` accessor to the credential class to allow developers to access additional metadata if needed. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdewyea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/30", "title": "fix verify_request_components variable assignment", "body": "If `request` is an array, `verify_request_components` raises a `NoMethodError` when trying to access `request.method`.\n\nTo reduce the number of conditionals, this commit also makes the assumption that if `options[:adapter]` is supplied, we want to adapt the `request`.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "travisbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8283533", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338449) (merged 6b6d700e into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338517) (merged 9b2ae8ba into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338991) (merged 09f065fb into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rmacklin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8304848", "body": "The failures on Travis CI are \"Signet::AuthorizationError: 464 Authorization failed. Server message: 465 Timestamp is too far from current time\" (only on some versions of ruby). They don't happen locally, so it looks like it might just be a clock issue.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8304848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236", "body": "When I was tracking down the warnings, I commented out those 2 lines to make sure they were the cause. But I realized it was stupid to keep them commented out instead of just removing them. I've made the change in my fork (though I didn't make a new pull request).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sanemat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/11660863", "body": "`\\xAA` is invalid encoding in UTF-8. This is ascii-8bit.\n\n```\n/Users/sane/work/ruby-study/signet/lib/signet.rb:22: invalid multibyte escape: /[\\s\\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]/ (SyntaxError)\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /[\\s\\x21-\\x26\\x28-\\x5B\\x5D-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nevir": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/16558827", "body": "@sporkmonger it looks like the 1.8 series test failures are [from `master`](https://travis-ci.org/google/signet/builds/5471849)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16558827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "brainopia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/17150195", "body": "@sporkmonger I've looked but I don't see any reason for such a sporadic behavior. The only suggestion to check if tests are ran in random order and if so can this fail be repeated using the same seed.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17150195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pauljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/21006111", "body": "The offending default is imposed here: https://github.com/google/signet/blob/4532135f5c3c923e75c39fd1871a8937627ef182/lib/signet/oauth_2/client.rb#L247\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/21006111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/22605354", "body": "I was just trying to keep the same default behaviour but allow support for changing it but I agree that it isn't really for Signet to decide these defaults for you anyway so have removed. \n\nThe specs showing the default behaviour for access_type and response_type have been left in but maybe they could be removed? \n\nI also added a raise to fail fast if trying to request an authorization uri with both approval_prompt and prompt parameters.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22605354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}}, "4": {"belgoros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/99", "title": "Faraday call fails behind a proxy", "body": "Hello, I've just had the same issue, - the same code works fine out of proxy but fails if there is proxy.\r\nHere is what the `env` command displays in the Terminal:\r\n```\r\nhttp_proxy=http://host-name.net:80\r\nHTTP_PROXY=http://host-name.net:80\r\nhttps_proxy=http://host-name.net:80\r\nHTTPS_PROXY=http://host-name.net:80\r\nno_proxy=127.0.0.1,localhost,10.1*.*.*,....some.others.sites.com\r\nNO_PROXY=127.0.0.1,localhost,10.1*.*.*,som.others.sites.com\r\n```\r\nHere is the error I get when trying to access Google APIs:\r\nIPAddr::InvalidAddressError (invalid address), see below function:\r\n```\r\ndef auth_client\r\n    Signet::OAuth2::Client.new(\r\n      authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n      token_credential_uri: 'https://www.googleapis.com/oauth2/v3/token',\r\n      client_id: ENV['GOOGLE_KEY'], client_secret: ENV['GOOGLE_SECRET'],\r\n      scope: 'email profile', redirect_uri: 'http://localhost:4200/oauth2callback'\r\n    ).tap do |client|\r\n      client.code = params['code']\r\n      client.fetch_access_token!\r\n    end\r\n  end\r\n```\r\nThe line that fails is:\r\n```\r\nclient.fetch_access_token!\r\n```\r\nHere are my settings:\r\n```\r\nruby 2.4.0\r\ngem 'google-api-client', '~> 0.19.3'\r\ngem 'jwt', '~> 2.1.0'\r\ngem 'signet', '~> 0.8.1'\r\ngem 'figaro', '~> 1.1.1'\r\nrails '5.1.4'\r\n```\r\nIf I unset the proxy setting, here is the error I have:\r\n```\r\nFaraday::ConnectionFailed (Failed to open TCP connection to www.googleapis.com:443 (No route to host - connect(2) for \"www.googleapis.com\" port 443)):\r\n```\r\nAny ideas on what is wrong here ? Thank you.\r\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phallguy": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/90", "title": "Use case vs standard oauth2 gem", "body": "I apologize if this is covered elsewhere already but couldn't really find what I'm looking for. I'm doing some up-front research for a project trying to decide which dependencies to take on. The [oauth2](https://rubygems.org/gems/oauth2) gem from intridea has ben around for quite some time and is used by several other ruby projects when working with OAuth 2 APIs. \r\n\r\nWhy would a project use signet instead of the standard oauth2 gem?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/90/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rusikf": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/88", "title": "Detect expired token", "body": "How to detect if user oauth2 offline token has been expired and refresh it ?", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rems75": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/87", "title": "Missing \"approval_prompt\" in authorization_uri", "body": "I wrote a Rails app synching with Google Calendar. I'm currently trying to obtain new refresh_tokens from the API as a bug prevented me from saving them in the first place.\r\nI am using approval_prompt: force (or prompt: consent I have tried both), the code is: \r\n   \r\n    google_client = Signet::OAuth2::Client.new({\r\n         client_id: ENV.fetch('GOOGLE_CLIENT_ID'),\r\n         client_secret: ENV.fetch('GOOGLE_CLIENT_SECRET'),\r\n         authorization_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n         scope: Google::Apis::CalendarV3::AUTH_CALENDAR_READONLY,\r\n         redirect_uri: 'http://localhost:8000/google_calendar',\r\n         access_type: \"offline\",\r\n         approval_prompt: \"force\"\r\n      })\r\n\r\n    URI = google_client.authorization_uri.to_s\r\n\r\nThe URI does not contain the approval_prompt that I would expect (and when I add it manually, I do get prompted for consent). Am I missing something? ", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sporkmonger": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/84", "title": "Signet still uses client_id and client_secret parameters instead of Authorization header", "body": "\"Including the client credentials in the request-body using the two parameters is NOT RECOMMENDED and SHOULD be limited to clients unable to directly utilize the HTTP Basic authentication scheme (or other password-based HTTP authentication schemes).  The parameters can only be transmitted in the request-body and MUST NOT be included in the request URI.\"\r\n\r\nBack in draft 7 or so when Signet was originally written, it was the other way around, where `client_id` and `client_secret` were the recommended approach. However nowadays, lots of auth servers don't support these parameters (auth servers MAY support them) and Signet should switch to doing what the final RFC recommends.", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/51", "title": "Comparing signatures with `==` is bad security practice due to byte-wise short-circuit being a potential source of subtle timing attack.", "body": "If you compare user supplied signature to calculated signature using `==`, Ruby will helpfully abort the comparison early if you have a mismatch between the signatures. There's at least a few places in Signet that do this, with the OAuth 1 server code that @mechazoidal contributed being the most exposed to the issue. In a nutshell, you probably want a non-short-circuited equality check for that.\n\nRealistically, I doubt anyone could actually build an exploit for this in large part due to Ruby's wildly varying runtimes for web requests, but I don't really want to find out the hard way, so this should probably get eliminated as even a possibility, just in case.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/7", "title": "signet as Faraday middleware?", "body": "With the switch to Faraday, it might make sense to offer signet as Faraday middleware rather than acting as a front-end to it.  E.g.\n\n```\nclient = Signet::OAuth2::Client.new...\naccess_token = ... # get access token\n\nconn = Faraday.new do |builder|\n  builder. user Signet::OAuth2::Client, access_token\nend\n\nconn.get(...)\n```\n\n(Copied from @sqrrrl's issue on the original Signet project.)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/7/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5426381", "body": "Is the issue that assertion/extension grant types may not require a client ID or secret?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5426381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858", "body": "OK, in that case, I suspect the checks for client ID and secret should be reintroduced, but restricted only to the scenarios where they would apply. So you probably need to check the grant type before doing the check.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5469858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336", "body": "Fixed in 7a22c04.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/7151336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053", "body": "Yeah, that issue is happening on master right now.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8307053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888", "body": "Gotcha. Merging...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550", "body": "Is this a change to the JWT spec?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13322550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232", "body": "The Travis test failures look legit. Please resolve for 1.8.7 and 1.9.2.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15369232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252", "body": "Uh oh... That sounds like it'll be a pain to resolve.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15430252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872", "body": "Can you produce a minimal test case? I've been completely unable to duplicate this. And this seems like the kind of thing that would cause a billion test failures if it were happening in anything but the edgiest of edge cases... \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/15686872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991", "body": "Is there a place to file bugs against the API console?\n\nIt doesn't work with [Pow](http://pow.cx/). Reports 'OAuth 2 redirect URL \"https://example.dev/oauth2callback\" is invalid.'\n\nDiscovered while trying to hunt this bug down. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16399991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480", "body": "Actually, the Signet test cases catch this already.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16401480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888", "body": "As expected, this is turning out to be incredibly difficult to track down. :cry:\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16403888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037", "body": "Aha. That's why I can't find it. I already fixed it. And I believe you are correct that that is the commit that did it. The `gsub!` is the culprit I think. Regardless, it's resolved in 2.3.4.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16406037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566", "body": "Master is passing. I'll merge and update if the failures come back.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16562566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782", "body": "@brainopia Could you look at this? I think you were the last person to do anything with `expires_at`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17140782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4354794", "body": "@sqrrrl Anything else pending on signet you want me to get in before I cut a release?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4354794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/6594630", "body": "@jagwire I just pushed a release, but didn't see #41 until after I'd done so.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6594630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8503371", "body": "I assume the parameters in the form encoded body and JSON body are equivalent and otherwise identical once parsed into a `Hash`?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8503371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/8513536", "body": "Travis doesn't seem to have the `jruby-20mode` binary available anymore?\n\nMight need to move it to the allowed failures portion of the build matrix.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/8513536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664234", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664253", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664317", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/google/signet/comments/9664329", "body": "This potentially has a timing attack against it due to byte-wise short-circuit of `==`.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/9664329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "seuros": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/77", "title": "Replace faraday with HTTPI", "body": "@sqrrrl  \nRecently i was updating an application that has the the adsword gem, and i noticed that this gem use a different http wrapper than the rest of google's gem.\n\nDo you think it make sense to replace Faraday with HTTPI  ? i could do it in the coming days.\n\nAlso travis is not configured for this project.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/77/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/19d386a603411f558461d654ec1b8ffbf0f6250c", "message": "version bump"}, {"url": "https://api.github.com/repos/google/signet/commits/459017fe0315922f2d74f16acabb72642c238ed8", "message": "Fix Licence"}, {"url": "https://api.github.com/repos/google/signet/commits/25dab938e1cb4663f3cf01306431de449477bed2", "message": "test latest version of ruby"}, {"url": "https://api.github.com/repos/google/signet/commits/590ddd5cf02c82ea45b9bab6475a9306e555bc00", "message": "there is no rails here."}, {"url": "https://api.github.com/repos/google/signet/commits/642a1d25abf586843d6b264c1ad8d7d269271f3d", "message": "remove compact folder"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbem": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/75", "title": "After upgraded to 0.7.3 i started to get \"Missing token endpoint URI\" Error message", "body": "I guys, after updating the gem to 0.7.3, the auth stop working fine. \n\nWhat i'm doing is this:\n\n``` ruby\n    client = Signet::OAuth2::Client.new(access_token: token)\n\n    service = Google::Apis::PlusV1::PlusService.new\n\n    service.authorization = client\n\n    profile = service.get_person('me', fields: 'displayName,emails/value,image,gender,id')`\n\n```\n\nwhen the request is done it throughs  \"Missing token endpoint URI\"  this is working with the previous version. \n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbackeus": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/50", "title": "Gemspec dependency version conflict with code", "body": "In your gemspec you have specified JWT version ~>1.0 and faraday version ~>0.9.\n\nBut inside your oauth 2 client you override the dependencies with incompatible versions.\n\nEnd result is it's impossible to use the signet gem with Bundler, which will install the gemspeced dependencies and subsequently raise error when trying to initialize the oauth client:\n\n```\n/home/runner/.rbenv/versions/2.1.3/lib/ruby/gems/2.1.0/gems/bundler-1.7.11/lib/bundler/rubygems_integration.rb:266:in `block in replace_gem': can't activate jwt (~> 0.1.4), already activated jwt-1.2.0. Make sure all dependencies are added to Gemfile. (Gem::LoadError)\n    from /home/runner/mynewsdesk/vendor/bundle/ruby/2.1.0/gems/signet-0.4.5/lib/signet/oauth_2/client.rb:25:in `<top (required)>'\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/50/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jagwire": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/41", "title": "TypeError (Can't convert Hash into String) OAuth2 client", "body": "While I thought it was to be fixed in c3efb8b68cfdca8a50a6435c401cfd0665500d1b I'm still seeing this issue at oauth_2/client.rb:258\n\nI'm merely following the example from: https://developers.google.com/drive/web/credentials\n\nPlease advise.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6527628", "body": "Not to be annoying, but did a release ever get cut to include these changes? I still see 0.5.0 on RubyGems...\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6527628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sqrrrl": {"issues": [{"url": "https://api.github.com/repos/google/signet/issues/11", "title": "Update id_token to match spec", "body": "Minor fix required to the id_token validation. The audience (aud) may now be either a string or array, validation will need to be updated.\n\nAlso worth improving the validation in general to check issued & expiration times.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/d5d3445adc273d2d730923f999e8cc7c14d62f6a", "message": "Mark test as pending util test data can be verified"}, {"url": "https://api.github.com/repos/google/signet/commits/621515ddeec1dfb6aef662cdfaca7ab30e90e5a1", "message": "Merge pull request #89 from pkern/master\n\nAdd the configured scope to the access token request."}, {"url": "https://api.github.com/repos/google/signet/commits/3d19c17c0ecf598a652364be82fd4c30728a7e78", "message": "Merge pull request #76 from foxtacles/master\n\nAdd DateTime conversion"}, {"url": "https://api.github.com/repos/google/signet/commits/ede9ac4a9dd915ba23107dae98c0eada6cd98e33", "message": "Merge pull request #78 from seuros/master\n\nDrop old code and test in recent version of ruby."}, {"url": "https://api.github.com/repos/google/signet/commits/45660a6a12e3b83dee8710295a77854e82a9fc66", "message": "Merge pull request #79 from chutzimir/expires_at_should_be_updated\n\nThe \"expires_at\" attribute should also be recalculated on refresh"}, {"url": "https://api.github.com/repos/google/signet/commits/7ae73a5e2bdaf80eb6027972190bd60a4ef289c8", "message": "Merge pull request #85 from koic/integer_unification\n\nInteger Unification for Ruby 2.4.0+"}, {"url": "https://api.github.com/repos/google/signet/commits/92cce13573ecef916c25d7d0db30c40e3d76ddae", "message": "Release 0.7.3"}, {"url": "https://api.github.com/repos/google/signet/commits/2ec58a60760775983b2b22f6f6c9cdd477f5f284", "message": "Relax exception check"}, {"url": "https://api.github.com/repos/google/signet/commits/d9060814dbe95701c6890be6a4cac7af88adb759", "message": "Bump version"}, {"url": "https://api.github.com/repos/google/signet/commits/d711d32c543f66e7a4a94d3333a06c7cba6e3755", "message": "Fix expiry check when expires_at is nil. Assume expired"}, {"url": "https://api.github.com/repos/google/signet/commits/4cd847a8522b2d51f36ff9dd281030b87fa9793b", "message": "Remove oauth1 google service spec since no longer supported by google"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/5430024", "body": "Yes, the JWT assertion profile doesn't include either of them as parameters since its in the assertion itself. Even some of the other profiles like user credentials don't explicitly require the two be set.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5430024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968", "body": "Hmm, not sure the spec supports making these required in any circumstance.\n\nhttp://tools.ietf.org/html/draft-ietf-oauth-v2-25#section-2.3.1\n\n```\nAlternatively, the authorization server MAY support including the\nclient credentials in the request body using the following\nparameters:\nclient_id\n     REQUIRED.  The client identifier issued to the client during\n     the registration process described by Section 2.2.\nclient_secret\n     REQUIRED.  The client secret.  The client MAY omit the\n     parameter if the client secret is an empty string.\n\nIncluding the client credentials in the request body using the two\nparameters is NOT RECOMMENDED, and should be limited to clients\nunable to directly utilize the HTTP Basic authentication scheme (or\nother password-based HTTP authentication schemes).  The parameters\ncan only be transmitted in the request body and MUST NOT be included\nin the request URI.\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/5470968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945", "body": "Yes, see http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06#section-4.1.3\n\n\"aud\" may be either an array of string/uris or just a single string/uri.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/13512945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044", "body": "My hunch is it was introduced around https://github.com/sporkmonger/addressable/commit/2069f252a747b89adf70ba9673cb3e39789f1ff0\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16405044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109", "body": "Need to sign the CLA before I can merge - https://developers.google.com/open-source/cla/individual\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22609109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4364757", "body": "Not at the moment :)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4364757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dazuma": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/440b8357fe02151db031a4d5decb2540995d85ee", "message": "Update changelog and version for 0.8.1 release"}, {"url": "https://api.github.com/repos/google/signet/commits/cac065932ad3d537005f5d08273605182ce61a37", "message": "Recover support for Ruby 1.9.3 (#97)"}, {"url": "https://api.github.com/repos/google/signet/commits/2e22545cf2087813d34ee755455ed09af222b2a0", "message": "Update 0.8 changelog"}, {"url": "https://api.github.com/repos/google/signet/commits/2adc7bf601ad05effe84495fbae1aa1a43afc965", "message": "Made using the configured scope in token requests opt-in per discussion on PR #89"}, {"url": "https://api.github.com/repos/google/signet/commits/e4b6e76dd1f1def73d43be47113d97224918152e", "message": "Update changelog for 0.8.0 release"}, {"url": "https://api.github.com/repos/google/signet/commits/c50ab22074e7d23458d648b5d8b511e6dafd0bc0", "message": "Add bundler tasks"}, {"url": "https://api.github.com/repos/google/signet/commits/c6d09b7770e070c29e8d7c0edcd574b29e5a191d", "message": "Update ruby versions to test on travis"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mvastola": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/2f30b67352f49f479ed8d326e7c72ebe86fa310f", "message": "Signet::OAuth2::Client#decoded_id_token should take optional (#96)\n\n&keyfinder block for JWT.decode\r\n\r\nCloses #95; Closes #96"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EdwardBetts": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/416fccf13e9a772e5a7a773128e9037fc840d817", "message": "correct spelling mistake (#92)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jurriaan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/c9d21b365d2b668c11a6b737f95236b70037c2e9", "message": "Support ruby-jwt 2.0 (#93)\n\n* Support ruby-jwt 2.0\r\n\r\nThis version of ruby-jwt requires specification of the algorithm (see\r\nhttps://github.com/jwt/ruby-jwt/pull/184) for more information.\r\n\r\n* Use specific version of JRuby to fix CI for now"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/96ffadbd7897372b708ee0db1f47e7d24e35c678", "message": "Add the configured scope to the access token request."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/5e7b79b74d97fdf43e2ee513037d30afc1e102e2", "message": "Integer Unification for Ruby 2.4.0+"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chutzimir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/0e6090ca2cf2568d8450192af783f32170d23df1", "message": "The \"expires_at\" attribute should also be recalculated on refresh\n\nBy nil-ing the expires_at attribute, next time expires_at is accessed\nthrough the reader, it will get recalculated.\n\nAs it is currently, when refreshing the access_token, the issued_at,\nexpires_in would get updated, but expires_at may still indicate that the\ntoken has expired."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "foxtacles": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/signet/commits/770dd9411cbfddaa136bc58af23a14cebfdfce5b", "message": "Merge remote-tracking branch 'upstream/master'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sajithapps": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/98", "title": "Fixing to_json to adopt calling with argument", "body": "to_json expects 0 argument but passed 1", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmitchell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/82", "title": "A null auth is expired", "body": "Wasn't refreshing the token if it had no issued at", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rbpawle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/81", "title": "Corrected '!= nil' to '!...nil?'", "body": "Since upgrading to Ruby 2.3 we've seen some failures inside the signet gem when calling the google-adwords-api gem which references signet. We've found that changing all '!= nil' statments to '!...nil?' statements fixes the problem.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "confiks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/80", "title": "Don't doubly encode ampersand in OAuth1 plaintext signature method", "body": "I was having trouble connecting to an OAuth1 provider with the PLAINTEXT signature method using Signet. It seems that the ampersand in the signature is being doubly encoded, and that therefore my OAuth1 provider fails to accept the signature.\r\n1. The ampersand is first encoded in [plaintext.rb](https://github.com/google/signet/blob/master/lib/signet/oauth_1/signature_methods/plaintext.rb#L17).\r\n2. The signature value is then passed through `generate_temporary_credential_request` / `generate_token_credential_request` / `generate_authenticated_request` to [`generate_authorization_header`](https://github.com/google/signet/blob/master/lib/signet/oauth_1.rb#L217) where the value (the signature) is encoded again.\r\n\r\nI removed the encoding step in the generation of the signature itself, and let it be encoded properly in `generate_authorization_header`. I updated the plaintext test case accordingly. I'm wondering if this fix is correct and how the compatibility is for other providers, seeing that this library has been doing this for such a long time already.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joncalhoun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/63", "title": "Fixed issue #41 where redirect_uris couldn't be passed in as a hash", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xelwarto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/48", "title": "Changes to OAuth2 authentication JSON output", "body": "Example code located on the Google developers site for Ruby (https://developers.google.com/api-client-library/ruby/auth/web-app) utilizes the JSON output of the authentication information in a stored session for creating the OAuth2 client. While this works correctly for the first fetch of the access token, the JSON output does not provide adequate information regarding the expiration of the access token. With out the expiration information it is impossible to track and test for an expired access token in subsequent API executions. The changes in this PR add the **expires_in** and **issued_at** parameters to the JSON output which allows the client to properly track and verify if the access token has expired.\n\nAdditionally, while testing the creation of an OAuth2 client using the JSON output I came across an exception with how the authorization URI was being created. The following error was reported:\n\n```\n/usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `sort!': comparison of Array with Array failed (ArgumentError)\n    from /usr/local/lib/ruby/gems/2.1.0/gems/addressable-2.3.6/lib/addressable/uri.rb:1579:in `query_values='\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2.rb:152:in `generate_authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:263:in `authorization_uri'\n    from /usr/local/lib/ruby/gems/2.1.0/gems/signet-0.6.0/lib/signet/oauth_2/client.rb:853:in `to_json'\n```\n\nThe issue was the result of mismatched hash key types ... the resulting merge of the query_values hash had a mix of both Symbol and String key types. This PR includes changes to normalize the query_values hash before the merge.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AnalogJ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/39", "title": "added ability to access raw response parameters from credential.", "body": "Some oAuth1 services return the access token and secret with some additional meta data like `expiry` and `id` information which is currently inaccessible. I've added a `@raw` accessor to the credential class to allow developers to access additional metadata if needed. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdewyea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/signet/pulls/30", "title": "fix verify_request_components variable assignment", "body": "If `request` is an array, `verify_request_components` raises a `NoMethodError` when trying to access `request.method`.\n\nTo reduce the number of conditionals, this commit also makes the assumption that if `options[:adapter]` is supplied, we want to adapt the `request`.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "travisbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8283533", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338449) (merged 6b6d700e into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338517) (merged 9b2ae8ba into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8283708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658", "body": "This pull request [fails](http://travis-ci.org/google/signet/builds/2338991) (merged 09f065fb into bf0dec76).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8284658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rmacklin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/8304848", "body": "The failures on Travis CI are \"Signet::AuthorizationError: 464 Authorization failed. Server message: 465 Timestamp is too far from current time\" (only on some versions of ruby). They don't happen locally, so it looks like it might just be a clock issue.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8304848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236", "body": "When I was tracking down the warnings, I commented out those 2 lines to make sure they were the cause. But I realized it was stupid to keep them commented out instead of just removing them. I've made the change in my fork (though I didn't make a new pull request).\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/8318236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sanemat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/11660863", "body": "`\\xAA` is invalid encoding in UTF-8. This is ascii-8bit.\n\n```\n/Users/sane/work/ruby-study/signet/lib/signet.rb:22: invalid multibyte escape: /[\\s\\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]/ (SyntaxError)\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /[\\s\\x21-\\x26\\x28-\\x5B\\x5D-\\x7E\\x80-\\xFF]/\ninvalid multibyte escape: /\\\\[\\s\\x21-\\x7E\\x80-\\xFF]/\n```\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/11660863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nevir": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/16558827", "body": "@sporkmonger it looks like the 1.8 series test failures are [from `master`](https://travis-ci.org/google/signet/builds/5471849)\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/16558827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "brainopia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/17150195", "body": "@sporkmonger I've looked but I don't see any reason for such a sporadic behavior. The only suggestion to check if tests are ran in random order and if so can this fail be repeated using the same seed.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/17150195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pauljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/21006111", "body": "The offending default is imposed here: https://github.com/google/signet/blob/4532135f5c3c923e75c39fd1871a8937627ef182/lib/signet/oauth_2/client.rb#L247\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/21006111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/signet/issues/comments/22605354", "body": "I was just trying to keep the same default behaviour but allow support for changing it but I agree that it isn't really for Signet to decide these defaults for you anyway so have removed. \n\nThe specs showing the default behaviour for access_type and response_type have been left in but maybe they could be removed? \n\nI also added a raise to fail fast if trying to request an authorization uri with both approval_prompt and prompt parameters.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/issues/comments/22605354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "alauper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/4302808", "body": "When do you plan on cutting a new gem version?  the latest on RubyGems (0.5.0) does not include these changes.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/4302808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "taka-oyama": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/6580080", "body": "+1. still seeing this error.\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/6580080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jww": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/7630407", "body": "Any chance of breaking out the hashification occurring in the to_json serialization methods into their own to_hash methods? \n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/7630407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Ailenswpu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/18241429", "body": "@sqrrrl @sporkmonger \nI'm using signet for GooglePlay IAP verification on 2014, I can get  access_token from the code directly:\n\n``` ruby\n\n client =  Signet::OAuth2::Client.new(\n          token_credential_uri: 'https://accounts.google.com/o/oauth2/token',\n          audience: 'https://accounts.google.com/o/oauth2/token',\n          scope: 'https://www.googleapis.com/auth/androidpublisher',\n          issuer: 'example@developer.gserviceaccount.com',\n          signing_key: Google::APIClient::KeyUtils.load_from_pkcs12('some path'), 'notasecret'),\n        person: 'ailen@big-bang-games.com')\n        client.fetch_access_token!\n```\n\nhow can i do the same thing of the new version of signet?\n", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/18241429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pjg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/signet/comments/22446586", "body": "This commit is causing this error while accessing Google APIs using `google-api-client`:\r\n\r\n```\r\nAuthorization failed.  Server message:\r\n{\r\n \"error\": \"unsupported_grant_type\",\r\n \"error_description\": \"Invalid grant_type: \"\r\n}\r\n```\r\n\r\nThe fix is to include the following in the authorization (example is in Rails):\r\n\r\n```\r\nauthorization = Signet::OAuth2::Client.new(...)\r\nauthorization.expires_in = 1.week.from_now\r\n```\r\n\r\nReference: https://github.com/google/signet/issues/75#issuecomment-231954956", "reactions": {"url": "https://api.github.com/repos/google/signet/comments/22446586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}