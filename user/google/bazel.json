{"_default": {"1": {"dslomov": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4474", "title": "Tensorflow build is broken in Bazel Nightly and in 0.10", "body": "Failure:\r\nhttps://ci.bazel.build/blue/organizations/jenkins/Global%2FTensorFlow/detail/TensorFlow/375/pipeline/\r\nSmaller repro:\r\n```\r\n/bazel build //tensorflow/contrib/fused_conv:fused_conv2d_bias_activation_op_pygenrule\r\n.........\r\nINFO: Analysed target //tensorflow/contrib/fused_conv:fused_conv2d_bias_activation_op_pygenrule (46 packages loaded).\r\nINFO: Found 1 target...\r\nERROR: /usr/local/google/home/dslomov/work/tensorflow/tensorflow/contrib/fused_conv/BUILD:105:1: Executing genrule //tensorflow/contrib/fused_conv:fused_conv2d_bias_activation_op_pygenrule failed (Aborted): bash failed: error executing command /bin/bash -c ... (remaining 1 argument(s) skipped)\r\n*** Error in `bazel-out/host/bin/tensorflow/contrib/fused_conv/gen_fused_conv2d_bias_activation_op_py_wrappers_cc': munmap_chunk(): invalid pointer: 0x0000000000480320 ***\r\n/bin/bash: line 1: 186348 Aborted                 (core dumped) bazel-out/host/bin/tensorflow/contrib/fused_conv/gen_fused_conv2d_bias_activation_op_py_wrappers_cc , '' 0 0 > bazel-out/k8-opt/genfiles/tensorflow/contrib/fused_conv/ops/gen_fused_conv2d_bias_activation_op.py\r\nTarget //tensorflow/contrib/fused_conv:fused_conv2d_bias_activation_op_pygenrule failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 5.692s, Critical Path: 1.64s\r\nFAILED: Build did NOT complete successfully\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "laszlocsomor": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4473", "title": "windows,launcher: use the Unicode Windows API", "body": "### Description of the problem / feature request:\r\n\r\nThe native launcher for {sh,java,py}_binary rules should use the Unicode Window API, e.g. CreateProcessW instead of CreateProcessA here: https://github.com/bazelbuild/bazel/blob/adecfb2101a1bb19c53ab6c0361cd59073f8b723/src/tools/launcher/launcher.cc#L170\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nTo support non-ASCII characters in the path.\r\n\r\nThough Bazel doesn't support non-ASCII characters in paths, the user may copy/deploy the built binaries to non-ASCII paths and I think they could reasonably expect that the binaries run.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows 10.\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0\r\n\r\n---\r\n/cc @meteorcloudy ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4469", "title": "bazel,version: non-release versions display bogus \"build time\"", "body": "### Description of the problem / feature request:\r\n\r\n\"bazel version\" for non-release builds gives bogus \"build time\" entry.\r\n\r\nUPDATE(2018-01-17 12:26 CET): the problem seems to only affect release candidates and nightlies. From-source builds reset the timestamp to 0.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nRelease version's timestamps have millisecond precision.\r\nNon-release verion's timestamps have microsecond precision.\r\n\r\nDecoding the latter yields dates in the year 50010 AD.\r\n\r\n```\r\nC:\\(...)>c:\\work\\bazel-releases\\0.9.0\\bazel.exe --batch version\r\nExtracting Bazel installation...\r\nBuild label: 0.9.0\r\nBuild target: bazel-out/x64_windows-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Tue Dec 19 09:32:04 2017 (1513675924)\r\nBuild timestamp: 1513675924\r\nBuild timestamp as int: 1513675924\r\n\r\nC:\\(...)>c:\\work\\bazel-releases\\0.10.0\\rc2\\bazel.exe --batch version\r\nExtracting Bazel installation...\r\nBuild label: 0.10.0rc2\r\nBuild target: bazel-out/x64_windows-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Jul 1 04:57:50 +50010 (1516011656270)\r\nBuild timestamp: 1516011656270\r\nBuild timestamp as int: 1516011656270\r\n```\r\n\r\nDemo (on Linux):\r\n```\r\n  $ date -d @1513675924 ; date -d  @1513675924 +%Y\r\nTue Dec 19 10:32:04 CET 2017\r\n2017\r\n\r\n  $ date -d @1516011656270 ; date -d @1516011656270 +%Y\r\nThu Jul  1 06:57:50 CEST 50010\r\n50010\r\n```\r\n\r\nDeleting the last 3 digits helps:\r\n\r\n```\r\n  $ date -d @1516011656 ; date -d @1516011656 +%Y\r\nMon Jan 15 11:20:56 CET 2018\r\n2018\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nWindows 10 and Linux (Debian testing).\r\n\r\n---\r\n/cc @dslomov @philwo ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4460", "title": "runfiles: provide language-specific runfiles libraries", "body": "### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nFR: provide language-specific runfiles libraries, with implementations of platform-independent `rlocation`, for the main languages: Bash, Java, C++, Python.\r\n\r\nMotivation:\r\n- easier for users: they don't need to worry about runfiles semantics, just include a library and use runfiles the same way on every platform\r\n- easier for Bazel developers: we can change runfiles semantics if we need to, and only need to change the libraries and release Bazel for people to get the new semantics", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/aad6304ad938cae6010c1d58f01d92a12a81ac1a", "message": "vfs_test: mark as flaky\n\nBefore commit f47291ee3 [1],\nFileSystemConcurrencyTest was part of\n\"foundations_test\" which was marked as flaky.\n\nAfter the change, this test is part of \"vfs_test\"\nwhich is not marked as flaky.\n\nLooking at the test code [2] it's clearly flaky,\nso the modification is appropriate.\n\n[1]\nhttps://github.com/bazelbuild/bazel/commit/f47291ee35e01ebd58951e81b3e65be3243a5f13\n[2] https://github.com/bazelbuild/bazel/blob/6f502ac12180973f4646c95d95e1516082b3c71c/src/test/java/com/google/devtools/build/lib/vfs/FileSystemConcurrencyTest.java#L46\n\nRELNOTES: none\nPiperOrigin-RevId: 182352485"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ahumesky": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4472", "title": "aar_import.deps doesn't seem to add classes to the compiletime classpath", "body": "E.g. for an app that uses AppCompatActivity, if it depends on `@com_android_support_appcompat_v7_26_1_0//aar` using the gmaven rules, java compilation can't find `android.support.v4.app.TaskStackBuilder`, even though the appcompat aar has a dep on the support-core-utils aar, which is where TaskStackBuilder comes from.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmhodges": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4468", "title": "nightly debs aren't installable", "body": "If you install from a nightly build's deb ([like this one](https://ci.bazel.build/view/Bazel%20bootstrap%20and%20maintenance/job/bazel/job/nightly/195/artifact/node=linux-x86_64/variation=/bazel_-linux-x86_64.deb)), you'll get this error:\r\n\r\n```\r\ndpkg: error processing archive bazel_195-linux-x86_64.deb (--install):\r\n parsing file '/var/lib/dpkg/tmp.ci/control' near line 2 package 'bazel':\r\n error in 'Version' field string '': version string is empty\r\n```\r\n\r\n(which is a bummer because a blocker I've got was recently fixed)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcayzac": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4467", "title": "[Feature][Android] Support for consumer proguard files in AARs", "body": "Following [this comment](https://github.com/bazelbuild/bazel/issues/348#issuecomment-358003363) I'd like to request support for adding consumer proguard files when creating AARs.\r\n\r\nCurrently there's no obvious way for packaging a consumer proguard file, something that's standard when using gradle and AGP to build a library.\r\n\r\n[Anatomy of an AAR file](https://developer.android.com/studio/projects/android-library.html#aar-contents) shows the `proguard.txt` packaged inside the AAR, to be eventually merged with the proguard configuration of the consuming application.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spinorx": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4466", "title": "iOS static framework does not build with bazel anymore", "body": "### Description of the problem / feature request:\r\niOS static framework does not build with bazel 0.9.0 (and 0.8.0).  Used to work fine with 0.7.0\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n```\r\n$ git clone git@github.com:spinorx/bazel_ios_test.git\r\n$ cd bazel_ios_test\r\n$ bazel build --config ios_dev ios_s_fx\r\n```\r\nShows:\r\n```\r\n[param@param-mac:~/bazel_ios_test]$ bazel build --config ios_dev ios_s_fx\r\nERROR: /Users/param/bazel_ios_test/BUILD:27:1: in ios_static_framework rule //:ios_s_fx:\r\nTraceback (most recent call last):\r\n\tFile \"/Users/param/bazel_ios_test/BUILD\", line 27\r\n\t\tios_static_framework(name = 'ios_s_fx')\r\n\tFile \"/private/var/tmp/_bazel_param/6e7baaf7d936c10284a3fa8c52020240/external/build_bazel_rules_apple/apple/bundling/ios_rules.bzl\", line 336, in _ios_static_framework_impl\r\n\t\tbundler.run(ctx, \"IosStaticFrameworkArchive\", \"i...\", <7 more arguments>)\r\n\tFile \"/private/var/tmp/_bazel_param/6e7baaf7d936c10284a3fa8c52020240/external/build_bazel_rules_apple/apple/bundling/bundler.bzl\", line 953, in bundler.run\r\n\t\tapple_common.new_objc_provider(**objc_provider_args)\r\nillegal argument in call to new_objc_provider: Argument framework_dir not a recognized key, 'providers', or 'direct_dep_providers'.\r\nERROR: Analysis of target '//:ios_s_fx' failed; build aborted: Analysis of target '//:ios_s_fx' failed; build aborted\r\nINFO: Elapsed time: 0.213s\r\nFAILED: Build did NOT complete successfully (1 packages loaded)\r\n[param@param-mac:~/bazel_ios_test]$\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\nRunning on Mac 10.13 and Xcode 9.2.  More details:\r\n```\r\n[param@param-mac:~/bazel_ios_test]$ system_profiler SPSoftwareDataType\r\nSoftware:\r\n\r\n    System Software Overview:\r\n\r\n      System Version: macOS 10.13.2 (17C88)\r\n      Kernel Version: Darwin 17.3.0\r\n      Boot Volume: Macintosh HD\r\n      Boot Mode: Normal\r\n      Computer Name: param-mac\r\n      User Name: Param Reddy (param)\r\n      Secure Virtual Memory: Enabled\r\n      System Integrity Protection: Enabled\r\n      Time since boot: 37 days 18:16\r\n\r\n[param@param-mac:~/bazel_ios_test]$ /usr/bin/xcodebuild -version\r\nXcode 9.2\r\nBuild version 9C40b\r\n[param@param-mac:~/bazel_ios_test]$\r\n```\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n```\r\n[param@param-mac:~/bazel_ios_test]$ bazel info release\r\nrelease 0.9.0-homebrew\r\n[param@param-mac:~/bazel_ios_test]$\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jfroy": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4464", "title": "Git hash stamping for an external repository", "body": "### Description of the problem / feature request:\r\n\r\nI need to get the git hash from a git_repository define in a WORKSPACE. Using a workspace_status_command option as described in #216 does not work, since the *top level* workspace ends up providing the git hash, not the external repository.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nI need to incorporate the git hash in the build because it is used as a cache validation key. It must be a github git hash because we need to be inter-operable with caches produced on other machines. The project's normal cmake build system has no problem handling this.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nWrite a genrule that consumes bazel-out/volatile-status.txt in Workspace A, import Workspace A in Workspace B using git_repository, run `bazel build --workspace_status_command=` with the example workspace status command (https://github.com/bazelbuild/bazel/blob/master/tools/buildstamp/get_workspace_status). The genrule will see the git hash of Workspace B, not Workspace A, even of the genrule is in Workspace A.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nNo LSB modules are available.\r\nDistributor ID:\tDebian\r\nDescription:\tDebian GNU/Linux rodete\r\nRelease:\trodete\r\nCodename:\trodete\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nMostly what is in #216, which works OK for a single workspace but not at all when using external workspaces.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drigz": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4463", "title": "Make private headers for cc_library \"just work\" for external and generated files", "body": "Add a way of including private headers (ie, headers included by files in `srcs` that should *not* be available to targets that depend on this `cc_library`) that works the same when the `cc_library` is in an external repo and when the headers are generated files.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nCurrently, the only way I'm aware of including a private header is with `copts = [\"-Ipath/to/hdr/dir\"]`. However, this needs a different path when the target is used from an external repository, resulting in code like this (from [ceres](https://github.com/ceres-solver/ceres-solver/blob/c1075cd313e1e68af21c714d55488255f04dcb69/bazel/ceres.bzl#L173)):\r\n\r\n```\r\n    # The path to internal/ depends on whether Ceres is the main workspace or\r\n    # an external repository.\r\n    if native.repository_name() != '@':\r\n        internal = 'external/%s/internal' % native.repository_name().lstrip('@')\r\n    else:\r\n        internal = 'internal'\r\n    copts = [\"-I\" + internal],\r\n```\r\n\r\nor if the header is generated, like this (from [glog](https://github.com/google/glog/blob/028d37889a1e80e8a07da1b8945ac706259e5fd8/bazel/glog.bzl#L11)):\r\n\r\n```\r\n    if native.repository_name() != '@':\r\n        gendir = '$(GENDIR)/external/' + native.repository_name().lstrip('@')\r\n    else:\r\n        gendir = '$(GENDIR)'\r\n    copts = [\"-I%s/glog_internal\" % gendir],\r\n```\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\n1. Download and extract [private_headers.tar.gz](https://github.com/bazelbuild/bazel/files/1634393/private_headers.tar.gz)\r\n1. `cd private_headers/ws1`\r\n1. `bazel build :lib` (works)\r\n1. `cd ../ws2`\r\n1. `bazel build :exthdr_lib` (fails)\r\n1. `bazel build :genhdr_lib` (also fails)\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 14.04\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nIt is related to #2172, but that is specifically about platform independence.\r\n#1950 concerns the difficulty of using private generated headers, but (a) is closed due to inactivity and (b) doesn't mention the complexity of use from external repos.\r\n#2476 might also have been avoided, since it appears to stem from the use of `includes = [\"$(GENDIR)\"]` ([source](https://github.com/gflags/gflags/blob/v2.2.0/bazel/gflags.bzl#L88)).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aehlig": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4462", "title": "External repo: redo the actual fetching only if predicted hash changed (or is missing)", "body": "### Description of the problem / feature request:\r\n\r\nFeature request: in external repositories, separate the actual network access from local transformations (like patching, #3395). Also, a reaccessing the network is not necessary, if the predicted hash of the fetched artifact has not changed, same if a given commit hash in an external git repo has not changed.\r\nWhile currently mitigated by our http cache, avoiding unnecessary network access seems generally useful.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nUnnecessary network traffic, especially if large repositories have to be fetched.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/34e2193b3cfe32723f950332bd865503173b65b3", "message": "http_archive: test patch files are tracked\n\nAdd a test verifying that changes to the patch file trigger a\na rebuild of the external repository.\n\nEnsures soundness of the fix for Issue #3395.\n\nChange-Id: Ida3823b7cddbe3bb54f0f0e24074e3854055f6e1\nPiperOrigin-RevId: 182226112"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8b459d77bca8cbff5edd8a4e1715aa6870f88eff", "message": "Demontrate that http_archive can pick up a missing build file\n\nThe http_archive command from @bazel_tools can add a BUILD file to an\nexternal repository. Add a test ensuring that changes to that file, in\nparticular the addition of a previously missing file, are tracked\nproperly.\n\nProvides a workaround for #3637.\n\nChange-Id: Ibd6a3336834686a13eaa1f9ce7d4c6223410b222\nPiperOrigin-RevId: 182221653"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmax": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4461", "title": "Android: allow java_proto_library as dependency for android_binary", "body": "### Description of the problem / feature request:\r\n\r\nIt's impossible to utilize full protobuf library on Android device if build is done by `bazel`\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nI need to include full runtime library together with `protobuf-java-util` unless there's a way to parse `json` in `lite` version of which I don't know.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nCreate proto file, add it as `java_proto_library`, add that library as dependency to `android_binary`\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nmacOS 10.13.2\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0-homebrew\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nTo allow this, `\"java_proto_library\"` should be added [here](https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/rules/android/AndroidRuleClasses.java#L318). ", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iirina": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4459", "title": "rules_webtesting tests are failing with bazel 0.10.0rc2 on windows", "body": "Error snippet:\r\n```\r\n======================================================================\r\nERROR: testBrowserProvisioningWithCaps (__main__.BrowserTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/io_bazel_rules_webtesting/testing/web/webtest_test.py\", line 37, in testBrowserProvisioningWithCaps\r\n    driver = webtest.new_webdriver_session(capabilities)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/io_bazel_rules_webtesting/testing/web/webtest.py\", line 48, in new_webdriver_session\r\n    return webdriver.WebDriver(address, desired_capabilities=capabilities)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/webdriver.py\", line 151, in __init__\r\n    self.start_session(desired_capabilities, browser_profile)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/webdriver.py\", line 240, in start_session\r\n    response = self.execute(Command.NEW_SESSION, parameters)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/webdriver.py\", line 308, in execute\r\n    self.error_handler.check_response(response)\r\n  File \"/home/ci/.cache/bazel/_bazel_ci/140d00ad1dcb33975ec7b5cb001f7b9b/bazel-sandbox/6447244412364996219/execroot/io_bazel_rules_webtesting/bazel-out/k8-fastbuild/bin/testing/web/webtest_test_chrome55-win10.runfiles/org_seleniumhq_py/selenium/webdriver/remote/errorhandler.py\", line 194, in check_response\r\n    raise exception_class(message, screen, stacktrace)\r\nWebDriverException: Message: [Go WebDriver Client]: invalid character 'S' looking for beginning of value unmarshalling &{Status:<nil> SessionID: Value:<nil> Error: Message: StackTrace:<nil>}\r\n```\r\n\r\nFailed tests are [here](https://ci.bazel.build/blue/organizations/jenkins/Global%2Frules_webtesting/detail/rules_webtesting/14/tests).\r\nFull console output is [here](https://ci.bazel.build/job/Global/job/rules_webtesting/14/console).", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4458", "title": "rules_closure tests are failing with bazel 0.10.0rc2", "body": "Error snippet:\r\n```\r\nFAIL: //closure/testing/test:noto_fonts_render_as_expected (see /private/var/tmp/_bazel_ci/fc16475be128c8b14fa95cbca7da3228/execroot/io_bazel_rules_closure/bazel-out/darwin-fastbuild/testlogs/closure/testing/test/noto_fonts_render_as_expected/test.log)\r\n```\r\n\r\nFull log is [here](https://ci.bazel.build/job/Global/job/rules_closure/358/consoleFull).\r\n\r\n@jart Can you take a look and identify if it's a bazel or rules_closure issue? Thanks!\r\n\r\nCould block #3958.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4455", "title": "bazel-tests fails with Bazel 0.10.0rc2", "body": "`bazel_example_test#test_cpp` is failing on darwin. Console log is [here](https://ci.bazel.build/job/Global/job/bazel-tests/438/testReport/junit/(root)/(empty)/Run_configurations___node_darwin_x86_64____node_darwin_x86_64__Results___test_cpp/).\r\n\r\nThe error message seems to be:\r\n```\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nexternal/local_config_cc/wrapped_clang: /private/var/tmp/_bazel_ci/14a274db1e6628a41b59a0d9bb823350/bazel-sandbox/5010398014833648738/execroot/io_bazel/_tmp/66916a96669eded3a8961a3961f3c5c8/root/4efe66e8ba0423259138ac28dfeb6970/bazel-sandbox/3515764093275958450/execroot/io_bazel/external/local_config_cc/xcrunwrapper.sh: /bin/bash: bad interpreter: Permission denied\r\nTarget //examples/cpp:hello-world failed to build\r\n```\r\n\r\nBlocks #3958", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4454", "title": "bazel-slow-tests are failing with bazel 0.10.0rc2", "body": "The log is [here](https://ci.bazel.build/job/Global/job/bazel-slow-tests/189/console). The problems are related to docker. It seems it cannot fetch some files.\r\n\r\n@philwo can you take a look? Do you know what the issue is?\r\n\r\nBlocks #3958.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4453", "title": "bazel-integration-testing  fails with bazel 0.10.0rc2", "body": "The failure is due to ErrorProne [StreamResourceLeak](http://errorprone.info/bugpattern/StreamResourceLeak) check.\r\n\r\nError snippet:\r\n\r\n```\r\nERROR: /home/ci/workspace/Global/bazel-integration-testing-node=ubuntu_16.04-x86_64/javatests/build/bazel/tests/integration/BUILD:3:1: Building javatests/build/bazel/tests/integration/BazelBaseTestCaseTest/bazel0.5.4.jar (1 source file) failed (Exit 1): java failed: error executing command \r\n\r\n  (cd /home/ci/.cache/bazel/_bazel_ci/c835b2c831c4d801240f7a5d3bdbb67e/execroot/build_bazel_integration_testing && \\\r\n\r\n  exec env - \\\r\n\r\n    LC_CTYPE=en_US.UTF-8 \\\r\n\r\n  external/local_jdk/bin/java -Xbootclasspath/p:external/bazel_tools/third_party/java/jdk/langtools/javac-9-dev-r4023-3.jar -jar external/bazel_tools/tools/jdk/JavaBuilder_deploy.jar @bazel-out/k8-fastbuild/bin/javatests/build/bazel/tests/integration/BazelBaseTestCaseTest/bazel0.5.4.jar-2.params)\r\n\r\njavatests/build/bazel/tests/integration/BazelBaseTestCaseTest.java:109: error: [StreamResourceLeak] Streams that encapsulate a closeable resource should be closed using try-with-resources\r\n\r\n      return Files.walk(workspacePath).map(Path::toString).collect(Collectors.toList());\r\n\r\n                       ^\r\n\r\n    (see http://errorprone.info/bugpattern/StreamResourceLeak)\r\n\r\n  Did you mean 'try (Stream<Path> stream = Files.walk(workspacePath)) {'?\r\n\r\nINFO: Elapsed time: 17.040s, Critical Path: 4.98s\r\n\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\nShould be easily fixed by using using try-with-resources.\r\n\r\nBlocks #3958.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "devnev": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4457", "title": "Can't query packages where ignoring conditions creates cycles.", "body": "### Description of the problem / feature request:\r\n\r\nA vendored dependency has two packages `A` and `B` which use `select()`s in their dependencies. Depending on the target platform, they produce either an A->B dependency or a B->A dependency. Querying for deps breaks on this package.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nHopefully description is enough as actually creating platform-dependend builds seems quite complicated...\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu 16.04.3\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nIssue #967 is a discussion of the same cause but with a different use-case. \r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nThe dependency that orignially caused this was https://github.com/shirou/gopsutil, where subpackages \"process\" and \"host\" have the quasi-cycle.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergiocampama": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4452", "title": "Loading bazel through PATH does not work when having a bazel.bazelrc file next to it", "body": "### Description of the problem / feature request:\r\n\r\nImagine for example that we have the following folder structure:\r\n\r\n```\r\n~/bin/bazel\r\n~/bin/bazel.bazelrc\r\n```\r\n\r\nWe then also have the following configuration for PATH, making it easy to call bazel from any folder.\r\n\r\n```\r\nPATH=\"~/bin:$PATH\"\r\n```\r\n\r\nNow we find ourselves in `~/Dev/SecretProject`. If I call `bazel` from this folder, it will be found because of the `PATH` configuration. But the `bazel.bazelrc` will not be loaded. This is because [this code](https://github.com/bazelbuild/bazel/blob/master/src/main/cpp/workspace_layout.cc#L73) assumes that `bazel` resides in `$CWD`, so it prepends `$CWD` to the invocation name (or `$0` in bash) and appends `basename($0) + \"rc\"`. So it will effectively load `~/Dev/SecretProject/bazel.bazelrc`. \r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nFrom within the bazel github repository:\r\n\r\n```\r\n$ bazel build //src:bazel\r\n$ mkdir -p ~/bin\r\n$ cp bazel-bin/src/bazel ~/bin/bazel\r\n$ # Add a broken bazel.bazelrc file next to bazel.\r\n$ echo \"build --nonexistantflag\" > ~/bin/bazel.bazelrc \r\n# This command should fail, as bazel should load ~/bin/bazel.bazelrc\r\n$ PATH=\"$HOME/bin:$PATH\" bazel build //src:bazel\r\n# This command does fail, as we're invoking bazel directly through a relative link.\r\n$ ~/bin/bazel build //src:bazel\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nmacOS High Sierra 10.13.2\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nThis is at HEAD\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nBootstrapped with bazel 0.9.0 homebrew\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\n07c4e3648e3b7a521b6706ffc5cbcdeca1ebf4e1\r\n455f005ed742ded601065d8db80e24a1d8d247d8\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nNope\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nNope\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4451", "title": "Provide a bit more information on the expected location of bazelrc files.", "body": "The docs failed to mention the expected name of the file next to the binary. Also missing was the information that these files do not override each other; they are always loaded if present.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "borisbrodski": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4450", "title": "\"IOException: Illegal seek\" during build v0.9.0 on Android aarch64", "body": "### Description of the problem / feature request:\r\n\r\nCan't compile bazel on Android aarch64 (Samsung Galaxy Note 8) under Termux/ArchLinux.\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug?\r\n\r\nOn an Android device (Note 8) install:\r\n\r\n* Termux App\r\n* Unter Termux install ArchLinux (https://wiki.termux.com/wiki/Arch)\r\n* ArchLinux: Install with pacman -S: wget, jdk8-openjdk, zlib\r\n* Download bazel-0.9.0-dest.zip, extract it\r\n* Add \"-J-Xmx1G\" to the call to the javac in bootstrap to avoid OutOfMemory: heap\r\n* ./compile.sh\r\n* Wait for 2-3 hours\r\n* Scroll way back to find exception attached below\r\n\r\n### What operating system are you running Bazel on?\r\n\r\n    $ uname -a\r\n    Linux localhost 4.4.13-12472670 #1 SMP PREEMPT Thu Nov 30 11:41:23 KST 2017 aarch64 GNU/Linux\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nUnknown, bazel can't be built\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nI'm trying to compile an official release.\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nNo git repository being used\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nAbsolutely nothing\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nThe relevant part of the log\r\n\r\n```\r\nBuilding deploy jar .../buildjar/JavaBuilder_deploy.jar;\r\n[1,619 / 1,789] 6 actions running\r\nBuilding deploy jar .../singlejar/bazel-singlejar_deploy.jar; 7s local\r\n.../java/com/google/devtools/build/android:android_builder_lib; 0s worker\r\nBuilding deploy jar .../buildjar/JavaBuilder_deploy.jar;ERROR: /root/bazel-0.9.0/src/main/java/com/google/devtools/build/lib/vfs/BUILD:30:1: Building src/main/java/com/google/devtools/build/lib/vfs/libvfs.jar (22 source files) and running annotation processors (OptionProcessor) failed: Worker process did not return a WorkResponse:\r\n-\r\n---8<---8<--- Start of log, file at /tmp/bazel_arrsxVP9/out/bazel-workers/worker-2-Javac.log ---8<---8<---\r\nOpenJDK 64-Bit Zero VM warning: TieredCompilation is disabled in this release.\r\njava.io.IOException: Illegal seek\r\n         at java.io.FileInputStream.available(Native Method)\r\n         at java.io.BufferedInputStream.read(BufferedInputStream.java:353)\r\n         at java.io.FilterInputStream.read(FilterInputStream.java:133)\r\n         at com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream.read(AbstractMessageLite.java:290)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.tryRefillBuffer(CodedInputStream.java:2777)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.refillBuffer(CodedInputStream.java:2723)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readRawByte(CodedInputStream.java:2803)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readRawVarint64SlowPath(CodedInputStream.java:2594)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readRawVarint32(CodedInputStream.java:2488)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readStringRequireUtf8(CodedInputStream.java:2268)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input.<init>(WorkerProtocol.java:105)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input.<init>(WorkerProtocol.java:62)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input$1.parsePartialFrom(WorkerProtocol.java:682)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$Input$1.parsePartialFrom(WorkerProtocol.java:677)\r\n         at com.google.protobuf.CodedInputStream$StreamDecoder.readMessage(CodedInputStream.java:2362)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest.<init>(WorkerProtocol.java:837)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest.<init>(WorkerProtocol.java:780)\r\n         at com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest$1.parsePartialFrom(WorkerProtocol.java:1773)\r\n         com.google.devtools.build.lib.worker.WorkerProtocol$WorkRequest$1.parsePartialFrom(WorkerProtocol.java:1768)\r\n         com.google.protobuf.AbstractParser.parsePartialFrom(AbstractParser.java:221)\r\n         at com.google.protobuf.AbstractParser.parsePartialDelimitedFrom(AbstractParser.java:262)\r\n         at com.google.protobuf.AbstractParser.parseDelimitedFrom(AbstractParser.java:275)\r\n         at com.google.protobuf.AbstractParser.parseDelimitedFrom(AbstractParser.java:280)\r\n         at com.google.protobuf.AbstractParser.parseDelimitedFrom(AbstractParser.java:49)\r\n```", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Utsav2": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4448", "title": "Exception when trying to test in a folder named external", "body": "> ATTENTION! Please read and follow:\r\n> - if this is a _question_ about how to build / test / query / deploy using Bazel, ask it on StackOverflow instead: https://stackoverflow.com/questions/tagged/bazel\r\n> - if this is a _discussion starter_, send it to bazel-discuss@googlegroups.com\r\n> - if this is a _bug_ or _feature request_, fill the form below as best as you can.\r\n\r\n### Description of the problem / feature request:\r\n\r\nException from bazel\r\n\r\n```\r\n(16:22:50) FAILED: Build did NOT complete successfully (0 packages loaded)\r\njava.lang.RuntimeException: Unrecoverable error while evaluating node 'external/...' (requested by nodes '[external/...] DETERMINE_TESTScom.google.devtools.build.lib.pkgcache.TestFilter@e17a1')\r\n    at com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:414)\r\n    at com.google.devtools.build.lib.concurrent.AbstractQueueVisitor$WrappedRunnable.run(AbstractQueueVisitor.java:352)\r\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n    at java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalArgumentException: No such attribute tags in maven_jar rule //external:antlr_antlr\r\n    at com.google.devtools.build.lib.packages.AbstractAttributeMapper.getIndexWithTypeCheck(AbstractAttributeMapper.java:251)\r\n    at com.google.devtools.build.lib.packages.AbstractAttributeMapper.get(AbstractAttributeMapper.java:58)\r\n    at com.google.devtools.build.lib.packages.NonconfigurableAttributeMapper.get(NonconfigurableAttributeMapper.java:45)\r\n    at com.google.devtools.build.lib.packages.TargetUtils.hasConstraint(TargetUtils.java:201)\r\n    at com.google.devtools.build.lib.packages.TargetUtils.hasManualTag(TargetUtils.java:81)\r\n    at com.google.devtools.build.lib.pkgcache.FilteringPolicies$FilterManual.shouldRetain(FilteringPolicies.java:73)\r\n    at com.google.devtools.build.lib.pkgcache.FilteringPolicies$AndFilteringPolicy.shouldRetain(FilteringPolicies.java:105)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver$3.call(RecursivePackageProviderBackedTargetPatternResolver.java:324)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver$3.call(RecursivePackageProviderBackedTargetPatternResolver.java:309)\r\n    at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:124)\r\n    at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57)\r\n    at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:77)\r\n    at com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.execute(MoreExecutors.java:260)\r\n    at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)\r\n    at com.google.common.util.concurrent.AbstractListeningExecutorService.submit(AbstractListeningExecutorService.java:66)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver.findTargetsBeneathDirectoryAsyncImpl(RecursivePackageProviderBackedTargetPatternResolver.java:308)\r\n    at com.google.devtools.build.lib.skyframe.RecursivePackageProviderBackedTargetPatternResolver.findTargetsBeneathDirectory(RecursivePackageProviderBackedTargetPatternResolver.java:225)\r\n    at com.google.devtools.build.lib.cmdline.TargetPattern$TargetsBelowDirectory.eval(TargetPattern.java:594)\r\n    at com.google.devtools.build.lib.skyframe.TargetPatternFunction.compute(TargetPatternFunction.java:72)\r\n    at com.google.devtools.build.skyframe.AbstractParallelEvaluator$Evaluate.run(AbstractParallelEvaluator.java:340)\r\n    ... 4 more\r\n```\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\n### Bugs: what's the simplest, easiest way to reproduce this bug? Please provide a minimal example if possible.\r\n\r\nmkdir external\r\nbazel test external/...\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nUbuntu\r\n\r\n### What's the output of `bazel info release`?\r\n\r\ndevelopment\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nbuilt bazel at c69dbf8ed\r\n\r\n### What's the output of `git remote get-url origin ; git rev-parse master ; git rev-parse HEAD` ?\r\n\r\nhttps://github.com/bazelbuild/bazel.git\r\nc69dbf8ed4893066d0474f87c0a8ddae00e4ee58\r\nc69dbf8ed4893066d0474f87c0a8ddae00e4ee58\r\n\r\n###  Have you found anything relevant by searching the web?\r\n\r\nno\r\n\r\n>\r\n> Places to look:\r\n> - StackOverflow: http://stackoverflow.com/questions/tagged/bazel\r\n> - GitHub issues: https://github.com/bazelbuild/bazel/issues\r\n> - email threads on https://groups.google.com/forum/#!forum/bazel-discuss\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\n> Replace these lines with your answer.\r\n>\r\n> If the files are large, upload as attachment or provide link.\r\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pmuetschard": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4446", "title": "cc_proto_library should support cc_library parameters (like copts, linkopts, etc)", "body": "### Description of the problem / feature request:\r\n\r\nThe cc_proto_library is, in essence a cc_library rule and should thus honor the cc_library parameters, such as copts.\r\n\r\n### Feature requests: what underlying problem are you trying to solve with this feature?\r\n\r\nLarge protos may require the `-Wa,-mbig-obj` copt on Windows, but it is not always possible to use that flag globally (e.g. if also compiling go code).\r\n\r\nThere are other reason why people may want to control the underlaying cc_library rule, of course.\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nLinux, OSX, Windows\r\n\r\n### What's the output of `bazel info release`?\r\n\r\n0.9.0", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "excavador": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4445", "title": "Error while validating output TreeArtifact", "body": "If I use \"declary_directory\" instead of \"declare_file\" I receive following problem with symlink to system python (only under linux, under OSX everything works fine) (just local bazel, not farm)\r\n\r\nIs it expected behavior or another bug in bazel?\r\n```\r\nERROR: /home/jenkins/backend-ci/plato/BUILD.bazel:45:1: Error while validating output TreeArtifact File:[[/home/jenkins/.cache/bazel/_bazel_jenkins/cff2319697c0ff2c301458e924e0bef7/execroot/XXX]bazel-out/k8-dbg/bin]plato/tests.virtualenv : /home/jenkins/.cache/bazel/_bazel_jenkins/cff2319697c0ff2c301458e924e0bef7/execroot/XXX/bazel-out/k8-dbg/bin/plato/tests.virtualenv/lib/python3.6/config-3.6m-x86_64-linux-gnu (Operation not permitted)\r\nERROR: /home/jenkins/backend-ci/plato/BUILD.bazel:45:1: not all outputs were created or valid\r\n\r\n[jenkins@ci-slave-1:Ireland backend-ci]$ ls -al /home/jenkins/.cache/bazel/_bazel_jenkins/cff2319697c0ff2c301458e924e0bef7/execroot/XXX/bazel-out/k8-dbg/bin/plato/tests.virtualenv/lib/python3.6/\r\ntotal 44\r\ndr-xr-xr-x.  5 jenkins jenkins  4096 Jan 12 19:27 .\r\ndr-xr-xr-x.  3 jenkins jenkins    23 Jan 12 19:27 ..\r\nlrwxrwxrwx.  1 jenkins jenkins    27 Jan 12 19:27 abc.py -> /usr/lib64/python3.6/abc.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 base64.py -> /usr/lib64/python3.6/base64.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 bisect.py -> /usr/lib64/python3.6/bisect.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 _bootlocale.py -> /usr/lib64/python3.6/_bootlocale.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 codecs.py -> /usr/lib64/python3.6/codecs.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 collections -> /usr/lib64/python3.6/collections\r\nlrwxrwxrwx.  1 jenkins jenkins    40 Jan 12 19:27 _collections_abc.py -> /usr/lib64/python3.6/_collections_abc.py\r\nlrwxrwxrwx.  1 jenkins jenkins    49 Jan 12 19:27 config-3.6m-x86_64-linux-gnu -> /usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 copy.py -> /usr/lib64/python3.6/copy.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 copyreg.py -> /usr/lib64/python3.6/copyreg.py\r\ndrwxr-xr-x.  3 jenkins jenkins    65 Jan 12 19:27 distutils\r\nlrwxrwxrwx.  1 jenkins jenkins    37 Jan 12 19:27 _dummy_thread.py -> /usr/lib64/python3.6/_dummy_thread.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 encodings -> /usr/lib64/python3.6/encodings\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 enum.py -> /usr/lib64/python3.6/enum.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 fnmatch.py -> /usr/lib64/python3.6/fnmatch.py\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 functools.py -> /usr/lib64/python3.6/functools.py\r\nlrwxrwxrwx.  1 jenkins jenkins    34 Jan 12 19:27 __future__.py -> /usr/lib64/python3.6/__future__.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 genericpath.py -> /usr/lib64/python3.6/genericpath.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 hashlib.py -> /usr/lib64/python3.6/hashlib.py\r\nlrwxrwxrwx.  1 jenkins jenkins    29 Jan 12 19:27 heapq.py -> /usr/lib64/python3.6/heapq.py\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 hmac.py -> /usr/lib64/python3.6/hmac.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 importlib -> /usr/lib64/python3.6/importlib\r\nlrwxrwxrwx.  1 jenkins jenkins    27 Jan 12 19:27 imp.py -> /usr/lib64/python3.6/imp.py\r\nlrwxrwxrwx.  1 jenkins jenkins    26 Jan 12 19:27 io.py -> /usr/lib64/python3.6/io.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 keyword.py -> /usr/lib64/python3.6/keyword.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 lib-dynload -> /usr/lib64/python3.6/lib-dynload\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 linecache.py -> /usr/lib64/python3.6/linecache.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 locale.py -> /usr/lib64/python3.6/locale.py\r\n-rw-r--r--.  1 jenkins jenkins     0 Jan 12 19:27 no-global-site-packages.txt\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 ntpath.py -> /usr/lib64/python3.6/ntpath.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 operator.py -> /usr/lib64/python3.6/operator.py\r\n-rw-r--r--.  1 jenkins jenkins     4 Jan 12 19:27 orig-prefix.txt\r\nlrwxrwxrwx.  1 jenkins jenkins    26 Jan 12 19:27 os.py -> /usr/lib64/python3.6/os.py\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 posixpath.py -> /usr/lib64/python3.6/posixpath.py\r\ndrwxr-xr-x.  2 jenkins jenkins  4096 Jan 12 19:27 __pycache__\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 random.py -> /usr/lib64/python3.6/random.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 reprlib.py -> /usr/lib64/python3.6/reprlib.py\r\nlrwxrwxrwx.  1 jenkins jenkins    26 Jan 12 19:27 re.py -> /usr/lib64/python3.6/re.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 rlcompleter.py -> /usr/lib64/python3.6/rlcompleter.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 shutil.py -> /usr/lib64/python3.6/shutil.py\r\ndrwxr-xr-x. 66 jenkins jenkins  4096 Jan 12 19:27 site-packages\r\n-rw-r--r--.  1 jenkins jenkins 27543 Jan 12 19:27 site.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 sre_compile.py -> /usr/lib64/python3.6/sre_compile.py\r\nlrwxrwxrwx.  1 jenkins jenkins    37 Jan 12 19:27 sre_constants.py -> /usr/lib64/python3.6/sre_constants.py\r\nlrwxrwxrwx.  1 jenkins jenkins    33 Jan 12 19:27 sre_parse.py -> /usr/lib64/python3.6/sre_parse.py\r\nlrwxrwxrwx.  1 jenkins jenkins    28 Jan 12 19:27 stat.py -> /usr/lib64/python3.6/stat.py\r\nlrwxrwxrwx.  1 jenkins jenkins    30 Jan 12 19:27 struct.py -> /usr/lib64/python3.6/struct.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 tarfile.py -> /usr/lib64/python3.6/tarfile.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 tempfile.py -> /usr/lib64/python3.6/tempfile.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 tokenize.py -> /usr/lib64/python3.6/tokenize.py\r\nlrwxrwxrwx.  1 jenkins jenkins    29 Jan 12 19:27 token.py -> /usr/lib64/python3.6/token.py\r\nlrwxrwxrwx.  1 jenkins jenkins    29 Jan 12 19:27 types.py -> /usr/lib64/python3.6/types.py\r\nlrwxrwxrwx.  1 jenkins jenkins    32 Jan 12 19:27 warnings.py -> /usr/lib64/python3.6/warnings.py\r\nlrwxrwxrwx.  1 jenkins jenkins    31 Jan 12 19:27 weakref.py -> /usr/lib64/python3.6/weakref.py\r\nlrwxrwxrwx.  1 jenkins jenkins    35 Jan 12 19:27 _weakrefset.py -> /usr/lib64/python3.6/_weakrefset.py\r\n```\r\n\r\n### What operating system are you running Bazel on?\r\n\r\nLinux CentOS 7\r\n\r\n### What's the output of `bazel info release`?\r\n\r\nrelease 0.9.0- (@non-git)\r\n\r\n### If `bazel info release` returns \"development version\" or \"(@non-git)\", tell us how you built Bazel.\r\n\r\nhttps://github.com/vbatts/copr-build-bazel/blob/master/bazel.spec\r\nadopted for 0.9.0\r\n\r\n\r\n### Additional information\r\n\r\nhttps://github.com/bazelbuild/bazel-buildfarm/issues/77", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EricCousineau-TRI": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4444", "title": "Add definition of \"repository\" to \"Concepts and Terminology\" page?", "body": "The terms \"package\", \"workspace\", \"repository\", \"external\", etc., can be confusing, so it's *really* nice to have the \"Concepts and Terminology\" page to distinguish those:\r\nhttps://docs.bazel.build/versions/master/build-ref.html\r\n\r\nThat being said, there does not appear to be an explicit definition of what a Bazel \"repository\" is. \r\nIt's more or less implicitly defined though `repository_rule`, `*local_repository`, etc, and there is kind of an explicit definition, constrained to \"external repository\", mentioned here:\r\nhttps://docs.bazel.build/versions/master/skylark/repository_rules.html\r\n\r\nHowever, constraining it to \"external repository\" seems a tad awkward when using a `*local_repository` (it makes technical sense in that it's consumed via `@` / `//external`, but grammatically it's confusing).\r\n\r\nWould it be possible to add a definition of \"repository\"?\r\n(An \"external repository\", or a local repository that may have its own WORKSPACE, but is *not* a workspace in that it's not the active workspace via `bazel info workspace`?)", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "katre": {"issues": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4442", "title": "Allow users to configure the available execution platforms", "body": "Currently, the host platform is the only available execution platform during toolchain resolution. Allow users to specify additional platforms that are execution platforms, via the command line and by registering them in the WORKSPACE file.", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/4442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ed90b554d05db038ff0eab5463af9ab51c2c72a7", "message": "Actually run ExternalPackageUtilTest.\n\nFixes #4443.\n\nChange-Id: I8a30823eff87457e3ef2568efbe667f29c644ed4\nPiperOrigin-RevId: 182208767"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cushon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4dce09cdc7914d76401a6f77fd78e0176d173dd1", "message": "Add a missing format argument to an error message\n\nPiperOrigin-RevId: 182396321"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/adecfb2101a1bb19c53ab6c0361cd59073f8b723", "message": "Update turbine version\n\nChange-Id: Icf38365fc7f3bf2d6d1ef11e7c07504a222969f6"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/354d675bdc468009b05ba08a9f7f371092bf239a", "message": "Add missing resources to jopt-simple\n\nThis was causing jarjar --help to crash.\n\nChange-Id: Ia8e654cf3f45225d00001a75b10d8a1a6d261401"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6e945ced1f3d61d2497626db9138127bcb302c77", "message": "Update javac version to 9+181-r4173-1\n\nChange-Id: I05fa85967317c4581081adfc620e24a7c6322669"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6f95124c3453006149eac955d7620540c7d6bda4", "message": "Normalize javacopts for javac-turbine\n\nPiperOrigin-RevId: 182130131"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/d087df0332b71704cc55311027d76bed6010696a", "message": "If a compilation uses both -source and --release, prefer --release\n\njavac does not allow both -source and --release to be set, which makes it\ndifficult to migrate to --release when javacopts are combined from\nmultiple sources.\n\nPiperOrigin-RevId: 182113897"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brandjon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/a0c056e406fab214b30b12851829194fbf908a3a", "message": "Add TestUtils#ConstantStringCodec\n\nRELNOTES: None\nPiperOrigin-RevId: 182390511"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/aadf6600faa099726b2e1c00e75b0edc9d95bfb8", "message": "Fix forbidding of If statements in BUILD files\n\nThe bug also permitted For statements in BUILD files so long as they were contained within an If statement (i.e. not at the top level).\n\nAlso add minor guidance to error messages.\n\nRELNOTES: None\nPiperOrigin-RevId: 182236172"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "haxorz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8e2ae53375c0a615c53ab4e10f27856025a83fb1", "message": "Include the list of 'excludes' glob patterns in the error message used when an IOException is encountered from a Globber. The io error may have been encountered during evaluation of one of the 'excludes' patterns.\n\nRELNOTES: None\nPiperOrigin-RevId: 182390180"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/97f358412aeb1109afa8a9ea500150fd21aebf3c", "message": "Make comment more readable and correct.\n\nRELNOTES: None\nPiperOrigin-RevId: 182272900"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6f35e2d81a4d10359d39643bd03887d1b87f4224", "message": "Have UnixGlob explicitly handle RuntimeExceptions encountered by individual glob tasks.\n\nRELNOTES: None\nPiperOrigin-RevId: 182125500"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "a-googler": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ab0cdd55fc73b40f1c7462a2b95cc1ce7f930043", "message": "Re-add WalkableGraph#isUpToDate and BuildDriver#alreadyEvaluated\n\nRELNOTES: None\nPiperOrigin-RevId: 182389876"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/4695de623614b1105166513d28f6b52ceb8f4c83", "message": "Add deprecation warning message to mobile-install classic mode.\n\nWe've notified the top classic users by email that classic mode is deprecated.\nAs we are no longer actively supporting classic mode, we'd like users to move\nover to skylark.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182268733"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/70ec04ad08b250c34b1ce455b1faa25228ef8a2f", "message": "[Autocodec] Add a ImmutableSetCodec. ImmutableCollections have a deterministic\niteration order so we should be okay.\n\nPiperOrigin-RevId: 182235068"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/e01d0c8f9019b7e0beb406ea3932e7dc84b6f333", "message": "Filter out generated proto extension registry loader from instrumentation APK.\n\nRELNOTES: None\nPiperOrigin-RevId: 182145172"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janakdr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ee692d5fe03117fb3995c63ccb6b515adf375c88", "message": "Add serialization codec for SkylarkImports. This is needed to serialize SkylarkAspectLoadingKey.\n\nAlso add a @VisibleForSerialization annotation to @AutoCodec, since we're going to need to increase serialization visibility a lot here, and clean up some unnecessary modifiers.\n\nPiperOrigin-RevId: 182389162"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f3e6f251d3823a826918ad762d1f69f84030ef8c", "message": "Start the process of getting Target out of ConfiguredTarget: add a new container, ConfiguredTargetAndTarget, that can be used to access Targets, and deprecate ConfiguredTarget#getTarget. ConfiguredAndTargetObjects are intended to be limited in scope, not being persisted to Skyframe.\n\nThe eventual plan is to remove the target field from ConfiguredTarget.\n\nThis CL is mostly straightforward, except for dealing with AliasConfiguredTargets, which cause some complications.\n\nA significant cleanup is still needed before #getTarget can be removed, but I don't see any impossible blockers. We will may still need to store a Target-like object in ConfiguredTarget (that has the RuleClass, or at least a string representation of it, for instance), but that will let us avoid storing a full Target together with its associated Package.\n\nPiperOrigin-RevId: 182371566"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/2b876c112b06d458585356682b6a11bc392ca4cc", "message": "Add an additional attempt to get a heap histogram since jmap on Bazel CI appears to be flaky in connecting to the JVM.\n\nPiperOrigin-RevId: 182118581"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbabkin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/fca3d391161ae4c92cf289a897db2a1c69a9b334", "message": "Create function createJavaInfo with new API. Implement JavaExportsProvider.\n\nAdded tests for checking JavaExportsProvider state.\nRefactored logic working with collection in favor of using Streams to improve readability.\nAll other providers will be implemented in next CLs.\n\nprevious CL with JavaCompilationArgsProvider implementation is https://github.com/bazelbuild/bazel/commit/32dff21d00ad7d1bdf50e8761d675a6e7e002de9,\nJavaSourceJarsProvider : https://github.com/bazelbuild/bazel/commit/5bd53cb609480ca896ca2d011f415b424c63ce63\n\nRELNOTES:none\nPiperOrigin-RevId: 182342490"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/6f502ac12180973f4646c95d95e1516082b3c71c", "message": "Point android_instrumentation_test's test runner to the vendored\ndeploy jar at @android_test_support//:instrumentation_test_runner alias to  @android_test_support//opensource:entry_point_deploy.jar\n\nGITHUB: #903\nRELNOTES: None.\nPiperOrigin-RevId: 182310718"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asmundak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/fe1bee5977fe7a4811114daa922a69e1effd85da", "message": "Bug fix: a call to OutputJar::ReserveCdh potentially invalidates the addresses\nreturned by the previous calls of the same method. Keep each such address in a\nseparate scope.\n\nRELNOTES: Crash in OutputJar::Close has been fixed\nPiperOrigin-RevId: 182286718"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomlu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/ee6a6862e26704854fb08bd90912890814cc3426", "message": "Introduce Root class.\n\nThis class represents a root (such as a package path or an output root) used for file lookups and artifacts. It is meant to be as opaque as possible in order to hide the user's environment from sky keys and sky functions.\n\nRoots are used by RootedPaths and ArtifactRoots.\n\nThis CL attempts to make the minimum number of modifications necessary to change RootedPath and ArtifactRoot to use these fields. Deprecated methods and invasive accessors are permitted to minimise the risk of any observable changes.\n\nRELNOTES: None\nPiperOrigin-RevId: 182271759"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/commits/12640e54eadd40f674c23ac4cbd63725e9ac3f56", "message": "Fix blaze crashes with running under JDK9.\n\nRELNOTES: None\nPiperOrigin-RevId: 182223038"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rupertks": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/f323fb3043bc782526e0e47933efedea9c5c2ad9", "message": "Suggest 'bazel clean --expunge' to fix Xcode errors in AppleCcToolchain.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182271042"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "c-parsons": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/8134b9fc140c810d00a91ca9a0313a1e4322ee00", "message": "Migrate Apple providers to abide by Native Declared Provider best practices.\n\nThis has the effect of documenting exposed struct fields on these providers.\n\nRELNOTES: None.\nPiperOrigin-RevId: 182221042"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aoeui": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bazelbuild/bazel/commits/7ac7b63c658509fd335db6f0149da8e2786c488a", "message": "Codec for Location.\n\n* Moves SingletonCodec to third_party.\n\nPiperOrigin-RevId: 182143153"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4471", "title": "Update java_import_external best practices", "body": "Our best practices have evolved to recommend HTTP. There's also now a\r\nnote that should help maintainers do the right thing.\r\n\r\nhttps://github.com/bazelbuild/bazel/issues/4425#issuecomment-358230243", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3946", "title": "Open source Bazel Maven Config Generator website", "body": "This directory contains the source code to a website that runs on [Google Apps Script](https://script.google.com). It crawls Maven POM metadata to generate `WORKSPACE` configs using [`java_import_external`](https://github.com/bazelbuild/bazel/blob/062fe70189fc622285833311d241021be313680b/tools/build_defs/repo/java.bzl).\r\n\r\nPlease watch the [demo video](https://www.youtube.com/watch?v=xdMDuhJTKMI) on YouTube.\r\n\r\n### Features\r\n\r\n- Defines all transitive relationships\r\n- Resolves diamond conflicts by bumping versions\r\n- Calculates SHA256 (slow due to Apps Script API issue)\r\n- Documents `licenses` and heuristically categorizes them\r\n- Heuristics for `neverlink` (provided) jars\r\n- Source jars and optional dependencies\r\n- Mirrors jars to Google Drive\r\n- Adds iBiblio URLs if 200 OK\r\n\r\n### Verbosity\r\n\r\nThe huge config is good because it makes builds deterministic, highly available, and fast because Bazel won't need to BFS HTTP POMs each build. Even Java projects with hundreds of transitive dependencies can expect `bazel fetch //....` to take seconds.\r\n\r\nYou'll also see all the mysterious code from the Internet that you're running on your machine. For example, you might discover Apache Commons Collections 3.2.1 on the classpath, in which case it's game over if anything in the JVM is deserializing. So the verbosity might actually save you from ending up in the same boat as Equifax. See [Operation Rosehub](https://opensource.googleblog.com/2017/03/operation-rosehub.html) to learn more.\r\n\r\n### Imperfection\r\n\r\nAnother reason why the generated config is huge is because it only gets you 90% there. You will need to make subtle adjustments after using the tool. See the README in the PR to learn more.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mouadino": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4470", "title": "Make __init__.py files creation optional", "body": "Introduce a new attribute to py_binary and py_test to control whether to\r\ncreate `__init__.py` or not.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/55\r\n\r\nTODO:\r\n\r\n- [x] Sign CLA (waiting for my company input on how to proceed).\r\n- [ ] Test to see if my original reported issue is fixed with this change, especially how this works with https://github.com/bazelbuild/rules_python#importing-pip-dependencies.\r\n- [ ] Add automated tests, although I am not sure how to do it, any advice is much appreciated.\r\n- [ ] Understand why flipping the new flag doesn't create/delete `__init__.py` files, b/c currently running clean is required after flipping the flag.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmillikin-stripe": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4449", "title": "Minor changes to vendored protobuf/grpc libraries to match upstreams", "body": "With these changes, Bazel's vendored copy of protobuf can be swapped out with the main protobuf library in a workspace. This is useful when building Bazel or its helper binaries (e.g. remote builder) as part of a larger project.\r\n\r\nTested by building //src:bazel-bin with both the vendored copy, and a `http_archive` of protobuf 3.5.1 (unmodified upstream). I don't have enough deps on my local workstation to run the full Bazel test suite, so I'm hoping the Bazel CI can run the full tests.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4435", "title": "Use @io_bazel to reference Bazel sources from local repositories.", "body": "Fixes https://github.com/bazelbuild/bazel/issues/4285\r\n\r\ncc @dslomov", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mboes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4355", "title": "Make test_rules.bzl --all_incompatible_changes compliant.", "body": "Fixes #4354.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zlalanne": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4307", "title": "Add NO_PROXY environment variable support to downloader", "body": "Check the no_proxy and NO_PROXY environment variables for a list of URLs that\r\nshould not use a proxy. If the requested URL matches the no_proxy list, don't\r\nproxy the download.\r\n\r\nFixes #4299", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3585", "title": "Change pkg_tar behavior to keep current permissions of files", "body": "Changes the default behavior of pkg_tar to not modify file permissions before\r\nputting the files in an archive unless requested. Now by default pkg_tar will\r\nkeep the current permissions on a file unless the user specifies a mode.\r\n\r\nThis fixes #2925.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lightyang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4304", "title": "support action env in runfiles generation, cpp compile and cpp link", "body": "So that we can pass in LIBRARY_PATH, etc.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "StephenAmar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4293", "title": "Allow @Ignore on junit test classes", "body": "Currently a test class annotated with `@Ignore` will cause the test\nrunner to fail with\n\n```\nException in thread \"main\" java.lang.IllegalArgumentException: Top test must be a suite\n\tat com.google.testing.junit.runner.junit4.JUnit4TestModelBuilder.get(JUnit4TestModelBuilder.java:53)\n```\n\nThis change treats classes with no tests (either no @Test annotations or\n@Ignore at class level) as an empty test suite. The main motivation\nbehind this is allowing an entire test class to be ignored (e.g. to\nquickly deal with a flaky test) without having to modify the BUILD file.\nThis is desirable in order to reduce the likelihood that a developer\nforgets to update the BUILD file when removing the `@Ignore` annotation.\n\nThis pull request overrides the previous pull request\nhttps://github.com/bazelbuild/bazel/pull/4073", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akira-baruah": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4253", "title": "Give the Bazel server process a more appropriate name", "body": "See #4227.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3855", "title": "Integrate abseil-py to replace deprecated gflags with absl.flags", "body": "Fixes #3816 (Python 3 incompatibility issue). May also help address:\r\n* #1580 \r\n* #3871 \r\n* #3872 \r\n* #4097 \r\n* bazelbuild/rules_docker#57\r\n\r\nAs of version 3.1.1, [python-gflags](https://pypi.python.org/pypi/python-gflags) has been marked obsolete, preferring the `flags` subpackage of [absl-py](https://pypi.python.org/pypi/absl-py/0.1.1) (a.k.a. [abseil-py](https://github.com/abseil/abseil-py)) as a replacement.\r\n\r\nI've followed existing convention and placed all source files from the `absl-py` PyPI tarball inside `third_party/py/abseil/` and subsequently removed the existing `third_party/py/gflags/` package.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3671", "title": "Add -v, --version flag", "body": "Attempts to resolve issue #3599 by adding conventional `-v` and `--version` flags to the Bazel client, calling `bazel version` under the hood.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hchauvin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4243", "title": "sha256 python tool: stream instead of reading whole file beforehand", "body": "This is a rather small change to a Python tool used to produce a SHA256 hash.  Currently, the whole file is loaded in memory before computing the hash, which causes problem when large files are processed.  For instance, github.com/bazelbuild/rules_docker uses it to compute the hash of Docker images, which can be multiple GB in size.  This PR avoids the tool to cause issues in a limited-memory environment.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abergmeier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4210", "title": "Enable override of cc tools", "body": "~~For every tool, there is a corresponding environment variable, which\r\noverrides platform resolution and defaults.~~", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4180", "title": "Apply % encoding to CPLUS_INCLUDE_PATH.", "body": "As a result, `%` and `:` from now on need to be escaped.\r\nErrors will be shown when unescaped characters are detected.\r\nIt silently breaks if there is a `%:` anywhere in CPLUS_INCLUDE_PATH.\r\nWith proper encoding this needs to be `%%:` now.\r\n\r\nChanges:\r\n- Reverse `escape_string` with `unescape_string`\r\n- Proper escaping can be checked with `get_escaping_error` (with returned error being None)\r\n- Split of encoded string with `split_escaped_by_sep`\r\n- Add tests for all latest macros", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4123", "title": "Enable override linker flags", "body": "Not everyone wants to link with stdc++. Enable overriding standard link flags with LINK_FLAGS.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4121", "title": "Enable internal C++ compiler path", "body": "Enable overriding path to C++ compiler without having to go through `which` validation.\r\nIntroduces a new `BAZEL_CC` environment variable, which gets evaluated before `CC`.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "j3parker": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4088", "title": "Improve Windows error when arg list is too long ", "body": "CreateProcess has a limit of 32768 for its lpCommandLine argument.\r\nCurrently Bazel will emit an error about a parameter to CreateProcess\r\nbeing incorrect if we exceed that. This change makes it print a more\r\ninformative error message (but still fail.)\r\n\r\n---\r\n\r\nThis \"fixes\" #4083. I don't think there is anything more Bazel could do here (creating Windows-compatible build rules is just going to be a bit tough in general, I think.)\r\n\r\n---\r\n\r\nI'm not super happy about this: the error message is a little weird because this may not be the result of an action. It's easiest to put the check here because 1) it's platform specific 2) the length calculation depends on things like quoting which are done in here.\r\n\r\nI opted to keep this `IOException` because it's not something I expect is a common scenario and this involves the least plumbing. Objections? (I'm not a Java person myself, not familiar with the idioms.)\r\n\r\n---\r\n\r\nI haven't tested this at all. I haven't got Bazel building on Windows yet (this builds on Linux though, heh.) I'm not sure this is even the right spot for the change :) **I'll confirm, though**. In particular I need to check that the arithmetic is correct.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikelikespie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4064", "title": "Adding toolchain support for j2objc protos", "body": "Ran into an issue where it wasn't possible to add protos to blacklist for j2objc toolchain and was getting duplicate symbols for the descriptor protos.\r\n\r\nThis change should make it consistent with the other proto rules which use a toolchain. Was able to remove bespoke and uncustomizable proto blacklist for j2objc.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/4058", "title": "Fixing issue with external j2objc protos", "body": "The output files are created without a repository, but the expected\r\nfilenames have them\r\n\r\nThis resolves issues when having a proto_library from an external build\r\nfile.\r\n\r\nThis seems to be a regression, so maybe should go into the 0.8.0 branch?\r\n\r\nNote: Work at Square and we have a signed CLA with google\r\n\r\n\r\nNote, without this fix we get errors like\r\n\r\n```\r\nERROR: /private/var/tmp/_bazel_lewis/4a25cfc2b9b758043413ac58525ef6b4/external/AllProtos/BUILD.bazel:27:1: output 'external/AllProtos/squareup/objc/objc.j2objc.pb.m' was not created\r\nERROR: /private/var/tmp/_bazel_lewis/4a25cfc2b9b758043413ac58525ef6b4/external/AllProtos/BUILD.bazel:27:1: output 'external/AllProtos/squareup/objc/objc.j2objc.pb.h' was not created\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onponomarev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3929", "title": "Fixed building with a custom toolchain fails on OS X #3859", "body": "cc-compiler-darwin depends on osx_wrapper and we should refer to it in dependencies. Otherwise only standalone builds will work.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "treuherz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3850", "title": "Make pkg defs Python 2/3 compatible", "body": "Use BytesIO instead of StringIO, change strings to bytes throughout the\r\narchiving code. Needed to import from Six in a couple of places.\r\n\r\nAs discussed in #1580 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jerrymarino": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3712", "title": "Implicit HeaderMaps", "body": "Request for feedback on an implementation of C++ HeaderMaps in Bazel.\r\n\r\nA HeaderMap is a data structure that allows the compiler to lookup included\r\nheaders in constant time.\r\n\r\nTraditionally, the compiler has to parse a large string of `iquote` includes,\r\nand then search these directories for a given header. This is slow for many\r\nreasons.\r\n\r\nThe protocol of HeaderMap is implemented within compilers. Please find the\r\nLexer implementation in Clang.\r\nhttps://clang.llvm.org/doxygen/HeaderMapTypes_8h.html\r\nhttps://clang.llvm.org/doxygen/HeaderMap_8cpp_source.html\r\n\r\nUse case:\r\n\r\nI'm seeing a massive increase in build performance by using this. It cut my\r\nclean build time in half.\r\n\r\nPerformance data:\r\n\r\nBuild time before HeaderMap:\r\n```\r\nTarget //Pinterest/iOS/App:PinterestDevelopment up-to-date:\r\nbazel-bin/Pinterest/iOS/App/PinterestDevelopment.ipa\r\n____Elapsed time: 373.588s, Critical Path: 18.86s\r\n```\r\n\r\nBuild time after header maps on the entire project:\r\n```\r\nTarget //Pinterest/iOS/App:PinterestDevelopment up-to-date:\r\nbazel-bin/Pinterest/iOS/App/PinterestDevelopment.ipa\r\n____Elapsed time: 188.971s, Critical Path: 17.11s\r\n```\r\n\r\nAdditionally, this solves the problem of having namespaced headers which is used\r\nin CocoaPods all over. Using a namespace makes includes more clear since it is\r\neasier for the user to distinguish where the header was derived.\r\n\r\nImplementation:\r\n\r\nAt the ObjC level, headermaps are created with a namespace of the given target.\r\nIn `objc_library` it is possible for the user to override the value of the\r\nnamespace via the new attribute, `header_namespace`.\r\n\r\nBy using 2 headermaps the headersearchs are most efficient: a headermap for the\r\ncurrent target, and a header map with namespaced includes.\r\n\r\nUsers can include headers from ObjC targets in the convention of\r\n`Namespace/Header.h`. Projects that don't use namespacing should see benefits as\r\nwell: includes of the form `Header.h` will be read from the headermap.\r\n\r\n`HeaderMapInfo` contains all of the transitive info for dependent header maps,\r\nand is merged together into a single map. This yields much better performance\r\nthan multiple headermaps.\r\n\r\nThis is my first PR to the Bazel repo, so any suggestions or feedback is greatly\r\nappreciated!\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "werkt": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/3448", "title": "Confer outputs arity implicitly for list/singular", "body": "Multiple outputs, expanded through placeholder specification of list\r\nattributes, should be conveyed to outputs struct definition unmodified.\r\nPresumed singleton extraction from implicit outputs subsystem has been\r\nreworked, and tests of singular/list behavior have been updated.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srikalyan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/2791", "title": "Added support to expose imports for python to Skylark.", "body": "Fixes #2617. Please let me know if you need anything else.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ulfjack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46194680", "body": "How about this?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46194680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/58003349", "body": "We can't currently accept pull requests, I'm afraid. I've patched this into our internal repo.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/58003349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259271", "body": "We're unfortunately not yet setup to accept pull requests - we currently do all releases from an internal repository. Also, to contribute, you'll have to sign Google's CLA.\n\nhttps://cla.developers.google.com/about/google-individual\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64262831", "body": "Cool. I'll talk to the others on the team to see if we can prioritize our\nability to accept patches.\n\nOn Mon Nov 24 2014 at 9:34:46 PM Jake Wharton notifications@github.com\nwrote:\n\n> Ok. I have both an individual and corporate CLA signature (Square) in\n> place for the future.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/pull/8#issuecomment-64259520.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64262831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82596944", "body": "Uhm, works for me. I'm at a loss what could cause this. It seems like the most likely explanation is that the symbols aren't there. I'm using homebrew on this machine, so the output may look different:\n\n$ ls fromhost/\nBUILD       archive.h   archive_entry.h empty.c     libarchive.a\n\n$ ls -l fromhost/libarchive.a \n-r--r--r--  1 ulfjack  5000  965808 Mar 17 21:40 fromhost/libarchive.a\n\n$ nm fromhost/libarchive.a | grep \"_archive_read_close\"\n0000000000000ca1 T ___archive_read_close_filters\n0000000000002b88 S ___archive_read_close_filters.eh\n0000000000001d54 t __archive_read_close\n0000000000002f40 s __archive_read_close.eh\n                 U _archive_read_close\n                 U ___archive_read_close_filters\n0000000000000deb t __archive_read_close\n0000000000003298 s __archive_read_close.eh\n0000000000000044 T _archive_read_close\n00000000000004a8 S _archive_read_close.eh\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82596944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10866369", "body": "Why do you want to package these additional files? I'd rather have less in the bazel binary than more. Also, it might be easier to use gerrit (easier for us to comment on changes).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10866369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kchodorow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46686832", "body": "It's already there in the instructions:\n\n$ touch tools/genrule/genrule-setup.sh\n\n  Create tools/genrule/BUILD and add the following to it:\n\n```\n  exports_files([\n      \"genrule-setup.sh\",\n  ])\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46686832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46700508", "body": "@hanwen Done.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46700508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82604676", "body": "I've reproduced, looking into it...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82604676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82608697", "body": "This is a byproduct of any extremely hacky thing we're doing in compile.sh.  If you delete the file fromhost/BUILD and re-run compile.sh, it should work.\n\nI'll work on fixing the compile script.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82608697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83045942", "body": "For future reference, this should now be fixed in the compile script, too (fixed by https://github.com/google/bazel/commit/bdc24960f552886126cb03809ddd0de31a3ddc01).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83045942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85584393", "body": "Thanks, should all be fixed.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85584393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85587303", "body": "Thanks, adding it to the install reqs.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85587303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85588225", "body": "Can you be more specific?  \"I want to see an app that that has... at least x java_\\* rules... can serve a webpage... is a mobile app... has external dependencies... whatever?\"  An example program that you think is about right?  (e.g., a todo list? libgdx?)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85588225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85622985", "body": "It looks like head might not support the -n1 format in Yosemite?  Can you try running:\n\n```\n$ head --help\n```\n\nand paste the output here?  (Please paste the text, not a screenshot, if possible.)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85622985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85623478", "body": "What OS are on you on?  Did you follow the [install instructions](http://bazel.io/docs/install.html) for downloading libarchive?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85623478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624389", "body": "Thanks, correct links are https://github.com/google/bazel/blob/master/tools/build_rules/py_rules.bzl and https://github.com/google/bazel/tree/master/examples/py.  I'll update the FAQ.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11339787", "body": "I'd like it to be mandatory eventually, but I agree with you for now.  I'm working on a tool to generate a WORKSPACE file from a pom.xml, once that's available it seems reasonable to flip this to mandatory.  I'll remove the `mandatory()` on Tuesday.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11339787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11408764", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11408764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15599825", "body": "It is, indeed, different internally.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15599825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15747664", "body": "Good catch!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15747664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766182", "body": "Please change to \"# support\" (1 space between # and the comment).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766213", "body": "//tools/build_defs/scala/test/...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/52766213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hanwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46693426", "body": "I think it's better to have under example/ or test/ subdir in the master branch, then the tree is self-contained.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/46693426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15344543", "body": "Can you open a discussion on the list instead? Thanks!\n\nOn Tue, Dec 8, 2015 at 9:19 PM, Mickey Reiss notifications@github.com\nwrote:\n\n> @hanwen https://github.com/hanwen Can you share context as to why\n> jvm_flags does not support $(location)? Am I mistaken in that\n> understanding?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bazelbuild/bazel/commit/d08b27fa9701fecfdb69e1b0d1ac2459efc2129b#commitcomment-14857491\n> .\n## \n\nHan-Wen Nienhuys\nGoogle Munich\nhanwen@google.com\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15344543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "illicitonion": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413593", "body": "With these changes I can compile and run blaze info:\n\n$ ./compile.sh \nPROTOC src/main/protobuf/build.proto\nPROTOC src/main/protobuf/extra_actions.proto\nPROTOC src/main/protobuf/testing_api.proto\nJAVAC src/main/java/**/_.java\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:19: warning: Signal is internal proprietary API and may be removed in a future release\nimport sun.misc.Signal;\n               ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:20: warning: SignalHandler is internal proprietary API and may be removed in a future release\nimport sun.misc.SignalHandler;\n               ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:32: warning: Signal is internal proprietary API and may be removed in a future release\n  private static final Signal SIGINT = new Signal(\"INT\");\n                       ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:32: warning: Signal is internal proprietary API and may be removed in a future release\n  private static final Signal SIGINT = new Signal(\"INT\");\n                                           ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:34: warning: SignalHandler is internal proprietary API and may be removed in a future release\n  private SignalHandler oldHandler;\n          ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:42: warning: SignalHandler is internal proprietary API and may be removed in a future release\n    this.oldHandler = Signal.handle(SIGINT, new SignalHandler() {\n                                                ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:44: warning: Signal is internal proprietary API and may be removed in a future release\n        public void handle(Signal signal) {\n                           ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:42: warning: Signal is internal proprietary API and may be removed in a future release\n    this.oldHandler = Signal.handle(SIGINT, new SignalHandler() {\n                      ^\nsrc/main/java/com/google/devtools/build/lib/server/signal/InterruptSignalHandler.java:55: warning: Signal is internal proprietary API and may be removed in a future release\n    Signal.handle(SIGINT, oldHandler);\n    ^\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n9 warnings\nUNZIP third_party/{guava,joda-time,jsr305,protobuf}/_.jar\nJAR libblaze.jar\nJAVAC src/test/java/**/*.java\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nCC src/main/cpp/blaze_startup_options.cc\nCC src/main/cpp/blaze_startup_options_common.cc\nCC src/main/cpp/blaze_util.cc\nCC src/main/cpp/blaze_util_darwin.cc\nCC src/main/cpp/blaze.cc\nsrc/main/cpp/blaze.cc:452:1: warning: control may reach end of non-void function [-Wreturn-type]\n}\n^\nsrc/main/cpp/blaze.cc:520:1: warning: control may reach end of non-void function [-Wreturn-type]\n}\n^\nsrc/main/cpp/blaze.cc:603:1: warning: control may reach end of non-void function [-Wreturn-type]\n}\n^\n3 warnings generated.\nCC src/main/cpp/option_processor.cc\nCC src/main/cpp/util/port.cc\nCC src/main/cpp/util/strings.cc\nCC src/main/cpp/util/file.cc\nCC src/main/cpp/util/md5.cc\nCC src/main/cpp/util/numbers.cc\nLD client\nCC src/main/native/localsocket.cc\nCC src/main/native/process.cc\nCC src/main/native/unix_jni.cc\nsrc/main/native/unix_jni.cc:417:36: warning: 'stat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::stat64, true);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:380:5: note: 'stat64' declared here\nint     stat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\nsrc/main/native/unix_jni.cc:430:36: warning: 'lstat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::lstat64, true);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:379:5: note: 'lstat64' declared here\nint     lstat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\nsrc/main/native/unix_jni.cc:442:36: warning: 'stat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::stat64, false);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:380:5: note: 'stat64' declared here\nint     stat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\nsrc/main/native/unix_jni.cc:454:36: warning: 'lstat64' is deprecated: first deprecated in OS X 10.6 [-Wdeprecated-declarations]\n  return ::StatCommon(env, path, ::lstat64, false);\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/stat.h:379:5: note: 'lstat64' declared here\nint     lstat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);\n        ^\n4 warnings generated.\nCC src/main/native/unix_jni_darwin.cc\nCC src/main/cpp/util/md5.cc\nLD libunix.dylib\nCC build-runfiles\nCC process-wrapper\nclang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated\nupdating: libblaze.jar (deflated 12%)\nupdating: libunix.dylib (deflated 67%)\nupdating: build-runfiles (deflated 69%)\nupdating: process-wrapper (deflated 77%)\nupdating: alarm (stored 0%)\nupdating: client_info (stored 0%)\nupdating: install_base_key (stored 0%)\n\n$ /Users/danielwh/wcs/bazel/output/bazel --host_javabase=$(/usr/libexec/java_home) info\nExtracting Blaze installation...\nJun 27, 2014 8:48:39 PM com.google.devtools.build.lib.blaze.BlazeRuntime main\nINFO: Starting Blaze server with args [--batch, --install_base=/var/tmp/_blaze_danielwh/install/d593fd674b72cdd2f724ed63faf4032d, --output_base=/private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf, --option_sources=host_Ujavabase:, info, --startup_time=1403916519159, --extract_data_time=49, --binary_path=/Users/danielwh/wcs/bazel/output/bazel, --isatty=1, --terminal_columns=202, ...some-vars-removed..., --client_cwd=/private/tmp/google3]\nJun 27, 2014 8:48:39 PM com.google.devtools.build.lib.blaze.BlazeRuntime setupLogging\nINFO: Log level: INFO\nblaze-bin: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out/fastbuild/bin\nblaze-genfiles: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out/fastbuild/genfiles\nblaze-testlogs: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out/fastbuild/testlogs\ncommand_log: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/command.log\ncommitted-heap-size: 262MB\nexecution_root: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3\ngc-count: 2\ngc-time: 42ms\ninstall_base: /var/tmp/_blaze_danielwh/install/d593fd674b72cdd2f724ed63faf4032d\nmax-heap-size: 4008MB\nmessage_log: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/message.log\noutput_base: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf\noutput_path: /private/var/tmp/_blaze_danielwh/fba9439d1ee97f86a37db961c5cefbbf/google3/blaze-out\npackage_path: %workspace%:%workspace%/../READONLY/google3\nrelease: development version\nserver_pid: 18223\nused-heap-size: 4401KB\nworkspace: /private/tmp/google3\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413975", "body": "And, creating a fake tools/genrule/genrule-setup.sh I can run genrules :)\n\n$ /Users/danielwh/wcs/bazel/output/bazel --host_javabase=$(/usr/libexec/java_home) build //p:gr\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.blaze.BlazeRuntime main\nINFO: Starting Blaze server with args [...]\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.blaze.BlazeRuntime setupLogging\nINFO: Log level: INFO\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.buildtool.BuildTool buildTargets\nINFO: Build identifier: ab96f790-f9f4-4a97-adb9-a75c0e2cfdfd\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.pkgcache.LoadingPhaseRunner execute\nINFO: Starting pattern evaluation\nINFO: Loading...\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.pkgcache.LoadingPhaseRunner doLoadingPhase\nINFO: Loading package: tools/genrule\nJun 27, 2014 9:01:37 PM com.google.devtools.build.lib.pkgcache.LoadingPhaseRunner doLoadingPhase\nINFO: Loading phase finished\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.BuildTool buildTargets\nINFO: Loading complete.  Analyzing...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.view.BuildView update\nINFO: Starting analysis\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.view.BuildView update\nINFO: Found 1 target...\nINFO: Building...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.actions.LocalHostCapacity disableProcFsUse\nWARNING: Unable to read system load or capacity\njava.io.FileNotFoundException: /proc/cpuinfo (No such file or directory)\n    at java.io.FileInputStream.open(Native Method)\n    at java.io.FileInputStream.<init>(FileInputStream.java:146)\n    at com.google.common.io.Files$FileByteSource.openStream(Files.java:126)\n    at com.google.common.io.Files$FileByteSource.openStream(Files.java:116)\n    at com.google.common.io.ByteSource$AsCharSource.openStream(ByteSource.java:434)\n    at com.google.common.io.CharSource.read(CharSource.java:161)\n    at com.google.common.io.Files.toString(Files.java:367)\n    at com.google.devtools.build.lib.actions.LocalHostCapacity.readContent(LocalHostCapacity.java:290)\n    at com.google.devtools.build.lib.actions.LocalHostCapacity.getLocalHostCapacity(LocalHostCapacity.java:246)\n    at com.google.devtools.build.lib.actions.LocalHostCapacity.getLocalHostCapacity(LocalHostCapacity.java:145)\n    at com.google.devtools.build.lib.buildtool.ExecutionTool.configureResourceManager(ExecutionTool.java:919)\n    at com.google.devtools.build.lib.buildtool.ExecutionTool.executeBuild(ExecutionTool.java:396)\n    at com.google.devtools.build.lib.buildtool.BuildTool.buildTargets(BuildTool.java:199)\n    at com.google.devtools.build.lib.buildtool.BuildTool.processRequest(BuildTool.java:261)\n    at com.google.devtools.build.lib.blaze.commands.BuildCommand.exec(BuildCommand.java:60)\n    at com.google.devtools.build.lib.blaze.BlazeCommandDispatcher.exec(BlazeCommandDispatcher.java:413)\n    at com.google.devtools.build.lib.blaze.BlazeRuntime.batchMain(BlazeRuntime.java:1177)\n    at com.google.devtools.build.lib.blaze.BlazeRuntime.main(BlazeRuntime.java:1040)\n    at com.google.devtools.build.lib.bazel.BazelMain.main(BazelMain.java:35)\n\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.actions.ParallelBuilder buildArtifactsHook\n[0%] Executing genrule //p:gr\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.actions.ParallelBuilder buildArtifactsHook\nINFO: Building complete.\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nINFO: saving action cache...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nINFO: action cache saved\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nINFO: saving metadata cache...\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.buildtool.ExecutionTool saveCaches\nTarget //p:gr up-to-date:\n  blaze-genfiles/p/o\nJun 27, 2014 9:01:38 PM com.google.devtools.build.lib.blaze.BuildSummaryStatsModule buildComplete\nINFO: Critical Path: 0.03s\n  0.00s TargetCompletionMiddleman _middlemen/target_Ucomplete_U_S_Sp_Cgr\n  0.02s Executing genrule //p:gr\nINFO: Elapsed time: 1403917297.674s, Incrementality: 41%, Critical Path: 0.03s\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/47413975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/48115215", "body": "@hanwen merged these changes in manually\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/48115215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "JakeWharton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259520", "body": "Ok. I have both an individual and corporate CLA signature (Square) in place for the future.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/64259520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wentao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82536898", "body": "Did another try with:\n- download libarchive from github\n- compile it by myself\n\nThen link against the customized libarchive with the following command \n\nexport CFLAGS=-I../libarchive/libarchive; export  LDFLAGS=-L../libarchive ; ./compile.sh\n\nStill failed...\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82536898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82623180", "body": "Yes, it works now! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/82623180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83048477", "body": "Cool, thanks!\n\nOn Wed, Mar 18, 2015 at 12:27 PM Kristina notifications@github.com wrote:\n\n> For future reference, this should now be fixed in the compile script, too\n> (fixed by bdc2496\n> https://github.com/google/bazel/commit/bdc24960f552886126cb03809ddd0de31a3ddc01\n> ).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/issues/9#issuecomment-83045942.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/83048477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "damienmg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85561326", "body": "Ok I don't know if we ever going to ship the current Eclipse support but having an IDE support is definitely something high on our list\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85561326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624927", "body": "It actually looks like you have a tool head that do a HEAD request on website. Is that a standard Yosemite or did you installed some other tools? What is `which head` outputting?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85624927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11026087", "body": "I don't really want to have them here. It is just a prototype and I don't think this will ever get merged. If it is merged I will go through gerrit. It is here to avoid having google code hosted under my personal name but I can move it to my personal copy of the repo.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11026087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207067", "body": "you have to change the java_toolchain (default one is declared in tools/jdk/BUILD) to add a `jvm_opts` attribute set to `[]` and that should work,\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207167", "body": "Well the location of the java_toolchain itself is over-writable with\n--java_toolchain\nOn Mon, Sep 14, 2015 at 10:34 AM kohlerm notifications@github.com wrote:\n\n> Ok, Thanks! I had hoped I could be overridden.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bazelbuild/bazel/commit/1fa163c42ee26a72c21c118ec820d677a431ee49#commitcomment-13207150\n> .\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358381", "body": "After thinking more, leave it for now.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358384", "body": "revert\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358420", "body": "revert, our style guide requires 2 empty lines between global def.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358427", "body": "oops mixed up with python styleguide, you can leave it as it is.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358432", "body": "revert\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358552", "body": "Don't depends on java being on the PATH, instead add dependency to //tools/defaults:jdk and to @bazel_tools//tools/jdk:java and use the latter as your java binary here.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "laurentlb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85594929", "body": "Thanks! We fixed it, it will be live in a minute.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85594929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dgageot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85625711", "body": "So you basically told me to RTFM :-)\nGuess what, it fixes the problem!\nThanks a lot\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85625711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cgrushko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85640371", "body": "I probably posted this prematurely, but basically, I'd like to answer a question that's going to come up often: \"why should I try Bazel? what does it give me that I don't get from Gradle or xcodebuild?\"\n\nA single build-system which builds my iOS app, my backend (written in Java) and my Android app sounds like an awesome advantage, and I wish we could showcase it :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85640371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "leemcd56": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85644322", "body": "@kchodorow \nbash-3.2$ head --help\nUnknown option: help\nUsage: head [-options] <url>...\n    -m <method>   use method for the request (default is 'HEAD')\n    -f            make request even if head believes method is illegal\n    -b <base>     Use the specified URL as base\n    -t <timeout>  Set timeout value\n    -i <time>     Set the If-Modified-Since header on the request\n    -c <conttype> use this content-type for POST, PUT, CHECKIN\n    -a            Use text mode for content I/O\n    -p <proxyurl> use this as a proxy\n    -P            don't load proxy settings from environment\n    -H <header>   send this HTTP header (you can specify several)\n\n```\n-u            Display method and URL before any response\n-U            Display request headers (implies -u)\n-s            Display response status code\n-S            Display response status chain\n-e            Display response headers\n-d            Do not display content\n-o <format>   Process HTML content in various ways\n\n-v            Show program version\n-h            Print this message\n\n-x            Extra debugging output\n```\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/issues/comments/85644322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DomT4": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388754", "body": "This is actually likely to break compile. `brew --prefix $FORMULA` leads to the `opt_prefix`, in this case, presuming you keep Homebrew in `/usr/local` -  `/usr/local/opt/libarchive/`. Running the full command makes this happen: \n\n`cannot access /usr/local/opt/libarchive/Cellar/libarchive/*/include/archive.h: No such file or directory`.\n\nYou want to change it to just `$(ls -1 $(brew --prefix libarchive)/include/archive.h | head -n1)` - Obviously with the `/dev/null` calls still in place.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388785", "body": "Ah! I hadn't updated my local git clone yet, you've already fixed the above comment in https://github.com/google/bazel/commit/9a0dc1b222269c527942749c2990efabba38fb9b. Apologies :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10388785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lberki": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10389094", "body": "Indeed. I did not really think that through :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/10389094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426417", "body": "(facepalm)\n\nThat's whay whe have the --python2_path command line argument. We should\nhave some sort of detection, but for the time being, this is the best we\ncan offer.\n\nOn Wed, Jul 29, 2015 at 7:22 PM, Steven Dee notifications@github.com\nwrote:\n\n> Although of course Arch went crazy and made python point to python3. :-p\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/bazel/commit/a18964096887e592a14d9553f776e70ce9495131#commitcomment-12426295\n> .\n## \n\nLuk\u00e1cs T. Berki | Software Engineer | lberki@google.com |\n\nGoogle Germany GmbH | Dienerstrasse 12 | 80331 M\u00fcnchen | Germany |\nGesch\u00e4ftsf\u00fchrer:\nGraham Law, Christine Elizabeth Flores | Registergericht und -nummer:\nHamburg, HRB 86891\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/13811952", "body": "Not eloquent enough. Try harder.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/13811952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ademuri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11338019", "body": "Does the sha1 need to be mandatory? Without transitive dependency resolution, this is kind of annoying.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11338019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hosaka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11340775", "body": "Same issue happens when _JAVA_OPTIONS are set.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11340775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "michajlo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11480224", "body": "I think this may causing #224. It looks like AttributeMap#has() checks if a rule has an attribute but not necessarily that any value was specified for it.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/11480224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mrdomino": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426295", "body": "Although of course Arch went crazy and made python point to python3. :-p\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426526", "body": "No complaints; I'm not using Arch for anything serious atm anyway.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/12426526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15559735", "body": "This is not portable. On my current vendored bazel setup (which relies on manual `PATH` editing), I need to have a `linux-x86_64/bazel` and `darwin-x86_64/bazel` (the latter for OS X workstations and build slaves.)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15559735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15567494", "body": "Ah, good idea. So this script is bazel on your path, and then tools/bazel is a script in your repo that redirects to the appropriate bazel-real. Cool.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15567494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kohlerm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207007", "body": "it seems -client is always set regardless of what I specify in \n--host_jvm_args, am I'm right here?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207044", "body": "I still could not figure out how to run bazel on a VM that does not support -client.\nRunning  \nstrace bin/bazel  --host_jvm_args=\"-server\"\nI can see that the -server option is picked up. \n\nexecve(\"/usr/java/latest/bin/java\", [\"bazel()\", \"-client\", \"-Xms256m\", \"-XX:NewRatio=4\", \"-XX:+HeapDumpOnOutOfMemoryError\", \"-XX:HeapDumpPath=/sapmnt/home1/d\"..., \"-Xverify:none\", \"-Djava.library.path=/sapmnt/home\"..., \"-Dfile.encoding=ISO-8859-1\", \"-server\", \"-jar\", \"/sapmnt/home1/d041705/.cache/baz\"..., \"--batch\", \"--install_base=/sapmnt/home1/d04\"..., \"--install_md5=fc73563854b9d52217\"..., \"--output_base=/sapmnt/home1/d041\"..., ...], [/\\* 103 vars */]) = 0\n\nbut -client is still used\n\nwhich leads to an error on my vm (-client not supported)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207150", "body": "Ok, Thanks! I had hoped I could   be overridden. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13207150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pfn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13226479", "body": "How does this work pre-4.4? As I understand it, android.app.ResourcesManager is new for android-4.4. There are no obvious try/catch that prevent this from crashing when running on a pre-4.4 device.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13226479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13241091", "body": "nevermind, I guess this is controlled build-side: don't deploy external resources if device version level is <4.4\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/13241091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "klaasb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14279588", "body": "Sorry for that, must've slipped through.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14279588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mickeyreiss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14857491", "body": "@hanwen Can you share context as to why `jvm_flags` does not support `$(location)`? Am I mistaken in that understanding?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/14857491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "bsilver8192": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15566012", "body": "I was thinking the logic for running different binaries for different platforms etc would live in your tools/bazel (eg have a shell script that looks at uname, and then execs the appropriate binary). Seems more flexible than hard-coding a limited subset of the information from the environment into a path or something.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15566012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "tfarina": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15598226", "body": "Does the internal repo has a different version of this function? Otherwise you don't need to pass GlobalVariables to it, you don't use |globals| here.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/15598226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "shahms": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16769546", "body": "This patch introduces a race condition between finding the directories to mount and actually mounting them such that it will non-deterministically break builds if a directory is removed before being mounted.  There exist nsscache tools which add a temporary directory to /etc, validate the contents and then move them to a permanent location.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/comments/16769546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cgruber": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084390", "body": "This is maybe contentious, but I suspect that you will get people filing proposals for ideas in github issues, and it is not an unreasonable forum for such discussion. \n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084440", "body": "This is a recommendation, which is to permit non-code changes via pull-requests, to reduce impediments to contributing documentation fixes/changes. \n\n... like this one. :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/27084440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "davidzchen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043262", "body": "Why this change? The include path is relative to the root of the workspace.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043292", "body": "Have you tested this? The `:hello-world` target is in the `//examples/cpp` package. There is no `:hello-world` target in the root BUILD file.\n\nIf you want to build `:hello-world` from inside the `examples/cpp` directory, then the correct command would be `bazel build :hello-world`, and Bazel would look for a target called `:hello-world` in the BUILD file in the current directory. Labels beginning with `//` are absolute paths relative to the workspace root.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/49043292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "johnynek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184308", "body": "are these needed? It would be nice to default to discovering all the suites in the jar and running them. That seems like the preferred way to go. If you don't want to run a suite, it should be in its own target, and just not test that target.\n\nOr at least, that's my view.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184432", "body": "I think it is better to download rather than add the jar to the git repo. This can be done by adding to the WORKSPACE.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184457", "body": "same comment about it being better to not check in the jar.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46184457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206193", "body": "I looked at the dependencies here:\n\nhttp://central.maven.org/maven2/org/scalatest/scalatest_2.11/2.2.4/scalatest_2.11-2.2.4.pom\n\nIt looks like everything other than scala is optional or test. This does mean using generator/scalacheck style won't work here, but I think that's okay for a first draft.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206319", "body": "I have this:\nhttps://bazel-review.googlesource.com/#/c/2410/1\n\nwhich pulls scala 2.11 and gets the scalac and scalalib there. It would be nice to use the jar provided there once both this and that are merged.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206361", "body": "I didn't find the email thread. Can you link here for completeness?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46722035", "body": "+1 to something basic that works is better than the current state. We can definitely iterate.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46722035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50303511", "body": "these should no longer be here right?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/50303511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dinowernli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204594", "body": "Sounds good. Added a download instead.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204617", "body": "Added a download here as well :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46204617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46205034", "body": "I agree that it would be nice. As discussed on the email thread, the big challenge is that, in Scala, the test suite name cannot easily be inferred from the path (because packages are independent of the file sytem). So I see two options:\n- Add a custom test runner (written in Scala/Java) which wraps the usual scalatest runner and does this discovery at runtime.\n- Specify the suites by hand.\n\nI went for the second option for now because the first one seemed controversial on the thread. Also, supporting the second one seems like a good idea regardless of whether we end up adding the first one in addition.\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46205034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206561", "body": "Certainly, here it is: https://groups.google.com/forum/#!msg/bazel-dev/5Kbbwr11XOA/znTY-H1DBgAJ\n\nIt's also in the top-level description of the change but maybe it's more visible here inline.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206756", "body": "Oh, nice! Specifying the scala version to use in inside the workspace rather than a symlink sounds great.\n\n+1 regarding the plan once both are merged.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46206756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46207045", "body": "Yup, I figured if we need some of the optionals in there, we can still add them manually when the need comes up.\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46207045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46535607", "body": "Thanks Orr, responded on the main thread. Would it make sense to get this PR in as a \"basic\" way of specifying tests and possibly add more runners in the future?\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46535607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358489", "body": "Ack :)\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/51358489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "orrsella": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46418228", "body": "@johnynek @dinowernli Added a comment to the thread, which I think basically implements what @johnynek said above. Would love to hear what you think (preferably in the thread?).\n", "reactions": {"url": "https://api.github.com/repos/bazelbuild/bazel/pulls/comments/46418228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}