{"_default": {"1": {"firefisher": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/120", "title": "Handling 500+ DataAssetType Values", "body": "We are receiving messages from a 3rd party which contain DataAssetTypes of 501, 502, etc. The 500+ range is defined in the openrtb spec for \"exchange specific usage\".\r\n\r\nreadBidRequests() fails to process messages containing these data types (stacktrace below). \r\n\r\nI believe enum's cannot be extended in protobuf. What would be the best way to allow processing of these messages?\r\n\r\n```\r\ncom.google.protobuf.UninitializedMessageException: Message missing required fields: type\r\n\tat com.google.protobuf.AbstractMessage$Builder.newUninitializedMessageException(AbstractMessage.java:501)\r\n\tat com.google.openrtb.OpenRtb$NativeRequest$Asset$Data$Builder.build(OpenRtb.java)\r\n\tat com.google.openrtb.OpenRtb$NativeRequest$Asset$Builder.setData(OpenRtb.java)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readReqAssetField(OpenRtbNativeJsonReader.java:224)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readReqAsset(OpenRtbNativeJsonReader.java:199)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readNativeRequestField(OpenRtbNativeJsonReader.java:151)\r\n\tat com.google.openrtb.json.OpenRtbNativeJsonReader.readNativeRequest(OpenRtbNativeJsonReader.java:113)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readNativeField(OpenRtbJsonReader.java:410)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readNative(OpenRtbJsonReader.java:396)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readImpField(OpenRtbJsonReader.java:316)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readImp(OpenRtbJsonReader.java:294)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readBidRequestField(OpenRtbJsonReader.java:159)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readBidRequest(OpenRtbJsonReader.java:145)\r\n\tat com.google.openrtb.json.OpenRtbJsonReader.readBidRequest(OpenRtbJsonReader.java:126)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Fredrik-L": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/119", "title": "Wrong default value for deal auction type.", "body": "When invoking the getAt() method on a OpenRtb.BidRequest.Imp.Pmp.Deal object, that doesn't have that 'at' value set - the method defaults to OpenRtb.AuctionType.FIRST_PRICE.\r\n\r\nAccording to the OpenRTB specs, if should default to the BidRequest's auction type: \"Optional override of the overall auction type of the bid request\".\r\n\r\n(Which in turn defaults correctly to OpenRtb.AuctionType.SECOND_PRICE)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "haitui": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/113", "title": "build DSP", "body": "where can I learn how to build a DSP?", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mzgupta": {"issues": [{"url": "https://api.github.com/repos/google/openrtb/issues/109", "title": "Version Specific BidRequest Writers ", "body": "@opinali \r\nThis library does not provide version specific writer. I mean if I want to send RTB 2.3 BidRequest to DSP1 and RTB 2.4 BidRequest to DSP2, the what is the best way to do it ? ", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "opinali": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/openrtb/commits/28cc0f5857de10e3b3a4bbc9e47be520eb731568", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/af4cd1dec7b4e143b95b911ec6a28fb2f70d4b2c", "message": "[maven-release-plugin] prepare release 1.5.1"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3eb7919c2a8e1257f4a7e7df04e04b97c3ed768d", "message": "Merge pull request #118 from opinali/master\n\nProtobuf 3.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/cbe75b740a5c09ecf52ba0d4d8e73904be72eaa2", "message": "Update changelog"}, {"url": "https://api.github.com/repos/google/openrtb/commits/b57e8a09d7908e4112828796b138e8d82ef955f0", "message": "Protobuf 3.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/986773a60e76831d955719f4a63246df2efade91", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/3a45920d43aa58832d3a5ff35d0a790768b37099", "message": "[maven-release-plugin] prepare release 1.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/e5f5bfc0e6b2c238c946743646a6d8bc74df06ed", "message": "Merge pull request #117 from opinali/master\n\nOpenRTB Native 1.2"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2f81d0b78db23a5151af23951c251e8a638eb0b0", "message": "v1.5.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/8f553a9a8ed9f416263b412edf6787a74a576289", "message": "OpenRTB Native 1.2 reviews"}, {"url": "https://api.github.com/repos/google/openrtb/commits/739bba25df9b5f36a8990b49961fab2f9163a38a", "message": "OpenRTB Native 1.2, other proto updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/1bf1e4efd5dd914f4036210a0601afea7f271eec", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/88e86f38f28f230a773c2aaf1a14c7789b5664e2", "message": "[maven-release-plugin] prepare release 1.4.7"}, {"url": "https://api.github.com/repos/google/openrtb/commits/ed35eec002ba8e2da3855a83d9997c5cc4624954", "message": "Merge pull request #116 from opinali/master\n\nv1.4.7 Updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/14a734f776e0cb40a17e90b256e68cad316eb7e9", "message": "Updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/403018eae188d7543c75b8e58d62221e1fae5cba", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/757dd408f763f5fea6873cd100fe09631858d468", "message": "[maven-release-plugin] prepare release 1.4.6"}, {"url": "https://api.github.com/repos/google/openrtb/commits/6c62d9e524af7fd2ffe89971e8141b18688902ef", "message": "Merge pull request #115 from opinali/master\n\nProtobuf 3.4.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/268313b42f1829a1c0b6ae998b2de623bce50d3c", "message": "Protobuf 3.4.0"}, {"url": "https://api.github.com/repos/google/openrtb/commits/28de6b7186c74ce2065abd6bfb22912eb7a6ab81", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/fbcaae73c6368906d9448c489575f736ddbb1fd2", "message": "[maven-release-plugin] prepare release 1.4.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/623c97a7895befe687bc5fb6ecc4135f481c70b2", "message": "Merge pull request #114 from opinali/master\n\nChanges for v1.4.5"}, {"url": "https://api.github.com/repos/google/openrtb/commits/aaf7d204e012b359147f15608d8aae4fb54305df", "message": "Fix POM"}, {"url": "https://api.github.com/repos/google/openrtb/commits/00e94b232891b0880e5fac024f7fe537ae126912", "message": "Dependency updates"}, {"url": "https://api.github.com/repos/google/openrtb/commits/2f1e78df563f5879b899f6dfe489144ef9a840d9", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/google/openrtb/commits/d371fe69523cd85928172d120412e2c6d0ff22f6", "message": "[maven-release-plugin] prepare release 1.4.3"}, {"url": "https://api.github.com/repos/google/openrtb/commits/09ef66ff68bc9ca4678bdb065af01d4777710a80", "message": "Merge pull request #112 from opinali/master\n\nFix extension reader filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/32aa8a3418469d67cd0e73c17998748a98101494", "message": "Fix extension reader filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/4298d00f4298dd8015afdd76cec97567c8d8c97a", "message": "Fix extension reader filtering"}, {"url": "https://api.github.com/repos/google/openrtb/commits/17f2d28c7bd1ae5d0ebbf537b7dfabce5dc22496", "message": "[maven-release-plugin] prepare for next development iteration"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/62891837", "body": "Oops, good catch-fixed.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/62891837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65879611", "body": "I guess you're using this non-conforming JSON because some exchange uses that? There are some OpenRTB fields that were poorly specified and later changed/clarified, but I don't remember that Site.cat or Publisher.cat were among those.\n\nAnyway, I never worried to support uncompliant JSON and I'd expect a case like this to result in some error; but an infinite loop is not an acceptable failure mode. Let me try improve this.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65879611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65907427", "body": "I see you've got this sample JSON from a SpotXchange sample, I wonder if it's an obsolete or incorrect sample? Even if not, worst-case it's easy to modify the JSON serializer to handle the `cat` fields as scalar (I guess with CSV internally to allow multiple elements).\n\nDoing that without a fork is not very clean, e.g. you can extend `OpenRtbJsonReader` and override `readSite()`, but then you have to copy that entire method to only change the parsing code for one field. Same for the writer. I could refactor these methods in two pieces, allowing to override only a `readSiteFields()` method where you'd only handle one field and super-call for others. Will consider this as a future improvement.\n\nAlternatively, I could make the serializer \"smarter\", allowing a single value without `[]` in lieu of an array, but this is only trivial to implement for arrays of scalar values. If the array may contain objects, it's more complicated. On top of that I don't think it's a good idea to support what is effectively an uncompliant extension of OpenRTB... unless this kind of extension turns out to be common so people need to customize the serializer for multiple exchanges.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65907427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65911633", "body": "Fixed in commit 380f29b7fec31391d725fa2aaa463372e62e5eb8\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/65911633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66139360", "body": "Hum, that's painful... I was hoping that nobody would actually have messages with null values, even if they are valid in JSON (OpenRTB implementations are supposed to avoid redundancies like 'keywords: null' because it's good to make messages shorter)... it seems that was too optimistic.\n\nI think the only good solution here will be to change the reader so it detects `VALUE_NULL` tokens and skips them (option 2). Investigating this now.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66139360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66152037", "body": "Ok, I have implemented support for nulls, and also used the opportunity to make another pending refactoring that will make easier for people to customize the serialization of individual fields if necessary (see Issue 10). Can you check this at the fork https://github.com/opinali/openrtb, if it works for you I'll merge that here.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66152037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154700", "body": "Good, merged as commit d3204c81819faebad704531b2fff97a5c2a86fb1.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342132", "body": "@metaquanta thanks for the patch! I just wish we had discussed this before writing the code. The problem is that storing values as decimals is not really helpful unless values are manipulated as decimals everywhere in the application that uses the library; using decimals only for storage or in parse/format operations makes no difference if apps still have to call getters/setters that only use doubles. And of course we can't have a `BigDecimal` in the API because protobuf doesn't support any type that maps to `BigDecimal` or equivalent language-specific decimal types.\n\nI considered using a `string` field for these values, but that would result in a really inconvenient API, forcing every get/set call to perform a conversion. And this still wouldn't provide any advantage over doubles: today you can just write code like `BigDecimal bidfloor = new BigDecimal(imp.getBidfloor)`. The double field is precise enough to represent any price; it supports 15-17 significant decimal digits of mantissa, and more critically, for any numbers up to 15 digits roundtrip conversions between a string (or precise decimal type) and a double are guaranteed to always be exact. This means `double` is perfectly safe for storage and parsing/formatting of any normal value used in OpenRTB.\n\nThe above is for background; now specifically on your patch: you're changing the model's field types to `int64` (= Java's `long`), and changing their scale to micros (just like DoubleClick's native protocol). This is another way to solve the problem, but then it forces apps to always manipulate prices in micros instead of \"currency units\" (USD or whatever used by the request). Unfortunately this is even more inconvenient for users of the API; as an end-user myself, if I care about precise decimal arithmetics I'd rather make some explicit `double`/`BigDecimal` conversions than work with micros all the time.\n\nTechnically, OpenRTB defines only a wire protocol and we have some flexibility for API/language-binding design, see for example how this library uses booleans instead of 0/1 integers for flags; or how I have introduced an extended `admNative` field [native is still WIP]. But these are changes that make the API significantly more type-safe and easy to use. The `admNative` will also result in significant performance gain. Changing the price to micros is a step backward in usability. (Also an important breaking change, one I'd rather avoid at this time, this code already has significant usage...) Even the potential advantage of precision is highly questionable, because `double` is not only good enough for storage and conversions, it's good enough even for arithmetics, since the values we manipulate here leave lots of mantissa bits unused \u2013 you'd need a crapton of error propagation before you get a significant error (I doubt any SSP or other platform will consider digits below 1^-6). This is remarkably true for monetary values, which are typically only manipulated by simple operations like sums or multiplies, which have maximum precision (<= 1ulp) in any language or platform; few if any people should calculate bid prices with complex formulas full of transcendental operations that sometimes have several bits of error in some \"hard\" value ranges. And if anyone is doing that, they certainly can't use `long`: even `BigDecimal` would be a huge ordeal because in most mainstream languages \u2013 anything other than specialized stuff like Mathematica \u2013 the math libraries cannot perform any decent math with decimal types; anything as sophisticated as a square root forces you to step down to floating point anyway.\n\nHaving said all that, my only concern with the current, simple usage of `double` is in the serialization; for example it would be ugly (although not a real problem) if the library emits JSON like `price: \"1.2000000000000000000003\"` due to accumulation of errors in the last few bits. Ideally, (1) the code for deserialization should ignore anything after some specific limit like the sixth digit after the decimal point, (2) the code for serialization should make sure to only emit digits up to the same limit. I think Java's default behavior in `double`/`String` conversions will take care of (2) but I'm not sure at which digit, and it won't take care of (1) at all. We could use `BigDecimal` to solve these problems, but I think just the `DecimalFormat` API should be good enough for that and way more efficient.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71376401", "body": "Thanks for the understanding! I'm closing the request then, but keeping this in mind. Just curious if your current habit of using micros for everything comes from working with the DoubleClick protocol?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71376401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/73566329", "body": "Thanks! Merged.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/73566329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/88657195", "body": "Preliminary support implemented as planned in the 0.8.0 betas. Reopen this or file new bug for tracking future changes for proto3 syntax.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/88657195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/94542536", "body": "This documentation is not in sync anymore with the code if you get the latest code from master; but it should be right for the last release (0.8.0-beta4). The JSON extension API is changing indeed, when the next release is out (which will be soon and hopefully the final 0.8.0) the docs will be updated to match it; but let's keep this bug open as a reminder :)\n\nP.S.: You are right that this part of the API is difficult; one of the motivations for the changes I'm making now is to make it simpler and more type-safe.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/94542536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96506763", "body": "Hi Sam,\n\nThe latest changes have been finally released with the final 0.8.0, please\nuse that instead of master, as of today there are no additional changes in\nmaster and hopefully this will keep true for some time (and the next 0.8.x\nversions will be backwards-compatible, focused on fixes or minor stuff,\netc.).  Can't release snapshot jars to maven-central even if I wanted :) so\nif you need snapshots you always have to pull the sources and 'mvn install'.\n\nSample code are still a weak part of the project; it does't include proper\nsamples, OTOH it does have very high unit test coverage and you should find\ntest code that can sort of double as sample code for everything. For\nextensions, look here\nhttps://github.com/google/openrtb/tree/master/openrtb-core/src/test/protobuf\nand here\nhttps://github.com/google/openrtb/tree/master/openrtb-core/src/test/java/com/google/openrtb/json.\nBut it's another good point that the wiki uses an example that doesn't\nmatch any code in the project, ideally the docs should use code from some\nsample or even test code, adding that to my todo list.\n\nOn Sun, Apr 26, 2015 at 8:25 PM, Sam Bessalah notifications@github.com\nwrote:\n\n> Hi Osvaldo.\n> I have been trying to use the code on master, since it's the only one with\n> clear tests for handling protobuf extensions, but I can't seem to find the\n> 0.8.1-SNAPSHOTS on maven central. Are they published somewhere?\n> Also it would be nice for further improvement,,if you could provide an\n> example like in the Tests,based for example on your wiki, with the\n> \"SpaceAds\" example.\n> \n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/issues/28#issuecomment-96451520.\n\n## \n\nOsvaldo Doederlein | Software Engineer, Doubleclick Ad Exchange |\nopinali@google.com\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96506763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97270271", "body": "That's a good idea; the spec uses ints or strings everywhere for these things but we can always use a higher-level type like enum in the model and then translate in the JSON serializer. It seems the ContentCategory fields are the only ones that missed this improvement, will fix this next release.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97270271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97499331", "body": "Fix will be in 0.8.1 soon.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/97499331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102216347", "body": "There is no way to do that right now, but this is an improvement that was already being considered - not just ignoring unknown extensions, but ignoring any unknown field. We'll try to get this into the next update.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102216347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102819652", "body": "Adding support for non-standard fields is possible, just not very clean... you can fork the library and adding that field to the proto. Then it should also be easy to patch the JSON read/writer classes with support for this field. The problem then is continued merging to upstream, since we can't accept a change that adds uncompliant exchange-specific fields to the main library (even if it's tempting because we have the exact same problem internally at Google for interop with MoPub's protocol, and we do the same thing, adding the crtype field...). But it's not a lot of work either since the model and the JSON libs are pretty stable.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102819652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102838233", "body": "Final status on this: the next release will have a small fix in the classes `OpenRtb*JsonWriter` so you can write subclasses that extend field writing for regular fields. (This was already possible for `OpenRtb*JsonReader`.) This will make a new solution possible: keep the standard proto unchanged (no `crtype` field there), but create an extension for that, and subclass the writer class so it maps regular fields in the JSON into/from proper extension fields in the protobuf-based model. You may still consider the forking option simpler, but it will be nicer to have this alternative.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102838233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104267860", "body": "Thanks for the report, this definitely looks like a bug -- apparently the new unit tests that cover this stuff weren't good enough :( gonna fix this asap.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104267860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104298963", "body": "All fixed in master, can you test to confirm?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104298963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/23776131", "body": "Thanks for spotting this! I'll only ask for some improvements. :)\n\n1) Put a comment here explaining that we need this different code due to backwards compatibility with 2.2. (At some point in the future, maybe by 2.4 or whenever we don't have to care about 2.2 anymore, it would make sense to clean it up and revert to just `getIntValue()`.)\n\n2) This doesn't always work well because `getValueInt()` will silently return 0 if the field doesn't contain a parseable number. If this happens, `Context.valueOf(...)` will return null because there's no enumerated value for 0. and then, `content.setContext(...)` will throw `NullPointerException`. So we need to handle this better. I suggest just keep using `getIntValue()`, but put all code inside a try/catch for `JsonParseException` and just ignore this exception.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/23776131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216173", "body": "- typo: s/readKeywoards/readKeywords\n- this method can be static and it could also move to OpenRtbJsonUtils; in that case, also get a more generic name, like getStringOrArray?\n- Please add a javadoc to this method, explaining that this is specific to OpenRTB 2.2. (In 2.3 all these keywords fields have been clarified/fixed to be only strings with comma-separated values.) 2.2 is still recetn so I agree it's a good idea to have this backwards compatibility for now, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216398", "body": "I'd rather not have this case, for consistency with all other reads: if the token is not an array, then assume it's a string\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24216398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64451825", "body": "I want to always parse to `Native.requestNative`, it doesn't matter if the input is an object or a string, we never want the resulting proto to contain the native request as a JSON string that needs further parsing. The string field is treated as \"write-only\", it's useful in the writer because the user can set the value as JSON text, but the reader is biased for the object representation. It would be acceptable though to parse into `Native.request`, if the input is a string, as a non-default option that could be set in the factory, e.g. `setForceReadNativeAsObject(false)`.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64451825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64457559", "body": "We don't want to support any alternate names for this; notice that the library is strictly OpenRTB-conformant at the JSON level, there are no exceptions even for AdX extensions, they need to be provided in a separate library via extension plugins or overriding. So the idea we had here before is that the JSON field is always the same name, but we detect variations in the format. The current code assumes it's a string with escaped JSON so we parse that and only detect if it has the root `native` field; what you want to do now is improving the code here like this:\n\n```\n  case \"request\": {\n    OpenRtbNativeJsonReader nativeReader = factory().newNativeReader();\n      if (par.getCurrentToken() == JsonToken.VALUE_STRING) {\n        nativ.setRequestNative(nativeReader.readNativeRequest(new CharArrayReader(\n            par.getTextCharacters(), par.getTextOffset(), par.getTextLength())));\n      } else {\n        nativ.setRequestNative(nativeReader.readNativeRequest(par));\n      }\n    }\n    break;\n```\n\nIf in addition to that you want to support an alternate JSON field name for some exchanges that do that, this need to belong in a separate library or custom code.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64457559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64460820", "body": "Similar problem here; in this library we can support detection of multiple formats for `adm`, but we cannot have parsing of any non-standard field names. Notice that doing this in a separate library is easy: subclass this class, override only this method, have a similar `switch` that handles only the `adm_native` field, then the `default` makes a super-call. Also subclass the factory to override `newReader()`.\n\nOne thing that's different here is that I don't try to parse the JSON `adm` field to `Bid.admNative`, with automatic parsing of the embedded JSON like I did for the request. This is because the `adm` field (unfortunately) is not exclusive for native requests, it's also used for banner/video requests so it can contain HTML or VAST. That was a limitation planned to be fixed some day, so maybe this is a good opportunity to do that. I think this should work:\n- Current token is `START_OBJECT`: the easy case => can only be a child native response\n- Current token is `VALUE_STRING`: get the text like we already do now, but check if it starts with `{`, if it does then it should be a native JSON since neither HTML snippets nor VAST can start with this character, right? I don't like this kind of sniffing but I think it's reliable here.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64460820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64462091", "body": "Please avoid small refactored helpers like this unless it's invoked in more than one place, or potentially useful as an protected method that could be independently overridden. This class has a difficult balance between the large number of methods and the long `switch`/`case` inside each method, so I feel a \"dumber\" structure is the least evil, at least it makes easily to read and debug stuff linearly.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64462091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64463362", "body": "This seems to be a bugfix (the missing `nextToken()`), but please use `endObject()` in the condition, like:\n\n```\nif (rootNativeField && endObject(par)) {\n    par.nextToken();\n}\n```\n\nFor one thing, this can prevent a bug if there is no current token, which will happen if the JSON is broken and ends abruptly.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64463362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64503899", "body": "For new files, please fix indent size to 2 spaces, matching the rest.\nhttps://google.github.io/styleguide/javaguide.html#s4.2-block-indentation\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64503899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504085", "body": "Also the + operator goes after line break... may have other style violations too, the project needs to follow the Google Java style strictly. We have formatter configurations for IDE/s editors at https://github.com/google/styleguide\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504199", "body": "Thanks a lot for all this new test code! I see it seems to be real messages captured from exchanges; please make sure none of those messages contain any significant PII such as device IDs or non-anonymized IP addresses. Superficial check seems good :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504255", "body": "import the Logger type, instead of using qualified classname\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64504255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510351", "body": "indent in 3 lines, vertically aligning `?` and `:`\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510707", "body": "same as before / tiny single-use helper methods\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510757", "body": "no `final` for parameters or local variables unless necessary for inner classes \u2013 I used to like this myself, but not Google style... and obsolete with Java 8's effective final rule\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510831", "body": "please avoid these line breaks if a setter's parameter fits in the same line, even if it's a complex expression.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64510831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64576217", "body": "You are right that these utilities are confusing, I was coding from memory and forgot the negation :) but please use that anyway for now, with the negation. The rationale for this naming is that those start/endXxx methods are mostly used as loop guards, like `for (startObject(par); endObject(par); par.nextToken())` -- it's a kind of macro. In hindsight this may have not been the best idea, particularly when the same methods need to be used in other places (but that's rare). I've already considered to change this but that would need to include other methods, update all uses, keep deprecated methods for a couple releases, etc.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64576217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64579811", "body": "Similarly to the reader side, in the writer we want to transparently support either representation in the memory/Protobuf model (user can put the native part either in the string field `requestNative` or the object field `request`) but the output will be always the same, and that should be the most standards-compliant representation which is (even after OpenRTB 2.4) the ugly JSON-escaped string field. However we want to support a child object representation too, but the right way to do that is not by binding the output format to the user's choice of `requestNative` vs. `request`; this choice must be independent, it's a convenience and performance feature: when you create the native request programmatically you want to always use `requestNative`, but when you already have the complete native request as JSON (e.g. you may read it from a database of campaign data), then you want to just copy that to `request`.\n\nIn the reader we could handle the external-format choice via detection, sniffing the first token or character; in the writer we can't do that, so the only solution in this case is adding another boolean option to the factory. Above I had suggested an option named `forceReadNativeAsObject`, but we could have a single option that does the job for both reader and writer, maybe just `nativeAsObject`. Usually you will have the same choice for the request and response, it would be strange to use the standard escaped-JSON form in the request but send the child-object form in the response for example (if someone really needs that, then just create two factories - so we optimize the API for the common case).\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64579811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64583006", "body": "Thinking more about this... actually, having all this static JSON data as inline constants is awful. Can you move them to resource files? For example _request-full-noroot.json_, etc. then just read them with `getResourceAsStream()`. Then you can get rid of all the escaping, and also run the JSON through a tool like http://jsbeautifier.org/ so it's nicely  indented and readable.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64583006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64584376", "body": "I see the code here and below is only used to generate the big JSON test data but you can't call it from tests since it uses the same JSON utilities being tested, so it's smart to generate only once, validate the output, then dump it into static golden data. But we could have one improvement here: make this helper class a unit test too, with one `@Test` method that validates the golden data by comparing it to the output of the generator functions, i.e. similar to this `main` method except that you would do an `assertThat(REQUEST_...).isEqualTo(generate...)` for each constant. This is important to detect bugs that may inadvertently change the output of the generator functions, but might not be captured by the existing tests which only read the golden data.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64584376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64609237", "body": "Please don't add GSON or anything new, we try to limit dependency libraries to a minimum here. But you shouldn't need that, the Jackson library that we use here can do all the pretty printing we need. Because our data model is not POJO-based this requires a hack, but [not too bad](http://stackoverflow.com/a/14532435).\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64609237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65655174", "body": "Thanks again for the work! Still a big pile of code so I'll need a few days to fully review again, but looks good. :)\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65655174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sdorazio": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/openrtb/pulls/121", "title": "Adding support for enum extension values within range 500-999", "body": "This pull request adds support for exchange-specific enum values (typically 500+), which should address issue #120. The meaning of each of these values will be dependent on the exchange.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "matzi11a": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154161", "body": "that has resolved the issue. thanks :+1: \n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/66154161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/72093952", "body": "Much better thanks for the feedback\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/72093952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "metaquanta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342829", "body": "My limited time investment was absolutely worth getting to read such a\nthorough justification for the existing implementation. Thanks a lot for\nthe response. I'm glad to see the degree to which you've considered the\nproblem.\n\nI am a user and we handle everything as micros. I find the necessary\nconversions objectionable and now you've convinced me it is only an\naesthetic objection.\n\nI share your concern regarding (de)serialization. However, in practice I\nfeel that's also unlikely to result in any real unwanted behavior outside\nof a human eavesdropper scratching their head.\n\nThanks a lot for the response!\nMatt\nOn Jan 24, 2015 6:06 PM, \"Osvaldo Pinali Doederlein\" <\nnotifications@github.com> wrote:\n\n> @metaquanta https://github.com/metaquanta thanks for the patch! I just\n> wish we had discussed this before writing the code. The problem is that\n> storing values as decimals is not really helpful unless values are\n> manipulated as decimals everywhere in the application that uses the\n> library; using decimals only for storage or in parse/format operations\n> makes no difference if apps still have to call getters/setters that only\n> use doubles. And of course we can't have a BigDecimal in the API because\n> protobuf doesn't support any type that maps to BigDecimal or equivalent\n> language-specific decimal types.\n> \n> I considered using a string field for these values, but that would result\n> in a really inconvenient API, forcing every get/set call to perform a\n> conversion. And this still wouldn't provide any advantage over doubles:\n> today you can just write code like BigDecimal bidfloor = new\n> BigDecimal(imp.getBidfloor). The double field is precise enough to\n> represent any price; it supports 15-17 significant decimal digits of\n> mantissa, and more critically, for any numbers up to 15 digits roundtrip\n> conversions between a string (or precise decimal type) and a double are\n> guaranteed to always be exact. This means double is perfectly safe for\n> storage and parsing/formatting of any normal value used in OpenRTB.\n> \n> The above is for background; now specifically on your patch: you're\n> changing the model's field types to int64 (= Java's long), and changing\n> their scale to micros (just like DoubleClick's native protocol). This is\n> another way to solve the problem, but then it forces apps to always\n> manipulate prices in micros instead of \"currency units\" (USD or whatever\n> used by the request). Unfortunately this is even more inconvenient for\n> users of the API; as an end-user myself, if I care about precise decimal\n> arithmetics I'd rather make some explicit double/BigDecimal conversions\n> than work with micros all the time.\n> \n> Technically, OpenRTB defines only a wire protocol and we have some\n> flexibility for API/language-binding design, see for example how this\n> library uses booleans instead of 0/1 integers for flags; or how I have\n> introduced an extended admNative field [native is still WIP]. But these\n> are changes that make the API significantly more type-safe and easy to use.\n> The admNative will also result in significant performance gain. Changing\n> the price to micros is a step backward in usability. (Also an important\n> breaking change, one I'd rather avoid at this time, this code already has\n> significant usage...) Even the potential advantage of precision is highly\n> questionable, because double is not only good enough for storage and\n> conversions, it's good enough even for arithmetics, since the values we\n> manipulate here leave lots of mantissa bits unused \u2013 you'd need a crapton\n> of error propagation before you get a significant error (I doubt any SSP or\n> other platform will consider digits below 1^-6). This is remarkably true\n> for monetary values, which are typically only manipulated by simple\n> operations like sums or multiplies, which have maximum precision (<= 1ulp)\n> in any language or platform; few if any people should calculate bid prices\n> with complex formulas full of transcendental operations that sometimes have\n> several bits of error in some \"hard\" value ranges. And if anyone is doing\n> that, they certainly can't use long: even BigDecimal would be a huge\n> ordeal because in most mainstream languages \u2013 anything other than\n> specialized stuff like Mathematica \u2013 the math libraries cannot perform any\n> decent math with decimal types; anything as sophisticated as a square root\n> forces you to step down to floating point anyway.\n> \n> Having said all that, my only concern with the current, simple usage of\n> double is in the serialization; for example it would be ugly (although\n> not a real problem) if the library emits JSON like price:\n> \"1.2000000000000000000003\" due to accumulation of errors in the last few\n> bits. Ideally, (1) the code for deserialization should ignore anything\n> after some specific limit like the sixth digit after the decimal point, (2)\n> the code for serialization should make sure to only emit digits up to the\n> same limit. I think Java's default behavior in double/String conversions\n> will take care of (2) but I'm not sure at which digit, and it won't take\n> care of (1) at all. We could use BigDecimal to solve these problems, but\n> I think just the DecimalFormat API should be good enough for that and way\n> more efficient.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/16#issuecomment-71342132.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71342829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71564438", "body": "I have not used the DoubleClick protocol, but it's probably somewhere in\nthe heritage of code I've worked on.\n\nOn Sun, Jan 25, 2015 at 10:04 AM, Osvaldo Pinali Doederlein <\nnotifications@github.com> wrote:\n\n> Thanks for the understanding! I'm closing the request then, but keeping\n> this in mind. Just curious if your current habit of using micros for\n> everything comes from working with the DoubleClick protocol?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/openrtb/pull/16#issuecomment-71376401.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/71564438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ceocoder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/73562539", "body": "@opinali fixed. named the method `readStringOrArray`\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/73562539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24350360", "body": "makes sense - I'll have update the PR later today.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/24350360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "samklr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/94586837", "body": "Yes after reverting to an old version,I figured that out indeed. I'll try with the master ... \nThanks.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/94586837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96451520", "body": "Hi Osvaldo.\nI have been trying to use the code  on  master, since it's the only one with clear tests for handling protobuf extensions, but I can't seem to find the 0.8.1-SNAPSHOTS on maven central. Are they published somewhere?\nAlso it would be nice for further improvement,,if you could provide an example like in the Tests,based for example on your wiki, with the \"SpaceAds\" example. \n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96451520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96621475", "body": "Thanks Osvaldo.\nI'll do just that. I'll keep you updated.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/96621475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dhamilton-nanigans": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/102275507", "body": "Thanks for getting back to me, that's good to hear. I have one follow up question. I am working on using your library to support MoPub's OpenRTB protocol. Extending the protobuf objects and implementing JSON serializers for the extensions has been a pretty smooth process. However, MoPub defines a non-standard \"crtype\" field that is not in their bid response that is not mapped to the \"ext\" field. I am able to serialize and deserialize a bid response with this field without any failures (not sure if that's expected or not), however I can't find a way to register a JSON reader/writer to handle a field like this. Is there a way to do this?\n\nHere's a link to the MoPub spec for reference, note the \"crtype\" field highlighted in blue under section 3: https://dl.dropboxusercontent.com/u/10601557/RTB2.1spec.html\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/102275507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pawel-kowalski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/openrtb/issues/comments/104186574", "body": "Additionally I noticed when I registered at least one extension Reader (even dummy - that reads nothing) it avoided loop, however in this particular case it fails with exception:\n\n``` java\ncom.google.protobuf.UninitializedMessageException: Message missing required fields: id\n    at com.google.protobuf.AbstractMessage$Builder.newUninitializedMessageException(AbstractMessage.java:372)\n    at com.google.openrtb.OpenRtb$BidRequest$Builder.build(OpenRtb.java:50992)\n    at com.google.openrtb.json.OpenRtbJsonReader.readBidRequest(OpenRtbJsonReader.java:119)\n```\n\ndue to the last \"udi\" extensions which is nested and nothig after extension part is read by parser.\nIn case when there are only scalar extensions it works fine. Try with the same case mentioned previously but without \"udi\"\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/issues/comments/104186574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bschev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64544366", "body": "This will not work, because `endObject(par)` negates the comparison. The following would be an option:\n\n```\nif (rootNativeField && !endObject(par)) {\n    par.nextToken();\n}\n```\n\nBut this is a bit confusing to read and it leads to a `par.nextToken()` call if the current token is null. I think this is not wanted.\nA new `OpenRtbJsonUtils` helper method would be an alternative, like :\n\n```\npublic static boolean isEndObject(JsonParser par) {   \n  return par.hasCurrentToken() && par.getCurrentToken() == JsonToken.END_OBJECT;\n}\n```\n\nThis could then be used in `readNativeRequest` and `readNativeResponse`, like:\n\n```\nif (rootNativeField && isEndObject(par)) {\n    par.nextToken();\n}\n```\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64544366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "bundeskanzler4711": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64589573", "body": "If the JSON data should be pretty-written in resource files I think that we should use a pretty-print library for that, because in the test methods I am currently doing (non-pretty-printed) string comparison:\n\n``` java\n  static void testRequestWithNative(final String requestString, final boolean rootNative) throws IOException {\n    OpenRtbJsonFactory jsonFactory = newJsonFactory();\n    OpenRtb.BidRequest bidRequest = jsonFactory.newReader().readBidRequest(requestString);\n    String jsonRequNativeStr = jsonFactory.setRootNativeField(rootNative).newWriter().writeBidRequest(bidRequest);\n    assertThat(jsonRequNativeStr).isEqualTo(requestString);\n  }\n```\n\nWould [GSON](https://github.com/google/gson) be a good choice?\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/64589573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65509295", "body": "Hint: All golden data Json files under `test/resources` don't have a newline at end of file, so we don't have to do `trim()` while getting the file content for all test cases.\n", "reactions": {"url": "https://api.github.com/repos/google/openrtb/pulls/comments/65509295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}