{"_default": {"1": {"opengpu": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4188", "title": "why '-Dprotobuf_MSVC_STATIC_RUNTIME=OFF' must after '-Dprotobuf_WITH_ZLIB=ON' ?", "body": "(1)why '-Dprotobuf_MSVC_STATIC_RUNTIME=OFF' must after '-Dprotobuf_WITH_ZLIB=ON' ?\r\ni tried Dprotobuf_MSVC_STATIC_RUNTIME=OFF/ON both works...and what the difference?\r\n(2)can i build protobuf using zlibstatic.lib instead of zlib.lib? i found that cmake just notice zlib.lib while donot know zlibstatic.lib...is it the only way to build protobuf by using zlib's dynamic lib? can i use zlibstatic.lib and how?\r\n(3)zlibstatic.lib or zlib.lib, which way is better if i use protobuf's static lib with zlib enabled in my EXE and meanwhile directly use zlibstatic.lib in my EXE ?\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "acidtonic": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4186", "title": "Consider renaming the 'Status' variable, conflicts with Xlib and others.", "body": "Greetings,\r\n\r\nI have spent a few hours trying to locate a bug that ended up resulting from a naming conflict. My project previously was fine but after moving from protobuf 2.x to 3.x suddenly the code failed to compile. A quick search indicated others hit the same issue, but no answers. Thus I decided to open this issue to both document the issue and attempt to fix this by renaming the \"Status\" declaration to something else. \r\n\r\nIn my case this was a result of a variable conflict by including Xlib on a Gentoo Linux development machine. I was able to eventually resolve by carefully reordering includes such that all Xlib and various X11 headers were all before protobuf includes, followed by an #undef Status. \r\n\r\nSince Xlib vastly predates protobufs usage of the varible, I believe the bug is with protobuf for the sudden usage and not with Xlib... Also Linux is a supported platform of Protobuf and Xlib is rather widespread and well-known. If multiple includes of Xlib are present, it's also very difficult to properly place the #undef Status since all further includes of Xlib components or X11 extensions will also fail as they all rely on the \"Status\" variable existing and being defined as an int.\r\n\r\nSorry for the wordy report but hopefully this gets indexed and helps others who may run into this. I appreciate your time.\r\n\r\nError:\r\n/usr/include/google/protobuf/stubs/logging.h:66:7: error: expected identifier before \u2018int\u2019\r\n class Status;       ^\r\n/usr/include/google/protobuf/stubs/logging.h:66:7: error: multiple types in one declaration\r\nIn file included from /usr/include/google/protobuf/stubs/common.h:50:0,\r\n                 from [snip]/protocol/SomeGeneratedProtocolUsing.pb.h:9,\r\n/usr/include/google/protobuf/stubs/logging.h:90:32: error: expected \u2018)\u2019 before \u2018::\u2019 token\r\n   LogMessage& operator<<(const ::google::protobuf::util::Status& status);\r\n                                ^\r\n/usr/include/google/protobuf/stubs/logging.h:90:32: error: \u2018google::protobuf::internal::LogMessage& google::protobuf::internal::LogMessage::operator<<(...)\u2019 must not have variable number of arguments\r\n/usr/include/google/protobuf/stubs/logging.h:90:26: error: expected \u2018;\u2019 at end of member declaration\r\n   LogMessage& operator<<(const ::google::protobuf::util::Status& status);\r\n                          ^\r\nIn file included from [snip]/HeaderIncludingTheGeneratedProtocol.hpp:10:0,\r\n/usr/include/google/protobuf/stubs/logging.h:90:58: error: expected unqualified-id before \u2018int\u2019\r\n   LogMessage& operator<<(const ::google::protobuf::util::Status& status);\r\n\r\n\r\nFixed by something similar to below....\r\n\r\n#include <X11/xlib.h>\r\n#include All other X11 includes here\r\n#undef Status\r\n#include Protobuf here and all generated proto headers", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JackGrinningCat": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4178", "title": "(7 out of 2012) Failing Tests with Visual Studio 2017 v15.5.4/ Cmake 3.10.1", "body": "Hi,\r\n\r\nI followed following description\r\nhttps://github.com/google/protobuf/tree/master/cmake\r\n\r\n\r\nUsed tools: \r\n- Visual Studio 2017 v15.5.4\r\n  - x64 Native Tools Command Prompt for VS 2017\r\n- Cmake 3.10.1\r\n- git version 2.15.1.windows.2\r\n- cloned protocbuf \r\n- cloned gmock/gtest 1.7.0 \r\n\r\n- Windows 10 Version 1703 \r\n\r\n`\r\nset PATH=%PATH%;C:\\Program Files\\CMake\\bin\r\ngit clone -b v3.5.1 https://github.com/google/protobuf.git\r\ncd protobuf\r\nmkdir install\r\ngit clone -b release-1.7.0 https://github.com/google/googlemock.git gmock\r\ncd gmock\r\ngit clone -b release-1.7.0 https://github.com/google/googletest.git gtest\r\ncd ../cmake\r\nmkdir build\r\ncd build\r\nmkdir Release\r\ncd Release\r\nmkdir solution\r\ncd solution\r\ncmake -G \"Visual Studio 15 2017 Win64\" ^\r\n-DCMAKE_BUILD_TYPE=Debug ^\r\n-DCMAKE_INSTALL_PREFIX=../../../install ^\r\n../..\r\n\r\nmsbuild protobuf.sln /p:Configuration=Debug\r\nmsbuild check.vcxproj /p:Configuration=Debug\r\n`\r\n\r\nWhen building the check project in the created visual studio solution, I meet following test failures.\r\n\r\n>    [----------] Global test environment tear-down\r\n>    [==========] 2012 tests from 194 test cases ran. (42205 ms total)\r\n>    [  PASSED  ] 2005 tests.\r\n>    [  FAILED  ] 7 tests, listed below:\r\n>    [  FAILED  ] CommandLineInterfaceTest.Win32ErrorMessage\r\n>    [  FAILED  ] BootstrapTest.GeneratedDescriptorMatches\r\n>    [  FAILED  ] CsharpBootstrapTest.GeneratedCsharpDescriptorMatches\r\n>    [  FAILED  ] RubyGeneratorTest.GeneratorTest\r\n>    [  FAILED  ] TextFormatMapTest.Sorted\r\n>    [  FAILED  ] TextFormatTest.Basic\r\n>    [  FAILED  ] TextFormatExtensionsTest.Extensions\r\n\r\n\r\n\r\n>    [  FAILED  ] CommandLineInterfaceTest.Win32ErrorMessage\r\n  This one is due to false expectation about a translation of error messages from my German windows installation. \r\n\r\nCan anybody make a rhyme about those erros?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pstibrany": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4177", "title": "Buffer size used in writeDelimitedTo method is often too small", "body": "When sending small messages (e.g. message consisting of single enum) by using AbstractMessageLite#writeDelimitedTo method, this method together with CodedOutputStream will compute very small buffer size of 20.\r\n\r\nAbstractMessageLite#writeDelimitedTo then writes single byte (message size) to the buffer, not leaving enough space for CodedOutputStream.writeEnum method, which always wants at least 20 available bytes, and which then must flush that single byte (message size) to make enough room to write enums.\r\n\r\nThis interplay between AbstractMessageLite#writeDelimitedTo and CodedOutputStream, which needs more free space in the buffer now for many types, causes lot of unnecessary writes to the output stream (which is bad especially when using SocketOutputStream).\r\n\r\nWe have observed this as a major performance hit when upgrading from protobuf 2.5.0 to version 3.\r\n\r\nFor a simple test case, please see https://github.com/pstibrany/protobuf-small-buffer-issue\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexLuya": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4176", "title": "How to import .proto file in different package correctly?", "body": "I have two packages like this\r\n\r\n```\r\ncom.abc.\r\n         protobuf.\r\n                    share.proto\r\n         depart.\r\n                    detect.proto \r\n```\r\nand the conent of share.proto like this:\r\n\r\n```\r\nsyntax = \"proto3\";\r\npackage com.adc.protobuf;\r\nmessage Test{}\r\n```\r\nand the content of detect.proto like this:\r\n\r\n```\r\nsyntax = \"proto3\";\r\npackage com.adc.depart;\r\nimport \"com/abc/protobuf/share.proto\"\r\n```\r\nand compile share.proto in it's dir like this:\r\n\r\n`protoc -I=. --python_out=. share.proto`\r\n\r\nthen compile detect.proto in it's dir like this:\r\n\r\n`protoc -I=/pathToSrcDir/ -I=. --python_out=. detect.proto `\r\n\r\nand\r\n\r\npathToSrcDir has been added to PYTHONPATH,all compilations work fine,but when run a python script which\r\n\r\n`from com.abc.depart import detect_pb2`\r\n\r\ngot this error\r\n\r\n```\r\nTypeError: Couldn't build proto file into descriptor pool!\r\nInvalid proto descriptor for file \"detect.proto\":\r\n  detect.proto: Import \"com/abc/protobuf/share.proto\" has not been loaded.\r\n  com.abc.depert.XClass.ymethod: \"com.abc.protobuf.Test\" seems to be defined in \"share.proto\", which is not imported by \"detect.proto\".  To use it here, please add the necessary import.\r\n```\r\nHow to solve this import problem?", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinfagang": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4175", "title": "Can not print out Message as string and save to prototxt", "body": "I just want to print out a message, I am using this codes:\r\n\r\n```\r\nstring resultStr;\r\ndetectionResult.SerializeToString(&resultStr);\r\nprintf(\"%s\", resultStr.c_str());\r\n```\r\n`detectionResult` is my message. But it just got some unicode binary outputs rather than strings and numbers, just not as prototxt beautiful json-like string was.\r\n\r\nI also try to save my Message into a prototxt file which I believe more readable then binary.\r\n```\r\nchar* saveTxtFile = \"det.prototxt\";\r\n    int f = open(saveTxtFile, O_WRONLY|O_CREAT|O_TRUNC);\r\n    auto outputTxtFile = new FileOutputStream(f);\r\n    if (!google::protobuf::TextFormat::Print(detectionResult, outputTxtFile)) {\r\n        cao::Log(kError, \"error in save to prototxt\");\r\n    }\r\n```\r\n\r\nThis gives me an error, I remove the file and try again, it saved blank message. What is the right way to do this? Forgive my ignorance on protobuf but it's really leak of examples on this.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aqsc": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4173", "title": "Does  libprotobuf whose version >2.6 support python2.7\uff1f", "body": "Does  libprotobuf whose version >2.6 support python2.7\uff1f\r\n We find the official reports that the libprotobuf whose version >2.6 support python3, but I want to ask whether they support python2.7......", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shenlanting": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4171", "title": "Who should I e-mail if I find a problem weaknesses/bugs?", "body": "We found some weaknesses/bugs. Please give an e-mail address, so I can send you the details.\r\n\r\ntks.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SeriousMa": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4170", "title": "(Java)How can I get com.google.protobuf.Descriptors.FileDescriptor without from XXXOuterClass,Is there a way to get com.google.protobuf.Descriptors.FileDescriptor from protobin file?", "body": "rt", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaasCM": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4169", "title": "Invalid Address in libprotobuf-lite.so.9", "body": "I've been building google protoc-3.5.1 from source on Ubuntu 16.04 LTS. I've tried compiling with gcc-6.3 and gcc-5.3. When I run `make check` it always passes. `protoc` is building the *.h and *.cc files correctly. However, when I try to link the protoc libraries my application it has been crashing within the protoc libraries; specifically, libprotobuf-lite.so.9. The `lldb` output is:\r\n\r\n`thread #1: tid = 13913, 0x00007fffe2a0b516 libprotobuf-lite.so.9 google::protobuf::internal::Mutex::Lock() + 6, name = 'TANS', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)`\r\n\r\nFor context, I am trying to link the protoc libraries with a C++/Qt Application using Qt 5.10.0.\r\n\r\nI've tried compiling example applications as well; they are crashing in the same location; therefore, I believe it's my environment. I've scoured the internet looking for information on the issue and have not been able to come up with any solution.\r\n\r\nThis brings me to posting this issue. Has anyone ever seen any issue like this? If not, direction that I should search in?\r\n\r\nAny help or insight into this issue would be greatly appreciated. ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shihabkaranchery": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4165", "title": "ReferenceError: goog is not defined", "body": "I follow the steps in the docs, convert the .proto message to myproto_libs.js file while importing the file\r\n\r\nfollowing error occurred \r\nReferenceError: goog is not defined\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mvdan": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4163", "title": "protoc: allow using stdin/stdout in FILE/FILES parameters", "body": "For example, right now I'm doing:\r\n\r\n    protoc -o/dev/stdout --include_imports test.proto\r\n\r\nI am calling protoc from a Go program, so this limitation requires me to either use a temporary file, or hard-code `/dev/stdout` which is not portable. Both are unnecessarily complex.\r\n\r\nI'm not sure what the best way to expose this would be. Some programs use special values, such as `-` to mean standard input.", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diclogic": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4157", "title": "Unable to use proto_h mode in cpp generator", "body": "there's an option called proto_h defined in Options in compiler/cpp directory. it is used in many places and there're comments mentioning about as \".proto.h mode\", but there's no way to turn this option on and there's no document about it. It has a feature useful to me, it generates enum with `int` enum base type, which means forward declarations become available for that kind of enums. I think that would be useful to anyone who want to hide the details of a enum from a header file, or simply making forward declaration file for a enum type generated by protobuf.\r\n[cpp_generator.cc](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/cpp/cpp_generator.cc)\r\n[cpp_options.h](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/cpp/cpp_options.h)", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teeks99": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4156", "title": "Old versions of gcc give warnings for pragma diagnostic push and pop", "body": "`#pragma GCC diagnostic push` and `#pragma GCC diagnostic pop` are only supported in gcc >= 4.6. \r\n\r\nA solution to this would be to change the guards from\r\n```c++ \r\n#ifdef __GNUC__\r\n  #pragma GCC diagnostic push\r\n  #pragma GCC diagnostic ignored \"-Wstrict-aliasing\"\r\n#endif  // __GNUC__\r\n```\r\nand\r\n```c++ \r\n#ifdef __GNUC__\r\n  #pragma GCC diagnostic pop\r\n#endif  // __GNUC__\r\n```\r\nTo: \r\n```c++ \r\n#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)\r\n  #pragma GCC diagnostic push\r\n  #pragma GCC diagnostic ignored \"-Wstrict-aliasing\"\r\n#endif  // __GNUC__\r\n```\r\nand\r\n```c++ \r\n#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)\r\n  #pragma GCC diagnostic pop\r\n#endif  // __GNUC__\r\n```\r\n\r\nThere are approximately a dozen header files that do this, as well as the cpp_file.cc codegen.  This could be applied to the 3.?.x branches, but might not be needed on master....if master is now c++11, gcc versions before 4.6 might not work with it anyway...I guess it depends on how good various gcc's -std=c++0x support was back then. Might not hurt to apply to master as well.\r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4161", "title": "Guards for older GCC versions", "body": "Fixes #4156", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/4160", "title": "Guards for older GCC versions", "body": "Fixes #4156", "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/4159", "title": "Guards for older GCC versions", "body": "Fixes #4156", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ShvadronUzi": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4155", "title": "free(): invalid pointer", "body": "Hi,\r\nI am getting \"free(): invalid pointer\" error when using ^c to exit a program that uses protobuf (in caffe):\r\n/usr/lib/x86_64-linux-gnu/libprotobuf.so.9(_ZN6google8protobuf8internal28DestroyDefaultRepeatedFieldsEv+0x1f)[0x7f5f272ec8af]\r\nAny idea why this may happen?\r\n10x", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivoshabarkov": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4153", "title": "Javascript generated code - repeated properties", "body": "If I have a repeated property for example:\r\n\r\nrepeated SomeType firstSecond = 1;\r\n\r\nprotoc generates a property named 'firstsecondList'.\r\n\r\nThat is quite unexpected. I would rather have my javascript properties be named as they are in the proto file, or at least to follow a javascript convention. Starting with a lower case letter and using upper case for the first letter of every other word in it.\r\nIs there an option I can set to the generator to accomplish this?\r\n\r\nEdit:\r\nAll of my properties are completely lower case. The common convention is to use camelCase for naming variables and object properties. \r\n\r\nEdit:\r\nI looked at the code an I see you expect the properties to be underscore separated. I think it would be nice if it is optional. I had to change the code a little to handle camelCase named properties.\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhangyangsk8": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4152", "title": "Zero-value Enum types are not be seted correctly  in objectivec language", "body": "define enum type in some.pbobjc.h:\r\ntypedef GPB_ENUM(someStatus) {\r\n  Status_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,\r\n  StatusNotStart = 0,\r\n  StatusStart = 1,\r\n  StatusPaused = 3,\r\n  StatusStop = 4,\r\n};\r\ndefine a Property in otherClass like this:\r\n@property (nonatomic, assign) someStatus type;\r\n\r\notherClass.type = StatusNotStart;//can not be seted the zero-value\r\notherClass.type = StatusStart;//if the value is not zero-value it can be seted correctly\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bshaffer": {"issues": [{"url": "https://api.github.com/repos/google/protobuf/issues/4151", "title": "Protobuf PHP C extension is not escaping strings for JSON serialization", "body": "When calling `serializeToJsonString `, the Message object in the C Extension does not escape slashes, causing an error in the following code:\r\n\r\n```php\r\n   // add this to tests/encode_decode_test.php\r\n    public function testJsonEncodeEscaping()\r\n    {\r\n        $string = 'this\\\\/should/be/escaped';\r\n        $from = new TestMessage();\r\n        $from->setOptionalString($string);\r\n        $data = $from->serializeToJsonString();\r\n        $to = new TestMessage();\r\n        $to->mergeFromJsonString($data);\r\n        $this->assertEquals(\r\n            $from->getOptionalString(),\r\n            $to->getOptionalString()\r\n        );\r\n    }\r\n```\r\n\r\nAnother less important but still pressing issue can be seen in [this test](https://travis-ci.org/googleapis/gax-php/jobs/326584734#L2834), which shows that the native library escapes slashes but the C extension does not:\r\n\r\n```php\r\n   // add this to tests/encode_decode_test.php\r\n    public function testJsonEncodeEscapeForwardSlash()\r\n    {\r\n        $string = 'this\\\\/should/be/escaped';\r\n        $from = new TestMessage();\r\n        $from->setOptionalString($string);\r\n        $data = $from->serializeToJsonString();\r\n        $this->assertContains(json_encode($string), $data);\r\n    }\r\n```\r\n\r\n**Note**: Both of these tests pass when the `google/protobuf` composer package is used instead.\r\n  ", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/4151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jskeet": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/47b7d2c7cadf74ceec90fc5042232819cd0dd557", "message": "Add DiscardUnknownFields support for C#\n\nBy default, unknown fields are preserved when parsing. To discard\nthem, use a parser configured to do so:\n\nvar parser = MyMessage.Parser.WithDiscardUnknownFields(true);"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BSBandme": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/9f80df026933901883da1d556b38292e14836612", "message": "Merge pull request #4158 from BSBandme/FixBenchmarks\n\nFix java benchmark to use parser, fix cpp benchmark new arena to use \u2026"}, {"url": "https://api.github.com/repos/google/protobuf/commits/473a8109751123eafe9ff7932703cb12b26a893a", "message": "Update py_benchmark.py"}, {"url": "https://api.github.com/repos/google/protobuf/commits/fa60e550ec8ca140f60a3cb8f36fa41fc45acb27", "message": "Fix java benchmark to use parser, fix cpp benchmark new arena to use Reset, format some files"}, {"url": "https://api.github.com/repos/google/protobuf/commits/bab843b8b96757ed2138fdc01dc5d82d47a2239c", "message": "Merge pull request #4132 from BSBandme/JavaCaliperCounter\n\nJava caliper counter"}, {"url": "https://api.github.com/repos/google/protobuf/commits/195253c3f6e698fba8b58d7c810610dd86855d14", "message": "Add counter to Java benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/4adc5a48c07a13489670384ab584806534024a58", "message": "Merge pull request #4065 from BSBandme/python_benchmark_real\n\nAdd python benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/2fc69b1561e1feaa1cbc56d1617f949d13352b97", "message": "Add python benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/43caa38d6ed68129d28bf4528488e4f389a33b34", "message": "Merge pull request #4014 from BSBandme/JavaCaliper\n\nAdd caliper supported to java benchmark"}, {"url": "https://api.github.com/repos/google/protobuf/commits/aca6c155981859e99460835ccc791fac9d350b47", "message": "Fix some bug"}, {"url": "https://api.github.com/repos/google/protobuf/commits/a147a213764e0a34e0c0edf9fddaeb6aa608bd0d", "message": "Changed README"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "acozzette": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/b77aa8011d450e314690e430ede85d4ab20abaf3", "message": "Merge pull request #4148 from datacompboy/patch-2\n\nAdd more tests to time_test"}, {"url": "https://api.github.com/repos/google/protobuf/commits/d4afdba83d19fded7822324a7f8e68648d296260", "message": "Merge pull request #4147 from datacompboy/patch-1\n\nFix ValidateDateTime: check day instead month"}, {"url": "https://api.github.com/repos/google/protobuf/commits/eca1d2a7113b3d57f900f69661342c0078c956c4", "message": "Merge pull request #4116 from amandeepgautam/master\n\nwhitelisting aix platform as it has sched_yield"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "datacompboy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/091eeb1261ebe6bc557ae9b353d37108c8149568", "message": "Update time_test.cc\n\nBetter test coverage for datetime validation."}, {"url": "https://api.github.com/repos/google/protobuf/commits/473c5cff764b879be1f4afefb71d6b8ba0b8a9d3", "message": "Fix ValidateDateTime: check day instead month\n\nFound with PVS-Studio static analyser, see \r\nhttps://www.viva64.com/en/b/0550/"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pherl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/a3868af12be724f808faa21a29e7b4931e30bed1", "message": "Merge pull request #4131 from pherl/merge\n\nMerge 3.5.x branch into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/ec826c5a592126ddb6b12b47e6e1fb6232ce340d", "message": "Merge remote-tracking branch 'origin/3.5.x' into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/383a4941d5b1aa3c0afbdc24dd0e5d63d263fc3a", "message": "Merge remote-tracking branch 'origin/3.5.x' into master"}, {"url": "https://api.github.com/repos/google/protobuf/commits/39f577c38ec10b668408d4af3dacaec155a7f0c7", "message": "Merge pull request #4124 from pherl/nullptr\n\nremove nullptr"}, {"url": "https://api.github.com/repos/google/protobuf/commits/5b1caea024138236451d60d9df5416253f648fb1", "message": "Merge pull request #4090 from pherl/nopassword\n\nFix uploading binary wheel."}, {"url": "https://api.github.com/repos/google/protobuf/commits/4f3d8657c3914e5f2d5aa992e26f3e5c09326b84", "message": "remove nullptr"}, {"url": "https://api.github.com/repos/google/protobuf/commits/8fc40b5502f11b5619f17dc30d79e7144abf3b39", "message": "Fix uploading binary wheel.\n\nThe script now takes two prompt for user name and password. One single\ninput redirection no longer works."}, {"url": "https://api.github.com/repos/google/protobuf/commits/88e5573b9a8a5c4038f9db3633610f032aab277d", "message": "Merge pull request #4089 from pherl/nocache\n\nDisable pip cache when testing uploaded packages"}, {"url": "https://api.github.com/repos/google/protobuf/commits/7ad8e7ad596f56df53d910d91370885d6cacdcc8", "message": "Disable pip cache when testing uploaded packages\n\nOtherwise, pip complains \"cannot find a version satisfies the\nrequirement.\" I suspect it was due to caching issues. I usued to\nmanually add a `sleep 30` between the upload and the installation test\nwhich is quite unstable."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/53773889", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53773889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53834580", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53834580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54390943", "body": "Thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54390943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/9929432", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9929432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9950693", "body": "@zsurocking  Should we re-enable the test?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9950693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376584", "body": "s/matchs/matches\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376585", "body": "ensurEnumValueDescriptor?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18376585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "amandeepgautam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/0c0d481c69d8588885027cce82a3e6042c49841a", "message": "whitelisting aix platform as it has sched_yield"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thomasvl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/4588e6e2b98671d544f7f2bb7372710beb7bdfcb", "message": "Force a copy when saving the NSData that came from another."}, {"url": "https://api.github.com/repos/google/protobuf/commits/156161dfcde38b72c55ead02cacff7087c93a4d8", "message": "Properly copy maps with string keys but pod values.\n\nAdd tests to cover all the common special casing in the runtime code to\nensure things come out correctly."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11367116", "body": "Why the double slashes in these paths, that seems wrong?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367138", "body": "What made this seem needed?  Xcode should be using the directory the project is in as the current directory.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367185", "body": "I thought the option wasn't supposed to be valid in a proto3 file?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367347", "body": "What triggered these?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11367939", "body": "You can get these files in src too, it all depends on what you navigate to on the Mac when browsing the directory tree.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11367939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11368029", "body": "Did you happen to checkout through xcodes repository support?  in general we should need to exclude stuff in shared dirs, so you must have done something to set this up on the workspace.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11368029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "v-silverfin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/8529f2aee33ae793c9ce362a45370b98f675370a", "message": "Resolved issue #3510. Malformed errorr messages replaced with meaningful description"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xfxyjwf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/protobuf/commits/099d99759101c295244c24d8954ec85b8ac65ce3", "message": "Merge pull request #4083 from matt-kwong/kokoro_jobs\n\nShard 64-bit Linux languages into different Kokoro jobs"}], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4047", "title": "Allow roundtrip of FLT_MIN/MAX in JSON convention.", "body": "Fixes https://github.com/google/protobuf/issues/3615", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/53611349", "body": "Hi, please sign this Google Individual Contributor License Agreement:\nhttps://developers.google.com/open-source/cla/individual\nand update this thread when you are done. This is required for us to use your code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53611349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53612493", "body": "I'm not sure whether this is the right change. My understanding is that cpp_message.py is only used for Python CPPv1. We probably should delete it instead.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53612493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53772119", "body": "@pherl can you review this change?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53772119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54376908", "body": "We probably won't import/tag any old releases. If you already synced pass r495, it should already contain all changes in 2.5.0 release. The last change we made for 2.5.0 release is r482.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54376908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54393066", "body": "This patch only fixed the declaration in the header file. Shouldn't we also remove the const qualifier from the method definition in the source file?\nhttps://github.com/google/protobuf/blob/master/src/google/protobuf/generated_message_reflection.cc#L1499\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54393066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54516857", "body": "Hi huahang, please sign this Google Individual Contributor License Agreement:\nhttps://developers.google.com/open-source/cla/individual\nIt's required for us to use your code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54516857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54518742", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54518742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54519932", "body": "Hum, the release package I just uploaded to maven central repository still says 2.5.0... Guess it has to be fixed in a future release...\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54519932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54559885", "body": "Sorry about that. How bad is this issue? Does it cause projects to fail to build/deploy or something? I just uploaded 2.6.0 release package to maven central repository without realizing this. Depending on how serious the problem is we probably need a minor release to fix it.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54559885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54651861", "body": "Thanks very much.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54651861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54865771", "body": "We had a discussion about field lifetime issue just recently and here is assumption that I think users should make when accessing sub-fields of a protobuf message:\n\n_After getting a reference/pointer to a field of a protobuf message, any subsequent mutation method calls to the message may invalidate this reference/pointer and accessing this reference/pointer is an undefined behavior._\n\nThis not only applies to the case you mentioned, but also applies to other cases and other languages. For example, step 3 in the following scenario will result in undefined behavior:\n1. List&lt;Integer&gt; list = builder.getRepeatedFieldList();\n2. builder.addRepeatedField(value);\n3. for (Integer element : list) {...}\n\nIt might be better to throw an exception to let the user aware of the problem, but given the implementation overhead to address this, I would prefer leaving it as-is. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54865771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55028176", "body": "Please sign this Google Individual Contributor License Agreement:\nhttps://developers.google.com/open-source/cla/individual?csw=1\n\nand let me know when you are done. It's required for us to use your code.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/55028176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/9017929", "body": "We are in the process of updating protobuf developer guide to include new features in proto3. It will be eventually available there:\nhttps://developers.google.com/protocol-buffers/docs/overview\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9017929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9019790", "body": "Documentation for maps and arenas will be published soon. Maybe next month or so. The documentation for proto3 will come after that. Currently I don't think there is anything publicly available except the v3.0.0-alpha-1 change log.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9019790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/comments/11465942", "body": "This file is objective-c specific. Why is it in the top level directory instead of in the objective directory?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11465942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17762650", "body": "Can you make this macro only contain the string literal? I remember \"#define XXX #error\" doesn't compile on some platforms (likely to be VC on windows).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17762650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763653", "body": "I was suggesting:\n#define PLATFORM_ERROR \"Host platform ...\"\nand then\n#error PLATFORM_ERROR\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763709", "body": "It should be ok if such \"#define XXX #error\" is already used elsewhere in protobuf. I'll merge the patch.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17325179", "body": "This is a public method. Removing it will break existing clients. Please keep the old one and add a new method instead.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17325179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377709", "body": "Please remove use of this StandardCharsets.\n\nThis StandardCharsets is introduced only since jdk 1.7. Our library supports back to jdk 1.5. We probably can drop 1.5 support soon but I believe jdk 1.6 will be supported for quite some time.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377836", "body": "Please add new tests rather than replacing existing tests. Here you have removed the test coverage of the ByteString.toString(String) method.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17377836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17884353", "body": "Please test both ByteString.toString(String) and ByteString.toString(Charset) here (you added a test case for the latter but removed the test case for the former).\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17884353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862241", "body": "Can you update this copyright notice and remove lines that have \"Protocol Buffers\", \"Google\"? \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862262", "body": "Replace \"Google Inc.\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17862262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17876428", "body": "I was suggesting putting yourself as the copyright owner and removing \"Google Inc.\", \"Google Protocol Buffers\" to  avoid confusion. Note that putting \"Google Inc.\" here does not affect your rights.\n\nLet me know if you want to use your own name, or is fine with using \"Google Inc.\".\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17876428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18603716", "body": "Can you register this function with google::protobuf::internal::OnShutdown() instead? ShutdownProtobufLibrary() wil call these callbacks and release all memory allocated by protobuf runtime.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18603716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695045", "body": "Could you instead update EXPECT_EQ's implementation to make it work for this case?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695090", "body": "Replace \"Google Inc.\"\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19695090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20127837", "body": "Then it's a problem in gtest. I don't think it's good idea to make this change in protobuf code. Could you revert this EXPECT_EQ() change from this PR?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20127837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20175209", "body": "What I meant is replacing \"Google Inc.\" with \"Bloomberg Finance LP.\" in line 13.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20175209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20474781", "body": "Can you change them to use \"kint32min\" and \"kint32max\" (defined [here](https://github.com/google/protobuf/blob/master/src/google/protobuf/stubs/common.h)) and remove the inclusion of <stdint.h>?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20474781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dierksen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4184", "title": "Migrate away from deprecated OSAtomic APIs.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4183", "title": "Add support for libc++ on Windows.", "body": "This disables a couple of workarounds which are only necessary with\r\nMSVC's standard library and cause problems with libc++.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "angusek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4180", "title": "3.5.1.1", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ctaggart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4179", "title": "enable source link for csharp", "body": "@jskeet Thanks for adopting SourceLink.Create.CommandLine in the [Google Cloud .NET tools](https://github.com/GoogleCloudPlatform/google-cloud-dotnet/blob/master/tools/Google.Cloud.Tools.ProjectGenerator/Program.cs#L83). SourceLink 2.7 helps add the portable pdb files to the nupkg as well.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gaffneyc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4174", "title": "Ruby: Build packages for Ruby 2.5", "body": "Installing the gem on MacOS with Ruby 2.5 fails due to not having been\r\ncross compiled for 2.5.0.\r\n\r\nBased on [a commit to support 2.4.0](014a5507fb4b1ccc12f35ff313b8a04c05d69b7f)\r\n\r\nFixes #4098", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OskarKinomoto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4172", "title": "Add guards against bswap_XX redefnitions", "body": "Signed-off-by: Oskar S\u0301witalski <oskar.switalski@indoorway.com>", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4168", "title": "Use versions module from Skylib for version checking ", "body": "Many Bazel repositories implement their own version comparison functions - one implementation is now in [bazelbuild/bazel-skylib](https://github.com/bazelbuild/bazel-skylib/blob/master/lib/versions.bzl).\r\n\r\nFurther details: https://github.com/bazelbuild/bazel/issues/4433.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike9005": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4167", "title": "Fix scope resolution for MessageExts in Ruby", "body": "Importing and building protobuf classes in Ruby implicitly depends on the namespace in which the protos in question have been placed. This isn't a problem for most use cases, but scope resolution breaks if used in a module also named `Google`. This PR updates the message class builder to access the`Google::Protobuf::MessageExts` from the outermost namespace as is expected.\r\n\r\nE.g. A simple proto message defined in `package foo.apis.google;` will result in generated code like this:\r\n```\r\nrequire 'google/protobuf'\r\n\r\nGoogle::Protobuf::DescriptorPool.generated_pool.build do\r\n  add_message \"foo.apis.google.Color\" do\r\n    optional :red, :float, 1\r\n  end\r\nend\r\n\r\nmodule Foo\r\n  module Apis\r\n    module Google\r\n      Color = Google::Protobuf::DescriptorPool.generated_pool.lookup(\"foo.apis.google.Color\").msgclass\r\n    end\r\n  end\r\nend\r\n```\r\nThis will fail on import with a `NameError: uninitialized constant Foo::Apis::Google::Protobuf`", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vastri": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4166", "title": "Make python_srcs target publicly visible", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skebanga": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4145", "title": "Add TextFormat::Parser AllowUnknownField", "body": "As in [#2092](https://github.com/google/protobuf/pull/2092) which added `AllowUnknownField` support for Java, this does the same for C++.\r\n\r\nThe default behaviour of throwing an exception remains.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sschuberth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4142", "title": "Remove the executable bit from several source code files", "body": "This potenitally avoids compiler warnings.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lvht": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4135", "title": "PHP: Add support for generating php code for plugin.proto", "body": "Generate php file for the **plugin.proto**, so that we can use php to develop protoc-gen-plugin.\r\n\r\nAlso fix the issue #3220\r\n\r\nAnd here is a demo,\r\n\r\n```php\r\n<?php\r\nrequire './vendor/autoload.php';\r\n\r\n$input = file_get_contents(\"php://stdin\");\r\n$request = new Google\\Protobuf\\Internal\\CodeGeneratorRequest;\r\n$response = new Google\\Protobuf\\Internal\\CodeGeneratorResponse;\r\n$request->mergeFromString($input);\r\n\r\n/** @var \\Google\\Protobuf\\Internal\\FileDescriptorProto $fs */\r\n$fs = $request->getProtoFile()[0];\r\n$package = $fs->getPackage();\r\n\r\n$f = new \\Google\\Protobuf\\Internal\\CodeGeneratorResponse_File();\r\n$f->setName(\"foo.php\");\r\n$f->setContent(\"<?php // $package\\n\");\r\n\r\n$response->setFile([$f]);\r\n\r\nfile_put_contents(\"php://stdout\", $response->serializeToString());\r\n```\r\n  ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidChennells": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4128", "title": "Add VS2017 optional component dependency details to the C# ReadMe for #4119", "body": "Add mention to the \"Build\" section of the ReadMe of the requirement of installing an optional component to VS2017, as discussed with @jskeet in #4119.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thisch": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4117", "title": "Add __init__.py files to compiler and util subpackages", "body": "The compiler and util subpackages are created by the build_py class in\r\nsetup.py. This has caused an issue in the protobuf package in\r\nconda-forge (https://github.com/conda-forge/protobuf-feedstock/issues/40). This\r\ncommit fixes this issue.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "code4ever": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4114", "title": "check null for reference type object before writeto can avoid many nullpointer exception", "body": "\u2026llpointer exception.\r\n\r\nSigned-off-by: code4ever <jessee_hustcs@126.com>", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "larrytin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4112", "title": "Support Conversion between JSON and message in Objective C", "body": "Fixes google/protobuf#1982\r\nFixes google/protobuf#1675\r\nFixes google/protobuf#3935", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cn007b": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4106", "title": "Improved install command.", "body": "Added `-y` flag to `sudo apt-get` command.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "os12": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4092", "title": "POC: improved the generated C++ code", "body": "This is a POC for #4091:\r\n  - mutable accessors return a mutable C++ reference\r\n  - repeated fields generate a mutable accessor with a natural name\r\n\r\nThe point here is unify reader and writer scenarios:\r\n\r\n**A reader:**\r\n```\r\nmessage.repeated_field(1).map_field()[0].value();\r\n```\r\n\r\n**A proposed writer:**\r\n```\r\nmessage.repeated_field(1).map_field()[0].set_value(...);\r\n```\r\n\r\nAll tests compile and pass on Linux x86-64 using GCC 4.8 (Ubuntu 14). I have not compiled in other environments...", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rogerhub": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4088", "title": "Add *_pb2_grpc.py files to py_proto_library outputs if gRPC is enabled.", "body": "I'm not sure how use_grpc_plugin=1 is supposed to work with the current build rule. It seems like the Python gRPC plugin generates *_pb2_grpc.py files, which are promptly thrown away by Bazel because they aren't listed in the outs. So, _PyOuts should have a use_grpc_plugin flag (just like _CcOuts, which strangely is currently unused).", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neundorf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4084", "title": "Fix build for Intel compilers.", "body": "The full discussion is in ticket #4069 .\r\nThe Intel compilers version 15 and 16 fail at this static_assert.\r\nThe warning 2196 \"routine is both inline and noninline\" makes it impossible to build make check, so disable this warning.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anandolee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4081", "title": "Add DiscardUnknownFields support for csharp", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "epidemian": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4052", "title": "Ruby: make .to_json method play nice with builtin json module", "body": "Generated Ruby message objects implement a convenience `to_json` method that return a JSON-formatted string for that message.\r\n\r\nHowever, that `to_json` method doesn't play nice with native Ruby's [`json` module](http://ruby-doc.org/stdlib-2.4.0/libdoc/json/rdoc/JSON.html), specially in the case of nesting a protobuf message into a data structure like an Array or a Hash. Take this example program:\r\n\r\n```ruby\r\nrequire 'json'\r\nrequire 'google/protobuf'\r\n\r\nGoogle::Protobuf::DescriptorPool.generated_pool.build do\r\n  add_message 'MyMessage' do\r\n    optional :str, :string, 1\r\n  end\r\nend\r\n\r\nMyMessage = Google::Protobuf::DescriptorPool.generated_pool.lookup('MyMessage').msgclass\r\n\r\nmessage = MyMessage.new(str: 'foobar')\r\n\r\nputs(message.to_json) # => {\"str\":\"foobar\"}\r\nputs([message].to_json) # ArgumentError: wrong number of arguments (given 1, expected 0)\r\nputs({message: message}.to_json) # ArgumentError: wrong number of arguments (given 1, expected 0)\r\n```\r\n\r\nThis PR simply adds an optional argument to the `to_json` method of these generated classes. This argument is completely ignored, but makes it possible to nest protobuf objects into Ruby data structures and then serialize everything with a `to_json` call.\r\n\r\nWith this patch, the above code runs and yields:\r\n\r\n```\r\n{\"str\":\"foobar\"}\r\n[{\"str\":\"foobar\"}]\r\n{\"message\":{\"str\":\"foobar\"}}\r\n```\r\n\r\n\ud83d\ude38 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djudd-stripe": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/4021", "title": "Add CLI flag --schemas_out to turn descriptor set back to .protos", "body": "This is a proposed feature, on which I'm looking for comment. I haven't implemented tests yet, but will if folks like the idea.\r\n\r\nThe main use case I have is generating .proto schemas from another, canonical schema definition. Rather than writing out .proto strings myself, it seems safer/nicer to build a descriptor set object using standard setters and then use google/protobuf C++ code to turn that into .proto strings, and I'm not working in C++ so would like to be able to shell out to protoc.\r\n\r\nEvidence that I'm not the only person who has wanted this feature: https://stackoverflow.com/questions/19418655/restoring-proto-file-from-descriptor-string-possible\r\n\r\nI should be covered by the Stripe CLA, although the bot doesn't always seem to recognize that.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3993", "title": "Include googletest as a submodule", "body": "This fixes #236.  Currently it patches googletest to support autoconf / automake builds, because google/googletest#776.  I have submitted google/googletest#1341 to fix that problem, but until it is accepted the patches work around the underlying googletest issue.\r\n\r\nThe builds with cmake and bazel do not need such hacks.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "laszlocsomor": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/protobuf/pulls/3985", "title": "BUILD,globs: ignore *.pb.{h,cc} in the source tree", "body": "The globs were picking up such files and created\r\ndependency cycles so I could no longer build\r\n//:protoc on Windows.\r\n\r\nThis is what happened:\r\n\r\n1. I built the tests with CMake. As part of that,\r\n   CMake generated header files in the source\r\n   tree, such as\r\n   \"src/google/protobuf/unittest_lite.pb.cc\"\r\n\r\n2. I attempted to build \"//:protoc\" with Bazel:\r\n\r\n2.1. As part of loading the BUILD file, Bazel\r\n     expanded glob() statements in the\r\n     \"protobuf\" cc_library's hdrs attribute.\r\n\r\n2.2. The result of glob() expansion is a list of\r\n     labels, and the expanded list included\r\n     \"src/google/protobuf/unittest_lite.pb.cc\"\r\n\r\n2.3. After glob() expansion, Bazel parsed all rule\r\n     definitions. It found the\r\n     \"cc_test_protos_genproto\" rule which\r\n     generates a file called\r\n     \"src/google/protobuf/unittest_lite.pb.cc\"\r\n\r\n2.4. Because Bazel can't tell from a label whether\r\n     it refers to a source file or a generated\r\n     file or a rule -- after all, srcs=[\"foo.cc\"]\r\n     could refer to either the source file\r\n     \"foo.cc\", or the generated file \"foo.cc\", or\r\n     the rule called \"foo.cc\" -- Bazel didn't\r\n     realise that it should depend on the source\r\n     file \"unittest_lite.pb.cc\", not on the output\r\n     file \"unittest_lite.pb.cc\". (Or that it\r\n     should error out because of the ambiguity.)\r\n\r\n2.5. Building the generated file\r\n     \"unittest_lite.pb.cc\" however involves\r\n     running the protocol compiler, which involes\r\n     building \":protoc\", which depends on the\r\n     \":protobuf\" rule, thus we now have a\r\n     dependency cycle.\r\n\r\n3. It made debugging more difficult that the\r\n   .gitignore file includes a pattern to match the\r\n   CMake-generated headers, so I didn't see any\r\n   new files in \"git status\", so I initially ruled\r\n   out globs as the source of the problem.\r\n\r\nTakeaway:\r\n- Bazel should error out if labels are ambiguous.\r\n- As a workaround, the glob() should use exclude\r\n  statements. This commit adds that.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/3984", "title": "Windows: expand wildcard arguments", "body": "Fixes https://github.com/google/protobuf/issues/3957", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gpshead": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/53639155", "body": "internal/cpp_message.py is a leftover from the previous version that shouldn't exist anymore.\n\nthe code in internal/descriptor.py reads:\n\n  if api_implementation.Version() == 2:\n    from google.protobuf.pyext import _message\n  else:\n    from google.protobuf.internal import cpp_message\n\nwhich should really just be edited to avoid the version check and be \"from google.protobuf.pyext import _message\".  along will all other version checks using _message vs cpp_message in that file to get rid of cpp_message references all together.\n\nIf you set _both_ of the magic environment variables before any google.protobuf imports, it works:\n\ngreg:~/sandbox/python/protobuf/python$ LD_LIBRARY_PATH=../src/.libs/ PYT\nHONPATH=./ python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56)  \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n> > > from google.protobuf.internal import api_implementation\n> > > api_implementation.Type()\n> > > 'python'\n> > > api_implementation.Version()\n> > > 1\n> > > from google.protobuf import descriptor\n\ngreg:~/sandbox/python/protobuf/python$ LD_LIBRARY_PATH=../src/.libs/ PYTHONPATH=./ python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56)\n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n> > > import os\n> > > os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION_VERSION'] = '2'\n> > > os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'cpp'\n> > > from google.protobuf.internal import api_implementation\n> > > api_implementation.Type()\n> > > 'cpp'\n> > > api_implementation.Version()\n> > > 2\n> > > from google.protobuf import descriptor\n> > > descriptor._message\n> > > <module 'google.protobuf.pyext._message' from 'google/protobuf/pyext/_message.so'>\n\nthere is something IMNSHO weird going on with the setup.py and how it builds _message.so and apparently _moves it outside of the build/lib.\\* tree afterwards (WTF?). But given we want to revisit our entire setup.py for this anyways... i expect that to be untangled in the future.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/53639155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54351774", "body": "Blanket Python 3 support was unintentionally listed in these release notes. We need to fix that up for a 2.6.x release.  The code itself is ready with some 2to3 use, the setup.py and deps are not done yet.  Sorry about that!\n\nHere's my summary:\n- Support for Python 3 is _almost_ in place.  Our setup.py does not yet do the right thing for 2to3 conversions with Python 3 but for the adventurous, manually run the following files through 2to3 and it should work in Python 3.3+:\n\nprotobuf/descriptor.py\nprotobuf/internal/cpp_message.py\nprotobuf/internal/decoder.py\nprotobuf/internal/python_message.py\nprotobuf/internal/type_checkers.py\nprotobuf/internal/message_cpp2_test.py\nprotobuf/internal/message_factory_test.py\nprotobuf/internal/message_factory_cpp2_test.py\nprotobuf/internal/message_factory_python_test.py\nprotobuf/internal/message_python_test.py\nprotobuf/internal/message_test.py\nprotobuf/internal/reflection_cpp2_generated_test.py\nprotobuf/internal/reflection_python_test.py\nprotobuf/internal/reflection_test.py\nprotobuf/internal/test_util.py\nprotobuf/internal/text_format_test.py\nprotobuf/message_factory.py\nprotobuf/text_encoding.py\nprotobuf/text_format.py\n\nsetup.py also specifies an external dep on google-apputils needed in order to run the unittests. We need to push out an updated version of that with Python 3 support.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54351774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54352069", "body": "See my comment on https://github.com/google/protobuf/issues/7 with details for what remains to be done for this to work out of the box under Python 3. The setup code hasn't been updated for python 3 yet; the listed files in that issue need running through 2to3 as part of the process.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54352069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dhirschfeld": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084220", "body": "I've submitted the form electronically so we'll see where we go from there...\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084995", "body": "There are 2 implementations of `cpp_message`, one in [`internal`](https://github.com/google/protobuf/blob/a21bf2e6466095c7a2cdb991017da9639cf496e5/python/google/protobuf/internal/cpp_message.py) which @gpshead says in issue #2 should have been deleted.\n\nThere's a second implementation in [`pyext`](https://github.com/google/protobuf/blob/a21bf2e6466095c7a2cdb991017da9639cf496e5/python/google/protobuf/pyext/cpp_message.py) which seems to be a lightweight wrapper over the cpp `_message` module which seems to be required because its referenced in [`reflection.py`](https://github.com/google/protobuf/blob/a21bf2e6466095c7a2cdb991017da9639cf496e5/python/google/protobuf/reflection.py#L60).\n\nWithout specifying `cpp_message.py` in thge `py_modules` list neither `cpp_message.py`, _nor the `__init__.py`_ are copied to the `pyext` module hence `_message.pyd` isn't importable in the resulting package. if the second `pyext\\cpp_message.py` module isn't required perhaps the `__init__.py` will have to be specified to force it to appear in the resulting python package\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54084995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dragonsinth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54387312", "body": "Okay, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54387312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "huahang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54397640", "body": "@xfxyjwf \n\nmy bad. it has been submitted as the following pull request:\n\nhttps://github.com/google/protobuf/pull/12\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54397640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54420272", "body": "Great! Thanks!\n:+1: \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54420272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54576145", "body": "@xfxyjwf\n\ndone\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54576145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "estekhin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54419919", "body": "It is present in the maven central since September 4: http://search.maven.org/#artifactdetails%7Ccom.google.protobuf%7Cprotobuf-java%7C2.6.0%7Cbundle\n\nSeems like it was done.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54419919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brettcannon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54480744", "body": "Any specific reason for wanting to use 2to3 instead of something like https://github.com/python-modernize/python-modernize to do the transition once?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54480744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54747937", "body": "By unifying the code base to work on both Python 2 and 3 it makes development easier and installation faster (unless you release separate Python 2 and 3 packages). By not having to wait for 2to3 you eliminate a compile step during development. As for installation, you can forgo that step entirely. Plus the coding practices used in converted source is more in line with modern best practices and syntax.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54747937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mrovner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54718106", "body": "It says\n\"Modernizes Python code for eventual Python 3 migration. Build on top of\n2to3\"\n\nand it's not apparent why it's better ;)\n\nAlso 2to3 support is in setuptools already.\n\nOn Thu, Sep 4, 2014 at 6:59 AM, Brett Cannon notifications@github.com\nwrote:\n\n> Any specific reason for wanting to use 2to3 instead of something like\n> https://github.com/python-modernize/python-modernize to do the transition\n> once?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/protobuf/issues/7#issuecomment-54480744.\n\n## \n\nThanks,\n--Mike\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54718106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "protobufel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/protobuf/issues/comments/54722164", "body": "It must be significant for OSGI uses, for others it's not.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54722164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54930258", "body": "Collections' modCount like? :)\n\nUnderstood!\n\nDavid\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/issues/comments/54930258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tseaver": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/8546305", "body": "According to http://stackoverflow.com/a/3233069, this needs to be preceded by `#define __STDC_LIMIT_MACROS` for standards-conforming compilers.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8546305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20477915", "body": "Done in 8b2aafe.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20477915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510738", "body": "+1.  This kind of alternate block is typical for code which \"straddles\" Python2 and Python3.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511079", "body": "I'm not sure why we need the `iteritems` at all, given that we are going to iterate the whole thing.  Even the `copy()` is unneded, as the loop body doesn't mutate the function's locals:\n\n```\nfor key, value in locals().items(): \n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511152", "body": "Likewise, we can forego the `iteritems` here:\n\n```\nfor extension_name, extension_field in extension_dict.items():\n```\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510673", "body": "+1.  Replacing the old, Python2-only 'ez_setup.py' with one from the setuptools bitbucket repo is definitely the Right Thing.  FTR, the permalink for \"latest and greatest\" `ez_setup.py` is:  https://bootstrap.pypa.io/ez_setup.py\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20510673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511489", "body": "+1 for dropping support for Python < 2.6.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/20511489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ellabeth6500": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/8670572", "body": "I speak norwegian. option:mulighet? to early.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8670572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/8672037", "body": "My computer i new. I can`t say yes or no! \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8672037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/8672049", "body": "I am studuing\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/8672049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hassox": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/9017196", "body": "Is there any information on where to find the proto3 specification?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9017196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9017271", "body": "I found https://github.com/google/protobuf/releases/tag/v3.0.0-alpha-1 but I'm wondering if there's any more information available. \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9017271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9018166", "body": "thanks. Any idea of timeline or any discussion of extensions, map and any that I could get a look at earlier?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9018166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/9019923", "body": "kk thanks. It's a bit hard to plan for when there's no information out there :\\  Thankyou for the update though.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/9019923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wilsonwen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10114998", "body": "\u53ea\u662f\u56e0\u4e3a\u5728\u4eba\u7fa4\u4e2d\u591a\u770b\u4e86\u4f60\u4e00\u773c\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10114998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "alfredkcp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10125327", "body": "This line is incorrect for 3.0 and caused the issue 692 bug. The proper check should be about \"field->containing_oneof()\" because there will always be a has_() for each oneof.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10125327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cfallin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10128970", "body": "Responded in issue #234. For proto3, this is correct: only message fields have `has_...()` methods. This was an intentional design decision by the proto3 design team. Note a few lines up that for proto1/proto2, all fields have `has_...()` methods.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10128970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lovesitdoll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10620435", "body": "lovesitdolls\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10620435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cnepveu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10653512", "body": "\"Android\", me thinks.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10653512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "onecityuni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/10711246", "body": "J2me/MANIFEST. in\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10711246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/10711302", "body": "find_packages \n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10711302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/protobuf/comments/10711321", "body": "== 0\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/10711321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "attilaolah": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11087217", "body": "This seems to be what caused #333.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11087217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "marrisan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11437469", "body": "Leave a line note\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11437469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jcanizales": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/protobuf/comments/11466120", "body": "Unfortunately, Cocoapods gives trouble if the podspec isn't in the root of the repository. From my experience, at least it won't pick up the license file correctly, and it won't let dependent projects use the :git notation to refer to the library. On gRPC I had decided to stop fighting the tool and give it what it wanted: the podspec in the root of the repo.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/comments/11466120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "edmonds": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763468", "body": "I copied the style from https://github.com/google/protobuf/blob/v2.6.0/src/google/protobuf/stubs/atomicops.h#L163, so there is already an instance of that construct in the code base :-)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763600", "body": "Also, I'm not quite sure what you're asking for. Do you want the end result to be a bare string constant, causing a syntax error, rather than using `#error` at all?\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17763600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "phraktle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17883462", "body": "Removed use of StandardCharsets. Since String#getBytes(Charset) was introduced in jdk 1.6 (which is the whole point of this change), support for jdk 1.5 cannot be provided.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/17883462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "abuszta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18627145", "body": "Done :)\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/18627145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "apaprocki": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732054", "body": "I put our name here because I saw that `atomicops_internals_generic_gcc.h` contained copyright by Red Hat. I can always change it -- just wanted to make sure I was doing the proper thing.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732257", "body": "From what I see, `EXPECT_EQ` is provided by `gtest`, so it can't be changed.\n", "reactions": {"url": "https://api.github.com/repos/google/protobuf/pulls/comments/19732257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}