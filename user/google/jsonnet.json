{"_default": {"1": {"sparkprime": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/445", "title": "Canonicalize ||| line endings", "body": "Ensure unix2dos does not change output of Jsonnet execution.\r\n\r\nDiscussion was in #421", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/437", "title": "Keyword that returns most recently nested field.", "body": "edit: Completely rewrote the example as it was nonsense...\r\n\r\n```\r\nlocal Template(name) = { name: name };\r\n\r\n{\r\n  local outer = self,\r\n  path: [],\r\n  f: Template(here) {\r\n    local outer2 = self,\r\n    path: outer.path + [self.name],\r\n    g: Template(here) {\r\n      local outer3 = self,\r\n      path: outer2.path + [self.name],\r\n    },\r\n  },\r\n} \r\n```\r\n\r\nyields\r\n\r\n```\r\n{\r\n   \"f\": {\r\n      \"g\": {\r\n         \"name\": \"g\",\r\n         \"path\": [\r\n            \"f\",\r\n            \"g\"\r\n         ]\r\n      },\r\n      \"name\": \"f\",\r\n      \"path\": [\r\n         \"f\"\r\n      ]\r\n   },\r\n   \"path\": [ ]\r\n}\r\n```\r\n\r\n@andreabedini expressed interest in this feature", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/437/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/415", "title": "Consider try / catch functionality", "body": "Currently `error \"foo\"` is like throwing an exception, but there is no way to catch the exception.\r\n\r\nMotivations for \"catch\":\r\n1) Routines that loop over data and trigger errors for particular items don't have useful stack traces because the line of code in the stack trace doesn't tell you e.g. which array index caused the problem.  This is particularly important in custom manifestation functions where we typically iterate over the tree forcing fields.\r\n2) It is currently not possible to write test cases in Jsonnet that check that the correct error is raised.\r\n3) It is not possible to detect using reflection that a field requires overriding, because we typically represent that with `f: error \"Must overide f\"` see #414.\r\n\r\nCaveats:\r\n- Should it be possible to catch \"runtime errors\" like `1/0` or `[1,2,3][10]`?  If not, how do we distinguish?\r\n- Should it be possible to catch major errors like exceeding stack size?  If not, how do we distinguish?\r\n- It is clearly not possible to catch non-termination (halting problem).\r\n- Should error values be cached in thunks?\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/405", "title": "cpp stack traces are lagging behind go ones", "body": "See test cases:\r\n\r\ntest_cmd/ext3\r\ntest_cmd/max_stack1\r\ntest_cmd/max_stack2\r\ntest_cmd/max_trace1\r\ntest_cmd/max_trace2\r\ntest_cmd/max_trace3\r\ntest_cmd/max_trace4\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/390", "title": "Comprehension performance matches Go implementation", "body": "std.flatMap already exists, just need to desugar them to use it.  Go code serves as a guide.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/389", "title": "importstr should fail on bad UTF-8", "body": "The current behavior (transparently inserting unicode error chars) is not very helpful.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/378", "title": "Prevent changing meaning of std in desugared expressions", "body": "See https://github.com/google/go-jsonnet/issues/69", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/355", "title": "Add YAML gotchas to comparisons page", "body": "http://blog.teamlazerbeez.com/2009/04/15/yaml-gotchas/\r\nhttps://docs.saltstack.com/en/latest/topics/troubleshooting/yaml_idiosyncrasies.html\r\nhttps://www.elastic.co/guide/en/beats/filebeat/5.3/yaml-tips.html\r\nhttps://www.reddit.com/r/programming/comments/8cpe2/yaml_gotchas_we_learned_the_hard_way/\r\n\r\n@mbrukman ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/94829caabe9356d09063a674d512ce26f9450be9", "message": "Chomp whitespace after |||, including \\r, fix #421"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/44dbc4342e41913e88ca3642ba69fe1d4c134194", "message": "Escape filename in import error, fix #372"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/6cb8d4d5e7a3accb116b0fcf79240137be420dd5", "message": "Add string replace function"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/ce82241452e5c496496086d38770eaa0fa9c8a57", "message": "Null field values now ignored in object comps, just like regular objects"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d17db72a8222d26894f17ce650591d44e7bd8577", "message": "Script now refreshes all args"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/12db0bda9227c9cb5cd73b3cf57beeea2ecd446f", "message": "Fix use of e in abstract syntax"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e5e7e8360269a2718a1e9ae09bbca71ae8b6a579", "message": "Fix operational semantics of object comprehension when field expression was stuck"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/30240d9658540c73b349dde23f482285c5b433fb", "message": "give full commandline in failing test"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d9e9d920bdd31eb7ddd284212ef8fa0c8cc7a420", "message": "Ensure libjsonnet.js is always built before pushing website"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8ad88ce929c6716e921e357a7f7ea2d2966d48b5", "message": "Don't waste as much stack space while parsing. (#431)\n\nRedesign parser to use less stack space"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/2d25d9e38db86e5f4b59fd231f80c3fb47336e0e", "message": "Add top level function test with no tla"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/8fe9bf5e05e1cedf27d187f8050313d6c96186ef", "message": "fix bazel"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b11fc89c94492941ea8c908602f9885947dc18c7", "message": "Add server side recommendation"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/b8a626a7854af5a49d24f0174b537ae57e462739", "message": "Update to latest jekyll"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e810b43ccee0e57423b3669ba393dda34e94cd36", "message": "Remove \"rvm get head\" workaround to see what happens"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/e78a7e5a05e8bcd7d952f210630dc1bdcb49ecdd", "message": "backwards incompatible: make std.join more strict about types"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/005d048507b8bbf74aaeea9bd8fe3c7687c9a7bb", "message": "attempt to work around broken travis"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/1ddf38e6f697d95c413c488a22fb0f63e1f50a83", "message": "fix escape codes in spec (#418)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d41445767f7528c9dd8096c158d366f05188cda3", "message": "Add JSONNET_PATH environment variable. (#417)\n\n* Add JSONNET_PATH environment variable."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d8d3f88bb2a04665fec9c9ea30ffeb54a86d5826", "message": "Fix EOF token, parser tests (#413)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/5c17788d4d692f0012592e9dd8e1914a0c2444fc", "message": "Fix format of object with empty field name '' (#412)"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/74eb5efa5e8838b72489f556f1c289696ea2e67c", "message": "Add some Jsonnet programs that take a while to execute. (#399)\n\n* Add some Jsonnet programs that take a while to execute."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d5c3431f5cc9e6f86be821ea3a8c3181ceda2e1d", "message": "improve compatability of go stack traces"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/93055441975d874bf03e832f4ef8b71bc2eef882", "message": "Some UX improvements to commandline tool + cmdline tests"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/14805f679db844921c17ecd338c71f4f08749fed", "message": "Fix git diff not showing anything sometimes"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/c20caa0f627bfee1fc98f02b162e6656c1bc3343", "message": "Change column in error messages to be half-open [,) for consistency with other compilers"}, {"url": "https://api.github.com/repos/google/jsonnet/commits/d4434c8df41c46d4ed11958677a655f0d1c52f87", "message": "Fix #386"}], "pull_requests": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/444", "title": "Add std.isFoo for various types", "body": "Fix #393 ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/53116438", "body": "Optimization is implicit for now.  We may revisit this later, e.g. define a tail keyword and put it on the end of a function call.  This could also implicitly force the arguments of the function, making code easier to write.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/53116438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54084339", "body": "Closing as per conclusion of parallel discussion on google groups.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54084339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54087158", "body": "Sounds great!  Do post your findings on the Google group :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54087158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/56136521", "body": "Ideally we would use libreadline, but would need an #ifdef for windows, and I'm not sure whether it'd work out-of-the-box on OSX.\n\nOn the plus side, this doesn't affect libjsonnet.so.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/56136521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57722145", "body": "Thinking more about this, the only thing I know how to provide is the ability to execute complete programs on each line, i.e. the only benefit over using jsonnet -i 'foo' is avoiding typing jsonnet -i ''\n\nImperative languages like Scala have an easier time because they have this notion of intermediate state.\n\nAnd in contrast with Haskell, Jsonnet does not have the notion of top-level declarations, it is not possible to parse just \"local x = 4\";\n\nSo given all that, do you still think it's worth it?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57722145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62846691", "body": "It looks like this is still failing, on gcc because of parser.cpp:621:18: error: expected identifier before \u2018[\u2019 token\n\nand on clang because of \n\nparser.cpp:621:19: error: clang::fallthrough attribute is only allowed on empty\n      statements\n                [[clang::fallthrough]]\n                  ^\nparser.cpp:621:39: note: did you forget ';'?\n                [[clang::fallthrough]]\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62846691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64052921", "body": "Cool!  Did you change any of the code or is it just directory structure & build files?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64052921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/67575024", "body": "This is all now in trunk.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/67575024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/73459943", "body": "Fixed by prior referenced commit\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/73459943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598244", "body": "Those are doxygen constructs, although I've never actually run it through doxygen.  There are some more in state.h as well.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598987", "body": "Oh, I almost forgot, can I ask you to retroactively sign either the individual or corporate (as appropriate) contributor license agreements http://google.github.io/jsonnet/doc/contributing.html\n\nthanks\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600702", "body": "Perfect, thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600913", "body": "So the current documented behavior is for this case is the filename defaults to stdin.  That may not be particularly useful but it is documented as doing that :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76600913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76603910", "body": "https://github.com/google/jsonnet/commit/41c11d09a7d7c7b4c07a144946ab3672494721dd\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76603910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76762232", "body": "It'd be interesting to see how much code coverage is obtained by running the test suite.  There are definitely some holes, especially with different ways of using the C/Python APIs.\n\nI think since the test suite is pretty fast, it is ok as long as there is good coverage.  However, there are probably some things that are hard to get good coverage for, and unit tests would be good for that.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76762232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78360382", "body": "Being able to install Jsonnet's python bindings with just pip install jsonnet sounds awesome.\n\nCan we set it up so only stable releases get uploaded?  I'll cut a new one right now, it's been a while.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78360382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78706447", "body": "It worked for me, but I had to use --pre.  Presumably this is because I appended -beta to all the versions.  I did that because I misunderstood semantic versioning at the time :).  If I do a new release with just v0.8.1 do you think it would fix it?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78706447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/49598278", "body": "Absence of a .golden file means it should expect it to output just true, so you can delete this file.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/49598278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554170", "body": "Is there an advantage to having this as a separate AST if it can only be used inside the [ ] of an Index AST?\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554183", "body": "Basically you could extend Index to add the last and step ASTs which are null if they're not provided.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554214", "body": "The coding convention here is that locals on the stack follow the C style of foo_bar whereas fields of classes use fooBar.  While I'm at it, macros and constants are FOO_BAR.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554262", "body": "I think this code would be simplified by unrolling the loop and folding the constant i values in.  You could handle the breaks by nesting ifs.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554363", "body": "We should exactly replicate the semantics of Python\n\n```\n>>> range(0, 5)[0:10]\n[0, 1, 2, 3, 4]\n```\n\nAlso supporting negative numbers.  This can all be implemented in std.slice() :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554437", "body": "It'd be an interesting project to design a unit testing framework for Jsonnet.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554509", "body": "This should also work on strings and fail explicitly if arr is not a string or array type.  There is already str.substr but its semantics aren't right (see comment below).  So we should deprecate str.substr() and use this instead.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554618", "body": "Ideally the code should read like the BNF:\n\n```\ne ::= ...\n    | e '[' e [ ':' [ e ] [ ':' [ e ] ] ] ']'\n    | e '['     ':' [ e ] [ ':' [ e ] ]   ']'\n```\n\nI think that's the right syntax anyway :)\n\nedit: Actually that was wrong but I updated it.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53554618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880369", "body": "local build(slice, cur) = \n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881231", "body": "Oh this is bad unfortunately -- { x:: 3 } is lexed as the single token ::\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881311", "body": "I guess you can change the parser to check for that, a bit like C++ does with\n\n```\nC<vector<int>>\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881833", "body": "If you desugared them to null, you could test for null in std.slice and implement the full semantics that way\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53881833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882133", "body": "```\n>>> [1,2,3][None:None:None]\n[1, 2, 3]\n```\n\nIn fact this is mandatory for python compatibility :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882736", "body": "A workaround is also to do [ : : ]\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53882736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53962210", "body": "Yes I am not sure how to solve this.  There are various instances of it throughout the code.\n\nThe Python approach is to make std.join O(n) and then do everything in terms of that.\n\nCurrently std.join is O(n^2) and making it O(n) would mean making it native.\n\nThere may be a better way though.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53962210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54457505", "body": "The rest of the Jsonnet code in the repo uses 4 and 100.  It may be time to write a style guide.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54457505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "fajran": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/441", "title": "Any plan for a new release?", "body": "I would like to use Bazel to call Jsonnet and produce a Yaml file of Json documents. I have [my changes](https://github.com/fajran/rules_jsonnet/commit/42d467a0f95cc96678031383def89f070c8a3335) ready for the Jsonnet Bazel rules but it requires a newer version of Jsonnet, newer than 0.9.5, or something that includes 381d7ddd.\r\n\r\nIf we have a new release, I will create a PR to [bazelbuild/rules_jsonnet](https://github.com/bazelbuild/rules_jsonnet) project to use the new version.\r\n\r\nthanks!", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sbarzowski": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/440", "title": "[Documentation] asserts ", "body": "Let the users know that asserts exist, especially asserts with custom messages.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/394", "title": "Test jsonnet on more architectures (x86, arm)", "body": "It would be nice to test it on x86 (32-bit) and maybe arm, instead of just amd64.\r\n\r\nIt's possible that the numeric function behave differently. Some `size_t`-related bugs are also possible. \r\n\r\nSome compilation flags should be enough to check x86.\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/393", "title": "std.isString, std.isArray, std.isObject etc. ", "body": "I think it would usually be better to use something like std.isString(x) rather than std.type(x) == \"string\". The set of types is fixed, so this is very easy. \r\n\r\nRationale:\r\n- Easier to detect typos (std.type(x) == \"String\", std.type(x) == 'objcet', std.type(x) == 'int'...)\r\n- A builtin implementation of isString could be much, much faster.\r\n- Checking a type is a very fundamental operation used in other fundamental functions, e.g. in std.equals (implementation of ==).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/393/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/385", "title": "Named parameters used as positional for builtins", "body": "This works:\r\n```\r\nstd.makeArray(func=function(i) i, sz=5)\r\n```\r\nBut this does not work:\r\n```\r\nstd.makeArray(sz=5, func=function(i) i)\r\n```\r\nError:\r\n```\r\nRUNTIME ERROR: Builtin function makeArray expected (number, function) but got (function, number)\r\n        testdata/std.makeArrayNamed2.jsonnet:1:1-39\r\n```\r\n\r\nThe names are checked, but then arguments are treated as positional anyway.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/379", "title": "Fractal demo down?", "body": "http://www.fractaldemo.com/ is linked from http://jsonnet.org/case_studies/casestudy_fractal.1.html\r\n\r\nBut it times out.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/373", "title": "Weird indentation after alignment", "body": "This code is formatted with jsonnet fmt:\r\n```\r\nlocal stringToInt(s) =\r\n  local zeroCodepoint = std.codepoint(\"0\"),\r\n        stringToIntHelper(s, idx, acc) =\r\n    if idx == std.length(s) then // see what happened here?\r\n      acc\r\n    else\r\n      local digit = std.codepoint(s[idx]) - zeroCodepoint;\r\n      stringToIntHelper(s, idx + 1, acc * 10 + digit);\r\n  stringToIntHelper(s, 0, 0);\r\nstringToInt(\"42\")\r\n```\r\n\r\nA simpler artificial example:\r\n```\r\nlocal xxxxxxxxxxxxxxxxxxxx = 42,\r\n      yyyyyyy =\r\n  {\r\n    something_long: 42,\r\n  };\r\ntrue\r\n```\r\n\r\nSo if there are multiple binds in a local, and one of them has a body starting on a new line, that body gets weirdly dedented.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/368", "title": "Object assertions caching/performance issue", "body": "Consider the following code:\r\n```\r\nlocal n = 150;\r\nlocal arr = [{v: -1}] + std.makeArray(n, function(x) { v: x, assert arr[x].v == self.v - 1 });\r\narr\r\n```\r\n\r\nIt looks relatively innocent, but there are two problems with it:\r\n* It's quadratic (with regard to `n`)\r\n* It puts >3n frames on stack, so it easily goes over max stack frames limit.\r\nThis happens, because assertions are checked each time we index an object.\r\n\r\nIt's enough to check them once per object. \r\n\r\nThe PR adding the support object invariants in Go version already caches the result of assertion checking and doesn't have this problem.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/366", "title": "idea: json error output for consumption by tools", "body": "To avoid the need to parse custom format (and worrying about colons in filenames etc.).", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/365", "title": "fmt -i with multiple files aborting on first error", "body": "Maybe it could continue and report any errors from other files. ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/363", "title": "Strings not escaped in assertEqual errors", "body": "Code:\r\n```\r\nstd.assertEqual(\"\\n \", \"\\n\")\r\n```\r\n\r\nExpected output:\r\n```\r\nRUNTIME ERROR: Assertion failed. \"\\n \" != \"\\n\"\r\n        std.jsonnet:649:13-91   function <anonymous>\r\n        testdata/assert_equal5.input:1:1-28\r\n```\r\n\r\nActual output:\r\n```\r\nRUNTIME ERROR: Assertion failed. \r\n  != \r\n\r\n        std.jsonnet:649:13-55   function <anonymous>\r\n        testdata/assert_equal5.input:1:1-28\r\n```\r\n\r\nAnother example where it is pretty important:\r\n```\r\nstd.assertEqual(\"\\u001b[31m\", \"\")\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/362", "title": "More efficient array comprehensions and join", "body": "Currently they are unnecessarily quadratic - underneath they just use +. We can be easily improve that by using a builtin that builds the result array in one go. This was already done in experimental Go version using `flatMap` builtin. \r\n\r\nRelated #222. \r\n\r\nIdeally it would be verified automatically by some benchmarks (#360). ", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/361", "title": "Better error message for newbie mistake +: vs :+", "body": "I don't think this is actually very important, but it was a source of confusion at some point so here it is.\r\n\r\nIt's quite easy to write something like:\r\n```\r\n{x: {y: 1}} {x:+ { z: 2 }}\r\n```\r\nIt doesn't work and error message is mildly confusing:\r\n```\r\nRUNTIME ERROR: Unary operator + does not operate on type object\r\n```\r\n\r\nIt's worse on integer types (that I initially got a problem with), but I suppose this is not what `+:` was designed for anyway:\r\n```\r\n{x: 1} { x :+ 42}\r\n```\r\nIt doesn't fail, but the result is not what I expected:\r\n```\r\n{\r\n   \"x\": 42\r\n}\r\n```\r\n\r\nI think it can be easily made better by lexing `:+` as a single token. Then a much more friendly static error would appear:\r\n```\r\nExpected one of :, ::, :::, +:, +::, +:::, got: :+\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/360", "title": "Benchmarks", "body": "Having a set of standard benchmarks will help us improve performance in systematic way and avoid performance regressions.\r\n\r\nIt's also going to help making sure Go version is good enough performance-wise.\r\n\r\nSome benchmarks proposed by @sparkprime :\r\ndcunnin@casterly:~$ time jsonnet -e 'std.length([\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" for x in std.range(1,10000)])' > /dev/null\r\n\r\nreal    0m0.539s\r\nuser    0m0.472s\r\nsys     0m0.064s\r\ndcunnin@casterly:~$ time jsonnet -e 'std.length(std.join(\"\\n\", [\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" for x in std.range(1,10000)]))' > /dev/null\r\n\r\nreal    0m3.675s\r\nuser    0m2.928s\r\nsys     0m0.744s\r\n\r\nOne question is how to present the results (i.e. running time) in a way that can be easily compared across versions/implementations.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/359", "title": "Better defaults for jsonnet fmt", "body": "Right now `jsonnet fmt` by default does less than I would expect, e.g. it doesn't fix indentation. \r\n\r\nSomething like `jsonnet fmt -n 2 --max-blank-lines 1 --sort-imports` could be the default. \r\n\r\nI think that ideally long-term we would have something like `gofmt` which provides heavily opinionated, \"the only true\" formatting, without any knobs. Having reasonable defaults is the first step in this direction.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/359/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/358", "title": "Failed to build libjsonnet.js using emscripten", "body": "I tried building js version, but emscripten failed in a way that is completely mysterious to me. I don't really need js version for anything now, but, though.\r\n```\r\nsbarzowski@sbarzowski01:~/Work/jsonnet$ make libjsonnet.js \r\nem++ -s 'EXPORTED_FUNCTIONS=[\"_jsonnet_make\", \"_jsonnet_evaluate_snippet\", \"_jsonnet_realloc\", \"_jsonnet_destroy\"]' -g -O3 -Wall -Wextra -Woverloaded-virtual -pedantic -std=c++0x -fPIC -Iinclude -Ithird_party/md5 -Os --memory-init-file 0 -s DISABLE_EXCEPTION_CATCHING=0 -s OUTLINING_LIMIT=10000  core/desugarer.cpp core/formatter.cpp core/lexer.cpp core/libjsonnet.cpp core/parser.cpp core/pass.cpp core/static_analysis.cpp core/string_utils.cpp core/vm.cpp third_party/md5/md5.cpp -o libjsonnet.js\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\naborting from js compiler due to exception: unknown vector type <4 x i8> | undefined\r\nTraceback (most recent call last):\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1352, in <module>\r\n    _main(environ=os.environ)\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1340, in _main\r\n    temp_files.run_and_clean(lambda: main(\r\n  File \"/usr/share/emscripten/tools/tempfiles.py\", line 39, in run_and_clean\r\n    return func()\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1348, in <lambda>\r\n    DEBUG_CACHE=DEBUG_CACHE,\r\n  File \"/usr/share/emscripten/emscripten.py\", line 1235, in main\r\n    jcache=jcache, temp_files=temp_files, DEBUG=DEBUG, DEBUG_CACHE=DEBUG_CACHE)\r\n  File \"/usr/share/emscripten/emscripten.py\", line 292, in emscript\r\n    assert len(output) == 2, 'Did not receive forwarded data in an output - process failed? We only got: ' + output[0][-3000:]\r\nAssertionError: Did not receive forwarded data in an output - process failed? We only got: 0) {\r\n    $_01=-1;\r\n\r\n    return (($_01)|0);\r\n   }\r\n   $22=(($this+20)|0);\r\n   $23=((HEAP32[(($22)>>2)])|0);\r\n   $24=$12;\r\n   $25=$23;\r\n   $26=((($24)-($25))|0);\r\n   $27=(($this+44)|0);\r\n   $28=((HEAP32[(($27)>>2)])|0);\r\n   $29=$28;\r\n   $30=((($29)-($25))|0);\r\n   $31=(($this+32)|0);\r\n   __THREW__ = 0;invoke_vii('{{ FI___ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc }}',(($31)|0),((0)|0));\r\n   do {\r\n    if (!__THREW__) {\r\n     $33=$31;\r\n     $34=$31;\r\n     $35=((HEAP8[($34)])|0);\r\n     $36=$35&1;\r\n     $37=(($36<<24)>>24)==0;\r\n     if ($37) {\r\n      $42=10;\r\n     } else {\r\n      $39=(($31)|0);\r\n      $40=((HEAP32[(($39)>>2)])|0);\r\n      $41=$40&-2;\r\n      $phitmp=((($41)-(1))|0);\r\n      $42=$phitmp;\r\n     }\r\n\r\n     __THREW__ = 0;invoke_viii('{{ FI___ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc }}',(($31)|0),(($42)|0),((0)|0));\r\n     if (!(!__THREW__)) {\r\n      __THREW__ = 0;\r\n      break;\r\n     }\r\n     $43=((HEAP8[($34)])|0);\r\n     $44=$43&1;\r\n     $45=(($44<<24)>>24)==0;\r\n     if ($45) {\r\n      $50=(($33+1)|0);\r\n      $51=$50;\r\n     } else {\r\n      $47=(($this+40)|0);\r\n      $48=((HEAP32[(($47)>>2)])|0);\r\n      $51=$48;\r\n     }\r\n\r\n     $52=($43&255);\r\n     $53=$52&1;\r\n     $54=($53|0)==0;\r\n     if ($54) {\r\n      $59=$52>>>1;\r\n      $60=$59;\r\n     } else {\r\n      $56=(($this+36)|0);\r\n      $57=((HEAP32[(($56)>>2)])|0);\r\n      $60=$57;\r\n     }\r\n\r\n     $61=(($51+$60)|0);\r\n     HEAP32[(($22)>>2)]=$51;\r\n     HEAP32[(($13)>>2)]=$61;\r\n     $62=(($51+$26)|0);\r\n     HEAP32[(($11)>>2)]=$62;\r\n     $63=(($51+$30)|0);\r\n     HEAP32[(($27)>>2)]=$63;\r\n     $70=$62;$69=$63;$68=$61;$_pre_phi=$17;\r\n     break L4;\r\n    } else {\r\n     __THREW__ = 0;\r\n    }\r\n   } while(0);\r\n   $65$0 = ((___cxa_find_matching_catch(-1, -1,((0)|0)))|0); $65$1 = tempRet0;\r\n   $66=$65$0;\r\n   $67=((___cxa_begin_catch((($66)|0)))|0);\r\n   ___cxa_end_catch();\r\n   $_01=-1;\r\n\r\n   return (($_01)|0);\r\n  } else {\r\n   $_phi_trans_insert=(($this+44)|0);\r\n   $_pre=((HEAP32[(($_phi_trans_insert)>>2)])|0);\r\n   $_pre2=(($this+48)|0);\r\n   $70=$12;$69=$_pre;$68=$14;$_pre_phi=$_pre2;\r\n  }\r\n } while(0);\r\n\r\n\r\n\r\n\r\n $71=(($70+1)|0);\r\n $72=(($this+44)|0);\r\n $73=($71>>>0)<($69>>>0);\r\n $74=($73?$69:$71);\r\n HEAP32[(($72)>>2)]=$74;\r\n $75=((HEAP32[(($_pre_phi)>>2)])|0);\r\n $76=$75&8;\r\n $77=($76|0)==0;\r\n if (!($77)) {\r\n  $79=(($this+32)|0);\r\n  $80=$79;\r\n  $81=((HEAP8[($80)])|0);\r\n  $82=$81&1;\r\n  $83=(($82<<24)>>24)==0;\r\n  if ($83) {\r\n   $88=$79;\r\n   $89=(($88+1)|0);\r\n   $90=$89;\r\n  } else {\r\n   $85=(($this+40)|0);\r\n   $86=((HEAP32[(($85)>>2)])|0);\r\n   $90=$86;\r\n  }\r\n\r\n  $91=(($90+$10)|0);\r\n  HEAP32[(($6)>>2)]=$90;\r\n  HEAP32[(($4)>>2)]=$91;\r\n  $92=(($this+16)|0);\r\n  HEAP32[(($92)>>2)]=$74;\r\n }\r\n $94=($70|0)==($68|0);\r\n if ($94) {\r\n  $96=$this;\r\n  $97=((HEAP32[(($96)>>2)])|0);\r\n  $98=(($97+52)|0);\r\n  $99=((HEAP32[(($98)>>2)])|0);\r\n  $100=$__c&255;\r\n  $101=((FUNCTION_TABLE_iii[($99)&{{{ FTM_iii }}}]($3,$100))|0);\r\n  $_01=$101;\r\n\r\n  return (($_01)|0);\r\n } else {\r\n  $103=(($__c)&255);\r\n  HEAP32[(($11)>>2)]=$71;\r\n  HEAP8[($70)]=$103;\r\n  $104=$__c&255;\r\n  $_01=$104;\r\n\r\n  return (($_01)|0);\r\n }\r\n  return 0;\r\n}\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/share/emscripten/emcc\", line 1864, in <module>\r\n    final = shared.Building.emscripten(final, append_ext=False, extra_args=extra_args)\r\n  File \"/usr/share/emscripten/tools/shared.py\", line 1276, in emscripten\r\n    assert os.path.exists(filename + '.o.js') and len(open(filename + '.o.js', 'r').read()) > 0, 'Emscripten failed to generate .js: ' + str(compiler_output)\r\nAssertionError: Emscripten failed to generate .js: \r\nmake: *** [libjsonnet.js] Error 1\r\n\r\nsbarzowski@sbarzowski01:~/Work/jsonnet$ em++ --version\r\nemcc (Emscripten GCC-like replacement) 1.10.0 ()\r\nCopyright (C) 2013 the Emscripten authors (see AUTHORS.txt)\r\nThis is free and open source software under the MIT license.\r\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FRidh": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/427", "title": "Record the inheritance tree", "body": "As mentioned in https://github.com/google/jsonnet/issues/426 I am investigating whether we can use `jsonnet`. The dataset we have is large, consisting of about 3000 objects, that are built up through inheritance. One requirement we have is that we can compute the inheritance tree for analysis purposes.\r\n\r\nIs there any support for getting this information out? Or do you have any suggestion? I thought of building up the dataset as\r\n```\r\n{\r\n    TC0: { \r\n      attributes: {\r\n        tc0: [ 0 ],\r\n      }\r\n    },\r\n\r\n    TC1: {\r\n      parents: [ \"TC0\" ],\r\n      attributes: {\r\n        tc1: [ 1 ],\r\n      }\r\n    },\r\n    TC2: { \r\n      parents: [ \"TC1\" ],\r\n      attributes: {\r\n        tc2: [ 2 ],\r\n        tc1+: [ 2 ],\r\n      }\r\n    }\r\n    \r\n}\r\n```\r\nand then map a function to perform the actual composition while still storing the `parents` field as a hidden field. However, I doubt operations like `tc1+: [ 2 ],` would work as desired. Any suggestions on how to track parents?\r\n\r\nThe function that would perform the object concatenation would do something like a fold. That would require a function (not the operator) for object concatenation. Does such function exist? I could not find it in the standard library. \r\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ashi009": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/425", "title": "Support oct/hex number literals", "body": "It's weird to not support non-decimal literals in a configuration language.\r\n\r\n```\r\n{\r\n container: k8s.Container {\r\n  ...,\r\n  args: {\r\n   fileMode: 0644,  <----- STATIC ERROR: Expected a comma before next field.\r\n  },\r\n  ...\r\n }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nikolay": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/422", "title": "Add more file functions to stdlib", "body": "So far, the only function for file paths is `std.thisFile`, but its utility is questionable.\r\n\r\nWe need functions giving us the full pathname of the current file, just the filename, and just the directory. It would be even better if we can get a function that extracts the filename, and the directory of a given file path, too.\r\n\r\nI've been trying to use `importstr` and include configuration files, but I cannot make it work when the containing file is symlinked and it uses relative to its configuration files. Of course, the same applies to `import`, too.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54082032", "body": "It's fixed now, but I it still doesn't compile:\n\n```\n$ make\nc++ -g -O3 -Wall -Wextra -pedantic -std=c++0x  jsonnet.cpp lexer.cpp parser.cpp static_analysis.cpp vm.cpp libjsonnet.cpp -o jsonnet\nc++: warning: couldn't understand kern.osversion '14.0.0\nparser.cpp:822:1: error: zero-size array 'STD_CODE'\n };\n ^\nmake: *** [jsonnet] Error 1\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54082032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54086304", "body": "Thanks, @sparkprime! Can't wait to start playing with this. I have to deal with huge monolithic JSON files for AWS CloudFormation, so, I developed my own Pythonic extension of it, but Jsonnet can definitely do that and a lot more, so, once I have something accomplished, I will post examples to popularize Jsonnet!\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/54086304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mbrukman": {"issues": [{"url": "https://api.github.com/repos/google/jsonnet/issues/370", "title": "Make macOS builds optional?", "body": "Due to Apple licensing restrictions, macOS can only be run on Apple hardware. That means that CI services such as Travis CI are limited in the number of concurrent macOS builds based on the amount of actual hardware they have on hand (or can rent remotely, if that's even possible), whereas Linux builds can be parallelized using bare-metal hardware or VMs, including cloud providers, so they can easily scale elastically to meet demand.\r\n\r\nAs a result, Travis CI very quickly runs the Linux builds, but macOS builds are queued, and make take quite a bit longer to process. In other projects, I have run into issues where macOS builds were queued for a very long time, leading to blocked code reviews or finding out much later that the build had a basic issue, which is not visible if just looking at GitHub, the Travis status is \"pending\". I also noticed a similar situation\r\n\r\nI would like to propose that the Jsonnet project consider making the following  changes:\r\n\r\n* macOS builds are marked as \"optional\", so their delays or failures don't block builds\r\n* a build where Linux build succeeds is marked as \"passing\"\r\n\r\nThis can be done easily using `.travis.yml` config.\r\n\r\nThis is especially the case if we add Bazel-based builds in addition to Make-based builds in issue #137.\r\n\r\nThoughts?", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/354", "title": "Static analysis for Jsonnet C++ code", "body": "Given that Jsonnet is written in C++, there are many potential issues that can lurk in C++ code, such as undefined behavior, buffer overruns, etc.\r\n\r\nWhile unit tests help ensure that code does what it's supposed to (and handles errors correctly), there are other classes of issues that can be found via static analysis. Some of the tools that can be used for this are:\r\n\r\n* Coverity, which provides [free scans](https://scan.coverity.com/) to open-source projects\r\n* LLVM/Clang tools such as: AddressSanitizer, ThreadSanitizer, MemorySanitizer, UndefinedBehaviorSanitizer, etc.\r\n\r\nThese and other similar tools can help find bugs without writing explicit tests, so they provide a lot of value with little additional effort.", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57801875", "body": "Jsonnet REPL _should_ be more featureful than the standard language itself, because it would make it more useful for experimentation and learning the language. I believe both Scala and Haskell REPLs allow you to do more than what the languages themselves provide.\n\nI agree, however, that it's a non-trivial project. As a first step, providing the same functionality as `jsonnet -i` would still be useful because not having to retype that (or press \"up\" and erase the previous command) would be quite useful to get a handle on the syntax.\n\nLater on, allowing the addition of top-level bindings would be an additional useful feature; I suspect as soon as there's a REPL, this will be the first feature request. :-)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/57801875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "greatgoogleymoogley": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/4a0a103b50c509bb41d56d7aad3a8195a8b11713", "message": "Replace long with int64_t in virtual machine numeric evaluations\n\nBy the C/C++ standard long is only at least as large as an int.\nFor MSVC it is the same size as an int which caused some jsonnet scripts that work for other platforms to fail on Windows.\nUsing int64_t guarantees all platforms have the same precision."}, {"url": "https://api.github.com/repos/google/jsonnet/commits/9da1f795edd6036437b7674e91bbb2e156af78db", "message": "Adding #include <string> for windows build\n\ncompilation failed in MSVC with\njsonnet\\third_party\\md5\\md5.cpp(353): warning C4717: 'operator<<': recursive on all control paths, function will cause runtime stack overflow\nbecause\nstd::ostream& operator<<(std::ostream&, std::string)\nwas not defined, so it implicitly converted the hex digest back to MD5"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "malkia": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/jsonnet/commits/97a24f7026e95d2dde1894ab86f96373047a21f7", "message": "Use directly static_cast, rather than probing with dynamic_cast (#416)\n\n* Use directly static_cast, based on the stored node type, rather than probing with dynamic_cast. Add AST_APPLY_BRACE node type. One benchmark showed x2 cpu increase: https://github.com/ksonnet/ksonnet-lib/blob/master/examples/readme/hello-nginx.jsonnet"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikedanese": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/111", "title": "RFC: implement unit testing framework", "body": "Supports tests of type function, and \"table tests\". Output looks like:\n\n```\nRunning tests/arith_bool.jsonnet...\n--- PASS 'Test !'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test !='\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test &&'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test =='\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n--- PASS 'Test if'\n        pass    'case 0'\n        pass    'case 1'\n--- PASS 'Test no implicit conversions'\n        pass    'case 0'\n        pass    'case 1'\n--- PASS 'Test shortcut semantics'\n        pass    'case 0'\n        pass    'case 1'\n--- PASS 'Test ||'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'case 2'\n        pass    'case 3'\n\nRunning tests/merge.jsonnet...\n--- PASS 'Test std.mergePatch'\n        pass    'case 0'\n        pass    'case 1'\n        pass    'override with null'\n        pass    'case 3'\n        pass    'case 4'\n        pass    'case 5'\n        pass    'case 6'\n        pass    'case 7'\n        pass    'case 8'\n        pass    'case 9'\n        pass    'case 10'\n        pass    'case 11'\n        pass    'case 12'\n        pass    'case 13'\n\nOK\n```\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678562", "body": "Python slicing seems crazy complex: \n\nhttps://github.com/rfk/pypy/blob/master/pypy/objspace/std/listobject.py#L1362-L1382\n\nI'll look into duplicating the behavior exactly into std.slice()\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678611", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678633", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678786", "body": "Unrolled.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678875", "body": "too bad JUnit is taken :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53678875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880217", "body": "@sparkprime This is breaking with:\n\n```\nFAIL (exit code): slice.sugar.jsonnet\nThis run's output:\nSTATIC ERROR: slice.sugar.jsonnet:32:21-22: Not a unary operator: ::\n```\n\nI'll investigate what is going on but it's not immediately obvious to me.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53880217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888120", "body": "Ok, fixed with https://github.com/mikedanese/jsonnet/blob/slice/core/parser.cpp#L1201-L1208 and enabled the test.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888309", "body": "I can do it without push() but it requires a whole nother branch which feels gross\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53888309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53889411", "body": "O(n^2) :( but would rather optimize this in the vm for array concatinations where one side is not used again.\n\n``` console\n$ jsonnet git:(slice): cat exp.jsonnet \nstd.range(0, std.extVar(\"vars\").count)[2:100000000000:2]\n$ jsonnet git:(slice): time ./jsonnet --code-var vars='{\"count\": 1000}' exp.jsonnet > /dev/null \n./jsonnet --code-var vars='{\"count\": 1000}' exp.jsonnet > /dev/null  0.25s user 0.00s system 99% cpu 0.258 total\n$ jsonnet git:(slice): time ./jsonnet --code-var vars='{\"count\": 10000}' exp.jsonnet > /dev/null                                                                                             \n./jsonnet --code-var vars='{\"count\": 10000}' exp.jsonnet > /dev/null  1.98s user 0.01s system 99% cpu 1.990 total\n$ jsonnet git:(slice): time ./jsonnet --code-var vars='{\"count\": 100000}' exp.jsonnet > /dev/null\n./jsonnet --code-var vars='{\"count\": 100000}' exp.jsonnet > /dev/null  46.23s user 0.30s system 99% cpu 46.594 total\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53889411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53976958", "body": "I'm curious about implementing the internal representation with a persistent data structure. Arrays could still be copy on write minus the deep copy.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/53976958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "teeler": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62776285", "body": "Oh i did break it..I thought this was already failing, looking.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/62776285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/63310910", "body": "Closing this for now until I can find a better way.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/63310910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tyler-elric": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64066711", "body": "If I remember correctly, the only source file I changed was _jsonnet.c which I changed from 2.x compatibility to 3.x compatibility ( rather than using #defines for both ).\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/64066711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "loverszhaokai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598300", "body": "Get it.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76598300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76599260", "body": "Hi sparkprime, I already signed \"Google Individual Contributor License Agreement\".\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76599260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76601005", "body": "OK, it maybe better handled in the future.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76601005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76849421", "body": "Yes! Currently the test suites is the system test. So unit test is also needed by now.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/76849421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "PaulFurtado": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78395797", "body": "This setup.py is able to build fine, however my company's internal pypi server was rejecting it (returning 500 errors without an error message). I'm going to take a look and see if it's the setup.py's fault or the server's fault before we merge this.\n\nAs for telling travis to only upload stable builds to pypi, travis has an option for uploading to pypi for only tagged commits instead of all commits (however, this is still an issue if you tag commits which are unstable). I think their intention is that you would have a \"stable\" branch which only has stable tags on it. Note that it's also not all that inconvenient to upload to pypi manually - if you have a .pypirc, it's as easy as running one command.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78395797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78427046", "body": "Just updated the PR with fixes that allow it to actually work with PyPi:\n- The package needed to be called \"jsonnet\" instead of \"_jsonnet\". That means you install it with \"pip install jsonnet\" but you still use it via \"import _jsonnet\"\n- Added a MANIFEST.in which puts the entire directory into the distribution - previously distutiles was only adding the files in JSONNET_SOURCES\n\nI also added you as the author.\nI tested this against a local pypi-server with all of the defaults.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78427046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78429601", "body": "Also put a test version of it called \"paul-jsonnet\" into pypi to test that it works with the official pypi. You can try it out with: \n\n```\npip install paul-jsonnet\n```\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/issues/comments/78429601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "akazakov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54327634", "body": "typo: evaluate\nsame 2 lines down\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54327634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "davidzchen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377358", "body": "Nit: Is there a reason why we're using `#` comments rather than `//` comments here? :)\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377413", "body": "Nit: @sparkprime - Do we have a recommended line length limit? AFAIU, the line length we're using for the C++ code is 100 characters.\n", "reactions": {"url": "https://api.github.com/repos/google/jsonnet/pulls/comments/54377413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}