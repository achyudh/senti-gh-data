{"_default": {"1": {"pablopla": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/732", "title": "IndentationError: unindent does not match any outer indentation level (reauth_creds.py, line 136)", "body": "google-cloud-sdk still uses this library.\r\n\r\nI'm getting the following error on Ubuntu-16.04:\r\n```bash\r\nSetting up google-cloud-sdk (182.0.0-0) ...\r\nCompiling lib/third_party/oauth2client/contrib/reauth_creds.py ...\r\nSorry: IndentationError: unindent does not match any outer indentation level (reauth_creds.py, line 136)\r\n```\r\nInstalling with:\r\n```bash\r\nexport CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\"\r\necho \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\r\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\r\nsudo apt-get update && sudo apt-get install google-cloud-sdk\r\n```", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mauroka": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/730", "title": "DjangoORMStorage: GOOGLE_OAUTH2_CLIENT_ID and GOOGLE_OAUTH2_CLIENT_SECRET empty in settings.py ", "body": "Hello, is there a problem in setting GOOGLE_OAUTH2_CLIENT_ID and GOOGLE_OAUTH2_CLIENT_SECRET empty in settings.py like this?\r\nGOOGLE_OAUTH2_CLIENT_ID = \"\"\r\nGOOGLE_OAUTH2_CLIENT_SECRET = \"\"\r\n\r\nIt's because I am trying to use OAuth2WebServerFlow without a JSON file and load the client_id and client_secret from the Database for everyone of my multiple tenants.\r\n\r\nAnd when I store the credentials using DjangoORMStorage it throws a:\r\nMust specify either GOOGLE_OAUTH2_CLIENT_SECRETS_JSON, or either GOOGLE_OAUTH2_CLIENT_SECRETS_JSON, or both GOOGLE_OAUTH2_CLIENT_ID and GOOGLE_OAUTH2_CLIENT_SECRET in settings.py\r\n\r\nThanks a lot for the help.\r\nCheers.", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CostGranda": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/729", "title": "unrecognized arguments", "body": "Hello, I'm recurring here for help in something. I know that the project is now deprecated but maybe someone is still around here :) the error is something weird, but here we go.\r\nI have a script that is listing my Google Drive files.\r\n```python\r\nfrom apiclient import discovery\r\nfrom httplib2 import Http\r\nfrom oauth2client import file, client, tools\r\n\r\nSCOPES = 'https://www.googleapis.com/auth/drive.readonly.metadata'\r\nstore = file.Storage('storage.json')\r\ncreds = store.get()\r\nif not creds or creds.invalid:\r\n    flow = client.flow_from_clientsecrets('client_secret.json', SCOPES)\r\n    creds = tools.run_flow(flow, store)\r\nDRIVE = discovery.build('drive', 'v3', http=creds.authorize(Http()))\r\n\r\nfiles = DRIVE.files().list().execute().get('files', [])\r\nfor f in files:\r\n    print(f['name'], f['mimeType'],f['id'])\r\n```\r\nIt works perfectly, I download the `client_secret.json` from Google API and save it in the same folder.\r\n\r\nThen I start to edit my file to change de behavior and don't read a file, instead, send the *client_id* and *client_secret* values to the script. Like  this:\r\n```python\r\nimport sys\r\nfrom apiclient import discovery\r\nfrom httplib2 import Http\r\nfrom oauth2client import file, client, tools\r\n\r\n# ID and SECRET arguments\r\nclient_id = sys.argv[1]\r\nclient_secret = sys.argv[2]\r\n\r\nSCOPES = 'https://www.googleapis.com/auth/drive.readonly.metadata'\r\n\r\ndef listFiles(drive):\r\n    \"\"\"Receive the service and list the files\"\"\"\r\n    files = drive.files().list().execute().get('files', [])\r\n    for f in files:\r\n        print(f['name'], f['mimeType'],f['id'])\r\n\r\ndef main():\r\n    store = file.Storage('storage.json')\r\n    creds = store.get()\r\n    if not creds or creds.invalid:\r\n        flow = client.OAuth2WebServerFlow(client_id, client_secret, SCOPES)\r\n        creds = tools.run_flow(flow, store, tools.argparser.parse_args())\r\n    DRIVE = discovery.build('drive', 'v3', http=creds.authorize(Http()))\r\n    listFiles(DRIVE)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\nThe first time that I start this new version of the script it works, because the script in the old version has created the `storage.json` file.\r\nThen I move my new version script to another folder or machine (where the `storage.json` file doesn't exists) to check if it works and then I get this:\r\n\r\n```\r\n$ python3 drive_list.py asdasdasdsa jijfkljflksdjflksdj\r\n\r\n/usr/local/lib/python3.4/dist-packages/oauth2client/_helpers.py:255: UserWarning: Cannot access storage.json: No such file or directory\r\n  warnings.warn(_MISSING_FILE_MESSAGE.format(filename))\r\nusage: drive_list.py [--auth_host_name AUTH_HOST_NAME]\r\n                     [--noauth_local_webserver]\r\n                     [--auth_host_port [AUTH_HOST_PORT [AUTH_HOST_PORT ...]]]\r\n                     [--logging_level {DEBUG,INFO,WARNING,ERROR,CRITICAL}]\r\ndrive_list.py: error: unrecognized arguments: asdasdasdsa jijfkljflksdjflksdj\r\n```\r\n*The warning about the storage.json file appears in both script versions, is part of oauth2.*\r\n\r\nThis is the curios part, why the arguments are recognized when the `storage.json` file exists (ONLY created reading the `client_secret.json`)? if the first time that the script start it creates the file.\r\nIs really weird this error, and I'm just trying to find what is happening exactly.\r\nIf someone can help me, I will be really thankful.", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "faizalkassamalisc": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/727", "title": "Secret is logged in crypt.py", "body": "**Note**: oauth2client is now deprecated. As such, it is unlikely that we will\r\naddress or respond to your issue. We recommend you use\r\n[google-auth](https://google-auth.readthedocs.io) and [oauthlib](http://oauthlib.readthedocs.io/).\r\n\r\nhttps://github.com/google/oauth2client/blob/master/oauth2client/crypt.py#L100\r\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tswast": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/715", "title": "Add deprecation notice to docs.", "body": "oauth2client is now deprecated, but when I look at https://oauth2client.readthedocs.io/en/latest/, I wouldn't know.\r\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wtfrank": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/706", "title": "When performing grant_type=refresh_token, the \"Authorization: Bearer...\" header is applied", "body": "I'm not sure it makes sense to be authorizing with a probably-expired access token in the header, at the same time that in the body you are passing the client id+secret and requesting a new access token", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cclauss": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/702", "title": "Travis flake8 test failure on bare except", "body": "https://travis-ci.org/google/oauth2client/jobs/213718008#L266-L268", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akalmykov": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/700", "title": "Mandatory slash at the end of oauth_callback URI is incompatible with Google Dev Console credential settings", "body": "Mandatory slash at the end of oauth_callback URI is incompatible with Google Dev Console credential settings. In Google Dev console Credential one cannot register a call back URL that end with a slash. But oath client inserts the slash, leading to Error: redirect_uri_mismatch\r\n\r\nThe slash shouldn't be mandatory in oath2 client. Or should be allowed in Google Dev Console settings.\r\n\r\nThis can be reproduced by running any example for python api client, e.g.\r\nhttps://github.com/youtube/api-samples/blob/master/python/upload_video.py\r\n\r\nThe issue is in tools.py:\r\n\r\n```\r\n    if not flags.noauth_local_webserver:\r\n        oauth_callback = 'http://{host}:{port}/'.format(\r\n            host=flags.auth_host_name, port=port_number)\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "houglum": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/696", "title": "multiprocess_file_storage needs fasteners, but it's not listed as a requirement", "body": "I'm looking at migrating gsutil to a current version of oauth2client, which has done away with locked_file, multistore_file, etc. (as mentioned at length in the discussion at https://github.com/google/oauth2client/pull/504).\r\n\r\nWhen trying to import multistore_file's replacement, multiprocessing_file_storage, from oauth2client.contrib, I get the error message:\r\nImportError: No module named fasteners\r\n\r\nI get this both with the repo version and pip-installed version of oauth2client 4.0.0.  It seems that fasteners wasn't added to the list of requirements as part of https://github.com/google/oauth2client/commit/66d47251fd08abf57fd1d80569901346b91cd422.", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snarb": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/695", "title": "Google-oauth is not working inside Jupyter Notebook", "body": "When importing modele with recomended code: \r\nflags = argparser.parse_args()\r\ncredentials = run_flow(flow, storage, flags) inside Jupyter Notebook got exception.\r\n\r\nSimple\r\n   from oauth2client.tools import argparser\r\n   argparser.parse_args()\r\n\r\nFailing with:\r\n\r\nusage: __main__.py [--auth_host_name AUTH_HOST_NAME]\r\n                   [--noauth_local_webserver]\r\n                   [--auth_host_port [AUTH_HOST_PORT [AUTH_HOST_PORT ...]]]\r\n                       [--logging_level {DEBUG,INFO,WARNING,ERROR,CRITICAL}]\r\n    __main__.py: error: unrecognized arguments: -f /run/user/1000/jupyter/kernel-c9aa5199-fcea-4884-8e5f-a004c66a733e.json\r\n\r\nSystemExit                                Traceback (most recent call last)\r\n<ipython-input-3-d141fc7aebe0> in <module>()\r\n----> 1 argparser.parse_args()\r\n\r\n/usr/lib/python3.5/argparse.py in parse_args(self, args, namespace)\r\n   1736         if argv:\r\n   1737             msg = _('unrecognized arguments: %s')\r\n-> 1738             self.error(msg % ' '.join(argv))\r\n   1739         return args\r\n   1740 \r\n\r\n/usr/lib/python3.5/argparse.py in error(self, message)\r\n   2392         self.print_usage(_sys.stderr)\r\n   2393         args = {'prog': self.prog, 'message': message}\r\n-> 2394         self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\r\n\r\n/usr/lib/python3.5/argparse.py in exit(self, status, message)\r\n   2379         if message:\r\n   2380             self._print_message(message, _sys.stderr)\r\n-> 2381         _sys.exit(status)\r\n   2382 \r\n   2383     def error(self, message):\r\n\r\nSystemExit: 2\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tamakisquare": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/689", "title": "Inconsistent definitions of \"expired\" between `access_token_expired()` and `_expires_in()`", "body": "I am using a higher-level library, *Pyrebase*, that relies on oauth2client. I have been getting intermittent problem with `OAuth2Credentials.get_access_token()`, in which the token is expired, according to `OAuth2Credentials._expired_in()` that returns an integer `0`, but `OAuth2Credentials.access_token_expired()` thinks otherwise.\r\n\r\nI put in additional logging into the code to see what's going on. I have found out that the intermittent problem that I am getting happens when the expiry time is less than a second away. Here is an example. \r\n\r\n> Now: 2016-12-27 21:55:00.024112, token_expiry: 2016-12-27 21:55:00.204173\r\n\r\n`_expired_in()` would return an integer `0`, indicating that the token has expired, while `access_token_expired()` would return `False` denoting the token is still valid.  The root cause of the problem lies in the fact that the former method has a precision to the nearest second while the latter deals with fraction of a second.\r\n\r\n`access_token_expired()` and `_expires_in()` need to have their definitions of **\"expired\"** aligned with each other.", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Cosbgn": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/686", "title": "Is django_orm deprecated?", "body": "from [change log](https://github.com/google/oauth2client/blob/master/CHANGELOG.md) of V.2.2.0 I read:` oauth2client.contrib.django_util and oauth2client.contrib.django_orm have been updated to support Django 1.8 - 1.10.`\r\n\r\nHowever `django_orm` is not in the source code and obviously I get an `import error` when running `from oauth2client.contrib.django_orm import CredentialsField`\r\n\r\nIs this deprecated or I need to import something else? I guess then [this official Google guide](https://developers.google.com/api-client-library/python/guide/django) is outdated, right? ", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/686/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AP-e": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/685", "title": "Obtain service credentials from dict", "body": "Is there a way to supply a dict to `oauth2client.client.flow_from_clientsecrets()` to create a Flow object without reference to the service account .JSON file? My understanding is that this restriction prevents the storage of sensitive information in code, however it seems possible for this file to be unintentionally exposed via source control or otherwise compromised. My current workaround, when deploying to Heroku, involves reconstruction of the credentials file from environment variables.", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bboogaard": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/684", "title": "Load settings lazily", "body": "Would you consider changing the django integration in such a way that the api credentials are not needed compile time (e.g. by wrapping the instantiation of OAuth2Settings in a SimpleLazyObject).\r\n\r\nOr is there another way of skipping the loading of client secrets whenever I import oauth2client.contrib.django_util?", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "john2x": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/681", "title": "jsonpickle isn't a dependency?", "body": "I'm getting `ImportError: No module named jsonpickle` with Python 2.7 and the `django_util` module using version `4.0.0`. #672 and #676 seem to suggest that `jsonpickle` should already be a dependency, but it isn't listed in `setup.py`?", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/681/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rfinck": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/677", "title": "Restrict access to a specified domain with flask_util.", "body": "I am using oauth2client.contrib.flask_util for an application whose access I want to restrict to accounts at a specified Google Apps domain. To do this, I've edited the callback view to check the 'hd' field of the credential's id_token just before saving the credentials to storage. The particular domain is given as a kwarg to init_app, which means that it gets passed to client.OAuth2WebServerFlow, which already recognizes it and adds a helpful message to the log-in page indicating that an email address at that domain is expected. (It appears, however, that that argument is not enough to restrict access, hence the changes to the callback view, although if there is already a built-in way to restrict I'd be happy to use that instead.)\r\n\r\nIf this is something that'd be generally useful, I can make a pull request.", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "suyashgithub": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/675", "title": "clientsecrets.py, line 121, in _loadfile     with open(filename, 'r') as fp: TypeError: coercing to Unicode: need string or buffer, dict found", "body": "I am using django 1.10 with python 2.7 , my setting files is GOOGLE_OAUTH2_CLIENT_SECRETS_JSON ={\r\n    'secret_key': '<secret_code>',\r\n    'client_id': '<client_id>',\r\n    'client_secret': '<client_secret>',\r\n    'scope' : '<scope>',\r\n    'redirect_uri': '<redirect_uri'>'\r\n}\r\nCredentialsModel is :\r\nfrom django.contrib.auth.models import User\r\nfrom django.db import models\r\nfrom oauth2client.contrib.django_util.models import CredentialsField\r\nclass CredentialsModel(models.Model):\r\n  id = models.ForeignKey(User, primary_key=True)\r\n  credential = CredentialsField()\r\n\r\nwhen i am creating the migration  then getting this error\r\n\r\n  File \"/Users/suyash/virtualenvs/sr/lib/python2.7/site-packages/oauth2client/clientsecrets.py\", line 165, in loadfile\r\n    return _loadfile(filename)\r\n  File \"/Users/suyash/virtualenvs/sr/lib/python2.7/site-packages/oauth2client/clientsecrets.py\", line 121, in _loadfile\r\n    with open(filename, 'r') as fp:\r\nTypeError: coercing to Unicode: need string or buffer, dict found", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chripede": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/672", "title": "Unpickle problems when upgrading from Python 2.7 to 3.5", "body": "I've been using the Django contrib CredentialsField to store authentications in my database. This all happened in Python 2.7\r\n\r\nI'm trying to upgrade to 3.5, but the pickled CredentialsField is giving me some problems. It seems impossible to unpickle an Python 2.7 object in Python 3 that contains both strings and a datetime. See http://bugs.python.org/issue22005\r\n\r\nIs there any \"best practice\" way to do this, or will I need to convert everything to JSON and the pickle it again?", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/d0078709c2be1a0ecbcfd2cdceaaf867e7147e45", "message": "Use jsonpickle if possible\n\nFallback to pickle if jsonpickle is not installed"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jay0lee": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/669", "title": "Prettify stored credentials", "body": "Currently, credentials are stored as minimal JSON. This makes it a challenge when a developer needs to peek at credentials stored to a file in order to find their project_id, client_id, refresh_token or some other detail.\r\n\r\nWe should be able to pretty print the JSON before storage to make it easier for human eyes to read.", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/3071457064f3705bab1b041bd624a10d5a2d2619", "message": "link to oauth2client deprecation explanation. (#728)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msaniscalchi": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/657", "title": "Loading from P12 broken on Python 3", "body": "Loading credentials from a P12 file via `oauth2client.service_account.ServiceAccountCredentials.from_p12_keyfile` is broken in Python 3. The relevant portion of the stacktrace is:\n\n```\n...\n  File \"/usr/local/lib/python3.4/dist-packages/oauth2client-3.0.0-py3.4.egg/oauth2client/service_account.py\", line 334, in from_p12_keyfile\n    token_uri=token_uri, revoke_uri=revoke_uri)\n  File \"/usr/local/lib/python3.4/dist-packages/oauth2client-3.0.0-py3.4.egg/oauth2client/service_account.py\", line 291, in _from_p12_keyfile_contents\n    private_key_password)\n  File \"/usr/local/lib/python3.4/dist-packages/oauth2client-3.0.0-py3.4.egg/oauth2client/_openssl_crypt.py\", line 119, in from_string\n    pkey = crypto.load_pkcs12(key, password).get_privatekey()\nTypeError: must be str, not bytes\n```\n\nI've followed the stacktrace to `_openssl_crypt.py's OpenSSLSigner.from_string` method and noticed that the [password defaults to bytes](https://github.com/google/oauth2client/blob/master/oauth2client/_openssl_crypt.py#L100) and is also [converted to bytes](https://github.com/google/oauth2client/blob/master/oauth2client/_openssl_crypt.py#L118) (if it isn't already). This results in the TypeError when it is passed along to [get the private key](https://github.com/google/oauth2client/blob/master/oauth2client/_openssl_crypt.py#L119).\n\nThe issue appears to be resolved if we don't force the password to be bytes, e.g.:\n\n```\n    @staticmethod\n    def from_string(key, password='notasecret'):\n        key = _helpers._to_bytes(key)\n        parsed_pem_key = _helpers._parse_pem_key(key)\n        if parsed_pem_key:\n            pkey = crypto.load_privatekey(crypto.FILETYPE_PEM, parsed_pem_key)\n        else:\n            pkey = crypto.load_pkcs12(key, password).get_privatekey()\n        return OpenSSLSigner(pkey)\n```\n\nI've verified that this works in Python 3, and doesn't seem to introduce any issues to Python 2.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dhermes": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/656", "title": "Drop casting of status codes to integers throughout client.py and elsewhere", "body": "I vaguely remember a PR that added all of this, but can't remember the why.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/645", "title": "Service account info on GCE occasionally is missing keys.", "body": "From https://github.com/GoogleCloudPlatform/google-cloud-python/issues/2314\n\nCalls [to `_retrieve_info`](https://github.com/google/oauth2client/blob/9f0618d53481a3afe2d0cf232131ba21dcf583de/oauth2client/contrib/gce.py#L113) seem to be failing in a strange way, i.e. `info` is a valid dictionary but does not contain `email`.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/644", "title": "Rename to_json/from_json as json_serialize/json_deserialize", "body": "People often get these confused with methods they should actually be using.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/51ae8761eaf5ec044aa5ab221020b05be8fe2a71", "message": "Merge pull request #622 from dhermes/allow-repeated-params\n\nCorrect query loss when using parse_qsl to dict"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/ebe9ed0bbbe4ce51c1a76de694c795e38906d690", "message": "Correct query loss when using parse_qsl to dict"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/4c7b3be5a101454e2c641a9835e652a92d16800e", "message": "Merge pull request #612 from dhermes/fix-599\n\nUse transport module for GCE environment check."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/9207403", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/9207403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/12116106", "body": "Sorry I missed it in the review.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/12116106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/16216123", "body": "Thanks. Will fold the change into the original commit.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/16216123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/16260685", "body": "Thanks for the pointer to the old docs. Filed #435. We can discuss there.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/16260685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/16279577", "body": "Filed #436 for you.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/16279577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/19056862", "body": "Yippee for dogma!\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/19056862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jonparrott": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/650", "title": "Header keys should all be set as bytes, not unicode.", "body": "Context: #648\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/649", "title": "client should do cache eviction on id token certificates", "body": "- We should likely cache and evict based on key id, instead of certificate uri.\n- endpoints uses [memcache as their cache](https://github.com/cloudendpoints/endpoints-python/blob/067490edee4d157f2ff919d4d3e85d38d73a832c/endpoints/users_id_token.py#L200-L201) but we can continue to use an in-memory cache.\n- endpoints evicts based on the [cache control header](https://github.com/cloudendpoints/endpoints-python/blob/067490edee4d157f2ff919d4d3e85d38d73a832c/endpoints/users_id_token.py#L434)\n\n(context #647)\n\n(No milestone assigned, @dhermes and I do not feel like this should block 4.0.0 but it would be nice to have)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/1c56925cbc83b9dd8a5112a60e62e0aa73a33b5f", "message": "Escape error reason for oauth2 callback in django_util (#724)"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/00926f2058e23da7f6772ad6477e64d7506415e5", "message": "Release v4.1.0 and deprecate the library (#714)"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/119b90cbc91ed9d892df45413be5b551d90406e2", "message": "Fix system tests (#713)\n\nUpdate user key to fix system tests"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/efe567a8f03739a5a340fa9f6909690db340caf6", "message": "Fix ci (#712)\n\n* Add missing docs files\r\n\r\n* Fix app engine sdk download command\r\n\r\n* Remove PyPy, as cryptography updates seems to have broken oauth2client support since at least v2.0.0"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/cf13958d7d66dfa99492ac0cc91d75e276066be1", "message": "Escape callback error code (#710)"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/cc3e7d13a4f33cb10ce8fe2acfe02b853b1774c3", "message": "Include LICENSE in Manifest.in (#694)"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/a731be362014d61630044c46495c5b750437ab88", "message": "Release v4.0.0 (#666)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sahuguet": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/642", "title": "AttributeError when library called from embedded Python (missing sys.argv)", "body": "When the library is used with embedded Python (e.g. Postgres extension written in C calling Python, like Multicorn), sys.argv is not defined, which makes the library misbehave, see below.\n\n```\n      File \"/usr/local/lib/python2.7/dist-packages/oauth2client/tools.py\", line 83, in _CreateArgumentParser\n        parser = argparse.ArgumentParser(add_help=False)\n\n      File \"/usr/lib/python2.7/argparse.py\", line 1575, in __init__\n        prog = _os.path.basename(_sys.argv[0])\n\n    AttributeError: 'module' object has no attribute 'argv'\n\n```\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dayimproper": {"issues": [{"url": "https://api.github.com/repos/google/oauth2client/issues/639", "title": "When using from oauth2client.file.Storage to put and get Credentials the token expiry is not correctly loaded", "body": "The function `_parse_expiry` in `oauth2client.client` is used both to format a datetime to string in the function [`Credentials.to_json()`](https://github.com/google/oauth2client/blob/ebe9ed0bbbe4ce51c1a76de694c795e38906d690/oauth2client/client.py#L264) and to try and parse a string into datetime in [`GoogleCredentials.from_json()`](https://github.com/google/oauth2client/blob/ebe9ed0bbbe4ce51c1a76de694c795e38906d690/oauth2client/client.py#L1125) while it's implementation is a format datetime to string [`_parse_expiry`](https://github.com/google/oauth2client/blob/ebe9ed0bbbe4ce51c1a76de694c795e38906d690/oauth2client/client.py#L183)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "strigazi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/d94570eb39d6901695153adbaf4c5dbccda80471", "message": "Release v4.1.2 (#721)\n\nSigned-off-by: Spyros Trigazis <strigazi@gmail.com>"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/98c0a1a8c82cf46549bc7337343039c5af941730", "message": "Exclude test in find_packages (#720)\n\nTo avoid conflicts with projects that have tests in their top-level\r\ndirectory:\r\n\r\n* exlude tests in find_packages\r\n* add include in MANIFEST.in\r\n\r\nCloses: #688\r\n\r\nSigned-off-by: Spyros Trigazis <strigazi@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomasreimers": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/97320af2733f7bdbe47f067327610e348f953ae1", "message": "Release v4.1.1 (#718)"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/a1da72d15c653c7bd5221211c9a2e7ce2e6341a5", "message": "Pass prompt='consent' from flow_from_clientsecrets (#717)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "craigcitro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/feec15f070903069347b9386a24fb73148f97411", "message": "Allow customizing the GCE metadata service address via an env var. (#704)\n\nThe goal here is to make it possible for a user of a binary that depends on\r\nthis library (eg the google cloud SDK) to be able to customize where it looks\r\nfor the GCE metadata service. (An adventurous user can already customize the\r\nGCE metadata service location via the existing global vars in this library.)\r\n\r\nThe only bit of awkwardness here is really the test: since this is a top-level\r\nstatement, reloading is the only way to ensure it works."}, {"url": "https://api.github.com/repos/google/oauth2client/commits/a3cf56b659e067dea8ead933f81e4a6f42d30ed8", "message": "Make `tox -e flake8` pass. (#705)\n\nThis library is in maintenance mode, but no reason to leave travis broken. Two\r\ndisables and a better `except` in a test and it's green again."}, {"url": "https://api.github.com/repos/google/oauth2client/commits/c055e7f7f5b7f7f9fe8ba12bbf7e297fccc2b59b", "message": "Typo fix. (#697)\n\nI normally try to restrain my inner copyeditor, but this one was in a docstring that someone might copy-paste."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/oauth2client/issues/comments/28875518", "body": "i'm good with leaving serious testing for a later patch -- but if possible, could you throw a few example input/output pairs into the `BitStringToByteString` docstring? even if we're testing them by hand, i'd like to have a clear record of what we expected that to do.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/28875518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41350726", "body": "I can if John can't, but not for another week or so.\n\n---\n\n-cc\n\nsent from my phone\nOn Apr 24, 2014 4:26 PM, \"aeijdenberg\" notifications@github.com wrote:\n\n> John - it's unlikely I'll have time. Would you be able to pick it up?\n> \n> On Thu, Apr 24, 2014 at 1:40 PM, John Asmuth notifications@github.comwrote:\n> \n> > You'll probably have to redo this PR - I've updated this repo using the\n> > history from the old googlecode repo, so things will probably not match.\n> > On\n> > the other hand, that transition has now taken place, so we can actually\n> > act\n> > on this pull request once it's settled.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/google/oauth2client/pull/1#issuecomment-41329388>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/google/oauth2client/pull/1#issuecomment-41344670\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41350726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41705162", "body": "first question: did you sign the CLA?\n\nhttp://google.github.io/oauth2client/contributing.html\n\n(i'll add a note to the README)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41705162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41705204", "body": "first question: did you sign the CLA?\n\nhttp://google.github.io/oauth2client/contributing.html\n\n(adding a note to README now)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41705204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42228983", "body": "yep, everything works. merging.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42228983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42236367", "body": "awesome @fthiery -- i'll take a look in the next few days.\n\nthanks!\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42236367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42931896", "body": "One or two little questions in the code, but two higher-level questions: \n1. none of the other types of credential storage support overwrite; any reason we wouldn't want it there? (I'm not asking you to do it in this PR, I'm more just saying it out loud.)\n2. it seems that the default behavior here (don't overwrite) doesn't match the default for all the other cases (files, GAE, etc). I agree that you're matching the previous default, but I think we should at least document that more clearly. (Would you _rather_ have the default be to overwrite?)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42931896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42932886", "body": "overall, this looks good -- but as a first step, could you add some docs? i'm thinking two things:\n\n1/ a simple example of how to use this in the `samples/` directory; it could point to the existing [documentation online](https://developers.google.com/accounts/docs/OAuth2ForDevices) for any explanation. (I mostly want to confirm that _I_ understand how it's supposed to work.)\n\n2/ update the docstrings of any functions you're tweaking.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42932886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42933335", "body": "just to check: at least according to the docstring, this previously accepted the contents of the file as the argument (not the filename). were you calling this directly with the filename, or was this getting called from elsewhere in the library? (or were there other docs suggesting you should call it with the filename?)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42933335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43020509", "body": "I agree -- it does seem like overwrite is the more sane choice (and, similarly, that's the only option supported by every other storage mechanism). I can't think of a use case for keeping around expired tokens.\n\nLet's stick with what you've got (+ some docs as per comments), and I'll think hard about how aggressive we want to be with deprecating the don't-overwrite case?\n\nAlso, can you merge in from master so that travis picks this change up?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43020509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43114567", "body": "no, this looks good -- merging now. thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43114567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/8116523", "body": "hah! bad sed on my part, looks like ... thanks!\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/8116523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/8564605", "body": "yes. already fixing.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/8564605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785678", "body": "two questions/nits:\n- `pyasn1_module` -> `pyasn1_modules`\n- did you want to say `rsa and pyasn1_modules` to match the `easy_install` line above?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785714", "body": "might as well leave `_key` private for now?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785737", "body": "it's awkward in an error message, but maybe worth throwing in a forced `\\n` here so that the command is _more_ likely to be copy-paste-able?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785785", "body": "Let's make it `_BitStringToByteString`, no reason to expose it for now.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7785785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7786225", "body": "can you add a docstring for what this is doing? in particular, what are the types on the input/output?\n\ni'm also worried that this doesn't do what you expect unless `len(bs)` is exactly a multiple of 8. for instance, if i just gave you `bs = [1]`, i believe you'd interpret that as though i gave you `[1, 0, 0, 0, 0, 0, 0, 0]`. what do we know about the values you're getting here?\n\nnote that part of this can definitely be simplified; a few quick thoughts:\n- python has left and right shift operators, so `a << 3` is the same as `a * (2 ** 3)`\n- the `int` constructor can take a string and a base, so eg `int('1101', 2)` returns `13`. if you've got strings, you can just call that.\n- `bytearray` takes an iterable, so you can drop the `[]` in the list comprehension (and it'll become a generator). \n- `range` -> `xrange`\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7786225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7786247", "body": "(in particular, i'm saying `_key` -> `__key`.)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7786247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12573001", "body": "Could you add a description of the new argument to the docstring?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12573001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12573027", "body": "Did you want to use `is_new`? If not, maybe just call it `unused_is_new` or `_`?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12573027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12750814", "body": "should we be worried about the case of actual non-ascii characters in password?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12750814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12758525", "body": "We want to raise exceptions from this package, not just base `Exception`\n\n(sample comment)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12758525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "bjmc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/f75203e64cafa2ca63fe383bd99e6a0ac0373dae", "message": "Remove b64 padding from PKCE values, per RFC7636 (#683)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/11988125", "body": "Nice catch. Sorry, I guess I didn't notice this because nose wasn't even running test_oauth2client when I ran tox.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/11988125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "clancychilds": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/f7f656d6aa0ac111a6692ded3eaaa7b1caf1fedc", "message": "Store original encoded and signed identity JWT in OAuth2Credentials (#680)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "waprin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/2da8ccde3f74507990cb551fe48f6d25820e6ab3", "message": "Merge pull request #676 from chripede/django-jsonpickle\n\nUse jsonpickle in django contrib"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/3f9fdbd5a3e590e6e53e42a59ca96d1010c0cec7", "message": "Add Django Samples (#636)\n\nContains two sets of samples - one for the \u201cGoogle auth\u201d system and one for the \u201cDjango\r\nuser auth\u201d system."}, {"url": "https://api.github.com/repos/google/oauth2client/commits/8a6e3b2a34561fb575ceecbb0f598347d47786e3", "message": "Fix django authorization redirect by correctly checking validity of credentials (#651)"}, {"url": "https://api.github.com/repos/google/oauth2client/commits/5315cd9d4e1bbb418c363614553b6c54aa0575fc", "message": "Fix flake8 error"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codeaditya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/92e4ad332992b91d4674335f3d83a7181e38967d", "message": "Fix typo in changelog: aetting --> setting (#668)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cherba": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/3eb691fc469ed6afe6f7a8b7bfe00c95dad46c73", "message": "Include expanded version of Apache 2.0 license. (#663)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adamchainz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/480c558b7fb962ec61c62ecadca004af0b71fc7a", "message": "Release as a universal wheel (#665)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LiraNuna": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/999de3ac8bf377b511824f1ec88c651dde5a1d4f", "message": "Try to revoke token with POST when getting a 405 (#662)\n\nThe OAuth spec does not specify the HTTP verb explicitly but it does hint that POST is the correct verb.\r\nWhen using the client library with other OAuth services that implement revocation token via a POST, revoking the token will fail.\r\n\r\nThis commit adds the ability to re-try the revocation process if we get a 405 with the POST verb."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nathanielmanistaatgoogle": {"issues": [], "commits": [{"url": "https://api.github.com/repos/google/oauth2client/commits/9f0618d53481a3afe2d0cf232131ba21dcf583de", "message": "Merge pull request #635 from waprin/django_flake8\n\nFix flake8 error."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/13143116", "body": "I'm... unclear on the premise of the question. Why should there be a guarantee that this module will have imported another particular module and exposed it as a certain attribute?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/13143116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "petrhosek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/oauth2client/pulls/731", "title": "Don't use socket.recv with socket.MSG_WAITALL", "body": "socket.MSG_WAITALL is not available on Windows so the call to\r\nsocket.recv with this flag will fail there. Provide a helper method\r\nthat tries to receive an exact number of bytes and use it instead.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orenyomtov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/oauth2client/pulls/726", "title": "Add `access_type` as an optional flow parameter", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "svalentin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/google/oauth2client/pulls/699", "title": "Add support for reauth in oauth2", "body": "When the library refreshes an access token, if it fails because a rapt\r\ntoken is required or invalid, we try to refresh the rapt token and then\r\nretry the access token refresh.\r\n\r\nTo refresh the rapt token, we interact with the rapt service to get one.\r\nThis implies getting an access token for just REAUTH_SCOPE (which\r\nshouldn't require a rapt token) then passing that to the reauth service\r\nand answering challenges. Challenges could either be PASSWORD or\r\nSECURITY_KEY. Different accounts can have different policies. Some\r\naccounts might need only password, some can require both.\r\nOnce all challenges are answered, we get back a rapt token, which we use\r\nto get an access token with all scopes, and we return the request as if\r\nthe original access token refresh completed successfully.\r\n\r\nAccess tokens can have a lifespan shorter than a rapt token, and getting\r\na rapt token requires going through the whole reauth flow, where the\r\nuser enters their password/gnubby. An example is 1h expiry time for\r\naccess token, and 24h for rapt token.\r\n\r\nCommunication with the gnubby is done via the pyu2f libary (all python)\r\nhttps://github.com/google/pyu2f/\r\n\r\nThe idea is clients (like gcloud) could come with that library included,\r\nbut if it's not, we can fail elegantly and just tell users we couldn't\r\nrefresh access token.\r\nWe can also include the library in oauth2 if it's appropriate.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skelterjohn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/oauth2client/issues/comments/29314864", "body": "I've added the test framework.\n\nPlease update your PR to include tests!\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/29314864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41329388", "body": "You'll probably have to redo this PR - I've updated this repo using the history from the old googlecode repo, so things will probably not match. On the other hand, that transition has now taken place, so we can actually act on this pull request once it's settled.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41329388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42227634", "body": "tox runs ok? If so, LGTM.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42227634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42831566", "body": "What version of python are you using?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42831566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835353", "body": "I figured. Sorry, oauth2client does not support python3.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835922", "body": "Care to make a pull request? :)\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835958", "body": "And sorry about the slow reply, I was sick last week and my inbox got away from me.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42840529", "body": "There seem to be some test issues, I'll put a comment inline about a likely cause.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42840529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42953367", "body": "Ah, I see now. Then I'm sorry but I'll have to call this one user error.\nThe .read() on that file should be done and the results passed to this\nfunction, rather than the file name. Do the docs suggest otherwise?\n\nOn Tue, May 13, 2014 at 5:37 AM, iditgolden notifications@github.comwrote:\n\n> I called it directly with the filename.\n> On May 13, 2014 12:15 PM, \"Craig Citro\" notifications@github.com wrote:\n> \n> > just to check: at least according to the docstring, this previously\n> > accepted the contents of the file as the argument (not the filename).\n> > were\n> > you calling this directly with the filename, or was this getting called\n> > from elsewhere in the library? (or were there other docs suggesting you\n> > should call it with the filename?)\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/google/oauth2client/issues/4#issuecomment-42933335>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/google/oauth2client/issues/4#issuecomment-42935262\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42953367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7935126", "body": "changing it from _key to __key makes it so it's very difficult to get at that attribute if you do it from outside the module. Some kind of name mangling. Generally used for things that absolutely shouldn't be touched under any circumstances, where the single underscore is more of a signal that touching it is the wrong way to interact with the module.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7935126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7935232", "body": "I'd rather see a function that throws a NotImplementedError.\n\ndef RsaSigner(pkey):\n  raise NotImplementedError('RsaSigner is only available if you have the rsa module installed.')\n\nor something to that effect.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7935232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7938401", "body": "For big blocks of text like this, use textwrap.dedent() - makes it a lot easier to read and edit.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7938401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7938589", "body": "What is this parameter? I can't find it in the source/docs.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7938589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7938707", "body": "with self.assertRaises(NotImplementedError):\n  credentials._generate_assertion()\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7938707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7940341", "body": "This message will be confusing for a Windows user. Maybe that doesn't matter.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7940341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12532490", "body": "I would have thought \"open(key)\" instead of file. Also, you'd need to do, eg\nwith open(key) as key_file:\n  ... key_file.read() ...\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12532490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "aeijdenberg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41344670", "body": "John - it's unlikely I'll have time.  Would you be able to pick it up?\n\nOn Thu, Apr 24, 2014 at 1:40 PM, John Asmuth notifications@github.comwrote:\n\n> You'll probably have to redo this PR - I've updated this repo using the\n> history from the old googlecode repo, so things will probably not match. On\n> the other hand, that transition has now taken place, so we can actually act\n> on this pull request once it's settled.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/google/oauth2client/pull/1#issuecomment-41329388\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41344670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41353823", "body": "Thank you.\n\nOn Thu, Apr 24, 2014 at 6:17 PM, Craig Citro notifications@github.comwrote:\n\n> I can if John can't, but not for another week or so.\n> \n> ---\n> \n> -cc\n> \n> sent from my phone\n> On Apr 24, 2014 4:26 PM, \"aeijdenberg\" notifications@github.com wrote:\n> \n> > John - it's unlikely I'll have time. Would you be able to pick it up?\n> > \n> > On Thu, Apr 24, 2014 at 1:40 PM, John Asmuth notifications@github.comwrote:\n> > \n> > > You'll probably have to redo this PR - I've updated this repo using\n> > > the\n> > > history from the old googlecode repo, so things will probably not\n> > > match.\n> > > On\n> > > the other hand, that transition has now taken place, so we can\n> > > actually\n> > > act\n> > > on this pull request once it's settled.\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > > https://github.com/google/oauth2client/pull/1#issuecomment-41329388>\n> > > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/google/oauth2client/pull/1#issuecomment-41344670>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/google/oauth2client/pull/1#issuecomment-41350726\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41353823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801175", "body": "Changed to add the \"s\".  I'd rather not go into too much detail how to do oneself as I'd really like to see us include everything you need in the build we provide \"batteries included\".\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801204", "body": "Not sure what you're asking...\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801221", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801245", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801355", "body": "You're welcome to change - I'm just copying the style pre-existing in the file.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7801355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941807", "body": "Ack. There's probably a bunch of refactoring that could be done across the module - I'd like to restrict this set of changes to added support for the rsa library.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941822", "body": "Ack. There's probably a bunch of refactoring that could be done across the module - I'd like to restrict this set of changes to added support for the rsa library.  This preserves current behavior for the other signature implementations.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941843", "body": "Ack.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941875", "body": "Which one? Sub? I think that's a renamed prn.  I just copied and pasted the tests for the other signing modules to confirm we get the same behavior here.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941888", "body": "Again, I'm just copying the existing unit test.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941901", "body": "Ack.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/7941901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "lraccomando": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41848469", "body": "Just signed it now!\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/41848469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43019438", "body": "Thanks for getting to this: \n1. No reason I can think of. I'd be happy to build out support for the other storage options if that is something that you'd like to support. \n2. I would rather have overwrite be the default, it seems to me to be cleaner, prevents obsolete rows in the DB and prevent errors with tables enforcing unique user_ids (this was my use case). I chose to make overwrite opt-in only for compatibility reasons. That being said, I'm having a tough time thinking about a use case where duplication would be desired and I'd be happy to make overwrite the default if you'd prefer that. \n\nLet me know about the above and I'll make the requested changes and resubmit :)  \n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43019438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43103005", "body": "You got it. I've made the requested changes from comments and merged in master. Would you like a fresh PR or is this still acceptable?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/43103005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "fthiery": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42235031", "body": "Done, and submitted to the designated address.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42235031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Forever-Young": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835213", "body": "Python 3.x\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42835213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "iditgolden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42836349", "body": "no problem.\n\nThanks\n\nOn Mon, May 12, 2014 at 5:08 PM, John Asmuth notifications@github.comwrote:\n\n> And sorry about the slow reply, I was sick last week and my inbox got away\n> from me.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/google/oauth2client/issues/4#issuecomment-42835958\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42836349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42838571", "body": "pull request was created.\nhttps://github.com/google/oauth2client/pull/8\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42838571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42935262", "body": "I called it directly with the filename.\nOn May 13, 2014 12:15 PM, \"Craig Citro\" notifications@github.com wrote:\n\n> just to check: at least according to the docstring, this previously\n> accepted the contents of the file as the argument (not the filename). were\n> you calling this directly with the filename, or was this getting called\n> from elsewhere in the library? (or were there other docs suggesting you\n> should call it with the filename?)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/google/oauth2client/issues/4#issuecomment-42933335\n> .\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/issues/comments/42935262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "methane": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/8112796", "body": "2010-2014 ?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/8112796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/9200383", "body": "@craigcitro httplib2 treats headers as native string.  It's unicode on Python 3.\nSee https://github.com/jcgregorio/httplib2/blob/master/python3/httplib2/__init__.py#L193-L195\n\n``` python\n    if six.PY3:\n        clean_k = clean_k.decode('ascii')\n        clean_v = clean_v.decode('ascii')\n    clean[clean_k] = clean_v\n```\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/9200383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "gcarothers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/8564588", "body": "This refrencing is `_CreateArgumentParser` before it's defined, and is horribly broken. \n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/8564588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sde-melo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/8701319", "body": "Thanks Craig!\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/8701319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "gregorynicholas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/11439144", "body": "what does this do?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/11439144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jorr-at-google": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/12116100", "body": "Nit: Should be document in docstring, eg:\n\nstate: string, Opaque state string which is passed through the OAuth2 flow and returned to the client as a query parameter in the callback.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/12116100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "bigblind": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/12118096", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/12118096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "tseaver": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/13121003", "body": "This change [breaks `gcloud.python`](https://travis-ci.org/GoogleCloudPlatform/gcloud-python/builds/79351464) now that `oauth2client` 1.5.0 is being used.\n\nWhat guarantees that `webapp2` as a top-level import will be available?\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/13121003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/13143217", "body": "`webapp2` is not listed as an `install_requires` dependency, which means it may not be installed (except, presumably on GAE).  See #302 for discussion.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/13143217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "broady": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/16215954", "body": "overridden\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/16215954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "nad2000": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/google/oauth2client/comments/16260659", "body": "Documentation and examples, eg, https://cloud.google.com/bigquery/authentication, still refer to **run** not **run_flow** :(\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/16260659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/comments/16261003", "body": "shouldn't it be **raw_input**??? **input** evaluates the entered string, btw\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/comments/16261003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "anthmgoogle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12810102", "body": "If this is the starting point for the online docs, I would include a very breif summary what this does, i.e it uses the GAE or GCE built in service accounts, or it uses the environment variable or it uses the credential provided by \"gcloud auth logic\"\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12810102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12810194", "body": "A nit: I found the name of this method confusing at first before i read the code to discover that it is environment variable path. Perhaps call it _get_environment_variable_credentials or something with environment_variable in it.\n", "reactions": {"url": "https://api.github.com/repos/google/oauth2client/pulls/comments/12810194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}