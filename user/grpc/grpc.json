{"_default": {"1": {"Disturbing": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14067", "title": "Grpc/Protobuf Unloadable Create Descriptor from .proto in run-time", "body": "### What version of gRPC and what language are you using?\r\n \r\n 1.8.3\r\n\r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\n Windows 10\r\n\r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\ndotnet 2.0.3\r\n \r\n### What did you expect to see?\r\n \r\nI'd like to load a .proto file and create a Descriptor class in runtime.\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtattermusch": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14066", "title": "completion_queue_threading_test is flaky (GRPC_POLL_STRATEGY=epollex)", "body": "Failing 3-4% of builds.\r\n\r\n```\r\n...\r\nI0115 23:27:15.868564964    6745 completion_queue_threading_test.cc:198] consumer 106 phase 2 done\r\nI0115 23:27:15.868603191    6754 completion_queue_threading_test.cc:198] consumer 112 phase 2 done\r\nI0115 23:27:15.868564523    6743 completion_queue_threading_test.cc:198] consumer 104 phase 2 done\r\nE0115 23:27:25.868801879    6330 completion_queue_threading_test.cc:261] assertion failed: gpr_event_wait(&options[i].on_finished, ten_seconds_time())\r\n```\r\n\r\nSeeing failures in:\r\ndbg\r\nhttps://sponge.corp.google.com/target?id=0ef9db45-f533-4c10-835e-79ac8ffc766d&target=github/grpc/c_linux_dbg_native&searchFor=&show=FAILED&sortBy=STATUS\r\nhttps://sponge.corp.google.com/target?id=0a81c3e8-f823-4cfc-b106-b8b5ba3326ca&target=github/grpc/c_linux_dbg_native&searchFor=&show=FAILED&sortBy=STATUS\r\nhttps://sponge.corp.google.com/target?id=c46b2c97-27f3-46a9-afe7-d49f1e894646&target=github/grpc/c_linux_dbg_native&searchFor=&show=ALL&sortBy=STATUS\r\n\r\nasan\r\nhttps://sponge.corp.google.com/target?id=732e6887-7fc8-4b98-9a84-db571cecbffb&target=github/grpc/c_linux_asan_native&searchFor=&show=ALL&sortBy=STATUS\r\nhttps://sponge.corp.google.com/invocation?id=b311594a-c8c3-4d1f-a981-0ffff0c23579\r\nhttps://sponge.corp.google.com/invocation?id=47254cbb-2cbd-4160-a6f4-72ccfc8e0ede\r\n\r\ntsan\r\nhttps://sponge.corp.google.com/invocation?id=8f9233b8-e387-4265-a4e0-bedbdcbda1ca\r\nhttps://sponge.corp.google.com/invocation?id=a16f21b4-385a-4f45-81d6-ec616da6428c\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/14045", "title": "qps_json_driver:inproc_* test are timing out (under epollex)", "body": "Mostly happening on `opt`. Overall fails about 10% of our master builds. (the flake itself is not very common, but runs many times in a single suite, so the occurrence is amplified).\r\n\r\nSeems to be happening only with `epollex`\r\n\r\nE.g.\r\nhttps://sponge.corp.google.com/invocation?id=b1dce5f3-bf7a-4cd4-97ac-1a0039b39d3d\r\nhttps://sponge.corp.google.com/invocation?id=e54c66cc-ba99-4173-a326-247e9c129d61\r\nhttps://sponge.corp.google.com/invocation?id=9d08480e-b4af-4435-8afe-f8d191bfccc2\r\nhttps://sponge.corp.google.com/invocation?id=df7b8eee-ee38-4000-95db-087115616b9d\r\nhttps://sponge.corp.google.com/invocation?id=f2d332a9-ef59-4d0c-963c-a6e4067d13d1\r\n\r\n```\r\nqps_json_driver:inproc_cpp_generic_async_streaming_qps_unconstrained_1cq_insecure GRPC_POLL_STRATEGY=epollex\r\nqps_json_driver:inproc_cpp_protobuf_async_streaming_qps_unconstrained_1cq_insecure GRPC_POLL_STRATEGY=epollex\r\nqps_json_driver:inproc_cpp_protobuf_async_unary_qps_unconstrained_insecure GRPC_POLL_STRATEGY=epollex\r\n```\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/grpc/grpc/commits/d4031c3b934aae20cac538124007dc3eeb3a5bff", "message": "Merge pull request #14069 from jtattermusch/macro_param_warning\n\nfix \"not enough actual parameters for macro\" warning"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/b5089297dbe528c773233ed1a7bb429e880f4d5a", "message": "fix \"not enough actual parameters for macro\" warning"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/5eb6148ab4e95ea472af2033bd976317992fe18f", "message": "Merge pull request #14065 from jtattermusch/distribtests_standalone_fixup\n\ndistribtests_standalone: fixing nits"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/6a365ccc6d1557b131c86631965c448b01b1f724", "message": "Merge pull request #14046 from jtattermusch/try_fixing_dualstack_socket_test\n\nTry avoid deadline_exceeded failure in dualstack_socket_test"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/631ccc2c798a668cc3bc396dcd849cbac37b833c", "message": "distribtests_standalone: fixing nits"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/143fb810cc4c449f1faba2ba9710524627cd1793", "message": "Merge pull request #14005 from jtattermusch/fix_win_alarm_test\n\nFix alarm test flake on windows"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/0f5f46109b995aab3bb5f8ffeadd96547de7e100", "message": "use grpc_timeout_milliseconds_to_deadline directly"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/7dddc2365538168331e848723106657d56e22458", "message": "Merge pull request #14047 from jtattermusch/distribtests_add_standalone\n\nAdd config files for standalone distribtests (C++ for now)."}, {"url": "https://api.github.com/repos/grpc/grpc/commits/52e560a01eba64abd3efec8e8622ae90d5f3d03d", "message": "add standalone distribtests"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/816e8f7f43aff2f3ccba5c998587e92005645236", "message": "try avoid deadline_exceeded failure in dualstack_socket_test"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/a6ff754b93658e03e4a89b42855b8c74496b672e", "message": "fix alarm test flake on windows"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/323028304b6f864b1d0a3fed9acefd1c9374e5bd", "message": "Merge pull request #14028 from jtattermusch/cmake_include_improvements\n\ncmake build cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vjpai": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14063", "title": "C++-ize inproc transport", "body": "### Should this be an issue in the gRPC issue tracker?\r\n \r\nYes\r\n\r\n### What version of gRPC and what language are you using?\r\n \r\nCore, C++\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\nN/A\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\n N/A\r\n\r\n### What did you do?\r\n\r\nRead the code for in-process transport\r\n \r\n### What did you expect to see?\r\n \r\nClean idiomatic C++ code \r\n\r\n### What did you see instead?\r\n \r\nC-style code\r\n\r\n### Anything else we should know about your project / environment?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/14062", "title": "C++-ize core transport API", "body": "### Should this be an issue in the gRPC issue tracker?\r\n \r\nYes\r\n\r\n### What version of gRPC and what language are you using?\r\n \r\nCore, C++\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\nN/A\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\n N/A\r\n\r\n### What did you do?\r\n\r\nRead the code in `src/core/lib/transport`\r\n \r\n### What did you expect to see?\r\n \r\nIdiomatic C++ code \r\n\r\n### What did you see instead?\r\n \r\nC-style code\r\n \r\n### Anything else we should know about your project / environment?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/14061", "title": "C++-ize slice_buffer", "body": "### Should this be an issue in the gRPC issue tracker?\r\n \r\nYes\r\n\r\n### What version of gRPC and what language are you using?\r\n \r\nCore, C++\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\nN/A\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\n N/A\r\n\r\n### What did you do?\r\n\r\nRead the code for grpc_slice_buffer\r\n \r\n### What did you expect to see?\r\n \r\nClean idiomatic C++ code \r\n\r\n### What did you see instead?\r\n \r\nC-style code with manually-inlined vectors\r\n \r\n### Anything else we should know about your project / environment?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/14059", "title": "C++-ize slice", "body": "### Should this be an issue in the gRPC issue tracker?\r\n \r\nYes\r\n\r\n### What version of gRPC and what language are you using?\r\n \r\nCore, C++\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\nN/A\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\n N/A\r\n\r\n### What did you do?\r\n\r\nRead the code for grpc_slice\r\n \r\n### What did you expect to see?\r\n \r\nClean idiomatic C++ code \r\n\r\n### What did you see instead?\r\n \r\nC-style code with manually-inlined vectors\r\n \r\n### Anything else we should know about your project / environment?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14015", "title": "Remove alarm from core, implement in C++ layer only", "body": "grpc_alarm was not exposed by the API of any wrapped languages other than C++ . It is being removed from core and implemented only at the C++ layer.\r\n\r\nThis PR allows grpc::Alarm to directly use the core timer library, and it is a step in the de-wrapping of the gRPC C++ API.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/14010", "title": "Fix-forward: Stop using std::thread in C++ library since it can trigger exceptions", "body": "Reverts grpc/grpc#14003\r\nWill figure out how to deal with the races exposed the last time.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/14009", "title": "Potential termination fixes for qps_test", "body": "Continues #11778 ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/14008", "title": "Robustness work for qps_test", "body": "Continues #13788 ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/14007", "title": "Simplify (a little) qps_test async server code", "body": "Continues #11230 ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/13990", "title": "ClosureRef proposal", "body": "Continues PR #13068 ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/13989", "title": "Function family implementation", "body": "Continues from PR #13083 ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/13988", "title": "LTO efforts", "body": "Continues from PR #9951 ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/13987", "title": "FunctionView implementation", "body": "Continues from PR #13374 ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/11602019", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11602019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "euroelessar": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14058", "title": "Reduce number of copies in ssl transport layer", "body": "Please answer these questions before submitting your issue. \r\n \r\n### Should this be an issue in the gRPC issue tracker?\r\n \r\nCreate new issues for bugs and feature requests. An issue needs to be actionable. General gRPC discussions and usage questions belong to:\r\n- [grpc.io mailing list](https://groups.google.com/forum/#!forum/grpc-io)\r\n- [StackOverflow, with `grpc` tag](http://stackoverflow.com/questions/tagged/grpc)\r\n \r\n*Please don't double post your questions in more locations; we are monitoring both channels, and the time spent de-duplicating questions is better spent answering more user questions.*\r\n \r\n### What version of gRPC and what language are you using?\r\n \r\n1.8.4, grpc-core (proprietary binding)\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\nLinux, Ubuntu 16.04\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\ngcc-4.9\r\n \r\n### What did you do?\r\n\r\nRun a load test with the following setup (and other way around):\r\n1. Use grpc with TLS encryption enabled\r\n2. Single completion queue on both server and client\r\n3. Server and client are located on different servers in datacenter\r\n4. Client concurrently sends 16MB requests to server in a loop\r\n5. Server responds with empty body\r\n \r\n### What did you expect to see?\r\n \r\nBoth server and client spend most of their time in tcp stack, transferring data to/from tcp stack and doing actual encryption. Effectively setup should be able to handle ~600-800 MBps per cpu core. (Non-tls grpc handles ~900 MBps per cpu core on the same hardware under the same load conditions).\r\n \r\n### What did you see instead?\r\n\r\nServer spends 80% of cpu time inside BIO_read (based on pprof) and throughput is bounded by 50 MBps (~20 times performance degradation compared to disabled encryption).\r\n \r\n### Anything else we should know about your project / environment?\r\n\r\nApparently ssl_transport_security [uses BIO_s_mem](https://github.com/grpc/grpc/blob/32d077e7e18ea0164aaa78cf350a00f429cbadeb/src/core/tsi/ssl_transport_security.cc#L1110-L1111) which has potentially O(n^2) runtime complexity for reading all data from buffer by using BIO_read operation.\r\nIt can be explained by the fact that read is implemented as:\r\n1. read prefix from buffer\r\n2. move leftover to the beginning of buffer\r\n3. if buffer is not empty goto 1\r\n\r\nIt can be mitigated by using BIO_pair instead as it uses ring buffer and therefore upper bounds number of performed copies. It allows to achieve throughput of 300 MBps for the described above test.\r\n\r\nMore gains can be achieved by implementing zero copy protector interface to pass slices to boringssl directly using custom BIO implementation (similar to chrome's approach).", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14060", "title": "[ssl] Use ring buffer in ssl transport layer", "body": "BIO_pair is implemented on top ring buffer which is more efficient compared to current BIO_mem approach.\r\n\r\nSee #14058", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sreecha": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14056", "title": "Allow GRPC_ENABLE_FORK_SUPPORT environment variable to be set to 'false'", "body": "Currently we could only set the environment variable `GRPC_ENABLE_FORK_SUPPORT` to _truthy_ values (see https://github.com/grpc/grpc/blob/v1.8.4/src/core/lib/support/fork.cc#L43)\r\n\r\nThere might be some scenarios where the user might want to explicitly disable fork support (see https://github.com/grpc/grpc/issues/13998 for example). To support such cases, we should allow the environment variable to also have _falsey_ values\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/14055", "title": "Clearly document the cases where fork() is supported in grpc()", "body": "gRPC does not support `fork()` in general - i.e it is not safe for a gRPC application to call `fork()` as it can lead to undefined behavior.\r\n\r\nAs of release 1.7, we added *very limited* support to `fork()`; where it is safe for an application to call `fork()` as long as the application did not start any gRPC work (beyond calling `grpc_init()) prior to calling `fork()`\r\n\r\nWe need to do a better job at documenting this clearly - the fact that gRPC does not support fork() in general and the only time it is safe to call fork() is if the application did not start any gRPC work.\r\n\r\nWe have been noticing several issues caused due to fork()  (and this is mainly due to grpc users not realizing that fork() is not supported)\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sunshichao520": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14044", "title": "generate_cc.bzl BUG", "body": "\r\n### What version of gRPC and what language are you using?\r\n Tag v1.8.4\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n Linux 14:04\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n Bazel 0.9.0\r\n \r\n### What did you do?\r\n\r\nWhen I try my code with Bazel, It will generate a wrong directory which missing first letter.\r\n \r\n```\r\nlabel_len = len(ctx.label.package)+1\r\nif ctx.executable.plugin:\r\n    outs += [proto.path[label_len:-len(\".proto\")] + \".grpc.pb.h\" for proto in protos]\r\n    outs += [proto.path[label_len:-len(\".proto\")] + \".grpc.pb.cc\" for proto in protos]\r\n    if ctx.attr.generate_mock:\r\n      outs += [proto.path[label_len:-len(\".proto\")] + \"_mock.grpc.pb.h\" for proto in protos]\r\n  else:\r\n    outs += [proto.path[label_len:-len(\".proto\")] + \".pb.h\" for proto in protos]\r\n    outs += [proto.path[label_len:-len(\".proto\")] + \".pb.cc\" for proto in protos]\r\n  out_files = [ctx.new_file(out) for out in outs]\r\n```\r\n\r\nbecause ctx.label.package is zero in my project, so can not add 1, or new file will miss a letter.\r\n\r\nI change some code, please refer to commit c6a757e0446837471d0b271feb14f1ee7c861c45.\r\nIf I was wrong, please fix it. Thanks\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rurounijones": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14043", "title": " Ruby gRPC server does not stop gracefully after receiving SIGINT / SIGTERM ", "body": "Since the previous issue ( https://github.com/grpc/grpc/issues/12189 ) on this was closed and appears not to be tracked. Re-opening here:\r\n\r\nPlease answer these questions before submitting your issue. \r\n \r\n### Should this be an issue in the gRPC issue tracker?\r\n\r\nYes \r\n \r\n### What version of gRPC and what language are you using?\r\n \r\ngRPC rubygems 1.8.2 and 1.9.0-dev (Local build) \r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n \r\nOS: Kubuntu 16.04 LTS Linux devbox 4.10.0-42-generic #46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n(Previous ticket that was closed was also reporting this on Mac OS X El Capitan 10.11.6)\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n \r\nRuby: ruby 2.3.6p384 (2017-12-14 revision 61254) [x86_64-linux]\r\nGRPC: 1.9.0.dev (built from master locally)\r\n \r\n### What did you do?\r\n\r\nRun the greeter and shut it down using CTRL-C\r\n\r\n### What did you expect to see?\r\n\r\nGraceful shutdown\r\n \r\n### What did you see instead?\r\n\r\n```\r\n> $ ./greeter_server.rb                                                                                                                                                                                                          \r\n^C/home/jjones/.rvm/gems/ruby-2.3.6@ganges-product-service/gems/grpc-1.9.0.dev/src/ruby/lib/grpc/generic/rpc_server.rb:391:in `request_call': Interrupt\r\n        from /home/jjones/.rvm/gems/ruby-2.3.6@ganges-product-service/gems/grpc-1.9.0.dev/src/ruby/lib/grpc/generic/rpc_server.rb:391:in `loop_handle_server_calls'\r\n        from /home/jjones/.rvm/gems/ruby-2.3.6@ganges-product-service/gems/grpc-1.9.0.dev/src/ruby/lib/grpc/generic/rpc_server.rb:352:in `run'\r\n        from ./greeter_server.rb:42:in `main'\r\n        from ./greeter_server.rb:45:in `<main>'\r\nE0108 07:21:46.570601746     765 completion_queue.cc:490]    assertion failed: cqd->completed_head.next == (uintptr_t)&cqd->completed_head\r\n[1]    765 abort (core dumped)  ./greeter_server.rb\r\n``` \r\n### Anything else we should know about your project / environment?\r\n\r\nNone, this is using the examples provided with grpc.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apolcyn": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14040", "title": "FAILURE: SEGV in bins/dbg/secure_sync_unary_ping_pong_test", "body": "```\r\nE0116 23:00:00.139279743    3716 driver.cc:86]               Environment variable \"QPS_WORKERS\" does not contain a list of QPS workers to use. Set it to a comma-separated list of hostname:port pairs, starting with hosts that should act as servers. E.g. export QPS_WORKERS=\"serverhost1:1234,clienthost1:1234,clienthost2:1234\"\r\nD0116 23:00:00.139298547    3716 test_config.cc:388]         test slowdown factor: sanitizer=1, fixture=1, poller=1, total=1\r\nI0116 23:00:00.139451195    3716 ev_epoll1_linux.cc:95]      grpc epoll fd: 3\r\nD0116 23:00:00.139464886    3716 ev_posix.cc:128]            Using polling engine: epoll1\r\nD0116 23:00:00.139491932    3716 dns_resolver.cc:294]        Using native dns resolver\r\nI0116 23:00:00.141280595    3716 ev_epoll1_linux.cc:95]      grpc epoll fd: 3\r\nD0116 23:00:00.141294915    3716 ev_posix.cc:128]            Using polling engine: epoll1\r\nD0116 23:00:00.141303904    3716 dns_resolver.cc:294]        Using native dns resolver\r\nI0116 23:00:00.141344361    3716 server_builder.cc:269]      Synchronous server. Num CQs: 1, Min pollers: 1, Max Pollers: 2, CQ timeout (msec): 10000\r\nI0116 23:00:00.142532352    3716 server_builder.cc:269]      Synchronous server. Num CQs: 1, Min pollers: 1, Max Pollers: 2, CQ timeout (msec): 10000\r\nI0116 23:00:00.142643960    3716 driver.cc:272]              Starting server on localhost:17980 (worker #0)\r\nI0116 23:00:00.143759044    3742 qps_worker.cc:231]          RunServerBody: about to create server\r\nI0116 23:00:00.144150597    3742 qps_worker.cc:69]           Starting server of type SYNC_SERVER\r\nI0116 23:00:00.145404333    3742 server_builder.cc:269]      Synchronous server. Num CQs: 1, Min pollers: 1, Max Pollers: 2, CQ timeout (msec): 10000\r\nI0116 23:00:00.146330302    3742 qps_worker.cc:239]          RunServerBody: server created\r\nI0116 23:00:00.146400968    3742 qps_worker.cc:246]          RunServerBody: creation status reported\r\nI0116 23:00:00.146494844    3716 driver.cc:328]              Starting client on localhost:27089 (worker #1)\r\nD0116 23:00:00.146554009    3716 driver.cc:350]              Client 0 gets 1 channels\r\nI0116 23:00:00.147175299    3733 qps_worker.cc:188]          RunClientBody: about to create client\r\nI0116 23:00:00.147194646    3733 qps_worker.cc:50]           Starting client of type SYNC_CLIENT UNARY 0\r\nI0116 23:00:00.147434984    3733 client.h:427]               Connecting to localhost:6230\r\nI0116 23:00:00.156036147    3733 qps_worker.cc:193]          RunClientBody: client created\r\nI0116 23:00:00.156119718    3733 qps_worker.cc:198]          RunClientBody: creation status reported\r\nI0116 23:00:00.156185640    3716 driver.cc:371]              Initiating\r\nI0116 23:00:00.156283099    3733 qps_worker.cc:200]          RunClientBody: Message read\r\nI0116 23:00:00.157224380    3733 qps_worker.cc:209]          RunClientBody: Mark response given\r\nI0116 23:00:00.157688758    3716 driver.cc:392]              Warming up\r\n\r\n\r\n\r\n*******************************\r\nCaught signal SIGSEGV\r\n\r\n```\r\n\r\n\r\nhttps://sponge.corp.google.com/target?id=0225f7e8-85b3-49b0-9466-b99a167f70e2&target=github/grpc/c%2B%2B_linux_dbg_native&searchFor=&show=ALL&sortBy=STATUS", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14042", "title": "Ruby macos kokoro environment and package build updates", "body": "This updates kokoro tests to use ruby  2.5 and adds a sanity check that jenkins mac are configured as expected. (All jenkins mac workers are now running ruby 2.5; observably, this was needed for grpc-ruby mac binaries in mac packages to load on ruby 2.5).\r\n\r\nAlso, skipping the doc installation during `gem  update --system` cuts ~1 minute from the package build", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/13961", "title": "Fix service config structures in c-ares tests", "body": "This brings out the fixes for service config JSONs from https://github.com/grpc/grpc/pull/12942, and also does a small refactoring\r\n\r\nManual changs were made to:\r\n* `test/cpp/naming/resolver_component_test_record_groups.yaml`\r\n* `test/cpp/naming/service_config_utils.py`\r\n* `test/cpp/naming/test_dns_server.py`\r\n* `test/cpp/naming/gen_build_yaml.py`\r\n* `test/cpp/naming/resolver_component_test.cc`\r\n* all `.json` files under `test/cpp/naming/service_configs/`\r\n\r\nThe rest of the changes are from regenerating projects.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Qian-Zhang7": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14038", "title": "grpc client send stuck at epoll_pwait() forever", "body": "Grpc experters,\r\n\r\nWe have a grpc client (C++) that frequently stream data (multiple records for each stream) to the server side (server side is in a remote cluster implemented using google go).  We see client stream often stuck at epoll_pwait() for long long time.  Can anyone shed light on what it is waiting for? Is it client's fault or server's side fault?\r\n\r\nThank you very much!\r\nQian\r\n\r\n----grpc client stack trace ---\r\nLoaded symbols for /usr/lib64/libbz2.so.1\r\n0x00007fb870200a3d in poll () from /usr/lib64/libc.so.6\r\nMissing separate debuginfos, use: debuginfo-install augeas-libs-1.4.0-2.el7_4.2.x86_64 blosc-1.11.3-1.cisco.el7.centos.x86_64 bzip2-libs-1.0.6-13.el7.x86_64 elfutils-libelf-0.168-8.el7.x86_64 elfutils-libs-0.168-8.el7.x86_64 glibc-2.17-196.el7_4.2.x86_64 libattr-2.4.46-12.el7.x86_64 libcap-2.22-9.el7.x86_64 libgcc-4.8.5-16.el7_4.1.x86_64 libselinux-2.5-11.el7.x86_64 libstdc++-4.8.5-16.el7_4.1.x86_64 libxml2-2.9.1-6.el7_2.3.x86_64 libzstd-1.3.2-1.el7.x86_64 lz4-1.7.3-1.el7.x86_64 pcre-8.32-17.el7.x86_64 protobuf3-3.4.0-1.cisco.el7.centos.x86_64 qdbm-1.8.78-1.cisco.el7.centos.x86_64 snappy-1.1.0-3.el7.x86_64 systemd-libs-219-42.el7_4.4.x86_64 xz-libs-5.2.2-1.el7.x86_64 zlib-1.2.7-17.el7.x86_64\r\n(gdb) info thread\r\n  Id   Target Id         Frame \r\n  5    Thread 0x7fb86e578700 (LWP 15260) \"cdb_export\" 0x00007fb87020b587 in epoll_pwait () from /usr/lib64/libc.so.6\r\n  4    Thread 0x7fb86dd77700 (LWP 15261) \"cdb_export\" 0x00007fb870d01945 in pthread_cond_wait@@GLIBC_2.3.2 () from /usr/lib64/libpthread.so.0\r\n  3    Thread 0x7fb86d576700 (LWP 15262) \"cdb_export\" 0x00007fb870d01cf2 in pthread_cond_timedwait@@GLIBC_2.3.2 () from /usr/lib64/libpthread.so.0\r\n  2    Thread 0x7fb867bd7700 (LWP 15263) \"cdb_export\" 0x00007fb870d01945 in pthread_cond_wait@@GLIBC_2.3.2 () from /usr/lib64/libpthread.so.0\r\n* 1    Thread 0x7fb87223da80 (LWP 15259) \"cdb_export\" 0x00007fb870200a3d in poll () from /usr/lib64/libc.so.6\r\n(gdb) thread 5\r\n[Switching to thread 5 (Thread 0x7fb86e578700 (LWP 15260))]\r\n#0  0x00007fb87020b587 in epoll_pwait () from /usr/lib64/libc.so.6\r\n(gdb) bt\r\n#0  0x00007fb87020b587 in epoll_pwait () from /usr/lib64/libc.so.6\r\n#1  0x00007fb86f725481 in ?? () from /usr/lib64/libgrpc.so.4\r\n#2  0x00007fb86f741a3c in ?? () from /usr/lib64/libgrpc.so.4\r\n#3  0x00007fb86f74255b in grpc_completion_queue_pluck () from /usr/lib64/libgrpc.so.4\r\n#4  0x00007fb871e129c8 in grpc::CoreCodegen::grpc_completion_queue_pluck(grpc_completion_queue*, void*, gpr_timespec, void*) () from /usr/lib64/libgrpc++.so.1\r\n#5  0x000000000048f1a0 in Pluck (tag=0x7fb86e5775d0, this=0x7fb86809dca8) at /usr/include/grpc++/impl/codegen/completion_queue.h:224\r\n#6  ClientWriter<nam::PushResponse> (response=0x7fb86e577730, context=0x7fb86e577790, method=..., channel=0x7fb8680024e0, this=0x7fb86809dc20)\r\n    at /usr/include/grpc++/impl/codegen/sync_stream.h:282\r\n#7  nam::NamData::Stub::PushRaw (this=<optimized out>, context=context@entry=0x7fb86e577790, response=response@entry=0x7fb86e577730) at gen-cpp/nam_data.grpc.pb.cc:34\r\n#8  0x0000000000416bcd in Push (response=0x7fb86e577730, context=0x7fb86e577790, this=<optimized out>) at /home/cisco/nam/nam/protobuf-defs/gen-cpp/nam_data.grpc.pb.h:67\r\n#9  NamDataClient::stream_pages (this=0x7fb8680008c0, rec=rec@entry=0x7fb86800fc90, table_name=table_name@entry=0x70bdc8 <Schema+11656> \"ARTCltSvr\", \r\n    num_records=num_records@entry=1004, record_size=record_size@entry=508, aggr_interval=aggr_interval@entry=25, exporter_addr=..., \r\n    interval_index=interval_index@entry=45701) at nam_data_client.cc:209\r\n#10 0x000000000040e4c8 in cdbe_grpc_send (index=index@entry=1, record_buff=0x7fb86800fc90, sch_p=sch_p@entry=0x70bdc8 <Schema+11656>, num_records=1004, record_size=508, \r\n    aggr_interval=25, interval_index=interval_index@entry=45701) at cdb_export.cpp:389\r\n#11 0x000000000040e828 in cdbe_read_and_send (index=index@entry=1, read_info=read_info@entry=0x7fb86e577ac0, gen_info=gen_info@entry=0x7fb86e577ad0, \r\n    file_id=file_id@entry=1) at cdb_export.cpp:489\r\n#12 0x000000000040ec00 in cdbe_thread_run (ptr=<optimized out>) at cdb_export.cpp:673\r\n#13 0x00007fb870cfde25 in start_thread () from /usr/lib64/libpthread.so.0\r\n#14 0x00007fb87020b34d in clone () from /usr/lib64/libc.so.6\r\n(gdb) up", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Zomaka": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14034", "title": "Can't connect to multiple servers at the same time", "body": " *Please don't double post your questions in more locations; we are monitoring both channels, and the time spent de-duplicating questions is better spent answering more user questions.*\r\n \r\n### What version of gRPC and what language are you using?\r\n C++ with gRPC v1.8.x\r\n \r\n### What operating system (Linux, Windows, \u2026) and version?\r\n Linux\r\n \r\n### What runtime / compiler are you using (e.g. python version or version of gcc)\r\n gcc 5.4\r\n \r\n### What did you do?\r\n\r\nI wanted to submit the same data to multiple servers at the same time using gRPC.\r\n\r\nI looked at the greeterAsyn2 c++ example:\r\nhttps://github.com/grpc/grpc/blob/v1.8.x/examples/cpp/helloworld/greeter_async_client2.cc\r\n\r\nFrom the example: In order to create 1 channel you can just do this:\r\n\r\n    GreeterClient greeter(grpc::CreateChannel(\r\n                \"localhost:50051\", grpc::InsecureChannelCredentials()));\r\n\r\nAs this would create the stub for the channel:\r\n\r\n    class GreeterClient {\r\n      public:\r\n        explicit GreeterClient(std::shared_ptr<Channel> channel)\r\n                : stub_(Greeter::NewStub(channel)) {}\r\n    }\r\n\r\nAnd I would be able to submit data using\r\n\r\n    greeter.SayHello(\"hello world\");  \r\n\r\nBut what if I want to submit data to 2 different servers using 2 different channels? \r\n\r\nIf I would just add another GreeterClient object called greeter2:\r\n\r\n    GreeterClient greeter2(grpc::CreateChannel(\r\n                \"10.0.0.3:9008\", grpc::InsecureChannelCredentials()));\r\n\r\nI get a segmentation fault when trying to submit the data to the second server:\r\n\r\n    greeter2.SayHello(\"hello world\");  \r\n\r\n\r\n### What did you expect to see?\r\n A program that connects to 2 gRPC servers at the same time\r\n \r\n### What did you see instead?\r\nSegmentation fault (core dumped)\r\n \r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "markdroth": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14033", "title": "Tracing API should not create global objects of non-POD type", "body": "The C++ tracing API code from #13109 adds global objects of non-POD type, which violates the style guide.  We should replace this by having a function that returns a local static variable that is initialized to point to a dynamically created tracer object, so that the tracer object is never destructed.", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/grpc/grpc/commits/3538efb53bd6d3bfca91aa50db7a6e1b97b9c855", "message": "Merge pull request #14048 from markdroth/fix_sanity\n\nFix sanity"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/d9c288bba7ad2da82bb14ed48ff3aa5a288e609f", "message": "generate_projects"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/8afe8d35e13d52fa61c72f9570bc900253ffebb9", "message": "Merge pull request #13984 from markdroth/ref_counting\n\nFix existing ref counting classes and add new ones."}], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14070", "title": "Combine BackOff Begin() and Step() methods.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/14051", "title": "Split lib/support into lib/gpr and lib/gpr++.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/14026", "title": "C++ Filter API", "body": "For now, this is a clone of Craig's WIP from #13301.  Over time, I'll flesh this out and try to push it forward.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yashykt": {"issues": [{"url": "https://api.github.com/repos/grpc/grpc/issues/14030", "title": "C++ize proxy mapper", "body": "This is part of the effort to C++ize gRPC core", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/14029", "title": "C++ize handshaker API", "body": "This is part of the effort to C++ize gRPC core\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/14029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mehrdada": {"issues": [], "commits": [{"url": "https://api.github.com/repos/grpc/grpc/commits/7562c4eb6fbe7f7f1893ae7f828d1cad45aafe10", "message": "Merge pull request #14054 from mehrdada/reformat-pydocstrings\n\nReformat Python docstrings"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/e607f1a42e9673bf06649f2cecbabc32d1f829ec", "message": "Merge pull request #14052 from mehrdada/legacyepoll\n\nExplicitly enable epoll1 on manylinux1"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/f2a33b0e39a7cca7b2c6dc96f105a73f54702304", "message": "Reformat Python docstrings"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/fb66900a9ab7729d22aa83a0e60cb80ec8e642c6", "message": "Eliminate GRPC_LINUX_LEGACY_EPOLL\n\nRename:\n\n  GRPC_LINUX_LEGACY_EPOLL to GRPC_LINUX_EPOLL, and\n  GRPC_LINUX_EPOLL to GRPC_LINUX_EPOLL_CREATE1"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/8b0e9fb17edab249f41391d877d8d03961f4f7ee", "message": "Explicitly enable epoll on manylinux1\n\nFor some reason, the glibc version check does not enable\nGRPC_LINUX_EPOLL on manylinux1. This commit:\n\n* Explicitly enables GRPC_LINUX_LEGACY_EPOLL on MANYLINUX1\n* Switches the flag to enable epoll1 IO manager to\n  GRPC_LINUX_LEGACY_EPOLL instead of GRPC_LINUX_EPOLL.\n  This is to ensure epollex and epollsig that are not yet\n  compatible with epoll_create (not epoll_create1) do not\n  get activated unintentionally."}, {"url": "https://api.github.com/repos/grpc/grpc/commits/c24630f5a5ba2e15743d2c5d0e59e1c6a014c353", "message": "Merge pull request #14041 from mehrdada/enable-epoll\n\nEnable epoll on Python manylinux1"}], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14071", "title": "Add tools/run_tests/artifacts to shellcheck enforcement list", "body": "Further progress towards https://github.com/grpc/grpc/issues/11601\r\n\r\n@apolcyn  there is a bug fix in `tools/distrib/build_ruby_environment_macos.sh`. Please take a closer look at that in review. Thanks", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dgquintas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/grpc/grpc/commits/a8891634d32ad9556921faed2707fb304304c900", "message": "Merge pull request #13932 from dgquintas/conn_subchannel\n\nConnected subchannel refactoring"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/4adad9997164a901cd2e5d1b7a636d940a86d581", "message": "fix BUILD"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/156d6e15bb97c803e9b6cc20f13578df6752a398", "message": "Fix bad merge"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/41d27e104fcfcf2a3c25657b99303d61fdd4d947", "message": "Merge branch 'master' of github.com:grpc/grpc into conn_subchannel"}], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14057", "title": "Make code consistent with backoff spec names", "body": "In particular for `GRPC_ARG_MIN_RECONNECT_BACKOFF_MS` vs [the spec's](https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md) MIN_CONNECT_TIMEOUT\r\n\r\nThis change is motivated by John Hume's input from\r\nhttps://groups.google.com/d/topic/grpc-io/X5LqZM6yUW0/discussion . Thanks!", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/11037641", "body": "is this a leftover?\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11037641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11037868", "body": "why not reset \"count\" here instead of as part of log_report()? Having it as a side-effect of log_report() seemingly increases its responsibilities and violates its name, which signals it simply reports.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11037868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11037883", "body": "Previously, log_report() was invoked as part of the destruction process. Currently, it's only invoked every MAX_COUNT events, and there seems to be no way to retrieve the information otherwise (log_report() is static and not exposed through any public API).\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11037883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11079494", "body": "Moar changes! Sorry.\n\nIt really should be ready for prime time now. I'm gonna start measuring client/server read/writes with it right now in fact.\n\nUpdated pull req. description accordingly.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11079494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11253864", "body": "This seems redundant.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11253864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11254581", "body": "There are ways to specify which files to consider via a doxygen config\nfile, but I guess \"marking\" the files themselves this way is better.\nAnyhow, the easiest way to explore the options available in this doxygen\nconfig file is to install doxygen-gui (on *buntu) , Expert tab, Input.\n\nOn Mon, May 18, 2015 at 10:30 PM, Craig Tiller notifications@github.com\nwrote:\n\n> That's what I thought...\n> But either we toggle EXTRACT_ALL on in the Doxyfile, or we annotate the\n> files we'd like documentation to be generated for, as far as I can tell.\n> \n> A long time ago I remember alternatives existing that worked by default,\n> but I haven't found them here yet.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/commit/73b66efa279e7c0eaef5cd7a6aa726d6cc9ed266#commitcomment-11254513\n> .\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11254581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11254599", "body": "Ah, voila, no gui necessary:\nhttp://www.stack.nl/~dimitri/doxygen/manual/config.html#config_input\n\nOn Mon, May 18, 2015 at 10:40 PM, David Garcia Quintas dgq@google.com\nwrote:\n\n> There are ways to specify which files to consider via a doxygen config\n> file, but I guess \"marking\" the files themselves this way is better.\n> Anyhow, the easiest way to explore the options available in this doxygen\n> config file is to install doxygen-gui (on *buntu) , Expert tab, Input.\n> \n> On Mon, May 18, 2015 at 10:30 PM, Craig Tiller notifications@github.com\n> wrote:\n> \n> > That's what I thought...\n> > But either we toggle EXTRACT_ALL on in the Doxyfile, or we annotate the\n> > files we'd like documentation to be generated for, as far as I can tell.\n> > \n> > A long time ago I remember alternatives existing that worked by default,\n> > but I haven't found them here yet.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/grpc/grpc/commit/73b66efa279e7c0eaef5cd7a6aa726d6cc9ed266#commitcomment-11254513\n> > .\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11254599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11602030", "body": "This certainly shouldn't have any impact on T :) Merge at your leisure.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11602030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "muxi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/grpc/grpc/commits/47fe8507a1905c20a86df09f97c3f972d643dda5", "message": "Merge pull request #14031 from muxi/fix-boringssl-sed\n\nFix sed error in podspecs on sed 4.4"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/522d270180014b899ef5c3f4cb7d4a543eabc219", "message": "Merge pull request #14050 from grpc/update-objc-readme\n\nSpecify minimum supported versions in README.md"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/53e0b74a0aa649ca895a5d70f96848682541ad52", "message": "Specify minimum supported versions in README.md"}], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/13935", "title": "Create Cocoapods podspec for gRPC C++ repo", "body": "This is the initial PR for experimental Cocoapods podspec for gRPC C++ library. It allows users to integrate gRPC C++ library in their iOS application with Cocoapods.\r\n\r\nPart of #13582.\r\n\r\nNote: The podspec only supports build as static library (i.e. no framework support).\r\n\r\nNote: the pod only includes native gRPC-C++ without Protobuf. Protobuf support will be implemented in future PR.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ncteisen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/grpc/grpc/commits/acca4a2a6d79a9465978fa9bcee4db3fc24548e3", "message": "Merge pull request #13913 from ncteisen/fix-clang-tidy-check\n\nFix Clang Tidy Check"}, {"url": "https://api.github.com/repos/grpc/grpc/commits/479067b2b5820709c3f5c8dcb073bf066ee648de", "message": "do not fix automatically"}], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14039", "title": "Allow stream map to shrink", "body": "From #10160", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/pulls/13992", "title": "Any", "body": "Will be useful for upcoming metadata change.\r\n\r\nTaken over from #13638 ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14068", "title": "Fixed typo in documentation.", "body": "s/opitons/options/", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pva": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14064", "title": "Fix /lib/ path for multilib systems", "body": "Multilib allows to run applications built for various ABIs on the same\r\nsystems. For example this requires to keep all amd64 libraries in\r\n/usr/lib64 instead of /usr/lib. This patch adds this possibility.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stanley-cheung": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14053", "title": "Bump to 1.8.5", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ZhouyihaiDing": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14037", "title": "Bump version to 1.8.5", "body": "Fix php memory leak when reuse the channel.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "murgatroid99": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14027", "title": "Update Node API docs to v1.8.4", "body": "Fixes #14024.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70118533", "body": "@nicolasnoble [This article](https://help.github.com/articles/commenting-on-the-diff-of-a-pull-request/) may help.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70118533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "chenkan1994": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14023", "title": "fix: generate_cc_impl() presumes all BUILD files were in some subdire\u2026", "body": "### Bug FIxes:\r\n* generate_cc_impl() presumes all BUILD files were in some subdirectory", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hacst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/14019", "title": "Fix cmake export for grpc", "body": "This patch fixes two issues with the targets exported by the\r\ngrpc cmake build:\r\n\r\n- Install directories are now given relative instead of absolute.\r\n  Previously the exported targets would contain absolute paths to\r\n  their created targets when they should be relative. The actual\r\n  installation location stays the same as cmake automatically\r\n  interprets the paths relative to CMAKE_INSTALL_PREFIX\r\n\r\n- ZLIB and OpenSSL are now linked using targets instead of the\r\n  legacy library variables if possible. Using the legacy paths\r\n  produces absolute paths to those dependencies in the export.\r\n  With this change cmake inserts the target names instead.\r\n\r\nWith these changes no more absolute paths are inserted into the\r\nexport allowing the install location to be used as an artifact\r\nthat can be moved or transfered to another machine and used there.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rongjiecomputer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/13963", "title": "[Bazel] Do not use -pthread on Windows", "body": "Doing the same thing as Tensorflow, Protobuf and GoogleTest so that build console output is cleaner.\r\n\r\n- https://github.com/tensorflow/tensorflow/blob/master/tensorflow/BUILD#L108\r\n- https://github.com/google/protobuf/blob/master/BUILD#L32\r\n- https://github.com/google/googletest/blob/master/BUILD.bazel#L39", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "matt-kwong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/13948", "title": "Update BoringSSL submodule", "body": "Work in progress", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kpayson64": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/grpc/grpc/pulls/13947", "title": "Add fd cache to epollex", "body": "This avoids calling ```epoll_ctl``` for every call.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ctiller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69403274", "body": "Not yet - next week.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69403274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69699821", "body": "(Please don't merge this until the move is done!)\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69699821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69700262", "body": "Don't do that again until we're done with Piper (please).\n\nI'll send out a CL in the morning to rectify this Nico.\nOn Mon Jan 12 2015 at 9:58:09 PM yang-g notifications@github.com wrote:\n\n> Merged #4 https://github.com/google/grpc/pull/4.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/grpc/pull/4#event-217880715.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69700262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69701720", "body": "Let's check the state of things in the morning.\n\nOn Mon, Jan 12, 2015, 22:32 Nicolas Noble notifications@github.com wrote:\n\n> Aren't we done with piper ? :-) At that point, this could mark our first\n> plain-github commit.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/grpc/pull/4#issuecomment-69701377.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69701720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69788942", "body": "Looks like I pulled in some extraneous stuff... going to redo this.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69788942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69814281", "body": "Updated this to also fix qpstest changes this morning.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69814281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69814337", "body": "Can you take a peek now Qi?\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69814337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69818693", "body": "Want to run clang-format across this?\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69818693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69922293", "body": "Trying to get some census folks to look at this,\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69922293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69976701", "body": "Ping\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69976701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70124966", "body": "Nico's change gets zlib building right.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70124966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70125278", "body": "Hang on: this doesn't build.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70125278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70125513", "body": "make: **\\* No rule to make target `libs/msan/zlib/libz.alibs/msan/libgpr.so.0.8.0.0', needed by`libs/msan/libgrpc.so.0.8.0.0'.  Stop.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70125513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70126201", "body": "Found the bug\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70126201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70144650", "body": "Dupe of #44 \n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70144650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70179077", "body": "Closes #50 \n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70179077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70194974", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70194974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70278348", "body": "Introduced by work on #71 \n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70278348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/9323982", "body": "No actual reason, more 'I don't know the Python stdlib'\n\nOn Fri Jan 16 2015 at 3:53:29 PM nathanielmanistaatgoogle <\nnotifications@github.com> wrote:\n\n> Why use the third-party \"simplejson\" library rather than the built-in\n> standard-library \"json\" library?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/grpc/commit/71735185a14ca1064472e4e7a8df9d275c762e1e#commitcomment-9323767\n> .\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/9323982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/9676594", "body": "Does #454 resolve the original issue then?\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/9676594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/9980026", "body": "Any reason this is desirable?\n\n(just wondering if it's a pattern that should be reflected into other languages too)\n\n... there's not much happens during this path that Ruby could possibly know about\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/9980026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11254513", "body": "That's what I thought...\nBut either we toggle EXTRACT_ALL on in the Doxyfile, or we annotate the files we'd like documentation to be generated for, as far as I can tell.\n\nA long time ago I remember alternatives existing that worked by default, but I haven't found them here yet.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11254513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11782953", "body": "Suggest bringing iOS builds under test as part of the same effort.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11782953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11785437", "body": "Oh I don't disagree, but in terms of prioritization I'd put getting iOS\nunder Jenkins far far ahead of specifying a new build system that could\ndetect this error - iOS will be less total effort and give us additional\ncoverage that we desperately need.\n\nOn Sun, Jun 21, 2015, 11:02 AM Jorge Canizales notifications@github.com\nwrote:\n\n> Even if we had it already, I don't think it's good to leave testing of\n> build.json to dependents of the C core. If Cocoapods tomorrow changes the\n> way they handle includes, it might produce a false positive and leave the C\n> core unknowingly untested in this aspect again. In general, a library\n> should test its own contracts without relying on implementation details of\n> its dependents.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/commit/b7cf08ff73dc05af66e1f16dad03c8550a2bbc99#commitcomment-11784968\n> .\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11785437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "tbetbetbe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69679082", "body": "LGTM. Will merge it once the switch is completed\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69679082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69852455", "body": "the only thing is the typo in the comment.  Assign back to me once that fixed and I'll merge it.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69852455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "yang-g": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69700340", "body": "OK.\n\nOn Mon, Jan 12, 2015 at 10:15 PM, Craig Tiller notifications@github.com\nwrote:\n\n> Don't do that again until we're done with Piper (please).\n> \n> I'll send out a CL in the morning to rectify this Nico.\n> On Mon Jan 12 2015 at 9:58:09 PM yang-g notifications@github.com wrote:\n> \n> > Merged #4 https://github.com/google/grpc/pull/4.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/grpc/pull/4#event-217880715.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/grpc/pull/4#issuecomment-69700262.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69700340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/11826355", "body": "LGTM\n\nThis should be living in a Client/ServerContext, right?\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11826355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11826457", "body": "Does the server needs to do anything special to say \"I want to do mutual auth\"? Or is it the service implementer's job to look at the PeerIdentity to see whether the client has the right name?\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11826457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11826476", "body": "Do we want to make it final? You are calling it base context and it looks like some kind of base too :)\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11826476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "nicolasnoble": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69701377", "body": "Aren't we done with piper ? :-) At that point, this could mark our first plain-github commit.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69701377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69956528", "body": "In fact, don't mind me. I may have overreacted. Smaller GCE instances may be able to run the test after all, it just takes a long time to do so. I'll confirm that in a moment.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69956528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69956699", "body": "Yep, it works nonetheless. Closing this one.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/69956699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70209646", "body": "Sure, why not. I simply mass-modified occurrences of map, vector and string, but I can also clean the inclusions a bit.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70209646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70210741", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70210741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/11783126", "body": "Mac on Jenkins should happen next week.\n\nOn Sat, Jun 20, 2015 at 11:41 PM, Jorge Canizales notifications@github.com\nwrote:\n\n> Ideally iOS builds would be already automatically tested and would have\n> caught this instead of us manually. But pragmatically, that still has a\n> dependency on Jenkins Macs which we don't control: Instead having a script\n> that checks build.json's integrity has no risk, plus makes refactoring\n> the C core safer for any build system in general (one of the goals of\n> having the JSON list was also to let people use build systems we aren't\n> currently using).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/grpc/grpc/commit/b7cf08ff73dc05af66e1f16dad03c8550a2bbc99#commitcomment-11783106\n> .\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11783126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "iamqizhao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70003149", "body": "lgtm. Sorry about the delay. I thought I had clicked already.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70003149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jboeuf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70214611", "body": "Looks like my git workflow is not working. Closing this pull request to restart a fresh one...\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70214611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70283812", "body": "Sorry about that... I kicked a build after my changes and everything was fine... I don't really understand, maybe I was on the wrong branch....\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/issues/comments/70283812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/11826391", "body": "Correct!\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11826391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "nathanielmanistaatgoogle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/9323767", "body": "Why use the third-party \"simplejson\" library rather than the built-in standard-library \"json\" library?\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/9323767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mattn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/9980540", "body": "When the memory is not enough to allocate, gc is started on this part.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/9980540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/9980776", "body": "I'm asking this to ruby core developer. So please wait a moment.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/9980776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dklempner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/9997407", "body": "This email looks like it is from 2001? \"looking at it\" seems a little optimistic here...\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/9997407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rookect": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/10005255", "body": "It's too long for me,I'm a rooky,I can't read at once right now.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/10005255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "zeliard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/11019101", "body": "cool! I was going to prepare this patch, but you already did it!\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11019101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jcanizales": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/grpc/grpc/comments/11782646", "body": "This commit (https://github.com/ctiller/grpc/commit/b7cf08ff73dc05af66e1f16dad03c8550a2bbc99) failed to add `pollset_set.h` to `build.json`. Commits https://github.com/grpc/grpc/commit/928cd7710f6289586729f19488d275d02284601c, https://github.com/grpc/grpc/commit/00d5b5cf90c62f421c7029f2b1be7fcd0386e222, and https://github.com/grpc/grpc/commit/fe4ba36625c8870e1d24f2c7bb67ec4e53f5f957 included it elsewhere in the codebase too.\n\nWe need to have a test that the files in `build.json` are sufficient to compile the C core. Not having it could result in no less breakages than ignoring `build.json`.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11782646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11783106", "body": "Ideally iOS builds would be already automatically tested and would have caught this instead of us manually. But pragmatically, that still has a dependency on Jenkins Macs which we don't control: Instead having a script that checks `build.json`'s integrity has no risk, plus makes refactoring the C core safer for any build system in general (one of the goals of having the JSON list was also to let people use build systems we aren't currently using).\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11783106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11784968", "body": "Even if we had it already, I don't think it's good to leave testing of `build.json` to dependents of the C core. If Cocoapods tomorrow changes the way they handle includes, it might produce a false positive and leave the C core unknowingly untested in this aspect again. In general, a library should test its own contracts without relying on implementation details of its dependents.\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11784968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/grpc/grpc/comments/11785586", "body": "> specifying a new build system that could detect this error\n\nI was thinking of a script that iterates the list of files and checks that every #included file is named in the list. An alternative is a script that checks that all files under `include/grpc` and `src/core` are named in the list. Either should be minimal effort, and without scheduling uncertainties (testing iOS on Jenkins, even once we have the Macs, can have a number of blockers we aren't counting on yet).\n", "reactions": {"url": "https://api.github.com/repos/grpc/grpc/comments/11785586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}}}}