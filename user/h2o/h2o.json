{"_default": {"1": {"kazuho": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1617", "title": "Add support for Forwarded header (RFC 7239)", "body": "`x-forwarded-for` and `x-forwarded-proto` have been standardized in a slightly different (and obviously more streamlined way) in [RFC 7239](https://tools.ietf.org/html/rfc7239).\r\n\r\nWe should support it with an option to turn it _off_.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1601", "title": "more support for request streaming", "body": "With the merger of #1357 it has become possible to stream request body to the application without buffering entire content in H2O. However, the feature has so far been only implemented by the http2 protocol handler and the proxy handler.\r\n\r\nWe need to implement the feature in the following modules as well.\r\n* [ ] http1\r\n* [ ] fastcgi\r\n* [ ] mruby\r\n\r\nrelates to: #1585 ", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1601/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1592", "title": "fetch-ocsp-response should receive the certificate chain from the h2o process", "body": "At the moment, fetch-ocsp-response (a helper program that is used to fetch the OCSP response for stapling) loads the certificate chain from the file specified in the configuration file.\r\n\r\nThis has two unfortunate side-effects.\r\n\r\n1. the certificate file needs to be accessible from the running privilege of the server process\r\n2. if the certificate file is replaced after the worker process starts, the `fetch-ocsp-response` command will return a OCSP response for the replaced certificate, whereas the worker process will continue to use the certificate that it has loaded at startup\r\n\r\nWe should better supply the certificate chain from the H2O process and supply it to fetch-ocsp-response.\r\n\r\nNote that regarding point 1, technically speaking, there is no reason to restrict access to a certificate file (it's going to be sent over the wire to anybody). However, certbot (the de-facto standard program to update a let's encrypt certificate) restricts the access to root only. So we have an interoperability issue.\r\n\r\nRelates to: #1588.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1592/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/h2o/h2o/commits/f41fbf6150edc0007bab72774f399c169b6ec244", "message": "Merge pull request #1623 from h2o/kazuho/issues/1615\n\nin examples/libh2o/simple.c, emit access-log to /dev/stdout as default"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/e99eed35a4e677f95f80496b2e99e3fc3ab9757d", "message": "emit access-log to /dev/stdout as default"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/75df8496445371e690ca3ab9e65d9d7a96d4d6ab", "message": "Merge pull request #1622 from h2o/kazuho/fix-leaks-on-destroy\n\nfix leaks on destroy"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/74a13a21f06e99b1b81841a9a6aeb73c7425adda", "message": "Merge pull request #1606 from h2o/kazuho/parse-mapping\n\nrefactor YOML attribute parsing"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/f33188386fc6062cffab287872b25d54914713b5", "message": "report the cause of the logic flaw"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/8ebd869b9494c56b17eb91ba3078eca429668b50", "message": "always use type specifier"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/8fce8da6a8386b7218e8f11642ad9de2d0d27e45", "message": "always use type specifier"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/84fd24b1be99760eab08c2c5fca9d9b9dd9c56e0", "message": "Merge pull request #1618 from h2o/kazuho/docker-enter\n\nadd utility commands for docker-based CI"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/6fa976a255d902706a5406f9e97e20610c7aea18", "message": "update docs"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/7c9dabd3009a4a27278f9511d4ea89866e49506e", "message": "add utility commands for docker-based CI"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/d883788b612aa21f887aa5c5174fa893334c51ac", "message": "remove function no longer being used"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/6b0a76efa3a8666a71ea5588cd90371c33400745", "message": "release memory in destroy"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/05e8a6831593dda756b80557bd57a3f3a20dc037", "message": "Merge pull request #1607\n\nintegrate document build process into CMake"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/7714977377b83769b9cfb650b7583fca85d6a999", "message": "Merge pull request #1614 from zlm2012/docker-ci-opt\n\nDocker CI Optimizations"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/fe1cf76768af25c519e1b9352187bf7666ae790d", "message": "update Changes"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/3083ba709c3b9200c050c012a2e23c11a4bfbcb5", "message": "Merge branch 'kazuho/tls13-replay'"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/7f23b3d610e921460fba1e9bd300ad2f585b530c", "message": "lib-examples-evloop can always be built now that openssl is a mandatory dependency (amends #1546 #1589)"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/ca432efd1806a9ec08f544803ff425eb917ce012", "message": "Merge pull request #1605\n\nalignment-aware memory allocation"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/13ecf4ca79fa2f9ccb71e30ae7db048abb1aa746", "message": "Merge pull request #1589 from chenbd/libh2o-websocket-libh2o-evloop\n\n\"examples/libh2o/websocket.c\" built support without libuv"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/0c4324f06ec0c6c2fd04745658c3f446b32b0aed", "message": "macro for calculating the alignment can be function-local"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/9fb46c1d30b0dfc55526a2d03e1efbc4a3346593", "message": "we do not enforce (or check) that `sizeof T` is a multiple of `alignof T` elsewhere (consider `h2o_mem_alloc_pool`)"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/8b9c6cb200f5b7bcf0ed1fb84b4c14d3320f499f", "message": "`chunk_offset` is an index of `bytes`, hence apply sizeof against `bytes`"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/ae8bc1ac7bb04e9bfcca836cdb2ac4873d2b98fc", "message": "assert that the alignment is power of 2"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/8b7b1fb8205d08b626f675eb58045c247183a5cf", "message": "move alignof to top"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/89f665b05cdc2c01aaefea713e26d4ac852055ae", "message": "Merge pull request #1600 from h2o/kazuho/constify-write-vec\n\navoid copying vec when calling writev(2)"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/d721f950698d369c388894a5ccedfe7924bbcd7e", "message": "integrate document build process into CMake"}], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/865", "title": "[refactor] move URL rebase function to url.c", "body": "We might need this in future.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/813", "title": "enable backtrace logging on freebsd", "body": "For some time we log backtrace on Linux when receiving SEGV.  The code can be used on FreeBSD >= 10 since it has `backtrace_symbols_fd` as well as the addr2line command.\n\nrelates to #809\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/613", "title": "add ServiceWorker support to cache-aware server-push", "body": "adds support for `cache-fingerprint-key` response header, and `cache-fingerprint` request header.\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/330", "title": "Refactor how SSL_write is called", "body": "This PR makes couple of changes to how SSL_write is being called:\n- concatenates small iovecs before calling SSL_write\n  - results in faster operation and lesser overhead in bandwidth (since the number of TLS records gets reduced)\n  - HTTP/1 w. push generators will benefit from this change (see how the chunked encoder builds the iovecs)\n- does not emit log if SSL_write returns an error (final fix for #297)\n  - see comment on 3666bbd for the reasons behind this change; the protocol implementation that is doing this is the HTTP/2 impl.\n- changes the max. payload size of a TLS record from 1400 to 1376\n  - 1376 has been chosen since it is the largest value multiple of 32 below 1400\n  - AVX registers are 256-bits (32-bytes) long and we would expect memcpy / TLS encryption operations to use aligned access to the data\n  - raising the value to 1408 (smallest multiple of 32 above 1408) since in such case the TLS record size might become somewhere above 1440 depending on the cipher-suite being used; it would become too near to the MSS\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/138", "title": "introduce shared-memory cache", "body": "This PR implements a tiny in-memory cache, suitable for caching open files etc.\n\nIt has so far been not merged to master as there has been no practical use case.  However this might be desirable if we are to let users define server-push URL mapping files for statically served content using the file handler (#137).\n", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54407780", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54407780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54615996", "body": "\u3042\u3056\u3059\u3002pr\u307e\u3060\u898b\u3066\u307e\u305b\u3093\u304c\u3001htdocs/index.html\u304c\u5b58\u5728\u3059\u308b\u3088\u3046\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u52d5\u304b\u305b\u3070keep-alive\u304c\u52b9\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54615996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54695930", "body": "WIN32\u306e\u5834\u5408\u306f`h2o_buf_t`\u306e\u30e1\u30f3\u30d0\u306e\u5b9a\u7fa9\u9806\u3092\u9006\u306b\u3057\u3066 `WSABUF` \u3068\u7b49\u3057\u304f\u3059\u308b\u3053\u3068\u3067\u3001`writev`\u3092\u518d\u5b9f\u88c5\u3059\u308b\u306e\u3067\u306f\u306a\u304f`WSASend`\u3092\u4f7f\u3063\u3066\u4e00\u767a\u3067\u66f8\u304f\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u4e0d\u53ef\u80fd\u3067\u3057\u3087\u3046\u304b\uff1f\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54695930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54768769", "body": "\u306a\u308b\u307b\u3069\u3067\u3059\u3002\u3067\u3042\u308c\u3070 h2o_buf_t \u306f\u73fe\u72b6\u306e\u307e\u307e\u3067\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u4e00\u65b9\u3067\u3001Win32\u5b9f\u88c5\u306e\u4e2d\u3067\u306fWSASend\u3092\u4f7f\u3046\u3088\u3046\u306b\u3059\u3079\u304d\u304b\u3068\u601d\u3044\u307e\u3059\uff08\u3053\u308c\u306fh2o\u306e\uff08\u7279\u306bHTTP2\u5b9f\u88c5\u3067\u306f\uff09\u591a\u6570\u306e\u5c0f\u3055\u306a\u30c1\u30e3\u30f3\u30af\u3092writev\u3092\u901a\u3057\u3066\uff11\u56de\u3067\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3067\u901f\u5ea6\u3092\u7a3c\u3044\u3067\u3044\u308b\u304b\u3089\u3067\u3059\uff09\u3002\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54768769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54774811", "body": "\u7834\u58ca\u3057\u306a\u304c\u3089\u30b9\u30ef\u30c3\u30d7\u3057\u3061\u3083\u3063\u3066\u3082\u3044\u3044\u30ab\u30e2\uff01\uff01\uff01\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54774811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/55718437", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/55718437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/55721133", "body": ":+1: thank you for the fix!\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/55721133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/55847417", "body": "Thank you for reporting the issue.  Couple of problems were found as well: feec03b df0ef9e.\n\nPS. and thank you for writing nghttp.  It helps me understand and test HTTP/2 very much.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/55847417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56078717", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56078717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56132514", "body": "almost complete, the leftover is to automatically detecting the number of cores\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56132514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56253768", "body": "closing the PR since I cannot see any commits that aren't yet been merged to master.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56253768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56256225", "body": "Please install libyaml as stated in README.md (on osx it is avaiable as a [homebrew](http://brew.sh/) package as well).\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56256225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56256710", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56256710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56266931", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56266931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56280676", "body": "@ipeychev Thank you for reporting the issue.  Changed the URL of a submodule of yoml (which is in turn a submodule of H2O).  Running the following commands will fix your problem.\n\n```\n$ git pull --rebase origin master\n$ git submodule update --init --recursive\n```\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56280676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56280815", "body": "@swinghu Did you run [cmake](http://www.cmake.org/)?  You would need it to generate an appropriate Makefile (or a Visual Studio Project or whatever).\n\nAnd there will likely be other problems as well if you try to build H2O on Windows.\n1. some of the `#include`s should be changed\n2. pthread-related and socket-related functions need be tweaked\n3. libraries need to be installed at a location that can be searched by CMake\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56280815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56323752", "body": "Thank you for your comment.\n\nIMO writing papers do not _prove_ the performance.  Only benchmarks can _prove_ it.  And I am not interested in writing papers.  If you are interested in the differences between the implementations, how about taking benchmarks, profiles etc.  I would appreciate it if you could share the results.\n\nPS. That said, https://news.ycombinator.com/item?id=8342684 might be an answer.  There might be other reasons as well, but I am not interested in analyzing the differences.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56323752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/7862843", "body": "@linuxscooter it seems that your `CMakeLists.txt` is corrupt.  There isn't any such line in the [original file](https://github.com/kazuho/h2o/blob/master/CMakeLists.txt#L5).\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/7862843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/8473102", "body": "Thank you for the comment.  I missed the section.  Will remove any references to alloca.h.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/8473102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9272662", "body": "Man pages of both linux and OSX states that including unistd.h is sufficient for using `_SC_NPROCESSORS_ONLN`.  So after including the file, we can use the `#ifdef` to determine if we could use `getconf(_SC_NPROCESSORS_ONLN)` to obtain the number of CPU cores available.  If not, we try to use `sysctl` with flags `CTL_HW` and `HW_AVAILCPU`, that are defined in sysctl.h on *BSD systems.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9272662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9334341", "body": "@jonigata @herumi I'd like to optimize these memcmps, as at least gcc-4.9.1 (x86-64) does not seem to inline-expand them.  It would be great if you could provide help. Any suggestions?\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9334341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9338841", "body": "@maksqwe Thank you for the suggestion.  The prob. is that glibc's memcmp (which is called in case of using `-fno-builtin-memcmp`) is not optimal in this case.\n\nIt would be possible to optimize the operation by using the fact that two out of three arguments are constants in these cases.  For example, `mecmp(name, \"if-modified-sinc\", 16)` can be optimized to two loads into a 128-bit SIMD register, one comparison, and one conditional branch.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9338841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9730949", "body": "The function registers a _redirect handler_ to given `pathconf`.  By calling `h2o_create_handler` the function creates a handler associated to `pathconf`, and then sets up the callbacks and other attributes.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9730949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9730953", "body": "The struct defines the _redirect handler_.  The first element of a handler should always be `h2o_handler_t`, following attributes are used only by each handler.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9730953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9730960", "body": "The callback is called when disposing the handler object.  It should release all the resources held by the attributes (if any).\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9730960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9730971", "body": "This is the callback that handles the requests (it is registered by the `h2o_redirect_register` function, see below).\n\nIn case of the redirect handler, the function builds the destination URL, and sends a response using `h2o_send_redirect` function.  Please read the internals of `h2o_send_redirect` to find out how to send other types of responses.  Or if you want to stream the response (i.e. push more content as some are sent to the cilent, instead of building the entire response at once), please take a look at `lib/handler/file.c` or `lib/handler/proxy.c`.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9730971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9730975", "body": "New source files should be added to the makefile.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9730975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9730984", "body": "A new handler (that is usable from the standalone server) typically exports three symbols; an abstract type that represents the handler, a function that registers the handler, and a function that registers the configuration directives for the handler.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9730984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9730990", "body": "The function registers the configuration directives recognized by the handler (in this case, only one directive named `redirect` is recognized, which is handled by the `on_config` callback).\n\nThe handler of the directive is limited to path level (by `H2O_CONFIGURATOR_FLAG_PATH`).  Other flags could be used for convenience; for example the `H2O_CONFIGURATOR_FLAG_EXPECT_SCALAR` flag can be used if the expected type of the argument to the directive is scalar only.  If the flag is used, the callback function need not check the type of the configuration variable; an appropriate configuration error will be emitted by the core if the type is incorrect.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9730990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9731020", "body": "The configurator of the handler should be registered to the standalone server.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9731020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/11515370", "body": "What happens if vec.entries[i].len is above 65535?  Such case may happen if the length of a single header value exceeds the value.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/11515370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/12099799", "body": "Thanks fixed.  Still working on the PR.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/12099799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/12704498", "body": "Thank you for the suggestion.  Changed so in bb7de02.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/12704498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/12957764", "body": "Thank you for the suggestion.  Reverted with clarification comments in 3c6f6ec.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/12957764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31695588", "body": "- please create an anonymous struct like `struct { ... } ranged;` for containing the properties necessary for handling ranged requests\n- please use `size_t` for storing indices (my understanding is that `range_count`, `current_range`, `finished_range` all fit into the criteria)\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31695588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31695828", "body": "For the purpose of adding the _end-of-multipart_ marker, I would suggest allocating a new buffer from memory pool to store the marker, and pass it to `h2o_send()` at once with the last content (i.e. the second argument to the function should contain two iovecs, first one containing the content, and the second one containing the _end-of-multipart_ marker, and the third argument should be set to _2_ instead of _1_).\n\nBy doing that way the code would become simpler, and you would no longer to adjust `bytesleft`.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31695828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696090", "body": "Please extract the logic of parsing a number to a dedicated function, and place it next to `h2o_strtosize` in lib/common/string.c.\n\nI would be happy if the name and behavior of the function was modeled similar to `h2o_strtosize` with the extension that the end position of the string can be obtained.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696149", "body": "Please move the definitions to h2o/memory.h with changing there names to `H2O_LIKELY` and `H2O_UNLIKELY`.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696198", "body": "`bytes=` header must accept whitespaces after `,` (see RFC 7230 section 7)\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696289", "body": "simply doing `if (range_value->len < 6 || memcmp(range_value->base, \"bytes=\", 6) != 0)` might be sufficient\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31696289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31765340", "body": "> TBO I don't fully understand how `do_procceed()` work when file is larger than `buf`, though I just followed that function and write `do_multirange_proceed()`. What is the process after non-finished sending, i.e. when leave the proceed function after calling h2o_send with `is_finished` 0? Sorry for not fully understanding the workflow, I tried my best...\n\nThere is nothing for you to apologize.  I highly appreciate your contribution!\n\nWhen `is_finished` is set to zero, the protocol handlers call the `proceed` callback of the generator when data passed in via `h2o_send` has been sent to the client.  This phase is repeated until the generator calls `h2o_send` with `is_finished` set to 1.\n\nIn other words, you should change the value of `generator->super.proceed` from `do_proceed` to `do_multipart_proceed` in case of a multi-part response (sorry I did not notice the issue when I read your code).\n\nRegarding the issue bet. push and pull generators, the former is the default one which should be supported by all generators.  Pull generator is an _optimization_ which can be used only when the underlying procotol handlers / output streams provide support for the feature.  For example, [the chunked encoder only provides the pull interface](https://github.com/h2o/h2o/blob/00c44dbb3eb49a73d6222a8df77090804b736a3b/lib/handler/chunked.c#L89) (notice that only the `do_send` callback is registered, `start_pull` remains NULL).\n\nSo for the PR to work correctly you must implement the pushing generator appropriately, whereas the pulling generator being something that can be worked on as an improvement.  That is why I suggested concentrating on the pushing generator for the time being.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31765340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31975870", "body": "The function seems to fail in parsing the following patterns:\n- `bytes=1-3 5-10` (IMO should be considered invalid per spec)\n- `bytes=1-\\t,5-10` (IMO should return two ranges)\n\nTo me it seems like that it is possible to fix the issues by making the logic simpler by doing the following:\n- logic that skips `[ \\t]*,[ \\t]*` should exist only at the top of the do-while block\n  - current code does some checks at the top, and others within the logic that extracts a single range\n- rest of the do-while block should concentrate on extracting a single range, until it reaches EOF or an unknown character\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31975870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976131", "body": "`do_multirange_full` function seems to generate incorrect output.  If I build and run the server and send a request with multiple ranges, the response includes two end-of-multipart lines (see https://gist.github.com/kazuho/e69eaebfb87bd3fa2577).\n\nThe issue is not caught by the unit-tests, since the loopback handler of the test library only provides support for push-based generators.\n\nAs I suggested in one of my previous comments, implementing the pulling generator is optional, and I believe for the time being it is better to remove the pulling generator.  If you agree, you can remove the code by applying [this git diff](https://gist.github.com/kazuho/e636eac01496eb3ea517).\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976268", "body": "please generate `end_marker` when it is used, within `do_multirange_proceed`.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976371", "body": "Could the definition be more expressive (instead of using comments)?\n\nIt would be great if you could write like `(sizeof(\"\\r\\n--\") - 1 + BOUNDARY_SIZE + sizeof(\"\\r\\nContent-Range: bytes=-/\\r\\nContent-Type: \\r\\n\\r\\n\") - 1)` so that it would be easier to understand.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976699", "body": "This is kind of a nitpick, but I suggest to make the code simpler by doing the following:\n- instead of adjusting the value of `*range_cur`, use `self->bytesleft` to store the number of remaining bytes to be sent within the range, and use `self->bytesleft == 0` to detect if it is necessary to emit the boundary (instead of using `self->finished_range`)\n  - this has a nice side-effect that the variable is used the same way as with non-multirange responses\n\nTogether with the other comments, I believe we can remove to properties (`finished_range` and `end_maker_buf`) from `st_h2o_sendfile_generator_t`.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31976699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31977031", "body": "How about declaring a `vec` as `h2o_iovec_t [2]`, and always using it (with `vecarrsize` set to `1` or `2`) instead of using `vec`, `vecarr` and calling `h2o_mem_alloc_pool`?\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31977031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31977326", "body": "Please close the response if `lseek` fails, in the same way as when `read` fails.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31977326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31981233", "body": "Thank you for checking the spec.  I agree with your comments.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31981233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31984606", "body": "Please change the meaning of the last variable (`ret`) from _the number of ranges found, or error code if it fails_ to _the number of ranges found, if the function succeeds in parsing the input_.\n\nI believe that the design of the function has been borrowed from the functions of picohttpparser.  But in the case of this function we do not need to distinguish parse errors and empty input (or incomplete input).\n\nThe caller of the function can (and does) simply ignore the result if the function returns `NULL`, so changing the meaning of the last argument as suggested will not have any side effects.  OTOH it would simplify the design of the function.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31984606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31984719", "body": "Please assert `buf != buf_end` somewhere before here, or we might face buffer overrun (for example when the `range_value` is `{\"bytes=\", 6}`).\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31984719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985282", "body": "Please change the name of `ows_skipped` to something like `needs_comma` to reflect the meaning of the flag.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985357", "body": "Please use else-ifs and flags instead of gotos in this case to simplify the code path.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985659", "body": "Please use `SIZE_MAX` instead of `-1` when assigning ~0 to `size_t`.\n\nI would also suggest removing variable `good_range`, ad using `range_start != SIZE_MAX` for determining if the parser has succeeded in extracting a valid range.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985826", "body": "I believe you do not need to check if `'-'` exists at the end of a single range (which is BTW accessing the buffer without boundary checking) if you unconditionally set `ows_skipped` (suggested to be renamed to `needs_comma`) unconditionally at the end of the do-while loop.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31985826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431405", "body": "Call to `cloexec_pipe` (or an equivalent function) is missing.\n\nI presume that this is the reason why you are seeing timeout errors.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431461", "body": "Please move the includes and defines (e.g. `AI_ADDRCONFIG`) mandatory to use the functions provided by hostinfo.h to hostinfo.h, instead of repeating the definitions in each source file.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431556", "body": "For setting the nonblocking flag, please create a wrapper function for setting the nonblock flag in `h2o/include/socket.h` (marked as static the same way as other functions to be inlined are), and call the function from other places.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431661", "body": "For simplicity please do the following:\n- change the invocations of `writev` casting the second argument to `struct iovec *` to casting to `void *`\n- change the type of the second argument in the definition of `writev` for WIN32 to `h2o_iovec_t *`\n- remove the definition of `struct iovec`\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/33431661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "chenbd": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1609", "title": "resources leak when h2o is used as a library", "body": "When dynamic server loop created/quits, some resources not released.\r\neg:\r\nevloop's fd.\r\nmemory cached in perthread h2o_mem_recycle_t.\r\nmultithread queue destroy.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/h2o/h2o/commits/bc51c0b5fba46950e9a708973efe55946a4e1674", "message": "close epoll / kqueue socket on destroy"}], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/1624", "title": "add interface h2o_tls_data_dispose()", "body": "The function can be used when needed to release the resources associated to the TLS", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1567", "title": "enable SO_REUSEPORT under linux", "body": "SO_REUSEPORT was done in kernel 3.9:\r\nhttps://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c617f398edd4db2b8567a28e899a88f8f574798d\r\n\r\nabout The SO_REUSEPORT socket option:\r\nhttps://lwn.net/Articles/542629/\r\n\r\ncan we gain better performance and load balance with SO_REUSEPORT enabled?\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1531", "title": "try using epoll_create1 when available", "body": "try using epoll_create1 with flag EPOLL_CLOEXEC when available\uff0c so that we can omit fcntl() call.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "worenga": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1557", "title": "How does the h2 stream scheduler work", "body": "I am trying to find any documentation/specification, that describes how the stream scheduler in h2o is working.\r\nI've looked at the implementation but it hard to understand (for a newcomer), when you do not know what the purpose of the code is.\r\nIs there any document that describes the scheduling logic (on a high level?)", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "d-Pixie": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1552", "title": "OS X High sierra from Homebrew - preloads.rb not found.", "body": "Hi, I can't find any information regarding this error anywhere so I'm opening a ticket for it.\r\n\r\nI just installed h2o via Homebrew, `brew install h2o`, and am trying a minimal example:\r\n```yaml\r\n# h2o.yaml\r\nlisten:\r\n  port: 8080\r\nuser: nobody\r\nhosts:\r\n  \"myhost.example.com\":\r\n    paths:\r\n      \"/\":\r\n        mruby.handler: |\r\n          Proc.new do |env|\r\n            [200, {'content-type' => 'text/plain'}, [\"Hello world\\n\"]]\r\n          end\r\naccess-log: ./log/h2o-access.log\r\nerror-log: ./log/h2o-error.log\r\npid-file: ./tmp/pids/h2o.pid\r\n```\r\nStraight from the docs ...\r\nWhen I try `sudo h2o -m worker -c ./h2o.yaml` in the root of my app I get: \r\n```text\r\nfile \"/usr/local/Cellar/h2o/2.2.4/share/h2o/mruby/preloads.rb\" not found. Did you forget to run `make install` ?Abort trap: 6\r\n```\r\n\r\nI verified that the file exists:\r\n```text\r\n$ cat /usr/local/Cellar/h2o/2.2.4/share/h2o/mruby/preloads.rb\r\nrequire \"bootstrap.rb\"\r\nrequire \"acl.rb\"\r\ninclude H2O::ACL\r\n```\r\nI have also tried cating the file as noboby:\r\n```text\r\nsudo -u nobody cat /usr/local/Cellar/h2o/2.2.4/share/h2o/mruby/preloads.rb\r\nrequire \"bootstrap.rb\"\r\nrequire \"acl.rb\"\r\ninclude H2O::ACL\r\n```\r\nAnd running the server with `user: root` in the config.\r\n\r\nI'm out of ideas here. Any idea what is going on?", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jxck": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1550", "title": "logging handler", "body": "I wrote mruby handler for formatting/controlling access log.\r\nbut I need to add mruby-handler-file directive to every tons of path: in h2o conf.\r\n\r\nit seems better to allow adding handler to access log directive, and apply every request/response under that scope.\r\n\r\nusecase:\r\n- adding all request header into acccesslog\r\n- formatting values into json/ltsv etc via handler\r\n- routing/rotating log file from handler", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GuacheSuede": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1540", "title": "Quick Question: If PICO is the HTTP/1 Parser, what is the HTTP/2's parser ?", "body": "", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unisqu": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1539", "title": "Can someone teach me how to run a c script inside h2o?", "body": "Can someone teach me how to run a c script inside h2o?\r\n\r\nAppreciate this.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1529", "title": "How to implement C template style generation like C++ cpoll_cppsp?", "body": "1. How do I code in C to write functions / features etc for this web server?\r\n2. Is there a templating system I can use? e.g. ULib / cpoll_cppsp\r\n3. Can I use C++ too? I don't mind using C all the way", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmitri--": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1525", "title": "socket leaks with prematurely disconnected HTTP/1 clients", "body": "in short: if a HTTP/1 client disconnects too early, server will miss UV_EOF notification on that socket and will leave it half-open.\r\n\r\nIt appears that http1.c stops reading the socket even before calling on_req handler -- it explicitly calls uv_read_stop(), therefore should socket gets disconnected on the client side, there is no way for the server to recognize this situation.\r\n\r\nlong story:\r\nI have a handler installed in on_req callback. This handler can't respond immediately. It responds as soon as it can and this may take several seconds. I implemented this handler in asynchronous way, so if it can't respond immediately, it just quits on_req. When it gets notification about data availability, it breaks the uv loop using uv_async object, then in the uv_async object's callback it first calls h2o_start_response(), then repeats async operation with h2o_send()  calls until all the data is returned. It works perfectly well with HTTP/2 clients (for instance h2load). But, if I use HTTP/1 client (for exeample GET or curl) and kill the client with SIGINT before the data is arrived, the socket leaks in libh2o.\r\n\r\nI'm not sure why h2o needs to stop reading HTTP/1 clients. I tried to comment out h2o_socket_read_stop call in http1.c and this simple change fixed the problem -- now as soon as client breaks, server gets notification and calls generator's stop callback -- same way as in HTTP/2 case.\r\n\r\nSteps to reproduce:\r\n* in examples/libh2o/simple.c comment out all lines in chunked_test() function\r\n* make lib-examples\r\n* run examples-simple\r\n* run `GET \"http://127.0.0.1:7890/chunked-test\"`\r\n* kill GET with SIGINT\r\n* check `netstat -naop | grep ^tcp | grep -F 7890` output\r\n\r\nExpected behavour:\r\nonly one (LISTENING) socket is expected in last command output\r\n\r\nObserved behaviour:\r\nthere are 3 sockets -- LISTENING, FIN_WAIT2 and CLOSE_WAIT for more than one minute.\r\n\r\nPlatform:\r\nlinux 3.1\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yannick": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1520", "title": "it should be possible to include data from environment variables into the config", "body": "wip implementation see https://github.com/h2o/h2o/pull/1524", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1501", "title": "session resumption partly not working", "body": "resuming a session from a saved openss s_client works. \r\nhowever the server sends new tickets and browsers then use that one, this means that if e.g. session_store redis is used a lot of tickets get created. \r\nfurther more with redis store, tickets are not used again if h2o is restarted. \r\n\r\ntested on macos high sierra with https://github.com/h2o/h2o/commit/6b1f65cc1fe3ba5d7b0f7b04114791c072094252 linked against openssl@1.1/1.1.0g\r\n\r\nthis might all be expected behavior due to how openssl works, however it unclear to me why the session is deleted here: https://github.com/h2o/h2o/blob/b44c03f2429ed8ad2e151ab74648ae9cba5b8607/lib/common/socket.c#L1246\r\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1473", "title": "enhancements for mruby development", "body": "following features would be extremely useful to allow development of apps/configurations in mruby:\r\n\r\n- - execute mruby files/handlers from command line in a \"one shot\" approach, but still fire up the eventloop to make external calls. this would help testing\r\n\r\n- -  re-load the code of specific handlers from outside and/or inside. this could be done via e.g. a specific, new HTTP method (RELOAD) in development mode\r\n\r\n- -  re-load the complete vm, so that externally loaded code is re-triggered. you could then reload handler code via http calls\r\n \r\n\r\n- - execute/embed mrb compiled mruby files. also expose mrbc. together with the ability to execute ritevm code this could allow for an h2o \"app store\" where addons could be easily added. via 399 and/or rack middlerware this would then allow for services such as logins, ddos protection, rate limiting etc...\r\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1455", "title": "flexible metrics / expose metrics in prometheus format", "body": "the current json export of metrics is a great first step, however for a modern production setup its not really sufficient. \r\n  \r\nproblems with current implementation:\r\n\r\n- is mainly that the percentiles are not really useful in such a system as they cant be aggregated over a number of servers. configurable buckets would be better\r\n\r\n- not all status codes/requests are available.\r\n- HTTP methods are not distinguished\r\n\r\n- almost no documentation, its unclear what the units, timespans and algorithms behind it are.\r\n\r\n(- timings are actually not working / incorrect for mruby handlers )\r\n\r\nin an ideal case also following features would be possible\r\n- per handler/domain stats\r\n- access, creation updates to stats from mruby\r\n\r\nprometheus is the de facto standard format for exposing such metrics. \r\nand i propose that a redesigned version of the metrics interface additionally delivers the prometheus format natively.\r\nsee also https://prometheus.io/docs/instrumenting/writing_clientlibs/ \r\nhttps://prometheus.io/docs/instrumenting/exposition_formats/\r\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1455/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/1484", "title": "WIP document mruby redis feature", "body": "its a bit opinionated example that shows other things, but i think since grasping the redis interface is so simple it is ok", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1364", "title": "[WiP] log to kafka", "body": "this PR lets you optionally include librdkafka at build time and\r\nthen makes it possible to log directly to kafka.\r\nit supports configurable partitioning, kafka timestamps and all kafka options.\r\nKafka Key, Message and Partitioning string can be configured with all standard h2o log strings.\r\n\r\ntodo:\r\n- [ ] build instructions\r\n- [ ] config documentation\r\n- [ ] remove newline at the end of the kafka message\r\n- [ ] configurable escaping\r\n\r\nuse an external openssl, e.g.:\r\n`cmake -DWITH_BUNDLED_SSL=off -DWITH_MRUBY=ON -DWITH_RDKAFKA=ON -LAHT -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.0f ..`", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "voiddeveloper": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1505", "title": "When is qrintf used?", "body": "https://www.slideshare.net/kazuho/h2o-20141103pptx\r\n\r\n\r\nThe developer says that 'h2o server' is fast using qrintf as I see ppt.\r\n\r\nsprintf parses at runtime,\r\nqrintf parses at compile time.\r\nSo qrintf is fast.\r\nConceptually, I understand.\r\nWhen do you use it?\r\nOnly when returning ip4 address as string?\r\n\r\nThen I do not understand.\r\nIs not the web server already run-time after compilation?\r\n\r\n\r\nIn other words, my question is\r\nWhen is qrintf used?\r\nAnd\r\nWhy is qrintf fast?\r\n\r\nThere are two.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1497", "title": "Why is h2o so fast?", "body": "I am learning why h2o is fast.\r\n1. What does \"Unlike most parsers, it is stateless and does not allocate memory by itself. All it does is accept pointer to buffer and the output structure, and setups the pointers in the latter to point at the necessary portions of the buffer.\" mean?\r\n\r\nWhen I read ppt or read git's \"read me\" it says \"fast\" because it is \"Unlike most parsers, it is stateless and does not allocate memory by itself. All it does is accept pointer to buffer and the output structure, and setups the pointers in the latter to point at the necessary portions of the buffer.\"\r\nI do not understand what it means. I would be grateful if you explain in detail.\r\n\r\nI would really appreciate it if you let me know.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/1488", "title": "Please tell me how to install php7, ubuntu 16.04", "body": "I installed h2o.\r\nbut php7 is not installed.\r\nI can't interact with the server. :-(\r\nPlease help me.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "concatime": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1496", "title": "\"LibreSSL 2.4.x support has also ended.\"", "body": "Since November 6, the old 2.4.x is deprecated. We need to update to 2.6.3, or actually consider unbundling it, reference to #1461.\r\nI would love to provide a commit, but It seems that you rely on a proper .tar.gz file instead of downloading it.\r\n[Source](//ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.6.3-relnotes.txt).", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thisprogrammer1": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1487", "title": "Phalcon\u304c\u6b63\u3057\u304f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u307e\u305b\u3093\u3002", "body": "http://blog.kazuhooku.com/2015/06/h2ophpmodrewrite.html\r\n\u3084\r\nhttps://qiita.com/thisprogrammer/items/b750c0eb56bbab9defcf\r\n\u3092\u53c2\u8003\u306bH2O\u3092\u8a2d\u5b9a\u3057\u305f\u306e\u3067\u3059\u304cPhalcon\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u3046\u307e\u304f\u884c\u304d\u307e\u305b\u3093\u3002\r\n\r\nApache\u3067\u306f\u3046\u307e\u304f\u884c\u304f\u306e\u3067Phalcon\u3067\u306f\u306a\u304fH2O\u306e\u554f\u984c\u306e\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\r\n\u5177\u4f53\u7684\u306b\u306f\r\n```php\r\n/**\r\n * Add your routes here\r\n */\r\n\r\n$app->get('/', function () {\r\n    \r\n    echo $this['view']->render('index');\r\n});\r\n\r\n$app->get('/test', function () {\r\n    echo \"test\";\r\n    //echo $this['view']->render('index');\r\n});\r\n/**\r\n * Not found handler\r\n */\r\n$app->notFound(function () use($app) {\r\n    $app->response->setStatusCode(404, \"Not Found\")->sendHeaders();\r\n    echo $app['view']->render('404');\r\n});\r\n```\r\n\u306e/\u306e\u90e8\u5206\u306f\u52d5\u304f\u306e\u3067\u3059\u304c\u3001/test\u3068notFound()\u304c\u52d5\u304b\u306a\u3044\u611f\u3058\u3067\u3059\u3002\r\n\r\n\u5229\u7528\u3057\u3066\u3044\u308bH2O\u306f\r\nhttps://github.com/tatsushid/h2o-rpm\r\n\u3088\u308ayum\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\r\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csmk": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1486", "title": "How to enable chacha20-poly1305 with TLS 1.3 (draft-18)?", "body": "Hi,\r\n\r\nWith the landing of https://github.com/h2o/h2o/pull/1485, how one would enable it? Is there any flag/settings for `cipher-suite:`?\r\n\r\nOn my side, SSL Labs is only detecting `TLS_AES_128_GCM_SHA256`. Could be a limitation on their part? \ud83e\udd14 \r\n\r\nEdit: looking [further](https://github.com/h2o/picotls/blob/fd180162a4f6eac509e172cd381983ef22d8fd5d/include/picotls/openssl.h#L31), if my understanding is correct, it will only work with OpenSSL 1.1.0+ and won't work with LibreSSL?", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1486/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "utrenkner": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1472", "title": "(h2o), uid 80: exited on signal 6", "body": "Just a question: I sometimes get a lot of these in the kernel log messages on FreeBSD and HardenedBSD systesm running h2o.\r\n```\r\npid 56341 (h2o), uid 80: exited on signal 6\r\n```\r\nIs this to be expected? Why does it exit so often? \r\n\r\nNote, there is nothing to be found in the h2o error log and neither in the php-fpm.log.", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tnt": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1470", "title": "Automated configuration with ansible, puppet or the like", "body": "I hope I am overlooking something. I don't see any decent way to automatedly modify the configuration. In particular to add virtuall hosts.\r\n\r\nIn apache, nginx, and lighttpd one can add/remove virtual hosts (and other configuration) by simply adding/deleting a file, i.e. without touching any of the existing config files. This is quiet easy to do. But modifying YAML files seems rather tedious and error-prone to me...", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "reshadi": {"issues": [{"url": "https://api.github.com/repos/h2o/h2o/issues/1439", "title": "dynamic value for proxy.reverse.url based on headers", "body": "Hello,\r\nI'm evaluating the h2o for a new project. It seems like a very interesting and promising project. thanks for your contributions!\r\n\r\nI'm wondering if it is possible to have the value of proxy.reverse.url be picked up from a custom request header.\r\n\r\nAt first I though I can use mruby and read the custom header update the host header or store it somewhere and return a 399, but then couldn't figure out how to read the value in the proxy.reverse.url.\r\n\r\nanother option I considered is using the  http_request() in the mruby. But I'm not sure what are the performance implications of this in terms of keep alive, etc. \r\n\r\nIs there any way to achieve this?\r\n\r\nUsecase:\r\nI have a bunch of servers that contact various backend servers (a large set and regularly changing). Instead of each server directly connecting to those backends, I want them to go through an intermediate h2o server. The client will set the host header to the address of the h2o server, and have a x-host header for the actual backend server name.\r\nThen inside of the h2o server, I need to set the proxy.reverse.url to the value of the x-host header.\r\n\r\nThanks.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/1439/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zlm2012": {"issues": [], "commits": [{"url": "https://api.github.com/repos/h2o/h2o/commits/42358539ed5ed3a6e2a73ce3f5f6a68fa4f1b726", "message": "set `-i` so that the container will be terminated (instead of being detached) when the test is interrupted with Ctrl-C (amends #1614)"}, {"url": "https://api.github.com/repos/h2o/h2o/commits/f9a8bed92ea771c3d3a4750cf00315b8a0d1addc", "message": "make docker ci pretty & able to be canceled by ^C"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/12691753", "body": "Well I think we should change `accept-range` to `none` instead of drop it since client may still try to make range request. Ref. Section 2.3 from RFC 7233.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/12691753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31735576", "body": "Just to make sure I did not misunderstand, is this part what you meant \"polishing up the push generator\"? TBO I don't fully understand how `do_procceed()` work when file is larger than `buf`, though I just followed that function and write `do_multirange_proceed()`. What is the process after non-finished sending, i.e. when leave the proceed function after calling h2o_send with `is_finished` 0? Sorry for not fully understanding the workflow, I tried my best...\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31735576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31774388", "body": "Understood. I will handle it :-)\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31774388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31979913", "body": "RFC 7233 defines that \n\n```\nbyte-range-set = *( \",\" OWS ) ( byte-range-spec /\nsuffix-byte-range-spec ) *( OWS \",\" [ OWS ( byte-range-spec /\nsuffix-byte-range-spec ) ] )\n```\n\nSo I think I should\n- check `,[ \\t]*` at the top of the do-while block (and skip). If `[ \\t]*` is skipped when last single range parsing ended and no `,` found, error occurred.\n- skip `[ \\t]*` at each exit from single range parsing\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/31979913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "i110": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/1549", "title": "[WIP] http2client", "body": "This PR *will* make it able to send HTTP/2 request to the upstreams using proxy or mruby http_request method.\r\n\r\n- [ ] request body streaming\r\n- [ ] automatic retry (when received goaway or REFUSED_STREAM)\r\n- [ ] decode `transfer-encoding: chunked` response\r\n- [ ] limit maximum stream id\r\n- [ ] fix connection selecting logic (least-streams with certain round-robin manner?)\r\n- [ ] protocol negotiation i.e. ALPN and Upgrade\r\n- [ ] merge with http1client into `httpclient`\r\n- [ ] consider configuration..\r\n- [ ] write tests!!!", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1482", "title": "[WIP] Refactor: remove generator", "body": "tataki", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1217", "title": "mruby Rack middleware", "body": "TODOs:\r\n- [x] request filtering\r\n- [x] ~response fast path~\r\n- [x] ~preserve original request headers~\r\n- [ ] performance tuning", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1195", "title": "[WIP] place shared files into versioned directory", "body": "To avoid dependency problem between installed versions, this PR installs shared files into versioned directory.\r\nDevelopers have to set `H2O_SHARE_DIR` environment variable to `$H2O_ROOT/share/h2o` to run the server.\r\n\r\nTODOs:\r\n- [ ] fix paths in documents", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1188", "title": "reorganize preloads.rb and bootstrap.rb", "body": "This PR reorganizes the core mruby files, `preloads.rb` and `bootstrap.rb`.\r\n\r\n* `bootstrap.rb` shouldn't be modified by users, so embed it in c source\r\n* makes `preloads.rb` optional to enhance portability (users can modify it, but the h2o itself doesn't depends on the existence of `preloads.rb`)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1152", "title": "redis from mruby", "body": "This PR makes it able to access redis from mruby hanlder, like the following:\r\n\r\n```\r\n        mruby.handler: |\r\n          redis = H2O::Redis.new(:host => '127.0.0.1', :port => 6379)\r\n          Proc.new do |env|\r\n            set = redis.set('key', 'value')\r\n            get = redis.get('key')\r\n            # redis.disconnect\r\n            [ 200, {}, [set.join, get.join] ]\r\n          end\r\n```\r\n\r\nTODOs:\r\n- [x] support more redis features (other commands, authentication, etc..)\r\n- [x] consider preparing specific exception class for IO & procotol errors\r\n- [x] embed mruby source code in `handler/mruby/redis.c` ? (I feel it'll reduce maintainability, so let's discuss)\r\n- [x] timeout\r\n- [x] subscribe", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diecyde": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/1437", "title": "h2o websockets module proxy to TCP/UNIX socket", "body": "relates to : https://github.com/h2o/h2o/issues/1435\r\nI finally managed to do it the proper way through github, I was unable to do the pull request before.\r\nPlease feel free to close the ticket\r\n\r\nI have created an new module for H2o, this module upgrades calls to\r\nconfigured directories to websockets.\r\nAfter upgrading it connects to an specified tcp/unix socket.\r\nThis functionality is much like what is already supported by lighttpd.\r\n\r\nAll framing needs to be handled by the party which accepts the socket.\r\nThe module is based on the fcgi module source code, and I tried to\r\noptimize it as much possible.\r\n\r\n**Configuration**\r\nI have embedded 2 configuration parameters:\r\n\r\nwebsocket.connect:\r\nregisters an tcp or unix endpoint to make the connection to (adopted\r\nfrom fcgi)\r\n\r\nwebsocket.accept_protocol:\r\noptional: specifies which protocol should be accepted\r\n\r\nAn example configuration:\r\n\r\n> \"/ws\":\r\n> websocket.connect:\r\n> port: /tmp/ws.socket\r\n> type: unix\r\n\r\nPlease review my code and feel free to optimize or modify my patch it in\r\nany way.\r\nI really feel this module will up the ante for this awesome webserver.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "deweerdt": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/1410", "title": "Dynamic backends", "body": "This PR adds infrastructure to make it possible to dynamically chose\r\na backend destination on a per request basis. We then take advantage of\r\nthis by allowing `proxy.reverse.url` to take a mapping, in which case we\r\ncan add customizable routing policies. This commit adds the `header`\r\npolicy, if this is set, H2O will look for a given header name in order\r\nto chose the backend destination.\r\n\r\nHaving dynamic backends also supposes that backends can defined on their\r\nown right, indenpendently of `proxy.reverse.url`.  To that end, this\r\ncommit defines a `backend` directive that allows to declare a backend to\r\nH2O, which can then be used for routing.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1199", "title": "ORIGIN frame", "body": "This introduces a new option: `http2-origin-frame`. It can be either a\r\nscalar or a sequence. When this option is sent, H2O sends an ORIGIN\r\nframe as described here:\r\nhttps://github.com/httpwg/http-extensions/blob/master/draft-ietf-httpbis-origin-frame.md\r\n\r\nThe PR is mostly intended to serve as basis for the discussion, rather than intended for merging. It feels like the contents of ORIGIN frame we send should actually depend on the SNI as follows:\r\n- Config defines an SNI to host names mapping\r\n- SNI callback adds the SNI to `h2o_conn_t`\r\n- `expect_preface` looks up the SNI in `h2o_conn_t` and using the config mapping, builds the ORIGIN frame\r\n\r\nThoughts?", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/919", "title": "Introduce a 'proxy.per_socket_pool' option.", "body": "When this option is 'ON', socket pooling is done at the frontend\nconnection level, so that backend connections are only re-used for a\ngiven frontend connection.\nWe achieve this by adding a `per_socket_pool` member to `h2o_socket_t`.\nIf the option is set, pooled sockets will be added there and the pool\nwill be destroyed at the same time as the socket.\n\nThis also adds a test that checks that tcp connections are re-using the\nsame port, there's also a part of the test that checks that connections\nover unix sockets are still functional.\n\nQuestion: we currently lower case `struct rp_handler_t->upstream` in order to be able to match it afterwards. In order to keep that functionality _and_ be able to re-use `upstream` in the pool creation, I've added a `lcupstream` lowercase version to use for matching. Is that the right thing to do? Another possibility would be to special case the unix socket case, but that requires an intrusive change, as far as I understand.\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theirix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/1097", "title": "Parse :status in hpack", "body": "Added parsing and extracting `:status` to hpack parser.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/h2o/h2o/pulls/1096", "title": "Added missing required header", "body": "Including header `http2_internal.h` requires `khash.h` which is added to the install directory by this patch.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NightDevel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/1001", "title": "Add support for User-Agent blocking without using mruby", "body": "Example configuration\n\n`num-threads: 8\nhosts:\n  \"h2o\":\n    blocked-agents:\n      - wordpress\n      - curl\n    listen:\n      port: 443`\n\nWe use h2o as a SSL terminator and have frequently seen massive GET floods from insecure wordpress instances.  Currently it only works for http1.\n\nEdit:  I had added the latest LibreSSL for our purposes - just letting you know.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robguima": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/982", "title": "improve ssl locking by using add_lock_callback and rw locks", "body": "@deweerdt is in the loop and has reviewed this\n\nThis PR improves openssl and libressl locking in two ways:\n1. Using RW locks (pthread) for one of the lock types (similar to what openssl does internally)\n2. Adding a lock_add callback which avoids `lock-add-unlock`. \n\nWe've been running similar changes in different applications with success - especially the add_lock callback, but this would need to be tested under load.\n\nI originally intended to implement dynamic locks as per comment in ssl.c. However, we've found that dynlocks are only used by the CHIL engine in openssl, which makes them pretty useless. \\* we can still add them if desirable - also not sure whether perhaps libre makes better use of them.\n\nBTW, this seems to work with the bundled libressl as well. Wonder if a test for specific openssl version must be added though.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cwyang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/597", "title": "[h2o-ssl] Renegotiation Support", "body": "To support renegotiation, it is sufficient to flush write buffer\nwhen write operation is happened in SSL_read().\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cubicdaiya": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/363", "title": "suppressed compiler warnings for ignoring return value of \u2018write\u2019.", "body": "## warning messages\n\n```\n/home/bokko/workspace/h2o/lib/common/serverutil.c: In function \u2018h2o_spawnp\u2019:\n/home/bokko/workspace/h2o/lib/common/serverutil.c:133:14: warning: ignoring return value of \u2018write\u2019, declared with attribute warn_unused_result [-Wunused-result]\n         write(pipefds[1], &errnum, sizeof(errnum));\n                                                      \u30fb\n                                                      \u30fb\n                                                      \u30fb\n/home/bokko/workspace/h2o/lib/handler/access_log.c: In function \u2018log_access\u2019:\n/home/bokko/workspace/h2o/lib/handler/access_log.c:379:10: warning: ignoring return value of \u2018write\u2019, declared with attribute warn_unused_result [-Wunused-result]\n     write(fh->fd, line, pos - line);\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/32379856", "body": "Even if `pthread_create()` for `ocsp_updater_thread()` fails, `h2o` can continue to serve. But I'm a little worried whether  `h2o` should continue to serve in this case. How about you?\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/32379856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mattn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/2", "title": "Windows porting", "body": "IRC \u3067\u8a00\u3063\u305f\u69d8\u306b keep-alive \u304c\u52d5\u3044\u3066\u306a\u3044\u3067\u3059\u304c pull-req \u3057\u3068\u304d\u307e\u3059\u3002\n\n```\n[20:20] < mattn_jp_> Windows porting \u51fa\u6765\u305f\u3088\n[20:21] < mattn_jp_> no libuv \u7248\n[20:27] < mattn_jp_> kazuho_: https://github.com/mattn/h2o/tree/windows\n[20:27] < mattn_jp_> \u306a\u305c\u304b keep-alive \u52d5\u304b\u306a\u3044\u3051\u3069\n[20:28] < mattn_jp_> keep-alive \u7121\u3057\u306b Requests per second:    6471.85 [#/sec] (mean)\n[20:28] < mattn_jp_> on windows\n[20:39] < mattn_jp_> \u3093\u30fc\u306a\u3093\u3060\u308d\n[20:39] < mattn_jp_> https://gist.github.com/mattn/77b4249ac88e3680fcc1\n[20:39] < mattn_jp_> \u3053\u308c\u3092\n[20:40] < mattn_jp_> cat data.txt | nc 127.0.0.1 7890\n[20:40] < mattn_jp_> \u3063\u3066\u3084\u3063\u305f\u3089\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u308b\u306e\u3067\u3001Windows porting\n                     \u306e\u4ed5\u696d\u3067\u306f\u306a\u3044\u3068\u601d\u3046\u3002\n[20:40] < mattn_jp_> > keep-alive \u304c\u52d5\u304b\u306a\u3044\u4ef6\u3002\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54620234", "body": "\u5b58\u5728\u3057\u3066\u307e\u3059\u30fc\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54620234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54766345", "body": "\u51fa\u6765\u306a\u304f\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u96e3\u3057\u3044(\u9006\u306b\u6c5a\u304f\u306a\u308b)\u3068\u601d\u3044\u307e\u3059\u3002\n\nH2O_STRLIT \u3092\u4f7f\u3063\u3066\u57cb\u3081\u8fbc\u307f\u3067\u5ba3\u8a00\u3057\u3066\u3044\u308b\u7b87\u6240\u306f\u7c21\u5358\u306b\u9006\u306b\u51fa\u6765\u307e\u3059\u304c\n\n``` c\nstatic const h2o_buf_t CONNECTION_PREFACE = { H2O_STRLIT(\"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\") };\n```\n\n\u3053\u308c\u3092\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u4f7f\u3063\u3066\u3044\u308b\u7b87\u6240\u306a\u3069\u306f\u52d5\u304b\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n``` c\nif (! h2o_contains_token(req->headers.entries[connection_index].value.base, req->headers.entries[connection_index].value.len, H2O_STRLIT(\"http2-settings\"))) {\n```\n\n\u9001\u4fe1\u624b\u524d\u3067\u9006\u306b\u4ed8\u3051\u66ff\u3048\u308b\u306e\u306f\u30e1\u30e2\u30ea\u3092\u6d88\u8cbb\u3059\u308b\u306e\u3067\u7121\u99c4\u306b\u601d\u3044\u307e\u3059\u3002\n\n\u3042\u3068\u69cb\u9020\u4f53\u3092\u30e1\u30f3\u30d0\u6307\u5b9a\u3059\u308b\n\n``` c\n.base = XXX, .len = YYY\n```\n\n\u306fC99\u304b\u3089(\u304b\u306a\uff1f)\u306a\u306e\u3067\u4f7f\u3048\u306a\u3044\u304b\u3082\u3067\u3059\u3057\u3002\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54766345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54768905", "body": "alloc \u3057\u3066 swap \u3059\u308b(\u3082\u3057\u304f\u306f\u7834\u58ca\u3057\u306a\u304c\u3089 swap \u3059\u308b)\u3068\u3044\u3046\u4e8b\u3067\u3057\u3087\u3046\u304b\uff1f\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54768905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54802054", "body": "pull-req \u66f4\u65b0\u3057\u307e\u3057\u305f\u3002\nkeep-alive \u306e\u4ef6\u3082\u6cbb\u308a\u307e\u3057\u305f\u3002\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/54802054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56323788", "body": "This is too old. We will have to do this porting again against latest h2o .\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56323788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "swinghu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56252191", "body": "thanks for your great job!\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56252191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56259883", "body": "Hi,there,Could I build it in windows 7?   I have building it .I found it very interesting to take part in this project! I wonder whether can i build it successfully on platform  win7 vs2013 ,because there is little info about building/ install this project in the file  README.md.\n\nE:\\h2o\\h2o>cmake .\n-- Building for: Visual Studio 12 2013\n-- Found OpenSSL: C:/usr/local/ssl/lib/ssleay32.lib;C:/usr/local/ssl/lib/libea\n2.lib (found version \"1.0.1i\")\n-- Could NOT find UV (missing:  LIBUV_LIBRARIES LIBUV_INCLUDE_DIR)\n-- Could NOT find YAML (missing:  LIBYAML_LIBRARIES LIBYAML_INCLUDE_DIR)\n-- Could NOT find WSLAY (missing:  WSLAY_LIBRARIES WSLAY_INCLUDE_DIR)\n-- Configuring done\n-- Generating done\n-- Build files have been written to: E:/h2o/h2o\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56259883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56264008", "body": "@syohex Thank you for your reply , I think you have  mis-understood my problem,my problem now is that I want to learn ,is it h2o can complie in window platform ,and Could I develop it on window platform in the future.Your reply will be appriciated!\n\nwhen I open it in VS2013,there is some error like these:\n\n#include <sys/time.h>\n#include <sys/socket.h>   //Error can not open file \n#include <time.h>            //Error can not open file\"time.h\" .\n#include <unistd.h>\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56264008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56292952", "body": "@kazuho  Thanks, I will try it on Ubuntu first !  then try it on Windows. \n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56292952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/7861300", "body": "I also found the README.md file should be more detailed!  \nThanks for your great job!\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/7861300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "feilaoda": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56255113", "body": "\u662f\u4f60github\u7684SSH Key\u6ca1\u914d\u7f6e\u597d\u5427\uff1f\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56255113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "syohex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56260914", "body": "@swinghu  You can download libyaml binary and header files from\n- 32bit - https://github.com/jonforums/libyaml-waf/downloads\n- 64bit - http://packages.openknapsack.org/libyaml/libyaml-0.1.4-x64-windows.tar.lzma\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56260914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/12099268", "body": "typo `amke install` -> `make install`\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/12099268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ipeychev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56273886", "body": "I also couldn't compile it, on Ubuntu 13.10:\n$ git clone https://github.com/kazuho/h2o.git\nCloning into 'h2o'...\nremote: Counting objects: 1483, done.\nremote: Total 1483 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (1483/1483), 370.36 KiB | 190.00 KiB/s, done.\nResolving deltas: 100% (980/980), done.\nChecking connectivity... done\ntest@http2:~/install$ cd h2o/\ntest@http2:~/install/h2o$ git submodule update --init --recursive\nSubmodule 'deps/klib' (https://github.com/attractivechaos/klib.git) registered for path 'deps/klib'\nSubmodule 'deps/picohttpparser' (https://github.com/kazuho/picohttpparser.git) registered for path 'deps/picohttpparser'\nSubmodule 'deps/picotest' (https://github.com/kazuho/picotest.git) registered for path 'deps/picotest'\nSubmodule 'deps/yoml' (https://github.com/kazuho/yoml.git) registered for path 'deps/yoml'\nCloning into 'deps/klib'...\nremote: Counting objects: 763, done.\nremote: Total 763 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (763/763), 288.85 KiB | 241.00 KiB/s, done.\nResolving deltas: 100% (402/402), done.\nChecking connectivity... done\nSubmodule path 'deps/klib': checked out '28c6d8307950929510a1cbb57ed023eff70b1050'\nCloning into 'deps/picohttpparser'...\nremote: Counting objects: 108, done.\nremote: Total 108 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (108/108), 16.70 KiB | 0 bytes/s, done.\nResolving deltas: 100% (64/64), done.\nChecking connectivity... done\nSubmodule path 'deps/picohttpparser': checked out '275ff298ca91cc6dda6174667aa1438801fb0d12'\nCloning into 'deps/picotest'...\nremote: Counting objects: 4, done.\nremote: Total 4 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (4/4), done.\nChecking connectivity... done\nSubmodule path 'deps/picotest': checked out '4728941c8e78ca041ddee45643e0012a977e1484'\nCloning into 'deps/yoml'...\nremote: Counting objects: 24, done.\nremote: Total 24 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (24/24), done.\nChecking connectivity... done\nSubmodule path 'deps/yoml': checked out 'ef25ce3ab863a6df7c63b63b650ac0a17cb48119'\nSubmodule 'deps/picotest' (git@github.com:kazuho/picotest.git) registered for path 'deps/picotest'\nCloning into 'deps/picotest'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\nClone of 'git@github.com:kazuho/picotest.git' into submodule path 'deps/picotest' failed\nFailed to recurse into submodule path 'deps/yoml'\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56273886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xiangzhai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56324519", "body": "Hi kazuho,\n\nI totally agree with you that paper is NOT able to prove the performance, but it is able to explain WHY h2o is faster 2x than Nginx, because h2o is ZERO-module, but Nginx has to consider about lots of features? https://github.com/nginx/nginx/tree/master/src/http/modules or due to h2o use John Carmack alike sqrt Ancient Aliens' algorithm?\n\nAnd the benmark http://github.com/kazuho/h2o#benchmark is too simple, please look at Google`s V8 benchmark https://v8.googlecode.com/svn/data/benchmarks/\n\nRegards,\nLeslie Zhai\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/issues/comments/56324519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "linuxscooter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/7861191", "body": "Hi - not being familiar with git much could you perhaps provide more detailed steps?\nI seem to be getting the following:\n\n> $ cmake .\n> CMake Error: Error in cmake code at\n> /home/pete/h2o/CMakeLists.txt:5:\n> Parse error.  Expected a command name, got unquoted argument with text \"<!DOCTYPE\".\n> -- Configuring incomplete, errors occurred!\n\nThanks and keep up the great work.\nC\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/7861191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mgumz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/8457194", "body": "i am not quite sure you will need to include <alloca.h> at all: \"By default the glibc version of <stdlib.h> includes <alloca.h>\"  (see http://linux.die.net/man/3/alloca ). i compiled the code as it was in 06faa76f2eb70a88e5acc48cde437a469a3dfc17 and that worked quite fine on linux, freebsd and macosx.\n\nwhat reasons do you have to explicitely include <alloca.h>?\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/8457194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jbergstroem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/9115550", "body": "Libuv ships with a `.pc`. Couldn't you just call `pkg_check_modules` from Cmake?\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9115550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nickdesaulniers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/9264118", "body": "How do you know that _SC_NPROCESSORS_ONLN is defined in sys/sysctl.h?  I'm not exactly proficient in C/C++, so this is a beginner question.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9264118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/h2o/h2o/comments/9424962", "body": "satrt -> start\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9424962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/23201655", "body": "Also, this line is super long, wasn't sure if it was ok to split up preprocessor statements across multiple lines.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/pulls/comments/23201655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "maksqwe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/9335559", "body": "What about \"-fno-builtin-memcmp\"? It's gcc bug. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=43052\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/9335559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "janit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/11798164", "body": "fastcgi.connect: /tmp/fcgi.sock does not work for me. Maybe a configuration format change?\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/11798164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tatsuhiro-t": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/12948654", "body": "I think this commit should be reverted.\nRFC 7540 says that client cannot send PUSH_PROMISE and any attempt to enable push in server initiated SETTINGS is connection error.  Which means effectively server disables reception of push.\n\n```\n   A client cannot push.  Thus, servers MUST treat the receipt of a\n   PUSH_PROMISE frame as a connection error (Section 5.4.1) of type\n   PROTOCOL_ERROR.  Clients MUST reject any attempt to change the\n   SETTINGS_ENABLE_PUSH setting to a value other than 0 by treating the\n   message as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.\n```\n\nSo, making enable_push to 1 is even more confusing, assuming \"1\" means enabling push.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/12948654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "szepeviktor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/13087894", "body": "`apt-get install netcat-openbsd` to support `-U`.\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/13087894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gaoyichuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/h2o/h2o/comments/14262265", "body": "You forgot to change the comment on line 52. :)\n", "reactions": {"url": "https://api.github.com/repos/h2o/h2o/comments/14262265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}