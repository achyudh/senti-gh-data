{"_default": {"1": {"jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832", "body": "Can you include a test case for this?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timstorer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447", "body": "Typo!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481", "body": "Both of the constructor bodies are almost identical, why not call one from another?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529", "body": "This is NOT right if the framework really runs this way. (see [Frequency on Wikipedia](http://en.wikipedia.org/wiki/Frequency)). If frequency is 2 then it means the monkey should run **twice every hour**.\n\nWhat you are talking about is called period (`T`), which means the time interval between runs is 2 hours. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769", "body": "All these **OrElse** statements can be written in one line:\n\n`return props.getProperty(property_key, default)`. Your null check is redundant. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824", "body": "I noticed three typos in this line.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milindcq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275", "body": "This fix hangs on following string input.\n\n\"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\"\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247", "body": "We have some of these long strings as user ids in our system and I've noticed that it hangs on such strings. Not sure if problem with regex pattern or Java regex library itself.\n\n`public class RegTest {\n\n```\nprivate static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+\\\\.]+(.[_A-Za-z0-9-]+)*@\"\n                + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n\npublic static void main(String[] args) {\n\n    Pattern emailPattern = Pattern.compile(EMAIL_PATTERN);\n    String email = \"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\";\n\n    if (!emailPattern.matcher(email).matches()) {\n        System.out.print(String.format(\"Invalid email address: %s\", email));\n    }   \n}\n```\n\n}`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"timstorer": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311", "title": "Config simianarmy.chaos.ASG.maxTerminationsPerDay not respected when using LocalDB", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected. This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.\r\n\r\nThis is fixed by PR https://github.com/Netflix/SimianArmy/pull/309.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truongvinhtien": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310", "title": "Make Janitor Monkey ignore Stopped Instances/Resources", "body": "Hi,\r\nI am new to SimianArmy, and my company required me to set the Janitor Monkey to shutting down the resources instead of terminating them so they can keep the data. I just merely edited some pieces of code in the AWSClient.java and InstanceJanitor.java so that it can stop the instance, and somehow it worked.\r\nIn the AWSClient.java:\r\n```java \r\n@Override\r\n    public void terminateInstance(String instanceId) {\r\n        Validate.notEmpty(instanceId);\r\n        LOGGER.info(String.format(\"Stopping instance %s in region %s.\", instanceId, region));\r\n        try {\r\n            ec2Client().stopInstances(new StopInstancesRequest(Arrays.asList(instanceId)));\r\n        } catch (AmazonServiceException e) {\r\n            if (e.getErrorCode().equals(\"InvalidInstanceID.NotFound\")) {\r\n                throw new NotFoundException(\"AWS instance \" + instanceId + \" not found\", e);\r\n            }\r\n            throw e;\r\n        }\r\n    }   \r\n```\r\nIn the InstanceJanitor.java\r\n```java\r\n@Override\r\n    protected void cleanup(Resource resource) {\r\n        LOGGER.info(String.format(\"Stopping instance %s\", resource.getId()));\r\n        awsClient.terminateInstance(resource.getId());\r\n    }\r\n```\r\nI wonder if there is any proper way to apply this method for all the resource types. Moreover, when I ran the Janitor Monkey again it also remarked the stopped instances for cleaning up. Can I implement the JM to ignore the stopped/inactive resources?\r\n\r\nMany thanks.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832", "body": "Can you include a test case for this?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447", "body": "Typo!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481", "body": "Both of the constructor bodies are almost identical, why not call one from another?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529", "body": "This is NOT right if the framework really runs this way. (see [Frequency on Wikipedia](http://en.wikipedia.org/wiki/Frequency)). If frequency is 2 then it means the monkey should run **twice every hour**.\n\nWhat you are talking about is called period (`T`), which means the time interval between runs is 2 hours. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769", "body": "All these **OrElse** statements can be written in one line:\n\n`return props.getProperty(property_key, default)`. Your null check is redundant. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824", "body": "I noticed three typos in this line.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milindcq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275", "body": "This fix hangs on following string input.\n\n\"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\"\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247", "body": "We have some of these long strings as user ids in our system and I've noticed that it hangs on such strings. Not sure if problem with regex pattern or Java regex library itself.\n\n`public class RegTest {\n\n```\nprivate static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+\\\\.]+(.[_A-Za-z0-9-]+)*@\"\n                + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n\npublic static void main(String[] args) {\n\n    Pattern emailPattern = Pattern.compile(EMAIL_PATTERN);\n    String email = \"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\";\n\n    if (!emailPattern.matcher(email).matches()) {\n        System.out.print(String.format(\"Invalid email address: %s\", email));\n    }   \n}\n```\n\n}`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "3": {"timstorer": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311", "title": "Config simianarmy.chaos.ASG.maxTerminationsPerDay not respected when using LocalDB", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected. This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.\r\n\r\nThis is fixed by PR https://github.com/Netflix/SimianArmy/pull/309.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truongvinhtien": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310", "title": "Make Janitor Monkey ignore Stopped Instances/Resources", "body": "Hi,\r\nI am new to SimianArmy, and my company required me to set the Janitor Monkey to shutting down the resources instead of terminating them so they can keep the data. I just merely edited some pieces of code in the AWSClient.java and InstanceJanitor.java so that it can stop the instance, and somehow it worked.\r\nIn the AWSClient.java:\r\n```java \r\n@Override\r\n    public void terminateInstance(String instanceId) {\r\n        Validate.notEmpty(instanceId);\r\n        LOGGER.info(String.format(\"Stopping instance %s in region %s.\", instanceId, region));\r\n        try {\r\n            ec2Client().stopInstances(new StopInstancesRequest(Arrays.asList(instanceId)));\r\n        } catch (AmazonServiceException e) {\r\n            if (e.getErrorCode().equals(\"InvalidInstanceID.NotFound\")) {\r\n                throw new NotFoundException(\"AWS instance \" + instanceId + \" not found\", e);\r\n            }\r\n            throw e;\r\n        }\r\n    }   \r\n```\r\nIn the InstanceJanitor.java\r\n```java\r\n@Override\r\n    protected void cleanup(Resource resource) {\r\n        LOGGER.info(String.format(\"Stopping instance %s\", resource.getId()));\r\n        awsClient.terminateInstance(resource.getId());\r\n    }\r\n```\r\nI wonder if there is any proper way to apply this method for all the resource types. Moreover, when I ran the Janitor Monkey again it also remarked the stopped instances for cleaning up. Can I implement the JM to ignore the stopped/inactive resources?\r\n\r\nMany thanks.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832", "body": "Can you include a test case for this?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447", "body": "Typo!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481", "body": "Both of the constructor bodies are almost identical, why not call one from another?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529", "body": "This is NOT right if the framework really runs this way. (see [Frequency on Wikipedia](http://en.wikipedia.org/wiki/Frequency)). If frequency is 2 then it means the monkey should run **twice every hour**.\n\nWhat you are talking about is called period (`T`), which means the time interval between runs is 2 hours. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769", "body": "All these **OrElse** statements can be written in one line:\n\n`return props.getProperty(property_key, default)`. Your null check is redundant. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824", "body": "I noticed three typos in this line.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milindcq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275", "body": "This fix hangs on following string input.\n\n\"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\"\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247", "body": "We have some of these long strings as user ids in our system and I've noticed that it hangs on such strings. Not sure if problem with regex pattern or Java regex library itself.\n\n`public class RegTest {\n\n```\nprivate static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+\\\\.]+(.[_A-Za-z0-9-]+)*@\"\n                + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n\npublic static void main(String[] args) {\n\n    Pattern emailPattern = Pattern.compile(EMAIL_PATTERN);\n    String email = \"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\";\n\n    if (!emailPattern.matcher(email).matches()) {\n        System.out.print(String.format(\"Invalid email address: %s\", email));\n    }   \n}\n```\n\n}`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "4": {"timstorer": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311", "title": "Config simianarmy.chaos.ASG.maxTerminationsPerDay not respected when using LocalDB", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected. This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.\r\n\r\nThis is fixed by PR https://github.com/Netflix/SimianArmy/pull/309.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truongvinhtien": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310", "title": "Make Janitor Monkey ignore Stopped Instances/Resources", "body": "Hi,\r\nI am new to SimianArmy, and my company required me to set the Janitor Monkey to shutting down the resources instead of terminating them so they can keep the data. I just merely edited some pieces of code in the AWSClient.java and InstanceJanitor.java so that it can stop the instance, and somehow it worked.\r\nIn the AWSClient.java:\r\n```java \r\n@Override\r\n    public void terminateInstance(String instanceId) {\r\n        Validate.notEmpty(instanceId);\r\n        LOGGER.info(String.format(\"Stopping instance %s in region %s.\", instanceId, region));\r\n        try {\r\n            ec2Client().stopInstances(new StopInstancesRequest(Arrays.asList(instanceId)));\r\n        } catch (AmazonServiceException e) {\r\n            if (e.getErrorCode().equals(\"InvalidInstanceID.NotFound\")) {\r\n                throw new NotFoundException(\"AWS instance \" + instanceId + \" not found\", e);\r\n            }\r\n            throw e;\r\n        }\r\n    }   \r\n```\r\nIn the InstanceJanitor.java\r\n```java\r\n@Override\r\n    protected void cleanup(Resource resource) {\r\n        LOGGER.info(String.format(\"Stopping instance %s\", resource.getId()));\r\n        awsClient.terminateInstance(resource.getId());\r\n    }\r\n```\r\nI wonder if there is any proper way to apply this method for all the resource types. Moreover, when I ran the Janitor Monkey again it also remarked the stopped instances for cleaning up. Can I implement the JM to ignore the stopped/inactive resources?\r\n\r\nMany thanks.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832", "body": "Can you include a test case for this?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447", "body": "Typo!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481", "body": "Both of the constructor bodies are almost identical, why not call one from another?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529", "body": "This is NOT right if the framework really runs this way. (see [Frequency on Wikipedia](http://en.wikipedia.org/wiki/Frequency)). If frequency is 2 then it means the monkey should run **twice every hour**.\n\nWhat you are talking about is called period (`T`), which means the time interval between runs is 2 hours. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769", "body": "All these **OrElse** statements can be written in one line:\n\n`return props.getProperty(property_key, default)`. Your null check is redundant. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824", "body": "I noticed three typos in this line.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milindcq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275", "body": "This fix hangs on following string input.\n\n\"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\"\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247", "body": "We have some of these long strings as user ids in our system and I've noticed that it hangs on such strings. Not sure if problem with regex pattern or Java regex library itself.\n\n`public class RegTest {\n\n```\nprivate static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+\\\\.]+(.[_A-Za-z0-9-]+)*@\"\n                + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n\npublic static void main(String[] args) {\n\n    Pattern emailPattern = Pattern.compile(EMAIL_PATTERN);\n    String email = \"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\";\n\n    if (!emailPattern.matcher(email).matches()) {\n        System.out.print(String.format(\"Invalid email address: %s\", email));\n    }   \n}\n```\n\n}`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "5": {"timstorer": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311", "title": "Config simianarmy.chaos.ASG.maxTerminationsPerDay not respected when using LocalDB", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected. This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.\r\n\r\nThis is fixed by PR https://github.com/Netflix/SimianArmy/pull/309.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truongvinhtien": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310", "title": "Make Janitor Monkey ignore Stopped Instances/Resources", "body": "Hi,\r\nI am new to SimianArmy, and my company required me to set the Janitor Monkey to shutting down the resources instead of terminating them so they can keep the data. I just merely edited some pieces of code in the AWSClient.java and InstanceJanitor.java so that it can stop the instance, and somehow it worked.\r\nIn the AWSClient.java:\r\n```java \r\n@Override\r\n    public void terminateInstance(String instanceId) {\r\n        Validate.notEmpty(instanceId);\r\n        LOGGER.info(String.format(\"Stopping instance %s in region %s.\", instanceId, region));\r\n        try {\r\n            ec2Client().stopInstances(new StopInstancesRequest(Arrays.asList(instanceId)));\r\n        } catch (AmazonServiceException e) {\r\n            if (e.getErrorCode().equals(\"InvalidInstanceID.NotFound\")) {\r\n                throw new NotFoundException(\"AWS instance \" + instanceId + \" not found\", e);\r\n            }\r\n            throw e;\r\n        }\r\n    }   \r\n```\r\nIn the InstanceJanitor.java\r\n```java\r\n@Override\r\n    protected void cleanup(Resource resource) {\r\n        LOGGER.info(String.format(\"Stopping instance %s\", resource.getId()));\r\n        awsClient.terminateInstance(resource.getId());\r\n    }\r\n```\r\nI wonder if there is any proper way to apply this method for all the resource types. Moreover, when I ran the Janitor Monkey again it also remarked the stopped instances for cleaning up. Can I implement the JM to ignore the stopped/inactive resources?\r\n\r\nMany thanks.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "6": {"timstorer": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311", "title": "Config simianarmy.chaos.ASG.maxTerminationsPerDay not respected when using LocalDB", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected. This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.\r\n\r\nThis is fixed by PR https://github.com/Netflix/SimianArmy/pull/309.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truongvinhtien": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310", "title": "Make Janitor Monkey ignore Stopped Instances/Resources", "body": "Hi,\r\nI am new to SimianArmy, and my company required me to set the Janitor Monkey to shutting down the resources instead of terminating them so they can keep the data. I just merely edited some pieces of code in the AWSClient.java and InstanceJanitor.java so that it can stop the instance, and somehow it worked.\r\nIn the AWSClient.java:\r\n```java \r\n@Override\r\n    public void terminateInstance(String instanceId) {\r\n        Validate.notEmpty(instanceId);\r\n        LOGGER.info(String.format(\"Stopping instance %s in region %s.\", instanceId, region));\r\n        try {\r\n            ec2Client().stopInstances(new StopInstancesRequest(Arrays.asList(instanceId)));\r\n        } catch (AmazonServiceException e) {\r\n            if (e.getErrorCode().equals(\"InvalidInstanceID.NotFound\")) {\r\n                throw new NotFoundException(\"AWS instance \" + instanceId + \" not found\", e);\r\n            }\r\n            throw e;\r\n        }\r\n    }   \r\n```\r\nIn the InstanceJanitor.java\r\n```java\r\n@Override\r\n    protected void cleanup(Resource resource) {\r\n        LOGGER.info(String.format(\"Stopping instance %s\", resource.getId()));\r\n        awsClient.terminateInstance(resource.getId());\r\n    }\r\n```\r\nI wonder if there is any proper way to apply this method for all the resource types. Moreover, when I ran the Janitor Monkey again it also remarked the stopped instances for cleaning up. Can I implement the JM to ignore the stopped/inactive resources?\r\n\r\nMany thanks.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832", "body": "Can you include a test case for this?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447", "body": "Typo!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481", "body": "Both of the constructor bodies are almost identical, why not call one from another?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529", "body": "This is NOT right if the framework really runs this way. (see [Frequency on Wikipedia](http://en.wikipedia.org/wiki/Frequency)). If frequency is 2 then it means the monkey should run **twice every hour**.\n\nWhat you are talking about is called period (`T`), which means the time interval between runs is 2 hours. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769", "body": "All these **OrElse** statements can be written in one line:\n\n`return props.getProperty(property_key, default)`. Your null check is redundant. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824", "body": "I noticed three typos in this line.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milindcq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275", "body": "This fix hangs on following string input.\n\n\"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\"\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247", "body": "We have some of these long strings as user ids in our system and I've noticed that it hangs on such strings. Not sure if problem with regex pattern or Java regex library itself.\n\n`public class RegTest {\n\n```\nprivate static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+\\\\.]+(.[_A-Za-z0-9-]+)*@\"\n                + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n\npublic static void main(String[] args) {\n\n    Pattern emailPattern = Pattern.compile(EMAIL_PATTERN);\n    String email = \"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\";\n\n    if (!emailPattern.matcher(email).matches()) {\n        System.out.print(String.format(\"Invalid email address: %s\", email));\n    }   \n}\n```\n\n}`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "7": {"timstorer": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311", "title": "Config simianarmy.chaos.ASG.maxTerminationsPerDay not respected when using LocalDB", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected. This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.\r\n\r\nThis is fixed by PR https://github.com/Netflix/SimianArmy/pull/309.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truongvinhtien": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310", "title": "Make Janitor Monkey ignore Stopped Instances/Resources", "body": "Hi,\r\nI am new to SimianArmy, and my company required me to set the Janitor Monkey to shutting down the resources instead of terminating them so they can keep the data. I just merely edited some pieces of code in the AWSClient.java and InstanceJanitor.java so that it can stop the instance, and somehow it worked.\r\nIn the AWSClient.java:\r\n```java \r\n@Override\r\n    public void terminateInstance(String instanceId) {\r\n        Validate.notEmpty(instanceId);\r\n        LOGGER.info(String.format(\"Stopping instance %s in region %s.\", instanceId, region));\r\n        try {\r\n            ec2Client().stopInstances(new StopInstancesRequest(Arrays.asList(instanceId)));\r\n        } catch (AmazonServiceException e) {\r\n            if (e.getErrorCode().equals(\"InvalidInstanceID.NotFound\")) {\r\n                throw new NotFoundException(\"AWS instance \" + instanceId + \" not found\", e);\r\n            }\r\n            throw e;\r\n        }\r\n    }   \r\n```\r\nIn the InstanceJanitor.java\r\n```java\r\n@Override\r\n    protected void cleanup(Resource resource) {\r\n        LOGGER.info(String.format(\"Stopping instance %s\", resource.getId()));\r\n        awsClient.terminateInstance(resource.getId());\r\n    }\r\n```\r\nI wonder if there is any proper way to apply this method for all the resource types. Moreover, when I ran the Janitor Monkey again it also remarked the stopped instances for cleaning up. Can I implement the JM to ignore the stopped/inactive resources?\r\n\r\nMany thanks.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832", "body": "Can you include a test case for this?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447", "body": "Typo!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481", "body": "Both of the constructor bodies are almost identical, why not call one from another?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529", "body": "This is NOT right if the framework really runs this way. (see [Frequency on Wikipedia](http://en.wikipedia.org/wiki/Frequency)). If frequency is 2 then it means the monkey should run **twice every hour**.\n\nWhat you are talking about is called period (`T`), which means the time interval between runs is 2 hours. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769", "body": "All these **OrElse** statements can be written in one line:\n\n`return props.getProperty(property_key, default)`. Your null check is redundant. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824", "body": "I noticed three typos in this line.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milindcq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275", "body": "This fix hangs on following string input.\n\n\"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\"\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247", "body": "We have some of these long strings as user ids in our system and I've noticed that it hangs on such strings. Not sure if problem with regex pattern or Java regex library itself.\n\n`public class RegTest {\n\n```\nprivate static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+\\\\.]+(.[_A-Za-z0-9-]+)*@\"\n                + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n\npublic static void main(String[] args) {\n\n    Pattern emailPattern = Pattern.compile(EMAIL_PATTERN);\n    String email = \"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\";\n\n    if (!emailPattern.matcher(email).matches()) {\n        System.out.print(String.format(\"Invalid email address: %s\", email));\n    }   \n}\n```\n\n}`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "8": {"timstorer": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311", "title": "Config simianarmy.chaos.ASG.maxTerminationsPerDay not respected when using LocalDB", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected. This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.\r\n\r\nThis is fixed by PR https://github.com/Netflix/SimianArmy/pull/309.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/309", "title": "Fix querying LocalDB: consider all event fields when matching events", "body": "When using LocalDBRecorder, we found that the config simianarmy.chaos.ASG.maxTerminationsPerDay was not being respected.  This is because the groupName field was not being compared for matches, so getPreviousTerminationCount in BasicChaosMonkey always returned 0 terminations for the ASG.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truongvinhtien": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310", "title": "Make Janitor Monkey ignore Stopped Instances/Resources", "body": "Hi,\r\nI am new to SimianArmy, and my company required me to set the Janitor Monkey to shutting down the resources instead of terminating them so they can keep the data. I just merely edited some pieces of code in the AWSClient.java and InstanceJanitor.java so that it can stop the instance, and somehow it worked.\r\nIn the AWSClient.java:\r\n```java \r\n@Override\r\n    public void terminateInstance(String instanceId) {\r\n        Validate.notEmpty(instanceId);\r\n        LOGGER.info(String.format(\"Stopping instance %s in region %s.\", instanceId, region));\r\n        try {\r\n            ec2Client().stopInstances(new StopInstancesRequest(Arrays.asList(instanceId)));\r\n        } catch (AmazonServiceException e) {\r\n            if (e.getErrorCode().equals(\"InvalidInstanceID.NotFound\")) {\r\n                throw new NotFoundException(\"AWS instance \" + instanceId + \" not found\", e);\r\n            }\r\n            throw e;\r\n        }\r\n    }   \r\n```\r\nIn the InstanceJanitor.java\r\n```java\r\n@Override\r\n    protected void cleanup(Resource resource) {\r\n        LOGGER.info(String.format(\"Stopping instance %s\", resource.getId()));\r\n        awsClient.terminateInstance(resource.getId());\r\n    }\r\n```\r\nI wonder if there is any proper way to apply this method for all the resource types. Moreover, when I ran the Janitor Monkey again it also remarked the stopped instances for cleaning up. Can I implement the JM to ignore the stopped/inactive resources?\r\n\r\nMany thanks.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesalford": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308", "title": "Cannot set up janitor monkey without simpleDB", "body": "I have adjusted the config in \"_client.properties_\" to have the setting as follows\r\n\r\n```\r\n# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB\r\nsimianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder\r\n```\r\n\r\nI am getting the following error which looks like the code is still using AmazonSimpleDB and not local recorder:\r\n`2017-12-06 14:50:32.645 - ERROR BasicJanitorMonkey - [BasicJanitorMonkey.java:137] Got an exception while LAUNCH_CONFIG janitor was cleaning for region eu-west-1\r\ncom.amazonaws.services.simpledb.model.NoSuchDomainException: The specified domain does not exist. (Service: AmazonSimpleDB; Status Code: 400; Error Code: NoSuchDomain; Request ID: xxxxxxxxxxxxx)\r\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.doInvoke(AmazonSimpleDBClient.java:1058)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.invoke(AmazonSimpleDBClient.java:1028)\r\n\tat com.amazonaws.services.simpledb.AmazonSimpleDBClient.select(AmazonSimpleDBClient.java:977)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.querySimpleDBItems(SimpleDBJanitorResourceTracker.java:209)\r\n\tat com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker.getResources(SimpleDBJanitorResourceTracker.java:108)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.getTrackedMarkedResources(AbstractJanitor.java:290)\r\n\tat com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:303)\r\n\tat com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n\tat com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)`", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettswift": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306", "title": "Question:  Multiple Accounts", "body": "Nothing has popped up in the code or docs here about how these monkeys work with multiple accounts?  They would be child accounts.   \r\n\r\nHas this been planned or is it supported and I'm just not seeing how it works?  If it does I would assume the account in the config files would be the root billing account.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msavlani": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305", "title": "Getting error :  \"Error making SSH connection to instance\" on vshpere infrasturuture", "body": "Hi,\r\n\r\nI have defined below properties in my client.properties\r\n\r\nsimianarmy.chaos.ssh.user=root\r\nsimianarmy.chaos.ssh.key=~/.ssh/id_rsa\r\n\r\nBut i am still getting below error \r\n\r\n WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\njava.lang.NullPointerException\r\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:863)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:885)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:125)\r\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\r\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\r\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n\r\nWhy does it go to AWSClient.java when i am using vshpere infrastrucure ?\r\n\r\nThanks,\r\nManish Sawlani\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivanilves": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301", "title": "Any way to view Janitor reports apart from Email?", "body": "Hey guys, first, thank you for the SimianArmy, especially for Janitor Monkey! :heart: \r\n\r\nI've just set it up and it works! It gives me lists of unused resources, which is pretty truthful.\r\n\r\n**However, the only way I was able to get the information from Janitor is email.\r\nIs there any other way to get information from Janitor? Any CLI or REST API?**\r\nBasically I need the same information I'm receiving in email, but in interactive form. :grimacing: \r\n\r\nI've tried `GET /simianarmy/api/v1/janitor` and all I get is:\r\n```\r\n[\r\n  - {\r\n      JanitorMonkeyStatus: \"OnLikeDonkeyKong\"\r\n  }\r\n]\r\n```\r\n\r\nI have also tried `GET /simianarmy/api/v1/chaos`, and it returns `[]`, but this is not related to Janitor Monkey AFAIK, it's about Chaos Monkey, which I do not use now (I'm just cutting costs at this stage).\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaketKum": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296", "title": "Network latency and Network loss not working ", "body": "Getting following error :\r\n2017-02-24 18:43:45.951 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLatency on instance i-XXXX\r\n2017-02-24 18:44:14.185 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networklatency.sh: line 5: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n2017-02-24 18:30:30.057 - INFO  ScriptChaosType - [ScriptChaosType.java:73] Running script for NetworkLoss on instance i-XXXX\r\n2017-02-24 18:30:57.182 - WARN  ScriptChaosType - [ScriptChaosType.java:89] Got non-zero output from running script: {output=/tmp/networkloss.sh: line 6: tc: command not found\r\n, error=, exitStatus=127}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ParasDPain": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292", "title": "Add Cloud Formation Cleanup Support to Janitor", "body": "I wanted to use Janitor Monkey to cleanup Cloud Formation stacks (effectively, cleaning all associated resources within the stack). Basic requirement is for it to remove stacks that are missing tags or have been unused for X days.\r\n\r\nI was unable to find any discussion on supporting this feature so have created a new issue. Are there any plans for supporting this in the near future?\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumarRaj": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291", "title": "Port to DynamoDB from SimpleDB", "body": "Looking at the way amazon is trying its best to hide SimpleDB from the console IAM and everywhere else, shouldn't we think of porting to DynamoDB.\r\n\r\nFor some reading https://forums.aws.amazon.com/thread.jspa?threadID=96141&tstart=0\r\n\r\nAlso it seems like the future of simple db is not very clear. For me to find the policy of Create SimpleDB by itself was a difficult task.", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/291/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VinnieGogniti": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287", "title": "Unable to execute BlockAllNetworkTraffic (non-ssh) case from chaos monkey", "body": "Seeing the following error when tried executing a non-ssh case - BlockAllNetworkTraffic, by chaos monkey. \r\nIt appears that it can't detect the VPC, in which the target instances are running and being thrown a **No default VPC for this user** error.\r\n\r\nINFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 50 instances, excluding null\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:460] Getting EC2 instances for 1 ids in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:475] Got 1 EC2 instances in region us-west-2.\r\nINFO  AWSClient - [AWSClient.java:804] Getting EC2 security groups for 2 names in region us-west-2.\r\nERROR BasicChaosMonkey - [BasicChaosMonkey.java:201] failed to terminate instance i-0296xxxx\r\ncom.amazonaws.services.ec2.model.AmazonEC2Exception: **No default VPC for this user** (Service: AmazonEC2; Status Code: 400; Error Code: VPCIdNotSpecified;\r\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285", "title": "Unable to perform SSH cases - HTTP 401 being returned from a wrong region", "body": "Hello Everyone,\r\n\r\nI've been stuck with this issue for a week now. I've looked around all the threads related to this issue and apparently it's an open issue and there is no definitive solution yet.\r\n\r\nThe issue is - even though I have the region to use (in my client config) is \"us-west-2\", my SSH cases are failing with a HTTP 401 at a wrong region. \r\nI scanned through the entire code and replaced all the \"us-east-1\" references to \"us-west-2\", but still I'm unable to get around this issue. I believe the code as got to be making an AWS SDK call to fetch the current region via API and somehow getting \"us-east-1\" retuned and overrides my config.\r\nThis has absolutely baffled me for days now.\r\n\r\nPlease, anyone who had resolved this earlier or can think of a better solution, help me resolve this. Following is the error log. Thank you!\r\n\r\n\r\n2016-12-13 05:24:05.356 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 2 from 2 instances, excluding null\r\n2016-12-13 05:24:07.084 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n.\r\n.\r\n.\r\n.\r\n2016-12-13 05:24:07.089 - WARN  ScriptChaosType - [ScriptChaosType.java:61] Strategy disabled because SSH credentials failed\r\n2016-12-13 05:24:07.089 - WARN  BasicChaosMonkey - [BasicChaosMonkey.java:124] No chaos type was applicable to the instance: i-009863xxxxxx\r\n2016-12-13 05:24:07.205 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\r\norg.jclouds.rest.AuthorizationException: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1 -> HTTP/1.1 401 Unauthorized\r\n\tat org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/285/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebukoski": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283", "title": "ELB cleanup causing AWS rate exceeded exception", "body": "The Janitor Monkey ELB cleanup feature is encountering rate limit exceptions when running in AWS.\r\n\r\nA quick solution could be to add a sleep when deleting ELBs.  This will slow down Janitor but speed isn't that important during ELB cleanups.  Of larger concern is impacting ELB API calls for the entire organization.\r\n\r\n```\r\n2016-11-15 18:59:46,650 ERROR [com.netflix.simianarmy.janitor.AbstractJanitor] Failed to clean up the resource obiwan-cseqa-frontend of type ELB.\r\ncom.amazonaws.services.elasticloadbalancing.model.AmazonElasticLoadBalancingException: Rate exceeded (Service: AmazonElasticLoadBalancing; Status Code: 400; Error Code: Throttling; Request ID: ad215c19-ab65-11e6-8f94-d765cc723562)\r\n        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1386)\r\n        at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:939)\r\n        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714)\r\n        at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:465)\r\n        at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:427)\r\n        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:376)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.doInvoke(AmazonElasticLoadBalancingClient.java:2172)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.invoke(AmazonElasticLoadBalancingClient.java:2142)\r\n        at com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient.deleteLoadBalancer(AmazonElasticLoadBalancingClient.java:996)\r\n        at com.netflix.simianarmy.client.aws.AWSClient.deleteElasticLoadBalancer(AWSClient.java:576)\r\n        at com.netflix.simianarmy.aws.janitor.ELBJanitor.cleanup(ELBJanitor.java:58)\r\n        at com.netflix.simianarmy.janitor.AbstractJanitor.cleanupResources(AbstractJanitor.java:336)\r\n        at com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey.doMonkeyBusiness(BasicJanitorMonkey.java:135)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.doMonkeyBusiness(NFJanitorMonkey.java:79)\r\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\r\n        at com.netflix.simianarmy.nf.janitor.NFJanitorMonkey.run(NFJanitorMonkey.java:65)\r\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\r\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\r\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273", "title": "Add Elastic Load Balancer Cleanup Support to Janitor", "body": "Add Elastic Load Balancer (ELB) Cleanup support to Janitor.  Janitor will identify, mark, and clean ELBs that are unused.  \n\nThis would involve creating multiple new classes:\n- ELBJanitor.java\n- EddaELBJanitorCrawler.java\n- EmptyELBRule.java\n\nSo far the rule we are considering for this cleanup is:\n1. EmptyELBRule: Mark and clean any ELBs with no attached instances.  A possible additional condition is to mark/clean ELBs with no instances attached for X days with X a configurable value.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/de8321359bc44a1bf3c669ed7e97926993c6f9e6", "message": "Merge pull request #282 from iixlabs/develop\n\nfix the wrong argument for query events from RDS"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d446da3443a912a62487a0efbdbd9b0afe349a3b", "message": "Merge pull request #281 from ebukoski/master\n\nUpdate README.md (License Badge)"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/33834484954da686f78e1fa993ce97a346a02543", "message": "Update README.md"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0256e8ae6a06eb9c4f37a35fe2bf53c019cd6d3d", "message": "Merge pull request #280 from ebukoski/master\n\nFix an edge case where notificationTime is sometimes 0"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/bd819f674c7546fd6d81bcbaf28441ae8233d249", "message": "Fix an edge case where notificationTime is sometimes 0.  When this happens treat it like null."}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/0eb73927ceef536c530c6caba76def7ae76bbf41", "message": "Merge pull request #276 from ebukoski/master\n\nAdd Elastic Load Balancer Cleanup Support to Janitor"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4693ca789669925ad6b7c501feee35aea5f3e580", "message": "Merge pull request #278 from lorin/point-new-chaos-monkey\n\nPoint to latest version of Chaos Monkey"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5b682ace0786c5df9296c8a15ed5d6ebfab3baea", "message": "Add support for AWS Route53 DNS deletes"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/067feaff1f480f7029e4ef8897fa136a49c5237a", "message": "Add Elastic Load Balancer Cleanup Support to Janitor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832", "body": "Can you include a test case for this?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17114832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "abhi1881": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277", "title": "Chaos Monkey on Pivotal Cloud", "body": "Hello,\n\nCan I run chaos monkey service on Pivotal Cloud? If yes, is there any document to refer.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/277/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pwhitham": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275", "title": "Receiving 401 API access error to wrong region when using Chaos Monkey with instance roles and sts service.", "body": "I am currently running Chaos Monkey on an ubuntu 16 node in the us-west-2 region which has an instance role with inline policies attached to this instance. When I execute ssh'd based chaos monkey types they fail because they are accessing the us-east-1 region and not the expected us-west-2. Shutdown instance type is not affected by this issue.\n\nThe following line is in my client.properties file\nsimianarmy.client.aws.region = us-west-2\n\nHowever, when I modify the client.properties to contain an explicit AWS access key/secret this issue does not occur and it accesses the appropriate region. \n\n`\n2016-09-12 14:40:20.339 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\norg.jclouds.rest.AuthorizationException: POST **https://ec2.us-east-1.amazonaws.com/ HTTP/1.1** -> HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.refineException(ParseAWSErrorFromXmlContent.java:122)\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:89)\n    at org.jclouds.http.handlers.DelegatingErrorHandler.handleError(DelegatingErrorHandler.java:65)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.shouldContinue(BaseHttpCommandExecutorService.java:132)\n    at org.jclouds.http.internal.BaseHttpCommandExecutorService.invoke(BaseHttpCommandExecutorService.java:101)\n    at org.jclouds.rest.internal.InvokeHttpMethod.invoke(InvokeHttpMethod.java:90)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:73)\n    at org.jclouds.rest.internal.InvokeHttpMethod.apply(InvokeHttpMethod.java:44)\n    at org.jclouds.reflect.FunctionalReflection$FunctionalInvocationHandler.handleInvocation(FunctionalReflection.java:117)\n    at com.google.common.reflect.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:87)\n    at com.sun.proxy.$Proxy169.describeRegions(Unknown Source)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:50)\n    at org.jclouds.ec2.suppliers.DescribeRegionsForRegionURIs.get(DescribeRegionsForRegionURIs.java:38)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:45)\n    at org.jclouds.location.suppliers.derived.RegionIdsFromRegionIdToURIKeySet.get(RegionIdsFromRegionIdToURIKeySet.java:33)\n    at com.google.common.base.Suppliers$SupplierComposition.get(Suppliers.java:67)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:73)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier$SetAndThrowAuthorizationExceptionSupplierBackedLoader.load(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:57)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3937)\n    at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)\n    at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)\n    at org.jclouds.rest.suppliers.MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.get(MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.java:119)\n    at org.jclouds.aws.ec2.compute.strategy.AWSEC2ListNodesStrategy.pollRunningInstances(AWSEC2ListNodesStrategy.java:65)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listDetailsOnNodesMatching(EC2ListNodesStrategy.java:107)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:86)\n    at org.jclouds.ec2.compute.strategy.EC2ListNodesStrategy.listNodes(EC2ListNodesStrategy.java:58)\n    at org.jclouds.compute.internal.BaseComputeService.listNodes(BaseComputeService.java:335)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsNode(AWSClient.java:857)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:837)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:55)\n    at com.netflix.simianarmy.chaos.FillDiskChaosType.canApply(FillDiskChaosType.java:52)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:143)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:123)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.jclouds.http.HttpResponseException: request: POST https://ec2.us-east-1.amazonaws.com/ HTTP/1.1  [Action=DescribeRegions] failed with response: HTTP/1.1 401 Unauthorized\n    at org.jclouds.aws.handlers.ParseAWSErrorFromXmlContent.handleError(ParseAWSErrorFromXmlContent.java:63)\n    ... 56 more\n`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yufengJ": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274", "title": "BasicChaosMonkey.doMonkeyBusiness() method exit without finishing its job", "body": "Hi all,\n\nI've observed that during BasicChaosMonkey.doMonkeyBusiness(), the method suddenly returned without finishing rest of it's happy-path. There's no exception nor error messages. \n\nThe jettyRun output is as follow:\n\n```\n2016-09-08 16:31:16.328 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 3 instances, excluding null\n2016-09-08 16:31:16.563 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n```\n\nI've set up the debugger to trace this. The code end up into org.jclouds.ContextBuilde. \nThe stack dump is:\n\n```\n\"pool-1-thread-1@9515\" prio=5 tid=0x1d nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:818)\n    - locked <0x2989> (a com.netflix.simianarmy.client.aws.AWSClient)\n    at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:834)\n    at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n    at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n    at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:60)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n    at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n    at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n    at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've observed the issue on master branch and tag v2.5.1. \nTag v2.5.0 is fine though and I was using it well. So i am suspecting it's because some dependency changes in between that is causing this. However a diff between build.gradle of different tags shows me that jcloud is not upgraded during these two tags. So i am confused as where to go next.\n\n```\n$ diff master_branch/build.gradle tag_v2.5.0/build.gradle\n1,6d0\n< buildscript {\n<     repositories {\n<         jcenter()\n<     }\n< }\n<\n8c2\n<     id 'nebula.netflixoss' version '3.2.3'\n\n---\n>     id 'nebula.netflixoss' version '2.2.9'\n18c12\n< repositories {\n\n---\n> repositories {\n26,28d19\n< sourceCompatibility = 1.7\n< targetCompatibility = 1.7\n<\n36c27,28\n<     compile 'com.sun.jersey:jersey-servlet:1.19'\n\n---\n>     compile 'com.sun.jersey:jersey-core:1.11'\n>     compile 'com.sun.jersey:jersey-servlet:1.11'\n40c32,34\n<     compile 'com.netflix.eureka:eureka-client:1.4.1'\n\n---\n>     compile('com.netflix.eureka:eureka-client:1.1.22') {\n>         exclude group: 'com.sun.jersey', module: 'jersey-bundle'\n>     }\n49a44\n>     compile 'ch.qos.logback:logback-classic:1.0.13'\n51,52d45\n<     compile 'org.springframework:spring-jdbc:4.2.5.RELEASE'\n<     compile 'com.zaxxer:HikariCP:2.4.7'\n```\n\nI might dig deeper into this. Has anyone got this issue before?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kenovo": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265", "title": "Chaos Monkey on Openstack ?", "body": "Hi all,\nCan i run chaos monkey on a microservice architecture runing on openstack ? there is any stating guides or tutorials to how to do this ?\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priya23": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262", "title": "Reg:Custom Rules in Janitor monkey", "body": "Hi ,\nI was going through janitor monkey and according to my understanding it checked the if the resource has not launched for more than 2 days and mark it for termination but what if i want to add custom rule saying if average cpu utilization of resource is less than 50% delete it.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259", "title": "AWSClient ComputeServiceContext problem", "body": "Hello,\n\nWhen trying to run chaos that need ssh connection with AWS instances i found a problem when trying to get ComputeServiceContext with jcloud. After some debugging i found that the problem was related to versions of the google guice jar.\n\nThis tests fails with the bellow exception:\n\n```\n@Test\n    public void testGetJcloudsComputeService() {\n\n        String username = \"xxx\";\n        String password = \"xxx\";\n        ComputeServiceContext jcloudsContext = ContextBuilder.newBuilder(\"aws-ec2\").credentials(username, password)\n                .modules(ImmutableSet.<Module>of(new SLF4JLoggingModule(), new JschSshClientModule()))\n                .buildView(ComputeServiceContext.class);\n\n        Assert.assertNotNull(jcloudsContext);\n\n    }\n```\n\n```\njava.lang.NoClassDefFoundError: com/google/inject/internal/util/$Preconditions\nat org.nnsoft.guice.rocoto.configuration.ConfigurationModule.configure(ConfigurationModule.java:64)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.spi.Elements.getElements(Elements.java:101)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:52)\n    at org.nnsoft.guice.rocoto.Rocoto.expandVariables(Rocoto.java:47)\n    at org.jclouds.config.BindPropertiesToExpandedValues.configure(BindPropertiesToExpandedValues.java:45)\n    at com.google.inject.AbstractModule.configure(AbstractModule.java:62)\n    at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:340)\n    at com.google.inject.spi.Elements.getElements(Elements.java:110)\n    at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:138)\n    at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:104)\n    at com.google.inject.Guice.createInjector(Guice.java:96)\n    at com.google.inject.Guice.createInjector(Guice.java:84)\n    at org.jclouds.ContextBuilder.expandProperties(ContextBuilder.java:382)\n    at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:317)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:608)\n    at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:588)\n    at com.netflix.simianarmy.client.aws.TestAWSClient.testGetJcloudsComputeService(TestAWSClient.java:136)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)\n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:691)\n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883)\n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208)\n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n    at org.testng.TestRunner.privateRun(TestRunner.java:758)\n    at org.testng.TestRunner.run(TestRunner.java:613)\n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n    at org.testng.SuiteRunner.run(SuiteRunner.java:240)\n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)\n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137)\n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1062)\n    at org.testng.TestNG.run(TestNG.java:974)\n    at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)\n    at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: java.lang.ClassNotFoundException: com.google.inject.internal.util.$Preconditions\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 48 more\n```\n\nThe dependency com.netflix.eureka:eureka-client:1.4.1 forces google guice 4.0 jar to be imported, and in 4.0 the package com/google/inject/internal/util/$Preconditions does not exists.\n\nExcluding the google.com.inject dependency from eureka in the gradle.build solves the problem and make ssh available to chaos in AWS instances:\n\n```\ncompile ('com.netflix.eureka:eureka-client:1.4.1') {\n        exclude group: 'com.google.inject'\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jantman": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237", "title": "Janitor Monkey Email Tags", "body": "Janitor Monkey's emails just include instance IDs, which are relatively opaque and are too easily overlooked by users.\n\nIt would be much more useful if the Janitor Monkey notification emails included a list of all tags and their values for each instance, or a configurable list of tags.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slevental": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229", "title": "Docker support ", "body": "I wan't to adapt simian army to be able to with docker based infrastructure, so following that have few questions:\n- are there any plans of adding docker suppor: making simianarmy be able to connect and test docker containers? \n- any concerns or pitfalls you might see with this idea.\n- Is this something that might be interesting to anyone else, so I can do PR?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/229/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harish143us": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199", "title": "Choas Monkey Setup", "body": "When I access http://localhost/:8080/simianarmy/api/v1/chaos, the URL gives me []\n\nI have setup eveything right as per my knowledge. I have a question. \n\n To get a termination you can restart a few times, it should take on average 6 tries. If a termination happens another one will not happen again today for that group. To guarantee that a termination happens, you can set the probability to \"6.0\" (ie 600% which will make sure it kills an instance on the first run).\n\nI dont understand what is this and what to be restarted. after running the Monkey. Till now I have 2 instance running 1. Choas Setup and 2. ASG (target Monkey). Any help here would be much appreciated. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuntal1684": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194", "title": "jettyRun execution stops at 75% with AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out java.net.SocketTimeoutException: connect timed out", "body": "Unable to execute jettyRun successfully due to below mentioned error:\n\n> Building 75% > :jettyRun > Starting\n> INFO  AmazonHttpClient - [AmazonHttpClient.java:448] Unable to execute HTTP request: connect timed out\n> java.net.SocketTimeoutException: connect timed out\n\nINFO  c.n.s.basic.BasicMonkeyServer - Adding Janitor Monkey.\nunavailable\njava.lang.NullPointerException\n        at com.netflix.simianarmy.MonkeyRunner.replaceMonkey(MonkeyRunner.java:140)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.addMonkeysToRun(BasicMonkeyServer.java:57)\n        at com.netflix.simianarmy.basic.BasicMonkeyServer.init(BasicMonkeyServer.java:78)\n        at javax.servlet.GenericServlet.init(GenericServlet.java:241)\n        at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n        at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:263)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:685)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1272)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:489)\n        at org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.doStart(JettyPluginWebAppContext.java:112)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n        at org.mortbay.jetty.Server.doStart(Server.java:224)\n\nSimianArmy build was successful.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shafi-codez": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181", "title": "CPU Burn Issue", "body": "below is my property set \n\nsimianarmy.chaos.burnmoney = false\n\nsimianarmy.chaos.ssh.user=<keyname>\nsimianarmy.chaos.ssh.key=<absolute pafth of key>\n\nNote this key works with manuall SSH via CMD line\n\nAm getting below exception\n\n2015-04-02 12:00:19.523 - WARN  ChaosInstance - [ChaosInstance.java:105] Error making SSH connection to instance\ncom.google.inject.CreationException: Guice creation errors:\n\n1) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.rest.HttpClient, A> cannot be used as a key; It is not fully specified.\n\n2) org.jclouds.rest.config.SyncToAsyncHttpApiProvider<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n3) org.jclouds.rest.RestContext<org.jclouds.ec2.EC2Client, A> cannot be used as a key; It is not fully specified.\n\n4) No implementation for org.jclouds.rest.HttpClient was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5) No implementation for org.jclouds.ec2.EC2Client was bound.\n  at org.jclouds.rest.config.BinderUtils.bindHttpApiProvider(BinderUtils.java:109)\n\n5 errors\n        at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:435)\n        at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:154)\n        at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:106)\n        at com.google.inject.Guice.createInjector(Guice.java:95)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:407)\n        at org.jclouds.ContextBuilder.buildInjector(ContextBuilder.java:331)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:622)\n        at org.jclouds.ContextBuilder.buildView(ContextBuilder.java:602)\n        at com.netflix.simianarmy.client.aws.AWSClient.getJcloudsComputeService(AWSClient.java:728)\n        at com.netflix.simianarmy.client.aws.AWSClient.connectSsh(AWSClient.java:746)\n        at com.netflix.simianarmy.chaos.ChaosInstance.connectSsh(ChaosInstance.java:123)\n        at com.netflix.simianarmy.chaos.ChaosInstance.canConnectSsh(ChaosInstance.java:101)\n        at com.netflix.simianarmy.chaos.ScriptChaosType.canApply(ScriptChaosType.java:61)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.pickChaosType(BasicChaosMonkey.java:141)\n        at com.netflix.simianarmy.basic.chaos.BasicChaosMonkey.doMonkeyBusiness(BasicChaosMonkey.java:121)\n        at com.netflix.simianarmy.Monkey.run(Monkey.java:134)\n        at com.netflix.simianarmy.Monkey$1.run(Monkey.java:155)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n2015-04-02 12:00:19.539 - WARN  ScriptChaosType - [ScriptChaosType.java:62] Strategy disabled because SSH credentials failed\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashac": {"issues": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180", "title": "Difficulty in performing chaos monkey burn CPU strategy", "body": "I am using Netflix Simian Army tool. I am trying to perform Chaos monkey Burn CPU strategy but i am not able to perform. I am performing burn CPU on ubuntu AWS EC2 instance. what could be the reason.The output is given below\n\nThese are the lines which i have mentioned in chaos properties configuration file simianarmy.chaos.ssh.user= ubuntu\n\nsimianarmy.chaos.ssh.key = D:\\Intern.pem\n\nsimianarmy.chaos.burncpu.enabled = true\n\n 2015-04-01 23:14:00.911 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CHAOS Monkey\n 2015-04-01 23:14:01.943 - INFO  Monkey - [Monkey.java:132] CHAOS Monkey Running ...\n 2015-04-01 23:14:01.951 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting VOLUME_TAGGING Monkey\n 2015-04-01 23:14:01.964 - INFO  AWSClient - [AWSClient.java:266] Getting all auto-scaling groups in region ap-northeast-1.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:132] VOLUME_TAGGING Monkey Running ...\n 2015-04-01 23:14:02.185 - INFO  VolumeTaggingMonkey - [VolumeTaggingMonkey.java:138] Volume tagging monkey is not enabled. You can set simianarmy.volumeTagging.enabled to true to enable it.\n 2015-04-01 23:14:02.185 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.211 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting JANITOR Monkey\n 2015-04-01 23:14:02.412 - INFO  Monkey - [Monkey.java:132] JANITOR Monkey Running ...\n 2015-04-01 23:14:02.415 - INFO  BasicJanitorMonkey - [BasicJanitorMonkey.java:218] JanitorMonkey disabled, set simianarmy.janitor.enabled=true\n 2015-04-01 23:14:02.415 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n 2015-04-01 23:14:02.440 - INFO  MonkeyRunner - [MonkeyRunner.java:56] Starting CONFORMITY Monkey\n 2015-04-01 23:14:02.643 - INFO  Monkey - [Monkey.java:132] CONFORMITY Monkey Running ...\n 2015-04-01 23:14:02.644 - INFO  BasicConformityMonkey - [BasicConformityMonkey.java:244] Conformity Monkey is disabled, set simianarmy.conformity.enabled=true\n 2015-04-01 23:14:02.651 - INFO  Monkey - [Monkey.java:138] Reporting what I did...\n\n2015-04-01 23:14:03.291 - INFO  AWSClient - [AWSClient.java:287] Got 1 auto-scaling groups in region ap-northeast-1.\n2015-04-01 23:14:05.039 - INFO  BasicChaosMonkey - [BasicChaosMonkey.java:276] Group monkey [type ASG] enabled [prob 6.0]\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:83] Group monkey [type ASG] has disabled probability: 0.0\n2015-04-01 23:14:05.051 - INFO  BasicChaosInstanceSelector - [BasicChaosInstanceSelector.java:65] Randomly selecting 1 from 1 instances, excluding null\n  2015-04-01 23:14:16.862 - INFO  Monkey - [Monkey.java:138] Reporting what I  did...\n\nAfter this line i am not getting anything\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeyrschabu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/95ceab2ca15c1600feffb4e90e58c3c4f64a610f", "message": "Merge pull request #303 from GeorgeSJWang/master\n\nsynchronize with double-checked locking in AWSClient"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/f4047650f2b654bb9ef33f2408212915e410e835", "message": "Merge pull request #304 from jeyrschabu/dryrunjanitors\n\nAdding support for a dry run functionality when in Leashed Mode"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/344f211ef94b78e91f6a070fa92e3c55b9c77cbc", "message": "Adding support for a dry run functionality when in Leashed Mode\n\n- Added an interface to a `DryRunnalble` Janitor\n- Allowing Janitor in Leashed Mode to mark resources\n- Marking a resource in Leashed mode doesn't generate an event\n- A dry run cleanup should not actually cleanup the resource\n- Added additional logging"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/ed86b3e8b9dbb20333033ca287802e30051201da", "message": "Merge pull request #298 from jeyrschabu/master\n\nAdding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/89f794971348d8a5a757e8e3931d7f3378b60c5a", "message": "Adding a resourceId to the event fields"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9d8c43a08bd9e5b4dc23a8c961b0a5eaf14bb671", "message": "Merge pull request #297 from robfletcher/master\n\nEnsure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/dedfa28726e1825b18d29b4e8836886fda0710be", "message": "Merge pull request #295 from jeyrschabu/update_asg_verbage_termination_reason\n\nUpdating termination description/reason for suspended ASG"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e9de6d19b04463a8536dcb3daddc05d81d9a538a", "message": "Updating termination description/reason for suspended ASG\n\n- Updated verbiage on ASG termination reason"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5bbbc5e035a8c1aba9eadf8e7d11ee60e60f746d", "message": "Merge pull request #294 from jeyrschabu/record_event_after_resource_saved\n\nSaving resource before creating event"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/c04df86675ce795c91e6845df1efe9263b2b9c27", "message": "Saving resource before creating event"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeSJWang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/5c4501bbd44ab8b4d03dc5e53beed711bbaab0e9", "message": "synchronize with double-checked locking"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robfletcher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/e2d95e581a8bd75faae81f166daa4297add747c5", "message": "Merge pull request #299 from robfletcher/master\n\nflip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/9bcc50ccb36849316cbad09287d6bef93ba7c80d", "message": "flip Travis to trusty rather than Docker"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/673479265536f5ccf178f9d6311962ee6709ef0d", "message": "Ensure all resource fields are added to opt in/out events"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/50c424332ef2c1058fce7c3f5703d751e147a51e", "message": "Merge pull request #286 from robfletcher/master\n\nPrevent bad reads from Edda marking ELBs as failing cross-zone balancing"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/04c73cc804e5e78205f0227ec7db81a3f07d639f", "message": "Prevent bad reads from Edda marking ELBs as failing cross-zone balancing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robzienert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/107bf2024e257f5a10f8180bb2cfa01221dc37d5", "message": "Merge pull request #284 from robzienert/sleep-elb-janitor\n\nSleep ELB janitor after each cleanup"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/4444852ebad0ababe3c50a8dc656a8241519de64", "message": "Sleep ELB janitor after each cleanup"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveXiong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/fa5a6de40284167c27bfe011079f2906ea0c7a02", "message": "fix the wrong argument for query events from RDS"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/commits/d9131f4ce5912becaa6144ae6ec631214c0b0f1d", "message": "Point to latest version of Chaos Monkey"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwizzn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/307", "title": "Allows overriding the SimpleDB region", "body": "Not every AWS region supports SimpleDB, e.g. eu-central-1. The result is that `SimpleDBRecorder`, `SimpleDBConformityClusterTracker` and `SimpleDBJanitorResourceTracker` fail with HTTP errors while connecting to SimpleDB.\r\n\r\nThis PR adds support for an override configuration that can be enabled when using these regions.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "savagegus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/293", "title": "Fixes #237 Janitor Monkey Email Tags", "body": "I took the approach of displaying the resource, link to the aws console, and termination reason (which will list missing tags). It's not pretty but renders fine in gmail and is quite a bit more usable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rosswilson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/288", "title": "Correcting FillDisk comment about file size", "body": "Just a minor comment fix: `65536MB` is `64GB`, not `65GB`.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coryb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7015083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351", "body": "I can set the org.slf4j dep as runtime, it wasn't clear to me where that should go since I didnt want to force all slf4j users to include the log4j dep.\n\nI think the javax.servlet dep has to remain providedCompile since I believe it is only shipped with jetty/tomcat etc.  Changing it to runtime causes the compile to fail.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7053351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260", "body": "Good suggestions.  I will look into moving the BasicChaosCrawler into the aws package and abstracting the AWS specific exceptions in BasicChaosMonkey.  \n\nTo make it work with other technologies I think you just need to implement the ChaosCrawler and CloudClient interfaces, then create a BasicContext that use instances of your implementation.\n\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7378260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088", "body": "I assume you are talking about the magic number 2.2250738585072012e-308 causing the jvm to hang?  This logic is used to read doubles out of a config file, so for someone to exploit they would need write access to the config and the ability to restart the jvm.  There don't seem to be many viable alternatives to parseDouble, so the easiest fix is probably to just skip parsing any string containing this sequence \"22250738585072012\" (after removing any period).\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110", "body": "I am not sure why you think the object does not have equals implemented.  It is a String, which definitely has equals().\n\nFor me 73 is:\nif (pair.getKey().equals(\"since\")) {\n\npair is defined above on line 69 as: for (Map.Entry&lt;String, List&lt;String&gt;&gt; pair : uriInfo.getQueryParameters().entrySet()) {\n\nso pair.getKey() has to be a String.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7663110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372", "body": "when you get a chance could you update the wiki for the new options:\nhttps://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612", "body": "Looks good, thank you!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7937612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787", "body": "Looks good.  Please update the Config wiki when you get a chance: https://github.com/Netflix/SimianArmy/wiki/Configuration\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7956787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658", "body": "Thanks Ryan!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/9186658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182", "body": "Hi Ingmar,  I will try to get this reviewed this week.  It is a lot of code :)\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10302182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539", "body": "Hey, I noticed that github says \"This pull request cannot be automatically merged.\"  I think you need to merge in \"upstream\" changes that we have made to the main repo.  Michael on the team here has made some change, added some configuration options and cleaned up the code a bit.  Hopefully the merge will not be hard.  To merge in upstream changes I think this is what is required:\n\n git remote add upstream https://github.com/Netflix/SimianArmy.git \n git fetch upstream\n git merge upstream/master\n _fix conflicts_\n git commit\n git push\n\nmore details here:\nhttps://help.github.com/articles/fork-a-repo\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769", "body": "Hi Ingmar,\n\nSorry for the delay, I have not had a lot of time lately and there was a holiday here to slow things down further.\n\nOverall the patch looks really good.\n\nThere are some very minor issues.\n- The gradle build now gives:\n  \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereServiceConnection.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereClient.java \n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereGroups.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/VSphereContext.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/TerminationStrategy.java\n  Missing header in: src/main/java/com/netflix/simianarmy/client/vsphere/PropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestPropertyBasedTerminationStrategy.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereServiceConnection.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereGroups.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSphereContext.java\n  Missing header in: src/test/java/com/netflix/simianarmy/client/vsphere/TestVSpehereClient.java\n\nIt is complaining about the license header location.  The gradle plugin is a bit dumb so it does not see your license header when you place it after the import statements.  To fix this please move the license header to the top of the files.\n- Please revert the src/main/resources/simianarmy.properties changes. I think you changed these values for testing, but I prefer to leave the defaults as they were.  Generally when I need to change the properties file for testing I run \"git update-index --assume-unchanged <file>\" to make git ignore my local changes so they don't get pushed upstream.\n- client.properties  - The client properties makes sense, but I guess I dont like the \"client.\" property prefix, it seems a bit too generic.  I would suggest making all the properties \"simianarmy.client.....\"  Also since you refactored the aws code, I  suggest changing the \"simianarmy.aws....\" properties to \n  \"simianarmy.client.aws...\" and move those defaults from simianarmy.properties to client.properties.  I assume you didn't make that change to preserve backwards compatibility, but I think it makes sense to make that change.\n\nOtherwise, it looks great.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10864769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631", "body": "Looks good.  Thanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10980631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398", "body": "It is all merged in now.  I think the license plugin has a bug in that it seems to require the exact Copyright line to match.  I gave up and just disabled the license plugin for now.\n\nThanks!\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11390398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908", "body": "Thanks for setting this up, looks good.\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11773908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351", "body": "This should probably be:\n\n``` java\nif( chaosType.isEnabled() && chaosType.canApply(cloudClient, instanceId)) { \n   ...\n}\n```\n\notherwise we will see warnings like \"Not an AWSClient, can't use security groups\" even when the type is disabled.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649", "body": "This chaos type will only work if the instance is in vpc.  It seems like we should check to see if the instanceId has a vpcId associated with it, otherwise return false.  I am not sure how expensive it will be to call describeInstances(instanceId) on this, perhaps not too bad.  \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6615649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039", "body": "you could probably factor out the ssh connection logic from apply(...) and use it here, then immediately disconnect.  Because all the script chaos types would need this logic, it seems like we would need to cache the check results per instances so we dont have to connect to the instance once for each script chaos type\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664", "body": "this only burns io on the root disk, what about the ephemeral disks or ebs mounts.  perhaps randomly pick from any mountpoint:\n\n``` bash\ntmp=$(mktemp)\ndf -hl -x tmpfs | awk '/\\//{print $6}' > $tmp\nmount=$(sed -n $((RANDOM%$(wc -l < $tmp)+1))p $tmp)\nrm $tmp\n```\n\nthen the dd can b on of=$mount/burn\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736", "body": "there is more than one region for s3 as well:\n\n``` bash\necho \"127.0.0.1 s3.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-us-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-eu-west-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-southeast-2.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-ap-northeast-1.amazonaws.com\" >> /etc/hosts\necho \"127.0.0.1 s3-sa-east-1.amazonaws.com\" >> /etc/hosts\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846", "body": "similar to burnio it might be interesting to randomize which mount is filled up.\n\nYou can also get a better guess than 65g with:\n\n``` bash\nnohup dd if=/dev/urandom of=/burn bs=1M count=$(df -ml /burn  | awk '/\\//{print $2}') iflag=fullblock &\n```\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984", "body": "I think I would recommend all the new types to be default false, so that when people upgrade they will not be surprised by these changes.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6616984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293", "body": "Yeah, good point about the EBS charges.  Would be nice if we could tell the difference between ebs volumes and the ephemeral disks.  However for ebs root volumes wouldnt your current script still increase charges?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315", "body": "Useful document: http://docs.aws.amazon.com/general/latest/gr/rande.html\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359", "body": "I suppose to minimize charges we could limit these tests to 30m or 1hr. So if they go unnoticed it wont end up costing too much.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241", "body": "please comment out this line, we don't want to accidentally start spamming the people at bar.com. The code should work with a missing property or null value, so I think just leaving it commented out in the properties file will give users the idea.\n\nThanks\n-Cory\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/7935241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gorzell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991", "body": "Your first comment is my main concern, I am less worried about trying to run one monkey that hits all regions.  Mostly I want to avoid forcing people to have to store all of the data in 1 SDB table that has to be in US East.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7074991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "michaelnflx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568", "body": "The wiki is updated.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/7775568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680", "body": "Cory is OOO till the end of this month. I can take a look at it when I get time later this week or early next week.\n\nThanks,\nMichael\n\nFrom: Michael Neale <notifications@github.com<mailto:notifications@github.com>>\nReply-To: Netflix/SimianArmy <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Monday, January 7, 2013 6:33 PM\nTo: Netflix/SimianArmy <SimianArmy@noreply.github.com<mailto:SimianArmy@noreply.github.com>>\nSubject: Re: [SimianArmy] build status indicator (#22)\n\nCory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine.\n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Netflix/SimianArmy/pull/22#issuecomment-11981974.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11986680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853", "body": "Hi DrGranit,\n\nI think the change is pretty good. My comments are about that we can remove those deprecated methods. We are still at the early stage of this project so removing these methods should not cause many backward-compatibility issues.\n\nAlso, please add Javadoc comments to the constructor of AWSClient to explain how the credentials are obtained there.\n\nAnd please also add comments in client.properties to explain that if no AWS credentials are set there, how the monkeys will obtain the credentials at runtime.\n\nThanks for contributing!\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12111853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420", "body": "Hi DrGranit,\n\nLooks great! Please update the wiki with an example. Let me know if you don't have permissions for the wiki.\n\nThanks,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12153420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578", "body": "You can remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588", "body": "You can remove this method\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646", "body": "Remove the duplicate 'credentials'\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668", "body": "Remove this constructor\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678", "body": "Remove this method.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705", "body": "Please add comments to describe how the credentials are obtained.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/2608705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853", "body": "Can you change '!= null' to StringUtils.notBlank()? This way we can prevent that accidentally setting the global email to empty string stops emails to be sent.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877", "body": "Please add a log before returning the global email to indicate that the owner email is from the global property.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5069877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014", "body": "I don't think this is the a correct logic. If a global email is set then, termination email is going to be sent no matter it is enabled or not. I think we should first check whether termination email is enabled and then try to call getOwnerEmail to send the notification.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5070014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023", "body": "autoScalingGroups should be soloInstances\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/5231023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "IngmarKrusch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453", "body": "Hi Cory\n\ncool, looking forward to it.\n\nYep, lot of UnitTests and functional code. I tried to limit the changeset, but introducing a new client turned out to be no small feat :)\n\nAgain, if you have any questions, don't hesitate to ask!\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10334453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426", "body": "Oh, I see. Sorry about that, will work on it some more and provide a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10521426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712", "body": "Hi\n\nI incorporated all your suggestions. The new feature from upstream is still not implemented (selecting ASG by name) but I will add it later.\nRegarding the license header, I fixed the location but it also checks that the copyright is by netflix which is in this case, erm, maybe you can fix the check? :)\n\nBest\nIngmar\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11378712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "quidryan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729", "body": "I might suggest git rebase upstream/master instead of git merge upstream/master to get a clean pull request.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/10341729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "michaelneale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974", "body": "Cory - if you get a chance - are you able to login to buildhive.cloudbees.com and enable the repo for SimianArmy - you can then use the build status URL referring to your (more up todate) repo - better than mine. \n\n(I ran the gradle \"test\" goal in the buildhive config page). If you need help - let me know, I can tweak the settings once you have enabled your repo.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/11981974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adriancole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990", "body": "sorry, can you explain?  It appears they are still taking enrollments http://aws.amazon.com/simpledb/\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12054990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mezzle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143", "body": "For some reason, I have it in my head that DynamoDB replaced SimpleDB?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahmetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232", "body": "Haha. Long live simpleDB. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12058232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447", "body": "Typo!\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481", "body": "Both of the constructor bodies are almost identical, why not call one from another?\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529", "body": "This is NOT right if the framework really runs this way. (see [Frequency on Wikipedia](http://en.wikipedia.org/wiki/Frequency)). If frequency is 2 then it means the monkey should run **twice every hour**.\n\nWhat you are talking about is called period (`T`), which means the time interval between runs is 2 hours. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769", "body": "All these **OrElse** statements can be written in one line:\n\n`return props.getProperty(property_key, default)`. Your null check is redundant. \n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824", "body": "I noticed three typos in this line.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/2195824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DrGranit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700", "body": "Hello Michael,\n\nI made the changes as discussed, thanks for taking the time to look through this. I would update the Wiki, perhaps with an example policy and a mention of the ability to use instance roles, once the pull is completed.\n\nkind regards\nDrGranit\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/12139700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jiminoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632", "body": "AWS internally no longer \"supports\" SimpleDB but won't shut it down anytime soon. So don't expect any features or lots of support but it should still work for a bit longer\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/issues/comments/14145632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milindcq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275", "body": "This fix hangs on following string input.\n\n\"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\"\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17113275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247", "body": "We have some of these long strings as user ids in our system and I've noticed that it hangs on such strings. Not sure if problem with regex pattern or Java regex library itself.\n\n`public class RegTest {\n\n```\nprivate static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+\\\\.]+(.[_A-Za-z0-9-]+)*@\"\n                + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n\npublic static void main(String[] args) {\n\n    Pattern emailPattern = Pattern.compile(EMAIL_PATTERN);\n    String email = \"ba1311ca84f8c8f8ba17b6c55b9a7a81797b4c0b70cb17079e5921505c2a6591\";\n\n    if (!emailPattern.matcher(email).matches()) {\n        System.out.print(String.format(\"Invalid email address: %s\", email));\n    }   \n}\n```\n\n}`\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/comments/17124247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "justinsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020", "body": "Agreed 100% - I had intended that; I think this change snuck in from when I was testing...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026", "body": "Yes agreed.  Much nicer than the way I was doing it (relying on canApply checking cleanly)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036", "body": "Will do - this only gets called when the instance has been chosen for termination, so anything that isn't outrageously expensive should be OK.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069", "body": "Nice idea ... I'll have a play with this.  The one downside is that we don't want instances opting out of the chaos monkey simply by blocking SSH :-)  Maybe I'l just log with relatively high severity if the SSH key is configured but we can't log in via SSH.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103", "body": "Good script-fu :-)  I can add that change.  EBS activity will cost money though, which is something I wanted to avoid...\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125", "body": "Guess who just learned there's more than one S3 endpoint!  I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145", "body": "Cool.... yes, if it's OK to do things that cost money, then I can't assume 65 Gig should be enough.\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6617145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405", "body": "Good point on ebs root volumes.  I could add another configuration flag so that we won't apply the burnio strategy if the root disk is on EBS.   This would probably have to be done chaos-monkey side, but it would be a nice justification for going with a separate class for each script-based monkey (along with Javadocs, consistency etc) \n\nI might call the option \"burnMoney\" :-)\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/6618405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "radonsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495", "body": "Please remove this unused @param\n", "reactions": {"url": "https://api.github.com/repos/Netflix/SimianArmy/pulls/comments/10059495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}