{"_default": {"1": {"Therzok": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6561", "title": "Flaky MonoDevelop.PackageManagement test", "body": "## Steps to Reproduce\r\n\r\n1. https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1293642\r\n2. Happened on another PR too\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6530", "title": "Mono's MSBuild is slow on Mac due to constant IO", "body": "## Steps to Reproduce\r\n\r\n1. See https://github.com/Microsoft/msbuild/blob/30b19e9f2cefb6d9675d660c8bb8b317c06ff9a1/src/Shared/NativeMethodsShared.cs#L553-L556\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nIO is done to check whether the platform is OS X.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nIO should be done at most once, or some other detection mechanism should be used. (pinvoke libc and get OS name)\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.168 (pull-request-6404/6f02ba66ba8 Thu Jan  4 16:11:23 EST 2018)\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\nProbably should be backported to all releases\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eatdrinksleepcode": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6560", "title": "Incorrect behavior for Take/Skip/Concat combination", "body": "## Steps to Reproduce\r\n\r\n```\r\nvar inputs = new [] { \"left\", \"right\" };\r\nvar outputs = inputs.Take(1)\r\n                    .Concat(Enumerable.Repeat((object)\"middle\", 1))\r\n                    .Concat(inputs.Skip(1)).ToArray();\r\nforeach(var item in outputs) {\r\n\tConsole.WriteLine(item);\r\n}\r\n```\r\n## Current Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nleft\r\n```\r\n\r\n## Expected Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nright\r\n```\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.4.1.7\r\n\r\n## Notes\r\n\r\n_This is a regression_: the same code works correctly under Mono 4.8.1.\r\n\r\nNote the cast to ```object``` inside the ```Enumerable.Repeat```. This is necessary to reproduce the bug; without the cast, the code works correctly.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6555", "title": "Process.WaitForExit() gets slower the larger your open file limit (ulimit -n) is on Linux", "body": "## Steps to Reproduce\r\n\r\n1. Compile this: `csc test.cs`:\r\n\r\n```csharp\r\npublic static class Program {\r\n    public static int Main () {\r\n        for (int i = 0; i < 100; i++) {\r\n            var p = System.Diagnostics.Process.Start (\"echo\", \"hello\");\r\n            if (!p.WaitForExit (10000)) return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```\r\n2. `$ (ulimit -n 1000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m0.402s\r\nuser\t0m0.028s\r\nsys\t0m0.184s\r\n```\r\n3. `$ (ulimit -n 100000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m1.277s\r\nuser\t0m0.380s\r\nsys\t0m0.592s\r\n```\r\n4. `$ (ulimit -n 1000000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m8.758s\r\nuser\t0m3.424s\r\nsys\t0m4.424s\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt gets slower the higher your ulimit -n is.\r\n\r\nNote: you may need to change your system settings (`/etc/security/limits.conf`) to allow higher limits.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNot getting slower.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04/16.04\r\n[ ] Windows\r\n\r\n**Version Used**: master, 5.8.088 and 4.2.1 (so either a very old bug or something outside our control)\r\n\r\nThis was the root cause behind an issue (https://github.com/mono/mono/pull/6537) we had on Jenkins because the Azure Linux VM builders had ulimit -n set to 1048576.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6548", "title": "Frequent test failures of ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test", "body": "## Steps to Reproduce\r\n\r\n1. Compile Mono on Linux i386\r\n2. `make -C mcs/class/corlib run-xunit-test`\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nFrequent test failure in System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test: https://github.com/mono/corefx/blob/dfd98e7113a99708f4c9ed063a8c481f838aa8d3/src/System.Threading/tests/ThreadLocalTests.cs#L192-L225\r\n\r\nThis seems to only occur on i386 and on Linux: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=ubuntu-1404-i386/\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNo test failure.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04\r\n[ ] Windows\r\n\r\n**Version Used**: master\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\n\r\n```\r\nAssert.False() Failure\r\nExpected: False\r\nActual:   True\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\n  at System.Threading.Tests.ThreadLocalTests+ThreadLocalWeakReferenceTest.Run () [0x0001c] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:216 \r\n  at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference () [0x00005] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:224 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6523", "title": "Remove obsolete assemblies in next major version bump", "body": "Tracking issue for assemblies to remove once we can do another breaking change, i.e. when we do Mono 6.0.\r\n\r\n- [ ] IBM.Data.DB2.dll, replaced by NuGet package\r\n- [ ] ICSharpCode.SharpZipLib.dll, replaced by NuGet package, fixes problems like  https://bugzilla.xamarin.com/show_bug.cgi?id=59304\r\n- [ ] Compat.ICSharpCode.SharpZipLib.dll (old copy of above)\r\n- [ ] Commons.Xml.Relaxng.dll, replaced by NuGet package\r\n- [ ] Mono.C5.dll, replaced by NuGet package\r\n- [ ] RabbitMQ.Client.dll, replaced by NuGet package\r\n- Very old copy of Rx.NET, replaced by NuGet packages\r\n  - [ ] System.Reactive.Core.dll\r\n  - [ ] System.Reactive.Debugger.dll\r\n  - [ ] System.Reactive.Experimental.dll\r\n  - [ ] System.Reactive.Interfaces.dll\r\n  - [ ] System.Reactive.Linq.dll\r\n  - [ ] System.Reactive.Observable.Aliases.dll\r\n  - [ ] System.Reactive.PlatformServices.dll\r\n  - [ ] System.Reactive.Providers.dll\r\n  - [ ] System.Reactive.Runtime.Remoting.dll\r\n  - [ ] System.Reactive.Windows.Forms.dll\r\n  - [ ] System.Reactive.Windows.Threading.dll\r\n- Very old copy of ASP.NET MVC framework, replaced by NuGet packages\r\n  - [ ] System.Web.Http.dll\r\n  - [ ] System.Web.Http.SelfHost.dll\r\n  - [ ] System.Web.Http.WebHost.dll\r\n  - [ ] System.Web.Mvc.dll\r\n  - [ ] System.Web.Razor.dll\r\n  - [ ] System.Web.WebPages.Deployment.dll\r\n  - [ ] System.Web.WebPages.dll\r\n  - [ ] System.Web.WebPages.Razor.dll\r\n  - [ ] WebMatrix.Data.dll\r\n  - [ ] Microsoft.Web.Infrastructure.dll\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6513", "title": "SocketTest.AcceptBlockingStatus is flaky on ARM", "body": "It failed 47 times in the last two weeks on the armel, armhf and arm64 master lanes with this stack trace:\r\n\r\n```\r\nMESSAGE:\r\nSystem.Net.Sockets.SocketException : Connection timed out\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Sockets.Socket.Connect (System.Net.EndPoint remoteEP) [0x000b0] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/System.Net.Sockets/Socket.cs:886 \r\n  at MonoTests.System.Net.Sockets.SocketTest.BlockingConnect (System.Boolean block, System.Int32 port) [0x00033] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:136 \r\n  at MonoTests.System.Net.Sockets.SocketTest.AcceptBlockingStatus () [0x00006] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:171 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/0d9c3dfff432f4a74f2f1588d9ec50fccc8d7ea7", "message": "[tests] Bump timeouts in process-stress-?.exe runtime tests (#6515)\n\n* [test-runner] Record test duration in NUnit xml\r\n\r\nThis allows us to keep track of the time on Jenkins.\r\n\r\nAlso fix issue where we were recording .Seconds of a TimeSpan instead of .TotalSeconds.\r\n\r\n* [tests] Bump timeouts in process-stress-?.exe runtime tests\r\n\r\nWe're seeing these fail sometimes on Linux Azure VMs, let's try\r\nif bumping the timeouts helps."}, {"url": "https://api.github.com/repos/mono/mono/commits/2a03be316d4e762168dd602a493d94944ccc9446", "message": "[class] Add Obsolete message to ICSharpCode.SharpZipLib.dll (#6511)\n\n* [class] Add Obsolete message to ICSharpCode.SharpZipLib.dll\r\n\r\nUsers should use the nuget package instead, we'll remove the assembly in Mono 6.0\r\n\r\nDon't install it into the 4.7.1 reference assembly directory anymore.\r\n\r\n* Bump API snapshot submodule"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430", "body": "nit: in most templates I've seen the current/problematic behavior comes before the expected one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553", "body": "I'd rather instruct them to specifically run `mono --version` so we get full commit hash etc. which is included there.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037", "body": "not sure we need to mention both backtrace and stacktrace, they're used pretty much interchangeably anyway.\r\n\r\nstacktrace seems to be more commonly known from what I've seen.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145", "body": "`macOS`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052", "body": "don't you get this: \r\n![image](https://user-images.githubusercontent.com/1376924/33861614-14d2eef2-deb5-11e7-81a3-3c8a53f87857.png) ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598", "body": "What about we just remove this and the \"expected behavior\" description below? It doesn't add anything which isn't clear from the section header anyway and would make the template simpler.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735", "body": "maybe make it \"repro code/solution\" to be clear", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328", "body": "use `git://` here like the other submodules\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595", "body": "This must use `git://` instead of `git@` otherwise it won't be accessible to people without push access to that repo.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942", "body": "This must be `git://` as `git@` requires authentication.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928", "body": "typo: `borinssl`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077", "body": "`NuGet.BuildTasks` should be `nuget-buildtasks`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472", "body": "this no longer exists", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665", "body": "this is called `/external/binary-reference-assemblies` now", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543", "body": "should we keep this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861", "body": "while you're at it you could move the CODEOWNERS to the .github folder as well. And maybe CONTRIBUTING.md too?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757", "body": "add the same in the CROSS_COMPILING section above too to make it consistent.\n\nActually, I'm wondering if we still need this separation when both if branches are the same anyway?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexrp": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6546", "title": "Miscellaneous coverage profiler cleanup tasks", "body": "Opening this as a sort of meta-bug to keep track of some relatively small issues with the coverage profiler that should be addressed over time.\r\n\r\n- [ ] When we're comfortable bumping the output format version, it would be nice to change the overall structure to be more easily digestible for readers. For example, all `class` elements should be under an `assembly` element, all `method` elements should be under a `class` element, etc.\r\n- [ ] Type names (and signatures in general) should be fully qualified in the output, and not use C# names like `int`, `long`, etc.\r\n- [ ] The way we output generic definitions and generic instantiations needs to be cleaned up and made consistent. For example, if a program has a method `Foo<T> ()` and executes the instantiation `Foo<int> ()`, the output file will mention `Foo<int> ()` with all the correct execution counts, but it will also mention the uninstantiated `Foo<T> ()` with all-zero counts, as if it was uncovered. We should only mention the generic definition (with all the counts from all instantiations merged), not every single instantiation.\r\n- [ ] The data structures (or rather, lack thereof) in the profiler can be simplified. There's no particular reason we need to use a bunch of hash tables to map everything back and forth the way we do. The code would be much easier to read and maintain if we just had some proper structures for representing loaded assemblies, classes, and methods.\r\n- [ ] We should resolve method signatures and such ahead of time instead of doing it when we're dumping coverage data at shutdown. Resolving method signatures during shutdown can cause assemblies to be loaded, and metadata from those will be missing in the output as a result.\r\n- [ ] There's some commented out code relating to zipping of the output. This should either be implemented or removed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6544", "title": "[profiler] Write out all uncovered classes/methods in a loaded image.", "body": "Fixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60225", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958", "body": "Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974", "body": "Minor style issue: Spaces here instead of tabs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870", "body": "s/mono-lite/monolite/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873", "body": "This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexander-vi": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6525", "title": "[Linux] [mipsel] Crash on any exception in C# code", "body": "## Code to reproduce\r\n```C#\r\nusing System;\r\n\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                  throw new ArgumentNullException();\r\n            }\r\n            catch\r\n            {\r\n                Console.WriteLine(\"Error!\");\r\n                Environment.Exit(1);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\nCrash with the following stack:\r\n```\r\n$ mono test\r\nStacktrace:\r\n\r\n\r\nNative stacktrace:\r\n\r\n\tmono() [0x4c7780]\r\n\r\nDebug info from gdb:\r\n\r\n[New LWP 17157]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/mipsel-linux-gnu/libthread_db.so.1\".\r\n0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n  Id   Target Id         Frame \r\n  2    Thread 0x76d43460 (LWP 17157) \"mono\" 0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n* 1    Thread 0x775618b0 (LWP 17156) \"mono\" 0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n\r\nThread 2 (Thread 0x76d43460 (LWP 17157)):\r\n#0  0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x7744432c in sem_wait@@GLIBC_2.2 () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#2  0x00688164 in mono_sem_wait ()\r\nwarning: GDB can't find the start of the function at 0x5d84b2.\r\n\r\n    GDB is unable to find the start of the function at 0x5d84b2\r\nand thus can't determine the size of that function's stack frame.\r\nThis means that GDB may be unable to access that stack frame, or\r\nthe frames below it.\r\n    This problem is most likely caused by an invalid program counter or\r\nstack pointer.\r\n    However, if you think GDB should simply search farther back\r\nfrom 0x5d84b2 for code which looks like the beginning of a\r\nfunction, you can increase the range of the search using the `set\r\nheuristic-fence-post' command.\r\n#3  0x005d84b4 in ?? ()\r\n\r\nThread 1 (Thread 0x775618b0 (LWP 17156)):\r\nwarning: GDB can't find the start of the function at 0x4c785a.\r\n#0  0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x004c785c in ?? ()\r\n\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n```\r\n\r\nPlease note that other C# features looks like work fine. I've managed to compile and launch several other examples.\r\n\r\n\r\n\r\n## Expected Behavior\r\nMessage \"Error!\" is printed.\r\n\r\n### System information\r\nMono is installed from packages as \"mono-devel\".\r\n```\r\n$ mono --version\r\nMono JIT compiler version 3.2.8 (Debian 3.2.8+dfsg-10)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       normal\r\n\tNotifications: epoll\r\n\tArchitecture:  mips\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tGC:            sgen\r\n```\r\n\r\n```\r\n$ cat /proc/cpuinfo \r\nsystem type\t\t: Baikal-T Generic SoC\r\nmachine\t\t\t: T-Platforms mITX Board\r\nprocessor\t\t: 0\r\ncpu model\t\t: MIPS P5600 V3.0  FPU V2.0\r\nBogoMIPS\t\t: 597.60\r\nwait instruction\t: yes\r\nmicrosecond timers\t: yes\r\ntlb_entries\t\t: 576\r\nextra interrupt vector\t: yes\r\nhardware watchpoint\t: yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]\r\nisa\t\t\t: mips1 mips2 mips32r1 mips32r2\r\nASEs implemented\t: vz msa eva\r\nshadow register sets\t: 1\r\nkscratch registers\t: 3\r\npackage\t\t\t: 0\r\ncore\t\t\t: 0\r\nVCED exceptions\t\t: not available\r\nVCEI exceptions\t\t: not available\r\n```\r\n\r\n```\r\n$ uname -a\r\nLinux tclient 3.19.12.23-mitx #1 SMP Thu Nov 2 19:47:08 UTC 2017 mips GNU/Linux\r\n```\r\n\r\n```\r\n$ cat /etc/*-release\r\nPRETTY_NAME=\"Debian GNU/Linux 8 (jessie)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"8\"\r\nVERSION=\"8 (jessie)\"\r\nID=debian\r\nHOME_URL=\"http://www.debian.org/\"\r\nSUPPORT_URL=\"http://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n```\r\n\r\nI know that this version of Mono is a bit old, but maybe you can provide me some workaround or this issue is present in the current version. Hope this bugreport will be useful for you.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6519", "title": "System.Data tests failures on watch", "body": "## Steps to Reproduce\r\n\r\n1. Get 2017-12 XI monthly integration\r\n2. \r\n3. \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nFaling tests\r\n```\r\n[FAIL] DbDataAdapterTest.AddToBatch : System.NotSupportedException : Specified method is not supported. \r\n[FAIL] SqlCommandBuilderTest.CatalogLocation_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogLocationTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOption_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOptionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_PrefixSuffix_NoMatch : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_UnquotedIdentifier_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull1 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull2 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull3 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull4 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull5 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull6 : An unexpected exception type was thrown \r\n[FAIL] SqlCommandTest.Clone : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandText : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout_Value_Negative : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandType_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ParameterCollectionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ResetCommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.BeginTransaction_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ChangeDatabase_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ClearPool_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_ConnectTimeout_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Database_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_DataSource_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PacketSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Password_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PersistSecurityInfo_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserID_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2_ConnectionString_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.CreateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Empty : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Whitespace : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ServerVersion_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectConnection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.DeleteCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.InsertCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.SelectCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.UpdateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.CompareInfo : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DBNull : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor7 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Boolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Byte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_ByteArray : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Decimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Double : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Enum : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Guid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Object : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Single : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_String : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.LocaleId : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterName : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterNullTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetSqlDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumn : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumnNullMapping : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBinary : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBoolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlByte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDecimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDouble : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlGuid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlMoney : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlSingle : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlXml : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlValue : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Value : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.XmlSchemaTest : System.PlatformNotSupportedException was expected \r\nTests run: 1887 Passed: 1755 Inconclusive: 0 Failed: 132 Ignored: 163\r\n```\r\n\r\n## Expected Behavior\r\n\r\nNo failures\r\n\r\n### On which platforms did you notice this\r\n\r\n[ x] watchOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**: 2017-12 branch\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c282af6df5ffbc7fc4ec2ab857299c8d455f9d72", "message": "[mcs] Implements C# 7.0 discards"}, {"url": "https://api.github.com/repos/mono/mono/commits/370105c5e0a741b187c5040c137ae0b44e3a7bc4", "message": "[profiler] Don't double escape special characters. (#6534)\n\nThe output of parse_generic_type_names is processed by escape_string_for_xml and\r\nwe were double escaping `&` character"}, {"url": "https://api.github.com/repos/mono/mono/commits/00934efe152db8b3d90b527867c8dd75ccbfacfb", "message": "[corlib] Fixes StoppedThreadsThrowThreadStateException test build"}, {"url": "https://api.github.com/repos/mono/mono/commits/46bb11eb337dd5cf951796265c00d1adf4b43d78", "message": "[mcs] C# 7.2 non-trailing named arguments"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6552", "title": "Bump linker", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6551", "title": "Bump linker", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6476", "title": "Weak field support backport", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6395", "title": "Bump corefx", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/128022", "body": "It should be bellow licence text\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137435", "body": "you should fix moonlight profile to use bootstrap gmcs from basic profile and not 2.0\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057", "body": "Made small tweak but `mono --version` is useful only for people running Mono directly. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027", "body": "My worry is that then people would just skip the section", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555", "body": "Should use git::// protocol", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687", "body": "How big is the submodule, it's still not accessible for me", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904", "body": "I didn't want to move that one as I don't know if I need to change the paths and secondly, CODEOWNERS seems to be useful on its own", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607", "body": "I don't know what's the purpose of that, seems like what should be on mono github wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rodrmoya": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6512", "title": "Missing counters/perf counters in Mono 5.8 with new profiler arguments", "body": "## Steps to Reproduce\r\n\r\n1. Run any desktop mono app with: `/Library/Frameworks/Mono.framework/Versions/Current/bin/mono --gc=sgen --profile=log:heapshot=ondemand,nolegacy,jit,gc,nogcalloc,gcroot,gcmove,counter,output=\"/var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd\" app.exe`\r\n2. Let it run for a few seconds and stop\r\n3. `mprof-report /var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd` shows no counters\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nUsing the old runtime arguments (`alloc,heapshot=ondemand,counters`) produces a MLPD with counters on it.\r\n\r\n## Expected Behavior\r\n\r\nCounters should be emitted in the MLPD file\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n```$ mono --version\r\nMono JIT compiler version 5.8.0.103 (2017-10/1359c52fc6e Wed Dec 20 10:52:54 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BrzVlad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/4490aa5112e6fa9c64ed1db222b880fbce31e176", "message": "[runtime] Fix jit info leak when having aot images loaded\n\nWhen we had a jit info table for aot images loaded in the domain, we would queue jit infos for freeing at domain unload time. This means leaking during entire application life.\n\nAdd comment for jit info freeing when having multiple tables.\n\nFixes #60986."}, {"url": "https://api.github.com/repos/mono/mono/commits/f162931e25c4cc1ad3d1a21117bb085089f168cd", "message": "[mini] Fix seq point info leak (#6522)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdecb851ff6bbf2d0602104d4db0df86b0c4b7ba", "message": "[sgen] Fix overflow on large arrays (#6542)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6559", "title": "[interp] Interp fixes", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a717f377f0b773ffa99dc711ab4e687b50be991a", "message": "Fix bug 60848: Incorrect unicode custom attribute decoding (#6481)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radekdoulik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9a183f2c833a54e10fdcb09a3300d86e89ee85ae", "message": "[Tests] Do not assume order of returned interfaces\n\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\ninterfaces returned from the System.Type::GetInterfaces method, as the\norder is not guaranted. As described in the [documentation][0].\n\nAlso see github [issue][1] for more information and reasoning.\n\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\n[1]: https://github.com/xamarin/xamarin-android/issues/1186"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6564", "title": "[Tests] Do not assume order of returned interfaces", "body": "Cherry-picked from master.\r\n\r\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\r\ninterfaces returned from the System.Type::GetInterfaces method, as the\r\norder is not guaranted. As described in the [documentation][0].\r\n\r\nAlso see github [issue][1] for more information and reasoning.\r\n\r\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\r\n[1]: https://github.com/xamarin/xamarin-android/issues/1186", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6563", "title": "[Tests] Do not assume order of returned interfaces", "body": "Cherry-picked from master.\r\n\r\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\r\ninterfaces returned from the System.Type::GetInterfaces method, as the\r\norder is not guaranted. As described in the [documentation][0].\r\n\r\nAlso see github [issue][1] for more information and reasoning.\r\n\r\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\r\n[1]: https://github.com/xamarin/xamarin-android/issues/1186", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumpera": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/146346977cea8aaed2de8ab6a84c2a58b30aea24", "message": "Revert \"Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\" (#6557)\n\nThis reverts commit 411791c4696424d1ec9ec0f5258b6a0a4cc1885f."}, {"url": "https://api.github.com/repos/mono/mono/commits/411791c4696424d1ec9ec0f5258b6a0a4cc1885f", "message": "Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\n\nThis cute hack allow us to cut the budget of perf irrelevant blocks[1] while massively boosting those that are perf relevant[2].\r\n\r\nIt has a ton of missing features, like it doesn't detect nested loops, it doesn't take hints from inlined methods and it doesn't compute EH info.\r\nBeyond that, inlining budget is all but horrible, so there's ton of room for improvement here.\r\n\r\nResults are promising.\r\n\r\nA marginal improvements in benchmarks like Roslyn (2% user) while as much as 30% in micro benchmarks where the now bigger methods are in loop bodies.\r\nCode size with Roslyn changed from 5433242 to 5501751, IE extra 68.5k, or 1.2% more.\r\n\r\n[1] those ending in throw or in a catch handler\r\n[2] Loops"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6488", "title": "Add CI to WebAssembly. This is PR based on top of # Only the top 3 commits matter for this PR:", "body": "6d120f2a3d7\n    [wasm] Add CI configuration for WebAssembly.\n\n 93e21de15ba\n    [wasm] Modify the runner to exit(1) if the test suite fails.\n\n c0d3bd6a6d6\n    [wasm] Add package target to wasm.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6425", "title": "[wasm] Fix System.Core test suite plus a bug in the icall code. First pass at fixing System test suite.", "body": null, "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115935", "body": "Why are you reducing it? The changelog lacks proper justification.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123130", "body": "I believe we should replace all bblock shenanigans with just emitting an iconst and let the dce pass do its job\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jaykrell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/b909a770208a45d92cab764ff94aecf3de9932f3", "message": "return 0 is generally redundant in configure.ac, as the construction (#6528)\n\nof the test program wraps the text in int main() { ... ; return 0; }"}, {"url": "https://api.github.com/repos/mono/mono/commits/bbf6b67483a96e0c22ffc54cee4f868a771e0ada", "message": "Fix some warnings. (#6526)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e4f6b185b2aab27d5d004626874215c30720651", "message": "Convert thread get/set/clear state to coop/handle. (#6389)\n\n* Coop-handle ves_icall_System_Threading_Thread_GetState, SetState, ClrState.\r\nAnd cleanup.\r\n\r\n* Favor mono_internal_thread_handle_ptr."}, {"url": "https://api.github.com/repos/mono/mono/commits/042056452acd763e31612b1ecf7c8d46742aa469", "message": "Remove ampersands on MonoError variables name \"error\", but not on the others."}, {"url": "https://api.github.com/repos/mono/mono/commits/111786f94431638f5e932c8b7fae51c2ace5fd6b", "message": "Support for removing ampersand on MonoError variables and other\npreparation for MonoError cleanup (specific use-cases instead\nof one error_init)."}, {"url": "https://api.github.com/repos/mono/mono/commits/31070dfdc0a49efec3ebc634df7959b8ec1116cd", "message": "In MonoError, provide a uint32_t for initialization with\njust one instruction instead of two (at least it makes\na difference on the Apple arm32 target).\n\nAlso favor expressions over statements."}, {"url": "https://api.github.com/repos/mono/mono/commits/242980e00edc5b6860498fb4631d430caff5a0fa", "message": "replace new MonoError with ERROR_DECL"}, {"url": "https://api.github.com/repos/mono/mono/commits/b68b5ad1be64263c7f0f977cbb3a4f459855a882", "message": "Replace some \"error\" with \"gerror\" so that \"error\" is more often a MonoError or MonoError*."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6547", "title": "Performance counter coop/handle conversion, this time \"fixed\" instead of \"WrappedString\".", "body": "Machine handling is moved to managed -- in another PR as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6543", "title": "Move machine handling of performance counters from native to managed.", "body": "Just slightly less native code therefore.\r\n\r\nThe handling is trivial: returning false or 0 or null or an empty array, or in one surprising case ignoring it entirely.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6536", "title": "Convert K&R warning farm to ANSI and add static/const.", "body": "Also smaller part fix C-vs.-C++-isms.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6503", "title": "Understand PE32+, at least as much as PE32 is understood.", "body": "A number of other problems are noticed in the code but commented only.\r\nThis fixes https://bugzilla.xamarin.com/show_bug.cgi?id=56071", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6465", "title": "Support Windows 10 OS-supported unicode thread names.", "body": "As opposed to just the wierd debugger thread names.\r\n\r\nNot actually tested on Windows, granted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6443", "title": "Convert thread set name to coop/handle, passing fixed utf8 as suggested, and storing utf8.", "body": "Ludovic suggested passing fixed utf8, I'm not sure he meant to store it or not.\r\nResolve that before commit, and edit this comment down.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6435", "title": "Convert thread get name to coop/handle.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6406", "title": "[don't merge] Cleanup MonoError initialization.", "body": "Always initialize when declared, via a macro.\r\nNeuter almost all other initializations -- another pass will remove them.\r\nInitialize at the few public boundaries and icall boundary.\r\nUse a union so that writing two ushorts is reliably done with one instruction.\r\nThe goal of making \"error\" always a pointer is not achieved here, nor is GError *error renamed\r\n to gerror.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6394", "title": "A terser but clear style for zeroing a struct.", "body": "A terse but clear style for zeroing a struct.\r\nThis does not work portabily for unions, and will fail to compile for C++ if the first member is an enum (you have to cast). But otherwise zeros the entire thing.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/acea63a9c1e845f66253a79835b5fb10086910a1", "message": "Improve GetArgumentName in MonoOptions. Fixes bug-60904 (#6506)\n\n* Rewrite Options.GetArgumentName to use Regex\r\n\r\n* code cleanup\r\n\r\n* code cleanup"}, {"url": "https://api.github.com/repos/mono/mono/commits/15fad0dac29d4dc6f453c188dbaa88c832d2e760", "message": "fix system.data ssl-bug on linux"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583", "body": "and probably worth mentioning that it is possible to attach files to github issues via drag-n-drop? (Cause it's unclear and there is no \"attach\" button) \ud83d\ude42 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lewurm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/f49e87d42a26593cfbc2f26db6b58516bdbe1b1a", "message": "[exceptions] remove restore_stack_prot from managed code (#6518)\n\nit's dead code. restore happens in `restore_soft_guard_pages` upon\r\nreturning from the altstack machinery."}, {"url": "https://api.github.com/repos/mono/mono/commits/e39acb7a0d8409a3797b389b047e7544683dcca7", "message": "[exception] propagte stackoverflow exception to managed code (#6458)\n\nwe return the address of the StackOverflowException object in\r\n`restore_soft_guard_pages`, so it ends up in the architecture specific\r\nresult register (e.g. %rax) where the exception handler expects it.\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=60862"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6558", "title": "[configure] fix altstack detection", "body": "newer linux headers hide the `struct sigaltstack` definition (e.g. on\r\nUbuntu 17.10), probably because it is encouraged to use `stack_t`\r\nanyway.\r\n\r\nWe use `stack_t` in our code anyway:\r\nhttps://github.com/mono/mono/blob/146346977cea8aaed2de8ab6a84c2a58b30aea24/mono/mini/mini-exceptions.c#L2379-L2385\r\n\r\nThe change introducing the `ifdef` was already wrong imho:\r\nhttps://github.com/mono/mono/commit/f6d15e14c234c505e4b5e4d5e46a2666370d2b4a\r\n\r\n/cc @grendello ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318", "body": "maybe it's a good place to explain that there are \"native backtraces\" and \"managed stacktraces\" and how to obtain them. Depending on the issue, those can be useful.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mandel-macaque": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3f372d06eeb4b924a26871c91a2100205fb10550", "message": "[Tests] Skip some of the System.ServiceModel tests when using MOBILE (#6545)\n\nMobile does not support all clases found in System.ServiceModel, we skip\r\nthose tests of the not supported classes yet run all the others."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6565", "title": "[Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5", "body": "As with iOS we only support a subset of this tests.  PR https://github.com/xamarin/xamarin-macios/pull/3238 will run this tests on mac os x and we want to skip those that do not make sense. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "monojenkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/7fa82690762511ae5ac0df82dcc679dc7cbb0fb0", "message": "[msvc] Update csproj files (#6538)"}, {"url": "https://api.github.com/repos/mono/mono/commits/5929e348e940ed1b433eb112d90a63394301a624", "message": "[msvc] Update csproj files (#6516)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "migueldeicaza": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/d1649e90fcb80410b888edd6e5d20493c08e9a56", "message": "[corlib] Use Environment.Platform to access the platform, rather than probing the file system (#6535)\n\nAlternatve patch to: #6533"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vargaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/902626bb807ae9657231ca3b5ba07bd6d5ca614b", "message": "[runtime] Disallow casts between int[] and IList<int?> etc. Fixes #6401."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6568", "title": "[sdks] Set XCODE_VERSION to 'Xcode' for now to fix the ios build.", "body": null, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6501", "title": "[sgen] Use sgen_is_object_alive_for_current_gen () instead of sgen_is_object_alive (), the latter doesn't work for oldspace objects, causing the gc handle to be freed even through the object is still alive.", "body": "Fixes https://github.com/mono/mono/issues/6490.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6429", "title": "[runtime] Avoid building a separate static library, use the shared ob\u2026", "body": "\u2026ject files for the static library as well. (#5233)", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/134015", "body": "Should be fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/134015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "radical": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6569", "title": "Bump msbuild", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luhenry": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6567", "title": "[tests] Output XUnit tests to mcs/class/lib/$(PROFILE)/tests like NUnit tests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6500", "title": "[sdks] Move some code supporting the BCL from XA to Mono", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexanderkyte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6562", "title": "[runtime] Apply cctor filters to callees of cctors", "body": "Fixes #59649 \r\n\r\nWhen stepping with a filter that ignores static constructors, we previously bailed out when the lowest frame is a static constructor. That isn't sufficient, as static constructors can call other functions. \r\n\r\nThis work exposed a lot of issues with respect to the lifetimes and accuracy of tls->frames. I've left a debug aid here, this is something worth doing a more deliberate refactor of later. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6456", "title": "[DONTMERGE] Add locking around tls->frames usage/freeing", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6514", "title": "Bug 60088 - Assertion at ../../../../external/mono/mono/mini/debugger\u2026", "body": "\u2026-agent.c:4765, condition `array->len == 1' not met\r\n\r\nProblem was that I didn't consider `async void` method when adding that assert", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409", "body": "Great work.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418", "body": "This is an important set of fixes to get into Mono for F# support\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350", "body": "Yes, that's correct. The .fsproj formulation supported by this change is suitable for both F# 3.0 and F# 3.1.\n\nSeparately, we will work on getting the F# 3.1 language updates into the code drop,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256", "body": "Hi @knocte, xbuild needs to \"do the same thing\" as MSBuild. Since MSBuild sets VisualStudioVersion, then xbuild needs to set it too. The question is what it gets set to by default and what the ramifications of that are.  The guiding principle should be to do what MSBuild does by default.\n\nWhy does this matter to F#? As of F# 3.1 (== VisualStudioVersion 12) , the F# SDK is located in \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nFor F# 3.0 it was located in \n\n```\n$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets\n```\n\nI agree it is frustrating that the F# 3.1 targets file has moved to a location that includes the word \"VisualStudio\" let alone \"VisualStudioVersion\". But that's how it is - from the Microsoft perspective F# releases are aligned with VisualStudio releases (although in-place updates of F# may happen).\n\nThe relevant part of F# 3.1 (and upgraded F# 3.0) project files is: \n\n```\n<Choose>\n  <When Condition=\"'$(VisualStudioVersion)' == '11.0'\">\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </When>\n  <Otherwise>\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </Otherwise>\n</Choose>\n```\n\nFor fsharp/fsharp I think this means we have to fix the Mono/Linux/Mac installation of F# 3.1 to lay down the targets at\n\n   $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v12.0\\FSharp\\Microsoft.FSharp.Targets\n\nAnyway, the commit under discussion needs to at least ensure that VisualStudioVersion is set, preferably to the same value used by MSBuild by default. \n\nCheers\nDon\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099", "body": "Hi @ovatsus \n\nI wonder If we should just drop the setting of VisualStudioVersion. MSBuild seems to set it depending on the actual minimal VS installed on the machine - you get 10.0 with VS2010 installed, 11.0 with VS2012, 12.0 with VS2013 etc.  \n\nIf xbuild continues to leave VisualStudioVersion  unset, then we can adjust the F# install to put a copy of the targets at  the path that we get if VisualStudioVersion  is empty, i.e. \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nwhich on Linux becomes \n\n```\n/usr/lib/mono/xbuild/Microsoft/VisualStudio/v/FSharp/Microsoft.FSharp.Targets\n```\n\nThis isn't too bad, as it is suitable for VisualStudio assets that on Linux/Mac are referenced independent of Visual Studio version.\n\nI'll submit an adjustment to the F# install on Linux/Mac to put the Targets in the above location.  \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705", "body": "OK, @knocte is this PR good to go? The fixes are becoming increasingly important for F# users of xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984", "body": "The F# parts of this problem are tracked at https://github.com/fsharp/fsharp/issues/163\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902", "body": "Two questions\n- any idea when a new mono containing this fix will be available? 3.2.4 doesn't seem to have it?\n- I added a Xamarin Studio bug to cover the same problem in the IDE, I presume it is a different code path which needs to be fixed. https://bugzilla.xamarin.com/show_bug.cgi?id=16085\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331", "body": "@knocte Very sorry. We must be more careful.\n\nAnd I understand why GetAssemblyIdentity and some other classes left unimplemented for several years.\n\nIn the Mono's rules, I think I must re-send this pullreq after the original [GetAssemblyIdentity.cs](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs) is published with a full implementation.\n\nWithout knowing how the `GetAssemblyIdentity` works, I don't know how to implement it...\n\n@akoeplinger My codes are written by only looking [this post on Nemerle forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) and some from [referencesource-beta.microsoft.com](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs).\n\nI've not used Reflector, Monodis, or MonoDevelop or other reverse engineering tools (even though I mentioned about these in [Nemerle Forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/L-g7RYdiCLkJ)).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962", "body": "``` diff\n- Reflector, Monodis, or MonoDevelop or other reverse engineering tools\n+ Reflector, Monodis, nor MonoDevelop nor other reverse engineering tools\n```\n\nSorry my not being good at English\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523", "body": "@akoeplinger but the original code on [this post](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) might be from ILSpy\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428", "body": "It is true what you said.\nI've looked and based on the disassembled code anyway.\nI close this thanks :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921", "body": "Hi, I wrote an [unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) and I've re-implemented that from scratch without looking any MS's code.\nHere: https://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nThis implementation is based on [the document in MSDN](http://msdn.microsoft.com/en-us/library/ms164296.aspx), and I made it to have parameters named `Version`, `PublicKeyToken`, and `Culture`. \nAnd also, I made `PublicKeyToken` well-formed by looking original MSBuild's output of the unit test,\n\nbut I don't know how to get trusted...\nYes, we can't forget what we once seen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996", "body": "Oh,\n\n```\nbase.Log.LogErrorWithCodeFromResources (\"GetAssemblyIdentity.CouldNotGetAssemblyName\", new object[] {} )\n```\n\nis not good.\n\nIt comes from my memory, which is the original MS's code.\nIt should be re-writed.\n\nIs\n\n```\nLog.LogErrorFromException (ex);\n```\n\nOk?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657", "body": "I see. I've made it so.\nhttps://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nbut... I don't know how to include [this unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) into Mono sources.\n\nI think it should be located [here](https://github.com/mono/mono/tree/master/mcs/class/Microsoft.Build.Tasks/Test) but it can't be tested like [CreateItemTest.cs](https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Tasks/Test/Microsoft.Build.Tasks/CreateItemTest.cs)...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351", "body": "Sorry, invalid account. I'll make a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584", "body": "@kumpera, @migueldeicaza,\n\nFWIW, this was the only stopper I encountered while building mono on FreeBSD 10.1 x86 and ia64, fresh installed with llvm+clang v3.7: https://github.com/dotnet/roslyn/issues/2844#issuecomment-129221304. \nPlease consider this PR for merging.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562", "body": "@alexrp, will this patch be available in mono v.next tagged release code? FreeBSD support is varying between 99-100% with current master. These small but tricky patches stick it to 100% and above. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031", "body": "@atsushieno, can this land in next release of mono?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355", "body": "@saper, seems like the exception is coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024, which has a caller that implicitly appear at one instance in the call stack you provided which leads to https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1274 (which implicitly relies on your changes in `ParseTZBuffer` method).\n\nLooking the the reference resource for `CreateAdjustmentRule` method: http://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,43a6662ca1445f1f,references, it seems like `startDate` and `endDate` are assigned to the `AdjustmentRule()` object as is and the object is returned. Which means there is something weird going on with `time_types` etc. that is somehow confusing the `TimeSpan` and further affecting the dst_end/dst_start `.Year` resolution. \n\nMight be a good idea to assert dst_start/end for equality before calling `CreateAdjustmentRule` (or write to console/file etc.) to find out if the `.Year` differs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876", "body": "As noted in my previous comment, it is `InvalidTimeZoneException` coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877", "body": "@akoeplinger, once the assertion failures are sorted out, will it make sense to have a submodule to dotnet/coreclr tests directory so CI can also test the future PRs. Probably with a thin wrapper to translate error codes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035", "body": "(This diff is hard to read, but it simply removes the `using` statement and fixes the code indentation)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098", "body": "Arguably, you could push this onto the client and say, \"You must cancel the token _and_ Dispose the `HttpMessageResponse.Content` to truly cancel the network connection\", but this ends up being fairly difficult in practice since most people will end up using `ReadAsString` which doesn't offer cancelation, and I suspect the vast majority of people would mess this up.  Activating the cancelation token that you pass into SendAsync should close the underlying network connection, regardless of whether the call has returned or not. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761", "body": "You're technically correct but this is much more difficult to program against. Now there are two separate ways to cancel the same underlying network connection that was created in this operation (the other being to dispose the HttpContent), depending solely on time. This makes for race-conditiony code that has been pushed up to every client of HttpClient, instead of having a single, guaranteed way to cancel the underlying network connection as long as it's open.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653", "body": "@akoeplinger No clue\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803", "body": "So, here's an even more compelling reason that the existing behavior is Problematic, it also makes handling cancellation very difficult for _clients_ of HttpClient. Consider the following code:\n\n``` cs\npublic Task<string> DownloadTwoUrls(string file1, string file2, CancellationToken ct)\n{\n    var resp1 = await myHttpClient.Get(\"/foo/\" + file1, ct);\n    var content1 = resp1.Content.ReadAsStringAsync();\n\n    // ct was **Disposed** because of the Disposal of the linked token, ct is now trashed\n    // The second half of this is now silently uncancelable. \n    var resp2 = await myHttpClient.Get(\"/foo\" + file2, ct);\n    return content1 + (await resp2.Content.ReadAsStringAsync());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931", "body": "@marek-safar (Sorry about the blast from the past), It actually does, in `UnregisterLinkedTokens`: https://github.com/mono/mono/blob/a31c107f59298053e4ff17fd09b2fa617b75c1ba/mcs/class/corlib/System.Threading/CancellationTokenSource.cs#L269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569", "body": "Hm. Apparently my princess is in another castle.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "atsushieno": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115348", "body": "> What about using [Category (\"NotDotNet\")]?\n> Thought about that before making the change, but I'm not sure this code + nunit 2.4.8 should really work under any system.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123074", "body": "umm, if it's something critical, let's please revert the change. I got my second dev. laotop (macbook) broken(!!) and am unable to do it by myself :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/128272", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144442", "body": "For reference, the correct bug # is 638098.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144475", "body": "Looks like this caused dist failure on 2.6 http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5020269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jbevain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/116030", "body": "Short version: as per Paolo's request.\nLong version: I started a discussion by asking why the branch cost was so high, wondering why we couldn't inline properties such as:\n\nget { return is_foo ? foo : bar; }\n\nAnd if we couldn't include the displacement in the cost rather. Paolo said there was no need for that, just to reduce the branch cost which was set to high.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/116030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/138529", "body": "Well, the test case is the unit test which passes on .net. But I'll revert this one as well as the runtime support, as it triggers regressions: #635349 and #605936. Will have to investigate more.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/138529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139373", "body": "Actually it's \u00abjust\u00bb a regression introduced by my change, and it's not specific to moonlight. I'm working on fixing it for everyone. Thanks for reporting the issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139401", "body": "This should be fixed in master by 85c0976c3d913ba16a13d44159f8e7591732df56. Could you try to run the moon-unit test with it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ajorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121447", "body": "This commit breaks the build http://build.mono-project.com/ViewLane.aspx?lane_id=62&host_id=23&revision_id=90989\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/122189", "body": "This commit breaks the build:\n\nSystem.Collections.Concurrent/BlockingCollection.cs(54,17): error CS0246: The type or namespace name `ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\nSystem.Collections.Concurrent/BlockingCollection.cs(55,17): error CS0246: The type or namespace name`ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/128154", "body": "This commit breaks the build.  It appears you neglected to add a file:\n\nmake[8]: **\\* No rule to make target `System.ServiceModel.Discovery.Version11/IDiscoveryProxyContract11.cs', needed by`../../class/lib/net_4_0/System.ServiceModel.Discovery.dll'.  Stop.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144680", "body": "MCS     [net_4_0] Microsoft.CSharp.dll\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1502: The best overloaded method match for `Mono.CSharp.Expression.MemberLookup(Mono.CSharp.ResolveContext, Mono.CSharp.TypeSpec, Mono.CSharp.TypeSpec, string, int, Mono.CSharp.Expression.MemberLookupRestrictions, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1503: Argument`#6' cannot convert `bool' expression to type`Mono.CSharp.Expression.MemberLookupRestrictions'\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,25): error CS0825: The contextual keyword `var' may only appear within a local variable declaration\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,66): error CS0841: A local variable`expr' cannot be used before it is declared\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1502: The best overloaded method match for `Mono.CSharp.BoolConstant.BoolConstant(bool, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1503: Argument`#1' cannot convert `object' expression to type`bool'\nCompilation failed: 6 error(s), 0 warnings\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144716", "body": "sgen-gc.c:202:37: fatal error: metadata/sgen-cardtable.h: No such file or directory\nPlease remember to dist new files. Fixed in 5cab581.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/146235", "body": "Something is wrong w/ this commit http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5124512\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/146235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121594", "body": "It looks like grendel forgot to backport the configure.in portion of 8de7037b16020bb919579c75e3be981152a37ff8\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144697", "body": "@eno\n\nIt looks like git didn't cherry-pick the fakepoll.h.  Fixed\n\n@gonzalop\n\nsupport cannot dep on mono.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "grendello": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121619", "body": "So I did, sorry about that. Fixed in 9e0162ea534e2dc49d3f134b80efc6d88670434b\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/122578", "body": "This commit breaks two tests in System.Web (both 2.0 and 4.0 profiles):\n\n```\nTest Case Failures:\n1) MonoTests.System.Web.HttpUtilityTest.UrlEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlEncode () [0x00007] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:718\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n\n2) MonoTests.System.Web.HttpUtilityTest.UrlPathEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback  fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncodeChar (Char c, System.IO.Stream result) [0x00010] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:647\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncode () [0x00037] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:744\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "garuma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/122230", "body": "Fixed in af30815fc99adaa315c2\n\nSorry\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/133975", "body": "I think that the change here is responsible for blocking the corlib test suite with Semaphore tests still only on 32bits. I can't verify that myself (everything here is x86-64) but I'm guessing from the commit log and wrench results.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/133975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "spouliot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/135556", "body": "Got a test case for it ? you added 2 unit tests but marked them [Category(\"NotWorking\")]\nhttp://lists.ximian.com/archives/public/mono-patches/2010-August/175767.html\n\nActually the instance case got the NotWorking removed later... but the static case (still NotWorking in mcs) fails a unit test in moonlight which works on SL\nRemoving lines 193-196 fix this (as far as moonlight is concerned)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/135556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137401", "body": "This commit breaks the moonlight profile (and likely other similar profiles) since moonlight depends on gmcs (before using smcs) to build corlib\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139451", "body": "Fixed, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "gonzalop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/144644", "body": "mono-poll.[ch] have a mono_poll() that can be based on either select() or poll() depending on the system...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "baulig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262", "body": "Fixed, thank!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}, "2": {"Nihlus": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6577", "title": "Mono debugger crashes in native code when inspecting interface instances produced by Config.Net", "body": "## Steps to Reproduce\r\n\r\n1. Download the attached reproduction project\r\n2. Restore nuget packages and compile\r\n3. Run the project\r\n4. Observe the expected output\r\n5. Debug the project \r\n6. Inspect the local variable in the main method.\r\n7. Observe the runtime crash.\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nAt present, when inspecting variables containing an instance of a proxy interface created by Config.Net, the Mono debugger crashes in native code. If the variable is not inspected, the program behaves as expected and prints the stored value.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\nThe program should run as expected, and the Mono debugger should be able to inspect the variables without crashing.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[x] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n```\r\nMono JIT compiler version 5.4.1.6 (tarball Wed Nov  8 20:35:02 UTC 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       altstack\r\n\tNotifications: epoll\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          supported, not enabled.\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\nhttps://gist.github.com/Nihlus/d3274a9cce07728c3b36ce2da8082492\r\n\r\n### Attachments\r\n[CrashRepro.zip](https://github.com/mono/mono/files/1643632/CrashRepro.zip)\r\nhttps://github.com/aloneguid/config\r\nIssue on the Config.Net repository: https://github.com/aloneguid/config/issues/49\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rombersoft": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6573", "title": "Deadlock in delegate which created used ", "body": "## Steps to Reproduce\r\n\r\n1. Assembly computer with motherboard msi 760GM-p23. On other motherboards all works fine!\r\n2. Install 4.8.8-2-ARCH #1 SMP PREEMPT Thu Nov 17 15:09:32 CET 2016 i686 GNU/Linux\r\n3. Install mono 5.8\r\n4. git clone from https://github.com/MonoGame/MonoGame\r\n5. Create project monogame with some animation\r\n\r\n<!--\r\nVideo number one about problem https://www.dropbox.com/s/dd1t83kisa8z8xx/video.mp4?dl=04\r\nYou can see on this video that application stop draw until somebody touch a touchscreen\r\n\r\nVideo number two about problem https://www.dropbox.com/s/fio3ajc3qhpne2a/VID_20180117_103256.mp4?dl=0 \r\nYou can see on this video that my application works fine when above it placed another window (in current case this is urxvt terminal emulator). Take attention on time as seconds run when I place urxvt window above my application and seconds stop when my application is on top of all windows\r\n-->\r\n\r\n## Current Behavior\r\n\r\n<!--\r\nApplication sometimes is not drawn. But if you click mouse or press keyboard button application continue to draw but not long time and stop again\r\n-->\r\n\r\n## Expected Behavior\r\nApplication must draw animation\r\n\r\n## Description and other observation\r\nMonogame is game engine which in cycle runs methods Draw and Update. \r\nAt start I thought that problem in monogame, I even create topic here http://community.monogame.net/t/drawing-stops/9799\r\nBut when I tried with old version monogame (2.5) on mono 5.4 version that problem still exists.\r\nBut when I tried with old version monogame (2.5) on mono 2.10 version that problem does not exist.\r\nI can not use monogame 3.6 on mono 2.10 because 2.10 version does not support 4.5 framework and monogame 3.6 does not work on 4.0 framework\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[*] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n<!--\r\n5.2 and 5.8\r\n-->\r\n\r\n### Stacktrace\r\n\r\nI can not reproduce Stack trace. But I know place where drawing thread stops.\r\nLook at here\r\nhttps://github.com/MonoGame/MonoGame/blob/master/MonoGame.Framework/Graphics/GraphicsDevice.OpenGL.cs#L356\r\nI am sure that it is problem on new mono.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eatdrinksleepcode": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6560", "title": "Incorrect behavior for Take/Skip/Concat combination", "body": "## Steps to Reproduce\r\n\r\n```\r\nvar inputs = new [] { \"left\", \"right\" };\r\nvar outputs = inputs.Take(1)\r\n                    .Concat(Enumerable.Repeat((object)\"middle\", 1))\r\n                    .Concat(inputs.Skip(1)).ToArray();\r\nforeach(var item in outputs) {\r\n\tConsole.WriteLine(item);\r\n}\r\n```\r\n## Current Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nleft\r\n```\r\n\r\n## Expected Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nright\r\n```\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.4.1.7\r\n\r\n## Notes\r\n\r\n_This is a regression_: the same code works correctly under Mono 4.8.1.\r\n\r\nNote the cast to ```object``` inside the ```Enumerable.Repeat```. This is necessary to reproduce the bug; without the cast, the code works correctly.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6555", "title": "Process.WaitForExit() gets slower the larger your open file limit (ulimit -n) is on Linux", "body": "## Steps to Reproduce\r\n\r\n1. Compile this: `csc test.cs`:\r\n\r\n```csharp\r\npublic static class Program {\r\n    public static int Main () {\r\n        for (int i = 0; i < 100; i++) {\r\n            var p = System.Diagnostics.Process.Start (\"echo\", \"hello\");\r\n            if (!p.WaitForExit (10000)) return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```\r\n2. `$ (ulimit -n 1000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m0.402s\r\nuser\t0m0.028s\r\nsys\t0m0.184s\r\n```\r\n3. `$ (ulimit -n 100000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m1.277s\r\nuser\t0m0.380s\r\nsys\t0m0.592s\r\n```\r\n4. `$ (ulimit -n 1000000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m8.758s\r\nuser\t0m3.424s\r\nsys\t0m4.424s\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt gets slower the higher your ulimit -n is.\r\n\r\nNote: you may need to change your system settings (`/etc/security/limits.conf`) to allow higher limits.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNot getting slower.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04/16.04\r\n[ ] Windows\r\n\r\n**Version Used**: master, 5.8.088 and 4.2.1 (so either a very old bug or something outside our control)\r\n\r\nThis was the root cause behind an issue (https://github.com/mono/mono/pull/6537) we had on Jenkins because the Azure Linux VM builders had ulimit -n set to 1048576.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6548", "title": "Frequent test failures of ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test", "body": "## Steps to Reproduce\r\n\r\n1. Compile Mono on Linux i386\r\n2. `make -C mcs/class/corlib run-xunit-test`\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nFrequent test failure in System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test: https://github.com/mono/corefx/blob/dfd98e7113a99708f4c9ed063a8c481f838aa8d3/src/System.Threading/tests/ThreadLocalTests.cs#L192-L225\r\n\r\nThis seems to only occur on i386 and on Linux: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=ubuntu-1404-i386/\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNo test failure.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04\r\n[ ] Windows\r\n\r\n**Version Used**: master\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\n\r\n```\r\nAssert.False() Failure\r\nExpected: False\r\nActual:   True\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\n  at System.Threading.Tests.ThreadLocalTests+ThreadLocalWeakReferenceTest.Run () [0x0001c] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:216 \r\n  at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference () [0x00005] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:224 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6523", "title": "Remove obsolete assemblies in next major version bump", "body": "Tracking issue for assemblies to remove once we can do another breaking change, i.e. when we do Mono 6.0.\r\n\r\n- [ ] IBM.Data.DB2.dll, replaced by NuGet package\r\n- [ ] ICSharpCode.SharpZipLib.dll, replaced by NuGet package, fixes problems like  https://bugzilla.xamarin.com/show_bug.cgi?id=59304\r\n- [ ] Compat.ICSharpCode.SharpZipLib.dll (old copy of above)\r\n- [ ] Commons.Xml.Relaxng.dll, replaced by NuGet package\r\n- [ ] Mono.C5.dll, replaced by NuGet package\r\n- [ ] RabbitMQ.Client.dll, replaced by NuGet package\r\n- Very old copy of Rx.NET, replaced by NuGet packages\r\n  - [ ] System.Reactive.Core.dll\r\n  - [ ] System.Reactive.Debugger.dll\r\n  - [ ] System.Reactive.Experimental.dll\r\n  - [ ] System.Reactive.Interfaces.dll\r\n  - [ ] System.Reactive.Linq.dll\r\n  - [ ] System.Reactive.Observable.Aliases.dll\r\n  - [ ] System.Reactive.PlatformServices.dll\r\n  - [ ] System.Reactive.Providers.dll\r\n  - [ ] System.Reactive.Runtime.Remoting.dll\r\n  - [ ] System.Reactive.Windows.Forms.dll\r\n  - [ ] System.Reactive.Windows.Threading.dll\r\n- Very old copy of ASP.NET MVC framework, replaced by NuGet packages\r\n  - [ ] System.Web.Http.dll\r\n  - [ ] System.Web.Http.SelfHost.dll\r\n  - [ ] System.Web.Http.WebHost.dll\r\n  - [ ] System.Web.Mvc.dll\r\n  - [ ] System.Web.Razor.dll\r\n  - [ ] System.Web.WebPages.Deployment.dll\r\n  - [ ] System.Web.WebPages.dll\r\n  - [ ] System.Web.WebPages.Razor.dll\r\n  - [ ] WebMatrix.Data.dll\r\n  - [ ] Microsoft.Web.Infrastructure.dll\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6513", "title": "SocketTest.AcceptBlockingStatus is flaky on ARM", "body": "It failed 47 times in the last two weeks on the armel, armhf and arm64 master lanes with this stack trace:\r\n\r\n```\r\nMESSAGE:\r\nSystem.Net.Sockets.SocketException : Connection timed out\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Sockets.Socket.Connect (System.Net.EndPoint remoteEP) [0x000b0] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/System.Net.Sockets/Socket.cs:886 \r\n  at MonoTests.System.Net.Sockets.SocketTest.BlockingConnect (System.Boolean block, System.Int32 port) [0x00033] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:136 \r\n  at MonoTests.System.Net.Sockets.SocketTest.AcceptBlockingStatus () [0x00006] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:171 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/0c59209931f618d7811e4e0ff602e47f6276ef3e", "message": "[tests] Disable weak-fields.exe on LLVM as well"}, {"url": "https://api.github.com/repos/mono/mono/commits/a99d7f4b1318091354ecc12c0be1aa97e34ae2c0", "message": "[ci] Use correct -arch syntax in CFLAGS on OSX (#6570)\n\nIn c7d8d247c35b6fa08bbc7e36d2f44fefcdf48b5a I unified how we're\r\npassing -arch in CFLAGS to \"-arch=XXX\" since the original change\r\nin 63a49e9eb8b569c6d5265168101982f5557c52bb mixed the formats.\r\n\r\nTurns out the correct syntax is \"-arch XXX\" instead and it broke\r\nthe ccache build in bockbuild because it complained about the\r\nunknown format.\r\n\r\nAlso add LDFLAGS in the amd64 case to match what we have in bockbuild."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430", "body": "nit: in most templates I've seen the current/problematic behavior comes before the expected one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553", "body": "I'd rather instruct them to specifically run `mono --version` so we get full commit hash etc. which is included there.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037", "body": "not sure we need to mention both backtrace and stacktrace, they're used pretty much interchangeably anyway.\r\n\r\nstacktrace seems to be more commonly known from what I've seen.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145", "body": "`macOS`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052", "body": "don't you get this: \r\n![image](https://user-images.githubusercontent.com/1376924/33861614-14d2eef2-deb5-11e7-81a3-3c8a53f87857.png) ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598", "body": "What about we just remove this and the \"expected behavior\" description below? It doesn't add anything which isn't clear from the section header anyway and would make the template simpler.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735", "body": "maybe make it \"repro code/solution\" to be clear", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328", "body": "use `git://` here like the other submodules\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595", "body": "This must use `git://` instead of `git@` otherwise it won't be accessible to people without push access to that repo.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942", "body": "This must be `git://` as `git@` requires authentication.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928", "body": "typo: `borinssl`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077", "body": "`NuGet.BuildTasks` should be `nuget-buildtasks`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472", "body": "this no longer exists", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665", "body": "this is called `/external/binary-reference-assemblies` now", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543", "body": "should we keep this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861", "body": "while you're at it you could move the CODEOWNERS to the .github folder as well. And maybe CONTRIBUTING.md too?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757", "body": "add the same in the CROSS_COMPILING section above too to make it consistent.\n\nActually, I'm wondering if we still need this separation when both if branches are the same anyway?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexrp": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6546", "title": "Miscellaneous coverage profiler cleanup tasks", "body": "Opening this as a sort of meta-bug to keep track of some relatively small issues with the coverage profiler that should be addressed over time.\r\n\r\n- [ ] When we're comfortable bumping the output format version, it would be nice to change the overall structure to be more easily digestible for readers. For example, all `class` elements should be under an `assembly` element, all `method` elements should be under a `class` element, etc.\r\n- [ ] Type names (and signatures in general) should be fully qualified in the output, and not use C# names like `int`, `long`, etc.\r\n- [ ] The way we output generic definitions and generic instantiations needs to be cleaned up and made consistent. For example, if a program has a method `Foo<T> ()` and executes the instantiation `Foo<int> ()`, the output file will mention `Foo<int> ()` with all the correct execution counts, but it will also mention the uninstantiated `Foo<T> ()` with all-zero counts, as if it was uncovered. We should only mention the generic definition (with all the counts from all instantiations merged), not every single instantiation.\r\n- [ ] The data structures (or rather, lack thereof) in the profiler can be simplified. There's no particular reason we need to use a bunch of hash tables to map everything back and forth the way we do. The code would be much easier to read and maintain if we just had some proper structures for representing loaded assemblies, classes, and methods.\r\n- [ ] We should resolve method signatures and such ahead of time instead of doing it when we're dumping coverage data at shutdown. Resolving method signatures during shutdown can cause assemblies to be loaded, and metadata from those will be missing in the output as a result.\r\n- [ ] There's some commented out code relating to zipping of the output. This should either be implemented or removed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3491b7b604c2d1741e1d261a3315aa0e5a554d0c", "message": "[profiler] Write out all uncovered classes/methods in a loaded image. (#6544)\n\n* [runtime] Export mono_class_get_checked () for use in profilers.\r\n\r\n* [runtime] Expand mono_method_get_header_summary () to collect more info.\r\n\r\nIt now collects all the trivially-accessible header data that doesn't require\r\nchasing down other metadata.\r\n\r\n* [profiler] Use mono_method_get_header_summary () in the coverage code.\r\n\r\nWe only need code start and size information, not all the data that is present\r\nin the header. By switching to this function, we avoid all the side effects\r\nthat come with resolving local variables and exception clauses (which can even\r\nresult in loading assemblies in the worst case).\r\n\r\n* [profiler] Write out all uncovered classes/methods in a loaded image.\r\n\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60225\r\n\r\nThis required a bit of refactoring and some workarounds for various special\r\ncases. This also fixes some race conditions with respect to how data was\r\ninserted into the lock-free hash tables and queues."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958", "body": "Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974", "body": "Minor style issue: Spaces here instead of tabs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870", "body": "s/mono-lite/monolite/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873", "body": "This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6530", "title": "Mono's MSBuild is slow on Mac due to constant IO", "body": "## Steps to Reproduce\r\n\r\n1. See https://github.com/Microsoft/msbuild/blob/30b19e9f2cefb6d9675d660c8bb8b317c06ff9a1/src/Shared/NativeMethodsShared.cs#L553-L556\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nIO is done to check whether the platform is OS X.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nIO should be done at most once, or some other detection mechanism should be used. (pinvoke libc and get OS name)\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.168 (pull-request-6404/6f02ba66ba8 Thu Jan  4 16:11:23 EST 2018)\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\nProbably should be backported to all releases\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexander-vi": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6525", "title": "[Linux] [mipsel] Crash on any exception in C# code", "body": "## Code to reproduce\r\n```C#\r\nusing System;\r\n\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                  throw new ArgumentNullException();\r\n            }\r\n            catch\r\n            {\r\n                Console.WriteLine(\"Error!\");\r\n                Environment.Exit(1);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\nCrash with the following stack:\r\n```\r\n$ mono test\r\nStacktrace:\r\n\r\n\r\nNative stacktrace:\r\n\r\n\tmono() [0x4c7780]\r\n\r\nDebug info from gdb:\r\n\r\n[New LWP 17157]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/mipsel-linux-gnu/libthread_db.so.1\".\r\n0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n  Id   Target Id         Frame \r\n  2    Thread 0x76d43460 (LWP 17157) \"mono\" 0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n* 1    Thread 0x775618b0 (LWP 17156) \"mono\" 0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n\r\nThread 2 (Thread 0x76d43460 (LWP 17157)):\r\n#0  0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x7744432c in sem_wait@@GLIBC_2.2 () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#2  0x00688164 in mono_sem_wait ()\r\nwarning: GDB can't find the start of the function at 0x5d84b2.\r\n\r\n    GDB is unable to find the start of the function at 0x5d84b2\r\nand thus can't determine the size of that function's stack frame.\r\nThis means that GDB may be unable to access that stack frame, or\r\nthe frames below it.\r\n    This problem is most likely caused by an invalid program counter or\r\nstack pointer.\r\n    However, if you think GDB should simply search farther back\r\nfrom 0x5d84b2 for code which looks like the beginning of a\r\nfunction, you can increase the range of the search using the `set\r\nheuristic-fence-post' command.\r\n#3  0x005d84b4 in ?? ()\r\n\r\nThread 1 (Thread 0x775618b0 (LWP 17156)):\r\nwarning: GDB can't find the start of the function at 0x4c785a.\r\n#0  0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x004c785c in ?? ()\r\n\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n```\r\n\r\nPlease note that other C# features looks like work fine. I've managed to compile and launch several other examples.\r\n\r\n\r\n\r\n## Expected Behavior\r\nMessage \"Error!\" is printed.\r\n\r\n### System information\r\nMono is installed from packages as \"mono-devel\".\r\n```\r\n$ mono --version\r\nMono JIT compiler version 3.2.8 (Debian 3.2.8+dfsg-10)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       normal\r\n\tNotifications: epoll\r\n\tArchitecture:  mips\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tGC:            sgen\r\n```\r\n\r\n```\r\n$ cat /proc/cpuinfo \r\nsystem type\t\t: Baikal-T Generic SoC\r\nmachine\t\t\t: T-Platforms mITX Board\r\nprocessor\t\t: 0\r\ncpu model\t\t: MIPS P5600 V3.0  FPU V2.0\r\nBogoMIPS\t\t: 597.60\r\nwait instruction\t: yes\r\nmicrosecond timers\t: yes\r\ntlb_entries\t\t: 576\r\nextra interrupt vector\t: yes\r\nhardware watchpoint\t: yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]\r\nisa\t\t\t: mips1 mips2 mips32r1 mips32r2\r\nASEs implemented\t: vz msa eva\r\nshadow register sets\t: 1\r\nkscratch registers\t: 3\r\npackage\t\t\t: 0\r\ncore\t\t\t: 0\r\nVCED exceptions\t\t: not available\r\nVCEI exceptions\t\t: not available\r\n```\r\n\r\n```\r\n$ uname -a\r\nLinux tclient 3.19.12.23-mitx #1 SMP Thu Nov 2 19:47:08 UTC 2017 mips GNU/Linux\r\n```\r\n\r\n```\r\n$ cat /etc/*-release\r\nPRETTY_NAME=\"Debian GNU/Linux 8 (jessie)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"8\"\r\nVERSION=\"8 (jessie)\"\r\nID=debian\r\nHOME_URL=\"http://www.debian.org/\"\r\nSUPPORT_URL=\"http://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n```\r\n\r\nI know that this version of Mono is a bit old, but maybe you can provide me some workaround or this issue is present in the current version. Hope this bugreport will be useful for you.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6519", "title": "System.Data tests failures on watch", "body": "## Steps to Reproduce\r\n\r\n1. Get 2017-12 XI monthly integration\r\n2. \r\n3. \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nFaling tests\r\n```\r\n[FAIL] DbDataAdapterTest.AddToBatch : System.NotSupportedException : Specified method is not supported. \r\n[FAIL] SqlCommandBuilderTest.CatalogLocation_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogLocationTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOption_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOptionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_PrefixSuffix_NoMatch : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_UnquotedIdentifier_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull1 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull2 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull3 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull4 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull5 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull6 : An unexpected exception type was thrown \r\n[FAIL] SqlCommandTest.Clone : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandText : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout_Value_Negative : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandType_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ParameterCollectionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ResetCommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.BeginTransaction_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ChangeDatabase_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ClearPool_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_ConnectTimeout_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Database_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_DataSource_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PacketSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Password_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PersistSecurityInfo_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserID_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2_ConnectionString_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.CreateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Empty : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Whitespace : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ServerVersion_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectConnection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.DeleteCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.InsertCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.SelectCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.UpdateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.CompareInfo : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DBNull : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor7 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Boolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Byte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_ByteArray : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Decimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Double : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Enum : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Guid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Object : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Single : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_String : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.LocaleId : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterName : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterNullTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetSqlDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumn : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumnNullMapping : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBinary : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBoolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlByte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDecimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDouble : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlGuid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlMoney : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlSingle : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlXml : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlValue : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Value : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.XmlSchemaTest : System.PlatformNotSupportedException was expected \r\nTests run: 1887 Passed: 1755 Inconclusive: 0 Failed: 132 Ignored: 163\r\n```\r\n\r\n## Expected Behavior\r\n\r\nNo failures\r\n\r\n### On which platforms did you notice this\r\n\r\n[ x] watchOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**: 2017-12 branch\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c282af6df5ffbc7fc4ec2ab857299c8d455f9d72", "message": "[mcs] Implements C# 7.0 discards"}, {"url": "https://api.github.com/repos/mono/mono/commits/370105c5e0a741b187c5040c137ae0b44e3a7bc4", "message": "[profiler] Don't double escape special characters. (#6534)\n\nThe output of parse_generic_type_names is processed by escape_string_for_xml and\r\nwe were double escaping `&` character"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6551", "title": "Bump linker", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6476", "title": "Weak field support backport", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6395", "title": "Bump corefx", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/128022", "body": "It should be bellow licence text\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137435", "body": "you should fix moonlight profile to use bootstrap gmcs from basic profile and not 2.0\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057", "body": "Made small tweak but `mono --version` is useful only for people running Mono directly. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027", "body": "My worry is that then people would just skip the section", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555", "body": "Should use git::// protocol", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687", "body": "How big is the submodule, it's still not accessible for me", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904", "body": "I didn't want to move that one as I don't know if I need to change the paths and secondly, CODEOWNERS seems to be useful on its own", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607", "body": "I don't know what's the purpose of that, seems like what should be on mono github wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rodrmoya": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6512", "title": "Missing counters/perf counters in Mono 5.8 with new profiler arguments", "body": "## Steps to Reproduce\r\n\r\n1. Run any desktop mono app with: `/Library/Frameworks/Mono.framework/Versions/Current/bin/mono --gc=sgen --profile=log:heapshot=ondemand,nolegacy,jit,gc,nogcalloc,gcroot,gcmove,counter,output=\"/var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd\" app.exe`\r\n2. Let it run for a few seconds and stop\r\n3. `mprof-report /var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd` shows no counters\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nUsing the old runtime arguments (`alloc,heapshot=ondemand,counters`) produces a MLPD with counters on it.\r\n\r\n## Expected Behavior\r\n\r\nCounters should be emitted in the MLPD file\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n```$ mono --version\r\nMono JIT compiler version 5.8.0.103 (2017-10/1359c52fc6e Wed Dec 20 10:52:54 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OleksandrChizh": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6498", "title": "Mono issue with TLS due to Client Certificates", "body": "Hi. We have a .NET 4.0 application for sending https(TLS 1.0) requests using HttpWebRequest. The application works correctly with the windows version of Mono but when we send a request on Ubuntu 16.04 using Mono 5.4.1.6 we get an error, see here: https://pastebin.com/hP9dZvuF\r\nJust to test the app we sent a request to https://www.google.com, https://github.com, etc. and we got no errors but when we send a request to required server the issue appears.\r\nWe tried to import required certificates manually using certmgr and mozroots but it didn't solve the issue.\r\nWe are thinking it's an issue of Mono because we compiled the same code with .NET Core and it works well. Is there any chance to solve this issue?\r\nThank you!\r\n\r\n> CQNET: Error getting response stream (ReadDone1): ReceiveFailure - Error\r\n> System.Net.WebException: Error getting response stream (ReadDone1): ReceiveFailure ---> System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:100000b6:SSL routines:OPENSSL_internal:NO_RENEGOTIATION\r\n>   at /build/mono-5.4.1.6/external/boringssl/ssl/s3_pkt.c:446\r\n>   at Mono.Btls.MonoBtlsContext.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Boolean& wantMore) [0x00050] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.ProcessRead (Mono.Net.Security.BufferOffsetSize userBuffer) [0x00011] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream:ProcessRead (Mono.Net.Security.BufferOffsetSize)\r\n>   at Mono.Net.Security.AsyncReadRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x0000c] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<ProcessOperation>d__24.MoveNext () [0x000ff] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<StartOperation>d__23.MoveNext () [0x0008b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream+<StartOperation>d__58.MoveNext () [0x001bf] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter1[TResult].GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Threading.Tasks.TaskToApm.End[TResult] (System.IAsyncResult asyncResult) [0x0002e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.EndRead (System.IAsyncResult asyncResult) [0x00000] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.WebConnection.ReadDone (System.IAsyncResult result) [0x0001b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Net.HttpWebRequest.EndGetResponse (System.IAsyncResult asyncResult) [0x00058] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.HttpWebRequest.GetResponse () [0x0000e] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at k.s (System.String bqi, System.Int32 bqj) [0x00043] in <31d60139ab8f4173b33ee35d33fa2fdb>\r\n>", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6498/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luhenry": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6490", "title": "Reenable weak-fields.exe test", "body": "Extracted from https://bugzilla.xamarin.com/show_bug.cgi?id=60973\r\n\r\nIt fails with the following output\r\n\r\n```\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 16946264\r\n```\r\n\r\n@vargaz noted that it's the test that seems flaky since it doesn't expect the object to be randomly retained.\r\n\r\nIt was disabled with https://github.com/mono/mono/pull/6191", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6567", "title": "[tests] Output XUnit tests to mcs/class/lib/$(PROFILE)/tests like NUnit tests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6500", "title": "[sdks] Move some code supporting the BCL from XA to Mono", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErwinVorenhout": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6477", "title": "GetActiveTcpConnections->state returns wrong status", "body": "I am trying to monitor an active TCP connection with the following code, when running on windows the _log.logInfo function will simply return established but when running on Mono 4.2.1 it will return \"Closed\", while the connection is established according: netstat -anp --tcp. \r\n\r\n```\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\r\ntcp        0      0 192.168.200.202:42685   192.168.200.218:18000   ESTABLISHED 23378/mono\r\n```\r\n\r\nThis is the code that I am using:\r\n```\r\nIPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();\r\nTcpConnectionInformation[] tcpConnections = ipProperties.GetActiveTcpConnections().Where(x => x.LocalEndPoint.Equals(_client.Client.LocalEndPoint) && x.RemoteEndPoint.Equals(_client.Client.RemoteEndPoint)).ToArray();\r\nif (tcpConnections != null && tcpConnections.Length > 0)\r\n{\r\n       TcpState stateOfConnection = tcpConnections.First().State;\r\n      if (_connected != 2)\r\n      {                              \r\n           if (stateOfConnection != TcpState.Established)\r\n           {\r\n                _log.logInfo(tcpConnections.First().RemoteEndPoint.ToString() + \"status:\" + \r\n                tcpConnections.First().State.ToString());\r\n                reConnect();\r\n           }\r\n      }\r\n}\r\n```\r\n\r\nThe output on windows when placing the log function above the if statement: \r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : established\r\n```\r\n\r\nWhile the output on Linux is:\r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : closed\r\n```\r\n\r\nI found out that Mono uses the ```/proc/net/tcp``` to read out the TCP/IP connections \r\nWhen trying to monitor the connection on remote addr 192.168.200.218  /proc/net/tcp returns the following:\r\n\r\n```  \r\nsl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode\r\n0: 0100007F:0CEA 00000000:0000 0A 00000000:00000000 00:00000000 00000000   111        0 1077650 1 0000000000000000 100 0 0 10 0\r\n1: 00000000:008B 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815396 1 0000000000000000 100 0 0 10 0\r\n2: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 17055 1 0000000000000000 100 0 0 10 0\r\n3: 00000000:01BD 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815395 1 0000000000000000 100 0 0 10 0\r\n4: 29CAA8C0:0016 DAC8A8C0:DBFB 01 00000080:00000000 01:00000015 00000000     0        0 2906153 3 0000000000000000 25 4 1 10 16\r\n```\r\nHere is number 4 the connection that I am trying to monitor(HEX DA C8 A8 C0  = decimal 192.168.200.218 ) the  state is  01 in the table.\r\n\r\n According the [kernel ](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h?id=HEAD) state 01 should be established so I am wondering where the state closed is comming from?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebasijan": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6471", "title": "PlatformNotSupportedException when calling LdapConnetion.Disconnect", "body": "Everything appears to be working fine (apart from the fact that retrieving a specific attribute should be way easier than iterating around all existing attributes - not sure why it was designed this way), but when I try to disconnect I get\r\n\r\n > PlatformNotSupportedException: Thread abort is not supported on this platform.\r\n\r\nThe code is pretty much exactly as taken from the Novell documentation, aprt from the fact that I am trying to just rerieve 2 specific attributes (name and logon time): \r\n\r\n\tvar users = new List<User>();\r\n\r\n\t// Creating an LdapConnection instance \r\n\tLdapConnection ldapConn= new LdapConnection();\r\n\r\n\t//Connect function will create a socket connection to the server\r\n\tldapConn.Connect(\"DOMAIN.com\",389);\r\n\r\n\t//Bind function will Bind the user object Credentials to the Server\r\n\tldapConn.Bind(\"DOMAIN\\\\_Bassi\",\"password\");\r\n\r\n\t// Searches in the Marketing container and return all child entries just below this\r\n\t//container i.e. Single level search\r\n\tLdapSearchResults lsc=ldapConn.Search(\"OU=Users,OU=MCS,OU=AU,OU=COMPANY,DC=DOMAIN,DC=com\",\r\n\t\t\t\t\tLdapConnection.SCOPE_ONE,\r\n\t\t\t\t\t\"objectClass=*\",\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse);\r\n\r\n\twhile (lsc.hasMore())\r\n\t{\r\n\t\tvar user = new User();\r\n\r\n\t\tLdapEntry nextEntry = null;\r\n\t\ttry \r\n\t\t{\r\n\t\t\tnextEntry = lsc.next();\r\n\t\t}\r\n\t\tcatch(LdapException e) \r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Error: \" + e.LdapErrorMessage);\r\n\t\t\t// Exception is thrown, go for next entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tConsole.WriteLine(\"\\n\" + nextEntry.DN);\r\n\r\n\t\tLdapAttributeSet attributeSet = nextEntry.getAttributeSet();\r\n\t\tSystem.Collections.IEnumerator ienum =  attributeSet.GetEnumerator();\r\n\r\n\t\tvar atts = attributeSet.ToArray().ToList();\r\n\r\n\t\twhile(ienum.MoveNext())\r\n\t\t{\r\n\t\t\tLdapAttribute attribute=(LdapAttribute)ienum.Current;\r\n\t\t\tif(attribute.Name == \"sAMAccountName\")\r\n\t\t\t{\r\n\t\t\t\tuser.UserName = attribute.StringValue;\r\n\t\t\t} \r\n\t\t\telse if(attribute.Name == \"lastLogonTimestamp\")\r\n\t\t\t{\r\n\t\t\t\tuser.LastLogon = DateTime.FromFileTime(long.Parse(attribute.StringValue));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tusers.Add(user);\r\n\t}\r\n\r\n\tldapConn.Disconnect();\r\n\r\nAnd as soon as `Disconnect` is called I get the error. \r\n\r\nHas anyone else experienced this or know what might be going wrong?\r\n\r\n**stacktrace**\r\n\r\n\r\n\tSystem.Threading.Thread.Abort()\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.Dispose(bool disposing, string reason, int semaphoreId, InterThreadException notifyUser)\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.destroyClone(bool apiCall)\r\n\r\n\r\n\tNovell.Directory.Ldap.LdapConnection.Disconnect()\r\n\r\n\r\n\tLogonChecker.Managers.ActiveDirectory.GetADUsers() in ActiveDirectory.cs\r\n\t- \r\n\t64.                    }\r\n\t65.                }\r\n\t66.\r\n\t67.                users.Add(user);\r\n\t68.            }\r\n\t69.\r\n\t70.            ldapConn.Disconnect();\r\n\t71.\r\n\t72.            return users;\r\n\t73.\r\n\t74.            // LdapConnection ADconn = new LdapConnection();\r\n\t75.            // ADconn.Connect(\"DOMAIN.com\", 389);\r\n\t76.            // ADconn.Bind(\"DOMAIN\\\\_Bassie\", \"password\");\r\n\r\n\r\n\tLogonChecker.Controllers.UserController+<Index>d__2.MoveNext() in UserController.cs\r\n\t- \r\n\t20.        }\r\n\t21.\r\n\t22.        // GET: User\r\n\t23.        public async Task<IActionResult> Index()\r\n\t24.        {\r\n\t25.            var ad = new ActiveDirectory();\r\n\t26.            var users = ad.GetADUsers();\r\n\t27.\r\n\t28.            return View(users);\r\n\t29.            // return View(await _context.User.ToListAsync());\r\n\t30.        }\r\n\t31.\r\n\t32.        // GET: User/Details/5\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeActionMethodAsync>d__12.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaykrell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/2e029d691e3d5dc5a838f867f8feb472864a8109", "message": "Convert ves_icall_System_Threading_Thread_GetName_internal to coophandle. (#6435)\n\nConvert thread get name to coop/handle (ves_icall_System_Threading_Thread_GetName_internal)."}, {"url": "https://api.github.com/repos/mono/mono/commits/6a04dc64516bd91b7b45d4587b66988b0e9b1285", "message": "Convert K&R warning farm to ANSI and add static/const.\nAlso smaller part fix C-vs.-C++-isms."}, {"url": "https://api.github.com/repos/mono/mono/commits/b909a770208a45d92cab764ff94aecf3de9932f3", "message": "return 0 is generally redundant in configure.ac, as the construction (#6528)\n\nof the test program wraps the text in int main() { ... ; return 0; }"}, {"url": "https://api.github.com/repos/mono/mono/commits/bbf6b67483a96e0c22ffc54cee4f868a771e0ada", "message": "Fix some warnings. (#6526)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e4f6b185b2aab27d5d004626874215c30720651", "message": "Convert thread get/set/clear state to coop/handle. (#6389)\n\n* Coop-handle ves_icall_System_Threading_Thread_GetState, SetState, ClrState.\r\nAnd cleanup.\r\n\r\n* Favor mono_internal_thread_handle_ptr."}, {"url": "https://api.github.com/repos/mono/mono/commits/042056452acd763e31612b1ecf7c8d46742aa469", "message": "Remove ampersands on MonoError variables name \"error\", but not on the others."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6547", "title": "Performance counter coop/handle conversion, this time \"fixed\" instead of \"WrappedString\".", "body": "Machine handling is moved to managed -- in another PR as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6543", "title": "Move machine handling of performance counters from native to managed.", "body": "Just slightly less native code therefore.\r\n\r\nThe handling is trivial: returning false or 0 or null or an empty array, or in one surprising case ignoring it entirely.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6503", "title": "Understand PE32+, at least as much as PE32 is understood.", "body": "A number of other problems are noticed in the code but commented only.\r\nThis fixes https://bugzilla.xamarin.com/show_bug.cgi?id=56071", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6465", "title": "Support Windows 10 OS-supported unicode thread names.", "body": "As opposed to just the wierd debugger thread names.\r\n\r\nNot actually tested on Windows, granted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6443", "title": "Convert thread set name to coop/handle, passing fixed utf8 as suggested, and storing utf8.", "body": "Ludovic suggested passing fixed utf8, I'm not sure he meant to store it or not.\r\nResolve that before commit, and edit this comment down.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6406", "title": "Cleanup MonoError initialization.", "body": "Neuter most initializations. Make them asserts for now.\r\nGive names to ones that must stay.\r\nConvert dis, profiler, dump to new style.\r\nChange error_cleanup to end with initialization, so those explicit reinitializations can go away.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6394", "title": "A terser but clear style for zeroing a struct.", "body": "A terse but clear style for zeroing a struct.\r\nThis does not work portabily for unions, and will fail to compile for C++ if the first member is an enum (you have to cast). But otherwise zeros the entire thing.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6393", "title": "Some handle.h cleanup extracted from larger PR.", "body": "Some handle.h cleanup extracted from larger PR.  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6355", "title": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "body": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6298", "title": "convert mono/metadata/mono-perfcounters.c to use coop handles", "body": "convert mono/metadata/mono-perfcounters.c to use coop handles", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6268", "title": "Cleanup derived and expanded from PR 6247.", "body": "https://github.com/mono/mono/pull/6247/files\r\n\r\nThere is both dead and duplicated code.\r\nThe duplicated code can be cleaned up by the simple\r\ntransform of making error optional in a small number of places.\r\nThe dead code is very uninteresting and not worth carrying along.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumpera": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/232af8c206d9253d6f284d8ca960c174f4d7b9c7", "message": "Add CI to WebAssembly. This is PR based on top of # Only the top 3 commits matter for this PR: (#6488)\n\n* [WASM] Fix System.Core issues and disable broken tests.\r\n\r\n* [wasm] Fix cookie computation heap overflow. Use a local to make it thread safe.\r\n\r\n* [wasm] Disable System tests that don't work under WASM. Change the wasm profile to disable BSD sockets.\r\n\r\n* [wasm] Address reviewer feedback.\r\n\r\n* [wasm] Disable test that requires multiple threads.\r\n\r\n* [wasm] Add package target to wasm.\r\n\r\n* [wasm] Modify the runner to exit(1) if the test suite fails.\r\n\r\n* [wasm] Add CI configuration for WebAssembly.\r\n\r\n* [wasm] Fix issues found over review."}, {"url": "https://api.github.com/repos/mono/mono/commits/146346977cea8aaed2de8ab6a84c2a58b30aea24", "message": "Revert \"Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\" (#6557)\n\nThis reverts commit 411791c4696424d1ec9ec0f5258b6a0a4cc1885f."}, {"url": "https://api.github.com/repos/mono/mono/commits/411791c4696424d1ec9ec0f5258b6a0a4cc1885f", "message": "Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\n\nThis cute hack allow us to cut the budget of perf irrelevant blocks[1] while massively boosting those that are perf relevant[2].\r\n\r\nIt has a ton of missing features, like it doesn't detect nested loops, it doesn't take hints from inlined methods and it doesn't compute EH info.\r\nBeyond that, inlining budget is all but horrible, so there's ton of room for improvement here.\r\n\r\nResults are promising.\r\n\r\nA marginal improvements in benchmarks like Roslyn (2% user) while as much as 30% in micro benchmarks where the now bigger methods are in loop bodies.\r\nCode size with Roslyn changed from 5433242 to 5501751, IE extra 68.5k, or 1.2% more.\r\n\r\n[1] those ending in throw or in a catch handler\r\n[2] Loops"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6425", "title": "[wasm] Fix System.Core test suite plus a bug in the icall code. First pass at fixing System test suite.", "body": null, "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115935", "body": "Why are you reducing it? The changelog lacks proper justification.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123130", "body": "I believe we should replace all bblock shenanigans with just emitting an iconst and let the dce pass do its job\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "radical": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/06b9b48420c2dc4b5d4928217797efb34a56779b", "message": "Bump msbuild (#6569)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lewurm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5ba19cb47812dd356b19624d5bce380e514c3c64", "message": "[configure] fix altstack detection\n\nnewer linux headers hide the `struct sigaltstack` definition (e.g. on\nUbuntu 17.10), probably because it is encouraged to use `stack_t`\nanyway.\n\nWe use `stack_t` in our code anyway:\nhttps://github.com/mono/mono/blob/146346977cea8aaed2de8ab6a84c2a58b30aea24/mono/mini/mini-exceptions.c#L2379\n\nThe change introducing the `ifdef` was already wrong imho:\nhttps://github.com/mono/mono/commit/f6d15e14c234c505e4b5e4d5e46a2666370d2b4a"}, {"url": "https://api.github.com/repos/mono/mono/commits/f49e87d42a26593cfbc2f26db6b58516bdbe1b1a", "message": "[exceptions] remove restore_stack_prot from managed code (#6518)\n\nit's dead code. restore happens in `restore_soft_guard_pages` upon\r\nreturning from the altstack machinery."}, {"url": "https://api.github.com/repos/mono/mono/commits/e39acb7a0d8409a3797b389b047e7544683dcca7", "message": "[exception] propagte stackoverflow exception to managed code (#6458)\n\nwe return the address of the StackOverflowException object in\r\n`restore_soft_guard_pages`, so it ends up in the architecture specific\r\nresult register (e.g. %rax) where the exception handler expects it.\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=60862"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318", "body": "maybe it's a good place to explain that there are \"native backtraces\" and \"managed stacktraces\" and how to obtain them. Depending on the issue, those can be useful.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vargaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5e72bd6d01c90ad37231c9a16099abc90c575440", "message": "[sdks] Set more ios version variables to empty to fix the build. (#6571)"}, {"url": "https://api.github.com/repos/mono/mono/commits/511c2fd59cf12ad86e36bbae70ba2cf4e7d1a982", "message": "[sdks] Set XCODE_VERSION to 'Xcode' for now to fix the ios build. (#6568)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6501", "title": "[sgen] Use sgen_is_object_alive_for_current_gen () instead of sgen_is_object_alive (), the latter doesn't work for oldspace objects, causing the gc handle to be freed even through the object is still alive.", "body": "Fixes https://github.com/mono/mono/issues/6490.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6429", "title": "[runtime] Avoid building a separate static library, use the shared ob\u2026", "body": "\u2026ject files for the static library as well. (#5233)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6285", "title": "[WIP][jit] Implement --trace using the profiler infrastructure.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/134015", "body": "Should be fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/134015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "BrzVlad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/4490aa5112e6fa9c64ed1db222b880fbce31e176", "message": "[runtime] Fix jit info leak when having aot images loaded\n\nWhen we had a jit info table for aot images loaded in the domain, we would queue jit infos for freeing at domain unload time. This means leaking during entire application life.\n\nAdd comment for jit info freeing when having multiple tables.\n\nFixes #60986."}, {"url": "https://api.github.com/repos/mono/mono/commits/f162931e25c4cc1ad3d1a21117bb085089f168cd", "message": "[mini] Fix seq point info leak (#6522)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdecb851ff6bbf2d0602104d4db0df86b0c4b7ba", "message": "[sgen] Fix overflow on large arrays (#6542)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6559", "title": "[interp] Interp fixes", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a717f377f0b773ffa99dc711ab4e687b50be991a", "message": "Fix bug 60848: Incorrect unicode custom attribute decoding (#6481)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6326", "title": "Fix xamarin-android issue 1130 and add test", "body": "https://github.com/xamarin/xamarin-android/issues/1130 is caused by us not properly storing/restoring the Thread.CurrentPrincipal context when execution contexts are stored. Task (and I think ThreadPool?) store the current context when a job is queued and restore it when running the job, which carries over state like the thread's current principal.\r\n\r\nRight now we have a weird hand-rolled implementation of CurrentPrincipal that I don't quite understand. I think we should be using the CurrentPrincipal value stored in the BCL's CallContext, so I tried doing that and it seems to fix this without breaking anything.\r\n\r\nI'd appreciate getting suggestions on how we should go about doing this for real. Does anyone know why the old implementation works the way it does? I assume the serialization logic has something to do with appdomains, but I would not have expected principals for the current thread to be shared between domains.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radekdoulik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9a183f2c833a54e10fdcb09a3300d86e89ee85ae", "message": "[Tests] Do not assume order of returned interfaces\n\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\ninterfaces returned from the System.Type::GetInterfaces method, as the\norder is not guaranted. As described in the [documentation][0].\n\nAlso see github [issue][1] for more information and reasoning.\n\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\n[1]: https://github.com/xamarin/xamarin-android/issues/1186"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/acea63a9c1e845f66253a79835b5fb10086910a1", "message": "Improve GetArgumentName in MonoOptions. Fixes bug-60904 (#6506)\n\n* Rewrite Options.GetArgumentName to use Regex\r\n\r\n* code cleanup\r\n\r\n* code cleanup"}, {"url": "https://api.github.com/repos/mono/mono/commits/15fad0dac29d4dc6f453c188dbaa88c832d2e760", "message": "fix system.data ssl-bug on linux"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583", "body": "and probably worth mentioning that it is possible to attach files to github issues via drag-n-drop? (Cause it's unclear and there is no \"attach\" button) \ud83d\ude42 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mandel-macaque": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3f372d06eeb4b924a26871c91a2100205fb10550", "message": "[Tests] Skip some of the System.ServiceModel tests when using MOBILE (#6545)\n\nMobile does not support all clases found in System.ServiceModel, we skip\r\nthose tests of the not supported classes yet run all the others."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6576", "title": "[Tests] Skip a subset of the System.IdentityModel for iOS and Mac.", "body": "The iOS and Mac runtimes do not support all of the classes in System.IdentityModel, this change skips the tests of those classes on MOBILE and XAMMAC_4_5.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6575", "title": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5", "body": "Cherrypick from PR: https://github.com/mono/mono/pull/6565", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6574", "title": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5", "body": "\r\nCherry pick from PR: https://github.com/mono/mono/pull/6565", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "monojenkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/7fa82690762511ae5ac0df82dcc679dc7cbb0fb0", "message": "[msvc] Update csproj files (#6538)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "migueldeicaza": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/d1649e90fcb80410b888edd6e5d20493c08e9a56", "message": "[corlib] Use Environment.Platform to access the platform, rather than probing the file system (#6535)\n\nAlternatve patch to: #6533"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexanderkyte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6562", "title": "[runtime] Apply cctor filters to callees of cctors", "body": "Fixes #59649 \r\n\r\nWhen stepping with a filter that ignores static constructors, we previously bailed out when the lowest frame is a static constructor. That isn't sufficient, as static constructors can call other functions. \r\n\r\nThis work exposed a lot of issues with respect to the lifetimes and accuracy of tls->frames. I've left a debug aid here, this is something worth doing a more deliberate refactor of later. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6456", "title": "[DONTMERGE] Add locking around tls->frames usage/freeing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6310", "title": "[sdks] Script lldb android integration", "body": "Read PR message here: https://github.com/mono/mono/pull/6309", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6309", "title": "[sdks] Add managed debugger tests to sdks", "body": "This adds the Managed debugger tests to the sdks. A couple of the tests are failing, but everything related to the setup of the runtime appears to be passing. We have 5 failures right now. \r\n\r\nNote also that this adds support for running an arbitrary .exe if someone is willing to edit the boostrap file and indicate their class main, and pass the args themselves. They can also set the args with the managed debugger. \r\n\r\nThis functionality is linked to https://github.com/mono/mono/pull/6310 . That PR has the lldb integration that was necessary to debug this into working. If combined with the ability to run an arbitrary .exe, it allows us to more easily take an android reproduction and run it in an sdks environment with different monos. \r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6514", "title": "Bug 60088 - Assertion at ../../../../external/mono/mono/mini/debugger\u2026", "body": "\u2026-agent.c:4765, condition `array->len == 1' not met\r\n\r\nProblem was that I didn't consider `async void` method when adding that assert", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409", "body": "Great work.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418", "body": "This is an important set of fixes to get into Mono for F# support\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350", "body": "Yes, that's correct. The .fsproj formulation supported by this change is suitable for both F# 3.0 and F# 3.1.\n\nSeparately, we will work on getting the F# 3.1 language updates into the code drop,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256", "body": "Hi @knocte, xbuild needs to \"do the same thing\" as MSBuild. Since MSBuild sets VisualStudioVersion, then xbuild needs to set it too. The question is what it gets set to by default and what the ramifications of that are.  The guiding principle should be to do what MSBuild does by default.\n\nWhy does this matter to F#? As of F# 3.1 (== VisualStudioVersion 12) , the F# SDK is located in \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nFor F# 3.0 it was located in \n\n```\n$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets\n```\n\nI agree it is frustrating that the F# 3.1 targets file has moved to a location that includes the word \"VisualStudio\" let alone \"VisualStudioVersion\". But that's how it is - from the Microsoft perspective F# releases are aligned with VisualStudio releases (although in-place updates of F# may happen).\n\nThe relevant part of F# 3.1 (and upgraded F# 3.0) project files is: \n\n```\n<Choose>\n  <When Condition=\"'$(VisualStudioVersion)' == '11.0'\">\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </When>\n  <Otherwise>\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </Otherwise>\n</Choose>\n```\n\nFor fsharp/fsharp I think this means we have to fix the Mono/Linux/Mac installation of F# 3.1 to lay down the targets at\n\n   $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v12.0\\FSharp\\Microsoft.FSharp.Targets\n\nAnyway, the commit under discussion needs to at least ensure that VisualStudioVersion is set, preferably to the same value used by MSBuild by default. \n\nCheers\nDon\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099", "body": "Hi @ovatsus \n\nI wonder If we should just drop the setting of VisualStudioVersion. MSBuild seems to set it depending on the actual minimal VS installed on the machine - you get 10.0 with VS2010 installed, 11.0 with VS2012, 12.0 with VS2013 etc.  \n\nIf xbuild continues to leave VisualStudioVersion  unset, then we can adjust the F# install to put a copy of the targets at  the path that we get if VisualStudioVersion  is empty, i.e. \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nwhich on Linux becomes \n\n```\n/usr/lib/mono/xbuild/Microsoft/VisualStudio/v/FSharp/Microsoft.FSharp.Targets\n```\n\nThis isn't too bad, as it is suitable for VisualStudio assets that on Linux/Mac are referenced independent of Visual Studio version.\n\nI'll submit an adjustment to the F# install on Linux/Mac to put the Targets in the above location.  \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705", "body": "OK, @knocte is this PR good to go? The fixes are becoming increasingly important for F# users of xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984", "body": "The F# parts of this problem are tracked at https://github.com/fsharp/fsharp/issues/163\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902", "body": "Two questions\n- any idea when a new mono containing this fix will be available? 3.2.4 doesn't seem to have it?\n- I added a Xamarin Studio bug to cover the same problem in the IDE, I presume it is a different code path which needs to be fixed. https://bugzilla.xamarin.com/show_bug.cgi?id=16085\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331", "body": "@knocte Very sorry. We must be more careful.\n\nAnd I understand why GetAssemblyIdentity and some other classes left unimplemented for several years.\n\nIn the Mono's rules, I think I must re-send this pullreq after the original [GetAssemblyIdentity.cs](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs) is published with a full implementation.\n\nWithout knowing how the `GetAssemblyIdentity` works, I don't know how to implement it...\n\n@akoeplinger My codes are written by only looking [this post on Nemerle forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) and some from [referencesource-beta.microsoft.com](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs).\n\nI've not used Reflector, Monodis, or MonoDevelop or other reverse engineering tools (even though I mentioned about these in [Nemerle Forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/L-g7RYdiCLkJ)).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962", "body": "``` diff\n- Reflector, Monodis, or MonoDevelop or other reverse engineering tools\n+ Reflector, Monodis, nor MonoDevelop nor other reverse engineering tools\n```\n\nSorry my not being good at English\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523", "body": "@akoeplinger but the original code on [this post](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) might be from ILSpy\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428", "body": "It is true what you said.\nI've looked and based on the disassembled code anyway.\nI close this thanks :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921", "body": "Hi, I wrote an [unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) and I've re-implemented that from scratch without looking any MS's code.\nHere: https://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nThis implementation is based on [the document in MSDN](http://msdn.microsoft.com/en-us/library/ms164296.aspx), and I made it to have parameters named `Version`, `PublicKeyToken`, and `Culture`. \nAnd also, I made `PublicKeyToken` well-formed by looking original MSBuild's output of the unit test,\n\nbut I don't know how to get trusted...\nYes, we can't forget what we once seen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996", "body": "Oh,\n\n```\nbase.Log.LogErrorWithCodeFromResources (\"GetAssemblyIdentity.CouldNotGetAssemblyName\", new object[] {} )\n```\n\nis not good.\n\nIt comes from my memory, which is the original MS's code.\nIt should be re-writed.\n\nIs\n\n```\nLog.LogErrorFromException (ex);\n```\n\nOk?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657", "body": "I see. I've made it so.\nhttps://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nbut... I don't know how to include [this unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) into Mono sources.\n\nI think it should be located [here](https://github.com/mono/mono/tree/master/mcs/class/Microsoft.Build.Tasks/Test) but it can't be tested like [CreateItemTest.cs](https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Tasks/Test/Microsoft.Build.Tasks/CreateItemTest.cs)...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351", "body": "Sorry, invalid account. I'll make a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584", "body": "@kumpera, @migueldeicaza,\n\nFWIW, this was the only stopper I encountered while building mono on FreeBSD 10.1 x86 and ia64, fresh installed with llvm+clang v3.7: https://github.com/dotnet/roslyn/issues/2844#issuecomment-129221304. \nPlease consider this PR for merging.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562", "body": "@alexrp, will this patch be available in mono v.next tagged release code? FreeBSD support is varying between 99-100% with current master. These small but tricky patches stick it to 100% and above. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031", "body": "@atsushieno, can this land in next release of mono?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355", "body": "@saper, seems like the exception is coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024, which has a caller that implicitly appear at one instance in the call stack you provided which leads to https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1274 (which implicitly relies on your changes in `ParseTZBuffer` method).\n\nLooking the the reference resource for `CreateAdjustmentRule` method: http://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,43a6662ca1445f1f,references, it seems like `startDate` and `endDate` are assigned to the `AdjustmentRule()` object as is and the object is returned. Which means there is something weird going on with `time_types` etc. that is somehow confusing the `TimeSpan` and further affecting the dst_end/dst_start `.Year` resolution. \n\nMight be a good idea to assert dst_start/end for equality before calling `CreateAdjustmentRule` (or write to console/file etc.) to find out if the `.Year` differs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876", "body": "As noted in my previous comment, it is `InvalidTimeZoneException` coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877", "body": "@akoeplinger, once the assertion failures are sorted out, will it make sense to have a submodule to dotnet/coreclr tests directory so CI can also test the future PRs. Probably with a thin wrapper to translate error codes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035", "body": "(This diff is hard to read, but it simply removes the `using` statement and fixes the code indentation)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098", "body": "Arguably, you could push this onto the client and say, \"You must cancel the token _and_ Dispose the `HttpMessageResponse.Content` to truly cancel the network connection\", but this ends up being fairly difficult in practice since most people will end up using `ReadAsString` which doesn't offer cancelation, and I suspect the vast majority of people would mess this up.  Activating the cancelation token that you pass into SendAsync should close the underlying network connection, regardless of whether the call has returned or not. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761", "body": "You're technically correct but this is much more difficult to program against. Now there are two separate ways to cancel the same underlying network connection that was created in this operation (the other being to dispose the HttpContent), depending solely on time. This makes for race-conditiony code that has been pushed up to every client of HttpClient, instead of having a single, guaranteed way to cancel the underlying network connection as long as it's open.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653", "body": "@akoeplinger No clue\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803", "body": "So, here's an even more compelling reason that the existing behavior is Problematic, it also makes handling cancellation very difficult for _clients_ of HttpClient. Consider the following code:\n\n``` cs\npublic Task<string> DownloadTwoUrls(string file1, string file2, CancellationToken ct)\n{\n    var resp1 = await myHttpClient.Get(\"/foo/\" + file1, ct);\n    var content1 = resp1.Content.ReadAsStringAsync();\n\n    // ct was **Disposed** because of the Disposal of the linked token, ct is now trashed\n    // The second half of this is now silently uncancelable. \n    var resp2 = await myHttpClient.Get(\"/foo\" + file2, ct);\n    return content1 + (await resp2.Content.ReadAsStringAsync());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931", "body": "@marek-safar (Sorry about the blast from the past), It actually does, in `UnregisterLinkedTokens`: https://github.com/mono/mono/blob/a31c107f59298053e4ff17fd09b2fa617b75c1ba/mcs/class/corlib/System.Threading/CancellationTokenSource.cs#L269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569", "body": "Hm. Apparently my princess is in another castle.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "atsushieno": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115348", "body": "> What about using [Category (\"NotDotNet\")]?\n> Thought about that before making the change, but I'm not sure this code + nunit 2.4.8 should really work under any system.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123074", "body": "umm, if it's something critical, let's please revert the change. I got my second dev. laotop (macbook) broken(!!) and am unable to do it by myself :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/128272", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144442", "body": "For reference, the correct bug # is 638098.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144475", "body": "Looks like this caused dist failure on 2.6 http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5020269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jbevain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/116030", "body": "Short version: as per Paolo's request.\nLong version: I started a discussion by asking why the branch cost was so high, wondering why we couldn't inline properties such as:\n\nget { return is_foo ? foo : bar; }\n\nAnd if we couldn't include the displacement in the cost rather. Paolo said there was no need for that, just to reduce the branch cost which was set to high.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/116030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/138529", "body": "Well, the test case is the unit test which passes on .net. But I'll revert this one as well as the runtime support, as it triggers regressions: #635349 and #605936. Will have to investigate more.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/138529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139373", "body": "Actually it's \u00abjust\u00bb a regression introduced by my change, and it's not specific to moonlight. I'm working on fixing it for everyone. Thanks for reporting the issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139401", "body": "This should be fixed in master by 85c0976c3d913ba16a13d44159f8e7591732df56. Could you try to run the moon-unit test with it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ajorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121447", "body": "This commit breaks the build http://build.mono-project.com/ViewLane.aspx?lane_id=62&host_id=23&revision_id=90989\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/122189", "body": "This commit breaks the build:\n\nSystem.Collections.Concurrent/BlockingCollection.cs(54,17): error CS0246: The type or namespace name `ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\nSystem.Collections.Concurrent/BlockingCollection.cs(55,17): error CS0246: The type or namespace name`ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/128154", "body": "This commit breaks the build.  It appears you neglected to add a file:\n\nmake[8]: **\\* No rule to make target `System.ServiceModel.Discovery.Version11/IDiscoveryProxyContract11.cs', needed by`../../class/lib/net_4_0/System.ServiceModel.Discovery.dll'.  Stop.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144680", "body": "MCS     [net_4_0] Microsoft.CSharp.dll\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1502: The best overloaded method match for `Mono.CSharp.Expression.MemberLookup(Mono.CSharp.ResolveContext, Mono.CSharp.TypeSpec, Mono.CSharp.TypeSpec, string, int, Mono.CSharp.Expression.MemberLookupRestrictions, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1503: Argument`#6' cannot convert `bool' expression to type`Mono.CSharp.Expression.MemberLookupRestrictions'\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,25): error CS0825: The contextual keyword `var' may only appear within a local variable declaration\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,66): error CS0841: A local variable`expr' cannot be used before it is declared\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1502: The best overloaded method match for `Mono.CSharp.BoolConstant.BoolConstant(bool, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1503: Argument`#1' cannot convert `object' expression to type`bool'\nCompilation failed: 6 error(s), 0 warnings\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144716", "body": "sgen-gc.c:202:37: fatal error: metadata/sgen-cardtable.h: No such file or directory\nPlease remember to dist new files. Fixed in 5cab581.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/146235", "body": "Something is wrong w/ this commit http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5124512\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/146235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121594", "body": "It looks like grendel forgot to backport the configure.in portion of 8de7037b16020bb919579c75e3be981152a37ff8\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144697", "body": "@eno\n\nIt looks like git didn't cherry-pick the fakepoll.h.  Fixed\n\n@gonzalop\n\nsupport cannot dep on mono.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "grendello": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121619", "body": "So I did, sorry about that. Fixed in 9e0162ea534e2dc49d3f134b80efc6d88670434b\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/122578", "body": "This commit breaks two tests in System.Web (both 2.0 and 4.0 profiles):\n\n```\nTest Case Failures:\n1) MonoTests.System.Web.HttpUtilityTest.UrlEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlEncode () [0x00007] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:718\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n\n2) MonoTests.System.Web.HttpUtilityTest.UrlPathEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback  fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncodeChar (Char c, System.IO.Stream result) [0x00010] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:647\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncode () [0x00037] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:744\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "garuma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/122230", "body": "Fixed in af30815fc99adaa315c2\n\nSorry\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/133975", "body": "I think that the change here is responsible for blocking the corlib test suite with Semaphore tests still only on 32bits. I can't verify that myself (everything here is x86-64) but I'm guessing from the commit log and wrench results.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/133975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "spouliot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/135556", "body": "Got a test case for it ? you added 2 unit tests but marked them [Category(\"NotWorking\")]\nhttp://lists.ximian.com/archives/public/mono-patches/2010-August/175767.html\n\nActually the instance case got the NotWorking removed later... but the static case (still NotWorking in mcs) fails a unit test in moonlight which works on SL\nRemoving lines 193-196 fix this (as far as moonlight is concerned)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/135556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137401", "body": "This commit breaks the moonlight profile (and likely other similar profiles) since moonlight depends on gmcs (before using smcs) to build corlib\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139451", "body": "Fixed, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "gonzalop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/144644", "body": "mono-poll.[ch] have a mono_poll() that can be based on either select() or poll() depending on the system...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "baulig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262", "body": "Fixed, thank!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}, "3": {"Nihlus": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6577", "title": "Mono debugger crashes in native code when inspecting interface instances produced by Config.Net", "body": "## Steps to Reproduce\r\n\r\n1. Download the attached reproduction project\r\n2. Restore nuget packages and compile\r\n3. Run the project\r\n4. Observe the expected output\r\n5. Debug the project \r\n6. Inspect the local variable in the main method.\r\n7. Observe the runtime crash.\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nAt present, when inspecting variables containing an instance of a proxy interface created by Config.Net, the Mono debugger crashes in native code. If the variable is not inspected, the program behaves as expected and prints the stored value.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\nThe program should run as expected, and the Mono debugger should be able to inspect the variables without crashing.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[x] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n```\r\nMono JIT compiler version 5.4.1.6 (tarball Wed Nov  8 20:35:02 UTC 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       altstack\r\n\tNotifications: epoll\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          supported, not enabled.\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\nhttps://gist.github.com/Nihlus/d3274a9cce07728c3b36ce2da8082492\r\n\r\n### Attachments\r\n[CrashRepro.zip](https://github.com/mono/mono/files/1643632/CrashRepro.zip)\r\nhttps://github.com/aloneguid/config\r\nIssue on the Config.Net repository: https://github.com/aloneguid/config/issues/49\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rombersoft": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6573", "title": "Deadlock in delegate which created used ", "body": "## Steps to Reproduce\r\n\r\n1. Assembly computer with motherboard msi 760GM-p23. On other motherboards all works fine!\r\n2. Install 4.8.8-2-ARCH #1 SMP PREEMPT Thu Nov 17 15:09:32 CET 2016 i686 GNU/Linux\r\n3. Install mono 5.8\r\n4. git clone from https://github.com/MonoGame/MonoGame\r\n5. Create project monogame with some animation\r\n\r\n<!--\r\nVideo number one about problem https://www.dropbox.com/s/dd1t83kisa8z8xx/video.mp4?dl=04\r\nYou can see on this video that application stop draw until somebody touch a touchscreen\r\n\r\nVideo number two about problem https://www.dropbox.com/s/fio3ajc3qhpne2a/VID_20180117_103256.mp4?dl=0 \r\nYou can see on this video that my application works fine when above it placed another window (in current case this is urxvt terminal emulator). Take attention on time as seconds run when I place urxvt window above my application and seconds stop when my application is on top of all windows\r\n-->\r\n\r\n## Current Behavior\r\n\r\n<!--\r\nApplication sometimes is not drawn. But if you click mouse or press keyboard button application continue to draw but not long time and stop again\r\n-->\r\n\r\n## Expected Behavior\r\nApplication must draw animation\r\n\r\n## Description and other observation\r\nMonogame is game engine which in cycle runs methods Draw and Update. \r\nAt start I thought that problem in monogame, I even create topic here http://community.monogame.net/t/drawing-stops/9799\r\nBut when I tried with old version monogame (2.5) on mono 5.4 version that problem still exists.\r\nBut when I tried with old version monogame (2.5) on mono 2.10 version that problem does not exist.\r\nI can not use monogame 3.6 on mono 2.10 because 2.10 version does not support 4.5 framework and monogame 3.6 does not work on 4.0 framework\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[*] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n<!--\r\n5.2 and 5.8\r\n-->\r\n\r\n### Stacktrace\r\n\r\nI can not reproduce Stack trace. But I know place where drawing thread stops.\r\nLook at here\r\nhttps://github.com/MonoGame/MonoGame/blob/master/MonoGame.Framework/Graphics/GraphicsDevice.OpenGL.cs#L356\r\nI am sure that it is problem on new mono.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eatdrinksleepcode": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6560", "title": "Incorrect behavior for Take/Skip/Concat combination", "body": "## Steps to Reproduce\r\n\r\n```\r\nvar inputs = new [] { \"left\", \"right\" };\r\nvar outputs = inputs.Take(1)\r\n                    .Concat(Enumerable.Repeat((object)\"middle\", 1))\r\n                    .Concat(inputs.Skip(1)).ToArray();\r\nforeach(var item in outputs) {\r\n\tConsole.WriteLine(item);\r\n}\r\n```\r\n## Current Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nleft\r\n```\r\n\r\n## Expected Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nright\r\n```\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.4.1.7\r\n\r\n## Notes\r\n\r\n_This is a regression_: the same code works correctly under Mono 4.8.1.\r\n\r\nNote the cast to ```object``` inside the ```Enumerable.Repeat```. This is necessary to reproduce the bug; without the cast, the code works correctly.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6555", "title": "Process.WaitForExit() gets slower the larger your open file limit (ulimit -n) is on Linux", "body": "## Steps to Reproduce\r\n\r\n1. Compile this: `csc test.cs`:\r\n\r\n```csharp\r\npublic static class Program {\r\n    public static int Main () {\r\n        for (int i = 0; i < 100; i++) {\r\n            var p = System.Diagnostics.Process.Start (\"echo\", \"hello\");\r\n            if (!p.WaitForExit (10000)) return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```\r\n2. `$ (ulimit -n 1000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m0.402s\r\nuser\t0m0.028s\r\nsys\t0m0.184s\r\n```\r\n3. `$ (ulimit -n 100000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m1.277s\r\nuser\t0m0.380s\r\nsys\t0m0.592s\r\n```\r\n4. `$ (ulimit -n 1000000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m8.758s\r\nuser\t0m3.424s\r\nsys\t0m4.424s\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt gets slower the higher your ulimit -n is.\r\n\r\nNote: you may need to change your system settings (`/etc/security/limits.conf`) to allow higher limits.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNot getting slower.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04/16.04\r\n[ ] Windows\r\n\r\n**Version Used**: master, 5.8.088 and 4.2.1 (so either a very old bug or something outside our control)\r\n\r\nThis was the root cause behind an issue (https://github.com/mono/mono/pull/6537) we had on Jenkins because the Azure Linux VM builders had ulimit -n set to 1048576.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6548", "title": "Frequent test failures of ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test", "body": "## Steps to Reproduce\r\n\r\n1. Compile Mono on Linux i386\r\n2. `make -C mcs/class/corlib run-xunit-test`\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nFrequent test failure in System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test: https://github.com/mono/corefx/blob/dfd98e7113a99708f4c9ed063a8c481f838aa8d3/src/System.Threading/tests/ThreadLocalTests.cs#L192-L225\r\n\r\nThis seems to only occur on i386 and on Linux: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=ubuntu-1404-i386/\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNo test failure.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04\r\n[ ] Windows\r\n\r\n**Version Used**: master\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\n\r\n```\r\nAssert.False() Failure\r\nExpected: False\r\nActual:   True\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\n  at System.Threading.Tests.ThreadLocalTests+ThreadLocalWeakReferenceTest.Run () [0x0001c] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:216 \r\n  at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference () [0x00005] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:224 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6523", "title": "Remove obsolete assemblies in next major version bump", "body": "Tracking issue for assemblies to remove once we can do another breaking change, i.e. when we do Mono 6.0.\r\n\r\n- [ ] IBM.Data.DB2.dll, replaced by NuGet package\r\n- [ ] ICSharpCode.SharpZipLib.dll, replaced by NuGet package, fixes problems like  https://bugzilla.xamarin.com/show_bug.cgi?id=59304\r\n- [ ] Compat.ICSharpCode.SharpZipLib.dll (old copy of above)\r\n- [ ] Commons.Xml.Relaxng.dll, replaced by NuGet package\r\n- [ ] Mono.C5.dll, replaced by NuGet package\r\n- [ ] RabbitMQ.Client.dll, replaced by NuGet package\r\n- Very old copy of Rx.NET, replaced by NuGet packages\r\n  - [ ] System.Reactive.Core.dll\r\n  - [ ] System.Reactive.Debugger.dll\r\n  - [ ] System.Reactive.Experimental.dll\r\n  - [ ] System.Reactive.Interfaces.dll\r\n  - [ ] System.Reactive.Linq.dll\r\n  - [ ] System.Reactive.Observable.Aliases.dll\r\n  - [ ] System.Reactive.PlatformServices.dll\r\n  - [ ] System.Reactive.Providers.dll\r\n  - [ ] System.Reactive.Runtime.Remoting.dll\r\n  - [ ] System.Reactive.Windows.Forms.dll\r\n  - [ ] System.Reactive.Windows.Threading.dll\r\n- Very old copy of ASP.NET MVC framework, replaced by NuGet packages\r\n  - [ ] System.Web.Http.dll\r\n  - [ ] System.Web.Http.SelfHost.dll\r\n  - [ ] System.Web.Http.WebHost.dll\r\n  - [ ] System.Web.Mvc.dll\r\n  - [ ] System.Web.Razor.dll\r\n  - [ ] System.Web.WebPages.Deployment.dll\r\n  - [ ] System.Web.WebPages.dll\r\n  - [ ] System.Web.WebPages.Razor.dll\r\n  - [ ] WebMatrix.Data.dll\r\n  - [ ] Microsoft.Web.Infrastructure.dll\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6513", "title": "SocketTest.AcceptBlockingStatus is flaky on ARM", "body": "It failed 47 times in the last two weeks on the armel, armhf and arm64 master lanes with this stack trace:\r\n\r\n```\r\nMESSAGE:\r\nSystem.Net.Sockets.SocketException : Connection timed out\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Sockets.Socket.Connect (System.Net.EndPoint remoteEP) [0x000b0] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/System.Net.Sockets/Socket.cs:886 \r\n  at MonoTests.System.Net.Sockets.SocketTest.BlockingConnect (System.Boolean block, System.Int32 port) [0x00033] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:136 \r\n  at MonoTests.System.Net.Sockets.SocketTest.AcceptBlockingStatus () [0x00006] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:171 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/0c59209931f618d7811e4e0ff602e47f6276ef3e", "message": "[tests] Disable weak-fields.exe on LLVM as well"}, {"url": "https://api.github.com/repos/mono/mono/commits/a99d7f4b1318091354ecc12c0be1aa97e34ae2c0", "message": "[ci] Use correct -arch syntax in CFLAGS on OSX (#6570)\n\nIn c7d8d247c35b6fa08bbc7e36d2f44fefcdf48b5a I unified how we're\r\npassing -arch in CFLAGS to \"-arch=XXX\" since the original change\r\nin 63a49e9eb8b569c6d5265168101982f5557c52bb mixed the formats.\r\n\r\nTurns out the correct syntax is \"-arch XXX\" instead and it broke\r\nthe ccache build in bockbuild because it complained about the\r\nunknown format.\r\n\r\nAlso add LDFLAGS in the amd64 case to match what we have in bockbuild."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430", "body": "nit: in most templates I've seen the current/problematic behavior comes before the expected one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553", "body": "I'd rather instruct them to specifically run `mono --version` so we get full commit hash etc. which is included there.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037", "body": "not sure we need to mention both backtrace and stacktrace, they're used pretty much interchangeably anyway.\r\n\r\nstacktrace seems to be more commonly known from what I've seen.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145", "body": "`macOS`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052", "body": "don't you get this: \r\n![image](https://user-images.githubusercontent.com/1376924/33861614-14d2eef2-deb5-11e7-81a3-3c8a53f87857.png) ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598", "body": "What about we just remove this and the \"expected behavior\" description below? It doesn't add anything which isn't clear from the section header anyway and would make the template simpler.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735", "body": "maybe make it \"repro code/solution\" to be clear", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328", "body": "use `git://` here like the other submodules\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595", "body": "This must use `git://` instead of `git@` otherwise it won't be accessible to people without push access to that repo.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942", "body": "This must be `git://` as `git@` requires authentication.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928", "body": "typo: `borinssl`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077", "body": "`NuGet.BuildTasks` should be `nuget-buildtasks`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472", "body": "this no longer exists", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665", "body": "this is called `/external/binary-reference-assemblies` now", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543", "body": "should we keep this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861", "body": "while you're at it you could move the CODEOWNERS to the .github folder as well. And maybe CONTRIBUTING.md too?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757", "body": "add the same in the CROSS_COMPILING section above too to make it consistent.\n\nActually, I'm wondering if we still need this separation when both if branches are the same anyway?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexrp": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6546", "title": "Miscellaneous coverage profiler cleanup tasks", "body": "Opening this as a sort of meta-bug to keep track of some relatively small issues with the coverage profiler that should be addressed over time.\r\n\r\n- [ ] When we're comfortable bumping the output format version, it would be nice to change the overall structure to be more easily digestible for readers. For example, all `class` elements should be under an `assembly` element, all `method` elements should be under a `class` element, etc.\r\n- [ ] Type names (and signatures in general) should be fully qualified in the output, and not use C# names like `int`, `long`, etc.\r\n- [ ] The way we output generic definitions and generic instantiations needs to be cleaned up and made consistent. For example, if a program has a method `Foo<T> ()` and executes the instantiation `Foo<int> ()`, the output file will mention `Foo<int> ()` with all the correct execution counts, but it will also mention the uninstantiated `Foo<T> ()` with all-zero counts, as if it was uncovered. We should only mention the generic definition (with all the counts from all instantiations merged), not every single instantiation.\r\n- [ ] The data structures (or rather, lack thereof) in the profiler can be simplified. There's no particular reason we need to use a bunch of hash tables to map everything back and forth the way we do. The code would be much easier to read and maintain if we just had some proper structures for representing loaded assemblies, classes, and methods.\r\n- [ ] We should resolve method signatures and such ahead of time instead of doing it when we're dumping coverage data at shutdown. Resolving method signatures during shutdown can cause assemblies to be loaded, and metadata from those will be missing in the output as a result.\r\n- [ ] There's some commented out code relating to zipping of the output. This should either be implemented or removed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3491b7b604c2d1741e1d261a3315aa0e5a554d0c", "message": "[profiler] Write out all uncovered classes/methods in a loaded image. (#6544)\n\n* [runtime] Export mono_class_get_checked () for use in profilers.\r\n\r\n* [runtime] Expand mono_method_get_header_summary () to collect more info.\r\n\r\nIt now collects all the trivially-accessible header data that doesn't require\r\nchasing down other metadata.\r\n\r\n* [profiler] Use mono_method_get_header_summary () in the coverage code.\r\n\r\nWe only need code start and size information, not all the data that is present\r\nin the header. By switching to this function, we avoid all the side effects\r\nthat come with resolving local variables and exception clauses (which can even\r\nresult in loading assemblies in the worst case).\r\n\r\n* [profiler] Write out all uncovered classes/methods in a loaded image.\r\n\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60225\r\n\r\nThis required a bit of refactoring and some workarounds for various special\r\ncases. This also fixes some race conditions with respect to how data was\r\ninserted into the lock-free hash tables and queues."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958", "body": "Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974", "body": "Minor style issue: Spaces here instead of tabs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870", "body": "s/mono-lite/monolite/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873", "body": "This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6530", "title": "Mono's MSBuild is slow on Mac due to constant IO", "body": "## Steps to Reproduce\r\n\r\n1. See https://github.com/Microsoft/msbuild/blob/30b19e9f2cefb6d9675d660c8bb8b317c06ff9a1/src/Shared/NativeMethodsShared.cs#L553-L556\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nIO is done to check whether the platform is OS X.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nIO should be done at most once, or some other detection mechanism should be used. (pinvoke libc and get OS name)\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.168 (pull-request-6404/6f02ba66ba8 Thu Jan  4 16:11:23 EST 2018)\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\nProbably should be backported to all releases\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexander-vi": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6525", "title": "[Linux] [mipsel] Crash on any exception in C# code", "body": "## Code to reproduce\r\n```C#\r\nusing System;\r\n\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                  throw new ArgumentNullException();\r\n            }\r\n            catch\r\n            {\r\n                Console.WriteLine(\"Error!\");\r\n                Environment.Exit(1);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\nCrash with the following stack:\r\n```\r\n$ mono test\r\nStacktrace:\r\n\r\n\r\nNative stacktrace:\r\n\r\n\tmono() [0x4c7780]\r\n\r\nDebug info from gdb:\r\n\r\n[New LWP 17157]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/mipsel-linux-gnu/libthread_db.so.1\".\r\n0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n  Id   Target Id         Frame \r\n  2    Thread 0x76d43460 (LWP 17157) \"mono\" 0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n* 1    Thread 0x775618b0 (LWP 17156) \"mono\" 0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n\r\nThread 2 (Thread 0x76d43460 (LWP 17157)):\r\n#0  0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x7744432c in sem_wait@@GLIBC_2.2 () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#2  0x00688164 in mono_sem_wait ()\r\nwarning: GDB can't find the start of the function at 0x5d84b2.\r\n\r\n    GDB is unable to find the start of the function at 0x5d84b2\r\nand thus can't determine the size of that function's stack frame.\r\nThis means that GDB may be unable to access that stack frame, or\r\nthe frames below it.\r\n    This problem is most likely caused by an invalid program counter or\r\nstack pointer.\r\n    However, if you think GDB should simply search farther back\r\nfrom 0x5d84b2 for code which looks like the beginning of a\r\nfunction, you can increase the range of the search using the `set\r\nheuristic-fence-post' command.\r\n#3  0x005d84b4 in ?? ()\r\n\r\nThread 1 (Thread 0x775618b0 (LWP 17156)):\r\nwarning: GDB can't find the start of the function at 0x4c785a.\r\n#0  0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x004c785c in ?? ()\r\n\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n```\r\n\r\nPlease note that other C# features looks like work fine. I've managed to compile and launch several other examples.\r\n\r\n\r\n\r\n## Expected Behavior\r\nMessage \"Error!\" is printed.\r\n\r\n### System information\r\nMono is installed from packages as \"mono-devel\".\r\n```\r\n$ mono --version\r\nMono JIT compiler version 3.2.8 (Debian 3.2.8+dfsg-10)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       normal\r\n\tNotifications: epoll\r\n\tArchitecture:  mips\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tGC:            sgen\r\n```\r\n\r\n```\r\n$ cat /proc/cpuinfo \r\nsystem type\t\t: Baikal-T Generic SoC\r\nmachine\t\t\t: T-Platforms mITX Board\r\nprocessor\t\t: 0\r\ncpu model\t\t: MIPS P5600 V3.0  FPU V2.0\r\nBogoMIPS\t\t: 597.60\r\nwait instruction\t: yes\r\nmicrosecond timers\t: yes\r\ntlb_entries\t\t: 576\r\nextra interrupt vector\t: yes\r\nhardware watchpoint\t: yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]\r\nisa\t\t\t: mips1 mips2 mips32r1 mips32r2\r\nASEs implemented\t: vz msa eva\r\nshadow register sets\t: 1\r\nkscratch registers\t: 3\r\npackage\t\t\t: 0\r\ncore\t\t\t: 0\r\nVCED exceptions\t\t: not available\r\nVCEI exceptions\t\t: not available\r\n```\r\n\r\n```\r\n$ uname -a\r\nLinux tclient 3.19.12.23-mitx #1 SMP Thu Nov 2 19:47:08 UTC 2017 mips GNU/Linux\r\n```\r\n\r\n```\r\n$ cat /etc/*-release\r\nPRETTY_NAME=\"Debian GNU/Linux 8 (jessie)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"8\"\r\nVERSION=\"8 (jessie)\"\r\nID=debian\r\nHOME_URL=\"http://www.debian.org/\"\r\nSUPPORT_URL=\"http://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n```\r\n\r\nI know that this version of Mono is a bit old, but maybe you can provide me some workaround or this issue is present in the current version. Hope this bugreport will be useful for you.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6519", "title": "System.Data tests failures on watch", "body": "## Steps to Reproduce\r\n\r\n1. Get 2017-12 XI monthly integration\r\n2. \r\n3. \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nFaling tests\r\n```\r\n[FAIL] DbDataAdapterTest.AddToBatch : System.NotSupportedException : Specified method is not supported. \r\n[FAIL] SqlCommandBuilderTest.CatalogLocation_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogLocationTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOption_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOptionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_PrefixSuffix_NoMatch : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_UnquotedIdentifier_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull1 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull2 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull3 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull4 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull5 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull6 : An unexpected exception type was thrown \r\n[FAIL] SqlCommandTest.Clone : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandText : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout_Value_Negative : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandType_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ParameterCollectionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ResetCommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.BeginTransaction_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ChangeDatabase_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ClearPool_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_ConnectTimeout_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Database_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_DataSource_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PacketSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Password_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PersistSecurityInfo_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserID_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2_ConnectionString_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.CreateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Empty : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Whitespace : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ServerVersion_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectConnection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.DeleteCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.InsertCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.SelectCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.UpdateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.CompareInfo : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DBNull : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor7 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Boolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Byte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_ByteArray : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Decimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Double : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Enum : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Guid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Object : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Single : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_String : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.LocaleId : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterName : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterNullTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetSqlDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumn : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumnNullMapping : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBinary : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBoolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlByte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDecimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDouble : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlGuid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlMoney : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlSingle : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlXml : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlValue : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Value : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.XmlSchemaTest : System.PlatformNotSupportedException was expected \r\nTests run: 1887 Passed: 1755 Inconclusive: 0 Failed: 132 Ignored: 163\r\n```\r\n\r\n## Expected Behavior\r\n\r\nNo failures\r\n\r\n### On which platforms did you notice this\r\n\r\n[ x] watchOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**: 2017-12 branch\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c282af6df5ffbc7fc4ec2ab857299c8d455f9d72", "message": "[mcs] Implements C# 7.0 discards"}, {"url": "https://api.github.com/repos/mono/mono/commits/370105c5e0a741b187c5040c137ae0b44e3a7bc4", "message": "[profiler] Don't double escape special characters. (#6534)\n\nThe output of parse_generic_type_names is processed by escape_string_for_xml and\r\nwe were double escaping `&` character"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6551", "title": "Bump linker", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6476", "title": "Weak field support backport", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6395", "title": "Bump corefx", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/128022", "body": "It should be bellow licence text\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137435", "body": "you should fix moonlight profile to use bootstrap gmcs from basic profile and not 2.0\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057", "body": "Made small tweak but `mono --version` is useful only for people running Mono directly. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027", "body": "My worry is that then people would just skip the section", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555", "body": "Should use git::// protocol", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687", "body": "How big is the submodule, it's still not accessible for me", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904", "body": "I didn't want to move that one as I don't know if I need to change the paths and secondly, CODEOWNERS seems to be useful on its own", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607", "body": "I don't know what's the purpose of that, seems like what should be on mono github wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rodrmoya": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6512", "title": "Missing counters/perf counters in Mono 5.8 with new profiler arguments", "body": "## Steps to Reproduce\r\n\r\n1. Run any desktop mono app with: `/Library/Frameworks/Mono.framework/Versions/Current/bin/mono --gc=sgen --profile=log:heapshot=ondemand,nolegacy,jit,gc,nogcalloc,gcroot,gcmove,counter,output=\"/var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd\" app.exe`\r\n2. Let it run for a few seconds and stop\r\n3. `mprof-report /var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd` shows no counters\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nUsing the old runtime arguments (`alloc,heapshot=ondemand,counters`) produces a MLPD with counters on it.\r\n\r\n## Expected Behavior\r\n\r\nCounters should be emitted in the MLPD file\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n```$ mono --version\r\nMono JIT compiler version 5.8.0.103 (2017-10/1359c52fc6e Wed Dec 20 10:52:54 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OleksandrChizh": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6498", "title": "Mono issue with TLS due to Client Certificates", "body": "Hi. We have a .NET 4.0 application for sending https(TLS 1.0) requests using HttpWebRequest. The application works correctly with the windows version of Mono but when we send a request on Ubuntu 16.04 using Mono 5.4.1.6 we get an error, see here: https://pastebin.com/hP9dZvuF\r\nJust to test the app we sent a request to https://www.google.com, https://github.com, etc. and we got no errors but when we send a request to required server the issue appears.\r\nWe tried to import required certificates manually using certmgr and mozroots but it didn't solve the issue.\r\nWe are thinking it's an issue of Mono because we compiled the same code with .NET Core and it works well. Is there any chance to solve this issue?\r\nThank you!\r\n\r\n> CQNET: Error getting response stream (ReadDone1): ReceiveFailure - Error\r\n> System.Net.WebException: Error getting response stream (ReadDone1): ReceiveFailure ---> System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:100000b6:SSL routines:OPENSSL_internal:NO_RENEGOTIATION\r\n>   at /build/mono-5.4.1.6/external/boringssl/ssl/s3_pkt.c:446\r\n>   at Mono.Btls.MonoBtlsContext.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Boolean& wantMore) [0x00050] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.ProcessRead (Mono.Net.Security.BufferOffsetSize userBuffer) [0x00011] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream:ProcessRead (Mono.Net.Security.BufferOffsetSize)\r\n>   at Mono.Net.Security.AsyncReadRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x0000c] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<ProcessOperation>d__24.MoveNext () [0x000ff] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<StartOperation>d__23.MoveNext () [0x0008b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream+<StartOperation>d__58.MoveNext () [0x001bf] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter1[TResult].GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Threading.Tasks.TaskToApm.End[TResult] (System.IAsyncResult asyncResult) [0x0002e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.EndRead (System.IAsyncResult asyncResult) [0x00000] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.WebConnection.ReadDone (System.IAsyncResult result) [0x0001b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Net.HttpWebRequest.EndGetResponse (System.IAsyncResult asyncResult) [0x00058] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.HttpWebRequest.GetResponse () [0x0000e] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at k.s (System.String bqi, System.Int32 bqj) [0x00043] in <31d60139ab8f4173b33ee35d33fa2fdb>\r\n>", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6498/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luhenry": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6490", "title": "Reenable weak-fields.exe test", "body": "Extracted from https://bugzilla.xamarin.com/show_bug.cgi?id=60973\r\n\r\nIt fails with the following output\r\n\r\n```\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 16946264\r\n```\r\n\r\n@vargaz noted that it's the test that seems flaky since it doesn't expect the object to be randomly retained.\r\n\r\nIt was disabled with https://github.com/mono/mono/pull/6191", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6567", "title": "[tests] Output XUnit tests to mcs/class/lib/$(PROFILE)/tests like NUnit tests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6500", "title": "[sdks] Move some code supporting the BCL from XA to Mono", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErwinVorenhout": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6477", "title": "GetActiveTcpConnections->state returns wrong status", "body": "I am trying to monitor an active TCP connection with the following code, when running on windows the _log.logInfo function will simply return established but when running on Mono 4.2.1 it will return \"Closed\", while the connection is established according: netstat -anp --tcp. \r\n\r\n```\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\r\ntcp        0      0 192.168.200.202:42685   192.168.200.218:18000   ESTABLISHED 23378/mono\r\n```\r\n\r\nThis is the code that I am using:\r\n```\r\nIPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();\r\nTcpConnectionInformation[] tcpConnections = ipProperties.GetActiveTcpConnections().Where(x => x.LocalEndPoint.Equals(_client.Client.LocalEndPoint) && x.RemoteEndPoint.Equals(_client.Client.RemoteEndPoint)).ToArray();\r\nif (tcpConnections != null && tcpConnections.Length > 0)\r\n{\r\n       TcpState stateOfConnection = tcpConnections.First().State;\r\n      if (_connected != 2)\r\n      {                              \r\n           if (stateOfConnection != TcpState.Established)\r\n           {\r\n                _log.logInfo(tcpConnections.First().RemoteEndPoint.ToString() + \"status:\" + \r\n                tcpConnections.First().State.ToString());\r\n                reConnect();\r\n           }\r\n      }\r\n}\r\n```\r\n\r\nThe output on windows when placing the log function above the if statement: \r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : established\r\n```\r\n\r\nWhile the output on Linux is:\r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : closed\r\n```\r\n\r\nI found out that Mono uses the ```/proc/net/tcp``` to read out the TCP/IP connections \r\nWhen trying to monitor the connection on remote addr 192.168.200.218  /proc/net/tcp returns the following:\r\n\r\n```  \r\nsl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode\r\n0: 0100007F:0CEA 00000000:0000 0A 00000000:00000000 00:00000000 00000000   111        0 1077650 1 0000000000000000 100 0 0 10 0\r\n1: 00000000:008B 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815396 1 0000000000000000 100 0 0 10 0\r\n2: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 17055 1 0000000000000000 100 0 0 10 0\r\n3: 00000000:01BD 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815395 1 0000000000000000 100 0 0 10 0\r\n4: 29CAA8C0:0016 DAC8A8C0:DBFB 01 00000080:00000000 01:00000015 00000000     0        0 2906153 3 0000000000000000 25 4 1 10 16\r\n```\r\nHere is number 4 the connection that I am trying to monitor(HEX DA C8 A8 C0  = decimal 192.168.200.218 ) the  state is  01 in the table.\r\n\r\n According the [kernel ](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h?id=HEAD) state 01 should be established so I am wondering where the state closed is comming from?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebasijan": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6471", "title": "PlatformNotSupportedException when calling LdapConnetion.Disconnect", "body": "Everything appears to be working fine (apart from the fact that retrieving a specific attribute should be way easier than iterating around all existing attributes - not sure why it was designed this way), but when I try to disconnect I get\r\n\r\n > PlatformNotSupportedException: Thread abort is not supported on this platform.\r\n\r\nThe code is pretty much exactly as taken from the Novell documentation, aprt from the fact that I am trying to just rerieve 2 specific attributes (name and logon time): \r\n\r\n\tvar users = new List<User>();\r\n\r\n\t// Creating an LdapConnection instance \r\n\tLdapConnection ldapConn= new LdapConnection();\r\n\r\n\t//Connect function will create a socket connection to the server\r\n\tldapConn.Connect(\"DOMAIN.com\",389);\r\n\r\n\t//Bind function will Bind the user object Credentials to the Server\r\n\tldapConn.Bind(\"DOMAIN\\\\_Bassi\",\"password\");\r\n\r\n\t// Searches in the Marketing container and return all child entries just below this\r\n\t//container i.e. Single level search\r\n\tLdapSearchResults lsc=ldapConn.Search(\"OU=Users,OU=MCS,OU=AU,OU=COMPANY,DC=DOMAIN,DC=com\",\r\n\t\t\t\t\tLdapConnection.SCOPE_ONE,\r\n\t\t\t\t\t\"objectClass=*\",\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse);\r\n\r\n\twhile (lsc.hasMore())\r\n\t{\r\n\t\tvar user = new User();\r\n\r\n\t\tLdapEntry nextEntry = null;\r\n\t\ttry \r\n\t\t{\r\n\t\t\tnextEntry = lsc.next();\r\n\t\t}\r\n\t\tcatch(LdapException e) \r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Error: \" + e.LdapErrorMessage);\r\n\t\t\t// Exception is thrown, go for next entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tConsole.WriteLine(\"\\n\" + nextEntry.DN);\r\n\r\n\t\tLdapAttributeSet attributeSet = nextEntry.getAttributeSet();\r\n\t\tSystem.Collections.IEnumerator ienum =  attributeSet.GetEnumerator();\r\n\r\n\t\tvar atts = attributeSet.ToArray().ToList();\r\n\r\n\t\twhile(ienum.MoveNext())\r\n\t\t{\r\n\t\t\tLdapAttribute attribute=(LdapAttribute)ienum.Current;\r\n\t\t\tif(attribute.Name == \"sAMAccountName\")\r\n\t\t\t{\r\n\t\t\t\tuser.UserName = attribute.StringValue;\r\n\t\t\t} \r\n\t\t\telse if(attribute.Name == \"lastLogonTimestamp\")\r\n\t\t\t{\r\n\t\t\t\tuser.LastLogon = DateTime.FromFileTime(long.Parse(attribute.StringValue));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tusers.Add(user);\r\n\t}\r\n\r\n\tldapConn.Disconnect();\r\n\r\nAnd as soon as `Disconnect` is called I get the error. \r\n\r\nHas anyone else experienced this or know what might be going wrong?\r\n\r\n**stacktrace**\r\n\r\n\r\n\tSystem.Threading.Thread.Abort()\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.Dispose(bool disposing, string reason, int semaphoreId, InterThreadException notifyUser)\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.destroyClone(bool apiCall)\r\n\r\n\r\n\tNovell.Directory.Ldap.LdapConnection.Disconnect()\r\n\r\n\r\n\tLogonChecker.Managers.ActiveDirectory.GetADUsers() in ActiveDirectory.cs\r\n\t- \r\n\t64.                    }\r\n\t65.                }\r\n\t66.\r\n\t67.                users.Add(user);\r\n\t68.            }\r\n\t69.\r\n\t70.            ldapConn.Disconnect();\r\n\t71.\r\n\t72.            return users;\r\n\t73.\r\n\t74.            // LdapConnection ADconn = new LdapConnection();\r\n\t75.            // ADconn.Connect(\"DOMAIN.com\", 389);\r\n\t76.            // ADconn.Bind(\"DOMAIN\\\\_Bassie\", \"password\");\r\n\r\n\r\n\tLogonChecker.Controllers.UserController+<Index>d__2.MoveNext() in UserController.cs\r\n\t- \r\n\t20.        }\r\n\t21.\r\n\t22.        // GET: User\r\n\t23.        public async Task<IActionResult> Index()\r\n\t24.        {\r\n\t25.            var ad = new ActiveDirectory();\r\n\t26.            var users = ad.GetADUsers();\r\n\t27.\r\n\t28.            return View(users);\r\n\t29.            // return View(await _context.User.ToListAsync());\r\n\t30.        }\r\n\t31.\r\n\t32.        // GET: User/Details/5\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeActionMethodAsync>d__12.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaykrell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/2e029d691e3d5dc5a838f867f8feb472864a8109", "message": "Convert ves_icall_System_Threading_Thread_GetName_internal to coophandle. (#6435)\n\nConvert thread get name to coop/handle (ves_icall_System_Threading_Thread_GetName_internal)."}, {"url": "https://api.github.com/repos/mono/mono/commits/6a04dc64516bd91b7b45d4587b66988b0e9b1285", "message": "Convert K&R warning farm to ANSI and add static/const.\nAlso smaller part fix C-vs.-C++-isms."}, {"url": "https://api.github.com/repos/mono/mono/commits/b909a770208a45d92cab764ff94aecf3de9932f3", "message": "return 0 is generally redundant in configure.ac, as the construction (#6528)\n\nof the test program wraps the text in int main() { ... ; return 0; }"}, {"url": "https://api.github.com/repos/mono/mono/commits/bbf6b67483a96e0c22ffc54cee4f868a771e0ada", "message": "Fix some warnings. (#6526)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e4f6b185b2aab27d5d004626874215c30720651", "message": "Convert thread get/set/clear state to coop/handle. (#6389)\n\n* Coop-handle ves_icall_System_Threading_Thread_GetState, SetState, ClrState.\r\nAnd cleanup.\r\n\r\n* Favor mono_internal_thread_handle_ptr."}, {"url": "https://api.github.com/repos/mono/mono/commits/042056452acd763e31612b1ecf7c8d46742aa469", "message": "Remove ampersands on MonoError variables name \"error\", but not on the others."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6547", "title": "Performance counter coop/handle conversion, this time \"fixed\" instead of \"WrappedString\".", "body": "Machine handling is moved to managed -- in another PR as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6543", "title": "Move machine handling of performance counters from native to managed.", "body": "Just slightly less native code therefore.\r\n\r\nThe handling is trivial: returning false or 0 or null or an empty array, or in one surprising case ignoring it entirely.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6503", "title": "Understand PE32+, at least as much as PE32 is understood.", "body": "A number of other problems are noticed in the code but commented only.\r\nThis fixes https://bugzilla.xamarin.com/show_bug.cgi?id=56071", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6465", "title": "Support Windows 10 OS-supported unicode thread names.", "body": "As opposed to just the wierd debugger thread names.\r\n\r\nNot actually tested on Windows, granted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6443", "title": "Convert thread set name to coop/handle, passing fixed utf8 as suggested, and storing utf8.", "body": "Ludovic suggested passing fixed utf8, I'm not sure he meant to store it or not.\r\nResolve that before commit, and edit this comment down.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6406", "title": "Cleanup MonoError initialization.", "body": "Neuter most initializations. Make them asserts for now.\r\nGive names to ones that must stay.\r\nConvert dis, profiler, dump to new style.\r\nChange error_cleanup to end with initialization, so those explicit reinitializations can go away.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6394", "title": "A terser but clear style for zeroing a struct.", "body": "A terse but clear style for zeroing a struct.\r\nThis does not work portabily for unions, and will fail to compile for C++ if the first member is an enum (you have to cast). But otherwise zeros the entire thing.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6393", "title": "Some handle.h cleanup extracted from larger PR.", "body": "Some handle.h cleanup extracted from larger PR.  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6355", "title": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "body": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6298", "title": "convert mono/metadata/mono-perfcounters.c to use coop handles", "body": "convert mono/metadata/mono-perfcounters.c to use coop handles", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6268", "title": "Cleanup derived and expanded from PR 6247.", "body": "https://github.com/mono/mono/pull/6247/files\r\n\r\nThere is both dead and duplicated code.\r\nThe duplicated code can be cleaned up by the simple\r\ntransform of making error optional in a small number of places.\r\nThe dead code is very uninteresting and not worth carrying along.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumpera": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/232af8c206d9253d6f284d8ca960c174f4d7b9c7", "message": "Add CI to WebAssembly. This is PR based on top of # Only the top 3 commits matter for this PR: (#6488)\n\n* [WASM] Fix System.Core issues and disable broken tests.\r\n\r\n* [wasm] Fix cookie computation heap overflow. Use a local to make it thread safe.\r\n\r\n* [wasm] Disable System tests that don't work under WASM. Change the wasm profile to disable BSD sockets.\r\n\r\n* [wasm] Address reviewer feedback.\r\n\r\n* [wasm] Disable test that requires multiple threads.\r\n\r\n* [wasm] Add package target to wasm.\r\n\r\n* [wasm] Modify the runner to exit(1) if the test suite fails.\r\n\r\n* [wasm] Add CI configuration for WebAssembly.\r\n\r\n* [wasm] Fix issues found over review."}, {"url": "https://api.github.com/repos/mono/mono/commits/146346977cea8aaed2de8ab6a84c2a58b30aea24", "message": "Revert \"Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\" (#6557)\n\nThis reverts commit 411791c4696424d1ec9ec0f5258b6a0a4cc1885f."}, {"url": "https://api.github.com/repos/mono/mono/commits/411791c4696424d1ec9ec0f5258b6a0a4cc1885f", "message": "Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\n\nThis cute hack allow us to cut the budget of perf irrelevant blocks[1] while massively boosting those that are perf relevant[2].\r\n\r\nIt has a ton of missing features, like it doesn't detect nested loops, it doesn't take hints from inlined methods and it doesn't compute EH info.\r\nBeyond that, inlining budget is all but horrible, so there's ton of room for improvement here.\r\n\r\nResults are promising.\r\n\r\nA marginal improvements in benchmarks like Roslyn (2% user) while as much as 30% in micro benchmarks where the now bigger methods are in loop bodies.\r\nCode size with Roslyn changed from 5433242 to 5501751, IE extra 68.5k, or 1.2% more.\r\n\r\n[1] those ending in throw or in a catch handler\r\n[2] Loops"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6425", "title": "[wasm] Fix System.Core test suite plus a bug in the icall code. First pass at fixing System test suite.", "body": null, "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115935", "body": "Why are you reducing it? The changelog lacks proper justification.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123130", "body": "I believe we should replace all bblock shenanigans with just emitting an iconst and let the dce pass do its job\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "radical": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/06b9b48420c2dc4b5d4928217797efb34a56779b", "message": "Bump msbuild (#6569)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lewurm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5ba19cb47812dd356b19624d5bce380e514c3c64", "message": "[configure] fix altstack detection\n\nnewer linux headers hide the `struct sigaltstack` definition (e.g. on\nUbuntu 17.10), probably because it is encouraged to use `stack_t`\nanyway.\n\nWe use `stack_t` in our code anyway:\nhttps://github.com/mono/mono/blob/146346977cea8aaed2de8ab6a84c2a58b30aea24/mono/mini/mini-exceptions.c#L2379\n\nThe change introducing the `ifdef` was already wrong imho:\nhttps://github.com/mono/mono/commit/f6d15e14c234c505e4b5e4d5e46a2666370d2b4a"}, {"url": "https://api.github.com/repos/mono/mono/commits/f49e87d42a26593cfbc2f26db6b58516bdbe1b1a", "message": "[exceptions] remove restore_stack_prot from managed code (#6518)\n\nit's dead code. restore happens in `restore_soft_guard_pages` upon\r\nreturning from the altstack machinery."}, {"url": "https://api.github.com/repos/mono/mono/commits/e39acb7a0d8409a3797b389b047e7544683dcca7", "message": "[exception] propagte stackoverflow exception to managed code (#6458)\n\nwe return the address of the StackOverflowException object in\r\n`restore_soft_guard_pages`, so it ends up in the architecture specific\r\nresult register (e.g. %rax) where the exception handler expects it.\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=60862"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318", "body": "maybe it's a good place to explain that there are \"native backtraces\" and \"managed stacktraces\" and how to obtain them. Depending on the issue, those can be useful.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vargaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5e72bd6d01c90ad37231c9a16099abc90c575440", "message": "[sdks] Set more ios version variables to empty to fix the build. (#6571)"}, {"url": "https://api.github.com/repos/mono/mono/commits/511c2fd59cf12ad86e36bbae70ba2cf4e7d1a982", "message": "[sdks] Set XCODE_VERSION to 'Xcode' for now to fix the ios build. (#6568)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6501", "title": "[sgen] Use sgen_is_object_alive_for_current_gen () instead of sgen_is_object_alive (), the latter doesn't work for oldspace objects, causing the gc handle to be freed even through the object is still alive.", "body": "Fixes https://github.com/mono/mono/issues/6490.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6429", "title": "[runtime] Avoid building a separate static library, use the shared ob\u2026", "body": "\u2026ject files for the static library as well. (#5233)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6285", "title": "[WIP][jit] Implement --trace using the profiler infrastructure.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/134015", "body": "Should be fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/134015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "BrzVlad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/4490aa5112e6fa9c64ed1db222b880fbce31e176", "message": "[runtime] Fix jit info leak when having aot images loaded\n\nWhen we had a jit info table for aot images loaded in the domain, we would queue jit infos for freeing at domain unload time. This means leaking during entire application life.\n\nAdd comment for jit info freeing when having multiple tables.\n\nFixes #60986."}, {"url": "https://api.github.com/repos/mono/mono/commits/f162931e25c4cc1ad3d1a21117bb085089f168cd", "message": "[mini] Fix seq point info leak (#6522)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdecb851ff6bbf2d0602104d4db0df86b0c4b7ba", "message": "[sgen] Fix overflow on large arrays (#6542)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6559", "title": "[interp] Interp fixes", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a717f377f0b773ffa99dc711ab4e687b50be991a", "message": "Fix bug 60848: Incorrect unicode custom attribute decoding (#6481)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6326", "title": "Fix xamarin-android issue 1130 and add test", "body": "https://github.com/xamarin/xamarin-android/issues/1130 is caused by us not properly storing/restoring the Thread.CurrentPrincipal context when execution contexts are stored. Task (and I think ThreadPool?) store the current context when a job is queued and restore it when running the job, which carries over state like the thread's current principal.\r\n\r\nRight now we have a weird hand-rolled implementation of CurrentPrincipal that I don't quite understand. I think we should be using the CurrentPrincipal value stored in the BCL's CallContext, so I tried doing that and it seems to fix this without breaking anything.\r\n\r\nI'd appreciate getting suggestions on how we should go about doing this for real. Does anyone know why the old implementation works the way it does? I assume the serialization logic has something to do with appdomains, but I would not have expected principals for the current thread to be shared between domains.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radekdoulik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9a183f2c833a54e10fdcb09a3300d86e89ee85ae", "message": "[Tests] Do not assume order of returned interfaces\n\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\ninterfaces returned from the System.Type::GetInterfaces method, as the\norder is not guaranted. As described in the [documentation][0].\n\nAlso see github [issue][1] for more information and reasoning.\n\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\n[1]: https://github.com/xamarin/xamarin-android/issues/1186"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/acea63a9c1e845f66253a79835b5fb10086910a1", "message": "Improve GetArgumentName in MonoOptions. Fixes bug-60904 (#6506)\n\n* Rewrite Options.GetArgumentName to use Regex\r\n\r\n* code cleanup\r\n\r\n* code cleanup"}, {"url": "https://api.github.com/repos/mono/mono/commits/15fad0dac29d4dc6f453c188dbaa88c832d2e760", "message": "fix system.data ssl-bug on linux"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583", "body": "and probably worth mentioning that it is possible to attach files to github issues via drag-n-drop? (Cause it's unclear and there is no \"attach\" button) \ud83d\ude42 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mandel-macaque": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3f372d06eeb4b924a26871c91a2100205fb10550", "message": "[Tests] Skip some of the System.ServiceModel tests when using MOBILE (#6545)\n\nMobile does not support all clases found in System.ServiceModel, we skip\r\nthose tests of the not supported classes yet run all the others."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6576", "title": "[Tests] Skip a subset of the System.IdentityModel for iOS and Mac.", "body": "The iOS and Mac runtimes do not support all of the classes in System.IdentityModel, this change skips the tests of those classes on MOBILE and XAMMAC_4_5.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6575", "title": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5", "body": "Cherrypick from PR: https://github.com/mono/mono/pull/6565", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6574", "title": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5", "body": "\r\nCherry pick from PR: https://github.com/mono/mono/pull/6565", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "monojenkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/7fa82690762511ae5ac0df82dcc679dc7cbb0fb0", "message": "[msvc] Update csproj files (#6538)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "migueldeicaza": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/d1649e90fcb80410b888edd6e5d20493c08e9a56", "message": "[corlib] Use Environment.Platform to access the platform, rather than probing the file system (#6535)\n\nAlternatve patch to: #6533"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexanderkyte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6562", "title": "[runtime] Apply cctor filters to callees of cctors", "body": "Fixes #59649 \r\n\r\nWhen stepping with a filter that ignores static constructors, we previously bailed out when the lowest frame is a static constructor. That isn't sufficient, as static constructors can call other functions. \r\n\r\nThis work exposed a lot of issues with respect to the lifetimes and accuracy of tls->frames. I've left a debug aid here, this is something worth doing a more deliberate refactor of later. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6456", "title": "[DONTMERGE] Add locking around tls->frames usage/freeing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6310", "title": "[sdks] Script lldb android integration", "body": "Read PR message here: https://github.com/mono/mono/pull/6309", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6309", "title": "[sdks] Add managed debugger tests to sdks", "body": "This adds the Managed debugger tests to the sdks. A couple of the tests are failing, but everything related to the setup of the runtime appears to be passing. We have 5 failures right now. \r\n\r\nNote also that this adds support for running an arbitrary .exe if someone is willing to edit the boostrap file and indicate their class main, and pass the args themselves. They can also set the args with the managed debugger. \r\n\r\nThis functionality is linked to https://github.com/mono/mono/pull/6310 . That PR has the lldb integration that was necessary to debug this into working. If combined with the ability to run an arbitrary .exe, it allows us to more easily take an android reproduction and run it in an sdks environment with different monos. \r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6514", "title": "Bug 60088 - Assertion at ../../../../external/mono/mono/mini/debugger\u2026", "body": "\u2026-agent.c:4765, condition `array->len == 1' not met\r\n\r\nProblem was that I didn't consider `async void` method when adding that assert", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409", "body": "Great work.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418", "body": "This is an important set of fixes to get into Mono for F# support\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350", "body": "Yes, that's correct. The .fsproj formulation supported by this change is suitable for both F# 3.0 and F# 3.1.\n\nSeparately, we will work on getting the F# 3.1 language updates into the code drop,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256", "body": "Hi @knocte, xbuild needs to \"do the same thing\" as MSBuild. Since MSBuild sets VisualStudioVersion, then xbuild needs to set it too. The question is what it gets set to by default and what the ramifications of that are.  The guiding principle should be to do what MSBuild does by default.\n\nWhy does this matter to F#? As of F# 3.1 (== VisualStudioVersion 12) , the F# SDK is located in \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nFor F# 3.0 it was located in \n\n```\n$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets\n```\n\nI agree it is frustrating that the F# 3.1 targets file has moved to a location that includes the word \"VisualStudio\" let alone \"VisualStudioVersion\". But that's how it is - from the Microsoft perspective F# releases are aligned with VisualStudio releases (although in-place updates of F# may happen).\n\nThe relevant part of F# 3.1 (and upgraded F# 3.0) project files is: \n\n```\n<Choose>\n  <When Condition=\"'$(VisualStudioVersion)' == '11.0'\">\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </When>\n  <Otherwise>\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </Otherwise>\n</Choose>\n```\n\nFor fsharp/fsharp I think this means we have to fix the Mono/Linux/Mac installation of F# 3.1 to lay down the targets at\n\n   $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v12.0\\FSharp\\Microsoft.FSharp.Targets\n\nAnyway, the commit under discussion needs to at least ensure that VisualStudioVersion is set, preferably to the same value used by MSBuild by default. \n\nCheers\nDon\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099", "body": "Hi @ovatsus \n\nI wonder If we should just drop the setting of VisualStudioVersion. MSBuild seems to set it depending on the actual minimal VS installed on the machine - you get 10.0 with VS2010 installed, 11.0 with VS2012, 12.0 with VS2013 etc.  \n\nIf xbuild continues to leave VisualStudioVersion  unset, then we can adjust the F# install to put a copy of the targets at  the path that we get if VisualStudioVersion  is empty, i.e. \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nwhich on Linux becomes \n\n```\n/usr/lib/mono/xbuild/Microsoft/VisualStudio/v/FSharp/Microsoft.FSharp.Targets\n```\n\nThis isn't too bad, as it is suitable for VisualStudio assets that on Linux/Mac are referenced independent of Visual Studio version.\n\nI'll submit an adjustment to the F# install on Linux/Mac to put the Targets in the above location.  \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705", "body": "OK, @knocte is this PR good to go? The fixes are becoming increasingly important for F# users of xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984", "body": "The F# parts of this problem are tracked at https://github.com/fsharp/fsharp/issues/163\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902", "body": "Two questions\n- any idea when a new mono containing this fix will be available? 3.2.4 doesn't seem to have it?\n- I added a Xamarin Studio bug to cover the same problem in the IDE, I presume it is a different code path which needs to be fixed. https://bugzilla.xamarin.com/show_bug.cgi?id=16085\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331", "body": "@knocte Very sorry. We must be more careful.\n\nAnd I understand why GetAssemblyIdentity and some other classes left unimplemented for several years.\n\nIn the Mono's rules, I think I must re-send this pullreq after the original [GetAssemblyIdentity.cs](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs) is published with a full implementation.\n\nWithout knowing how the `GetAssemblyIdentity` works, I don't know how to implement it...\n\n@akoeplinger My codes are written by only looking [this post on Nemerle forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) and some from [referencesource-beta.microsoft.com](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs).\n\nI've not used Reflector, Monodis, or MonoDevelop or other reverse engineering tools (even though I mentioned about these in [Nemerle Forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/L-g7RYdiCLkJ)).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962", "body": "``` diff\n- Reflector, Monodis, or MonoDevelop or other reverse engineering tools\n+ Reflector, Monodis, nor MonoDevelop nor other reverse engineering tools\n```\n\nSorry my not being good at English\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523", "body": "@akoeplinger but the original code on [this post](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) might be from ILSpy\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428", "body": "It is true what you said.\nI've looked and based on the disassembled code anyway.\nI close this thanks :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921", "body": "Hi, I wrote an [unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) and I've re-implemented that from scratch without looking any MS's code.\nHere: https://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nThis implementation is based on [the document in MSDN](http://msdn.microsoft.com/en-us/library/ms164296.aspx), and I made it to have parameters named `Version`, `PublicKeyToken`, and `Culture`. \nAnd also, I made `PublicKeyToken` well-formed by looking original MSBuild's output of the unit test,\n\nbut I don't know how to get trusted...\nYes, we can't forget what we once seen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996", "body": "Oh,\n\n```\nbase.Log.LogErrorWithCodeFromResources (\"GetAssemblyIdentity.CouldNotGetAssemblyName\", new object[] {} )\n```\n\nis not good.\n\nIt comes from my memory, which is the original MS's code.\nIt should be re-writed.\n\nIs\n\n```\nLog.LogErrorFromException (ex);\n```\n\nOk?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657", "body": "I see. I've made it so.\nhttps://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nbut... I don't know how to include [this unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) into Mono sources.\n\nI think it should be located [here](https://github.com/mono/mono/tree/master/mcs/class/Microsoft.Build.Tasks/Test) but it can't be tested like [CreateItemTest.cs](https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Tasks/Test/Microsoft.Build.Tasks/CreateItemTest.cs)...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351", "body": "Sorry, invalid account. I'll make a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584", "body": "@kumpera, @migueldeicaza,\n\nFWIW, this was the only stopper I encountered while building mono on FreeBSD 10.1 x86 and ia64, fresh installed with llvm+clang v3.7: https://github.com/dotnet/roslyn/issues/2844#issuecomment-129221304. \nPlease consider this PR for merging.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562", "body": "@alexrp, will this patch be available in mono v.next tagged release code? FreeBSD support is varying between 99-100% with current master. These small but tricky patches stick it to 100% and above. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031", "body": "@atsushieno, can this land in next release of mono?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355", "body": "@saper, seems like the exception is coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024, which has a caller that implicitly appear at one instance in the call stack you provided which leads to https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1274 (which implicitly relies on your changes in `ParseTZBuffer` method).\n\nLooking the the reference resource for `CreateAdjustmentRule` method: http://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,43a6662ca1445f1f,references, it seems like `startDate` and `endDate` are assigned to the `AdjustmentRule()` object as is and the object is returned. Which means there is something weird going on with `time_types` etc. that is somehow confusing the `TimeSpan` and further affecting the dst_end/dst_start `.Year` resolution. \n\nMight be a good idea to assert dst_start/end for equality before calling `CreateAdjustmentRule` (or write to console/file etc.) to find out if the `.Year` differs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876", "body": "As noted in my previous comment, it is `InvalidTimeZoneException` coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877", "body": "@akoeplinger, once the assertion failures are sorted out, will it make sense to have a submodule to dotnet/coreclr tests directory so CI can also test the future PRs. Probably with a thin wrapper to translate error codes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035", "body": "(This diff is hard to read, but it simply removes the `using` statement and fixes the code indentation)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098", "body": "Arguably, you could push this onto the client and say, \"You must cancel the token _and_ Dispose the `HttpMessageResponse.Content` to truly cancel the network connection\", but this ends up being fairly difficult in practice since most people will end up using `ReadAsString` which doesn't offer cancelation, and I suspect the vast majority of people would mess this up.  Activating the cancelation token that you pass into SendAsync should close the underlying network connection, regardless of whether the call has returned or not. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761", "body": "You're technically correct but this is much more difficult to program against. Now there are two separate ways to cancel the same underlying network connection that was created in this operation (the other being to dispose the HttpContent), depending solely on time. This makes for race-conditiony code that has been pushed up to every client of HttpClient, instead of having a single, guaranteed way to cancel the underlying network connection as long as it's open.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653", "body": "@akoeplinger No clue\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803", "body": "So, here's an even more compelling reason that the existing behavior is Problematic, it also makes handling cancellation very difficult for _clients_ of HttpClient. Consider the following code:\n\n``` cs\npublic Task<string> DownloadTwoUrls(string file1, string file2, CancellationToken ct)\n{\n    var resp1 = await myHttpClient.Get(\"/foo/\" + file1, ct);\n    var content1 = resp1.Content.ReadAsStringAsync();\n\n    // ct was **Disposed** because of the Disposal of the linked token, ct is now trashed\n    // The second half of this is now silently uncancelable. \n    var resp2 = await myHttpClient.Get(\"/foo\" + file2, ct);\n    return content1 + (await resp2.Content.ReadAsStringAsync());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931", "body": "@marek-safar (Sorry about the blast from the past), It actually does, in `UnregisterLinkedTokens`: https://github.com/mono/mono/blob/a31c107f59298053e4ff17fd09b2fa617b75c1ba/mcs/class/corlib/System.Threading/CancellationTokenSource.cs#L269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569", "body": "Hm. Apparently my princess is in another castle.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "atsushieno": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115348", "body": "> What about using [Category (\"NotDotNet\")]?\n> Thought about that before making the change, but I'm not sure this code + nunit 2.4.8 should really work under any system.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123074", "body": "umm, if it's something critical, let's please revert the change. I got my second dev. laotop (macbook) broken(!!) and am unable to do it by myself :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/128272", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144442", "body": "For reference, the correct bug # is 638098.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144475", "body": "Looks like this caused dist failure on 2.6 http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5020269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jbevain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/116030", "body": "Short version: as per Paolo's request.\nLong version: I started a discussion by asking why the branch cost was so high, wondering why we couldn't inline properties such as:\n\nget { return is_foo ? foo : bar; }\n\nAnd if we couldn't include the displacement in the cost rather. Paolo said there was no need for that, just to reduce the branch cost which was set to high.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/116030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/138529", "body": "Well, the test case is the unit test which passes on .net. But I'll revert this one as well as the runtime support, as it triggers regressions: #635349 and #605936. Will have to investigate more.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/138529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139373", "body": "Actually it's \u00abjust\u00bb a regression introduced by my change, and it's not specific to moonlight. I'm working on fixing it for everyone. Thanks for reporting the issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139401", "body": "This should be fixed in master by 85c0976c3d913ba16a13d44159f8e7591732df56. Could you try to run the moon-unit test with it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ajorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121447", "body": "This commit breaks the build http://build.mono-project.com/ViewLane.aspx?lane_id=62&host_id=23&revision_id=90989\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/122189", "body": "This commit breaks the build:\n\nSystem.Collections.Concurrent/BlockingCollection.cs(54,17): error CS0246: The type or namespace name `ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\nSystem.Collections.Concurrent/BlockingCollection.cs(55,17): error CS0246: The type or namespace name`ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/128154", "body": "This commit breaks the build.  It appears you neglected to add a file:\n\nmake[8]: **\\* No rule to make target `System.ServiceModel.Discovery.Version11/IDiscoveryProxyContract11.cs', needed by`../../class/lib/net_4_0/System.ServiceModel.Discovery.dll'.  Stop.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144680", "body": "MCS     [net_4_0] Microsoft.CSharp.dll\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1502: The best overloaded method match for `Mono.CSharp.Expression.MemberLookup(Mono.CSharp.ResolveContext, Mono.CSharp.TypeSpec, Mono.CSharp.TypeSpec, string, int, Mono.CSharp.Expression.MemberLookupRestrictions, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1503: Argument`#6' cannot convert `bool' expression to type`Mono.CSharp.Expression.MemberLookupRestrictions'\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,25): error CS0825: The contextual keyword `var' may only appear within a local variable declaration\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,66): error CS0841: A local variable`expr' cannot be used before it is declared\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1502: The best overloaded method match for `Mono.CSharp.BoolConstant.BoolConstant(bool, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1503: Argument`#1' cannot convert `object' expression to type`bool'\nCompilation failed: 6 error(s), 0 warnings\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144716", "body": "sgen-gc.c:202:37: fatal error: metadata/sgen-cardtable.h: No such file or directory\nPlease remember to dist new files. Fixed in 5cab581.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/146235", "body": "Something is wrong w/ this commit http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5124512\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/146235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121594", "body": "It looks like grendel forgot to backport the configure.in portion of 8de7037b16020bb919579c75e3be981152a37ff8\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144697", "body": "@eno\n\nIt looks like git didn't cherry-pick the fakepoll.h.  Fixed\n\n@gonzalop\n\nsupport cannot dep on mono.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "grendello": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121619", "body": "So I did, sorry about that. Fixed in 9e0162ea534e2dc49d3f134b80efc6d88670434b\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/122578", "body": "This commit breaks two tests in System.Web (both 2.0 and 4.0 profiles):\n\n```\nTest Case Failures:\n1) MonoTests.System.Web.HttpUtilityTest.UrlEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlEncode () [0x00007] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:718\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n\n2) MonoTests.System.Web.HttpUtilityTest.UrlPathEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback  fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncodeChar (Char c, System.IO.Stream result) [0x00010] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:647\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncode () [0x00037] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:744\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "garuma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/122230", "body": "Fixed in af30815fc99adaa315c2\n\nSorry\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/133975", "body": "I think that the change here is responsible for blocking the corlib test suite with Semaphore tests still only on 32bits. I can't verify that myself (everything here is x86-64) but I'm guessing from the commit log and wrench results.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/133975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "spouliot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/135556", "body": "Got a test case for it ? you added 2 unit tests but marked them [Category(\"NotWorking\")]\nhttp://lists.ximian.com/archives/public/mono-patches/2010-August/175767.html\n\nActually the instance case got the NotWorking removed later... but the static case (still NotWorking in mcs) fails a unit test in moonlight which works on SL\nRemoving lines 193-196 fix this (as far as moonlight is concerned)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/135556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137401", "body": "This commit breaks the moonlight profile (and likely other similar profiles) since moonlight depends on gmcs (before using smcs) to build corlib\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139451", "body": "Fixed, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "gonzalop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/144644", "body": "mono-poll.[ch] have a mono_poll() that can be based on either select() or poll() depending on the system...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "baulig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262", "body": "Fixed, thank!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}, "4": {"Nihlus": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6577", "title": "Mono debugger crashes in native code when inspecting interface instances produced by Config.Net", "body": "## Steps to Reproduce\r\n\r\n1. Download the attached reproduction project\r\n2. Restore nuget packages and compile\r\n3. Run the project\r\n4. Observe the expected output\r\n5. Debug the project \r\n6. Inspect the local variable in the main method.\r\n7. Observe the runtime crash.\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nAt present, when inspecting variables containing an instance of a proxy interface created by Config.Net, the Mono debugger crashes in native code. If the variable is not inspected, the program behaves as expected and prints the stored value.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\nThe program should run as expected, and the Mono debugger should be able to inspect the variables without crashing.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[x] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n```\r\nMono JIT compiler version 5.4.1.6 (tarball Wed Nov  8 20:35:02 UTC 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       altstack\r\n\tNotifications: epoll\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          supported, not enabled.\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\nhttps://gist.github.com/Nihlus/d3274a9cce07728c3b36ce2da8082492\r\n\r\n### Attachments\r\n[CrashRepro.zip](https://github.com/mono/mono/files/1643632/CrashRepro.zip)\r\nhttps://github.com/aloneguid/config\r\nIssue on the Config.Net repository: https://github.com/aloneguid/config/issues/49\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rombersoft": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6573", "title": "Deadlock in delegate which created used ", "body": "## Steps to Reproduce\r\n\r\n1. Assembly computer with motherboard msi 760GM-p23. On other motherboards all works fine!\r\n2. Install 4.8.8-2-ARCH #1 SMP PREEMPT Thu Nov 17 15:09:32 CET 2016 i686 GNU/Linux\r\n3. Install mono 5.8\r\n4. git clone from https://github.com/MonoGame/MonoGame\r\n5. Create project monogame with some animation\r\n\r\n<!--\r\nVideo number one about problem https://www.dropbox.com/s/dd1t83kisa8z8xx/video.mp4?dl=04\r\nYou can see on this video that application stop draw until somebody touch a touchscreen\r\n\r\nVideo number two about problem https://www.dropbox.com/s/fio3ajc3qhpne2a/VID_20180117_103256.mp4?dl=0 \r\nYou can see on this video that my application works fine when above it placed another window (in current case this is urxvt terminal emulator). Take attention on time as seconds run when I place urxvt window above my application and seconds stop when my application is on top of all windows\r\n-->\r\n\r\n## Current Behavior\r\n\r\n<!--\r\nApplication sometimes is not drawn. But if you click mouse or press keyboard button application continue to draw but not long time and stop again\r\n-->\r\n\r\n## Expected Behavior\r\nApplication must draw animation\r\n\r\n## Description and other observation\r\nMonogame is game engine which in cycle runs methods Draw and Update. \r\nAt start I thought that problem in monogame, I even create topic here http://community.monogame.net/t/drawing-stops/9799\r\nBut when I tried with old version monogame (2.5) on mono 5.4 version that problem still exists.\r\nBut when I tried with old version monogame (2.5) on mono 2.10 version that problem does not exist.\r\nI can not use monogame 3.6 on mono 2.10 because 2.10 version does not support 4.5 framework and monogame 3.6 does not work on 4.0 framework\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[*] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n<!--\r\n5.2 and 5.8\r\n-->\r\n\r\n### Stacktrace\r\n\r\nI can not reproduce Stack trace. But I know place where drawing thread stops.\r\nLook at here\r\nhttps://github.com/MonoGame/MonoGame/blob/master/MonoGame.Framework/Graphics/GraphicsDevice.OpenGL.cs#L356\r\nI am sure that it is problem on new mono.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eatdrinksleepcode": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6560", "title": "Incorrect behavior for Take/Skip/Concat combination", "body": "## Steps to Reproduce\r\n\r\n```\r\nvar inputs = new [] { \"left\", \"right\" };\r\nvar outputs = inputs.Take(1)\r\n                    .Concat(Enumerable.Repeat((object)\"middle\", 1))\r\n                    .Concat(inputs.Skip(1)).ToArray();\r\nforeach(var item in outputs) {\r\n\tConsole.WriteLine(item);\r\n}\r\n```\r\n## Current Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nleft\r\n```\r\n\r\n## Expected Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nright\r\n```\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.4.1.7\r\n\r\n## Notes\r\n\r\n_This is a regression_: the same code works correctly under Mono 4.8.1.\r\n\r\nNote the cast to ```object``` inside the ```Enumerable.Repeat```. This is necessary to reproduce the bug; without the cast, the code works correctly.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6555", "title": "Process.WaitForExit() gets slower the larger your open file limit (ulimit -n) is on Linux", "body": "## Steps to Reproduce\r\n\r\n1. Compile this: `csc test.cs`:\r\n\r\n```csharp\r\npublic static class Program {\r\n    public static int Main () {\r\n        for (int i = 0; i < 100; i++) {\r\n            var p = System.Diagnostics.Process.Start (\"echo\", \"hello\");\r\n            if (!p.WaitForExit (10000)) return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```\r\n2. `$ (ulimit -n 1000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m0.402s\r\nuser\t0m0.028s\r\nsys\t0m0.184s\r\n```\r\n3. `$ (ulimit -n 100000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m1.277s\r\nuser\t0m0.380s\r\nsys\t0m0.592s\r\n```\r\n4. `$ (ulimit -n 1000000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m8.758s\r\nuser\t0m3.424s\r\nsys\t0m4.424s\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt gets slower the higher your ulimit -n is.\r\n\r\nNote: you may need to change your system settings (`/etc/security/limits.conf`) to allow higher limits.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNot getting slower.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04/16.04\r\n[ ] Windows\r\n\r\n**Version Used**: master, 5.8.088 and 4.2.1 (so either a very old bug or something outside our control)\r\n\r\nThis was the root cause behind an issue (https://github.com/mono/mono/pull/6537) we had on Jenkins because the Azure Linux VM builders had ulimit -n set to 1048576.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6548", "title": "Frequent test failures of ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test", "body": "## Steps to Reproduce\r\n\r\n1. Compile Mono on Linux i386\r\n2. `make -C mcs/class/corlib run-xunit-test`\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nFrequent test failure in System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test: https://github.com/mono/corefx/blob/dfd98e7113a99708f4c9ed063a8c481f838aa8d3/src/System.Threading/tests/ThreadLocalTests.cs#L192-L225\r\n\r\nThis seems to only occur on i386 and on Linux: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=ubuntu-1404-i386/\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNo test failure.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04\r\n[ ] Windows\r\n\r\n**Version Used**: master\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\n\r\n```\r\nAssert.False() Failure\r\nExpected: False\r\nActual:   True\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\n  at System.Threading.Tests.ThreadLocalTests+ThreadLocalWeakReferenceTest.Run () [0x0001c] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:216 \r\n  at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference () [0x00005] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:224 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6523", "title": "Remove obsolete assemblies in next major version bump", "body": "Tracking issue for assemblies to remove once we can do another breaking change, i.e. when we do Mono 6.0.\r\n\r\n- [ ] IBM.Data.DB2.dll, replaced by NuGet package\r\n- [ ] ICSharpCode.SharpZipLib.dll, replaced by NuGet package, fixes problems like  https://bugzilla.xamarin.com/show_bug.cgi?id=59304\r\n- [ ] Compat.ICSharpCode.SharpZipLib.dll (old copy of above)\r\n- [ ] Commons.Xml.Relaxng.dll, replaced by NuGet package\r\n- [ ] Mono.C5.dll, replaced by NuGet package\r\n- [ ] RabbitMQ.Client.dll, replaced by NuGet package\r\n- Very old copy of Rx.NET, replaced by NuGet packages\r\n  - [ ] System.Reactive.Core.dll\r\n  - [ ] System.Reactive.Debugger.dll\r\n  - [ ] System.Reactive.Experimental.dll\r\n  - [ ] System.Reactive.Interfaces.dll\r\n  - [ ] System.Reactive.Linq.dll\r\n  - [ ] System.Reactive.Observable.Aliases.dll\r\n  - [ ] System.Reactive.PlatformServices.dll\r\n  - [ ] System.Reactive.Providers.dll\r\n  - [ ] System.Reactive.Runtime.Remoting.dll\r\n  - [ ] System.Reactive.Windows.Forms.dll\r\n  - [ ] System.Reactive.Windows.Threading.dll\r\n- Very old copy of ASP.NET MVC framework, replaced by NuGet packages\r\n  - [ ] System.Web.Http.dll\r\n  - [ ] System.Web.Http.SelfHost.dll\r\n  - [ ] System.Web.Http.WebHost.dll\r\n  - [ ] System.Web.Mvc.dll\r\n  - [ ] System.Web.Razor.dll\r\n  - [ ] System.Web.WebPages.Deployment.dll\r\n  - [ ] System.Web.WebPages.dll\r\n  - [ ] System.Web.WebPages.Razor.dll\r\n  - [ ] WebMatrix.Data.dll\r\n  - [ ] Microsoft.Web.Infrastructure.dll\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6513", "title": "SocketTest.AcceptBlockingStatus is flaky on ARM", "body": "It failed 47 times in the last two weeks on the armel, armhf and arm64 master lanes with this stack trace:\r\n\r\n```\r\nMESSAGE:\r\nSystem.Net.Sockets.SocketException : Connection timed out\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Sockets.Socket.Connect (System.Net.EndPoint remoteEP) [0x000b0] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/System.Net.Sockets/Socket.cs:886 \r\n  at MonoTests.System.Net.Sockets.SocketTest.BlockingConnect (System.Boolean block, System.Int32 port) [0x00033] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:136 \r\n  at MonoTests.System.Net.Sockets.SocketTest.AcceptBlockingStatus () [0x00006] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:171 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6466", "title": "System.Diagnostics.ProcessTest.Start1_FileName_NotFound failing on newer Ubuntu", "body": "## Steps to Reproduce\r\n\r\n1. `make -C mcs/class/System run-test V=1 TESTNAME=System.Diagnostics.ProcessTest.Start1_FileName_NotFound\r\n`\r\n\r\nNote: This was first reported in https://github.com/mono/mono/issues/6383, after the native crash was fixed.\r\n\r\n## Current Behavior\r\n\r\n```\r\n...F\r\nTests run: 1, Passed: 0, Errors: 0, Failures: 1, Inconclusive: 0\r\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\r\nElapsed time: 00:00:00.0690000\r\n\r\nErrors and Failures:\r\n\r\n1) Start1_FileName_NotFound (MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound)\r\n   #C1\r\n  at MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound () [0x0015b] in /home/alexander/dev/mono/mcs/class/System/Test/System.Diagnostics/ProcessTest.cs:215 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/alexander/dev/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n\r\ngvfs-open: /usr/bin/shouldnoteverexist: error opening location: Error when getting information for file '/usr/bin/shouldnoteverexist': No such file or directory\r\n\r\nResults saved as /home/alexander/dev/mono/mcs/class/System/TestResult-net_4_x.xml.\r\n../../build/tests.make:208: recipe for target 'run-test-lib' failed\r\nmake[1]: *** [run-test-lib] Error 1\r\n```\r\n\r\n## Expected Behavior\r\n\r\nno failure.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 16.04 in VirtualBox VM and Ubuntu chroot on a ChromeOS device.\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\ne9913fdc487622073a0827f32f845b637163590d\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/0c59209931f618d7811e4e0ff602e47f6276ef3e", "message": "[tests] Disable weak-fields.exe on LLVM as well"}, {"url": "https://api.github.com/repos/mono/mono/commits/a99d7f4b1318091354ecc12c0be1aa97e34ae2c0", "message": "[ci] Use correct -arch syntax in CFLAGS on OSX (#6570)\n\nIn c7d8d247c35b6fa08bbc7e36d2f44fefcdf48b5a I unified how we're\r\npassing -arch in CFLAGS to \"-arch=XXX\" since the original change\r\nin 63a49e9eb8b569c6d5265168101982f5557c52bb mixed the formats.\r\n\r\nTurns out the correct syntax is \"-arch XXX\" instead and it broke\r\nthe ccache build in bockbuild because it complained about the\r\nunknown format.\r\n\r\nAlso add LDFLAGS in the amd64 case to match what we have in bockbuild."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430", "body": "nit: in most templates I've seen the current/problematic behavior comes before the expected one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553", "body": "I'd rather instruct them to specifically run `mono --version` so we get full commit hash etc. which is included there.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037", "body": "not sure we need to mention both backtrace and stacktrace, they're used pretty much interchangeably anyway.\r\n\r\nstacktrace seems to be more commonly known from what I've seen.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145", "body": "`macOS`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052", "body": "don't you get this: \r\n![image](https://user-images.githubusercontent.com/1376924/33861614-14d2eef2-deb5-11e7-81a3-3c8a53f87857.png) ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598", "body": "What about we just remove this and the \"expected behavior\" description below? It doesn't add anything which isn't clear from the section header anyway and would make the template simpler.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735", "body": "maybe make it \"repro code/solution\" to be clear", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328", "body": "use `git://` here like the other submodules\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595", "body": "This must use `git://` instead of `git@` otherwise it won't be accessible to people without push access to that repo.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942", "body": "This must be `git://` as `git@` requires authentication.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928", "body": "typo: `borinssl`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077", "body": "`NuGet.BuildTasks` should be `nuget-buildtasks`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472", "body": "this no longer exists", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665", "body": "this is called `/external/binary-reference-assemblies` now", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543", "body": "should we keep this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861", "body": "while you're at it you could move the CODEOWNERS to the .github folder as well. And maybe CONTRIBUTING.md too?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757", "body": "add the same in the CROSS_COMPILING section above too to make it consistent.\n\nActually, I'm wondering if we still need this separation when both if branches are the same anyway?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexrp": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6546", "title": "Miscellaneous coverage profiler cleanup tasks", "body": "Opening this as a sort of meta-bug to keep track of some relatively small issues with the coverage profiler that should be addressed over time.\r\n\r\n- [ ] When we're comfortable bumping the output format version, it would be nice to change the overall structure to be more easily digestible for readers. For example, all `class` elements should be under an `assembly` element, all `method` elements should be under a `class` element, etc.\r\n- [ ] Type names (and signatures in general) should be fully qualified in the output, and not use C# names like `int`, `long`, etc.\r\n- [ ] The way we output generic definitions and generic instantiations needs to be cleaned up and made consistent. For example, if a program has a method `Foo<T> ()` and executes the instantiation `Foo<int> ()`, the output file will mention `Foo<int> ()` with all the correct execution counts, but it will also mention the uninstantiated `Foo<T> ()` with all-zero counts, as if it was uncovered. We should only mention the generic definition (with all the counts from all instantiations merged), not every single instantiation.\r\n- [ ] The data structures (or rather, lack thereof) in the profiler can be simplified. There's no particular reason we need to use a bunch of hash tables to map everything back and forth the way we do. The code would be much easier to read and maintain if we just had some proper structures for representing loaded assemblies, classes, and methods.\r\n- [ ] We should resolve method signatures and such ahead of time instead of doing it when we're dumping coverage data at shutdown. Resolving method signatures during shutdown can cause assemblies to be loaded, and metadata from those will be missing in the output as a result.\r\n- [ ] There's some commented out code relating to zipping of the output. This should either be implemented or removed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3491b7b604c2d1741e1d261a3315aa0e5a554d0c", "message": "[profiler] Write out all uncovered classes/methods in a loaded image. (#6544)\n\n* [runtime] Export mono_class_get_checked () for use in profilers.\r\n\r\n* [runtime] Expand mono_method_get_header_summary () to collect more info.\r\n\r\nIt now collects all the trivially-accessible header data that doesn't require\r\nchasing down other metadata.\r\n\r\n* [profiler] Use mono_method_get_header_summary () in the coverage code.\r\n\r\nWe only need code start and size information, not all the data that is present\r\nin the header. By switching to this function, we avoid all the side effects\r\nthat come with resolving local variables and exception clauses (which can even\r\nresult in loading assemblies in the worst case).\r\n\r\n* [profiler] Write out all uncovered classes/methods in a loaded image.\r\n\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60225\r\n\r\nThis required a bit of refactoring and some workarounds for various special\r\ncases. This also fixes some race conditions with respect to how data was\r\ninserted into the lock-free hash tables and queues."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958", "body": "Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974", "body": "Minor style issue: Spaces here instead of tabs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870", "body": "s/mono-lite/monolite/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873", "body": "This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6530", "title": "Mono's MSBuild is slow on Mac due to constant IO", "body": "## Steps to Reproduce\r\n\r\n1. See https://github.com/Microsoft/msbuild/blob/30b19e9f2cefb6d9675d660c8bb8b317c06ff9a1/src/Shared/NativeMethodsShared.cs#L553-L556\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nIO is done to check whether the platform is OS X.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nIO should be done at most once, or some other detection mechanism should be used. (pinvoke libc and get OS name)\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.168 (pull-request-6404/6f02ba66ba8 Thu Jan  4 16:11:23 EST 2018)\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\nProbably should be backported to all releases\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexander-vi": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6525", "title": "[Linux] [mipsel] Crash on any exception in C# code", "body": "## Code to reproduce\r\n```C#\r\nusing System;\r\n\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                  throw new ArgumentNullException();\r\n            }\r\n            catch\r\n            {\r\n                Console.WriteLine(\"Error!\");\r\n                Environment.Exit(1);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\nCrash with the following stack:\r\n```\r\n$ mono test\r\nStacktrace:\r\n\r\n\r\nNative stacktrace:\r\n\r\n\tmono() [0x4c7780]\r\n\r\nDebug info from gdb:\r\n\r\n[New LWP 17157]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/mipsel-linux-gnu/libthread_db.so.1\".\r\n0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n  Id   Target Id         Frame \r\n  2    Thread 0x76d43460 (LWP 17157) \"mono\" 0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n* 1    Thread 0x775618b0 (LWP 17156) \"mono\" 0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n\r\nThread 2 (Thread 0x76d43460 (LWP 17157)):\r\n#0  0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x7744432c in sem_wait@@GLIBC_2.2 () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#2  0x00688164 in mono_sem_wait ()\r\nwarning: GDB can't find the start of the function at 0x5d84b2.\r\n\r\n    GDB is unable to find the start of the function at 0x5d84b2\r\nand thus can't determine the size of that function's stack frame.\r\nThis means that GDB may be unable to access that stack frame, or\r\nthe frames below it.\r\n    This problem is most likely caused by an invalid program counter or\r\nstack pointer.\r\n    However, if you think GDB should simply search farther back\r\nfrom 0x5d84b2 for code which looks like the beginning of a\r\nfunction, you can increase the range of the search using the `set\r\nheuristic-fence-post' command.\r\n#3  0x005d84b4 in ?? ()\r\n\r\nThread 1 (Thread 0x775618b0 (LWP 17156)):\r\nwarning: GDB can't find the start of the function at 0x4c785a.\r\n#0  0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x004c785c in ?? ()\r\n\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n```\r\n\r\nPlease note that other C# features looks like work fine. I've managed to compile and launch several other examples.\r\n\r\n\r\n\r\n## Expected Behavior\r\nMessage \"Error!\" is printed.\r\n\r\n### System information\r\nMono is installed from packages as \"mono-devel\".\r\n```\r\n$ mono --version\r\nMono JIT compiler version 3.2.8 (Debian 3.2.8+dfsg-10)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       normal\r\n\tNotifications: epoll\r\n\tArchitecture:  mips\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tGC:            sgen\r\n```\r\n\r\n```\r\n$ cat /proc/cpuinfo \r\nsystem type\t\t: Baikal-T Generic SoC\r\nmachine\t\t\t: T-Platforms mITX Board\r\nprocessor\t\t: 0\r\ncpu model\t\t: MIPS P5600 V3.0  FPU V2.0\r\nBogoMIPS\t\t: 597.60\r\nwait instruction\t: yes\r\nmicrosecond timers\t: yes\r\ntlb_entries\t\t: 576\r\nextra interrupt vector\t: yes\r\nhardware watchpoint\t: yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]\r\nisa\t\t\t: mips1 mips2 mips32r1 mips32r2\r\nASEs implemented\t: vz msa eva\r\nshadow register sets\t: 1\r\nkscratch registers\t: 3\r\npackage\t\t\t: 0\r\ncore\t\t\t: 0\r\nVCED exceptions\t\t: not available\r\nVCEI exceptions\t\t: not available\r\n```\r\n\r\n```\r\n$ uname -a\r\nLinux tclient 3.19.12.23-mitx #1 SMP Thu Nov 2 19:47:08 UTC 2017 mips GNU/Linux\r\n```\r\n\r\n```\r\n$ cat /etc/*-release\r\nPRETTY_NAME=\"Debian GNU/Linux 8 (jessie)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"8\"\r\nVERSION=\"8 (jessie)\"\r\nID=debian\r\nHOME_URL=\"http://www.debian.org/\"\r\nSUPPORT_URL=\"http://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n```\r\n\r\nI know that this version of Mono is a bit old, but maybe you can provide me some workaround or this issue is present in the current version. Hope this bugreport will be useful for you.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6519", "title": "System.Data tests failures on watch", "body": "## Steps to Reproduce\r\n\r\n1. Get 2017-12 XI monthly integration\r\n2. \r\n3. \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nFaling tests\r\n```\r\n[FAIL] DbDataAdapterTest.AddToBatch : System.NotSupportedException : Specified method is not supported. \r\n[FAIL] SqlCommandBuilderTest.CatalogLocation_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogLocationTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOption_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOptionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_PrefixSuffix_NoMatch : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_UnquotedIdentifier_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull1 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull2 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull3 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull4 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull5 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull6 : An unexpected exception type was thrown \r\n[FAIL] SqlCommandTest.Clone : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandText : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout_Value_Negative : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandType_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ParameterCollectionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ResetCommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.BeginTransaction_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ChangeDatabase_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ClearPool_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_ConnectTimeout_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Database_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_DataSource_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PacketSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Password_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PersistSecurityInfo_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserID_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2_ConnectionString_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.CreateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Empty : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Whitespace : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ServerVersion_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectConnection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.DeleteCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.InsertCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.SelectCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.UpdateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.CompareInfo : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DBNull : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor7 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Boolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Byte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_ByteArray : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Decimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Double : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Enum : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Guid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Object : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Single : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_String : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.LocaleId : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterName : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterNullTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetSqlDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumn : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumnNullMapping : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBinary : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBoolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlByte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDecimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDouble : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlGuid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlMoney : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlSingle : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlXml : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlValue : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Value : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.XmlSchemaTest : System.PlatformNotSupportedException was expected \r\nTests run: 1887 Passed: 1755 Inconclusive: 0 Failed: 132 Ignored: 163\r\n```\r\n\r\n## Expected Behavior\r\n\r\nNo failures\r\n\r\n### On which platforms did you notice this\r\n\r\n[ x] watchOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**: 2017-12 branch\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c282af6df5ffbc7fc4ec2ab857299c8d455f9d72", "message": "[mcs] Implements C# 7.0 discards"}, {"url": "https://api.github.com/repos/mono/mono/commits/370105c5e0a741b187c5040c137ae0b44e3a7bc4", "message": "[profiler] Don't double escape special characters. (#6534)\n\nThe output of parse_generic_type_names is processed by escape_string_for_xml and\r\nwe were double escaping `&` character"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6551", "title": "Bump linker", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6476", "title": "Weak field support backport", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6395", "title": "Bump corefx", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057", "body": "Made small tweak but `mono --version` is useful only for people running Mono directly. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027", "body": "My worry is that then people would just skip the section", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555", "body": "Should use git::// protocol", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687", "body": "How big is the submodule, it's still not accessible for me", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904", "body": "I didn't want to move that one as I don't know if I need to change the paths and secondly, CODEOWNERS seems to be useful on its own", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607", "body": "I don't know what's the purpose of that, seems like what should be on mono github wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rodrmoya": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6512", "title": "Missing counters/perf counters in Mono 5.8 with new profiler arguments", "body": "## Steps to Reproduce\r\n\r\n1. Run any desktop mono app with: `/Library/Frameworks/Mono.framework/Versions/Current/bin/mono --gc=sgen --profile=log:heapshot=ondemand,nolegacy,jit,gc,nogcalloc,gcroot,gcmove,counter,output=\"/var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd\" app.exe`\r\n2. Let it run for a few seconds and stop\r\n3. `mprof-report /var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd` shows no counters\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nUsing the old runtime arguments (`alloc,heapshot=ondemand,counters`) produces a MLPD with counters on it.\r\n\r\n## Expected Behavior\r\n\r\nCounters should be emitted in the MLPD file\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n```$ mono --version\r\nMono JIT compiler version 5.8.0.103 (2017-10/1359c52fc6e Wed Dec 20 10:52:54 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OleksandrChizh": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6498", "title": "Mono issue with TLS due to Client Certificates", "body": "Hi. We have a .NET 4.0 application for sending https(TLS 1.0) requests using HttpWebRequest. The application works correctly with the windows version of Mono but when we send a request on Ubuntu 16.04 using Mono 5.4.1.6 we get an error, see here: https://pastebin.com/hP9dZvuF\r\nJust to test the app we sent a request to https://www.google.com, https://github.com, etc. and we got no errors but when we send a request to required server the issue appears.\r\nWe tried to import required certificates manually using certmgr and mozroots but it didn't solve the issue.\r\nWe are thinking it's an issue of Mono because we compiled the same code with .NET Core and it works well. Is there any chance to solve this issue?\r\nThank you!\r\n\r\n> CQNET: Error getting response stream (ReadDone1): ReceiveFailure - Error\r\n> System.Net.WebException: Error getting response stream (ReadDone1): ReceiveFailure ---> System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:100000b6:SSL routines:OPENSSL_internal:NO_RENEGOTIATION\r\n>   at /build/mono-5.4.1.6/external/boringssl/ssl/s3_pkt.c:446\r\n>   at Mono.Btls.MonoBtlsContext.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Boolean& wantMore) [0x00050] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.ProcessRead (Mono.Net.Security.BufferOffsetSize userBuffer) [0x00011] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream:ProcessRead (Mono.Net.Security.BufferOffsetSize)\r\n>   at Mono.Net.Security.AsyncReadRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x0000c] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<ProcessOperation>d__24.MoveNext () [0x000ff] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<StartOperation>d__23.MoveNext () [0x0008b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream+<StartOperation>d__58.MoveNext () [0x001bf] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter1[TResult].GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Threading.Tasks.TaskToApm.End[TResult] (System.IAsyncResult asyncResult) [0x0002e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.EndRead (System.IAsyncResult asyncResult) [0x00000] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.WebConnection.ReadDone (System.IAsyncResult result) [0x0001b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Net.HttpWebRequest.EndGetResponse (System.IAsyncResult asyncResult) [0x00058] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.HttpWebRequest.GetResponse () [0x0000e] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at k.s (System.String bqi, System.Int32 bqj) [0x00043] in <31d60139ab8f4173b33ee35d33fa2fdb>\r\n>", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6498/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luhenry": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6490", "title": "Reenable weak-fields.exe test", "body": "Extracted from https://bugzilla.xamarin.com/show_bug.cgi?id=60973\r\n\r\nIt fails with the following output\r\n\r\n```\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 16946264\r\n```\r\n\r\n@vargaz noted that it's the test that seems flaky since it doesn't expect the object to be randomly retained.\r\n\r\nIt was disabled with https://github.com/mono/mono/pull/6191", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6567", "title": "[tests] Output XUnit tests to mcs/class/lib/$(PROFILE)/tests like NUnit tests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6500", "title": "[sdks] Move some code supporting the BCL from XA to Mono", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErwinVorenhout": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6477", "title": "GetActiveTcpConnections->state returns wrong status", "body": "I am trying to monitor an active TCP connection with the following code, when running on windows the _log.logInfo function will simply return established but when running on Mono 4.2.1 it will return \"Closed\", while the connection is established according: netstat -anp --tcp. \r\n\r\n```\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\r\ntcp        0      0 192.168.200.202:42685   192.168.200.218:18000   ESTABLISHED 23378/mono\r\n```\r\n\r\nThis is the code that I am using:\r\n```\r\nIPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();\r\nTcpConnectionInformation[] tcpConnections = ipProperties.GetActiveTcpConnections().Where(x => x.LocalEndPoint.Equals(_client.Client.LocalEndPoint) && x.RemoteEndPoint.Equals(_client.Client.RemoteEndPoint)).ToArray();\r\nif (tcpConnections != null && tcpConnections.Length > 0)\r\n{\r\n       TcpState stateOfConnection = tcpConnections.First().State;\r\n      if (_connected != 2)\r\n      {                              \r\n           if (stateOfConnection != TcpState.Established)\r\n           {\r\n                _log.logInfo(tcpConnections.First().RemoteEndPoint.ToString() + \"status:\" + \r\n                tcpConnections.First().State.ToString());\r\n                reConnect();\r\n           }\r\n      }\r\n}\r\n```\r\n\r\nThe output on windows when placing the log function above the if statement: \r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : established\r\n```\r\n\r\nWhile the output on Linux is:\r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : closed\r\n```\r\n\r\nI found out that Mono uses the ```/proc/net/tcp``` to read out the TCP/IP connections \r\nWhen trying to monitor the connection on remote addr 192.168.200.218  /proc/net/tcp returns the following:\r\n\r\n```  \r\nsl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode\r\n0: 0100007F:0CEA 00000000:0000 0A 00000000:00000000 00:00000000 00000000   111        0 1077650 1 0000000000000000 100 0 0 10 0\r\n1: 00000000:008B 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815396 1 0000000000000000 100 0 0 10 0\r\n2: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 17055 1 0000000000000000 100 0 0 10 0\r\n3: 00000000:01BD 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815395 1 0000000000000000 100 0 0 10 0\r\n4: 29CAA8C0:0016 DAC8A8C0:DBFB 01 00000080:00000000 01:00000015 00000000     0        0 2906153 3 0000000000000000 25 4 1 10 16\r\n```\r\nHere is number 4 the connection that I am trying to monitor(HEX DA C8 A8 C0  = decimal 192.168.200.218 ) the  state is  01 in the table.\r\n\r\n According the [kernel ](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h?id=HEAD) state 01 should be established so I am wondering where the state closed is comming from?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebasijan": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6471", "title": "PlatformNotSupportedException when calling LdapConnetion.Disconnect", "body": "Everything appears to be working fine (apart from the fact that retrieving a specific attribute should be way easier than iterating around all existing attributes - not sure why it was designed this way), but when I try to disconnect I get\r\n\r\n > PlatformNotSupportedException: Thread abort is not supported on this platform.\r\n\r\nThe code is pretty much exactly as taken from the Novell documentation, aprt from the fact that I am trying to just rerieve 2 specific attributes (name and logon time): \r\n\r\n\tvar users = new List<User>();\r\n\r\n\t// Creating an LdapConnection instance \r\n\tLdapConnection ldapConn= new LdapConnection();\r\n\r\n\t//Connect function will create a socket connection to the server\r\n\tldapConn.Connect(\"DOMAIN.com\",389);\r\n\r\n\t//Bind function will Bind the user object Credentials to the Server\r\n\tldapConn.Bind(\"DOMAIN\\\\_Bassi\",\"password\");\r\n\r\n\t// Searches in the Marketing container and return all child entries just below this\r\n\t//container i.e. Single level search\r\n\tLdapSearchResults lsc=ldapConn.Search(\"OU=Users,OU=MCS,OU=AU,OU=COMPANY,DC=DOMAIN,DC=com\",\r\n\t\t\t\t\tLdapConnection.SCOPE_ONE,\r\n\t\t\t\t\t\"objectClass=*\",\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse);\r\n\r\n\twhile (lsc.hasMore())\r\n\t{\r\n\t\tvar user = new User();\r\n\r\n\t\tLdapEntry nextEntry = null;\r\n\t\ttry \r\n\t\t{\r\n\t\t\tnextEntry = lsc.next();\r\n\t\t}\r\n\t\tcatch(LdapException e) \r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Error: \" + e.LdapErrorMessage);\r\n\t\t\t// Exception is thrown, go for next entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tConsole.WriteLine(\"\\n\" + nextEntry.DN);\r\n\r\n\t\tLdapAttributeSet attributeSet = nextEntry.getAttributeSet();\r\n\t\tSystem.Collections.IEnumerator ienum =  attributeSet.GetEnumerator();\r\n\r\n\t\tvar atts = attributeSet.ToArray().ToList();\r\n\r\n\t\twhile(ienum.MoveNext())\r\n\t\t{\r\n\t\t\tLdapAttribute attribute=(LdapAttribute)ienum.Current;\r\n\t\t\tif(attribute.Name == \"sAMAccountName\")\r\n\t\t\t{\r\n\t\t\t\tuser.UserName = attribute.StringValue;\r\n\t\t\t} \r\n\t\t\telse if(attribute.Name == \"lastLogonTimestamp\")\r\n\t\t\t{\r\n\t\t\t\tuser.LastLogon = DateTime.FromFileTime(long.Parse(attribute.StringValue));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tusers.Add(user);\r\n\t}\r\n\r\n\tldapConn.Disconnect();\r\n\r\nAnd as soon as `Disconnect` is called I get the error. \r\n\r\nHas anyone else experienced this or know what might be going wrong?\r\n\r\n**stacktrace**\r\n\r\n\r\n\tSystem.Threading.Thread.Abort()\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.Dispose(bool disposing, string reason, int semaphoreId, InterThreadException notifyUser)\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.destroyClone(bool apiCall)\r\n\r\n\r\n\tNovell.Directory.Ldap.LdapConnection.Disconnect()\r\n\r\n\r\n\tLogonChecker.Managers.ActiveDirectory.GetADUsers() in ActiveDirectory.cs\r\n\t- \r\n\t64.                    }\r\n\t65.                }\r\n\t66.\r\n\t67.                users.Add(user);\r\n\t68.            }\r\n\t69.\r\n\t70.            ldapConn.Disconnect();\r\n\t71.\r\n\t72.            return users;\r\n\t73.\r\n\t74.            // LdapConnection ADconn = new LdapConnection();\r\n\t75.            // ADconn.Connect(\"DOMAIN.com\", 389);\r\n\t76.            // ADconn.Bind(\"DOMAIN\\\\_Bassie\", \"password\");\r\n\r\n\r\n\tLogonChecker.Controllers.UserController+<Index>d__2.MoveNext() in UserController.cs\r\n\t- \r\n\t20.        }\r\n\t21.\r\n\t22.        // GET: User\r\n\t23.        public async Task<IActionResult> Index()\r\n\t24.        {\r\n\t25.            var ad = new ActiveDirectory();\r\n\t26.            var users = ad.GetADUsers();\r\n\t27.\r\n\t28.            return View(users);\r\n\t29.            // return View(await _context.User.ToListAsync());\r\n\t30.        }\r\n\t31.\r\n\t32.        // GET: User/Details/5\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeActionMethodAsync>d__12.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mandel-macaque": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/12d676563e7f233897f866c6150c6755ef3d46d1", "message": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5 (#6574)"}, {"url": "https://api.github.com/repos/mono/mono/commits/3f372d06eeb4b924a26871c91a2100205fb10550", "message": "[Tests] Skip some of the System.ServiceModel tests when using MOBILE (#6545)\n\nMobile does not support all clases found in System.ServiceModel, we skip\r\nthose tests of the not supported classes yet run all the others."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6576", "title": "[Tests] Skip a subset of the System.IdentityModel for iOS and Mac.", "body": "The iOS and Mac runtimes do not support all of the classes in System.IdentityModel, this change skips the tests of those classes on MOBILE and XAMMAC_4_5.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaykrell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/2e029d691e3d5dc5a838f867f8feb472864a8109", "message": "Convert ves_icall_System_Threading_Thread_GetName_internal to coophandle. (#6435)\n\nConvert thread get name to coop/handle (ves_icall_System_Threading_Thread_GetName_internal)."}, {"url": "https://api.github.com/repos/mono/mono/commits/6a04dc64516bd91b7b45d4587b66988b0e9b1285", "message": "Convert K&R warning farm to ANSI and add static/const.\nAlso smaller part fix C-vs.-C++-isms."}, {"url": "https://api.github.com/repos/mono/mono/commits/b909a770208a45d92cab764ff94aecf3de9932f3", "message": "return 0 is generally redundant in configure.ac, as the construction (#6528)\n\nof the test program wraps the text in int main() { ... ; return 0; }"}, {"url": "https://api.github.com/repos/mono/mono/commits/bbf6b67483a96e0c22ffc54cee4f868a771e0ada", "message": "Fix some warnings. (#6526)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e4f6b185b2aab27d5d004626874215c30720651", "message": "Convert thread get/set/clear state to coop/handle. (#6389)\n\n* Coop-handle ves_icall_System_Threading_Thread_GetState, SetState, ClrState.\r\nAnd cleanup.\r\n\r\n* Favor mono_internal_thread_handle_ptr."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6547", "title": "Performance counter coop/handle conversion, this time \"fixed\" instead of \"WrappedString\".", "body": "Machine handling is moved to managed -- in another PR as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6543", "title": "Move machine handling of performance counters from native to managed.", "body": "Just slightly less native code therefore.\r\n\r\nThe handling is trivial: returning false or 0 or null or an empty array, or in one surprising case ignoring it entirely.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6503", "title": "Understand PE32+, at least as much as PE32 is understood.", "body": "A number of other problems are noticed in the code but commented only.\r\nThis fixes https://bugzilla.xamarin.com/show_bug.cgi?id=56071", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6465", "title": "Support Windows 10 OS-supported unicode thread names.", "body": "As opposed to just the wierd debugger thread names.\r\n\r\nNot actually tested on Windows, granted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6443", "title": "Convert thread set name to coop/handle, passing fixed utf8 as suggested, and storing utf8.", "body": "Ludovic suggested passing fixed utf8, I'm not sure he meant to store it or not.\r\nResolve that before commit, and edit this comment down.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6406", "title": "Cleanup MonoError initialization.", "body": "Neuter most initializations. Make them asserts for now.\r\nGive names to ones that must stay.\r\nConvert dis, profiler, dump to new style.\r\nChange error_cleanup to end with initialization, so those explicit reinitializations can go away.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6394", "title": "A terser but clear style for zeroing a struct.", "body": "A terse but clear style for zeroing a struct.\r\nThis does not work portabily for unions, and will fail to compile for C++ if the first member is an enum (you have to cast). But otherwise zeros the entire thing.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6393", "title": "Some handle.h cleanup extracted from larger PR.", "body": "Some handle.h cleanup extracted from larger PR.  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6355", "title": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "body": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6298", "title": "convert mono/metadata/mono-perfcounters.c to use coop handles", "body": "convert mono/metadata/mono-perfcounters.c to use coop handles", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6268", "title": "Cleanup derived and expanded from PR 6247.", "body": "https://github.com/mono/mono/pull/6247/files\r\n\r\nThere is both dead and duplicated code.\r\nThe duplicated code can be cleaned up by the simple\r\ntransform of making error optional in a small number of places.\r\nThe dead code is very uninteresting and not worth carrying along.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6267", "title": "Cleanup mono_string_to_utf16 -- use unichar2 type to advantage over char", "body": "In particular, unichar2 is a useful pointer type to use to store a unichar2, instead of storing two chars.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6247", "title": " Convert thread names to coop handles. ", "body": "\r\nConvert thread names to coop handles. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumpera": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/232af8c206d9253d6f284d8ca960c174f4d7b9c7", "message": "Add CI to WebAssembly. This is PR based on top of # Only the top 3 commits matter for this PR: (#6488)\n\n* [WASM] Fix System.Core issues and disable broken tests.\r\n\r\n* [wasm] Fix cookie computation heap overflow. Use a local to make it thread safe.\r\n\r\n* [wasm] Disable System tests that don't work under WASM. Change the wasm profile to disable BSD sockets.\r\n\r\n* [wasm] Address reviewer feedback.\r\n\r\n* [wasm] Disable test that requires multiple threads.\r\n\r\n* [wasm] Add package target to wasm.\r\n\r\n* [wasm] Modify the runner to exit(1) if the test suite fails.\r\n\r\n* [wasm] Add CI configuration for WebAssembly.\r\n\r\n* [wasm] Fix issues found over review."}, {"url": "https://api.github.com/repos/mono/mono/commits/146346977cea8aaed2de8ab6a84c2a58b30aea24", "message": "Revert \"Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\" (#6557)\n\nThis reverts commit 411791c4696424d1ec9ec0f5258b6a0a4cc1885f."}, {"url": "https://api.github.com/repos/mono/mono/commits/411791c4696424d1ec9ec0f5258b6a0a4cc1885f", "message": "Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\n\nThis cute hack allow us to cut the budget of perf irrelevant blocks[1] while massively boosting those that are perf relevant[2].\r\n\r\nIt has a ton of missing features, like it doesn't detect nested loops, it doesn't take hints from inlined methods and it doesn't compute EH info.\r\nBeyond that, inlining budget is all but horrible, so there's ton of room for improvement here.\r\n\r\nResults are promising.\r\n\r\nA marginal improvements in benchmarks like Roslyn (2% user) while as much as 30% in micro benchmarks where the now bigger methods are in loop bodies.\r\nCode size with Roslyn changed from 5433242 to 5501751, IE extra 68.5k, or 1.2% more.\r\n\r\n[1] those ending in throw or in a catch handler\r\n[2] Loops"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radical": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/06b9b48420c2dc4b5d4928217797efb34a56779b", "message": "Bump msbuild (#6569)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6578", "title": "Bump msbuild to track mono-2017-12 msbuild branch HEAD", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lewurm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5ba19cb47812dd356b19624d5bce380e514c3c64", "message": "[configure] fix altstack detection\n\nnewer linux headers hide the `struct sigaltstack` definition (e.g. on\nUbuntu 17.10), probably because it is encouraged to use `stack_t`\nanyway.\n\nWe use `stack_t` in our code anyway:\nhttps://github.com/mono/mono/blob/146346977cea8aaed2de8ab6a84c2a58b30aea24/mono/mini/mini-exceptions.c#L2379\n\nThe change introducing the `ifdef` was already wrong imho:\nhttps://github.com/mono/mono/commit/f6d15e14c234c505e4b5e4d5e46a2666370d2b4a"}, {"url": "https://api.github.com/repos/mono/mono/commits/f49e87d42a26593cfbc2f26db6b58516bdbe1b1a", "message": "[exceptions] remove restore_stack_prot from managed code (#6518)\n\nit's dead code. restore happens in `restore_soft_guard_pages` upon\r\nreturning from the altstack machinery."}, {"url": "https://api.github.com/repos/mono/mono/commits/e39acb7a0d8409a3797b389b047e7544683dcca7", "message": "[exception] propagte stackoverflow exception to managed code (#6458)\n\nwe return the address of the StackOverflowException object in\r\n`restore_soft_guard_pages`, so it ends up in the architecture specific\r\nresult register (e.g. %rax) where the exception handler expects it.\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=60862"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318", "body": "maybe it's a good place to explain that there are \"native backtraces\" and \"managed stacktraces\" and how to obtain them. Depending on the issue, those can be useful.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vargaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5e72bd6d01c90ad37231c9a16099abc90c575440", "message": "[sdks] Set more ios version variables to empty to fix the build. (#6571)"}, {"url": "https://api.github.com/repos/mono/mono/commits/511c2fd59cf12ad86e36bbae70ba2cf4e7d1a982", "message": "[sdks] Set XCODE_VERSION to 'Xcode' for now to fix the ios build. (#6568)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6501", "title": "[sgen] Use sgen_is_object_alive_for_current_gen () instead of sgen_is_object_alive (), the latter doesn't work for oldspace objects, causing the gc handle to be freed even through the object is still alive.", "body": "Fixes https://github.com/mono/mono/issues/6490.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6429", "title": "[runtime] Avoid building a separate static library, use the shared ob\u2026", "body": "\u2026ject files for the static library as well. (#5233)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6285", "title": "[WIP][jit] Implement --trace using the profiler infrastructure.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BrzVlad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/4490aa5112e6fa9c64ed1db222b880fbce31e176", "message": "[runtime] Fix jit info leak when having aot images loaded\n\nWhen we had a jit info table for aot images loaded in the domain, we would queue jit infos for freeing at domain unload time. This means leaking during entire application life.\n\nAdd comment for jit info freeing when having multiple tables.\n\nFixes #60986."}, {"url": "https://api.github.com/repos/mono/mono/commits/f162931e25c4cc1ad3d1a21117bb085089f168cd", "message": "[mini] Fix seq point info leak (#6522)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdecb851ff6bbf2d0602104d4db0df86b0c4b7ba", "message": "[sgen] Fix overflow on large arrays (#6542)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6559", "title": "[interp] Interp fixes", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a717f377f0b773ffa99dc711ab4e687b50be991a", "message": "Fix bug 60848: Incorrect unicode custom attribute decoding (#6481)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6326", "title": "Fix xamarin-android issue 1130 and add test", "body": "https://github.com/xamarin/xamarin-android/issues/1130 is caused by us not properly storing/restoring the Thread.CurrentPrincipal context when execution contexts are stored. Task (and I think ThreadPool?) store the current context when a job is queued and restore it when running the job, which carries over state like the thread's current principal.\r\n\r\nRight now we have a weird hand-rolled implementation of CurrentPrincipal that I don't quite understand. I think we should be using the CurrentPrincipal value stored in the BCL's CallContext, so I tried doing that and it seems to fix this without breaking anything.\r\n\r\nI'd appreciate getting suggestions on how we should go about doing this for real. Does anyone know why the old implementation works the way it does? I assume the serialization logic has something to do with appdomains, but I would not have expected principals for the current thread to be shared between domains.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radekdoulik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9a183f2c833a54e10fdcb09a3300d86e89ee85ae", "message": "[Tests] Do not assume order of returned interfaces\n\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\ninterfaces returned from the System.Type::GetInterfaces method, as the\norder is not guaranted. As described in the [documentation][0].\n\nAlso see github [issue][1] for more information and reasoning.\n\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\n[1]: https://github.com/xamarin/xamarin-android/issues/1186"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/acea63a9c1e845f66253a79835b5fb10086910a1", "message": "Improve GetArgumentName in MonoOptions. Fixes bug-60904 (#6506)\n\n* Rewrite Options.GetArgumentName to use Regex\r\n\r\n* code cleanup\r\n\r\n* code cleanup"}, {"url": "https://api.github.com/repos/mono/mono/commits/15fad0dac29d4dc6f453c188dbaa88c832d2e760", "message": "fix system.data ssl-bug on linux"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583", "body": "and probably worth mentioning that it is possible to attach files to github issues via drag-n-drop? (Cause it's unclear and there is no \"attach\" button) \ud83d\ude42 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "monojenkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/7fa82690762511ae5ac0df82dcc679dc7cbb0fb0", "message": "[msvc] Update csproj files (#6538)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "migueldeicaza": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/d1649e90fcb80410b888edd6e5d20493c08e9a56", "message": "[corlib] Use Environment.Platform to access the platform, rather than probing the file system (#6535)\n\nAlternatve patch to: #6533"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexanderkyte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6562", "title": "[runtime] Apply cctor filters to callees of cctors", "body": "Fixes #59649 \r\n\r\nWhen stepping with a filter that ignores static constructors, we previously bailed out when the lowest frame is a static constructor. That isn't sufficient, as static constructors can call other functions. \r\n\r\nThis work exposed a lot of issues with respect to the lifetimes and accuracy of tls->frames. I've left a debug aid here, this is something worth doing a more deliberate refactor of later. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6456", "title": "[DONTMERGE] Add locking around tls->frames usage/freeing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6310", "title": "[sdks] Script lldb android integration", "body": "Read PR message here: https://github.com/mono/mono/pull/6309", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6309", "title": "[sdks] Add managed debugger tests to sdks", "body": "This adds the Managed debugger tests to the sdks. A couple of the tests are failing, but everything related to the setup of the runtime appears to be passing. We have 5 failures right now. \r\n\r\nNote also that this adds support for running an arbitrary .exe if someone is willing to edit the boostrap file and indicate their class main, and pass the args themselves. They can also set the args with the managed debugger. \r\n\r\nThis functionality is linked to https://github.com/mono/mono/pull/6310 . That PR has the lldb integration that was necessary to debug this into working. If combined with the ability to run an arbitrary .exe, it allows us to more easily take an android reproduction and run it in an sdks environment with different monos. \r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6514", "title": "Bug 60088 - Assertion at ../../../../external/mono/mono/mini/debugger\u2026", "body": "\u2026-agent.c:4765, condition `array->len == 1' not met\r\n\r\nProblem was that I didn't consider `async void` method when adding that assert", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409", "body": "Great work.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418", "body": "This is an important set of fixes to get into Mono for F# support\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350", "body": "Yes, that's correct. The .fsproj formulation supported by this change is suitable for both F# 3.0 and F# 3.1.\n\nSeparately, we will work on getting the F# 3.1 language updates into the code drop,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256", "body": "Hi @knocte, xbuild needs to \"do the same thing\" as MSBuild. Since MSBuild sets VisualStudioVersion, then xbuild needs to set it too. The question is what it gets set to by default and what the ramifications of that are.  The guiding principle should be to do what MSBuild does by default.\n\nWhy does this matter to F#? As of F# 3.1 (== VisualStudioVersion 12) , the F# SDK is located in \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nFor F# 3.0 it was located in \n\n```\n$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets\n```\n\nI agree it is frustrating that the F# 3.1 targets file has moved to a location that includes the word \"VisualStudio\" let alone \"VisualStudioVersion\". But that's how it is - from the Microsoft perspective F# releases are aligned with VisualStudio releases (although in-place updates of F# may happen).\n\nThe relevant part of F# 3.1 (and upgraded F# 3.0) project files is: \n\n```\n<Choose>\n  <When Condition=\"'$(VisualStudioVersion)' == '11.0'\">\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </When>\n  <Otherwise>\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </Otherwise>\n</Choose>\n```\n\nFor fsharp/fsharp I think this means we have to fix the Mono/Linux/Mac installation of F# 3.1 to lay down the targets at\n\n   $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v12.0\\FSharp\\Microsoft.FSharp.Targets\n\nAnyway, the commit under discussion needs to at least ensure that VisualStudioVersion is set, preferably to the same value used by MSBuild by default. \n\nCheers\nDon\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099", "body": "Hi @ovatsus \n\nI wonder If we should just drop the setting of VisualStudioVersion. MSBuild seems to set it depending on the actual minimal VS installed on the machine - you get 10.0 with VS2010 installed, 11.0 with VS2012, 12.0 with VS2013 etc.  \n\nIf xbuild continues to leave VisualStudioVersion  unset, then we can adjust the F# install to put a copy of the targets at  the path that we get if VisualStudioVersion  is empty, i.e. \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nwhich on Linux becomes \n\n```\n/usr/lib/mono/xbuild/Microsoft/VisualStudio/v/FSharp/Microsoft.FSharp.Targets\n```\n\nThis isn't too bad, as it is suitable for VisualStudio assets that on Linux/Mac are referenced independent of Visual Studio version.\n\nI'll submit an adjustment to the F# install on Linux/Mac to put the Targets in the above location.  \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705", "body": "OK, @knocte is this PR good to go? The fixes are becoming increasingly important for F# users of xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984", "body": "The F# parts of this problem are tracked at https://github.com/fsharp/fsharp/issues/163\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902", "body": "Two questions\n- any idea when a new mono containing this fix will be available? 3.2.4 doesn't seem to have it?\n- I added a Xamarin Studio bug to cover the same problem in the IDE, I presume it is a different code path which needs to be fixed. https://bugzilla.xamarin.com/show_bug.cgi?id=16085\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331", "body": "@knocte Very sorry. We must be more careful.\n\nAnd I understand why GetAssemblyIdentity and some other classes left unimplemented for several years.\n\nIn the Mono's rules, I think I must re-send this pullreq after the original [GetAssemblyIdentity.cs](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs) is published with a full implementation.\n\nWithout knowing how the `GetAssemblyIdentity` works, I don't know how to implement it...\n\n@akoeplinger My codes are written by only looking [this post on Nemerle forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) and some from [referencesource-beta.microsoft.com](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs).\n\nI've not used Reflector, Monodis, or MonoDevelop or other reverse engineering tools (even though I mentioned about these in [Nemerle Forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/L-g7RYdiCLkJ)).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962", "body": "``` diff\n- Reflector, Monodis, or MonoDevelop or other reverse engineering tools\n+ Reflector, Monodis, nor MonoDevelop nor other reverse engineering tools\n```\n\nSorry my not being good at English\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523", "body": "@akoeplinger but the original code on [this post](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) might be from ILSpy\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428", "body": "It is true what you said.\nI've looked and based on the disassembled code anyway.\nI close this thanks :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921", "body": "Hi, I wrote an [unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) and I've re-implemented that from scratch without looking any MS's code.\nHere: https://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nThis implementation is based on [the document in MSDN](http://msdn.microsoft.com/en-us/library/ms164296.aspx), and I made it to have parameters named `Version`, `PublicKeyToken`, and `Culture`. \nAnd also, I made `PublicKeyToken` well-formed by looking original MSBuild's output of the unit test,\n\nbut I don't know how to get trusted...\nYes, we can't forget what we once seen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996", "body": "Oh,\n\n```\nbase.Log.LogErrorWithCodeFromResources (\"GetAssemblyIdentity.CouldNotGetAssemblyName\", new object[] {} )\n```\n\nis not good.\n\nIt comes from my memory, which is the original MS's code.\nIt should be re-writed.\n\nIs\n\n```\nLog.LogErrorFromException (ex);\n```\n\nOk?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657", "body": "I see. I've made it so.\nhttps://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nbut... I don't know how to include [this unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) into Mono sources.\n\nI think it should be located [here](https://github.com/mono/mono/tree/master/mcs/class/Microsoft.Build.Tasks/Test) but it can't be tested like [CreateItemTest.cs](https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Tasks/Test/Microsoft.Build.Tasks/CreateItemTest.cs)...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351", "body": "Sorry, invalid account. I'll make a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584", "body": "@kumpera, @migueldeicaza,\n\nFWIW, this was the only stopper I encountered while building mono on FreeBSD 10.1 x86 and ia64, fresh installed with llvm+clang v3.7: https://github.com/dotnet/roslyn/issues/2844#issuecomment-129221304. \nPlease consider this PR for merging.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562", "body": "@alexrp, will this patch be available in mono v.next tagged release code? FreeBSD support is varying between 99-100% with current master. These small but tricky patches stick it to 100% and above. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031", "body": "@atsushieno, can this land in next release of mono?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355", "body": "@saper, seems like the exception is coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024, which has a caller that implicitly appear at one instance in the call stack you provided which leads to https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1274 (which implicitly relies on your changes in `ParseTZBuffer` method).\n\nLooking the the reference resource for `CreateAdjustmentRule` method: http://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,43a6662ca1445f1f,references, it seems like `startDate` and `endDate` are assigned to the `AdjustmentRule()` object as is and the object is returned. Which means there is something weird going on with `time_types` etc. that is somehow confusing the `TimeSpan` and further affecting the dst_end/dst_start `.Year` resolution. \n\nMight be a good idea to assert dst_start/end for equality before calling `CreateAdjustmentRule` (or write to console/file etc.) to find out if the `.Year` differs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876", "body": "As noted in my previous comment, it is `InvalidTimeZoneException` coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877", "body": "@akoeplinger, once the assertion failures are sorted out, will it make sense to have a submodule to dotnet/coreclr tests directory so CI can also test the future PRs. Probably with a thin wrapper to translate error codes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035", "body": "(This diff is hard to read, but it simply removes the `using` statement and fixes the code indentation)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098", "body": "Arguably, you could push this onto the client and say, \"You must cancel the token _and_ Dispose the `HttpMessageResponse.Content` to truly cancel the network connection\", but this ends up being fairly difficult in practice since most people will end up using `ReadAsString` which doesn't offer cancelation, and I suspect the vast majority of people would mess this up.  Activating the cancelation token that you pass into SendAsync should close the underlying network connection, regardless of whether the call has returned or not. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761", "body": "You're technically correct but this is much more difficult to program against. Now there are two separate ways to cancel the same underlying network connection that was created in this operation (the other being to dispose the HttpContent), depending solely on time. This makes for race-conditiony code that has been pushed up to every client of HttpClient, instead of having a single, guaranteed way to cancel the underlying network connection as long as it's open.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653", "body": "@akoeplinger No clue\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803", "body": "So, here's an even more compelling reason that the existing behavior is Problematic, it also makes handling cancellation very difficult for _clients_ of HttpClient. Consider the following code:\n\n``` cs\npublic Task<string> DownloadTwoUrls(string file1, string file2, CancellationToken ct)\n{\n    var resp1 = await myHttpClient.Get(\"/foo/\" + file1, ct);\n    var content1 = resp1.Content.ReadAsStringAsync();\n\n    // ct was **Disposed** because of the Disposal of the linked token, ct is now trashed\n    // The second half of this is now silently uncancelable. \n    var resp2 = await myHttpClient.Get(\"/foo\" + file2, ct);\n    return content1 + (await resp2.Content.ReadAsStringAsync());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931", "body": "@marek-safar (Sorry about the blast from the past), It actually does, in `UnregisterLinkedTokens`: https://github.com/mono/mono/blob/a31c107f59298053e4ff17fd09b2fa617b75c1ba/mcs/class/corlib/System.Threading/CancellationTokenSource.cs#L269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569", "body": "Hm. Apparently my princess is in another castle.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "baulig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262", "body": "Fixed, thank!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}, "5": {"Nihlus": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6577", "title": "Mono debugger crashes in native code when inspecting interface instances produced by Config.Net", "body": "## Steps to Reproduce\r\n\r\n1. Download the attached reproduction project\r\n2. Restore nuget packages and compile\r\n3. Run the project\r\n4. Observe the expected output\r\n5. Debug the project \r\n6. Inspect the local variable in the main method.\r\n7. Observe the runtime crash.\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nAt present, when inspecting variables containing an instance of a proxy interface created by Config.Net, the Mono debugger crashes in native code. If the variable is not inspected, the program behaves as expected and prints the stored value.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\nThe program should run as expected, and the Mono debugger should be able to inspect the variables without crashing.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[x] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n```\r\nMono JIT compiler version 5.4.1.6 (tarball Wed Nov  8 20:35:02 UTC 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       altstack\r\n\tNotifications: epoll\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          supported, not enabled.\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\nhttps://gist.github.com/Nihlus/d3274a9cce07728c3b36ce2da8082492\r\n\r\n### Attachments\r\n[CrashRepro.zip](https://github.com/mono/mono/files/1643632/CrashRepro.zip)\r\nhttps://github.com/aloneguid/config\r\nIssue on the Config.Net repository: https://github.com/aloneguid/config/issues/49\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rombersoft": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6573", "title": "Deadlock in delegate which created used ", "body": "## Steps to Reproduce\r\n\r\n1. Assembly computer with motherboard msi 760GM-p23. On other motherboards all works fine!\r\n2. Install 4.8.8-2-ARCH #1 SMP PREEMPT Thu Nov 17 15:09:32 CET 2016 i686 GNU/Linux\r\n3. Install mono 5.8\r\n4. git clone from https://github.com/MonoGame/MonoGame\r\n5. Create project monogame with some animation\r\n\r\n<!--\r\nVideo number one about problem https://www.dropbox.com/s/dd1t83kisa8z8xx/video.mp4?dl=04\r\nYou can see on this video that application stop draw until somebody touch a touchscreen\r\n\r\nVideo number two about problem https://www.dropbox.com/s/fio3ajc3qhpne2a/VID_20180117_103256.mp4?dl=0 \r\nYou can see on this video that my application works fine when above it placed another window (in current case this is urxvt terminal emulator). Take attention on time as seconds run when I place urxvt window above my application and seconds stop when my application is on top of all windows\r\n-->\r\n\r\n## Current Behavior\r\n\r\n<!--\r\nApplication sometimes is not drawn. But if you click mouse or press keyboard button application continue to draw but not long time and stop again\r\n-->\r\n\r\n## Expected Behavior\r\nApplication must draw animation\r\n\r\n## Description and other observation\r\nMonogame is game engine which in cycle runs methods Draw and Update. \r\nAt start I thought that problem in monogame, I even create topic here http://community.monogame.net/t/drawing-stops/9799\r\nBut when I tried with old version monogame (2.5) on mono 5.4 version that problem still exists.\r\nBut when I tried with old version monogame (2.5) on mono 2.10 version that problem does not exist.\r\nI can not use monogame 3.6 on mono 2.10 because 2.10 version does not support 4.5 framework and monogame 3.6 does not work on 4.0 framework\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[*] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n<!--\r\n5.2 and 5.8\r\n-->\r\n\r\n### Stacktrace\r\n\r\nI can not reproduce Stack trace. But I know place where drawing thread stops.\r\nLook at here\r\nhttps://github.com/MonoGame/MonoGame/blob/master/MonoGame.Framework/Graphics/GraphicsDevice.OpenGL.cs#L356\r\nI am sure that it is problem on new mono.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eatdrinksleepcode": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6560", "title": "Incorrect behavior for Take/Skip/Concat combination", "body": "## Steps to Reproduce\r\n\r\n```\r\nvar inputs = new [] { \"left\", \"right\" };\r\nvar outputs = inputs.Take(1)\r\n                    .Concat(Enumerable.Repeat((object)\"middle\", 1))\r\n                    .Concat(inputs.Skip(1)).ToArray();\r\nforeach(var item in outputs) {\r\n\tConsole.WriteLine(item);\r\n}\r\n```\r\n## Current Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nleft\r\n```\r\n\r\n## Expected Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nright\r\n```\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.4.1.7\r\n\r\n## Notes\r\n\r\n_This is a regression_: the same code works correctly under Mono 4.8.1.\r\n\r\nNote the cast to ```object``` inside the ```Enumerable.Repeat```. This is necessary to reproduce the bug; without the cast, the code works correctly.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6555", "title": "Process.WaitForExit() gets slower the larger your open file limit (ulimit -n) is on Linux", "body": "## Steps to Reproduce\r\n\r\n1. Compile this: `csc test.cs`:\r\n\r\n```csharp\r\npublic static class Program {\r\n    public static int Main () {\r\n        for (int i = 0; i < 100; i++) {\r\n            var p = System.Diagnostics.Process.Start (\"echo\", \"hello\");\r\n            if (!p.WaitForExit (10000)) return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```\r\n2. `$ (ulimit -n 1000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m0.402s\r\nuser\t0m0.028s\r\nsys\t0m0.184s\r\n```\r\n3. `$ (ulimit -n 100000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m1.277s\r\nuser\t0m0.380s\r\nsys\t0m0.592s\r\n```\r\n4. `$ (ulimit -n 1000000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m8.758s\r\nuser\t0m3.424s\r\nsys\t0m4.424s\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt gets slower the higher your ulimit -n is.\r\n\r\nNote: you may need to change your system settings (`/etc/security/limits.conf`) to allow higher limits.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNot getting slower.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04/16.04\r\n[ ] Windows\r\n\r\n**Version Used**: master, 5.8.088 and 4.2.1 (so either a very old bug or something outside our control)\r\n\r\nThis was the root cause behind an issue (https://github.com/mono/mono/pull/6537) we had on Jenkins because the Azure Linux VM builders had ulimit -n set to 1048576.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6548", "title": "Frequent test failures of ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test", "body": "## Steps to Reproduce\r\n\r\n1. Compile Mono on Linux i386\r\n2. `make -C mcs/class/corlib run-xunit-test`\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nFrequent test failure in System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test: https://github.com/mono/corefx/blob/dfd98e7113a99708f4c9ed063a8c481f838aa8d3/src/System.Threading/tests/ThreadLocalTests.cs#L192-L225\r\n\r\nThis seems to only occur on i386 and on Linux: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=ubuntu-1404-i386/\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNo test failure.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04\r\n[ ] Windows\r\n\r\n**Version Used**: master\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\n\r\n```\r\nAssert.False() Failure\r\nExpected: False\r\nActual:   True\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\n  at System.Threading.Tests.ThreadLocalTests+ThreadLocalWeakReferenceTest.Run () [0x0001c] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:216 \r\n  at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference () [0x00005] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:224 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6523", "title": "Remove obsolete assemblies in next major version bump", "body": "Tracking issue for assemblies to remove once we can do another breaking change, i.e. when we do Mono 6.0.\r\n\r\n- [ ] IBM.Data.DB2.dll, replaced by NuGet package\r\n- [ ] ICSharpCode.SharpZipLib.dll, replaced by NuGet package, fixes problems like  https://bugzilla.xamarin.com/show_bug.cgi?id=59304\r\n- [ ] Compat.ICSharpCode.SharpZipLib.dll (old copy of above)\r\n- [ ] Commons.Xml.Relaxng.dll, replaced by NuGet package\r\n- [ ] Mono.C5.dll, replaced by NuGet package\r\n- [ ] RabbitMQ.Client.dll, replaced by NuGet package\r\n- Very old copy of Rx.NET, replaced by NuGet packages\r\n  - [ ] System.Reactive.Core.dll\r\n  - [ ] System.Reactive.Debugger.dll\r\n  - [ ] System.Reactive.Experimental.dll\r\n  - [ ] System.Reactive.Interfaces.dll\r\n  - [ ] System.Reactive.Linq.dll\r\n  - [ ] System.Reactive.Observable.Aliases.dll\r\n  - [ ] System.Reactive.PlatformServices.dll\r\n  - [ ] System.Reactive.Providers.dll\r\n  - [ ] System.Reactive.Runtime.Remoting.dll\r\n  - [ ] System.Reactive.Windows.Forms.dll\r\n  - [ ] System.Reactive.Windows.Threading.dll\r\n- Very old copy of ASP.NET MVC framework, replaced by NuGet packages\r\n  - [ ] System.Web.Http.dll\r\n  - [ ] System.Web.Http.SelfHost.dll\r\n  - [ ] System.Web.Http.WebHost.dll\r\n  - [ ] System.Web.Mvc.dll\r\n  - [ ] System.Web.Razor.dll\r\n  - [ ] System.Web.WebPages.Deployment.dll\r\n  - [ ] System.Web.WebPages.dll\r\n  - [ ] System.Web.WebPages.Razor.dll\r\n  - [ ] WebMatrix.Data.dll\r\n  - [ ] Microsoft.Web.Infrastructure.dll\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6513", "title": "SocketTest.AcceptBlockingStatus is flaky on ARM", "body": "It failed 47 times in the last two weeks on the armel, armhf and arm64 master lanes with this stack trace:\r\n\r\n```\r\nMESSAGE:\r\nSystem.Net.Sockets.SocketException : Connection timed out\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Sockets.Socket.Connect (System.Net.EndPoint remoteEP) [0x000b0] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/System.Net.Sockets/Socket.cs:886 \r\n  at MonoTests.System.Net.Sockets.SocketTest.BlockingConnect (System.Boolean block, System.Int32 port) [0x00033] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:136 \r\n  at MonoTests.System.Net.Sockets.SocketTest.AcceptBlockingStatus () [0x00006] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:171 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6466", "title": "System.Diagnostics.ProcessTest.Start1_FileName_NotFound failing on newer Ubuntu", "body": "## Steps to Reproduce\r\n\r\n1. `make -C mcs/class/System run-test V=1 TESTNAME=System.Diagnostics.ProcessTest.Start1_FileName_NotFound\r\n`\r\n\r\nNote: This was first reported in https://github.com/mono/mono/issues/6383, after the native crash was fixed.\r\n\r\n## Current Behavior\r\n\r\n```\r\n...F\r\nTests run: 1, Passed: 0, Errors: 0, Failures: 1, Inconclusive: 0\r\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\r\nElapsed time: 00:00:00.0690000\r\n\r\nErrors and Failures:\r\n\r\n1) Start1_FileName_NotFound (MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound)\r\n   #C1\r\n  at MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound () [0x0015b] in /home/alexander/dev/mono/mcs/class/System/Test/System.Diagnostics/ProcessTest.cs:215 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/alexander/dev/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n\r\ngvfs-open: /usr/bin/shouldnoteverexist: error opening location: Error when getting information for file '/usr/bin/shouldnoteverexist': No such file or directory\r\n\r\nResults saved as /home/alexander/dev/mono/mcs/class/System/TestResult-net_4_x.xml.\r\n../../build/tests.make:208: recipe for target 'run-test-lib' failed\r\nmake[1]: *** [run-test-lib] Error 1\r\n```\r\n\r\n## Expected Behavior\r\n\r\nno failure.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 16.04 in VirtualBox VM and Ubuntu chroot on a ChromeOS device.\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\ne9913fdc487622073a0827f32f845b637163590d\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/0c59209931f618d7811e4e0ff602e47f6276ef3e", "message": "[tests] Disable weak-fields.exe on LLVM as well"}, {"url": "https://api.github.com/repos/mono/mono/commits/a99d7f4b1318091354ecc12c0be1aa97e34ae2c0", "message": "[ci] Use correct -arch syntax in CFLAGS on OSX (#6570)\n\nIn c7d8d247c35b6fa08bbc7e36d2f44fefcdf48b5a I unified how we're\r\npassing -arch in CFLAGS to \"-arch=XXX\" since the original change\r\nin 63a49e9eb8b569c6d5265168101982f5557c52bb mixed the formats.\r\n\r\nTurns out the correct syntax is \"-arch XXX\" instead and it broke\r\nthe ccache build in bockbuild because it complained about the\r\nunknown format.\r\n\r\nAlso add LDFLAGS in the amd64 case to match what we have in bockbuild."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430", "body": "nit: in most templates I've seen the current/problematic behavior comes before the expected one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553", "body": "I'd rather instruct them to specifically run `mono --version` so we get full commit hash etc. which is included there.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037", "body": "not sure we need to mention both backtrace and stacktrace, they're used pretty much interchangeably anyway.\r\n\r\nstacktrace seems to be more commonly known from what I've seen.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145", "body": "`macOS`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052", "body": "don't you get this: \r\n![image](https://user-images.githubusercontent.com/1376924/33861614-14d2eef2-deb5-11e7-81a3-3c8a53f87857.png) ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598", "body": "What about we just remove this and the \"expected behavior\" description below? It doesn't add anything which isn't clear from the section header anyway and would make the template simpler.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735", "body": "maybe make it \"repro code/solution\" to be clear", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328", "body": "use `git://` here like the other submodules\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595", "body": "This must use `git://` instead of `git@` otherwise it won't be accessible to people without push access to that repo.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942", "body": "This must be `git://` as `git@` requires authentication.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928", "body": "typo: `borinssl`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077", "body": "`NuGet.BuildTasks` should be `nuget-buildtasks`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472", "body": "this no longer exists", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665", "body": "this is called `/external/binary-reference-assemblies` now", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543", "body": "should we keep this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861", "body": "while you're at it you could move the CODEOWNERS to the .github folder as well. And maybe CONTRIBUTING.md too?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757", "body": "add the same in the CROSS_COMPILING section above too to make it consistent.\n\nActually, I'm wondering if we still need this separation when both if branches are the same anyway?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexrp": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6546", "title": "Miscellaneous coverage profiler cleanup tasks", "body": "Opening this as a sort of meta-bug to keep track of some relatively small issues with the coverage profiler that should be addressed over time.\r\n\r\n- [ ] When we're comfortable bumping the output format version, it would be nice to change the overall structure to be more easily digestible for readers. For example, all `class` elements should be under an `assembly` element, all `method` elements should be under a `class` element, etc.\r\n- [ ] Type names (and signatures in general) should be fully qualified in the output, and not use C# names like `int`, `long`, etc.\r\n- [ ] The way we output generic definitions and generic instantiations needs to be cleaned up and made consistent. For example, if a program has a method `Foo<T> ()` and executes the instantiation `Foo<int> ()`, the output file will mention `Foo<int> ()` with all the correct execution counts, but it will also mention the uninstantiated `Foo<T> ()` with all-zero counts, as if it was uncovered. We should only mention the generic definition (with all the counts from all instantiations merged), not every single instantiation.\r\n- [ ] The data structures (or rather, lack thereof) in the profiler can be simplified. There's no particular reason we need to use a bunch of hash tables to map everything back and forth the way we do. The code would be much easier to read and maintain if we just had some proper structures for representing loaded assemblies, classes, and methods.\r\n- [ ] We should resolve method signatures and such ahead of time instead of doing it when we're dumping coverage data at shutdown. Resolving method signatures during shutdown can cause assemblies to be loaded, and metadata from those will be missing in the output as a result.\r\n- [ ] There's some commented out code relating to zipping of the output. This should either be implemented or removed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3491b7b604c2d1741e1d261a3315aa0e5a554d0c", "message": "[profiler] Write out all uncovered classes/methods in a loaded image. (#6544)\n\n* [runtime] Export mono_class_get_checked () for use in profilers.\r\n\r\n* [runtime] Expand mono_method_get_header_summary () to collect more info.\r\n\r\nIt now collects all the trivially-accessible header data that doesn't require\r\nchasing down other metadata.\r\n\r\n* [profiler] Use mono_method_get_header_summary () in the coverage code.\r\n\r\nWe only need code start and size information, not all the data that is present\r\nin the header. By switching to this function, we avoid all the side effects\r\nthat come with resolving local variables and exception clauses (which can even\r\nresult in loading assemblies in the worst case).\r\n\r\n* [profiler] Write out all uncovered classes/methods in a loaded image.\r\n\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60225\r\n\r\nThis required a bit of refactoring and some workarounds for various special\r\ncases. This also fixes some race conditions with respect to how data was\r\ninserted into the lock-free hash tables and queues."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958", "body": "Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974", "body": "Minor style issue: Spaces here instead of tabs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870", "body": "s/mono-lite/monolite/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873", "body": "This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6530", "title": "Mono's MSBuild is slow on Mac due to constant IO", "body": "## Steps to Reproduce\r\n\r\n1. See https://github.com/Microsoft/msbuild/blob/30b19e9f2cefb6d9675d660c8bb8b317c06ff9a1/src/Shared/NativeMethodsShared.cs#L553-L556\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nIO is done to check whether the platform is OS X.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nIO should be done at most once, or some other detection mechanism should be used. (pinvoke libc and get OS name)\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.168 (pull-request-6404/6f02ba66ba8 Thu Jan  4 16:11:23 EST 2018)\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\nProbably should be backported to all releases\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexander-vi": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6525", "title": "[Linux] [mipsel] Crash on any exception in C# code", "body": "## Code to reproduce\r\n```C#\r\nusing System;\r\n\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                  throw new ArgumentNullException();\r\n            }\r\n            catch\r\n            {\r\n                Console.WriteLine(\"Error!\");\r\n                Environment.Exit(1);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\nCrash with the following stack:\r\n```\r\n$ mono test\r\nStacktrace:\r\n\r\n\r\nNative stacktrace:\r\n\r\n\tmono() [0x4c7780]\r\n\r\nDebug info from gdb:\r\n\r\n[New LWP 17157]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/mipsel-linux-gnu/libthread_db.so.1\".\r\n0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n  Id   Target Id         Frame \r\n  2    Thread 0x76d43460 (LWP 17157) \"mono\" 0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n* 1    Thread 0x775618b0 (LWP 17156) \"mono\" 0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n\r\nThread 2 (Thread 0x76d43460 (LWP 17157)):\r\n#0  0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x7744432c in sem_wait@@GLIBC_2.2 () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#2  0x00688164 in mono_sem_wait ()\r\nwarning: GDB can't find the start of the function at 0x5d84b2.\r\n\r\n    GDB is unable to find the start of the function at 0x5d84b2\r\nand thus can't determine the size of that function's stack frame.\r\nThis means that GDB may be unable to access that stack frame, or\r\nthe frames below it.\r\n    This problem is most likely caused by an invalid program counter or\r\nstack pointer.\r\n    However, if you think GDB should simply search farther back\r\nfrom 0x5d84b2 for code which looks like the beginning of a\r\nfunction, you can increase the range of the search using the `set\r\nheuristic-fence-post' command.\r\n#3  0x005d84b4 in ?? ()\r\n\r\nThread 1 (Thread 0x775618b0 (LWP 17156)):\r\nwarning: GDB can't find the start of the function at 0x4c785a.\r\n#0  0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x004c785c in ?? ()\r\n\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n```\r\n\r\nPlease note that other C# features looks like work fine. I've managed to compile and launch several other examples.\r\n\r\n\r\n\r\n## Expected Behavior\r\nMessage \"Error!\" is printed.\r\n\r\n### System information\r\nMono is installed from packages as \"mono-devel\".\r\n```\r\n$ mono --version\r\nMono JIT compiler version 3.2.8 (Debian 3.2.8+dfsg-10)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       normal\r\n\tNotifications: epoll\r\n\tArchitecture:  mips\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tGC:            sgen\r\n```\r\n\r\n```\r\n$ cat /proc/cpuinfo \r\nsystem type\t\t: Baikal-T Generic SoC\r\nmachine\t\t\t: T-Platforms mITX Board\r\nprocessor\t\t: 0\r\ncpu model\t\t: MIPS P5600 V3.0  FPU V2.0\r\nBogoMIPS\t\t: 597.60\r\nwait instruction\t: yes\r\nmicrosecond timers\t: yes\r\ntlb_entries\t\t: 576\r\nextra interrupt vector\t: yes\r\nhardware watchpoint\t: yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]\r\nisa\t\t\t: mips1 mips2 mips32r1 mips32r2\r\nASEs implemented\t: vz msa eva\r\nshadow register sets\t: 1\r\nkscratch registers\t: 3\r\npackage\t\t\t: 0\r\ncore\t\t\t: 0\r\nVCED exceptions\t\t: not available\r\nVCEI exceptions\t\t: not available\r\n```\r\n\r\n```\r\n$ uname -a\r\nLinux tclient 3.19.12.23-mitx #1 SMP Thu Nov 2 19:47:08 UTC 2017 mips GNU/Linux\r\n```\r\n\r\n```\r\n$ cat /etc/*-release\r\nPRETTY_NAME=\"Debian GNU/Linux 8 (jessie)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"8\"\r\nVERSION=\"8 (jessie)\"\r\nID=debian\r\nHOME_URL=\"http://www.debian.org/\"\r\nSUPPORT_URL=\"http://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n```\r\n\r\nI know that this version of Mono is a bit old, but maybe you can provide me some workaround or this issue is present in the current version. Hope this bugreport will be useful for you.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6519", "title": "System.Data tests failures on watch", "body": "## Steps to Reproduce\r\n\r\n1. Get 2017-12 XI monthly integration\r\n2. \r\n3. \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nFaling tests\r\n```\r\n[FAIL] DbDataAdapterTest.AddToBatch : System.NotSupportedException : Specified method is not supported. \r\n[FAIL] SqlCommandBuilderTest.CatalogLocation_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogLocationTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOption_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOptionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_PrefixSuffix_NoMatch : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_UnquotedIdentifier_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull1 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull2 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull3 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull4 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull5 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull6 : An unexpected exception type was thrown \r\n[FAIL] SqlCommandTest.Clone : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandText : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout_Value_Negative : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandType_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ParameterCollectionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ResetCommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.BeginTransaction_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ChangeDatabase_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ClearPool_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_ConnectTimeout_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Database_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_DataSource_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PacketSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Password_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PersistSecurityInfo_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserID_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2_ConnectionString_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.CreateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Empty : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Whitespace : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ServerVersion_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectConnection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.DeleteCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.InsertCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.SelectCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.UpdateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.CompareInfo : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DBNull : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor7 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Boolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Byte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_ByteArray : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Decimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Double : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Enum : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Guid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Object : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Single : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_String : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.LocaleId : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterName : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterNullTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetSqlDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumn : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumnNullMapping : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBinary : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBoolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlByte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDecimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDouble : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlGuid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlMoney : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlSingle : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlXml : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlValue : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Value : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.XmlSchemaTest : System.PlatformNotSupportedException was expected \r\nTests run: 1887 Passed: 1755 Inconclusive: 0 Failed: 132 Ignored: 163\r\n```\r\n\r\n## Expected Behavior\r\n\r\nNo failures\r\n\r\n### On which platforms did you notice this\r\n\r\n[ x] watchOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**: 2017-12 branch\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c282af6df5ffbc7fc4ec2ab857299c8d455f9d72", "message": "[mcs] Implements C# 7.0 discards"}, {"url": "https://api.github.com/repos/mono/mono/commits/370105c5e0a741b187c5040c137ae0b44e3a7bc4", "message": "[profiler] Don't double escape special characters. (#6534)\n\nThe output of parse_generic_type_names is processed by escape_string_for_xml and\r\nwe were double escaping `&` character"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6551", "title": "Bump linker", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6476", "title": "Weak field support backport", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6395", "title": "Bump corefx", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/128022", "body": "It should be bellow licence text\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137435", "body": "you should fix moonlight profile to use bootstrap gmcs from basic profile and not 2.0\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057", "body": "Made small tweak but `mono --version` is useful only for people running Mono directly. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027", "body": "My worry is that then people would just skip the section", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555", "body": "Should use git::// protocol", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687", "body": "How big is the submodule, it's still not accessible for me", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904", "body": "I didn't want to move that one as I don't know if I need to change the paths and secondly, CODEOWNERS seems to be useful on its own", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607", "body": "I don't know what's the purpose of that, seems like what should be on mono github wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rodrmoya": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6512", "title": "Missing counters/perf counters in Mono 5.8 with new profiler arguments", "body": "## Steps to Reproduce\r\n\r\n1. Run any desktop mono app with: `/Library/Frameworks/Mono.framework/Versions/Current/bin/mono --gc=sgen --profile=log:heapshot=ondemand,nolegacy,jit,gc,nogcalloc,gcroot,gcmove,counter,output=\"/var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd\" app.exe`\r\n2. Let it run for a few seconds and stop\r\n3. `mprof-report /var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd` shows no counters\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nUsing the old runtime arguments (`alloc,heapshot=ondemand,counters`) produces a MLPD with counters on it.\r\n\r\n## Expected Behavior\r\n\r\nCounters should be emitted in the MLPD file\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n```$ mono --version\r\nMono JIT compiler version 5.8.0.103 (2017-10/1359c52fc6e Wed Dec 20 10:52:54 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OleksandrChizh": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6498", "title": "Mono issue with TLS due to Client Certificates", "body": "Hi. We have a .NET 4.0 application for sending https(TLS 1.0) requests using HttpWebRequest. The application works correctly with the windows version of Mono but when we send a request on Ubuntu 16.04 using Mono 5.4.1.6 we get an error, see here: https://pastebin.com/hP9dZvuF\r\nJust to test the app we sent a request to https://www.google.com, https://github.com, etc. and we got no errors but when we send a request to required server the issue appears.\r\nWe tried to import required certificates manually using certmgr and mozroots but it didn't solve the issue.\r\nWe are thinking it's an issue of Mono because we compiled the same code with .NET Core and it works well. Is there any chance to solve this issue?\r\nThank you!\r\n\r\n> CQNET: Error getting response stream (ReadDone1): ReceiveFailure - Error\r\n> System.Net.WebException: Error getting response stream (ReadDone1): ReceiveFailure ---> System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:100000b6:SSL routines:OPENSSL_internal:NO_RENEGOTIATION\r\n>   at /build/mono-5.4.1.6/external/boringssl/ssl/s3_pkt.c:446\r\n>   at Mono.Btls.MonoBtlsContext.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Boolean& wantMore) [0x00050] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.ProcessRead (Mono.Net.Security.BufferOffsetSize userBuffer) [0x00011] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream:ProcessRead (Mono.Net.Security.BufferOffsetSize)\r\n>   at Mono.Net.Security.AsyncReadRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x0000c] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<ProcessOperation>d__24.MoveNext () [0x000ff] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<StartOperation>d__23.MoveNext () [0x0008b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream+<StartOperation>d__58.MoveNext () [0x001bf] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter1[TResult].GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Threading.Tasks.TaskToApm.End[TResult] (System.IAsyncResult asyncResult) [0x0002e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.EndRead (System.IAsyncResult asyncResult) [0x00000] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.WebConnection.ReadDone (System.IAsyncResult result) [0x0001b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Net.HttpWebRequest.EndGetResponse (System.IAsyncResult asyncResult) [0x00058] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.HttpWebRequest.GetResponse () [0x0000e] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at k.s (System.String bqi, System.Int32 bqj) [0x00043] in <31d60139ab8f4173b33ee35d33fa2fdb>\r\n>", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6498/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luhenry": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6490", "title": "Reenable weak-fields.exe test", "body": "Extracted from https://bugzilla.xamarin.com/show_bug.cgi?id=60973\r\n\r\nIt fails with the following output\r\n\r\n```\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 16946264\r\n```\r\n\r\n@vargaz noted that it's the test that seems flaky since it doesn't expect the object to be randomly retained.\r\n\r\nIt was disabled with https://github.com/mono/mono/pull/6191", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6567", "title": "[tests] Output XUnit tests to mcs/class/lib/$(PROFILE)/tests like NUnit tests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6500", "title": "[sdks] Move some code supporting the BCL from XA to Mono", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErwinVorenhout": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6477", "title": "GetActiveTcpConnections->state returns wrong status", "body": "I am trying to monitor an active TCP connection with the following code, when running on windows the _log.logInfo function will simply return established but when running on Mono 4.2.1 it will return \"Closed\", while the connection is established according: netstat -anp --tcp. \r\n\r\n```\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\r\ntcp        0      0 192.168.200.202:42685   192.168.200.218:18000   ESTABLISHED 23378/mono\r\n```\r\n\r\nThis is the code that I am using:\r\n```\r\nIPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();\r\nTcpConnectionInformation[] tcpConnections = ipProperties.GetActiveTcpConnections().Where(x => x.LocalEndPoint.Equals(_client.Client.LocalEndPoint) && x.RemoteEndPoint.Equals(_client.Client.RemoteEndPoint)).ToArray();\r\nif (tcpConnections != null && tcpConnections.Length > 0)\r\n{\r\n       TcpState stateOfConnection = tcpConnections.First().State;\r\n      if (_connected != 2)\r\n      {                              \r\n           if (stateOfConnection != TcpState.Established)\r\n           {\r\n                _log.logInfo(tcpConnections.First().RemoteEndPoint.ToString() + \"status:\" + \r\n                tcpConnections.First().State.ToString());\r\n                reConnect();\r\n           }\r\n      }\r\n}\r\n```\r\n\r\nThe output on windows when placing the log function above the if statement: \r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : established\r\n```\r\n\r\nWhile the output on Linux is:\r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : closed\r\n```\r\n\r\nI found out that Mono uses the ```/proc/net/tcp``` to read out the TCP/IP connections \r\nWhen trying to monitor the connection on remote addr 192.168.200.218  /proc/net/tcp returns the following:\r\n\r\n```  \r\nsl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode\r\n0: 0100007F:0CEA 00000000:0000 0A 00000000:00000000 00:00000000 00000000   111        0 1077650 1 0000000000000000 100 0 0 10 0\r\n1: 00000000:008B 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815396 1 0000000000000000 100 0 0 10 0\r\n2: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 17055 1 0000000000000000 100 0 0 10 0\r\n3: 00000000:01BD 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815395 1 0000000000000000 100 0 0 10 0\r\n4: 29CAA8C0:0016 DAC8A8C0:DBFB 01 00000080:00000000 01:00000015 00000000     0        0 2906153 3 0000000000000000 25 4 1 10 16\r\n```\r\nHere is number 4 the connection that I am trying to monitor(HEX DA C8 A8 C0  = decimal 192.168.200.218 ) the  state is  01 in the table.\r\n\r\n According the [kernel ](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h?id=HEAD) state 01 should be established so I am wondering where the state closed is comming from?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebasijan": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6471", "title": "PlatformNotSupportedException when calling LdapConnetion.Disconnect", "body": "Everything appears to be working fine (apart from the fact that retrieving a specific attribute should be way easier than iterating around all existing attributes - not sure why it was designed this way), but when I try to disconnect I get\r\n\r\n > PlatformNotSupportedException: Thread abort is not supported on this platform.\r\n\r\nThe code is pretty much exactly as taken from the Novell documentation, aprt from the fact that I am trying to just rerieve 2 specific attributes (name and logon time): \r\n\r\n\tvar users = new List<User>();\r\n\r\n\t// Creating an LdapConnection instance \r\n\tLdapConnection ldapConn= new LdapConnection();\r\n\r\n\t//Connect function will create a socket connection to the server\r\n\tldapConn.Connect(\"DOMAIN.com\",389);\r\n\r\n\t//Bind function will Bind the user object Credentials to the Server\r\n\tldapConn.Bind(\"DOMAIN\\\\_Bassi\",\"password\");\r\n\r\n\t// Searches in the Marketing container and return all child entries just below this\r\n\t//container i.e. Single level search\r\n\tLdapSearchResults lsc=ldapConn.Search(\"OU=Users,OU=MCS,OU=AU,OU=COMPANY,DC=DOMAIN,DC=com\",\r\n\t\t\t\t\tLdapConnection.SCOPE_ONE,\r\n\t\t\t\t\t\"objectClass=*\",\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse);\r\n\r\n\twhile (lsc.hasMore())\r\n\t{\r\n\t\tvar user = new User();\r\n\r\n\t\tLdapEntry nextEntry = null;\r\n\t\ttry \r\n\t\t{\r\n\t\t\tnextEntry = lsc.next();\r\n\t\t}\r\n\t\tcatch(LdapException e) \r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Error: \" + e.LdapErrorMessage);\r\n\t\t\t// Exception is thrown, go for next entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tConsole.WriteLine(\"\\n\" + nextEntry.DN);\r\n\r\n\t\tLdapAttributeSet attributeSet = nextEntry.getAttributeSet();\r\n\t\tSystem.Collections.IEnumerator ienum =  attributeSet.GetEnumerator();\r\n\r\n\t\tvar atts = attributeSet.ToArray().ToList();\r\n\r\n\t\twhile(ienum.MoveNext())\r\n\t\t{\r\n\t\t\tLdapAttribute attribute=(LdapAttribute)ienum.Current;\r\n\t\t\tif(attribute.Name == \"sAMAccountName\")\r\n\t\t\t{\r\n\t\t\t\tuser.UserName = attribute.StringValue;\r\n\t\t\t} \r\n\t\t\telse if(attribute.Name == \"lastLogonTimestamp\")\r\n\t\t\t{\r\n\t\t\t\tuser.LastLogon = DateTime.FromFileTime(long.Parse(attribute.StringValue));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tusers.Add(user);\r\n\t}\r\n\r\n\tldapConn.Disconnect();\r\n\r\nAnd as soon as `Disconnect` is called I get the error. \r\n\r\nHas anyone else experienced this or know what might be going wrong?\r\n\r\n**stacktrace**\r\n\r\n\r\n\tSystem.Threading.Thread.Abort()\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.Dispose(bool disposing, string reason, int semaphoreId, InterThreadException notifyUser)\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.destroyClone(bool apiCall)\r\n\r\n\r\n\tNovell.Directory.Ldap.LdapConnection.Disconnect()\r\n\r\n\r\n\tLogonChecker.Managers.ActiveDirectory.GetADUsers() in ActiveDirectory.cs\r\n\t- \r\n\t64.                    }\r\n\t65.                }\r\n\t66.\r\n\t67.                users.Add(user);\r\n\t68.            }\r\n\t69.\r\n\t70.            ldapConn.Disconnect();\r\n\t71.\r\n\t72.            return users;\r\n\t73.\r\n\t74.            // LdapConnection ADconn = new LdapConnection();\r\n\t75.            // ADconn.Connect(\"DOMAIN.com\", 389);\r\n\t76.            // ADconn.Bind(\"DOMAIN\\\\_Bassie\", \"password\");\r\n\r\n\r\n\tLogonChecker.Controllers.UserController+<Index>d__2.MoveNext() in UserController.cs\r\n\t- \r\n\t20.        }\r\n\t21.\r\n\t22.        // GET: User\r\n\t23.        public async Task<IActionResult> Index()\r\n\t24.        {\r\n\t25.            var ad = new ActiveDirectory();\r\n\t26.            var users = ad.GetADUsers();\r\n\t27.\r\n\t28.            return View(users);\r\n\t29.            // return View(await _context.User.ToListAsync());\r\n\t30.        }\r\n\t31.\r\n\t32.        // GET: User/Details/5\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeActionMethodAsync>d__12.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mandel-macaque": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/12d676563e7f233897f866c6150c6755ef3d46d1", "message": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5 (#6574)"}, {"url": "https://api.github.com/repos/mono/mono/commits/3f372d06eeb4b924a26871c91a2100205fb10550", "message": "[Tests] Skip some of the System.ServiceModel tests when using MOBILE (#6545)\n\nMobile does not support all clases found in System.ServiceModel, we skip\r\nthose tests of the not supported classes yet run all the others."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaykrell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/2e029d691e3d5dc5a838f867f8feb472864a8109", "message": "Convert ves_icall_System_Threading_Thread_GetName_internal to coophandle. (#6435)\n\nConvert thread get name to coop/handle (ves_icall_System_Threading_Thread_GetName_internal)."}, {"url": "https://api.github.com/repos/mono/mono/commits/6a04dc64516bd91b7b45d4587b66988b0e9b1285", "message": "Convert K&R warning farm to ANSI and add static/const.\nAlso smaller part fix C-vs.-C++-isms."}, {"url": "https://api.github.com/repos/mono/mono/commits/b909a770208a45d92cab764ff94aecf3de9932f3", "message": "return 0 is generally redundant in configure.ac, as the construction (#6528)\n\nof the test program wraps the text in int main() { ... ; return 0; }"}, {"url": "https://api.github.com/repos/mono/mono/commits/bbf6b67483a96e0c22ffc54cee4f868a771e0ada", "message": "Fix some warnings. (#6526)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e4f6b185b2aab27d5d004626874215c30720651", "message": "Convert thread get/set/clear state to coop/handle. (#6389)\n\n* Coop-handle ves_icall_System_Threading_Thread_GetState, SetState, ClrState.\r\nAnd cleanup.\r\n\r\n* Favor mono_internal_thread_handle_ptr."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6547", "title": "Performance counter coop/handle conversion, this time \"fixed\" instead of \"WrappedString\".", "body": "Machine handling is moved to managed -- in another PR as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6543", "title": "Move machine handling of performance counters from native to managed.", "body": "Just slightly less native code therefore.\r\n\r\nThe handling is trivial: returning false or 0 or null or an empty array, or in one surprising case ignoring it entirely.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6503", "title": "Understand PE32+, at least as much as PE32 is understood.", "body": "A number of other problems are noticed in the code but commented only.\r\nThis fixes https://bugzilla.xamarin.com/show_bug.cgi?id=56071", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6465", "title": "Support Windows 10 OS-supported unicode thread names.", "body": "As opposed to just the wierd debugger thread names.\r\n\r\nNot actually tested on Windows, granted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6443", "title": "Convert thread set name to coop/handle, passing fixed utf8 as suggested, and storing utf8.", "body": "Ludovic suggested passing fixed utf8, I'm not sure he meant to store it or not.\r\nResolve that before commit, and edit this comment down.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6406", "title": "Cleanup MonoError initialization.", "body": "Neuter most initializations. Make them asserts for now.\r\nGive names to ones that must stay.\r\nConvert dis, profiler, dump to new style.\r\nChange error_cleanup to end with initialization, so those explicit reinitializations can go away.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6394", "title": "A terser but clear style for zeroing a struct.", "body": "A terse but clear style for zeroing a struct.\r\nThis does not work portabily for unions, and will fail to compile for C++ if the first member is an enum (you have to cast). But otherwise zeros the entire thing.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6393", "title": "Some handle.h cleanup extracted from larger PR.", "body": "Some handle.h cleanup extracted from larger PR.  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6355", "title": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "body": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6298", "title": "convert mono/metadata/mono-perfcounters.c to use coop handles", "body": "convert mono/metadata/mono-perfcounters.c to use coop handles", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6268", "title": "Cleanup derived and expanded from PR 6247.", "body": "https://github.com/mono/mono/pull/6247/files\r\n\r\nThere is both dead and duplicated code.\r\nThe duplicated code can be cleaned up by the simple\r\ntransform of making error optional in a small number of places.\r\nThe dead code is very uninteresting and not worth carrying along.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6267", "title": "Cleanup mono_string_to_utf16 -- use unichar2 type to advantage over char", "body": "In particular, unichar2 is a useful pointer type to use to store a unichar2, instead of storing two chars.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6247", "title": " Convert thread names to coop handles. ", "body": "\r\nConvert thread names to coop handles. ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6235", "title": "g_assert should be an expression not a statement; provide g_assertf f is format like printf", "body": "g_assert should be an expression not a statement; provide g_assertf f is format like printf\r\n\r\n- g_assert should be an expression, not a statement\r\n   ANSI C assert gets this correct, and I corrected\r\n   widely used NT ASSERT circa 2001 with no ill effects\r\n   Note that ANSI C assert is void, g_assert here is boolean.\r\n\r\n - provide g_assertf\r\n   f is for format, like printf -- too terse?\r\n   Where you might previously say:\r\n   if (!(expr))\r\n     g_error(...); // like printf\r\n   now:\r\n    g_assertf(expr, ...)\r\n\r\nManual tests provided -- how to provide a test whose success is failure to compile?\r\nCorrect existing eglib/test to build and pass, but don't enable in build.\r\nEnabling it is a line in toplevel configure.ac to add eglib/test/Makefile\r\nafter eglib/Makefile.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumpera": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/232af8c206d9253d6f284d8ca960c174f4d7b9c7", "message": "Add CI to WebAssembly. This is PR based on top of # Only the top 3 commits matter for this PR: (#6488)\n\n* [WASM] Fix System.Core issues and disable broken tests.\r\n\r\n* [wasm] Fix cookie computation heap overflow. Use a local to make it thread safe.\r\n\r\n* [wasm] Disable System tests that don't work under WASM. Change the wasm profile to disable BSD sockets.\r\n\r\n* [wasm] Address reviewer feedback.\r\n\r\n* [wasm] Disable test that requires multiple threads.\r\n\r\n* [wasm] Add package target to wasm.\r\n\r\n* [wasm] Modify the runner to exit(1) if the test suite fails.\r\n\r\n* [wasm] Add CI configuration for WebAssembly.\r\n\r\n* [wasm] Fix issues found over review."}, {"url": "https://api.github.com/repos/mono/mono/commits/146346977cea8aaed2de8ab6a84c2a58b30aea24", "message": "Revert \"Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\" (#6557)\n\nThis reverts commit 411791c4696424d1ec9ec0f5258b6a0a4cc1885f."}, {"url": "https://api.github.com/repos/mono/mono/commits/411791c4696424d1ec9ec0f5258b6a0a4cc1885f", "message": "Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\n\nThis cute hack allow us to cut the budget of perf irrelevant blocks[1] while massively boosting those that are perf relevant[2].\r\n\r\nIt has a ton of missing features, like it doesn't detect nested loops, it doesn't take hints from inlined methods and it doesn't compute EH info.\r\nBeyond that, inlining budget is all but horrible, so there's ton of room for improvement here.\r\n\r\nResults are promising.\r\n\r\nA marginal improvements in benchmarks like Roslyn (2% user) while as much as 30% in micro benchmarks where the now bigger methods are in loop bodies.\r\nCode size with Roslyn changed from 5433242 to 5501751, IE extra 68.5k, or 1.2% more.\r\n\r\n[1] those ending in throw or in a catch handler\r\n[2] Loops"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115935", "body": "Why are you reducing it? The changelog lacks proper justification.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123130", "body": "I believe we should replace all bblock shenanigans with just emitting an iconst and let the dce pass do its job\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "radical": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/06b9b48420c2dc4b5d4928217797efb34a56779b", "message": "Bump msbuild (#6569)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6578", "title": "Bump msbuild to track mono-2017-12 msbuild branch HEAD", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lewurm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5ba19cb47812dd356b19624d5bce380e514c3c64", "message": "[configure] fix altstack detection\n\nnewer linux headers hide the `struct sigaltstack` definition (e.g. on\nUbuntu 17.10), probably because it is encouraged to use `stack_t`\nanyway.\n\nWe use `stack_t` in our code anyway:\nhttps://github.com/mono/mono/blob/146346977cea8aaed2de8ab6a84c2a58b30aea24/mono/mini/mini-exceptions.c#L2379\n\nThe change introducing the `ifdef` was already wrong imho:\nhttps://github.com/mono/mono/commit/f6d15e14c234c505e4b5e4d5e46a2666370d2b4a"}, {"url": "https://api.github.com/repos/mono/mono/commits/f49e87d42a26593cfbc2f26db6b58516bdbe1b1a", "message": "[exceptions] remove restore_stack_prot from managed code (#6518)\n\nit's dead code. restore happens in `restore_soft_guard_pages` upon\r\nreturning from the altstack machinery."}, {"url": "https://api.github.com/repos/mono/mono/commits/e39acb7a0d8409a3797b389b047e7544683dcca7", "message": "[exception] propagte stackoverflow exception to managed code (#6458)\n\nwe return the address of the StackOverflowException object in\r\n`restore_soft_guard_pages`, so it ends up in the architecture specific\r\nresult register (e.g. %rax) where the exception handler expects it.\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=60862"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318", "body": "maybe it's a good place to explain that there are \"native backtraces\" and \"managed stacktraces\" and how to obtain them. Depending on the issue, those can be useful.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vargaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5e72bd6d01c90ad37231c9a16099abc90c575440", "message": "[sdks] Set more ios version variables to empty to fix the build. (#6571)"}, {"url": "https://api.github.com/repos/mono/mono/commits/511c2fd59cf12ad86e36bbae70ba2cf4e7d1a982", "message": "[sdks] Set XCODE_VERSION to 'Xcode' for now to fix the ios build. (#6568)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6501", "title": "[sgen] Use sgen_is_object_alive_for_current_gen () instead of sgen_is_object_alive (), the latter doesn't work for oldspace objects, causing the gc handle to be freed even through the object is still alive.", "body": "Fixes https://github.com/mono/mono/issues/6490.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6429", "title": "[runtime] Avoid building a separate static library, use the shared ob\u2026", "body": "\u2026ject files for the static library as well. (#5233)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6285", "title": "[WIP][jit] Implement --trace using the profiler infrastructure.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/134015", "body": "Should be fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/134015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "BrzVlad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/4490aa5112e6fa9c64ed1db222b880fbce31e176", "message": "[runtime] Fix jit info leak when having aot images loaded\n\nWhen we had a jit info table for aot images loaded in the domain, we would queue jit infos for freeing at domain unload time. This means leaking during entire application life.\n\nAdd comment for jit info freeing when having multiple tables.\n\nFixes #60986."}, {"url": "https://api.github.com/repos/mono/mono/commits/f162931e25c4cc1ad3d1a21117bb085089f168cd", "message": "[mini] Fix seq point info leak (#6522)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdecb851ff6bbf2d0602104d4db0df86b0c4b7ba", "message": "[sgen] Fix overflow on large arrays (#6542)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6559", "title": "[interp] Interp fixes", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a717f377f0b773ffa99dc711ab4e687b50be991a", "message": "Fix bug 60848: Incorrect unicode custom attribute decoding (#6481)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6326", "title": "Fix xamarin-android issue 1130 and add test", "body": "https://github.com/xamarin/xamarin-android/issues/1130 is caused by us not properly storing/restoring the Thread.CurrentPrincipal context when execution contexts are stored. Task (and I think ThreadPool?) store the current context when a job is queued and restore it when running the job, which carries over state like the thread's current principal.\r\n\r\nRight now we have a weird hand-rolled implementation of CurrentPrincipal that I don't quite understand. I think we should be using the CurrentPrincipal value stored in the BCL's CallContext, so I tried doing that and it seems to fix this without breaking anything.\r\n\r\nI'd appreciate getting suggestions on how we should go about doing this for real. Does anyone know why the old implementation works the way it does? I assume the serialization logic has something to do with appdomains, but I would not have expected principals for the current thread to be shared between domains.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radekdoulik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9a183f2c833a54e10fdcb09a3300d86e89ee85ae", "message": "[Tests] Do not assume order of returned interfaces\n\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\ninterfaces returned from the System.Type::GetInterfaces method, as the\norder is not guaranted. As described in the [documentation][0].\n\nAlso see github [issue][1] for more information and reasoning.\n\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\n[1]: https://github.com/xamarin/xamarin-android/issues/1186"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/acea63a9c1e845f66253a79835b5fb10086910a1", "message": "Improve GetArgumentName in MonoOptions. Fixes bug-60904 (#6506)\n\n* Rewrite Options.GetArgumentName to use Regex\r\n\r\n* code cleanup\r\n\r\n* code cleanup"}, {"url": "https://api.github.com/repos/mono/mono/commits/15fad0dac29d4dc6f453c188dbaa88c832d2e760", "message": "fix system.data ssl-bug on linux"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583", "body": "and probably worth mentioning that it is possible to attach files to github issues via drag-n-drop? (Cause it's unclear and there is no \"attach\" button) \ud83d\ude42 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "monojenkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/7fa82690762511ae5ac0df82dcc679dc7cbb0fb0", "message": "[msvc] Update csproj files (#6538)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "migueldeicaza": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/d1649e90fcb80410b888edd6e5d20493c08e9a56", "message": "[corlib] Use Environment.Platform to access the platform, rather than probing the file system (#6535)\n\nAlternatve patch to: #6533"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexanderkyte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6562", "title": "[runtime] Apply cctor filters to callees of cctors", "body": "Fixes #59649 \r\n\r\nWhen stepping with a filter that ignores static constructors, we previously bailed out when the lowest frame is a static constructor. That isn't sufficient, as static constructors can call other functions. \r\n\r\nThis work exposed a lot of issues with respect to the lifetimes and accuracy of tls->frames. I've left a debug aid here, this is something worth doing a more deliberate refactor of later. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6456", "title": "[DONTMERGE] Add locking around tls->frames usage/freeing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6310", "title": "[sdks] Script lldb android integration", "body": "Read PR message here: https://github.com/mono/mono/pull/6309", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6309", "title": "[sdks] Add managed debugger tests to sdks", "body": "This adds the Managed debugger tests to the sdks. A couple of the tests are failing, but everything related to the setup of the runtime appears to be passing. We have 5 failures right now. \r\n\r\nNote also that this adds support for running an arbitrary .exe if someone is willing to edit the boostrap file and indicate their class main, and pass the args themselves. They can also set the args with the managed debugger. \r\n\r\nThis functionality is linked to https://github.com/mono/mono/pull/6310 . That PR has the lldb integration that was necessary to debug this into working. If combined with the ability to run an arbitrary .exe, it allows us to more easily take an android reproduction and run it in an sdks environment with different monos. \r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6514", "title": "Bug 60088 - Assertion at ../../../../external/mono/mono/mini/debugger\u2026", "body": "\u2026-agent.c:4765, condition `array->len == 1' not met\r\n\r\nProblem was that I didn't consider `async void` method when adding that assert", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409", "body": "Great work.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418", "body": "This is an important set of fixes to get into Mono for F# support\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350", "body": "Yes, that's correct. The .fsproj formulation supported by this change is suitable for both F# 3.0 and F# 3.1.\n\nSeparately, we will work on getting the F# 3.1 language updates into the code drop,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256", "body": "Hi @knocte, xbuild needs to \"do the same thing\" as MSBuild. Since MSBuild sets VisualStudioVersion, then xbuild needs to set it too. The question is what it gets set to by default and what the ramifications of that are.  The guiding principle should be to do what MSBuild does by default.\n\nWhy does this matter to F#? As of F# 3.1 (== VisualStudioVersion 12) , the F# SDK is located in \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nFor F# 3.0 it was located in \n\n```\n$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets\n```\n\nI agree it is frustrating that the F# 3.1 targets file has moved to a location that includes the word \"VisualStudio\" let alone \"VisualStudioVersion\". But that's how it is - from the Microsoft perspective F# releases are aligned with VisualStudio releases (although in-place updates of F# may happen).\n\nThe relevant part of F# 3.1 (and upgraded F# 3.0) project files is: \n\n```\n<Choose>\n  <When Condition=\"'$(VisualStudioVersion)' == '11.0'\">\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </When>\n  <Otherwise>\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </Otherwise>\n</Choose>\n```\n\nFor fsharp/fsharp I think this means we have to fix the Mono/Linux/Mac installation of F# 3.1 to lay down the targets at\n\n   $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v12.0\\FSharp\\Microsoft.FSharp.Targets\n\nAnyway, the commit under discussion needs to at least ensure that VisualStudioVersion is set, preferably to the same value used by MSBuild by default. \n\nCheers\nDon\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099", "body": "Hi @ovatsus \n\nI wonder If we should just drop the setting of VisualStudioVersion. MSBuild seems to set it depending on the actual minimal VS installed on the machine - you get 10.0 with VS2010 installed, 11.0 with VS2012, 12.0 with VS2013 etc.  \n\nIf xbuild continues to leave VisualStudioVersion  unset, then we can adjust the F# install to put a copy of the targets at  the path that we get if VisualStudioVersion  is empty, i.e. \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nwhich on Linux becomes \n\n```\n/usr/lib/mono/xbuild/Microsoft/VisualStudio/v/FSharp/Microsoft.FSharp.Targets\n```\n\nThis isn't too bad, as it is suitable for VisualStudio assets that on Linux/Mac are referenced independent of Visual Studio version.\n\nI'll submit an adjustment to the F# install on Linux/Mac to put the Targets in the above location.  \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705", "body": "OK, @knocte is this PR good to go? The fixes are becoming increasingly important for F# users of xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984", "body": "The F# parts of this problem are tracked at https://github.com/fsharp/fsharp/issues/163\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902", "body": "Two questions\n- any idea when a new mono containing this fix will be available? 3.2.4 doesn't seem to have it?\n- I added a Xamarin Studio bug to cover the same problem in the IDE, I presume it is a different code path which needs to be fixed. https://bugzilla.xamarin.com/show_bug.cgi?id=16085\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331", "body": "@knocte Very sorry. We must be more careful.\n\nAnd I understand why GetAssemblyIdentity and some other classes left unimplemented for several years.\n\nIn the Mono's rules, I think I must re-send this pullreq after the original [GetAssemblyIdentity.cs](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs) is published with a full implementation.\n\nWithout knowing how the `GetAssemblyIdentity` works, I don't know how to implement it...\n\n@akoeplinger My codes are written by only looking [this post on Nemerle forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) and some from [referencesource-beta.microsoft.com](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs).\n\nI've not used Reflector, Monodis, or MonoDevelop or other reverse engineering tools (even though I mentioned about these in [Nemerle Forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/L-g7RYdiCLkJ)).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962", "body": "``` diff\n- Reflector, Monodis, or MonoDevelop or other reverse engineering tools\n+ Reflector, Monodis, nor MonoDevelop nor other reverse engineering tools\n```\n\nSorry my not being good at English\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523", "body": "@akoeplinger but the original code on [this post](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) might be from ILSpy\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428", "body": "It is true what you said.\nI've looked and based on the disassembled code anyway.\nI close this thanks :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921", "body": "Hi, I wrote an [unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) and I've re-implemented that from scratch without looking any MS's code.\nHere: https://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nThis implementation is based on [the document in MSDN](http://msdn.microsoft.com/en-us/library/ms164296.aspx), and I made it to have parameters named `Version`, `PublicKeyToken`, and `Culture`. \nAnd also, I made `PublicKeyToken` well-formed by looking original MSBuild's output of the unit test,\n\nbut I don't know how to get trusted...\nYes, we can't forget what we once seen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996", "body": "Oh,\n\n```\nbase.Log.LogErrorWithCodeFromResources (\"GetAssemblyIdentity.CouldNotGetAssemblyName\", new object[] {} )\n```\n\nis not good.\n\nIt comes from my memory, which is the original MS's code.\nIt should be re-writed.\n\nIs\n\n```\nLog.LogErrorFromException (ex);\n```\n\nOk?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657", "body": "I see. I've made it so.\nhttps://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nbut... I don't know how to include [this unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) into Mono sources.\n\nI think it should be located [here](https://github.com/mono/mono/tree/master/mcs/class/Microsoft.Build.Tasks/Test) but it can't be tested like [CreateItemTest.cs](https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Tasks/Test/Microsoft.Build.Tasks/CreateItemTest.cs)...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351", "body": "Sorry, invalid account. I'll make a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584", "body": "@kumpera, @migueldeicaza,\n\nFWIW, this was the only stopper I encountered while building mono on FreeBSD 10.1 x86 and ia64, fresh installed with llvm+clang v3.7: https://github.com/dotnet/roslyn/issues/2844#issuecomment-129221304. \nPlease consider this PR for merging.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562", "body": "@alexrp, will this patch be available in mono v.next tagged release code? FreeBSD support is varying between 99-100% with current master. These small but tricky patches stick it to 100% and above. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031", "body": "@atsushieno, can this land in next release of mono?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355", "body": "@saper, seems like the exception is coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024, which has a caller that implicitly appear at one instance in the call stack you provided which leads to https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1274 (which implicitly relies on your changes in `ParseTZBuffer` method).\n\nLooking the the reference resource for `CreateAdjustmentRule` method: http://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,43a6662ca1445f1f,references, it seems like `startDate` and `endDate` are assigned to the `AdjustmentRule()` object as is and the object is returned. Which means there is something weird going on with `time_types` etc. that is somehow confusing the `TimeSpan` and further affecting the dst_end/dst_start `.Year` resolution. \n\nMight be a good idea to assert dst_start/end for equality before calling `CreateAdjustmentRule` (or write to console/file etc.) to find out if the `.Year` differs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876", "body": "As noted in my previous comment, it is `InvalidTimeZoneException` coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877", "body": "@akoeplinger, once the assertion failures are sorted out, will it make sense to have a submodule to dotnet/coreclr tests directory so CI can also test the future PRs. Probably with a thin wrapper to translate error codes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035", "body": "(This diff is hard to read, but it simply removes the `using` statement and fixes the code indentation)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098", "body": "Arguably, you could push this onto the client and say, \"You must cancel the token _and_ Dispose the `HttpMessageResponse.Content` to truly cancel the network connection\", but this ends up being fairly difficult in practice since most people will end up using `ReadAsString` which doesn't offer cancelation, and I suspect the vast majority of people would mess this up.  Activating the cancelation token that you pass into SendAsync should close the underlying network connection, regardless of whether the call has returned or not. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761", "body": "You're technically correct but this is much more difficult to program against. Now there are two separate ways to cancel the same underlying network connection that was created in this operation (the other being to dispose the HttpContent), depending solely on time. This makes for race-conditiony code that has been pushed up to every client of HttpClient, instead of having a single, guaranteed way to cancel the underlying network connection as long as it's open.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653", "body": "@akoeplinger No clue\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803", "body": "So, here's an even more compelling reason that the existing behavior is Problematic, it also makes handling cancellation very difficult for _clients_ of HttpClient. Consider the following code:\n\n``` cs\npublic Task<string> DownloadTwoUrls(string file1, string file2, CancellationToken ct)\n{\n    var resp1 = await myHttpClient.Get(\"/foo/\" + file1, ct);\n    var content1 = resp1.Content.ReadAsStringAsync();\n\n    // ct was **Disposed** because of the Disposal of the linked token, ct is now trashed\n    // The second half of this is now silently uncancelable. \n    var resp2 = await myHttpClient.Get(\"/foo\" + file2, ct);\n    return content1 + (await resp2.Content.ReadAsStringAsync());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931", "body": "@marek-safar (Sorry about the blast from the past), It actually does, in `UnregisterLinkedTokens`: https://github.com/mono/mono/blob/a31c107f59298053e4ff17fd09b2fa617b75c1ba/mcs/class/corlib/System.Threading/CancellationTokenSource.cs#L269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569", "body": "Hm. Apparently my princess is in another castle.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "atsushieno": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115348", "body": "> What about using [Category (\"NotDotNet\")]?\n> Thought about that before making the change, but I'm not sure this code + nunit 2.4.8 should really work under any system.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123074", "body": "umm, if it's something critical, let's please revert the change. I got my second dev. laotop (macbook) broken(!!) and am unable to do it by myself :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/128272", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144442", "body": "For reference, the correct bug # is 638098.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144475", "body": "Looks like this caused dist failure on 2.6 http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5020269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jbevain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/116030", "body": "Short version: as per Paolo's request.\nLong version: I started a discussion by asking why the branch cost was so high, wondering why we couldn't inline properties such as:\n\nget { return is_foo ? foo : bar; }\n\nAnd if we couldn't include the displacement in the cost rather. Paolo said there was no need for that, just to reduce the branch cost which was set to high.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/116030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/138529", "body": "Well, the test case is the unit test which passes on .net. But I'll revert this one as well as the runtime support, as it triggers regressions: #635349 and #605936. Will have to investigate more.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/138529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139373", "body": "Actually it's \u00abjust\u00bb a regression introduced by my change, and it's not specific to moonlight. I'm working on fixing it for everyone. Thanks for reporting the issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139401", "body": "This should be fixed in master by 85c0976c3d913ba16a13d44159f8e7591732df56. Could you try to run the moon-unit test with it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ajorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121447", "body": "This commit breaks the build http://build.mono-project.com/ViewLane.aspx?lane_id=62&host_id=23&revision_id=90989\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/122189", "body": "This commit breaks the build:\n\nSystem.Collections.Concurrent/BlockingCollection.cs(54,17): error CS0246: The type or namespace name `ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\nSystem.Collections.Concurrent/BlockingCollection.cs(55,17): error CS0246: The type or namespace name`ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/128154", "body": "This commit breaks the build.  It appears you neglected to add a file:\n\nmake[8]: **\\* No rule to make target `System.ServiceModel.Discovery.Version11/IDiscoveryProxyContract11.cs', needed by`../../class/lib/net_4_0/System.ServiceModel.Discovery.dll'.  Stop.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144680", "body": "MCS     [net_4_0] Microsoft.CSharp.dll\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1502: The best overloaded method match for `Mono.CSharp.Expression.MemberLookup(Mono.CSharp.ResolveContext, Mono.CSharp.TypeSpec, Mono.CSharp.TypeSpec, string, int, Mono.CSharp.Expression.MemberLookupRestrictions, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1503: Argument`#6' cannot convert `bool' expression to type`Mono.CSharp.Expression.MemberLookupRestrictions'\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,25): error CS0825: The contextual keyword `var' may only appear within a local variable declaration\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,66): error CS0841: A local variable`expr' cannot be used before it is declared\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1502: The best overloaded method match for `Mono.CSharp.BoolConstant.BoolConstant(bool, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1503: Argument`#1' cannot convert `object' expression to type`bool'\nCompilation failed: 6 error(s), 0 warnings\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144716", "body": "sgen-gc.c:202:37: fatal error: metadata/sgen-cardtable.h: No such file or directory\nPlease remember to dist new files. Fixed in 5cab581.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/146235", "body": "Something is wrong w/ this commit http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5124512\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/146235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121594", "body": "It looks like grendel forgot to backport the configure.in portion of 8de7037b16020bb919579c75e3be981152a37ff8\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144697", "body": "@eno\n\nIt looks like git didn't cherry-pick the fakepoll.h.  Fixed\n\n@gonzalop\n\nsupport cannot dep on mono.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "grendello": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121619", "body": "So I did, sorry about that. Fixed in 9e0162ea534e2dc49d3f134b80efc6d88670434b\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/122578", "body": "This commit breaks two tests in System.Web (both 2.0 and 4.0 profiles):\n\n```\nTest Case Failures:\n1) MonoTests.System.Web.HttpUtilityTest.UrlEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlEncode () [0x00007] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:718\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n\n2) MonoTests.System.Web.HttpUtilityTest.UrlPathEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback  fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncodeChar (Char c, System.IO.Stream result) [0x00010] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:647\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncode () [0x00037] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:744\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "garuma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/122230", "body": "Fixed in af30815fc99adaa315c2\n\nSorry\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/133975", "body": "I think that the change here is responsible for blocking the corlib test suite with Semaphore tests still only on 32bits. I can't verify that myself (everything here is x86-64) but I'm guessing from the commit log and wrench results.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/133975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "spouliot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/135556", "body": "Got a test case for it ? you added 2 unit tests but marked them [Category(\"NotWorking\")]\nhttp://lists.ximian.com/archives/public/mono-patches/2010-August/175767.html\n\nActually the instance case got the NotWorking removed later... but the static case (still NotWorking in mcs) fails a unit test in moonlight which works on SL\nRemoving lines 193-196 fix this (as far as moonlight is concerned)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/135556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137401", "body": "This commit breaks the moonlight profile (and likely other similar profiles) since moonlight depends on gmcs (before using smcs) to build corlib\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139451", "body": "Fixed, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "gonzalop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/144644", "body": "mono-poll.[ch] have a mono_poll() that can be based on either select() or poll() depending on the system...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "baulig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262", "body": "Fixed, thank!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}, "6": {"joncham": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6579", "title": "Type.GetInterface fails to find implemented interface", "body": "## Steps to Reproduce\r\n\r\n1. Run code below\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\npublic class Foo\r\n{\r\n    public static int Main(string[] args)\r\n    {\r\n        Console.WriteLine((typeof(Dictionary<string, object>).GetInterface(\"System.Collections.IDictionary\", true) != null));\r\n        return 0;\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\n\r\nOutput: False\r\n\r\n## Expected Behavior\r\n\r\n// .NET returns True\r\nOutput: True\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ x] Windows\r\n\r\n**Version Used**:\r\n\r\nRecent mono master (perhaps a few weeks old)\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nihlus": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6577", "title": "Mono debugger crashes in native code when inspecting interface instances produced by Config.Net", "body": "## Steps to Reproduce\r\n\r\n1. Download the attached reproduction project\r\n2. Restore nuget packages and compile\r\n3. Run the project\r\n4. Observe the expected output\r\n5. Debug the project \r\n6. Inspect the local variable in the main method.\r\n7. Observe the runtime crash.\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nAt present, when inspecting variables containing an instance of a proxy interface created by Config.Net, the Mono debugger crashes in native code. If the variable is not inspected, the program behaves as expected and prints the stored value.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\nThe program should run as expected, and the Mono debugger should be able to inspect the variables without crashing.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[x] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n```\r\nMono JIT compiler version 5.4.1.6 (tarball Wed Nov  8 20:35:02 UTC 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       altstack\r\n\tNotifications: epoll\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          supported, not enabled.\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\nhttps://gist.github.com/Nihlus/d3274a9cce07728c3b36ce2da8082492\r\n\r\n### Attachments\r\n[CrashRepro.zip](https://github.com/mono/mono/files/1643632/CrashRepro.zip)\r\nhttps://github.com/aloneguid/config\r\nIssue on the Config.Net repository: https://github.com/aloneguid/config/issues/49\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rombersoft": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6573", "title": "Deadlock in delegate which created used ", "body": "## Steps to Reproduce\r\n\r\n1. Assembly computer with motherboard msi 760GM-p23. On other motherboards all works fine!\r\n2. Install 4.8.8-2-ARCH #1 SMP PREEMPT Thu Nov 17 15:09:32 CET 2016 i686 GNU/Linux\r\n3. Install mono 5.8\r\n4. git clone from https://github.com/MonoGame/MonoGame\r\n5. Create project monogame with some animation\r\n\r\n<!--\r\nVideo number one about problem https://www.dropbox.com/s/dd1t83kisa8z8xx/video.mp4?dl=04\r\nYou can see on this video that application stop draw until somebody touch a touchscreen\r\n\r\nVideo number two about problem https://www.dropbox.com/s/fio3ajc3qhpne2a/VID_20180117_103256.mp4?dl=0 \r\nYou can see on this video that my application works fine when above it placed another window (in current case this is urxvt terminal emulator). Take attention on time as seconds run when I place urxvt window above my application and seconds stop when my application is on top of all windows\r\n-->\r\n\r\n## Current Behavior\r\n\r\n<!--\r\nApplication sometimes is not drawn. But if you click mouse or press keyboard button application continue to draw but not long time and stop again\r\n-->\r\n\r\n## Expected Behavior\r\nApplication must draw animation\r\n\r\n## Description and other observation\r\nMonogame is game engine which in cycle runs methods Draw and Update. \r\nAt start I thought that problem in monogame, I even create topic here http://community.monogame.net/t/drawing-stops/9799\r\nBut when I tried with old version monogame (2.5) on mono 5.4 version that problem still exists.\r\nBut when I tried with old version monogame (2.5) on mono 2.10 version that problem does not exist.\r\nI can not use monogame 3.6 on mono 2.10 because 2.10 version does not support 4.5 framework and monogame 3.6 does not work on 4.0 framework\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[*] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n<!--\r\n5.2 and 5.8\r\n-->\r\n\r\n### Stacktrace\r\n\r\nI can not reproduce Stack trace. But I know place where drawing thread stops.\r\nLook at here\r\nhttps://github.com/MonoGame/MonoGame/blob/master/MonoGame.Framework/Graphics/GraphicsDevice.OpenGL.cs#L356\r\nI am sure that it is problem on new mono.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eatdrinksleepcode": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6560", "title": "Incorrect behavior for Take/Skip/Concat combination", "body": "## Steps to Reproduce\r\n\r\n```\r\nvar inputs = new [] { \"left\", \"right\" };\r\nvar outputs = inputs.Take(1)\r\n                    .Concat(Enumerable.Repeat((object)\"middle\", 1))\r\n                    .Concat(inputs.Skip(1)).ToArray();\r\nforeach(var item in outputs) {\r\n\tConsole.WriteLine(item);\r\n}\r\n```\r\n## Current Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nleft\r\n```\r\n\r\n## Expected Behavior\r\n\r\n```\r\nleft\r\nmiddle\r\nright\r\n```\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.4.1.7\r\n\r\n## Notes\r\n\r\n_This is a regression_: the same code works correctly under Mono 4.8.1.\r\n\r\nNote the cast to ```object``` inside the ```Enumerable.Repeat```. This is necessary to reproduce the bug; without the cast, the code works correctly.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6555", "title": "Process.WaitForExit() gets slower the larger your open file limit (ulimit -n) is on Linux", "body": "## Steps to Reproduce\r\n\r\n1. Compile this: `csc test.cs`:\r\n\r\n```csharp\r\npublic static class Program {\r\n    public static int Main () {\r\n        for (int i = 0; i < 100; i++) {\r\n            var p = System.Diagnostics.Process.Start (\"echo\", \"hello\");\r\n            if (!p.WaitForExit (10000)) return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```\r\n2. `$ (ulimit -n 1000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m0.402s\r\nuser\t0m0.028s\r\nsys\t0m0.184s\r\n```\r\n3. `$ (ulimit -n 100000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m1.277s\r\nuser\t0m0.380s\r\nsys\t0m0.592s\r\n```\r\n4. `$ (ulimit -n 1000000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m8.758s\r\nuser\t0m3.424s\r\nsys\t0m4.424s\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt gets slower the higher your ulimit -n is.\r\n\r\nNote: you may need to change your system settings (`/etc/security/limits.conf`) to allow higher limits.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNot getting slower.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04/16.04\r\n[ ] Windows\r\n\r\n**Version Used**: master, 5.8.088 and 4.2.1 (so either a very old bug or something outside our control)\r\n\r\nThis was the root cause behind an issue (https://github.com/mono/mono/pull/6537) we had on Jenkins because the Azure Linux VM builders had ulimit -n set to 1048576.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6548", "title": "Frequent test failures of ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test", "body": "## Steps to Reproduce\r\n\r\n1. Compile Mono on Linux i386\r\n2. `make -C mcs/class/corlib run-xunit-test`\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nFrequent test failure in System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test: https://github.com/mono/corefx/blob/dfd98e7113a99708f4c9ed063a8c481f838aa8d3/src/System.Threading/tests/ThreadLocalTests.cs#L192-L225\r\n\r\nThis seems to only occur on i386 and on Linux: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=ubuntu-1404-i386/\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNo test failure.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04\r\n[ ] Windows\r\n\r\n**Version Used**: master\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\n\r\n```\r\nAssert.False() Failure\r\nExpected: False\r\nActual:   True\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\n  at System.Threading.Tests.ThreadLocalTests+ThreadLocalWeakReferenceTest.Run () [0x0001c] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:216 \r\n  at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference () [0x00005] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:224 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6523", "title": "Remove obsolete assemblies in next major version bump", "body": "Tracking issue for assemblies to remove once we can do another breaking change, i.e. when we do Mono 6.0.\r\n\r\n- [ ] IBM.Data.DB2.dll, replaced by NuGet package\r\n- [ ] ICSharpCode.SharpZipLib.dll, replaced by NuGet package, fixes problems like  https://bugzilla.xamarin.com/show_bug.cgi?id=59304\r\n- [ ] Compat.ICSharpCode.SharpZipLib.dll (old copy of above)\r\n- [ ] Commons.Xml.Relaxng.dll, replaced by NuGet package\r\n- [ ] Mono.C5.dll, replaced by NuGet package\r\n- [ ] RabbitMQ.Client.dll, replaced by NuGet package\r\n- Very old copy of Rx.NET, replaced by NuGet packages\r\n  - [ ] System.Reactive.Core.dll\r\n  - [ ] System.Reactive.Debugger.dll\r\n  - [ ] System.Reactive.Experimental.dll\r\n  - [ ] System.Reactive.Interfaces.dll\r\n  - [ ] System.Reactive.Linq.dll\r\n  - [ ] System.Reactive.Observable.Aliases.dll\r\n  - [ ] System.Reactive.PlatformServices.dll\r\n  - [ ] System.Reactive.Providers.dll\r\n  - [ ] System.Reactive.Runtime.Remoting.dll\r\n  - [ ] System.Reactive.Windows.Forms.dll\r\n  - [ ] System.Reactive.Windows.Threading.dll\r\n- Very old copy of ASP.NET MVC framework, replaced by NuGet packages\r\n  - [ ] System.Web.Http.dll\r\n  - [ ] System.Web.Http.SelfHost.dll\r\n  - [ ] System.Web.Http.WebHost.dll\r\n  - [ ] System.Web.Mvc.dll\r\n  - [ ] System.Web.Razor.dll\r\n  - [ ] System.Web.WebPages.Deployment.dll\r\n  - [ ] System.Web.WebPages.dll\r\n  - [ ] System.Web.WebPages.Razor.dll\r\n  - [ ] WebMatrix.Data.dll\r\n  - [ ] Microsoft.Web.Infrastructure.dll\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6513", "title": "SocketTest.AcceptBlockingStatus is flaky on ARM", "body": "It failed 47 times in the last two weeks on the armel, armhf and arm64 master lanes with this stack trace:\r\n\r\n```\r\nMESSAGE:\r\nSystem.Net.Sockets.SocketException : Connection timed out\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Sockets.Socket.Connect (System.Net.EndPoint remoteEP) [0x000b0] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/System.Net.Sockets/Socket.cs:886 \r\n  at MonoTests.System.Net.Sockets.SocketTest.BlockingConnect (System.Boolean block, System.Int32 port) [0x00033] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:136 \r\n  at MonoTests.System.Net.Sockets.SocketTest.AcceptBlockingStatus () [0x00006] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:171 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6466", "title": "System.Diagnostics.ProcessTest.Start1_FileName_NotFound failing on newer Ubuntu", "body": "## Steps to Reproduce\r\n\r\n1. `make -C mcs/class/System run-test V=1 TESTNAME=System.Diagnostics.ProcessTest.Start1_FileName_NotFound\r\n`\r\n\r\nNote: This was first reported in https://github.com/mono/mono/issues/6383, after the native crash was fixed.\r\n\r\n## Current Behavior\r\n\r\n```\r\n...F\r\nTests run: 1, Passed: 0, Errors: 0, Failures: 1, Inconclusive: 0\r\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\r\nElapsed time: 00:00:00.0690000\r\n\r\nErrors and Failures:\r\n\r\n1) Start1_FileName_NotFound (MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound)\r\n   #C1\r\n  at MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound () [0x0015b] in /home/alexander/dev/mono/mcs/class/System/Test/System.Diagnostics/ProcessTest.cs:215 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/alexander/dev/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n\r\ngvfs-open: /usr/bin/shouldnoteverexist: error opening location: Error when getting information for file '/usr/bin/shouldnoteverexist': No such file or directory\r\n\r\nResults saved as /home/alexander/dev/mono/mcs/class/System/TestResult-net_4_x.xml.\r\n../../build/tests.make:208: recipe for target 'run-test-lib' failed\r\nmake[1]: *** [run-test-lib] Error 1\r\n```\r\n\r\n## Expected Behavior\r\n\r\nno failure.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 16.04 in VirtualBox VM and Ubuntu chroot on a ChromeOS device.\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\ne9913fdc487622073a0827f32f845b637163590d\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/0c59209931f618d7811e4e0ff602e47f6276ef3e", "message": "[tests] Disable weak-fields.exe on LLVM as well"}, {"url": "https://api.github.com/repos/mono/mono/commits/a99d7f4b1318091354ecc12c0be1aa97e34ae2c0", "message": "[ci] Use correct -arch syntax in CFLAGS on OSX (#6570)\n\nIn c7d8d247c35b6fa08bbc7e36d2f44fefcdf48b5a I unified how we're\r\npassing -arch in CFLAGS to \"-arch=XXX\" since the original change\r\nin 63a49e9eb8b569c6d5265168101982f5557c52bb mixed the formats.\r\n\r\nTurns out the correct syntax is \"-arch XXX\" instead and it broke\r\nthe ccache build in bockbuild because it complained about the\r\nunknown format.\r\n\r\nAlso add LDFLAGS in the amd64 case to match what we have in bockbuild."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430", "body": "nit: in most templates I've seen the current/problematic behavior comes before the expected one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553", "body": "I'd rather instruct them to specifically run `mono --version` so we get full commit hash etc. which is included there.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037", "body": "not sure we need to mention both backtrace and stacktrace, they're used pretty much interchangeably anyway.\r\n\r\nstacktrace seems to be more commonly known from what I've seen.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145", "body": "`macOS`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052", "body": "don't you get this: \r\n![image](https://user-images.githubusercontent.com/1376924/33861614-14d2eef2-deb5-11e7-81a3-3c8a53f87857.png) ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598", "body": "What about we just remove this and the \"expected behavior\" description below? It doesn't add anything which isn't clear from the section header anyway and would make the template simpler.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735", "body": "maybe make it \"repro code/solution\" to be clear", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328", "body": "use `git://` here like the other submodules\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595", "body": "This must use `git://` instead of `git@` otherwise it won't be accessible to people without push access to that repo.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942", "body": "This must be `git://` as `git@` requires authentication.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928", "body": "typo: `borinssl`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077", "body": "`NuGet.BuildTasks` should be `nuget-buildtasks`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472", "body": "this no longer exists", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665", "body": "this is called `/external/binary-reference-assemblies` now", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543", "body": "should we keep this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861", "body": "while you're at it you could move the CODEOWNERS to the .github folder as well. And maybe CONTRIBUTING.md too?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757", "body": "add the same in the CROSS_COMPILING section above too to make it consistent.\n\nActually, I'm wondering if we still need this separation when both if branches are the same anyway?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexrp": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6546", "title": "Miscellaneous coverage profiler cleanup tasks", "body": "Opening this as a sort of meta-bug to keep track of some relatively small issues with the coverage profiler that should be addressed over time.\r\n\r\n- [ ] When we're comfortable bumping the output format version, it would be nice to change the overall structure to be more easily digestible for readers. For example, all `class` elements should be under an `assembly` element, all `method` elements should be under a `class` element, etc.\r\n- [ ] Type names (and signatures in general) should be fully qualified in the output, and not use C# names like `int`, `long`, etc.\r\n- [ ] The way we output generic definitions and generic instantiations needs to be cleaned up and made consistent. For example, if a program has a method `Foo<T> ()` and executes the instantiation `Foo<int> ()`, the output file will mention `Foo<int> ()` with all the correct execution counts, but it will also mention the uninstantiated `Foo<T> ()` with all-zero counts, as if it was uncovered. We should only mention the generic definition (with all the counts from all instantiations merged), not every single instantiation.\r\n- [ ] The data structures (or rather, lack thereof) in the profiler can be simplified. There's no particular reason we need to use a bunch of hash tables to map everything back and forth the way we do. The code would be much easier to read and maintain if we just had some proper structures for representing loaded assemblies, classes, and methods.\r\n- [ ] We should resolve method signatures and such ahead of time instead of doing it when we're dumping coverage data at shutdown. Resolving method signatures during shutdown can cause assemblies to be loaded, and metadata from those will be missing in the output as a result.\r\n- [ ] There's some commented out code relating to zipping of the output. This should either be implemented or removed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3491b7b604c2d1741e1d261a3315aa0e5a554d0c", "message": "[profiler] Write out all uncovered classes/methods in a loaded image. (#6544)\n\n* [runtime] Export mono_class_get_checked () for use in profilers.\r\n\r\n* [runtime] Expand mono_method_get_header_summary () to collect more info.\r\n\r\nIt now collects all the trivially-accessible header data that doesn't require\r\nchasing down other metadata.\r\n\r\n* [profiler] Use mono_method_get_header_summary () in the coverage code.\r\n\r\nWe only need code start and size information, not all the data that is present\r\nin the header. By switching to this function, we avoid all the side effects\r\nthat come with resolving local variables and exception clauses (which can even\r\nresult in loading assemblies in the worst case).\r\n\r\n* [profiler] Write out all uncovered classes/methods in a loaded image.\r\n\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60225\r\n\r\nThis required a bit of refactoring and some workarounds for various special\r\ncases. This also fixes some race conditions with respect to how data was\r\ninserted into the lock-free hash tables and queues."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958", "body": "Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974", "body": "Minor style issue: Spaces here instead of tabs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870", "body": "s/mono-lite/monolite/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873", "body": "This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6530", "title": "Mono's MSBuild is slow on Mac due to constant IO", "body": "## Steps to Reproduce\r\n\r\n1. See https://github.com/Microsoft/msbuild/blob/30b19e9f2cefb6d9675d660c8bb8b317c06ff9a1/src/Shared/NativeMethodsShared.cs#L553-L556\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nIO is done to check whether the platform is OS X.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nIO should be done at most once, or some other detection mechanism should be used. (pinvoke libc and get OS name)\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.168 (pull-request-6404/6f02ba66ba8 Thu Jan  4 16:11:23 EST 2018)\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\nProbably should be backported to all releases\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexander-vi": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6525", "title": "[Linux] [mipsel] Crash on any exception in C# code", "body": "## Code to reproduce\r\n```C#\r\nusing System;\r\n\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                  throw new ArgumentNullException();\r\n            }\r\n            catch\r\n            {\r\n                Console.WriteLine(\"Error!\");\r\n                Environment.Exit(1);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\nCrash with the following stack:\r\n```\r\n$ mono test\r\nStacktrace:\r\n\r\n\r\nNative stacktrace:\r\n\r\n\tmono() [0x4c7780]\r\n\r\nDebug info from gdb:\r\n\r\n[New LWP 17157]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/mipsel-linux-gnu/libthread_db.so.1\".\r\n0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n  Id   Target Id         Frame \r\n  2    Thread 0x76d43460 (LWP 17157) \"mono\" 0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n* 1    Thread 0x775618b0 (LWP 17156) \"mono\" 0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n\r\nThread 2 (Thread 0x76d43460 (LWP 17157)):\r\n#0  0x77444230 in do_futex_wait () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x7744432c in sem_wait@@GLIBC_2.2 () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#2  0x00688164 in mono_sem_wait ()\r\nwarning: GDB can't find the start of the function at 0x5d84b2.\r\n\r\n    GDB is unable to find the start of the function at 0x5d84b2\r\nand thus can't determine the size of that function's stack frame.\r\nThis means that GDB may be unable to access that stack frame, or\r\nthe frames below it.\r\n    This problem is most likely caused by an invalid program counter or\r\nstack pointer.\r\n    However, if you think GDB should simply search farther back\r\nfrom 0x5d84b2 for code which looks like the beginning of a\r\nfunction, you can increase the range of the search using the `set\r\nheuristic-fence-post' command.\r\n#3  0x005d84b4 in ?? ()\r\n\r\nThread 1 (Thread 0x775618b0 (LWP 17156)):\r\nwarning: GDB can't find the start of the function at 0x4c785a.\r\n#0  0x77447358 in waitpid () from /lib/mipsel-linux-gnu/libpthread.so.0\r\n#1  0x004c785c in ?? ()\r\n\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n```\r\n\r\nPlease note that other C# features looks like work fine. I've managed to compile and launch several other examples.\r\n\r\n\r\n\r\n## Expected Behavior\r\nMessage \"Error!\" is printed.\r\n\r\n### System information\r\nMono is installed from packages as \"mono-devel\".\r\n```\r\n$ mono --version\r\nMono JIT compiler version 3.2.8 (Debian 3.2.8+dfsg-10)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       normal\r\n\tNotifications: epoll\r\n\tArchitecture:  mips\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tGC:            sgen\r\n```\r\n\r\n```\r\n$ cat /proc/cpuinfo \r\nsystem type\t\t: Baikal-T Generic SoC\r\nmachine\t\t\t: T-Platforms mITX Board\r\nprocessor\t\t: 0\r\ncpu model\t\t: MIPS P5600 V3.0  FPU V2.0\r\nBogoMIPS\t\t: 597.60\r\nwait instruction\t: yes\r\nmicrosecond timers\t: yes\r\ntlb_entries\t\t: 576\r\nextra interrupt vector\t: yes\r\nhardware watchpoint\t: yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]\r\nisa\t\t\t: mips1 mips2 mips32r1 mips32r2\r\nASEs implemented\t: vz msa eva\r\nshadow register sets\t: 1\r\nkscratch registers\t: 3\r\npackage\t\t\t: 0\r\ncore\t\t\t: 0\r\nVCED exceptions\t\t: not available\r\nVCEI exceptions\t\t: not available\r\n```\r\n\r\n```\r\n$ uname -a\r\nLinux tclient 3.19.12.23-mitx #1 SMP Thu Nov 2 19:47:08 UTC 2017 mips GNU/Linux\r\n```\r\n\r\n```\r\n$ cat /etc/*-release\r\nPRETTY_NAME=\"Debian GNU/Linux 8 (jessie)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"8\"\r\nVERSION=\"8 (jessie)\"\r\nID=debian\r\nHOME_URL=\"http://www.debian.org/\"\r\nSUPPORT_URL=\"http://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n```\r\n\r\nI know that this version of Mono is a bit old, but maybe you can provide me some workaround or this issue is present in the current version. Hope this bugreport will be useful for you.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6519", "title": "System.Data tests failures on watch", "body": "## Steps to Reproduce\r\n\r\n1. Get 2017-12 XI monthly integration\r\n2. \r\n3. \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\nFaling tests\r\n```\r\n[FAIL] DbDataAdapterTest.AddToBatch : System.NotSupportedException : Specified method is not supported. \r\n[FAIL] SqlCommandBuilderTest.CatalogLocation_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogLocationTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.CatalogSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOption_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.ConflictOptionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_PrefixSuffix_NoMatch : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteIdentifier_UnquotedIdentifier_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuotePrefix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.QuoteSuffix_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandBuilderTest.SchemaSeparator_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull1 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull2 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull3 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull4 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull5 : An unexpected exception type was thrown \r\n[FAIL] SqlBulkCopyTest.ConstructorNotNull6 : An unexpected exception type was thrown \r\n[FAIL] SqlCommandTest.Clone : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandText : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandTimeout_Value_Negative : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.CommandType_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteNonQuery_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteReader_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ExecuteScalar_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ParameterCollectionTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.Prepare_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.ResetCommandTimeout : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlCommandTest.UpdatedRowSource_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.BeginTransaction_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ChangeDatabase_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ClearPool_Connection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_ConnectTimeout_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Database_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_DataSource_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MaxPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MinPoolSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_MultipleActiveResultSets_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PacketSize_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Password_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_PersistSecurityInfo_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserID_Synonyms : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_UserInstance_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ConnectionString_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Constructor2_ConnectionString_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.CreateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Empty : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.Open_ConnectionString_Whitespace : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlConnectionTest.ServerVersion_Connection_Closed : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor2 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor3_SelectConnection_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectCommandText_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Constructor4_SelectConnectionString_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.DeleteCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.Dispose : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.InsertCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.SelectCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlDataAdapterTest.UpdateCommand : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.CompareInfo : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor1 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_DBNull : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor2_Value_Null : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Constructor7 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Boolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Byte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_ByteArray : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_DateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Decimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Double : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Enum : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Guid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Int64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Object : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_Single : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.InferType_String : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.LocaleId : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterName : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterNullTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ParameterType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.ResetSqlDbType : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumn : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SourceColumnNullMapping : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlDbTypeTest_Value_Invalid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBinary : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlBoolean : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlByte : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDateTime : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDecimal : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlDouble : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlGuid : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt16 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt32 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlInt64 : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlMoney : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlSingle : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlString : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlTypes_SqlXml : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.SqlValue : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.Value : System.PlatformNotSupportedException was expected \r\n[FAIL] SqlParameterTest.XmlSchemaTest : System.PlatformNotSupportedException was expected \r\nTests run: 1887 Passed: 1755 Inconclusive: 0 Failed: 132 Ignored: 163\r\n```\r\n\r\n## Expected Behavior\r\n\r\nNo failures\r\n\r\n### On which platforms did you notice this\r\n\r\n[ x] watchOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**: 2017-12 branch\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c282af6df5ffbc7fc4ec2ab857299c8d455f9d72", "message": "[mcs] Implements C# 7.0 discards"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6551", "title": "Bump linker", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6476", "title": "Weak field support backport", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6395", "title": "Bump corefx", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/128022", "body": "It should be bellow licence text\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137435", "body": "you should fix moonlight profile to use bootstrap gmcs from basic profile and not 2.0\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057", "body": "Made small tweak but `mono --version` is useful only for people running Mono directly. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027", "body": "My worry is that then people would just skip the section", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555", "body": "Should use git::// protocol", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687", "body": "How big is the submodule, it's still not accessible for me", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904", "body": "I didn't want to move that one as I don't know if I need to change the paths and secondly, CODEOWNERS seems to be useful on its own", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607", "body": "I don't know what's the purpose of that, seems like what should be on mono github wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rodrmoya": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6512", "title": "Missing counters/perf counters in Mono 5.8 with new profiler arguments", "body": "## Steps to Reproduce\r\n\r\n1. Run any desktop mono app with: `/Library/Frameworks/Mono.framework/Versions/Current/bin/mono --gc=sgen --profile=log:heapshot=ondemand,nolegacy,jit,gc,nogcalloc,gcroot,gcmove,counter,output=\"/var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd\" app.exe`\r\n2. Let it run for a few seconds and stop\r\n3. `mprof-report /var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd` shows no counters\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nUsing the old runtime arguments (`alloc,heapshot=ondemand,counters`) produces a MLPD with counters on it.\r\n\r\n## Expected Behavior\r\n\r\nCounters should be emitted in the MLPD file\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n```$ mono --version\r\nMono JIT compiler version 5.8.0.103 (2017-10/1359c52fc6e Wed Dec 20 10:52:54 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OleksandrChizh": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6498", "title": "Mono issue with TLS due to Client Certificates", "body": "Hi. We have a .NET 4.0 application for sending https(TLS 1.0) requests using HttpWebRequest. The application works correctly with the windows version of Mono but when we send a request on Ubuntu 16.04 using Mono 5.4.1.6 we get an error, see here: https://pastebin.com/hP9dZvuF\r\nJust to test the app we sent a request to https://www.google.com, https://github.com, etc. and we got no errors but when we send a request to required server the issue appears.\r\nWe tried to import required certificates manually using certmgr and mozroots but it didn't solve the issue.\r\nWe are thinking it's an issue of Mono because we compiled the same code with .NET Core and it works well. Is there any chance to solve this issue?\r\nThank you!\r\n\r\n> CQNET: Error getting response stream (ReadDone1): ReceiveFailure - Error\r\n> System.Net.WebException: Error getting response stream (ReadDone1): ReceiveFailure ---> System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:100000b6:SSL routines:OPENSSL_internal:NO_RENEGOTIATION\r\n>   at /build/mono-5.4.1.6/external/boringssl/ssl/s3_pkt.c:446\r\n>   at Mono.Btls.MonoBtlsContext.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Boolean& wantMore) [0x00050] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.ProcessRead (Mono.Net.Security.BufferOffsetSize userBuffer) [0x00011] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream:ProcessRead (Mono.Net.Security.BufferOffsetSize)\r\n>   at Mono.Net.Security.AsyncReadRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x0000c] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<ProcessOperation>d__24.MoveNext () [0x000ff] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<StartOperation>d__23.MoveNext () [0x0008b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream+<StartOperation>d__58.MoveNext () [0x001bf] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter1[TResult].GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Threading.Tasks.TaskToApm.End[TResult] (System.IAsyncResult asyncResult) [0x0002e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.EndRead (System.IAsyncResult asyncResult) [0x00000] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.WebConnection.ReadDone (System.IAsyncResult result) [0x0001b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Net.HttpWebRequest.EndGetResponse (System.IAsyncResult asyncResult) [0x00058] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.HttpWebRequest.GetResponse () [0x0000e] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at k.s (System.String bqi, System.Int32 bqj) [0x00043] in <31d60139ab8f4173b33ee35d33fa2fdb>\r\n>", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6498/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luhenry": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6490", "title": "Reenable weak-fields.exe test", "body": "Extracted from https://bugzilla.xamarin.com/show_bug.cgi?id=60973\r\n\r\nIt fails with the following output\r\n\r\n```\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 16946264\r\n```\r\n\r\n@vargaz noted that it's the test that seems flaky since it doesn't expect the object to be randomly retained.\r\n\r\nIt was disabled with https://github.com/mono/mono/pull/6191", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6567", "title": "[tests] Output XUnit tests to mcs/class/lib/$(PROFILE)/tests like NUnit tests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6500", "title": "[sdks] Move some code supporting the BCL from XA to Mono", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErwinVorenhout": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6477", "title": "GetActiveTcpConnections->state returns wrong status", "body": "I am trying to monitor an active TCP connection with the following code, when running on windows the _log.logInfo function will simply return established but when running on Mono 4.2.1 it will return \"Closed\", while the connection is established according: netstat -anp --tcp. \r\n\r\n```\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\r\ntcp        0      0 192.168.200.202:42685   192.168.200.218:18000   ESTABLISHED 23378/mono\r\n```\r\n\r\nThis is the code that I am using:\r\n```\r\nIPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();\r\nTcpConnectionInformation[] tcpConnections = ipProperties.GetActiveTcpConnections().Where(x => x.LocalEndPoint.Equals(_client.Client.LocalEndPoint) && x.RemoteEndPoint.Equals(_client.Client.RemoteEndPoint)).ToArray();\r\nif (tcpConnections != null && tcpConnections.Length > 0)\r\n{\r\n       TcpState stateOfConnection = tcpConnections.First().State;\r\n      if (_connected != 2)\r\n      {                              \r\n           if (stateOfConnection != TcpState.Established)\r\n           {\r\n                _log.logInfo(tcpConnections.First().RemoteEndPoint.ToString() + \"status:\" + \r\n                tcpConnections.First().State.ToString());\r\n                reConnect();\r\n           }\r\n      }\r\n}\r\n```\r\n\r\nThe output on windows when placing the log function above the if statement: \r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : established\r\n```\r\n\r\nWhile the output on Linux is:\r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : closed\r\n```\r\n\r\nI found out that Mono uses the ```/proc/net/tcp``` to read out the TCP/IP connections \r\nWhen trying to monitor the connection on remote addr 192.168.200.218  /proc/net/tcp returns the following:\r\n\r\n```  \r\nsl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode\r\n0: 0100007F:0CEA 00000000:0000 0A 00000000:00000000 00:00000000 00000000   111        0 1077650 1 0000000000000000 100 0 0 10 0\r\n1: 00000000:008B 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815396 1 0000000000000000 100 0 0 10 0\r\n2: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 17055 1 0000000000000000 100 0 0 10 0\r\n3: 00000000:01BD 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815395 1 0000000000000000 100 0 0 10 0\r\n4: 29CAA8C0:0016 DAC8A8C0:DBFB 01 00000080:00000000 01:00000015 00000000     0        0 2906153 3 0000000000000000 25 4 1 10 16\r\n```\r\nHere is number 4 the connection that I am trying to monitor(HEX DA C8 A8 C0  = decimal 192.168.200.218 ) the  state is  01 in the table.\r\n\r\n According the [kernel ](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h?id=HEAD) state 01 should be established so I am wondering where the state closed is comming from?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebasijan": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6471", "title": "PlatformNotSupportedException when calling LdapConnetion.Disconnect", "body": "Everything appears to be working fine (apart from the fact that retrieving a specific attribute should be way easier than iterating around all existing attributes - not sure why it was designed this way), but when I try to disconnect I get\r\n\r\n > PlatformNotSupportedException: Thread abort is not supported on this platform.\r\n\r\nThe code is pretty much exactly as taken from the Novell documentation, aprt from the fact that I am trying to just rerieve 2 specific attributes (name and logon time): \r\n\r\n\tvar users = new List<User>();\r\n\r\n\t// Creating an LdapConnection instance \r\n\tLdapConnection ldapConn= new LdapConnection();\r\n\r\n\t//Connect function will create a socket connection to the server\r\n\tldapConn.Connect(\"DOMAIN.com\",389);\r\n\r\n\t//Bind function will Bind the user object Credentials to the Server\r\n\tldapConn.Bind(\"DOMAIN\\\\_Bassi\",\"password\");\r\n\r\n\t// Searches in the Marketing container and return all child entries just below this\r\n\t//container i.e. Single level search\r\n\tLdapSearchResults lsc=ldapConn.Search(\"OU=Users,OU=MCS,OU=AU,OU=COMPANY,DC=DOMAIN,DC=com\",\r\n\t\t\t\t\tLdapConnection.SCOPE_ONE,\r\n\t\t\t\t\t\"objectClass=*\",\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse);\r\n\r\n\twhile (lsc.hasMore())\r\n\t{\r\n\t\tvar user = new User();\r\n\r\n\t\tLdapEntry nextEntry = null;\r\n\t\ttry \r\n\t\t{\r\n\t\t\tnextEntry = lsc.next();\r\n\t\t}\r\n\t\tcatch(LdapException e) \r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Error: \" + e.LdapErrorMessage);\r\n\t\t\t// Exception is thrown, go for next entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tConsole.WriteLine(\"\\n\" + nextEntry.DN);\r\n\r\n\t\tLdapAttributeSet attributeSet = nextEntry.getAttributeSet();\r\n\t\tSystem.Collections.IEnumerator ienum =  attributeSet.GetEnumerator();\r\n\r\n\t\tvar atts = attributeSet.ToArray().ToList();\r\n\r\n\t\twhile(ienum.MoveNext())\r\n\t\t{\r\n\t\t\tLdapAttribute attribute=(LdapAttribute)ienum.Current;\r\n\t\t\tif(attribute.Name == \"sAMAccountName\")\r\n\t\t\t{\r\n\t\t\t\tuser.UserName = attribute.StringValue;\r\n\t\t\t} \r\n\t\t\telse if(attribute.Name == \"lastLogonTimestamp\")\r\n\t\t\t{\r\n\t\t\t\tuser.LastLogon = DateTime.FromFileTime(long.Parse(attribute.StringValue));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tusers.Add(user);\r\n\t}\r\n\r\n\tldapConn.Disconnect();\r\n\r\nAnd as soon as `Disconnect` is called I get the error. \r\n\r\nHas anyone else experienced this or know what might be going wrong?\r\n\r\n**stacktrace**\r\n\r\n\r\n\tSystem.Threading.Thread.Abort()\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.Dispose(bool disposing, string reason, int semaphoreId, InterThreadException notifyUser)\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.destroyClone(bool apiCall)\r\n\r\n\r\n\tNovell.Directory.Ldap.LdapConnection.Disconnect()\r\n\r\n\r\n\tLogonChecker.Managers.ActiveDirectory.GetADUsers() in ActiveDirectory.cs\r\n\t- \r\n\t64.                    }\r\n\t65.                }\r\n\t66.\r\n\t67.                users.Add(user);\r\n\t68.            }\r\n\t69.\r\n\t70.            ldapConn.Disconnect();\r\n\t71.\r\n\t72.            return users;\r\n\t73.\r\n\t74.            // LdapConnection ADconn = new LdapConnection();\r\n\t75.            // ADconn.Connect(\"DOMAIN.com\", 389);\r\n\t76.            // ADconn.Bind(\"DOMAIN\\\\_Bassie\", \"password\");\r\n\r\n\r\n\tLogonChecker.Controllers.UserController+<Index>d__2.MoveNext() in UserController.cs\r\n\t- \r\n\t20.        }\r\n\t21.\r\n\t22.        // GET: User\r\n\t23.        public async Task<IActionResult> Index()\r\n\t24.        {\r\n\t25.            var ad = new ActiveDirectory();\r\n\t26.            var users = ad.GetADUsers();\r\n\t27.\r\n\t28.            return View(users);\r\n\t29.            // return View(await _context.User.ToListAsync());\r\n\t30.        }\r\n\t31.\r\n\t32.        // GET: User/Details/5\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeActionMethodAsync>d__12.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BrzVlad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/117468d740a1dc0eea58cc2b020185cf5c5f8b7d", "message": "[interp] Add check for class failure"}, {"url": "https://api.github.com/repos/mono/mono/commits/0b398d63b0c3d5006bc698c5852a20f9e3189ca5", "message": "[tests] Change test to use less stack\n\nThe interpreter uses a lot of stack and the stack overflows on this test."}, {"url": "https://api.github.com/repos/mono/mono/commits/4490aa5112e6fa9c64ed1db222b880fbce31e176", "message": "[runtime] Fix jit info leak when having aot images loaded\n\nWhen we had a jit info table for aot images loaded in the domain, we would queue jit infos for freeing at domain unload time. This means leaking during entire application life.\n\nAdd comment for jit info freeing when having multiple tables.\n\nFixes #60986."}, {"url": "https://api.github.com/repos/mono/mono/commits/f162931e25c4cc1ad3d1a21117bb085089f168cd", "message": "[mini] Fix seq point info leak (#6522)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdecb851ff6bbf2d0602104d4db0df86b0c4b7ba", "message": "[sgen] Fix overflow on large arrays (#6542)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ramin-zaghi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/947d0bc0ef63c9e9304b760d333b4cb7ed06df94", "message": "[mini] Make sure mkbundle executables work if they are run from a path on the PATH environment variable. (#6147)\n\n* Make sure mkbundle executables work if they are run from a path on the PATH environment variable.\r\n\r\n* Review\r\n\r\n* Fix build on Windows"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaykrell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/12970c4bbd2869d389b775e2a1dc5ca774868f42", "message": "g_assert should be an expression not a statement; provide g_assertf f is format like printf (#6235)\n\n* g_assert should be an expression not a statement; provide g_assertf f is format like printf\r\n\r\n- g_assert should be an expression, not a statement\r\n   ANSI C assert gets this correct, and I corrected\r\n   widely used NT ASSERT circa 2001 with no ill effects\r\n   Note that ANSI C assert is void, g_assert here is boolean.\r\n\r\n - provide g_assertf\r\n   f is for format, like printf -- too terse?\r\n   Where you might previously say:\r\n   if (!(expr))\r\n     g_error(...); // like printf\r\n   now:\r\n    g_assertf(expr, ...)\r\n\r\nManual tests provided -- how to provide a test whose success is failure to compile?\r\nCorrect existing eglib/test to build and pass, but don't enable in build.\r\nEnabling it is a line in toplevel configure.ac to add eglib/test/Makefile\r\nafter eglib/Makefile.\r\n\r\n* Fix comment in test code.\r\n\r\n* format with s instead of hs\r\n\r\n* review"}, {"url": "https://api.github.com/repos/mono/mono/commits/2e029d691e3d5dc5a838f867f8feb472864a8109", "message": "Convert ves_icall_System_Threading_Thread_GetName_internal to coophandle. (#6435)\n\nConvert thread get name to coop/handle (ves_icall_System_Threading_Thread_GetName_internal)."}, {"url": "https://api.github.com/repos/mono/mono/commits/6a04dc64516bd91b7b45d4587b66988b0e9b1285", "message": "Convert K&R warning farm to ANSI and add static/const.\nAlso smaller part fix C-vs.-C++-isms."}, {"url": "https://api.github.com/repos/mono/mono/commits/b909a770208a45d92cab764ff94aecf3de9932f3", "message": "return 0 is generally redundant in configure.ac, as the construction (#6528)\n\nof the test program wraps the text in int main() { ... ; return 0; }"}, {"url": "https://api.github.com/repos/mono/mono/commits/bbf6b67483a96e0c22ffc54cee4f868a771e0ada", "message": "Fix some warnings. (#6526)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e4f6b185b2aab27d5d004626874215c30720651", "message": "Convert thread get/set/clear state to coop/handle. (#6389)\n\n* Coop-handle ves_icall_System_Threading_Thread_GetState, SetState, ClrState.\r\nAnd cleanup.\r\n\r\n* Favor mono_internal_thread_handle_ptr."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6547", "title": "Performance counter coop/handle conversion, this time \"fixed\" instead of \"WrappedString\".", "body": "Machine handling is moved to managed -- in another PR as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6543", "title": "Move machine handling of performance counters from native to managed.", "body": "Just slightly less native code therefore.\r\n\r\nThe handling is trivial: returning false or 0 or null or an empty array, or in one surprising case ignoring it entirely.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6503", "title": "Understand PE32+, at least as much as PE32 is understood.", "body": "A number of other problems are noticed in the code but commented only.\r\nThis fixes https://bugzilla.xamarin.com/show_bug.cgi?id=56071", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6465", "title": "Support Windows 10 OS-supported unicode thread names.", "body": "As opposed to just the wierd debugger thread names.\r\n\r\nNot actually tested on Windows, granted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6443", "title": "Convert thread set name to coop/handle, passing fixed utf8 as suggested, and storing utf8.", "body": "Ludovic suggested passing fixed utf8, I'm not sure he meant to store it or not.\r\nResolve that before commit, and edit this comment down.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6406", "title": "Cleanup MonoError initialization.", "body": "Neuter most initializations. Make them asserts for now.\r\nGive names to ones that must stay.\r\nConvert dis, profiler, dump to new style.\r\nChange error_cleanup to end with initialization, so those explicit reinitializations can go away.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6394", "title": "A terser but clear style for zeroing a struct.", "body": "A terse but clear style for zeroing a struct.\r\nThis does not work portabily for unions, and will fail to compile for C++ if the first member is an enum (you have to cast). But otherwise zeros the entire thing.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6393", "title": "Some handle.h cleanup extracted from larger PR.", "body": "Some handle.h cleanup extracted from larger PR.  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6355", "title": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "body": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6298", "title": "convert mono/metadata/mono-perfcounters.c to use coop handles", "body": "convert mono/metadata/mono-perfcounters.c to use coop handles", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6268", "title": "Cleanup derived and expanded from PR 6247.", "body": "https://github.com/mono/mono/pull/6247/files\r\n\r\nThere is both dead and duplicated code.\r\nThe duplicated code can be cleaned up by the simple\r\ntransform of making error optional in a small number of places.\r\nThe dead code is very uninteresting and not worth carrying along.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6267", "title": "Cleanup mono_string_to_utf16 -- use unichar2 type to advantage over char", "body": "In particular, unichar2 is a useful pointer type to use to store a unichar2, instead of storing two chars.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6247", "title": " Convert thread names to coop handles. ", "body": "\r\nConvert thread names to coop handles. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mandel-macaque": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/12d676563e7f233897f866c6150c6755ef3d46d1", "message": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5 (#6574)"}, {"url": "https://api.github.com/repos/mono/mono/commits/3f372d06eeb4b924a26871c91a2100205fb10550", "message": "[Tests] Skip some of the System.ServiceModel tests when using MOBILE (#6545)\n\nMobile does not support all clases found in System.ServiceModel, we skip\r\nthose tests of the not supported classes yet run all the others."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumpera": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/232af8c206d9253d6f284d8ca960c174f4d7b9c7", "message": "Add CI to WebAssembly. This is PR based on top of # Only the top 3 commits matter for this PR: (#6488)\n\n* [WASM] Fix System.Core issues and disable broken tests.\r\n\r\n* [wasm] Fix cookie computation heap overflow. Use a local to make it thread safe.\r\n\r\n* [wasm] Disable System tests that don't work under WASM. Change the wasm profile to disable BSD sockets.\r\n\r\n* [wasm] Address reviewer feedback.\r\n\r\n* [wasm] Disable test that requires multiple threads.\r\n\r\n* [wasm] Add package target to wasm.\r\n\r\n* [wasm] Modify the runner to exit(1) if the test suite fails.\r\n\r\n* [wasm] Add CI configuration for WebAssembly.\r\n\r\n* [wasm] Fix issues found over review."}, {"url": "https://api.github.com/repos/mono/mono/commits/146346977cea8aaed2de8ab6a84c2a58b30aea24", "message": "Revert \"Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\" (#6557)\n\nThis reverts commit 411791c4696424d1ec9ec0f5258b6a0a4cc1885f."}, {"url": "https://api.github.com/repos/mono/mono/commits/411791c4696424d1ec9ec0f5258b6a0a4cc1885f", "message": "Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\n\nThis cute hack allow us to cut the budget of perf irrelevant blocks[1] while massively boosting those that are perf relevant[2].\r\n\r\nIt has a ton of missing features, like it doesn't detect nested loops, it doesn't take hints from inlined methods and it doesn't compute EH info.\r\nBeyond that, inlining budget is all but horrible, so there's ton of room for improvement here.\r\n\r\nResults are promising.\r\n\r\nA marginal improvements in benchmarks like Roslyn (2% user) while as much as 30% in micro benchmarks where the now bigger methods are in loop bodies.\r\nCode size with Roslyn changed from 5433242 to 5501751, IE extra 68.5k, or 1.2% more.\r\n\r\n[1] those ending in throw or in a catch handler\r\n[2] Loops"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6123", "title": "Simplify MonoError and managed Exception creation", "body": "MonoError is simplified for MME by having the error message eagerly created, which simplifies things A LOT.\nManaged Exception creation is simplified by only setting Message, as it's done by other runtimes.\n\nThe idea of this PR is gather feedback on this approach and the way it was implemenented. If it's good, I'll do for other errors.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115935", "body": "Why are you reducing it? The changelog lacks proper justification.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123130", "body": "I believe we should replace all bblock shenanigans with just emitting an iconst and let the dce pass do its job\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "radical": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/06b9b48420c2dc4b5d4928217797efb34a56779b", "message": "Bump msbuild (#6569)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6578", "title": "Bump msbuild to track mono-2017-12 msbuild branch HEAD", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lewurm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5ba19cb47812dd356b19624d5bce380e514c3c64", "message": "[configure] fix altstack detection\n\nnewer linux headers hide the `struct sigaltstack` definition (e.g. on\nUbuntu 17.10), probably because it is encouraged to use `stack_t`\nanyway.\n\nWe use `stack_t` in our code anyway:\nhttps://github.com/mono/mono/blob/146346977cea8aaed2de8ab6a84c2a58b30aea24/mono/mini/mini-exceptions.c#L2379\n\nThe change introducing the `ifdef` was already wrong imho:\nhttps://github.com/mono/mono/commit/f6d15e14c234c505e4b5e4d5e46a2666370d2b4a"}, {"url": "https://api.github.com/repos/mono/mono/commits/f49e87d42a26593cfbc2f26db6b58516bdbe1b1a", "message": "[exceptions] remove restore_stack_prot from managed code (#6518)\n\nit's dead code. restore happens in `restore_soft_guard_pages` upon\r\nreturning from the altstack machinery."}, {"url": "https://api.github.com/repos/mono/mono/commits/e39acb7a0d8409a3797b389b047e7544683dcca7", "message": "[exception] propagte stackoverflow exception to managed code (#6458)\n\nwe return the address of the StackOverflowException object in\r\n`restore_soft_guard_pages`, so it ends up in the architecture specific\r\nresult register (e.g. %rax) where the exception handler expects it.\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=60862"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318", "body": "maybe it's a good place to explain that there are \"native backtraces\" and \"managed stacktraces\" and how to obtain them. Depending on the issue, those can be useful.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vargaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5e72bd6d01c90ad37231c9a16099abc90c575440", "message": "[sdks] Set more ios version variables to empty to fix the build. (#6571)"}, {"url": "https://api.github.com/repos/mono/mono/commits/511c2fd59cf12ad86e36bbae70ba2cf4e7d1a982", "message": "[sdks] Set XCODE_VERSION to 'Xcode' for now to fix the ios build. (#6568)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6501", "title": "[sgen] Use sgen_is_object_alive_for_current_gen () instead of sgen_is_object_alive (), the latter doesn't work for oldspace objects, causing the gc handle to be freed even through the object is still alive.", "body": "Fixes https://github.com/mono/mono/issues/6490.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6429", "title": "[runtime] Avoid building a separate static library, use the shared ob\u2026", "body": "\u2026ject files for the static library as well. (#5233)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6285", "title": "[WIP][jit] Implement --trace using the profiler infrastructure.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/134015", "body": "Should be fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/134015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a717f377f0b773ffa99dc711ab4e687b50be991a", "message": "Fix bug 60848: Incorrect unicode custom attribute decoding (#6481)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6326", "title": "Fix xamarin-android issue 1130 and add test", "body": "https://github.com/xamarin/xamarin-android/issues/1130 is caused by us not properly storing/restoring the Thread.CurrentPrincipal context when execution contexts are stored. Task (and I think ThreadPool?) store the current context when a job is queued and restore it when running the job, which carries over state like the thread's current principal.\r\n\r\nRight now we have a weird hand-rolled implementation of CurrentPrincipal that I don't quite understand. I think we should be using the CurrentPrincipal value stored in the BCL's CallContext, so I tried doing that and it seems to fix this without breaking anything.\r\n\r\nI'd appreciate getting suggestions on how we should go about doing this for real. Does anyone know why the old implementation works the way it does? I assume the serialization logic has something to do with appdomains, but I would not have expected principals for the current thread to be shared between domains.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radekdoulik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9a183f2c833a54e10fdcb09a3300d86e89ee85ae", "message": "[Tests] Do not assume order of returned interfaces\n\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\ninterfaces returned from the System.Type::GetInterfaces method, as the\norder is not guaranted. As described in the [documentation][0].\n\nAlso see github [issue][1] for more information and reasoning.\n\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\n[1]: https://github.com/xamarin/xamarin-android/issues/1186"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/acea63a9c1e845f66253a79835b5fb10086910a1", "message": "Improve GetArgumentName in MonoOptions. Fixes bug-60904 (#6506)\n\n* Rewrite Options.GetArgumentName to use Regex\r\n\r\n* code cleanup\r\n\r\n* code cleanup"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6040", "title": "[System.IO] In some cases '/' is not a valid root directory - fixes 60138", "body": "https://bugzilla.xamarin.com/show_bug.cgi?id=60138\r\nif `Environment.GetLogicalDrives` doesn't contain '/' item - `Path.GetPathRoot` should return the longest suitable drive `Environment.GetLogicalDrives` contains (currently it always returns '/').\r\n\r\nfor example `Environment.GetLogicalDrives`:\r\n\r\n- \"/foo\"\r\n- \"/foo/boo\"\r\n- \"/tmp\"\r\n\r\nthen\r\n\r\n- `GetPathRoot(\"/foo/some/dir\")` => \"/foo\"\r\n- `GetPathRoot(\"/foo/boo\")` => \"/foo/boo\"\r\n- `GetPathRoot(\"/foo/booo\")` => \"/foo\"\r\n\r\nnot sure how to test such fixes - I need to mock `Environment.GetLogicalDrives`.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583", "body": "and probably worth mentioning that it is possible to attach files to github issues via drag-n-drop? (Cause it's unclear and there is no \"attach\" button) \ud83d\ude42 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexanderkyte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6562", "title": "[runtime] Apply cctor filters to callees of cctors", "body": "Fixes #59649 \r\n\r\nWhen stepping with a filter that ignores static constructors, we previously bailed out when the lowest frame is a static constructor. That isn't sufficient, as static constructors can call other functions. \r\n\r\nThis work exposed a lot of issues with respect to the lifetimes and accuracy of tls->frames. I've left a debug aid here, this is something worth doing a more deliberate refactor of later. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6456", "title": "[DONTMERGE] Add locking around tls->frames usage/freeing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6310", "title": "[sdks] Script lldb android integration", "body": "Read PR message here: https://github.com/mono/mono/pull/6309", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6309", "title": "[sdks] Add managed debugger tests to sdks", "body": "This adds the Managed debugger tests to the sdks. A couple of the tests are failing, but everything related to the setup of the runtime appears to be passing. We have 5 failures right now. \r\n\r\nNote also that this adds support for running an arbitrary .exe if someone is willing to edit the boostrap file and indicate their class main, and pass the args themselves. They can also set the args with the managed debugger. \r\n\r\nThis functionality is linked to https://github.com/mono/mono/pull/6310 . That PR has the lldb integration that was necessary to debug this into working. If combined with the ability to run an arbitrary .exe, it allows us to more easily take an android reproduction and run it in an sdks environment with different monos. \r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6514", "title": "Bug 60088 - Assertion at ../../../../external/mono/mono/mini/debugger\u2026", "body": "\u2026-agent.c:4765, condition `array->len == 1' not met\r\n\r\nProblem was that I didn't consider `async void` method when adding that assert", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409", "body": "Great work.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418", "body": "This is an important set of fixes to get into Mono for F# support\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350", "body": "Yes, that's correct. The .fsproj formulation supported by this change is suitable for both F# 3.0 and F# 3.1.\n\nSeparately, we will work on getting the F# 3.1 language updates into the code drop,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256", "body": "Hi @knocte, xbuild needs to \"do the same thing\" as MSBuild. Since MSBuild sets VisualStudioVersion, then xbuild needs to set it too. The question is what it gets set to by default and what the ramifications of that are.  The guiding principle should be to do what MSBuild does by default.\n\nWhy does this matter to F#? As of F# 3.1 (== VisualStudioVersion 12) , the F# SDK is located in \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nFor F# 3.0 it was located in \n\n```\n$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets\n```\n\nI agree it is frustrating that the F# 3.1 targets file has moved to a location that includes the word \"VisualStudio\" let alone \"VisualStudioVersion\". But that's how it is - from the Microsoft perspective F# releases are aligned with VisualStudio releases (although in-place updates of F# may happen).\n\nThe relevant part of F# 3.1 (and upgraded F# 3.0) project files is: \n\n```\n<Choose>\n  <When Condition=\"'$(VisualStudioVersion)' == '11.0'\">\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </When>\n  <Otherwise>\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </Otherwise>\n</Choose>\n```\n\nFor fsharp/fsharp I think this means we have to fix the Mono/Linux/Mac installation of F# 3.1 to lay down the targets at\n\n   $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v12.0\\FSharp\\Microsoft.FSharp.Targets\n\nAnyway, the commit under discussion needs to at least ensure that VisualStudioVersion is set, preferably to the same value used by MSBuild by default. \n\nCheers\nDon\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099", "body": "Hi @ovatsus \n\nI wonder If we should just drop the setting of VisualStudioVersion. MSBuild seems to set it depending on the actual minimal VS installed on the machine - you get 10.0 with VS2010 installed, 11.0 with VS2012, 12.0 with VS2013 etc.  \n\nIf xbuild continues to leave VisualStudioVersion  unset, then we can adjust the F# install to put a copy of the targets at  the path that we get if VisualStudioVersion  is empty, i.e. \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nwhich on Linux becomes \n\n```\n/usr/lib/mono/xbuild/Microsoft/VisualStudio/v/FSharp/Microsoft.FSharp.Targets\n```\n\nThis isn't too bad, as it is suitable for VisualStudio assets that on Linux/Mac are referenced independent of Visual Studio version.\n\nI'll submit an adjustment to the F# install on Linux/Mac to put the Targets in the above location.  \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705", "body": "OK, @knocte is this PR good to go? The fixes are becoming increasingly important for F# users of xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984", "body": "The F# parts of this problem are tracked at https://github.com/fsharp/fsharp/issues/163\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902", "body": "Two questions\n- any idea when a new mono containing this fix will be available? 3.2.4 doesn't seem to have it?\n- I added a Xamarin Studio bug to cover the same problem in the IDE, I presume it is a different code path which needs to be fixed. https://bugzilla.xamarin.com/show_bug.cgi?id=16085\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331", "body": "@knocte Very sorry. We must be more careful.\n\nAnd I understand why GetAssemblyIdentity and some other classes left unimplemented for several years.\n\nIn the Mono's rules, I think I must re-send this pullreq after the original [GetAssemblyIdentity.cs](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs) is published with a full implementation.\n\nWithout knowing how the `GetAssemblyIdentity` works, I don't know how to implement it...\n\n@akoeplinger My codes are written by only looking [this post on Nemerle forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) and some from [referencesource-beta.microsoft.com](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs).\n\nI've not used Reflector, Monodis, or MonoDevelop or other reverse engineering tools (even though I mentioned about these in [Nemerle Forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/L-g7RYdiCLkJ)).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962", "body": "``` diff\n- Reflector, Monodis, or MonoDevelop or other reverse engineering tools\n+ Reflector, Monodis, nor MonoDevelop nor other reverse engineering tools\n```\n\nSorry my not being good at English\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523", "body": "@akoeplinger but the original code on [this post](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) might be from ILSpy\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428", "body": "It is true what you said.\nI've looked and based on the disassembled code anyway.\nI close this thanks :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921", "body": "Hi, I wrote an [unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) and I've re-implemented that from scratch without looking any MS's code.\nHere: https://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nThis implementation is based on [the document in MSDN](http://msdn.microsoft.com/en-us/library/ms164296.aspx), and I made it to have parameters named `Version`, `PublicKeyToken`, and `Culture`. \nAnd also, I made `PublicKeyToken` well-formed by looking original MSBuild's output of the unit test,\n\nbut I don't know how to get trusted...\nYes, we can't forget what we once seen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996", "body": "Oh,\n\n```\nbase.Log.LogErrorWithCodeFromResources (\"GetAssemblyIdentity.CouldNotGetAssemblyName\", new object[] {} )\n```\n\nis not good.\n\nIt comes from my memory, which is the original MS's code.\nIt should be re-writed.\n\nIs\n\n```\nLog.LogErrorFromException (ex);\n```\n\nOk?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657", "body": "I see. I've made it so.\nhttps://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nbut... I don't know how to include [this unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) into Mono sources.\n\nI think it should be located [here](https://github.com/mono/mono/tree/master/mcs/class/Microsoft.Build.Tasks/Test) but it can't be tested like [CreateItemTest.cs](https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Tasks/Test/Microsoft.Build.Tasks/CreateItemTest.cs)...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351", "body": "Sorry, invalid account. I'll make a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584", "body": "@kumpera, @migueldeicaza,\n\nFWIW, this was the only stopper I encountered while building mono on FreeBSD 10.1 x86 and ia64, fresh installed with llvm+clang v3.7: https://github.com/dotnet/roslyn/issues/2844#issuecomment-129221304. \nPlease consider this PR for merging.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562", "body": "@alexrp, will this patch be available in mono v.next tagged release code? FreeBSD support is varying between 99-100% with current master. These small but tricky patches stick it to 100% and above. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031", "body": "@atsushieno, can this land in next release of mono?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355", "body": "@saper, seems like the exception is coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024, which has a caller that implicitly appear at one instance in the call stack you provided which leads to https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1274 (which implicitly relies on your changes in `ParseTZBuffer` method).\n\nLooking the the reference resource for `CreateAdjustmentRule` method: http://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,43a6662ca1445f1f,references, it seems like `startDate` and `endDate` are assigned to the `AdjustmentRule()` object as is and the object is returned. Which means there is something weird going on with `time_types` etc. that is somehow confusing the `TimeSpan` and further affecting the dst_end/dst_start `.Year` resolution. \n\nMight be a good idea to assert dst_start/end for equality before calling `CreateAdjustmentRule` (or write to console/file etc.) to find out if the `.Year` differs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876", "body": "As noted in my previous comment, it is `InvalidTimeZoneException` coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877", "body": "@akoeplinger, once the assertion failures are sorted out, will it make sense to have a submodule to dotnet/coreclr tests directory so CI can also test the future PRs. Probably with a thin wrapper to translate error codes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035", "body": "(This diff is hard to read, but it simply removes the `using` statement and fixes the code indentation)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098", "body": "Arguably, you could push this onto the client and say, \"You must cancel the token _and_ Dispose the `HttpMessageResponse.Content` to truly cancel the network connection\", but this ends up being fairly difficult in practice since most people will end up using `ReadAsString` which doesn't offer cancelation, and I suspect the vast majority of people would mess this up.  Activating the cancelation token that you pass into SendAsync should close the underlying network connection, regardless of whether the call has returned or not. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761", "body": "You're technically correct but this is much more difficult to program against. Now there are two separate ways to cancel the same underlying network connection that was created in this operation (the other being to dispose the HttpContent), depending solely on time. This makes for race-conditiony code that has been pushed up to every client of HttpClient, instead of having a single, guaranteed way to cancel the underlying network connection as long as it's open.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653", "body": "@akoeplinger No clue\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803", "body": "So, here's an even more compelling reason that the existing behavior is Problematic, it also makes handling cancellation very difficult for _clients_ of HttpClient. Consider the following code:\n\n``` cs\npublic Task<string> DownloadTwoUrls(string file1, string file2, CancellationToken ct)\n{\n    var resp1 = await myHttpClient.Get(\"/foo/\" + file1, ct);\n    var content1 = resp1.Content.ReadAsStringAsync();\n\n    // ct was **Disposed** because of the Disposal of the linked token, ct is now trashed\n    // The second half of this is now silently uncancelable. \n    var resp2 = await myHttpClient.Get(\"/foo\" + file2, ct);\n    return content1 + (await resp2.Content.ReadAsStringAsync());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931", "body": "@marek-safar (Sorry about the blast from the past), It actually does, in `UnregisterLinkedTokens`: https://github.com/mono/mono/blob/a31c107f59298053e4ff17fd09b2fa617b75c1ba/mcs/class/corlib/System.Threading/CancellationTokenSource.cs#L269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569", "body": "Hm. Apparently my princess is in another castle.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "atsushieno": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115348", "body": "> What about using [Category (\"NotDotNet\")]?\n> Thought about that before making the change, but I'm not sure this code + nunit 2.4.8 should really work under any system.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123074", "body": "umm, if it's something critical, let's please revert the change. I got my second dev. laotop (macbook) broken(!!) and am unable to do it by myself :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/128272", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144442", "body": "For reference, the correct bug # is 638098.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144475", "body": "Looks like this caused dist failure on 2.6 http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5020269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jbevain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/116030", "body": "Short version: as per Paolo's request.\nLong version: I started a discussion by asking why the branch cost was so high, wondering why we couldn't inline properties such as:\n\nget { return is_foo ? foo : bar; }\n\nAnd if we couldn't include the displacement in the cost rather. Paolo said there was no need for that, just to reduce the branch cost which was set to high.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/116030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/138529", "body": "Well, the test case is the unit test which passes on .net. But I'll revert this one as well as the runtime support, as it triggers regressions: #635349 and #605936. Will have to investigate more.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/138529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139373", "body": "Actually it's \u00abjust\u00bb a regression introduced by my change, and it's not specific to moonlight. I'm working on fixing it for everyone. Thanks for reporting the issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139401", "body": "This should be fixed in master by 85c0976c3d913ba16a13d44159f8e7591732df56. Could you try to run the moon-unit test with it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ajorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121447", "body": "This commit breaks the build http://build.mono-project.com/ViewLane.aspx?lane_id=62&host_id=23&revision_id=90989\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/122189", "body": "This commit breaks the build:\n\nSystem.Collections.Concurrent/BlockingCollection.cs(54,17): error CS0246: The type or namespace name `ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\nSystem.Collections.Concurrent/BlockingCollection.cs(55,17): error CS0246: The type or namespace name`ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/128154", "body": "This commit breaks the build.  It appears you neglected to add a file:\n\nmake[8]: **\\* No rule to make target `System.ServiceModel.Discovery.Version11/IDiscoveryProxyContract11.cs', needed by`../../class/lib/net_4_0/System.ServiceModel.Discovery.dll'.  Stop.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144680", "body": "MCS     [net_4_0] Microsoft.CSharp.dll\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1502: The best overloaded method match for `Mono.CSharp.Expression.MemberLookup(Mono.CSharp.ResolveContext, Mono.CSharp.TypeSpec, Mono.CSharp.TypeSpec, string, int, Mono.CSharp.Expression.MemberLookupRestrictions, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1503: Argument`#6' cannot convert `bool' expression to type`Mono.CSharp.Expression.MemberLookupRestrictions'\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,25): error CS0825: The contextual keyword `var' may only appear within a local variable declaration\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,66): error CS0841: A local variable`expr' cannot be used before it is declared\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1502: The best overloaded method match for `Mono.CSharp.BoolConstant.BoolConstant(bool, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1503: Argument`#1' cannot convert `object' expression to type`bool'\nCompilation failed: 6 error(s), 0 warnings\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144716", "body": "sgen-gc.c:202:37: fatal error: metadata/sgen-cardtable.h: No such file or directory\nPlease remember to dist new files. Fixed in 5cab581.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/146235", "body": "Something is wrong w/ this commit http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5124512\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/146235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121594", "body": "It looks like grendel forgot to backport the configure.in portion of 8de7037b16020bb919579c75e3be981152a37ff8\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144697", "body": "@eno\n\nIt looks like git didn't cherry-pick the fakepoll.h.  Fixed\n\n@gonzalop\n\nsupport cannot dep on mono.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "grendello": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121619", "body": "So I did, sorry about that. Fixed in 9e0162ea534e2dc49d3f134b80efc6d88670434b\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/122578", "body": "This commit breaks two tests in System.Web (both 2.0 and 4.0 profiles):\n\n```\nTest Case Failures:\n1) MonoTests.System.Web.HttpUtilityTest.UrlEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlEncode () [0x00007] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:718\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n\n2) MonoTests.System.Web.HttpUtilityTest.UrlPathEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback  fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncodeChar (Char c, System.IO.Stream result) [0x00010] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:647\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncode () [0x00037] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:744\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "garuma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/122230", "body": "Fixed in af30815fc99adaa315c2\n\nSorry\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/133975", "body": "I think that the change here is responsible for blocking the corlib test suite with Semaphore tests still only on 32bits. I can't verify that myself (everything here is x86-64) but I'm guessing from the commit log and wrench results.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/133975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "spouliot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/135556", "body": "Got a test case for it ? you added 2 unit tests but marked them [Category(\"NotWorking\")]\nhttp://lists.ximian.com/archives/public/mono-patches/2010-August/175767.html\n\nActually the instance case got the NotWorking removed later... but the static case (still NotWorking in mcs) fails a unit test in moonlight which works on SL\nRemoving lines 193-196 fix this (as far as moonlight is concerned)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/135556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137401", "body": "This commit breaks the moonlight profile (and likely other similar profiles) since moonlight depends on gmcs (before using smcs) to build corlib\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139451", "body": "Fixed, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "gonzalop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/144644", "body": "mono-poll.[ch] have a mono_poll() that can be based on either select() or poll() depending on the system...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "baulig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262", "body": "Fixed, thank!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}