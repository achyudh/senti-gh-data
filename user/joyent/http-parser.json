{"_default": {"1": {"ZaMaZaN4iK": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/404", "title": "Conan package for http-parser", "body": "Hello,\r\nDo you know about [Conan](https://github.com/conan-io/conan)?\r\n[Conan](http://docs.conan.io/en/latest/) is modern dependency manager for C++. And will be great if your library will be available via package manager for other developers.\r\n\r\n[Here](https://github.com/bincrafters/conan-templates) you can find example, how you can create package for the library. \r\n\r\nIf you have any questions, just ask :-)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samoconnor": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/403", "title": "Test \"CONNECT_WITH_BODY_REQUEST\" maybe worng", "body": "See: https://github.com/nodejs/http-parser/pull/235#issuecomment-356903686\r\n\r\nThe `CONNECT_WITH_BODY_REQUEST` test case input has `Content-Length: 10` and a body `\"blarfcicle\"`, but the test expects [`.body= \"\"`](https://github.com/nodejs/http-parser/blob/master/test.c#L1102) !\r\n\r\n[The RFC says](https://tools.ietf.org/html/rfc7230#section-3.3):\r\n> _The presence of a message body in a request is signaled by a\r\n    Content-Length or Transfer-Encoding header field.  Request message\r\n   framing is independent of method semantics, even if the method does\r\n   not define any use for a message body._\r\n\r\ni.e. A request that says `Content-Length: 10` has a 10-byte body irrespective of the method being `CONNECT`.\r\n\r\nThe `CONNECT` scemantics are defined here: [RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6). It talks about the client ignoring *responses( with Content-Length in, however, that is not relevant to this test *request* test case.\r\n\r\n>    _A server MUST NOT send any Transfer-Encoding or Content-Length header\r\n   fields in a 2xx (Successful) response to CONNECT.  A client MUST\r\n   ignore any Content-Length or Transfer-Encoding header fields received\r\n   in a successful response to CONNECT._\r\n\r\n[RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6) goes on to say that a payload on a `CONNECT` request has no defined meaning, but it does not disallow it:\r\n\r\n>  _A payload within a CONNECT request message has no defined semantics;\r\n   sending a payload body on a CONNECT request might cause some existing\r\n   implementations to reject the request._\r\n\r\nSo, this line may be wrong: https://github.com/nodejs/http-parser/pull/235/files#diff-5c62f371bf37583234d2462ad49ce33dR1837", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397", "title": "typos in http-parser/test.c", "body": "https://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L156\r\n\r\nhttps://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L374\r\n\r\nhttps://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md ?", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tianchao-haohan": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/401", "title": "Need to consider the noBody situation for HEAD method", "body": "Here is the diff code:\r\n```\r\n+++ b/src/3rd_party/http_parser/http_parser.c\r\n@@ -1783,8 +1783,9 @@ reexecute:\r\n\r\n         hasBody = parser->flags & F_CHUNKED ||\r\n           (parser->content_length > 0 && parser->content_length != ULLONG_MAX);\r\n-        if (parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n-                                (parser->flags & F_SKIPBODY) || !hasBody)) {\r\n+        if ((parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n+                                (parser->flags & F_SKIPBODY) || !hasBody))\r\n+                                || parser->method == HTTP_HEAD) {\r\n           /* Exit, the rest of the message is in a different protocol. */\r\n           UPDATE_STATE(NEW_MESSAGE());\r\n           CALLBACK_NOTIFY(message_complete);\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maclover7": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/400", "title": "Group related tests into files", "body": "`test.c` is over four thousand lines long and is getting a little hard to parse... any objections to moving some related tests into separate files in a `test/` directory?\r\n\r\n@indutny @bnoordhuis ", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399", "title": "Convert test suite to TAP output", "body": "Right now the test suite has a proprietary/unique way of outputting the status of tests. It would be better if it used something like TAP, which is already used by nodejs/node, libuv/libuv, and other projects. I'm going to try and take a look at this, but someone else can give it a shot if they want :)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b11de0f5c65bcc1b906f85f4df58883b0c133e7b", "message": "doc: standardize project name\n\nPR-URL: https://github.com/nodejs/http-parser/pull/398\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tduehr": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/394", "title": "New release needed: 2.7.1 http_parser.h does not contain HTTP_STATUS_MAP", "body": "This is needed by tang.\r\n\r\nsee also: https://github.com/latchset/tang/issues/19", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tatsuhiro-t": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/386", "title": "HTTP/0.9 does not have header fields", "body": "According to https://www.w3.org/Protocols/HTTP/AsImplemented.html, HTTP/0.9 does not have header fields, and single CR + LF pair (or just LF) after a request line signals the end of request.\r\nBut current http-parser waits for 2nd CR + LF pair.\r\n\r\nSee how apache works:\r\n\r\n```\r\n$ telnet 127.0.0.1 80\r\nTrying 127.0.0.1...\r\nConnected to 127.0.0.1.\r\nEscape character is '^]'.\r\nGET /\r\n<html><body><h1>It works!</h1>\r\n<p>This is the default web page for this server.</p>\r\n<p>The web server software is running but no content has been added, yet.</p>\r\n</body></html>\r\nConnection closed by foreign host.\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/311", "title": "Allow non-standard HTTP method", "body": "This change adds non-standard HTTP method support.  We added new\ncallback on_method of type http_data_cb, which notifies incoming\nmethod.  For non-standard HTTP method, method field in struct\nhttp_parser becomes HTTP_METHOD_UNKNOWN.\n\nThe non-standard HTTP method is disabled by default, and must be\nexplicitly enabled by giving -DHTTP_PARSER_METHOD_CB=1 on build time.\nThis is for backward compatibility; because non-standard HTTP method\nis now accepted rather than rejected.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TechnikEmpire": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/384", "title": "When parsing response that omits status message text, on_status is never called", "body": "On status callback does not get invoked when we're dealing with a web server that omits the status text from the status line. Examples of servers doing this are kijiji.\r\n\r\nExample from in the wild:\r\n```\r\nGET \r\nhttps://www.kijiji.ca/h-lloydminster-ab/1700095\r\n\r\nStatus: HTTP/1.1 200\r\n```\r\n\r\nServer is advertised as being nginx.\r\n\r\nWhen parsing the response, `on_status` will never be called. Not sure if this is intended or not, I started looking into the spec for this and didn't see any `MUST`'s with regards to the status text. I came up with a solution to work around this personally so I don't care anymore, just FYI.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sachinHPrabhu": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/382", "title": "Request for information about the schedule of next release", "body": "The master branch of the http-parser project already has a fix that I am interested in.\r\n\r\nTolerate non-compliant status line responses \r\nhttps://github.com/nodejs/http-parser/commit/3b0da34d83e4eace29cc49e3b659bf630537b94c\r\n\r\nHence I wished to know if there is any schedule for next release of the http-parser.\r\n\r\nThanking You.\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WilCrofter": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/381", "title": "Request new release: v2.7.1, does not build with gcc 7.1.1 due to FALLTHROUGH issue", "body": "Although the FALLTHROUGH issue was fixed in [0852bea](https://github.com/nodejs/http-parser/commit/0852bea482e0842b0445c14b19dc9b318a6c4eba) the last release predates the fix.\r\n\r\nv2.7.1 is currently a dependency of [JuliaWeb/HttpParser.jl](https://github.com/JuliaWeb/HttpParser.jl) which will, of course, not build with current versions of gcc.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rnburn": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/380", "title": "Makefile is broken for OS X", "body": "If you try to install on OS X, you'll get this error\r\n```\r\ncc  -I. -DHTTP_PARSER_STRICT=0  -Wall -Wextra -Werror -O3  -fPIC -c http_parser.c -o libhttp_parser.o\r\ncc  -shared -o libhttp_parser.2.7.1.dylib libhttp_parser.o\r\ninstall -D  http_parser.h /usr/local/include/http_parser.h\r\ninstall: illegal option -- D\r\nusage: install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 file2\r\n       install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 ... fileN directory\r\n       install -d [-v] [-g group] [-m mode] [-o owner] directory ...\r\nmake: *** [install] Error 64\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RekGRpth": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/371", "title": "http_status_str", "body": "```c\r\nconst char *http_status_str(enum http_status s) {\r\n    switch (s) {\r\n#define XX(num, name, string) case HTTP_STATUS_##name: return #num \" \" #string;\r\n    HTTP_STATUS_MAP(XX)\r\n#undef XX\r\n        default: return \"<unknown>\";\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "povilasb": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/362", "title": "How to disable automatic chunks decoding?", "body": "> The parser decodes the transfer-encoding for both requests and responses transparently. That is, a chunked encoding is decoded before being sent to the on_body callback.\r\n\r\nIs it possible to configure parser not to decode chunked encoding?\r\nI would like to receive chunks in `on_body` unmodified.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinniefalco": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/319", "title": "http-parser fails to detect chunked encoding at the end of a list", "body": "Given the header:\n\n```\nTransfer-Encoding: gzip, chunked\\r\\n\n```\n\nThe parser will not set chunked encoding when it should:\nhttps://tools.ietf.org/html/rfc7230#section-3.3.1\n\nEncodings are applied left to right and removed from right to left. If the parser encounters the `chunked` token as the last item when the Transfer-Encoding value is a comma separated list, it should consider the message body to be chunk encoded.\n\nI haven't actually tried this so I might be wrong but I see no code for finding a comma in Transfer-Encoding. However, the parser DOES handle comma separated lists correctly for the Connection header.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318", "title": "http-parser impossible condition check", "body": "Consider this code (from http_parser.c):\n\n```\n            /* Transfer-Encoding: chunked */\n            case h_matching_transfer_encoding_chunked:\n              parser->index++;\n              if (parser->index > sizeof(CHUNKED)-1\n                  || c != CHUNKED[parser->index]) {\n                h_state = h_general;\n              } else if (parser->index == sizeof(CHUNKED)-2) {\n                h_state = h_transfer_encoding_chunked;\n              }\n              break;\n```\n\nIt seems `parser->index > sizeof(CHUNKED)-1` can never be true, because if the token being checked matches, we would set `h_state = h_transfer_encoding_chunked` before `parser->index` can ever exceed `sizeof(CHUNKED)-2`. And if the token being checked doesn't match, then we will set `h_state = h_general` before `parser->index` can exceed `sizeof(CHUNKED)-1`.\n\nI haven't actually tested this so I am not 100% sure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grobian": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd3850c048f7a69db2f066d267797fbc3680d9a0", "message": "Makefile: set install_name on macos\n\ninstall_name on Mach-O is similar to SONAME on ELF, except that it needs\na full path instead of just the basename.\n\nFixes: https://github.com/nodejs/http-parser/issues/356\nPR-URL: https://github.com/nodejs/http-parser/pull/358\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/8ea9532378291b5a9c27ab61bb5cff336cc396b5", "message": "Makefile: set versions for SONAME correctly\n\nRaised in issue #356, reduce version number in SONAME to MAJOR.MINOR.\nWhile at it, create a symlink the from SONAME to the library, instead of\nthe other way around, and add a (standard) unversioned symlink to the\nlibrary to aid the ordinary linking process.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/359\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bnoordhuis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/89279ab6135a63159200928da6e544135bf98301", "message": "Update license boilerplate.\n\nThe boilerplate included attribution to NGINX that created confusion\nbecause NGINX is distributed under a different license (BSD, not MIT.)\n\nTo the best of everyone's knowledge, no actual NGINX code remains.\nRemove the attribution to clear up the confusion.\n\nFixes: https://github.com/nodejs/http-parser/issues/389\nPR-URL: https://github.com/nodejs/http-parser/pull/390\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/05525c5fde1fc562481f6ae08fa7056185325daf", "message": "Ignore Upgrade header outside of 101 response.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/260c52233044cdfad4d84b01d3dba11c2786c794", "message": "Fix typo in test name.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/cacb07d2b4ebcd86fc44fd6ee3f0020125e7a9a6", "message": "parser: fix Content-Length header parsing.\n\nCommit e2e467b (\"Update http-parser to 2.6.1\") enforces that messages\ncontain no more than one Content-Length header but it considers any\nheader that starts with \"Content-Length\" as a duplicate.\n\nFix: https://github.com/nodejs/http-parser/issues/324\nPR-URL: https://github.com/nodejs/http-parser/pull/325\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920", "body": "Trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921", "body": "s/seciont/section/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929", "body": "Maybe avoid the extra level of indentation:\n\n``` c\nif (parser->type != HTTP_RESPONSE) {\n  return 1;\n}\nif (parser->status_code / 100 == 1 || /* etc */\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905", "body": "s/swtich/switch/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906", "body": "Trailing whitespace. Happens in one other place too.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909", "body": "This doesn't catch URLs like `http://example.com:/`, v will be zero. I'm not sure if that's a bug or a feature.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694", "body": "James, isn't that redundant? If the `on_headers_complete` callback hasn't fired yet, you know you're still parsing headers.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760", "body": "You need to preserve `parser->data`.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878", "body": "No, to make it easier to detect overflow (signed overflow is undefined, unsigned overflow is not).\n\n`(uint64_t) -1` is a shorthand / fallback for ULLONG_MAX.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920", "body": "Yes-ish. The reason that I don't is that `<limits.h>` doesn't always define it. I can add something like this:\n\n``` c\n#include <limits.h>\n\n#ifndef ULLONG_MAX\n#define ULLONG_MAX ((uint64_t) -1)\n#endif\n```\n\nYour call.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981", "body": "Cool. Updated in 8f290a5.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578", "body": "Style issue: arguments should line up if split over multiple lines.\n\n``` c\nrv = http_parser_parse_url(test->url,\n                           strlen(test->url),\n                           test->is_connect,\n                           &u);\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125", "body": "Sorry, missed this one. Don't use `u_int`, it's a POSIX-ism.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622", "body": "What's this supposed to do?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624", "body": "Oh, I think I get it - you need to know _if_ this version of http-parser is compiled in debug mode.\n\nI initially read it as a switch to turn on/off debug mode.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064", "body": "Wrap at 80 columns.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069", "body": "Style: too much whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077", "body": "Use NULL, not zero. Signals to the reader that it's a pointer.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083", "body": "Superfluous blank line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089", "body": "Why is that here?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091", "body": "Don't use C++/C99 comments.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ploxiln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/1b79abab34d4763c0467f1173a406ad2817c1635", "message": "simplify parsing M-SEARCH method, group P methods\n\ncan use same switch-lookup for '-' char case\nmove PROPFIND and PURGE to be next to the other P methods\n\nchange IS_ALPHA(ch) to  A <= ch <= Z\n(very slight optimization, only uppercase will match in switch)\n\nPR-URL: https://github.com/nodejs/http-parser/pull/323\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "misery": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/0852bea482e0842b0445c14b19dc9b318a6c4eba", "message": "Fix FALLTHROUGH warning in switch of GCC7\n\nPR-URL: https://github.com/nodejs/http-parser/pull/357\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gatzka": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/291a32cc51698318adfbe81ca24e77da1a735365", "message": "Include stddef.h instead of sys/types.h.\n\nThe include is required for type size_t. stddef.h should be available\non every platform, sys/types.h is not.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/360\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fake666": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/3b0da34d83e4eace29cc49e3b659bf630537b94c", "message": "Tolerate non-compliant status line responses\n\n- original fix is from daeon: https://github.com/daeon/http-parser/\n\n  \"Tolerate web servers which do not return a status message in the\n   return response.\n\n   I have noticed this usse on several websites such downloads from\n   mediafire.com\"\n\n- original pull request: https://github.com/nodejs/http-parser/pull/254\n- i merely added the status_cb_called unit test check, there already\n  is a test that triggers this without the patch (a 301 without a\n  reason phrase).\n\nPR-URL: https://github.com/nodejs/http-parser/pull/367\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mscdex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/9f489a474d5761ca5715f1e13a3d39023a656424", "message": "parser: fix HTTP version parsing\n\nOnly one digit is allowed for the major version and only one is\nallowed for the minor version according to RFC 7230.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/366\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "npmccallum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/335850f6b868d3411968cbf5a4d59fe619dee36f", "message": "parser: HTTP_STATUS_MAP(XX) and enum http_status\n\nThis patch provides an enum for the standardized HTTP status codes.\nAdditionally, the HTTP_STATUS_MAP(XX) can be used for other purposes as\nwell, such as code-to-name lookups and code-based switch statements.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/337\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "indutny": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/feae95a3a69f111bc1897b9048d9acbc290992f9", "message": "Bump version to 2.7.1"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/9b0d5b33ebdaacff1dadd06bad4e198b11ff880e", "message": "Bump version to 2.6.0"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/04d28a7377c03bac762e44927c234d9b3d58462a", "message": "parser: returning 2 from on_headers_complete\n\nReturning `2` from on_headers_complete will tell parser that it\nshould not expect neither a body nor any futher responses on\nthis connection. This is useful for handling responses to a\nCONNECT request which may not contain `Upgrade` or\n`Connection: upgrade` headers.\n\nSee: https://github.com/nodejs/node/pull/6198\nPR-URL: https://github.com/nodejs/http-parser/pull/299\nReviewed-By: Brian White <mscdex@mscdex.net>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/777ba4ededf53040f4c5cc5d53f26201e705ebaf", "message": "src: introduce `http_parser_url_init`\n\nThe struct must be zero-initialized, but this wasn't explicitly stated\nanywhere in headers. Introduce `http_parser_url_init` API method that\nwill do it.\n\nFixes: #209\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nPR-URL: https://github.com/nodejs/http-parser/pull/225"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/295", "title": "http_parser: skip lws/rws in header field", "body": "Skip whitespace from the left and the right sides of the header field.\n\nSee: https://github.com/nodejs/node/pull/5844\n\ncc @jasnell \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guoxiao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b2cc8e49f39277b197c6f3592708309ee78c015e", "message": "test: remove \u2018nread\u2019, which is not used\n\nPR-URL: https://github.com/nodejs/http-parser/pull/300\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oldratlee": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/737627b2b232f6a47dffca7ea17a8e3c3e2231a0", "message": "readme: improve format, fix code syntax\n\nPR-URL: https://github.com/nodejs/http-parser/pull/305\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbergstroem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/5651aea80472bf9a1f7d2718c78c0de08984aa1f", "message": "test: add a test for for obstext characters (> 0x80)\n\nCreate a test added for nodejs in nodejs/node@954a4b4b.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/dbcda1961c25a4f945a55da8e9dd3af6e4df65f0", "message": "Update http-parser to 2.6.2\n\nFixes a header parsing bug for obstext characters (> 0x80)\n\nAdaption of nodejs/node@954a4b4b:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Mon Feb 15 09:40:58 2016 -0800\n\n    deps: update to http-parser 2.6.2\n\n    Fixes http-parser regression with IS_HEADER_CHAR check\n    Add test case for obstext characters (> 0x80) is header\n\n    PR-URL: https://github.com/nodejs/node/pull/5237\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Myles Borins <myles.borins@gmail.com>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/678a9e21f11e5ea93e5e17a2302390f88a6a8c46", "message": "test: Assert against correct error messages\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228", "body": "Hey, any reason you didn't merge my commit (http://github.com/jbergstroem/http-parser/commit/4c521a67fe5eaaee539cb68a4b66c8367afcc4fd)? Let me know if I'm doing something wrong and i'll try to fix it.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dolmen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd65b0fbbdb405425a14d0e49f5366667550b1c2", "message": "src: refactor method parsing\n\nUse a switch and a macro to branch parsing of HTTP methods.\nEasier to read and much shorter.\n\nIn this commit, the order of branches dispatching is the same as in the\noriginal code, to ease review. Reordering branches by descending\nfrequency will improve speed too.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/273\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasnell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/e2e467b91262246b339fb3d80c8408d498b4a43b", "message": "Update http-parser to 2.6.1\n\nIncludes parsing improvements to ensure closer HTTP spec conformance\n\nAdaption of nodejs/node@4f4c8ab3b4cea246d2ece6ca006fe280241d84a4:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Wed Feb 3 17:28:48 2016 -0800\n\n    deps: update http-parser to version 2.6.1\n\n    includes parsing improvements to ensure closer HTTP spec conformance\n\n    PR-URL: https://github.com/nodejs/node-private/pull/26\n    Reviewed-By: Rod Vagg <r@va.gg>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/bee4817ebea0eaa592143c7825f5c96f040c84e4", "message": "Bump version to 2.6.0"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/326", "title": "add settings flags, refactor lenient_http_headers setting", "body": "A previous change during a security fix added the ability to set a `lenient_http_headers` flag on the HTTP Parser instance. The way it was done was a bit of a hack at the time in order to avoid an ABI breaking change. This PR adds a new `uint32_t` flags field to `http_parser_settings` in order to provide a more robust and correct way of passing these kinds of settings into a parser instance.\n\n_Note_: This is an ABI change so it would require a semver-major bump\n\n/cc @indutny \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/4e382f96e6d3321538a78f2c7f9506d4e79b08d6", "message": "readme: fix build status badge\n\nPR-URL: https://github.com/nodejs/http-parser/pull/277\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lberezy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/483eca7989d655b34b01f65a8faad82ddb79813c", "message": "doc: updated README.md to include multi-threading example\n\nIncluded information and example on communicating data between\nthread local and callback scopes. This shows how http-parser\ncan be used in a multi-threaded context.\n\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nPR-URL: https://github.com/nodejs/http-parser/pull/256"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DCjanus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/388", "title": "fix typo", "body": "from 'futher' to 'further'\r\n\r\n-----------------\r\n\r\nI'm not a native English speaker, maybe there is a word 'futher', but I can't find it by Google.\r\nIf I'm Wrong, forget me\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nibaozhu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/379", "title": "install `package'", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simsong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/378", "title": "add .deps and .dirstamp to .gitignore", "body": "I use http-parser in another project as a submodule. When I run autotools configure, it creates in the http-parser sub directory a directory and a file:\r\n\r\n```\r\n[user@localhost http-parser]$ git status\r\nHEAD detached from 8d9e5db\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\t.deps/\r\n\t.dirstamp\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n[user@localhost http-parser]$\r\n```\r\n\r\nIt would be super-nice to have `git status` **not** warn me about these two files generated by autotools.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "izaid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/377", "title": "[WIP] CMake Support", "body": "CMake support has been requested a few times, and there has been at least one PR about it. This is a new attempt at it -- I think it is relatively simple. Happy to build it out more if that is what is needed.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flandr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/374", "title": "Add basic CMake support", "body": "Only supports building the main library target (static and dynamic).\r\n\r\nRefs #257", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alperakcan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/369", "title": "ignore headers transfer_encoding_chunked and content_length to work with http assemblers.", "body": "added ignore_header_transfer_encodig_chunked and ignore_header_content_length to settings.\r\n\r\nignore_header_content_length:\r\n  useful if body length and content length does not match. happens with owa servers. or working with pre http assemblers that unzips compressed content without changing content-length.\r\n\r\nignore_header_transfer_encodig_chunked:\r\n  useful when working with pre-http assemblers which assembles chunked content into one http packet without changing transfer-encoding field.\r\n\r\nmay be useful for someone.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kunalspathak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/352", "title": "http header parsing", "body": "http_parser along with other http request information supplies header\r\nfields to the consumer. In `node` case, it creates a new `JSString`\r\nof these header fields which involves memory allocation. If parser\r\nkeeps track of headers while parsing and return a unique id to `node`\r\nthat help distinguish the known header name, `node` don't have to\r\nallocate for known headers and it can use the pre-created `JSString`\r\nfor the header fields. See discussion in https://github.com/nodejs/node/issues/10930\r\n\r\nThe approach I have taken is while scanning the request, keep track\r\nof known headers and update the `header_state` accordingly. `node` or\r\nany consumer can consume the `header_state` information and decide\r\nto use cached http header field instead of creating new string. I try to\r\nmatch traditional cases http header. e.g. In Content-Type 'C' and 'T' has\r\nto be upper case for the header to qualify for traditional cased header.\r\nI use `traditional_case_http_headers` to track this information.\r\n\r\nPerformance is flat for node's http benchmark except bench-parse where\r\nsometimes I noticed 5% regression. I am not sure if it was due to noise.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akatrevorjay": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/351", "title": "Cython bindings -- Interested?", "body": "Hi, a long time ago I wrote Cython bindings for this. If I clean it up are you interested in merging?\r\n\r\n(notably the build process and add some docs)\r\n\r\nTy,\r\nTrevor", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roman-neuhauser": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/348", "title": "Unbreak `make install` in BSDs", "body": "I've only tested this in freebsd-12.0 where the changes get me from syntax errors in the Makefile to passing `port test` with flying colors.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shindo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/347", "title": "parser: fix handling of newlines before HTTP responses", "body": "This diff fixes ignoring of CR and LF chars received before HTTP response's start line the same way as they are handled with HTTP_REQUEST and HTTP_BOTH parser types.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdamMajer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/346", "title": "makefile: Flexible install fixes", "body": "Fixing three Makefile related things,\r\n\r\n1. LIBDIR should be configurable. INCLUDEDIR as well\r\n2. fix SONAME so it represents actual ABI compatibility\r\n3. symlinks should not have absolute paths\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shekhei": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/342", "title": "Various optimizations", "body": "Hi, basically I was just messing around and did some benchmarking, found some interesting things, so I made some changes. Mostly to do with removing some of the branches and created a SIMD version of finding CRLF that doesn't need to walk the whole payload twice(worst case)\n\nBelow are the benchmark results\n### OSX (el capitan, mbp 13\" early 2015, 3.1 GHz Intel Core i7)\n#### Clang\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 5.761632 | 867809.687500 | 5.104409 | 979545.312500 | 11.4069 |\n| 5.769115 | 866684.062500 | 5.104001 | 979623.625000 | 11.5289 |\n| 5.803461 | 861554.875000 | 5.086198 | 983052.625000 | 12.3592 |\n| 5.779534 | 865121.687500 | 5.082990 | 983672.937500 | 12.0519 |\n| 5.762670 | 867653.375000 | 5.092542 | 981827.875000 | 11.6288 |\n#### GCC 4.9\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 4.297466 | 1163476.375000 | 3.787979 | 1319965.000000 | 11.8555 |\n| 4.159397 | 1202097.250000 | 3.774015 | 1324849.000000 | 9.26533 |\n| 4.230322 | 1181943.125000 | 3.788900 | 1319644.250000 | 10.4347 |\n| 4.214539 | 1186369.375000 | 3.772407 | 1325413.750000 | 10.4906 |\n| 4.162938 | 1201074.750000 | 3.763118 | 1328685.375000 | 9.6042 |\n### ubuntu 14.04 ( Intel Core i7-6700 @ 3.40GHz )\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 3.186016 | 1569358.000000 | 2.815905 | 1775628.000000 | 11.6167 |\n| 3.186449 | 1569144.875000 | 2.846761 | 1756382.125000 | 10.6604 |\n| 3.190864 | 1566973.625000 | 2.877822 | 1737425.125000 | 9.81057 |\n| 3.183230 | 1570731.625000 | 2.813425 | 1777193.250000 | 11.6173 |\n| 3.190520 | 1567142.625000 | 2.849443 | 1754728.875000 | 10.6903 |\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jlesk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/334", "title": "build: vms and os400 support", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bc-lee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/296", "title": "Fix: suppress warning C4244 on MSVC", "body": "MSVC 2015 gives some warnings on http_parser.c with \n\n> warning C4244: '=' : conversion from 'int' to 'uint16_t', possible loss of data\n> It will supress this warning.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "claudix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/294", "title": "Added support for compiling on MinGW platform", "body": "Added rules to compile on MinGW platforms (Microsoft Windows environments):\n- Use 'gcc' as compiler.\n- Generate DLL file when compiling the library.\n- Disable -fPIC when compiling the library (on MinGW platforms all code is already position independent and setting this flag issues an error).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RandoMan70": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/285", "title": "Introduce raw data callbacks", "body": "These callbacks can be used when developing transparent HTTP traffic analysis and filtering. \nThe main goal of it is to handle transmitted data as-is, but having ability to distinguish data between headers, bodies and different requests.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/258", "title": "Implement on_header_raw and on_body_raw callbacks", "body": "This patch adds on_header_raw and on_body_raw callbacks. \nWhen parser finish processing of new portion of data (or when it switches between header/body state) it run these callbacks, attaching exact stream data.\nThese callbacks called after usual header and body callbacks.\n\nPatch contains bug: after parsing error detected it still can call raw callback, so we need to check error status of a parser inside raw callbacks.\n\nPatch based at old revision, so we need to dig into parser logic again.\nBase revision: 959f4cb12748ea3aa2c4ec3183ff4acbf0fd222f\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbargren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/276", "title": "Add support for digits, '+', '-', and '.' to the scheme of a URI", "body": "Addresses #275.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "staticfloat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/264", "title": "Make library symlinks relative", "body": "This allows distributions to be more easily relocatable, such as when bottling this library in Homebrew.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erikjohnston": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/243", "title": "Allow repeatable calls to 'make install'.", "body": "Currently if `make install` is invoked multiple times it fails due to it trying to recreate the `libhttp_parser.so` symlink. \n\nAdding the `-f` flag to the `ln` invocations fixes this, but will change the default http-parser used to the newly installed version if there are multiple versions installed. I _think_ this is what we want to do anyway since we are clobbering any existing `http-parser.h` during install, so not repointing the symlink would result in a mismatch between the default library and header versions.\n\nThe alternative would be to version `http-parser.h` and add a symlink for it, while trying to ensure we always update both symlinks atomically.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThisIsMissEm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/214", "title": "Added support for SOURCE", "body": "As per tweets: https://twitter.com/indutny/status/557499042243289088\n\nIt seems new handling for upgrade was added at some point, which makes the tests break. Unfortunately I don't have time to work out how to make the tests pass again.\n\nSOURCE should essentially be handled like Upgrade, I believe, and switched to data/tcp mode after parsing headers.\n\n/cc @indutny @bnoordhuis \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacquesg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/184", "title": "Solaris doesn't necessarily have stdint.h, use inttypes.h", "body": "Solaris doesn't necessarily have `stdint.h`, it's more portable to use `sys/inttypes.h`.\n\nSee:\nhttp://wiki.opencsw.org/porting-faq#toc1\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vincentbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/159", "title": "Add two hooks to be executed when a chunk is downloaded.", "body": "One hook is executed right before receiving a new chunk. The second\none is executed just after. parsertrace.c is updated to use those\nhooks for display.\n\nI am using this for experimentation with rendering. This is more reliable than looking at timestamps to know where chunks start and end.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078", "body": "Yes this is still true. Annoying but it make a lot of other things much simpler (i.e. the http_parser does not have to make decisions about how how you might pre-allocate this)\n\nHere are two examples\n1) http://github.com/ry/http-parser/blob/37a0ff8928fb0d83cec0d0d8909c5a4abcd221af/test.c#L403 \n2) http://github.com/ry/node/blob/842eaf446d2fdcb33b296c67c911c32a0dabc747/src/http.js#L284 (in javascript, but it's just a thin abstraction over the parser callback)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080", "body": "Here is an untested code snippit which more directly answers your question: http://gist.github.com/155877\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082", "body": "I would gladly accept a patch for better documentation of this tricky part of the library. :)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067", "body": "fixed in b5b116e59ea3a22b4898705f30c5b0ffe7ce1e7c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182", "body": "sorry, i guess you're the same that reported the news.ycombinator.org bug in node. i just realized this is the same error. the fix I gave doesn't solve the problem.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421", "body": "It should.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623", "body": "Please show an example where it is not called. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408", "body": "You're not making the call for EOF. Do this:\n    http_parser_execute(&parser, settings, response, strlen(response));\n    http_parser_execute(&parser, settings, NULL, 0);\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062", "body": "Your response is missing the last `\\r\\n`. Chunked messages must be terminated by `0\\r\\n\\r\\n` \nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1\n\nAre you seeing a response like this in real-life?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512", "body": "thanks for the note. i added some text in 69cf8d8da9ba0907192f26239eb41223871dd46c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346", "body": "you can see where it failed by looking at the result of http_parser_execute()\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361", "body": "yes, but it exits immediately if there was an error. so if http_parser_execute() < sizeof(buf) then there was an error (or an Upgrade). You can use this to point out where the error was - which is perhaps more useful than an error code.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407", "body": "You can communicate your state (or what action to take) to the code calling `http_parser_execute()` through your `void *data` object. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479", "body": "Can you please provide a dump of such a request?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901", "body": "closing.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935", "body": "Fixed in 4cf39fd2fa8d1b52338ad3c4dd9ae6b3f32d72f4.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375", "body": "Thanks for the report. Fixed in 120f0f6e09773dbe003841b5b339f9284dd63aad.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885", "body": "thanks. comitted in a66c61c190a90653da3fd7c1443a1a7329472567\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139", "body": "There is no reason phrase callback.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181", "body": "Currently there is no way. The status code can is set in the parser structure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949", "body": "no, unfortunately not. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277", "body": "no\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595", "body": "CONNECT too. thanks\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267", "body": "cliff suggests the name 'lowcase' should change. i agree. can't think of anything appropriate right now though.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239", "body": "Sorry - it got lost in my inbox.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419", "body": "nread is just for the header\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793", "body": "why unsigned? just to save a bit?\n\nforgive my ignorance but what is `(uint64_t) -1` ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913", "body": "can you use `ULLONG_MAX` instead?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969", "body": "that's fine - i just want it for clarity\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "suhoparov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504", "body": "And in what sense not to call message_complete ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150", "body": "int message_complete_cb(http_parser \\* p) {\n    puts(**FUNCTION**);\n    return 0;\n}\n\n```\nconst char * response = \n    \"HTTP/1.1 200 OK\\r\\n\"\n    \"Date: Fri, 31 Dec 1999 23:59:59 GMT\\r\\n\"\n    \"Content-Type: text/plain\\r\\n\"\n    \"Transfer-Encoding: chunked\\r\\n\"\n    \"\\r\\n\"\n    \"1a\\r\\n\"\n    \"abcdefghijklmnopqrstuvwxyz\\r\\n\"\n    \"10\\r\\n\"\n    \"1234567890abcdef\\r\\n\"\n    \"0\\r\\n\";\n```\n\nmain() ...\n    http_parser parser;\n    http_parser_init(&parser, HTTP_RESPONSE);\n\n```\nhttp_parser_settings settings;\nsettings.on_body = data_cb;\nsettings.on_message_begin = message_cb;\nsettings.on_header_field = header_field_cb;\nsettings.on_header_value = header_value_cb;\nsettings.on_headers_complete = headers_complete_cb;\nsettings.on_message_complete = message_complete_cb;\n\nhttp_parser_execute(&parser, settings, response, strlen(response));\n```\n\noutput: calls all callback unless \"message_complete_cb\".\ncode is master branch on VC++ 7.1\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456", "body": "the same, message_complete_callback doesn't call\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180", "body": "Sorry, yes it invalid response, with CRLF good works. No in real-life, this my design)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183", "body": "closed\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353", "body": "wtf, that was fast. Doesn't `http_parser_execute` return the number of bytes parsed?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390", "body": "hrm, I'd like to use the return values for indicating the reason why I made http-parser exit; for example after I got the request URL and figured out I want to answer with HTTP 404, it would be comfortable to simply return `404`.\n\nIf I manually break parsing, I've got a reason to and I most probably want to communicate that reason back to the code that called `http_parser_execute` so that code can decide what steps to take next.\n\nSo please add this feature. :-)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ptlomholt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507", "body": "A sample request from http://muffin.doit.org/docs/rfc/tunneling_ssl.html:\n\nCONNECT home.netscape.com:443 HTTP/1.0\nUser-agent: Mozilla/1.1N\nProxy-authorization: basic aGVsbG86d29ybGQ=\n\nI can get a dump, but from the sample it is pretty obvious what the problem is...\n\nThe parser fails when it encounters the first period in the hostname as it assumes it is parsing the schema, not the hostname!\nI guess an easy fix would be to skip directly to _s_req_host state_ instead of _s_req_schema_ iff the request is a CONNECT...\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jterrace": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092", "body": "Fixed in d0dfc987732a25ee1f2236526e2801f06678cda4\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402", "body": "Why did you change nread back to 32-bit? Isn't it possible for a response to be > 4GB? I realize it's rare, but still possible?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "arhrodriguez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mnot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895", "body": "Just FYI, HTTPbis is discouraging the use of multi-line headers; from http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-3.2 : \n\n   Historically, HTTP header field values could be extended over\n   multiple lines by preceding each extra line with at least one space\n   or horizontal tab character (line folding).  This specification\n   deprecates such line folding except within the message/http media\n   type (Section 10.3.1).  HTTP/1.1 senders MUST NOT produce messages\n   that include line folding (i.e., that contain any field-content that\n   matches the obs-fold rule) unless the message is intended for\n   packaging within the message/http media type.  HTTP/1.1 recipients\n   SHOULD accept line folding and replace any embedded obs-fold\n   whitespace with a single SP prior to interpreting the field value or\n   forwarding the message downstream.\n\nI.e., the parser still SHOULD be able to handle them, but the spec now admits they're not widely supported.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909", "body": "This appears to be caused by this:\n          if (c < 'a' || 'z' < c) goto error;\n\nwhich rejects non-alphabetic first characters. The BNF for the field name in HTTP is 'token' which accepts a much broader range of characters (see http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-1.2.2).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "temoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796", "body": "I think that 'ascii*'\nallows matching\nHTTP/1.1 301 \\r\\n\\r\\n  (space between 301 and CRLF)\neither. And if i understand correctly, it would trigger response phrase callback with empty phrase.\n\nIs that proper?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180", "body": "How to read reason phrase then?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133", "body": "And new parser will not support custom methods?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "erichocean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944", "body": "Happy to see you going by hand, but the Ragel parser had the advantage of the graphical Dot state machine output. Are you maintaing a similar FSM for this version, and if so, would you please copy the .Dot file into the repository? Thanks! \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cmlenz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594", "body": "Afaik, TRACE and OPTIONS aren't WebDAV methods, but defined by the HTTP/1.1 spec.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lericson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707", "body": "Heh, funny how it's the exact same modifications though - one huge coincidence right there ;-) I mean especially what with the `CC?=gcc` part, that's not even necessary as `CC` is set by default in a Makefile.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ignacio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521", "body": "These typedefs don't work with Mingw. #ifdef _WIN32 should check for mingw and/or cygwin\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pgriess": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306", "body": "Thanks. I was just about to submit a patch for this ;)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487", "body": "Yeah, it's just request_url now. Check out the discussion on this pull request for the justification at ry/http-parser#54.\n\nWhat were you using the callbacks for? If this is node-land, can you just use the the 'url' module to parse what you want?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227", "body": "I believe we need to be doing this status code check for HTTP/1.0 as well.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407", "body": "Yeah, if the client and server both agree on keep-alive (i.e. by both sending \"Connection: keep-alive\" headers), we're dealing with the same situation as HTTP/1.1: we have a bytestream that contains a response with no body followed by another response. The case we're dealing with here is not that we can't determine the response length -- it's that we know that the length is 0.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088", "body": "Accepting any non-CR/LF character is a bit more liberal than the RFC allows, but I don't really think it's a problem. Also, this doesn't handle LWS properly (we can get a CRLF followed by some number of HTs or SPs and continue the reason). Check out the way the s_header_value_lws state works.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931", "body": "Yeah, agreed that we should be validating that.\n\nHowever, this isn't a regression. I'll file a bug for this. We have similar problems with handling empty hosts as well, both of which probably need a new state to indicate the beginning of the entity so that we can verify that there is at least one character.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628", "body": "Filed #74 for this.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456", "body": "so it's just request_url now? I'm using the others and wouldn't mind them staying so I dont have to re-parse them in c land, but it's not a show stopper I guess, pretty simple to delimit\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563", "body": "nah it's a none-node related C project, thanks I'll check it out!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "koichik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937", "body": "@pgriess - With HTTP/1.0 or earlier, Keep-Alive is disabled by default. Therefore, I think that we do not need it. Keep-Alive is used if and only if the response has `Connection: Keep-Alive` (or legacy `Keep-Alive:`, but http-parser does not seem to support it).\n\n[EDIT] I may understand what you mean. HTTP/1.0 server sends `Connection: Keep-Alive`, but the body length may be unable to be determined.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dhruvbird": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kolbyjack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414", "body": "I think you need to goto reexecute_byte when switching to a request here in case ch is a space\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429", "body": "This will still fail on GENERICLONGMETHOD, since that 'L' isn't a space, it'll fall through to where it still indexes method_strings\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498", "body": "Since it's walking through the full HTTP now, would it be better to deal with s_req_or_resp as a single state kind of like the request methods?  Use a string \"HTTP\" and parser->index?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cmr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440", "body": "Herp, I knew there was a reason I initially had a nested if.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216", "body": "That would simplify the code a lot, great suggestion (thanks for all the help!)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "postmodern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630", "body": "Correct. This could be a function, but I choose a constant variable since accessing them via FFI is cheaper than function calls.\n\nIn http-parser 2.0, `HTTP_PARSER_DEBUG` can dramatically change the layout of `http_parser`, so I need to check if debug was enabled when defining my own [FFI Struct](https://github.com/postmodern/ffi-http-parser/blob/master/lib/ffi/http/parser/instance.rb#L11-33).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}, "2": {"ZaMaZaN4iK": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/404", "title": "Conan package for http-parser", "body": "Hello,\r\nDo you know about [Conan](https://github.com/conan-io/conan)?\r\n[Conan](http://docs.conan.io/en/latest/) is modern dependency manager for C++. And will be great if your library will be available via package manager for other developers.\r\n\r\n[Here](https://github.com/bincrafters/conan-templates) you can find example, how you can create package for the library. \r\n\r\nIf you have any questions, just ask :-)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samoconnor": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/403", "title": "Test \"CONNECT_WITH_BODY_REQUEST\" maybe worng", "body": "See: https://github.com/nodejs/http-parser/pull/235#issuecomment-356903686\r\n\r\nThe `CONNECT_WITH_BODY_REQUEST` test case input has `Content-Length: 10` and a body `\"blarfcicle\"`, but the test expects [`.body= \"\"`](https://github.com/nodejs/http-parser/blob/master/test.c#L1102) !\r\n\r\n[The RFC says](https://tools.ietf.org/html/rfc7230#section-3.3):\r\n> _The presence of a message body in a request is signaled by a\r\n    Content-Length or Transfer-Encoding header field.  Request message\r\n   framing is independent of method semantics, even if the method does\r\n   not define any use for a message body._\r\n\r\ni.e. A request that says `Content-Length: 10` has a 10-byte body irrespective of the method being `CONNECT`.\r\n\r\nThe `CONNECT` scemantics are defined here: [RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6). It talks about the client ignoring *responses( with Content-Length in, however, that is not relevant to this test *request* test case.\r\n\r\n>    _A server MUST NOT send any Transfer-Encoding or Content-Length header\r\n   fields in a 2xx (Successful) response to CONNECT.  A client MUST\r\n   ignore any Content-Length or Transfer-Encoding header fields received\r\n   in a successful response to CONNECT._\r\n\r\n[RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6) goes on to say that a payload on a `CONNECT` request has no defined meaning, but it does not disallow it:\r\n\r\n>  _A payload within a CONNECT request message has no defined semantics;\r\n   sending a payload body on a CONNECT request might cause some existing\r\n   implementations to reject the request._\r\n\r\nSo, this line may be wrong: https://github.com/nodejs/http-parser/pull/235/files#diff-5c62f371bf37583234d2462ad49ce33dR1837", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397", "title": "typos in http-parser/test.c", "body": "https://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L156\r\n\r\nhttps://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L374\r\n\r\nhttps://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md ?", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tianchao-haohan": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/401", "title": "Need to consider the noBody situation for HEAD method", "body": "Here is the diff code:\r\n```\r\n+++ b/src/3rd_party/http_parser/http_parser.c\r\n@@ -1783,8 +1783,9 @@ reexecute:\r\n\r\n         hasBody = parser->flags & F_CHUNKED ||\r\n           (parser->content_length > 0 && parser->content_length != ULLONG_MAX);\r\n-        if (parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n-                                (parser->flags & F_SKIPBODY) || !hasBody)) {\r\n+        if ((parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n+                                (parser->flags & F_SKIPBODY) || !hasBody))\r\n+                                || parser->method == HTTP_HEAD) {\r\n           /* Exit, the rest of the message is in a different protocol. */\r\n           UPDATE_STATE(NEW_MESSAGE());\r\n           CALLBACK_NOTIFY(message_complete);\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maclover7": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/400", "title": "Group related tests into files", "body": "`test.c` is over four thousand lines long and is getting a little hard to parse... any objections to moving some related tests into separate files in a `test/` directory?\r\n\r\n@indutny @bnoordhuis ", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399", "title": "Convert test suite to TAP output", "body": "Right now the test suite has a proprietary/unique way of outputting the status of tests. It would be better if it used something like TAP, which is already used by nodejs/node, libuv/libuv, and other projects. I'm going to try and take a look at this, but someone else can give it a shot if they want :)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b11de0f5c65bcc1b906f85f4df58883b0c133e7b", "message": "doc: standardize project name\n\nPR-URL: https://github.com/nodejs/http-parser/pull/398\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tduehr": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/394", "title": "New release needed: 2.7.1 http_parser.h does not contain HTTP_STATUS_MAP", "body": "This is needed by tang.\r\n\r\nsee also: https://github.com/latchset/tang/issues/19", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tatsuhiro-t": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/386", "title": "HTTP/0.9 does not have header fields", "body": "According to https://www.w3.org/Protocols/HTTP/AsImplemented.html, HTTP/0.9 does not have header fields, and single CR + LF pair (or just LF) after a request line signals the end of request.\r\nBut current http-parser waits for 2nd CR + LF pair.\r\n\r\nSee how apache works:\r\n\r\n```\r\n$ telnet 127.0.0.1 80\r\nTrying 127.0.0.1...\r\nConnected to 127.0.0.1.\r\nEscape character is '^]'.\r\nGET /\r\n<html><body><h1>It works!</h1>\r\n<p>This is the default web page for this server.</p>\r\n<p>The web server software is running but no content has been added, yet.</p>\r\n</body></html>\r\nConnection closed by foreign host.\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/311", "title": "Allow non-standard HTTP method", "body": "This change adds non-standard HTTP method support.  We added new\ncallback on_method of type http_data_cb, which notifies incoming\nmethod.  For non-standard HTTP method, method field in struct\nhttp_parser becomes HTTP_METHOD_UNKNOWN.\n\nThe non-standard HTTP method is disabled by default, and must be\nexplicitly enabled by giving -DHTTP_PARSER_METHOD_CB=1 on build time.\nThis is for backward compatibility; because non-standard HTTP method\nis now accepted rather than rejected.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TechnikEmpire": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/384", "title": "When parsing response that omits status message text, on_status is never called", "body": "On status callback does not get invoked when we're dealing with a web server that omits the status text from the status line. Examples of servers doing this are kijiji.\r\n\r\nExample from in the wild:\r\n```\r\nGET \r\nhttps://www.kijiji.ca/h-lloydminster-ab/1700095\r\n\r\nStatus: HTTP/1.1 200\r\n```\r\n\r\nServer is advertised as being nginx.\r\n\r\nWhen parsing the response, `on_status` will never be called. Not sure if this is intended or not, I started looking into the spec for this and didn't see any `MUST`'s with regards to the status text. I came up with a solution to work around this personally so I don't care anymore, just FYI.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sachinHPrabhu": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/382", "title": "Request for information about the schedule of next release", "body": "The master branch of the http-parser project already has a fix that I am interested in.\r\n\r\nTolerate non-compliant status line responses \r\nhttps://github.com/nodejs/http-parser/commit/3b0da34d83e4eace29cc49e3b659bf630537b94c\r\n\r\nHence I wished to know if there is any schedule for next release of the http-parser.\r\n\r\nThanking You.\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WilCrofter": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/381", "title": "Request new release: v2.7.1, does not build with gcc 7.1.1 due to FALLTHROUGH issue", "body": "Although the FALLTHROUGH issue was fixed in [0852bea](https://github.com/nodejs/http-parser/commit/0852bea482e0842b0445c14b19dc9b318a6c4eba) the last release predates the fix.\r\n\r\nv2.7.1 is currently a dependency of [JuliaWeb/HttpParser.jl](https://github.com/JuliaWeb/HttpParser.jl) which will, of course, not build with current versions of gcc.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rnburn": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/380", "title": "Makefile is broken for OS X", "body": "If you try to install on OS X, you'll get this error\r\n```\r\ncc  -I. -DHTTP_PARSER_STRICT=0  -Wall -Wextra -Werror -O3  -fPIC -c http_parser.c -o libhttp_parser.o\r\ncc  -shared -o libhttp_parser.2.7.1.dylib libhttp_parser.o\r\ninstall -D  http_parser.h /usr/local/include/http_parser.h\r\ninstall: illegal option -- D\r\nusage: install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 file2\r\n       install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 ... fileN directory\r\n       install -d [-v] [-g group] [-m mode] [-o owner] directory ...\r\nmake: *** [install] Error 64\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RekGRpth": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/371", "title": "http_status_str", "body": "```c\r\nconst char *http_status_str(enum http_status s) {\r\n    switch (s) {\r\n#define XX(num, name, string) case HTTP_STATUS_##name: return #num \" \" #string;\r\n    HTTP_STATUS_MAP(XX)\r\n#undef XX\r\n        default: return \"<unknown>\";\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "povilasb": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/362", "title": "How to disable automatic chunks decoding?", "body": "> The parser decodes the transfer-encoding for both requests and responses transparently. That is, a chunked encoding is decoded before being sent to the on_body callback.\r\n\r\nIs it possible to configure parser not to decode chunked encoding?\r\nI would like to receive chunks in `on_body` unmodified.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinniefalco": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/319", "title": "http-parser fails to detect chunked encoding at the end of a list", "body": "Given the header:\n\n```\nTransfer-Encoding: gzip, chunked\\r\\n\n```\n\nThe parser will not set chunked encoding when it should:\nhttps://tools.ietf.org/html/rfc7230#section-3.3.1\n\nEncodings are applied left to right and removed from right to left. If the parser encounters the `chunked` token as the last item when the Transfer-Encoding value is a comma separated list, it should consider the message body to be chunk encoded.\n\nI haven't actually tried this so I might be wrong but I see no code for finding a comma in Transfer-Encoding. However, the parser DOES handle comma separated lists correctly for the Connection header.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318", "title": "http-parser impossible condition check", "body": "Consider this code (from http_parser.c):\n\n```\n            /* Transfer-Encoding: chunked */\n            case h_matching_transfer_encoding_chunked:\n              parser->index++;\n              if (parser->index > sizeof(CHUNKED)-1\n                  || c != CHUNKED[parser->index]) {\n                h_state = h_general;\n              } else if (parser->index == sizeof(CHUNKED)-2) {\n                h_state = h_transfer_encoding_chunked;\n              }\n              break;\n```\n\nIt seems `parser->index > sizeof(CHUNKED)-1` can never be true, because if the token being checked matches, we would set `h_state = h_transfer_encoding_chunked` before `parser->index` can ever exceed `sizeof(CHUNKED)-2`. And if the token being checked doesn't match, then we will set `h_state = h_general` before `parser->index` can exceed `sizeof(CHUNKED)-1`.\n\nI haven't actually tested this so I am not 100% sure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grobian": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd3850c048f7a69db2f066d267797fbc3680d9a0", "message": "Makefile: set install_name on macos\n\ninstall_name on Mach-O is similar to SONAME on ELF, except that it needs\na full path instead of just the basename.\n\nFixes: https://github.com/nodejs/http-parser/issues/356\nPR-URL: https://github.com/nodejs/http-parser/pull/358\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/8ea9532378291b5a9c27ab61bb5cff336cc396b5", "message": "Makefile: set versions for SONAME correctly\n\nRaised in issue #356, reduce version number in SONAME to MAJOR.MINOR.\nWhile at it, create a symlink the from SONAME to the library, instead of\nthe other way around, and add a (standard) unversioned symlink to the\nlibrary to aid the ordinary linking process.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/359\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bnoordhuis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/89279ab6135a63159200928da6e544135bf98301", "message": "Update license boilerplate.\n\nThe boilerplate included attribution to NGINX that created confusion\nbecause NGINX is distributed under a different license (BSD, not MIT.)\n\nTo the best of everyone's knowledge, no actual NGINX code remains.\nRemove the attribution to clear up the confusion.\n\nFixes: https://github.com/nodejs/http-parser/issues/389\nPR-URL: https://github.com/nodejs/http-parser/pull/390\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/05525c5fde1fc562481f6ae08fa7056185325daf", "message": "Ignore Upgrade header outside of 101 response.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/260c52233044cdfad4d84b01d3dba11c2786c794", "message": "Fix typo in test name.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/cacb07d2b4ebcd86fc44fd6ee3f0020125e7a9a6", "message": "parser: fix Content-Length header parsing.\n\nCommit e2e467b (\"Update http-parser to 2.6.1\") enforces that messages\ncontain no more than one Content-Length header but it considers any\nheader that starts with \"Content-Length\" as a duplicate.\n\nFix: https://github.com/nodejs/http-parser/issues/324\nPR-URL: https://github.com/nodejs/http-parser/pull/325\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920", "body": "Trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921", "body": "s/seciont/section/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929", "body": "Maybe avoid the extra level of indentation:\n\n``` c\nif (parser->type != HTTP_RESPONSE) {\n  return 1;\n}\nif (parser->status_code / 100 == 1 || /* etc */\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905", "body": "s/swtich/switch/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906", "body": "Trailing whitespace. Happens in one other place too.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909", "body": "This doesn't catch URLs like `http://example.com:/`, v will be zero. I'm not sure if that's a bug or a feature.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694", "body": "James, isn't that redundant? If the `on_headers_complete` callback hasn't fired yet, you know you're still parsing headers.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760", "body": "You need to preserve `parser->data`.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878", "body": "No, to make it easier to detect overflow (signed overflow is undefined, unsigned overflow is not).\n\n`(uint64_t) -1` is a shorthand / fallback for ULLONG_MAX.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920", "body": "Yes-ish. The reason that I don't is that `<limits.h>` doesn't always define it. I can add something like this:\n\n``` c\n#include <limits.h>\n\n#ifndef ULLONG_MAX\n#define ULLONG_MAX ((uint64_t) -1)\n#endif\n```\n\nYour call.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981", "body": "Cool. Updated in 8f290a5.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578", "body": "Style issue: arguments should line up if split over multiple lines.\n\n``` c\nrv = http_parser_parse_url(test->url,\n                           strlen(test->url),\n                           test->is_connect,\n                           &u);\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125", "body": "Sorry, missed this one. Don't use `u_int`, it's a POSIX-ism.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622", "body": "What's this supposed to do?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624", "body": "Oh, I think I get it - you need to know _if_ this version of http-parser is compiled in debug mode.\n\nI initially read it as a switch to turn on/off debug mode.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064", "body": "Wrap at 80 columns.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069", "body": "Style: too much whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077", "body": "Use NULL, not zero. Signals to the reader that it's a pointer.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083", "body": "Superfluous blank line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089", "body": "Why is that here?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091", "body": "Don't use C++/C99 comments.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ploxiln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/1b79abab34d4763c0467f1173a406ad2817c1635", "message": "simplify parsing M-SEARCH method, group P methods\n\ncan use same switch-lookup for '-' char case\nmove PROPFIND and PURGE to be next to the other P methods\n\nchange IS_ALPHA(ch) to  A <= ch <= Z\n(very slight optimization, only uppercase will match in switch)\n\nPR-URL: https://github.com/nodejs/http-parser/pull/323\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "misery": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/0852bea482e0842b0445c14b19dc9b318a6c4eba", "message": "Fix FALLTHROUGH warning in switch of GCC7\n\nPR-URL: https://github.com/nodejs/http-parser/pull/357\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gatzka": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/291a32cc51698318adfbe81ca24e77da1a735365", "message": "Include stddef.h instead of sys/types.h.\n\nThe include is required for type size_t. stddef.h should be available\non every platform, sys/types.h is not.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/360\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fake666": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/3b0da34d83e4eace29cc49e3b659bf630537b94c", "message": "Tolerate non-compliant status line responses\n\n- original fix is from daeon: https://github.com/daeon/http-parser/\n\n  \"Tolerate web servers which do not return a status message in the\n   return response.\n\n   I have noticed this usse on several websites such downloads from\n   mediafire.com\"\n\n- original pull request: https://github.com/nodejs/http-parser/pull/254\n- i merely added the status_cb_called unit test check, there already\n  is a test that triggers this without the patch (a 301 without a\n  reason phrase).\n\nPR-URL: https://github.com/nodejs/http-parser/pull/367\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mscdex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/9f489a474d5761ca5715f1e13a3d39023a656424", "message": "parser: fix HTTP version parsing\n\nOnly one digit is allowed for the major version and only one is\nallowed for the minor version according to RFC 7230.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/366\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "npmccallum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/335850f6b868d3411968cbf5a4d59fe619dee36f", "message": "parser: HTTP_STATUS_MAP(XX) and enum http_status\n\nThis patch provides an enum for the standardized HTTP status codes.\nAdditionally, the HTTP_STATUS_MAP(XX) can be used for other purposes as\nwell, such as code-to-name lookups and code-based switch statements.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/337\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "indutny": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/feae95a3a69f111bc1897b9048d9acbc290992f9", "message": "Bump version to 2.7.1"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/9b0d5b33ebdaacff1dadd06bad4e198b11ff880e", "message": "Bump version to 2.6.0"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/04d28a7377c03bac762e44927c234d9b3d58462a", "message": "parser: returning 2 from on_headers_complete\n\nReturning `2` from on_headers_complete will tell parser that it\nshould not expect neither a body nor any futher responses on\nthis connection. This is useful for handling responses to a\nCONNECT request which may not contain `Upgrade` or\n`Connection: upgrade` headers.\n\nSee: https://github.com/nodejs/node/pull/6198\nPR-URL: https://github.com/nodejs/http-parser/pull/299\nReviewed-By: Brian White <mscdex@mscdex.net>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/777ba4ededf53040f4c5cc5d53f26201e705ebaf", "message": "src: introduce `http_parser_url_init`\n\nThe struct must be zero-initialized, but this wasn't explicitly stated\nanywhere in headers. Introduce `http_parser_url_init` API method that\nwill do it.\n\nFixes: #209\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nPR-URL: https://github.com/nodejs/http-parser/pull/225"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/295", "title": "http_parser: skip lws/rws in header field", "body": "Skip whitespace from the left and the right sides of the header field.\n\nSee: https://github.com/nodejs/node/pull/5844\n\ncc @jasnell \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guoxiao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b2cc8e49f39277b197c6f3592708309ee78c015e", "message": "test: remove \u2018nread\u2019, which is not used\n\nPR-URL: https://github.com/nodejs/http-parser/pull/300\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oldratlee": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/737627b2b232f6a47dffca7ea17a8e3c3e2231a0", "message": "readme: improve format, fix code syntax\n\nPR-URL: https://github.com/nodejs/http-parser/pull/305\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbergstroem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/5651aea80472bf9a1f7d2718c78c0de08984aa1f", "message": "test: add a test for for obstext characters (> 0x80)\n\nCreate a test added for nodejs in nodejs/node@954a4b4b.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/dbcda1961c25a4f945a55da8e9dd3af6e4df65f0", "message": "Update http-parser to 2.6.2\n\nFixes a header parsing bug for obstext characters (> 0x80)\n\nAdaption of nodejs/node@954a4b4b:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Mon Feb 15 09:40:58 2016 -0800\n\n    deps: update to http-parser 2.6.2\n\n    Fixes http-parser regression with IS_HEADER_CHAR check\n    Add test case for obstext characters (> 0x80) is header\n\n    PR-URL: https://github.com/nodejs/node/pull/5237\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Myles Borins <myles.borins@gmail.com>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/678a9e21f11e5ea93e5e17a2302390f88a6a8c46", "message": "test: Assert against correct error messages\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228", "body": "Hey, any reason you didn't merge my commit (http://github.com/jbergstroem/http-parser/commit/4c521a67fe5eaaee539cb68a4b66c8367afcc4fd)? Let me know if I'm doing something wrong and i'll try to fix it.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dolmen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd65b0fbbdb405425a14d0e49f5366667550b1c2", "message": "src: refactor method parsing\n\nUse a switch and a macro to branch parsing of HTTP methods.\nEasier to read and much shorter.\n\nIn this commit, the order of branches dispatching is the same as in the\noriginal code, to ease review. Reordering branches by descending\nfrequency will improve speed too.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/273\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasnell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/e2e467b91262246b339fb3d80c8408d498b4a43b", "message": "Update http-parser to 2.6.1\n\nIncludes parsing improvements to ensure closer HTTP spec conformance\n\nAdaption of nodejs/node@4f4c8ab3b4cea246d2ece6ca006fe280241d84a4:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Wed Feb 3 17:28:48 2016 -0800\n\n    deps: update http-parser to version 2.6.1\n\n    includes parsing improvements to ensure closer HTTP spec conformance\n\n    PR-URL: https://github.com/nodejs/node-private/pull/26\n    Reviewed-By: Rod Vagg <r@va.gg>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/bee4817ebea0eaa592143c7825f5c96f040c84e4", "message": "Bump version to 2.6.0"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/326", "title": "add settings flags, refactor lenient_http_headers setting", "body": "A previous change during a security fix added the ability to set a `lenient_http_headers` flag on the HTTP Parser instance. The way it was done was a bit of a hack at the time in order to avoid an ABI breaking change. This PR adds a new `uint32_t` flags field to `http_parser_settings` in order to provide a more robust and correct way of passing these kinds of settings into a parser instance.\n\n_Note_: This is an ABI change so it would require a semver-major bump\n\n/cc @indutny \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/4e382f96e6d3321538a78f2c7f9506d4e79b08d6", "message": "readme: fix build status badge\n\nPR-URL: https://github.com/nodejs/http-parser/pull/277\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lberezy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/483eca7989d655b34b01f65a8faad82ddb79813c", "message": "doc: updated README.md to include multi-threading example\n\nIncluded information and example on communicating data between\nthread local and callback scopes. This shows how http-parser\ncan be used in a multi-threaded context.\n\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nPR-URL: https://github.com/nodejs/http-parser/pull/256"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DCjanus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/388", "title": "fix typo", "body": "from 'futher' to 'further'\r\n\r\n-----------------\r\n\r\nI'm not a native English speaker, maybe there is a word 'futher', but I can't find it by Google.\r\nIf I'm Wrong, forget me\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nibaozhu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/379", "title": "install `package'", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simsong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/378", "title": "add .deps and .dirstamp to .gitignore", "body": "I use http-parser in another project as a submodule. When I run autotools configure, it creates in the http-parser sub directory a directory and a file:\r\n\r\n```\r\n[user@localhost http-parser]$ git status\r\nHEAD detached from 8d9e5db\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\t.deps/\r\n\t.dirstamp\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n[user@localhost http-parser]$\r\n```\r\n\r\nIt would be super-nice to have `git status` **not** warn me about these two files generated by autotools.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "izaid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/377", "title": "[WIP] CMake Support", "body": "CMake support has been requested a few times, and there has been at least one PR about it. This is a new attempt at it -- I think it is relatively simple. Happy to build it out more if that is what is needed.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flandr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/374", "title": "Add basic CMake support", "body": "Only supports building the main library target (static and dynamic).\r\n\r\nRefs #257", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alperakcan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/369", "title": "ignore headers transfer_encoding_chunked and content_length to work with http assemblers.", "body": "added ignore_header_transfer_encodig_chunked and ignore_header_content_length to settings.\r\n\r\nignore_header_content_length:\r\n  useful if body length and content length does not match. happens with owa servers. or working with pre http assemblers that unzips compressed content without changing content-length.\r\n\r\nignore_header_transfer_encodig_chunked:\r\n  useful when working with pre-http assemblers which assembles chunked content into one http packet without changing transfer-encoding field.\r\n\r\nmay be useful for someone.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kunalspathak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/352", "title": "http header parsing", "body": "http_parser along with other http request information supplies header\r\nfields to the consumer. In `node` case, it creates a new `JSString`\r\nof these header fields which involves memory allocation. If parser\r\nkeeps track of headers while parsing and return a unique id to `node`\r\nthat help distinguish the known header name, `node` don't have to\r\nallocate for known headers and it can use the pre-created `JSString`\r\nfor the header fields. See discussion in https://github.com/nodejs/node/issues/10930\r\n\r\nThe approach I have taken is while scanning the request, keep track\r\nof known headers and update the `header_state` accordingly. `node` or\r\nany consumer can consume the `header_state` information and decide\r\nto use cached http header field instead of creating new string. I try to\r\nmatch traditional cases http header. e.g. In Content-Type 'C' and 'T' has\r\nto be upper case for the header to qualify for traditional cased header.\r\nI use `traditional_case_http_headers` to track this information.\r\n\r\nPerformance is flat for node's http benchmark except bench-parse where\r\nsometimes I noticed 5% regression. I am not sure if it was due to noise.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akatrevorjay": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/351", "title": "Cython bindings -- Interested?", "body": "Hi, a long time ago I wrote Cython bindings for this. If I clean it up are you interested in merging?\r\n\r\n(notably the build process and add some docs)\r\n\r\nTy,\r\nTrevor", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roman-neuhauser": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/348", "title": "Unbreak `make install` in BSDs", "body": "I've only tested this in freebsd-12.0 where the changes get me from syntax errors in the Makefile to passing `port test` with flying colors.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shindo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/347", "title": "parser: fix handling of newlines before HTTP responses", "body": "This diff fixes ignoring of CR and LF chars received before HTTP response's start line the same way as they are handled with HTTP_REQUEST and HTTP_BOTH parser types.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdamMajer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/346", "title": "makefile: Flexible install fixes", "body": "Fixing three Makefile related things,\r\n\r\n1. LIBDIR should be configurable. INCLUDEDIR as well\r\n2. fix SONAME so it represents actual ABI compatibility\r\n3. symlinks should not have absolute paths\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shekhei": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/342", "title": "Various optimizations", "body": "Hi, basically I was just messing around and did some benchmarking, found some interesting things, so I made some changes. Mostly to do with removing some of the branches and created a SIMD version of finding CRLF that doesn't need to walk the whole payload twice(worst case)\n\nBelow are the benchmark results\n### OSX (el capitan, mbp 13\" early 2015, 3.1 GHz Intel Core i7)\n#### Clang\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 5.761632 | 867809.687500 | 5.104409 | 979545.312500 | 11.4069 |\n| 5.769115 | 866684.062500 | 5.104001 | 979623.625000 | 11.5289 |\n| 5.803461 | 861554.875000 | 5.086198 | 983052.625000 | 12.3592 |\n| 5.779534 | 865121.687500 | 5.082990 | 983672.937500 | 12.0519 |\n| 5.762670 | 867653.375000 | 5.092542 | 981827.875000 | 11.6288 |\n#### GCC 4.9\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 4.297466 | 1163476.375000 | 3.787979 | 1319965.000000 | 11.8555 |\n| 4.159397 | 1202097.250000 | 3.774015 | 1324849.000000 | 9.26533 |\n| 4.230322 | 1181943.125000 | 3.788900 | 1319644.250000 | 10.4347 |\n| 4.214539 | 1186369.375000 | 3.772407 | 1325413.750000 | 10.4906 |\n| 4.162938 | 1201074.750000 | 3.763118 | 1328685.375000 | 9.6042 |\n### ubuntu 14.04 ( Intel Core i7-6700 @ 3.40GHz )\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 3.186016 | 1569358.000000 | 2.815905 | 1775628.000000 | 11.6167 |\n| 3.186449 | 1569144.875000 | 2.846761 | 1756382.125000 | 10.6604 |\n| 3.190864 | 1566973.625000 | 2.877822 | 1737425.125000 | 9.81057 |\n| 3.183230 | 1570731.625000 | 2.813425 | 1777193.250000 | 11.6173 |\n| 3.190520 | 1567142.625000 | 2.849443 | 1754728.875000 | 10.6903 |\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jlesk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/334", "title": "build: vms and os400 support", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bc-lee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/296", "title": "Fix: suppress warning C4244 on MSVC", "body": "MSVC 2015 gives some warnings on http_parser.c with \n\n> warning C4244: '=' : conversion from 'int' to 'uint16_t', possible loss of data\n> It will supress this warning.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "claudix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/294", "title": "Added support for compiling on MinGW platform", "body": "Added rules to compile on MinGW platforms (Microsoft Windows environments):\n- Use 'gcc' as compiler.\n- Generate DLL file when compiling the library.\n- Disable -fPIC when compiling the library (on MinGW platforms all code is already position independent and setting this flag issues an error).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RandoMan70": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/285", "title": "Introduce raw data callbacks", "body": "These callbacks can be used when developing transparent HTTP traffic analysis and filtering. \nThe main goal of it is to handle transmitted data as-is, but having ability to distinguish data between headers, bodies and different requests.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/258", "title": "Implement on_header_raw and on_body_raw callbacks", "body": "This patch adds on_header_raw and on_body_raw callbacks. \nWhen parser finish processing of new portion of data (or when it switches between header/body state) it run these callbacks, attaching exact stream data.\nThese callbacks called after usual header and body callbacks.\n\nPatch contains bug: after parsing error detected it still can call raw callback, so we need to check error status of a parser inside raw callbacks.\n\nPatch based at old revision, so we need to dig into parser logic again.\nBase revision: 959f4cb12748ea3aa2c4ec3183ff4acbf0fd222f\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbargren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/276", "title": "Add support for digits, '+', '-', and '.' to the scheme of a URI", "body": "Addresses #275.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "staticfloat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/264", "title": "Make library symlinks relative", "body": "This allows distributions to be more easily relocatable, such as when bottling this library in Homebrew.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erikjohnston": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/243", "title": "Allow repeatable calls to 'make install'.", "body": "Currently if `make install` is invoked multiple times it fails due to it trying to recreate the `libhttp_parser.so` symlink. \n\nAdding the `-f` flag to the `ln` invocations fixes this, but will change the default http-parser used to the newly installed version if there are multiple versions installed. I _think_ this is what we want to do anyway since we are clobbering any existing `http-parser.h` during install, so not repointing the symlink would result in a mismatch between the default library and header versions.\n\nThe alternative would be to version `http-parser.h` and add a symlink for it, while trying to ensure we always update both symlinks atomically.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThisIsMissEm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/214", "title": "Added support for SOURCE", "body": "As per tweets: https://twitter.com/indutny/status/557499042243289088\n\nIt seems new handling for upgrade was added at some point, which makes the tests break. Unfortunately I don't have time to work out how to make the tests pass again.\n\nSOURCE should essentially be handled like Upgrade, I believe, and switched to data/tcp mode after parsing headers.\n\n/cc @indutny @bnoordhuis \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacquesg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/184", "title": "Solaris doesn't necessarily have stdint.h, use inttypes.h", "body": "Solaris doesn't necessarily have `stdint.h`, it's more portable to use `sys/inttypes.h`.\n\nSee:\nhttp://wiki.opencsw.org/porting-faq#toc1\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vincentbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/159", "title": "Add two hooks to be executed when a chunk is downloaded.", "body": "One hook is executed right before receiving a new chunk. The second\none is executed just after. parsertrace.c is updated to use those\nhooks for display.\n\nI am using this for experimentation with rendering. This is more reliable than looking at timestamps to know where chunks start and end.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078", "body": "Yes this is still true. Annoying but it make a lot of other things much simpler (i.e. the http_parser does not have to make decisions about how how you might pre-allocate this)\n\nHere are two examples\n1) http://github.com/ry/http-parser/blob/37a0ff8928fb0d83cec0d0d8909c5a4abcd221af/test.c#L403 \n2) http://github.com/ry/node/blob/842eaf446d2fdcb33b296c67c911c32a0dabc747/src/http.js#L284 (in javascript, but it's just a thin abstraction over the parser callback)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080", "body": "Here is an untested code snippit which more directly answers your question: http://gist.github.com/155877\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082", "body": "I would gladly accept a patch for better documentation of this tricky part of the library. :)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067", "body": "fixed in b5b116e59ea3a22b4898705f30c5b0ffe7ce1e7c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182", "body": "sorry, i guess you're the same that reported the news.ycombinator.org bug in node. i just realized this is the same error. the fix I gave doesn't solve the problem.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421", "body": "It should.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623", "body": "Please show an example where it is not called. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408", "body": "You're not making the call for EOF. Do this:\n    http_parser_execute(&parser, settings, response, strlen(response));\n    http_parser_execute(&parser, settings, NULL, 0);\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062", "body": "Your response is missing the last `\\r\\n`. Chunked messages must be terminated by `0\\r\\n\\r\\n` \nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1\n\nAre you seeing a response like this in real-life?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512", "body": "thanks for the note. i added some text in 69cf8d8da9ba0907192f26239eb41223871dd46c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346", "body": "you can see where it failed by looking at the result of http_parser_execute()\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361", "body": "yes, but it exits immediately if there was an error. so if http_parser_execute() < sizeof(buf) then there was an error (or an Upgrade). You can use this to point out where the error was - which is perhaps more useful than an error code.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407", "body": "You can communicate your state (or what action to take) to the code calling `http_parser_execute()` through your `void *data` object. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479", "body": "Can you please provide a dump of such a request?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901", "body": "closing.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935", "body": "Fixed in 4cf39fd2fa8d1b52338ad3c4dd9ae6b3f32d72f4.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375", "body": "Thanks for the report. Fixed in 120f0f6e09773dbe003841b5b339f9284dd63aad.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885", "body": "thanks. comitted in a66c61c190a90653da3fd7c1443a1a7329472567\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139", "body": "There is no reason phrase callback.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181", "body": "Currently there is no way. The status code can is set in the parser structure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949", "body": "no, unfortunately not. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277", "body": "no\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595", "body": "CONNECT too. thanks\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267", "body": "cliff suggests the name 'lowcase' should change. i agree. can't think of anything appropriate right now though.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239", "body": "Sorry - it got lost in my inbox.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419", "body": "nread is just for the header\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793", "body": "why unsigned? just to save a bit?\n\nforgive my ignorance but what is `(uint64_t) -1` ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913", "body": "can you use `ULLONG_MAX` instead?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969", "body": "that's fine - i just want it for clarity\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "suhoparov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504", "body": "And in what sense not to call message_complete ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150", "body": "int message_complete_cb(http_parser \\* p) {\n    puts(**FUNCTION**);\n    return 0;\n}\n\n```\nconst char * response = \n    \"HTTP/1.1 200 OK\\r\\n\"\n    \"Date: Fri, 31 Dec 1999 23:59:59 GMT\\r\\n\"\n    \"Content-Type: text/plain\\r\\n\"\n    \"Transfer-Encoding: chunked\\r\\n\"\n    \"\\r\\n\"\n    \"1a\\r\\n\"\n    \"abcdefghijklmnopqrstuvwxyz\\r\\n\"\n    \"10\\r\\n\"\n    \"1234567890abcdef\\r\\n\"\n    \"0\\r\\n\";\n```\n\nmain() ...\n    http_parser parser;\n    http_parser_init(&parser, HTTP_RESPONSE);\n\n```\nhttp_parser_settings settings;\nsettings.on_body = data_cb;\nsettings.on_message_begin = message_cb;\nsettings.on_header_field = header_field_cb;\nsettings.on_header_value = header_value_cb;\nsettings.on_headers_complete = headers_complete_cb;\nsettings.on_message_complete = message_complete_cb;\n\nhttp_parser_execute(&parser, settings, response, strlen(response));\n```\n\noutput: calls all callback unless \"message_complete_cb\".\ncode is master branch on VC++ 7.1\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456", "body": "the same, message_complete_callback doesn't call\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180", "body": "Sorry, yes it invalid response, with CRLF good works. No in real-life, this my design)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183", "body": "closed\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353", "body": "wtf, that was fast. Doesn't `http_parser_execute` return the number of bytes parsed?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390", "body": "hrm, I'd like to use the return values for indicating the reason why I made http-parser exit; for example after I got the request URL and figured out I want to answer with HTTP 404, it would be comfortable to simply return `404`.\n\nIf I manually break parsing, I've got a reason to and I most probably want to communicate that reason back to the code that called `http_parser_execute` so that code can decide what steps to take next.\n\nSo please add this feature. :-)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ptlomholt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507", "body": "A sample request from http://muffin.doit.org/docs/rfc/tunneling_ssl.html:\n\nCONNECT home.netscape.com:443 HTTP/1.0\nUser-agent: Mozilla/1.1N\nProxy-authorization: basic aGVsbG86d29ybGQ=\n\nI can get a dump, but from the sample it is pretty obvious what the problem is...\n\nThe parser fails when it encounters the first period in the hostname as it assumes it is parsing the schema, not the hostname!\nI guess an easy fix would be to skip directly to _s_req_host state_ instead of _s_req_schema_ iff the request is a CONNECT...\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jterrace": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092", "body": "Fixed in d0dfc987732a25ee1f2236526e2801f06678cda4\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402", "body": "Why did you change nread back to 32-bit? Isn't it possible for a response to be > 4GB? I realize it's rare, but still possible?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "arhrodriguez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mnot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895", "body": "Just FYI, HTTPbis is discouraging the use of multi-line headers; from http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-3.2 : \n\n   Historically, HTTP header field values could be extended over\n   multiple lines by preceding each extra line with at least one space\n   or horizontal tab character (line folding).  This specification\n   deprecates such line folding except within the message/http media\n   type (Section 10.3.1).  HTTP/1.1 senders MUST NOT produce messages\n   that include line folding (i.e., that contain any field-content that\n   matches the obs-fold rule) unless the message is intended for\n   packaging within the message/http media type.  HTTP/1.1 recipients\n   SHOULD accept line folding and replace any embedded obs-fold\n   whitespace with a single SP prior to interpreting the field value or\n   forwarding the message downstream.\n\nI.e., the parser still SHOULD be able to handle them, but the spec now admits they're not widely supported.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909", "body": "This appears to be caused by this:\n          if (c < 'a' || 'z' < c) goto error;\n\nwhich rejects non-alphabetic first characters. The BNF for the field name in HTTP is 'token' which accepts a much broader range of characters (see http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-1.2.2).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "temoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796", "body": "I think that 'ascii*'\nallows matching\nHTTP/1.1 301 \\r\\n\\r\\n  (space between 301 and CRLF)\neither. And if i understand correctly, it would trigger response phrase callback with empty phrase.\n\nIs that proper?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180", "body": "How to read reason phrase then?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133", "body": "And new parser will not support custom methods?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "erichocean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944", "body": "Happy to see you going by hand, but the Ragel parser had the advantage of the graphical Dot state machine output. Are you maintaing a similar FSM for this version, and if so, would you please copy the .Dot file into the repository? Thanks! \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cmlenz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594", "body": "Afaik, TRACE and OPTIONS aren't WebDAV methods, but defined by the HTTP/1.1 spec.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lericson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707", "body": "Heh, funny how it's the exact same modifications though - one huge coincidence right there ;-) I mean especially what with the `CC?=gcc` part, that's not even necessary as `CC` is set by default in a Makefile.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ignacio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521", "body": "These typedefs don't work with Mingw. #ifdef _WIN32 should check for mingw and/or cygwin\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pgriess": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306", "body": "Thanks. I was just about to submit a patch for this ;)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487", "body": "Yeah, it's just request_url now. Check out the discussion on this pull request for the justification at ry/http-parser#54.\n\nWhat were you using the callbacks for? If this is node-land, can you just use the the 'url' module to parse what you want?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227", "body": "I believe we need to be doing this status code check for HTTP/1.0 as well.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407", "body": "Yeah, if the client and server both agree on keep-alive (i.e. by both sending \"Connection: keep-alive\" headers), we're dealing with the same situation as HTTP/1.1: we have a bytestream that contains a response with no body followed by another response. The case we're dealing with here is not that we can't determine the response length -- it's that we know that the length is 0.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088", "body": "Accepting any non-CR/LF character is a bit more liberal than the RFC allows, but I don't really think it's a problem. Also, this doesn't handle LWS properly (we can get a CRLF followed by some number of HTs or SPs and continue the reason). Check out the way the s_header_value_lws state works.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931", "body": "Yeah, agreed that we should be validating that.\n\nHowever, this isn't a regression. I'll file a bug for this. We have similar problems with handling empty hosts as well, both of which probably need a new state to indicate the beginning of the entity so that we can verify that there is at least one character.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628", "body": "Filed #74 for this.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456", "body": "so it's just request_url now? I'm using the others and wouldn't mind them staying so I dont have to re-parse them in c land, but it's not a show stopper I guess, pretty simple to delimit\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563", "body": "nah it's a none-node related C project, thanks I'll check it out!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "koichik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937", "body": "@pgriess - With HTTP/1.0 or earlier, Keep-Alive is disabled by default. Therefore, I think that we do not need it. Keep-Alive is used if and only if the response has `Connection: Keep-Alive` (or legacy `Keep-Alive:`, but http-parser does not seem to support it).\n\n[EDIT] I may understand what you mean. HTTP/1.0 server sends `Connection: Keep-Alive`, but the body length may be unable to be determined.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dhruvbird": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kolbyjack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414", "body": "I think you need to goto reexecute_byte when switching to a request here in case ch is a space\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429", "body": "This will still fail on GENERICLONGMETHOD, since that 'L' isn't a space, it'll fall through to where it still indexes method_strings\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498", "body": "Since it's walking through the full HTTP now, would it be better to deal with s_req_or_resp as a single state kind of like the request methods?  Use a string \"HTTP\" and parser->index?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cmr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440", "body": "Herp, I knew there was a reason I initially had a nested if.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216", "body": "That would simplify the code a lot, great suggestion (thanks for all the help!)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "postmodern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630", "body": "Correct. This could be a function, but I choose a constant variable since accessing them via FFI is cheaper than function calls.\n\nIn http-parser 2.0, `HTTP_PARSER_DEBUG` can dramatically change the layout of `http_parser`, so I need to check if debug was enabled when defining my own [FFI Struct](https://github.com/postmodern/ffi-http-parser/blob/master/lib/ffi/http/parser/instance.rb#L11-33).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}, "3": {"ZaMaZaN4iK": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/404", "title": "Conan package for http-parser", "body": "Hello,\r\nDo you know about [Conan](https://github.com/conan-io/conan)?\r\n[Conan](http://docs.conan.io/en/latest/) is modern dependency manager for C++. And will be great if your library will be available via package manager for other developers.\r\n\r\n[Here](https://github.com/bincrafters/conan-templates) you can find example, how you can create package for the library. \r\n\r\nIf you have any questions, just ask :-)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samoconnor": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/403", "title": "Test \"CONNECT_WITH_BODY_REQUEST\" maybe worng", "body": "See: https://github.com/nodejs/http-parser/pull/235#issuecomment-356903686\r\n\r\nThe `CONNECT_WITH_BODY_REQUEST` test case input has `Content-Length: 10` and a body `\"blarfcicle\"`, but the test expects [`.body= \"\"`](https://github.com/nodejs/http-parser/blob/master/test.c#L1102) !\r\n\r\n[The RFC says](https://tools.ietf.org/html/rfc7230#section-3.3):\r\n> _The presence of a message body in a request is signaled by a\r\n    Content-Length or Transfer-Encoding header field.  Request message\r\n   framing is independent of method semantics, even if the method does\r\n   not define any use for a message body._\r\n\r\ni.e. A request that says `Content-Length: 10` has a 10-byte body irrespective of the method being `CONNECT`.\r\n\r\nThe `CONNECT` scemantics are defined here: [RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6). It talks about the client ignoring *responses( with Content-Length in, however, that is not relevant to this test *request* test case.\r\n\r\n>    _A server MUST NOT send any Transfer-Encoding or Content-Length header\r\n   fields in a 2xx (Successful) response to CONNECT.  A client MUST\r\n   ignore any Content-Length or Transfer-Encoding header fields received\r\n   in a successful response to CONNECT._\r\n\r\n[RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6) goes on to say that a payload on a `CONNECT` request has no defined meaning, but it does not disallow it:\r\n\r\n>  _A payload within a CONNECT request message has no defined semantics;\r\n   sending a payload body on a CONNECT request might cause some existing\r\n   implementations to reject the request._\r\n\r\nSo, this line may be wrong: https://github.com/nodejs/http-parser/pull/235/files#diff-5c62f371bf37583234d2462ad49ce33dR1837", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397", "title": "typos in http-parser/test.c", "body": "https://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L156\r\n\r\nhttps://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L374\r\n\r\nhttps://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md ?", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tianchao-haohan": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/401", "title": "Need to consider the noBody situation for HEAD method", "body": "Here is the diff code:\r\n```\r\n+++ b/src/3rd_party/http_parser/http_parser.c\r\n@@ -1783,8 +1783,9 @@ reexecute:\r\n\r\n         hasBody = parser->flags & F_CHUNKED ||\r\n           (parser->content_length > 0 && parser->content_length != ULLONG_MAX);\r\n-        if (parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n-                                (parser->flags & F_SKIPBODY) || !hasBody)) {\r\n+        if ((parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n+                                (parser->flags & F_SKIPBODY) || !hasBody))\r\n+                                || parser->method == HTTP_HEAD) {\r\n           /* Exit, the rest of the message is in a different protocol. */\r\n           UPDATE_STATE(NEW_MESSAGE());\r\n           CALLBACK_NOTIFY(message_complete);\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maclover7": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/400", "title": "Group related tests into files", "body": "`test.c` is over four thousand lines long and is getting a little hard to parse... any objections to moving some related tests into separate files in a `test/` directory?\r\n\r\n@indutny @bnoordhuis ", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399", "title": "Convert test suite to TAP output", "body": "Right now the test suite has a proprietary/unique way of outputting the status of tests. It would be better if it used something like TAP, which is already used by nodejs/node, libuv/libuv, and other projects. I'm going to try and take a look at this, but someone else can give it a shot if they want :)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b11de0f5c65bcc1b906f85f4df58883b0c133e7b", "message": "doc: standardize project name\n\nPR-URL: https://github.com/nodejs/http-parser/pull/398\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tduehr": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/394", "title": "New release needed: 2.7.1 http_parser.h does not contain HTTP_STATUS_MAP", "body": "This is needed by tang.\r\n\r\nsee also: https://github.com/latchset/tang/issues/19", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tatsuhiro-t": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/386", "title": "HTTP/0.9 does not have header fields", "body": "According to https://www.w3.org/Protocols/HTTP/AsImplemented.html, HTTP/0.9 does not have header fields, and single CR + LF pair (or just LF) after a request line signals the end of request.\r\nBut current http-parser waits for 2nd CR + LF pair.\r\n\r\nSee how apache works:\r\n\r\n```\r\n$ telnet 127.0.0.1 80\r\nTrying 127.0.0.1...\r\nConnected to 127.0.0.1.\r\nEscape character is '^]'.\r\nGET /\r\n<html><body><h1>It works!</h1>\r\n<p>This is the default web page for this server.</p>\r\n<p>The web server software is running but no content has been added, yet.</p>\r\n</body></html>\r\nConnection closed by foreign host.\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/311", "title": "Allow non-standard HTTP method", "body": "This change adds non-standard HTTP method support.  We added new\ncallback on_method of type http_data_cb, which notifies incoming\nmethod.  For non-standard HTTP method, method field in struct\nhttp_parser becomes HTTP_METHOD_UNKNOWN.\n\nThe non-standard HTTP method is disabled by default, and must be\nexplicitly enabled by giving -DHTTP_PARSER_METHOD_CB=1 on build time.\nThis is for backward compatibility; because non-standard HTTP method\nis now accepted rather than rejected.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TechnikEmpire": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/384", "title": "When parsing response that omits status message text, on_status is never called", "body": "On status callback does not get invoked when we're dealing with a web server that omits the status text from the status line. Examples of servers doing this are kijiji.\r\n\r\nExample from in the wild:\r\n```\r\nGET \r\nhttps://www.kijiji.ca/h-lloydminster-ab/1700095\r\n\r\nStatus: HTTP/1.1 200\r\n```\r\n\r\nServer is advertised as being nginx.\r\n\r\nWhen parsing the response, `on_status` will never be called. Not sure if this is intended or not, I started looking into the spec for this and didn't see any `MUST`'s with regards to the status text. I came up with a solution to work around this personally so I don't care anymore, just FYI.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sachinHPrabhu": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/382", "title": "Request for information about the schedule of next release", "body": "The master branch of the http-parser project already has a fix that I am interested in.\r\n\r\nTolerate non-compliant status line responses \r\nhttps://github.com/nodejs/http-parser/commit/3b0da34d83e4eace29cc49e3b659bf630537b94c\r\n\r\nHence I wished to know if there is any schedule for next release of the http-parser.\r\n\r\nThanking You.\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WilCrofter": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/381", "title": "Request new release: v2.7.1, does not build with gcc 7.1.1 due to FALLTHROUGH issue", "body": "Although the FALLTHROUGH issue was fixed in [0852bea](https://github.com/nodejs/http-parser/commit/0852bea482e0842b0445c14b19dc9b318a6c4eba) the last release predates the fix.\r\n\r\nv2.7.1 is currently a dependency of [JuliaWeb/HttpParser.jl](https://github.com/JuliaWeb/HttpParser.jl) which will, of course, not build with current versions of gcc.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rnburn": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/380", "title": "Makefile is broken for OS X", "body": "If you try to install on OS X, you'll get this error\r\n```\r\ncc  -I. -DHTTP_PARSER_STRICT=0  -Wall -Wextra -Werror -O3  -fPIC -c http_parser.c -o libhttp_parser.o\r\ncc  -shared -o libhttp_parser.2.7.1.dylib libhttp_parser.o\r\ninstall -D  http_parser.h /usr/local/include/http_parser.h\r\ninstall: illegal option -- D\r\nusage: install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 file2\r\n       install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 ... fileN directory\r\n       install -d [-v] [-g group] [-m mode] [-o owner] directory ...\r\nmake: *** [install] Error 64\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RekGRpth": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/371", "title": "http_status_str", "body": "```c\r\nconst char *http_status_str(enum http_status s) {\r\n    switch (s) {\r\n#define XX(num, name, string) case HTTP_STATUS_##name: return #num \" \" #string;\r\n    HTTP_STATUS_MAP(XX)\r\n#undef XX\r\n        default: return \"<unknown>\";\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "povilasb": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/362", "title": "How to disable automatic chunks decoding?", "body": "> The parser decodes the transfer-encoding for both requests and responses transparently. That is, a chunked encoding is decoded before being sent to the on_body callback.\r\n\r\nIs it possible to configure parser not to decode chunked encoding?\r\nI would like to receive chunks in `on_body` unmodified.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinniefalco": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/319", "title": "http-parser fails to detect chunked encoding at the end of a list", "body": "Given the header:\n\n```\nTransfer-Encoding: gzip, chunked\\r\\n\n```\n\nThe parser will not set chunked encoding when it should:\nhttps://tools.ietf.org/html/rfc7230#section-3.3.1\n\nEncodings are applied left to right and removed from right to left. If the parser encounters the `chunked` token as the last item when the Transfer-Encoding value is a comma separated list, it should consider the message body to be chunk encoded.\n\nI haven't actually tried this so I might be wrong but I see no code for finding a comma in Transfer-Encoding. However, the parser DOES handle comma separated lists correctly for the Connection header.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318", "title": "http-parser impossible condition check", "body": "Consider this code (from http_parser.c):\n\n```\n            /* Transfer-Encoding: chunked */\n            case h_matching_transfer_encoding_chunked:\n              parser->index++;\n              if (parser->index > sizeof(CHUNKED)-1\n                  || c != CHUNKED[parser->index]) {\n                h_state = h_general;\n              } else if (parser->index == sizeof(CHUNKED)-2) {\n                h_state = h_transfer_encoding_chunked;\n              }\n              break;\n```\n\nIt seems `parser->index > sizeof(CHUNKED)-1` can never be true, because if the token being checked matches, we would set `h_state = h_transfer_encoding_chunked` before `parser->index` can ever exceed `sizeof(CHUNKED)-2`. And if the token being checked doesn't match, then we will set `h_state = h_general` before `parser->index` can exceed `sizeof(CHUNKED)-1`.\n\nI haven't actually tested this so I am not 100% sure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grobian": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd3850c048f7a69db2f066d267797fbc3680d9a0", "message": "Makefile: set install_name on macos\n\ninstall_name on Mach-O is similar to SONAME on ELF, except that it needs\na full path instead of just the basename.\n\nFixes: https://github.com/nodejs/http-parser/issues/356\nPR-URL: https://github.com/nodejs/http-parser/pull/358\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/8ea9532378291b5a9c27ab61bb5cff336cc396b5", "message": "Makefile: set versions for SONAME correctly\n\nRaised in issue #356, reduce version number in SONAME to MAJOR.MINOR.\nWhile at it, create a symlink the from SONAME to the library, instead of\nthe other way around, and add a (standard) unversioned symlink to the\nlibrary to aid the ordinary linking process.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/359\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bnoordhuis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/89279ab6135a63159200928da6e544135bf98301", "message": "Update license boilerplate.\n\nThe boilerplate included attribution to NGINX that created confusion\nbecause NGINX is distributed under a different license (BSD, not MIT.)\n\nTo the best of everyone's knowledge, no actual NGINX code remains.\nRemove the attribution to clear up the confusion.\n\nFixes: https://github.com/nodejs/http-parser/issues/389\nPR-URL: https://github.com/nodejs/http-parser/pull/390\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/05525c5fde1fc562481f6ae08fa7056185325daf", "message": "Ignore Upgrade header outside of 101 response.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/260c52233044cdfad4d84b01d3dba11c2786c794", "message": "Fix typo in test name.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/cacb07d2b4ebcd86fc44fd6ee3f0020125e7a9a6", "message": "parser: fix Content-Length header parsing.\n\nCommit e2e467b (\"Update http-parser to 2.6.1\") enforces that messages\ncontain no more than one Content-Length header but it considers any\nheader that starts with \"Content-Length\" as a duplicate.\n\nFix: https://github.com/nodejs/http-parser/issues/324\nPR-URL: https://github.com/nodejs/http-parser/pull/325\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920", "body": "Trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921", "body": "s/seciont/section/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929", "body": "Maybe avoid the extra level of indentation:\n\n``` c\nif (parser->type != HTTP_RESPONSE) {\n  return 1;\n}\nif (parser->status_code / 100 == 1 || /* etc */\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905", "body": "s/swtich/switch/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906", "body": "Trailing whitespace. Happens in one other place too.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909", "body": "This doesn't catch URLs like `http://example.com:/`, v will be zero. I'm not sure if that's a bug or a feature.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694", "body": "James, isn't that redundant? If the `on_headers_complete` callback hasn't fired yet, you know you're still parsing headers.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760", "body": "You need to preserve `parser->data`.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878", "body": "No, to make it easier to detect overflow (signed overflow is undefined, unsigned overflow is not).\n\n`(uint64_t) -1` is a shorthand / fallback for ULLONG_MAX.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920", "body": "Yes-ish. The reason that I don't is that `<limits.h>` doesn't always define it. I can add something like this:\n\n``` c\n#include <limits.h>\n\n#ifndef ULLONG_MAX\n#define ULLONG_MAX ((uint64_t) -1)\n#endif\n```\n\nYour call.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981", "body": "Cool. Updated in 8f290a5.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578", "body": "Style issue: arguments should line up if split over multiple lines.\n\n``` c\nrv = http_parser_parse_url(test->url,\n                           strlen(test->url),\n                           test->is_connect,\n                           &u);\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125", "body": "Sorry, missed this one. Don't use `u_int`, it's a POSIX-ism.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622", "body": "What's this supposed to do?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624", "body": "Oh, I think I get it - you need to know _if_ this version of http-parser is compiled in debug mode.\n\nI initially read it as a switch to turn on/off debug mode.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064", "body": "Wrap at 80 columns.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069", "body": "Style: too much whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077", "body": "Use NULL, not zero. Signals to the reader that it's a pointer.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083", "body": "Superfluous blank line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089", "body": "Why is that here?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091", "body": "Don't use C++/C99 comments.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ploxiln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/1b79abab34d4763c0467f1173a406ad2817c1635", "message": "simplify parsing M-SEARCH method, group P methods\n\ncan use same switch-lookup for '-' char case\nmove PROPFIND and PURGE to be next to the other P methods\n\nchange IS_ALPHA(ch) to  A <= ch <= Z\n(very slight optimization, only uppercase will match in switch)\n\nPR-URL: https://github.com/nodejs/http-parser/pull/323\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "misery": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/0852bea482e0842b0445c14b19dc9b318a6c4eba", "message": "Fix FALLTHROUGH warning in switch of GCC7\n\nPR-URL: https://github.com/nodejs/http-parser/pull/357\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gatzka": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/291a32cc51698318adfbe81ca24e77da1a735365", "message": "Include stddef.h instead of sys/types.h.\n\nThe include is required for type size_t. stddef.h should be available\non every platform, sys/types.h is not.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/360\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fake666": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/3b0da34d83e4eace29cc49e3b659bf630537b94c", "message": "Tolerate non-compliant status line responses\n\n- original fix is from daeon: https://github.com/daeon/http-parser/\n\n  \"Tolerate web servers which do not return a status message in the\n   return response.\n\n   I have noticed this usse on several websites such downloads from\n   mediafire.com\"\n\n- original pull request: https://github.com/nodejs/http-parser/pull/254\n- i merely added the status_cb_called unit test check, there already\n  is a test that triggers this without the patch (a 301 without a\n  reason phrase).\n\nPR-URL: https://github.com/nodejs/http-parser/pull/367\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mscdex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/9f489a474d5761ca5715f1e13a3d39023a656424", "message": "parser: fix HTTP version parsing\n\nOnly one digit is allowed for the major version and only one is\nallowed for the minor version according to RFC 7230.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/366\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "npmccallum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/335850f6b868d3411968cbf5a4d59fe619dee36f", "message": "parser: HTTP_STATUS_MAP(XX) and enum http_status\n\nThis patch provides an enum for the standardized HTTP status codes.\nAdditionally, the HTTP_STATUS_MAP(XX) can be used for other purposes as\nwell, such as code-to-name lookups and code-based switch statements.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/337\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "indutny": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/feae95a3a69f111bc1897b9048d9acbc290992f9", "message": "Bump version to 2.7.1"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/9b0d5b33ebdaacff1dadd06bad4e198b11ff880e", "message": "Bump version to 2.6.0"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/04d28a7377c03bac762e44927c234d9b3d58462a", "message": "parser: returning 2 from on_headers_complete\n\nReturning `2` from on_headers_complete will tell parser that it\nshould not expect neither a body nor any futher responses on\nthis connection. This is useful for handling responses to a\nCONNECT request which may not contain `Upgrade` or\n`Connection: upgrade` headers.\n\nSee: https://github.com/nodejs/node/pull/6198\nPR-URL: https://github.com/nodejs/http-parser/pull/299\nReviewed-By: Brian White <mscdex@mscdex.net>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/777ba4ededf53040f4c5cc5d53f26201e705ebaf", "message": "src: introduce `http_parser_url_init`\n\nThe struct must be zero-initialized, but this wasn't explicitly stated\nanywhere in headers. Introduce `http_parser_url_init` API method that\nwill do it.\n\nFixes: #209\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nPR-URL: https://github.com/nodejs/http-parser/pull/225"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/295", "title": "http_parser: skip lws/rws in header field", "body": "Skip whitespace from the left and the right sides of the header field.\n\nSee: https://github.com/nodejs/node/pull/5844\n\ncc @jasnell \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guoxiao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b2cc8e49f39277b197c6f3592708309ee78c015e", "message": "test: remove \u2018nread\u2019, which is not used\n\nPR-URL: https://github.com/nodejs/http-parser/pull/300\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oldratlee": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/737627b2b232f6a47dffca7ea17a8e3c3e2231a0", "message": "readme: improve format, fix code syntax\n\nPR-URL: https://github.com/nodejs/http-parser/pull/305\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbergstroem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/5651aea80472bf9a1f7d2718c78c0de08984aa1f", "message": "test: add a test for for obstext characters (> 0x80)\n\nCreate a test added for nodejs in nodejs/node@954a4b4b.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/dbcda1961c25a4f945a55da8e9dd3af6e4df65f0", "message": "Update http-parser to 2.6.2\n\nFixes a header parsing bug for obstext characters (> 0x80)\n\nAdaption of nodejs/node@954a4b4b:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Mon Feb 15 09:40:58 2016 -0800\n\n    deps: update to http-parser 2.6.2\n\n    Fixes http-parser regression with IS_HEADER_CHAR check\n    Add test case for obstext characters (> 0x80) is header\n\n    PR-URL: https://github.com/nodejs/node/pull/5237\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Myles Borins <myles.borins@gmail.com>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/678a9e21f11e5ea93e5e17a2302390f88a6a8c46", "message": "test: Assert against correct error messages\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228", "body": "Hey, any reason you didn't merge my commit (http://github.com/jbergstroem/http-parser/commit/4c521a67fe5eaaee539cb68a4b66c8367afcc4fd)? Let me know if I'm doing something wrong and i'll try to fix it.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dolmen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd65b0fbbdb405425a14d0e49f5366667550b1c2", "message": "src: refactor method parsing\n\nUse a switch and a macro to branch parsing of HTTP methods.\nEasier to read and much shorter.\n\nIn this commit, the order of branches dispatching is the same as in the\noriginal code, to ease review. Reordering branches by descending\nfrequency will improve speed too.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/273\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasnell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/e2e467b91262246b339fb3d80c8408d498b4a43b", "message": "Update http-parser to 2.6.1\n\nIncludes parsing improvements to ensure closer HTTP spec conformance\n\nAdaption of nodejs/node@4f4c8ab3b4cea246d2ece6ca006fe280241d84a4:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Wed Feb 3 17:28:48 2016 -0800\n\n    deps: update http-parser to version 2.6.1\n\n    includes parsing improvements to ensure closer HTTP spec conformance\n\n    PR-URL: https://github.com/nodejs/node-private/pull/26\n    Reviewed-By: Rod Vagg <r@va.gg>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/bee4817ebea0eaa592143c7825f5c96f040c84e4", "message": "Bump version to 2.6.0"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/326", "title": "add settings flags, refactor lenient_http_headers setting", "body": "A previous change during a security fix added the ability to set a `lenient_http_headers` flag on the HTTP Parser instance. The way it was done was a bit of a hack at the time in order to avoid an ABI breaking change. This PR adds a new `uint32_t` flags field to `http_parser_settings` in order to provide a more robust and correct way of passing these kinds of settings into a parser instance.\n\n_Note_: This is an ABI change so it would require a semver-major bump\n\n/cc @indutny \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/4e382f96e6d3321538a78f2c7f9506d4e79b08d6", "message": "readme: fix build status badge\n\nPR-URL: https://github.com/nodejs/http-parser/pull/277\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lberezy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/483eca7989d655b34b01f65a8faad82ddb79813c", "message": "doc: updated README.md to include multi-threading example\n\nIncluded information and example on communicating data between\nthread local and callback scopes. This shows how http-parser\ncan be used in a multi-threaded context.\n\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nPR-URL: https://github.com/nodejs/http-parser/pull/256"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DCjanus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/388", "title": "fix typo", "body": "from 'futher' to 'further'\r\n\r\n-----------------\r\n\r\nI'm not a native English speaker, maybe there is a word 'futher', but I can't find it by Google.\r\nIf I'm Wrong, forget me\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nibaozhu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/379", "title": "install `package'", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simsong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/378", "title": "add .deps and .dirstamp to .gitignore", "body": "I use http-parser in another project as a submodule. When I run autotools configure, it creates in the http-parser sub directory a directory and a file:\r\n\r\n```\r\n[user@localhost http-parser]$ git status\r\nHEAD detached from 8d9e5db\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\t.deps/\r\n\t.dirstamp\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n[user@localhost http-parser]$\r\n```\r\n\r\nIt would be super-nice to have `git status` **not** warn me about these two files generated by autotools.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "izaid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/377", "title": "[WIP] CMake Support", "body": "CMake support has been requested a few times, and there has been at least one PR about it. This is a new attempt at it -- I think it is relatively simple. Happy to build it out more if that is what is needed.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flandr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/374", "title": "Add basic CMake support", "body": "Only supports building the main library target (static and dynamic).\r\n\r\nRefs #257", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alperakcan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/369", "title": "ignore headers transfer_encoding_chunked and content_length to work with http assemblers.", "body": "added ignore_header_transfer_encodig_chunked and ignore_header_content_length to settings.\r\n\r\nignore_header_content_length:\r\n  useful if body length and content length does not match. happens with owa servers. or working with pre http assemblers that unzips compressed content without changing content-length.\r\n\r\nignore_header_transfer_encodig_chunked:\r\n  useful when working with pre-http assemblers which assembles chunked content into one http packet without changing transfer-encoding field.\r\n\r\nmay be useful for someone.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kunalspathak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/352", "title": "http header parsing", "body": "http_parser along with other http request information supplies header\r\nfields to the consumer. In `node` case, it creates a new `JSString`\r\nof these header fields which involves memory allocation. If parser\r\nkeeps track of headers while parsing and return a unique id to `node`\r\nthat help distinguish the known header name, `node` don't have to\r\nallocate for known headers and it can use the pre-created `JSString`\r\nfor the header fields. See discussion in https://github.com/nodejs/node/issues/10930\r\n\r\nThe approach I have taken is while scanning the request, keep track\r\nof known headers and update the `header_state` accordingly. `node` or\r\nany consumer can consume the `header_state` information and decide\r\nto use cached http header field instead of creating new string. I try to\r\nmatch traditional cases http header. e.g. In Content-Type 'C' and 'T' has\r\nto be upper case for the header to qualify for traditional cased header.\r\nI use `traditional_case_http_headers` to track this information.\r\n\r\nPerformance is flat for node's http benchmark except bench-parse where\r\nsometimes I noticed 5% regression. I am not sure if it was due to noise.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akatrevorjay": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/351", "title": "Cython bindings -- Interested?", "body": "Hi, a long time ago I wrote Cython bindings for this. If I clean it up are you interested in merging?\r\n\r\n(notably the build process and add some docs)\r\n\r\nTy,\r\nTrevor", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roman-neuhauser": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/348", "title": "Unbreak `make install` in BSDs", "body": "I've only tested this in freebsd-12.0 where the changes get me from syntax errors in the Makefile to passing `port test` with flying colors.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shindo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/347", "title": "parser: fix handling of newlines before HTTP responses", "body": "This diff fixes ignoring of CR and LF chars received before HTTP response's start line the same way as they are handled with HTTP_REQUEST and HTTP_BOTH parser types.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdamMajer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/346", "title": "makefile: Flexible install fixes", "body": "Fixing three Makefile related things,\r\n\r\n1. LIBDIR should be configurable. INCLUDEDIR as well\r\n2. fix SONAME so it represents actual ABI compatibility\r\n3. symlinks should not have absolute paths\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shekhei": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/342", "title": "Various optimizations", "body": "Hi, basically I was just messing around and did some benchmarking, found some interesting things, so I made some changes. Mostly to do with removing some of the branches and created a SIMD version of finding CRLF that doesn't need to walk the whole payload twice(worst case)\n\nBelow are the benchmark results\n### OSX (el capitan, mbp 13\" early 2015, 3.1 GHz Intel Core i7)\n#### Clang\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 5.761632 | 867809.687500 | 5.104409 | 979545.312500 | 11.4069 |\n| 5.769115 | 866684.062500 | 5.104001 | 979623.625000 | 11.5289 |\n| 5.803461 | 861554.875000 | 5.086198 | 983052.625000 | 12.3592 |\n| 5.779534 | 865121.687500 | 5.082990 | 983672.937500 | 12.0519 |\n| 5.762670 | 867653.375000 | 5.092542 | 981827.875000 | 11.6288 |\n#### GCC 4.9\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 4.297466 | 1163476.375000 | 3.787979 | 1319965.000000 | 11.8555 |\n| 4.159397 | 1202097.250000 | 3.774015 | 1324849.000000 | 9.26533 |\n| 4.230322 | 1181943.125000 | 3.788900 | 1319644.250000 | 10.4347 |\n| 4.214539 | 1186369.375000 | 3.772407 | 1325413.750000 | 10.4906 |\n| 4.162938 | 1201074.750000 | 3.763118 | 1328685.375000 | 9.6042 |\n### ubuntu 14.04 ( Intel Core i7-6700 @ 3.40GHz )\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 3.186016 | 1569358.000000 | 2.815905 | 1775628.000000 | 11.6167 |\n| 3.186449 | 1569144.875000 | 2.846761 | 1756382.125000 | 10.6604 |\n| 3.190864 | 1566973.625000 | 2.877822 | 1737425.125000 | 9.81057 |\n| 3.183230 | 1570731.625000 | 2.813425 | 1777193.250000 | 11.6173 |\n| 3.190520 | 1567142.625000 | 2.849443 | 1754728.875000 | 10.6903 |\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jlesk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/334", "title": "build: vms and os400 support", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bc-lee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/296", "title": "Fix: suppress warning C4244 on MSVC", "body": "MSVC 2015 gives some warnings on http_parser.c with \n\n> warning C4244: '=' : conversion from 'int' to 'uint16_t', possible loss of data\n> It will supress this warning.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "claudix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/294", "title": "Added support for compiling on MinGW platform", "body": "Added rules to compile on MinGW platforms (Microsoft Windows environments):\n- Use 'gcc' as compiler.\n- Generate DLL file when compiling the library.\n- Disable -fPIC when compiling the library (on MinGW platforms all code is already position independent and setting this flag issues an error).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RandoMan70": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/285", "title": "Introduce raw data callbacks", "body": "These callbacks can be used when developing transparent HTTP traffic analysis and filtering. \nThe main goal of it is to handle transmitted data as-is, but having ability to distinguish data between headers, bodies and different requests.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/258", "title": "Implement on_header_raw and on_body_raw callbacks", "body": "This patch adds on_header_raw and on_body_raw callbacks. \nWhen parser finish processing of new portion of data (or when it switches between header/body state) it run these callbacks, attaching exact stream data.\nThese callbacks called after usual header and body callbacks.\n\nPatch contains bug: after parsing error detected it still can call raw callback, so we need to check error status of a parser inside raw callbacks.\n\nPatch based at old revision, so we need to dig into parser logic again.\nBase revision: 959f4cb12748ea3aa2c4ec3183ff4acbf0fd222f\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbargren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/276", "title": "Add support for digits, '+', '-', and '.' to the scheme of a URI", "body": "Addresses #275.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "staticfloat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/264", "title": "Make library symlinks relative", "body": "This allows distributions to be more easily relocatable, such as when bottling this library in Homebrew.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erikjohnston": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/243", "title": "Allow repeatable calls to 'make install'.", "body": "Currently if `make install` is invoked multiple times it fails due to it trying to recreate the `libhttp_parser.so` symlink. \n\nAdding the `-f` flag to the `ln` invocations fixes this, but will change the default http-parser used to the newly installed version if there are multiple versions installed. I _think_ this is what we want to do anyway since we are clobbering any existing `http-parser.h` during install, so not repointing the symlink would result in a mismatch between the default library and header versions.\n\nThe alternative would be to version `http-parser.h` and add a symlink for it, while trying to ensure we always update both symlinks atomically.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThisIsMissEm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/214", "title": "Added support for SOURCE", "body": "As per tweets: https://twitter.com/indutny/status/557499042243289088\n\nIt seems new handling for upgrade was added at some point, which makes the tests break. Unfortunately I don't have time to work out how to make the tests pass again.\n\nSOURCE should essentially be handled like Upgrade, I believe, and switched to data/tcp mode after parsing headers.\n\n/cc @indutny @bnoordhuis \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacquesg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/184", "title": "Solaris doesn't necessarily have stdint.h, use inttypes.h", "body": "Solaris doesn't necessarily have `stdint.h`, it's more portable to use `sys/inttypes.h`.\n\nSee:\nhttp://wiki.opencsw.org/porting-faq#toc1\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vincentbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/159", "title": "Add two hooks to be executed when a chunk is downloaded.", "body": "One hook is executed right before receiving a new chunk. The second\none is executed just after. parsertrace.c is updated to use those\nhooks for display.\n\nI am using this for experimentation with rendering. This is more reliable than looking at timestamps to know where chunks start and end.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078", "body": "Yes this is still true. Annoying but it make a lot of other things much simpler (i.e. the http_parser does not have to make decisions about how how you might pre-allocate this)\n\nHere are two examples\n1) http://github.com/ry/http-parser/blob/37a0ff8928fb0d83cec0d0d8909c5a4abcd221af/test.c#L403 \n2) http://github.com/ry/node/blob/842eaf446d2fdcb33b296c67c911c32a0dabc747/src/http.js#L284 (in javascript, but it's just a thin abstraction over the parser callback)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080", "body": "Here is an untested code snippit which more directly answers your question: http://gist.github.com/155877\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082", "body": "I would gladly accept a patch for better documentation of this tricky part of the library. :)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067", "body": "fixed in b5b116e59ea3a22b4898705f30c5b0ffe7ce1e7c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182", "body": "sorry, i guess you're the same that reported the news.ycombinator.org bug in node. i just realized this is the same error. the fix I gave doesn't solve the problem.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421", "body": "It should.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623", "body": "Please show an example where it is not called. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408", "body": "You're not making the call for EOF. Do this:\n    http_parser_execute(&parser, settings, response, strlen(response));\n    http_parser_execute(&parser, settings, NULL, 0);\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062", "body": "Your response is missing the last `\\r\\n`. Chunked messages must be terminated by `0\\r\\n\\r\\n` \nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1\n\nAre you seeing a response like this in real-life?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512", "body": "thanks for the note. i added some text in 69cf8d8da9ba0907192f26239eb41223871dd46c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346", "body": "you can see where it failed by looking at the result of http_parser_execute()\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361", "body": "yes, but it exits immediately if there was an error. so if http_parser_execute() < sizeof(buf) then there was an error (or an Upgrade). You can use this to point out where the error was - which is perhaps more useful than an error code.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407", "body": "You can communicate your state (or what action to take) to the code calling `http_parser_execute()` through your `void *data` object. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479", "body": "Can you please provide a dump of such a request?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901", "body": "closing.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935", "body": "Fixed in 4cf39fd2fa8d1b52338ad3c4dd9ae6b3f32d72f4.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375", "body": "Thanks for the report. Fixed in 120f0f6e09773dbe003841b5b339f9284dd63aad.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885", "body": "thanks. comitted in a66c61c190a90653da3fd7c1443a1a7329472567\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139", "body": "There is no reason phrase callback.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181", "body": "Currently there is no way. The status code can is set in the parser structure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949", "body": "no, unfortunately not. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277", "body": "no\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595", "body": "CONNECT too. thanks\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267", "body": "cliff suggests the name 'lowcase' should change. i agree. can't think of anything appropriate right now though.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239", "body": "Sorry - it got lost in my inbox.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419", "body": "nread is just for the header\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793", "body": "why unsigned? just to save a bit?\n\nforgive my ignorance but what is `(uint64_t) -1` ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913", "body": "can you use `ULLONG_MAX` instead?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969", "body": "that's fine - i just want it for clarity\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "suhoparov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504", "body": "And in what sense not to call message_complete ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150", "body": "int message_complete_cb(http_parser \\* p) {\n    puts(**FUNCTION**);\n    return 0;\n}\n\n```\nconst char * response = \n    \"HTTP/1.1 200 OK\\r\\n\"\n    \"Date: Fri, 31 Dec 1999 23:59:59 GMT\\r\\n\"\n    \"Content-Type: text/plain\\r\\n\"\n    \"Transfer-Encoding: chunked\\r\\n\"\n    \"\\r\\n\"\n    \"1a\\r\\n\"\n    \"abcdefghijklmnopqrstuvwxyz\\r\\n\"\n    \"10\\r\\n\"\n    \"1234567890abcdef\\r\\n\"\n    \"0\\r\\n\";\n```\n\nmain() ...\n    http_parser parser;\n    http_parser_init(&parser, HTTP_RESPONSE);\n\n```\nhttp_parser_settings settings;\nsettings.on_body = data_cb;\nsettings.on_message_begin = message_cb;\nsettings.on_header_field = header_field_cb;\nsettings.on_header_value = header_value_cb;\nsettings.on_headers_complete = headers_complete_cb;\nsettings.on_message_complete = message_complete_cb;\n\nhttp_parser_execute(&parser, settings, response, strlen(response));\n```\n\noutput: calls all callback unless \"message_complete_cb\".\ncode is master branch on VC++ 7.1\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456", "body": "the same, message_complete_callback doesn't call\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180", "body": "Sorry, yes it invalid response, with CRLF good works. No in real-life, this my design)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183", "body": "closed\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353", "body": "wtf, that was fast. Doesn't `http_parser_execute` return the number of bytes parsed?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390", "body": "hrm, I'd like to use the return values for indicating the reason why I made http-parser exit; for example after I got the request URL and figured out I want to answer with HTTP 404, it would be comfortable to simply return `404`.\n\nIf I manually break parsing, I've got a reason to and I most probably want to communicate that reason back to the code that called `http_parser_execute` so that code can decide what steps to take next.\n\nSo please add this feature. :-)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ptlomholt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507", "body": "A sample request from http://muffin.doit.org/docs/rfc/tunneling_ssl.html:\n\nCONNECT home.netscape.com:443 HTTP/1.0\nUser-agent: Mozilla/1.1N\nProxy-authorization: basic aGVsbG86d29ybGQ=\n\nI can get a dump, but from the sample it is pretty obvious what the problem is...\n\nThe parser fails when it encounters the first period in the hostname as it assumes it is parsing the schema, not the hostname!\nI guess an easy fix would be to skip directly to _s_req_host state_ instead of _s_req_schema_ iff the request is a CONNECT...\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jterrace": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092", "body": "Fixed in d0dfc987732a25ee1f2236526e2801f06678cda4\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402", "body": "Why did you change nread back to 32-bit? Isn't it possible for a response to be > 4GB? I realize it's rare, but still possible?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "arhrodriguez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mnot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895", "body": "Just FYI, HTTPbis is discouraging the use of multi-line headers; from http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-3.2 : \n\n   Historically, HTTP header field values could be extended over\n   multiple lines by preceding each extra line with at least one space\n   or horizontal tab character (line folding).  This specification\n   deprecates such line folding except within the message/http media\n   type (Section 10.3.1).  HTTP/1.1 senders MUST NOT produce messages\n   that include line folding (i.e., that contain any field-content that\n   matches the obs-fold rule) unless the message is intended for\n   packaging within the message/http media type.  HTTP/1.1 recipients\n   SHOULD accept line folding and replace any embedded obs-fold\n   whitespace with a single SP prior to interpreting the field value or\n   forwarding the message downstream.\n\nI.e., the parser still SHOULD be able to handle them, but the spec now admits they're not widely supported.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909", "body": "This appears to be caused by this:\n          if (c < 'a' || 'z' < c) goto error;\n\nwhich rejects non-alphabetic first characters. The BNF for the field name in HTTP is 'token' which accepts a much broader range of characters (see http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-1.2.2).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "temoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796", "body": "I think that 'ascii*'\nallows matching\nHTTP/1.1 301 \\r\\n\\r\\n  (space between 301 and CRLF)\neither. And if i understand correctly, it would trigger response phrase callback with empty phrase.\n\nIs that proper?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180", "body": "How to read reason phrase then?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133", "body": "And new parser will not support custom methods?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "erichocean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944", "body": "Happy to see you going by hand, but the Ragel parser had the advantage of the graphical Dot state machine output. Are you maintaing a similar FSM for this version, and if so, would you please copy the .Dot file into the repository? Thanks! \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cmlenz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594", "body": "Afaik, TRACE and OPTIONS aren't WebDAV methods, but defined by the HTTP/1.1 spec.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lericson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707", "body": "Heh, funny how it's the exact same modifications though - one huge coincidence right there ;-) I mean especially what with the `CC?=gcc` part, that's not even necessary as `CC` is set by default in a Makefile.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ignacio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521", "body": "These typedefs don't work with Mingw. #ifdef _WIN32 should check for mingw and/or cygwin\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pgriess": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306", "body": "Thanks. I was just about to submit a patch for this ;)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487", "body": "Yeah, it's just request_url now. Check out the discussion on this pull request for the justification at ry/http-parser#54.\n\nWhat were you using the callbacks for? If this is node-land, can you just use the the 'url' module to parse what you want?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227", "body": "I believe we need to be doing this status code check for HTTP/1.0 as well.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407", "body": "Yeah, if the client and server both agree on keep-alive (i.e. by both sending \"Connection: keep-alive\" headers), we're dealing with the same situation as HTTP/1.1: we have a bytestream that contains a response with no body followed by another response. The case we're dealing with here is not that we can't determine the response length -- it's that we know that the length is 0.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088", "body": "Accepting any non-CR/LF character is a bit more liberal than the RFC allows, but I don't really think it's a problem. Also, this doesn't handle LWS properly (we can get a CRLF followed by some number of HTs or SPs and continue the reason). Check out the way the s_header_value_lws state works.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931", "body": "Yeah, agreed that we should be validating that.\n\nHowever, this isn't a regression. I'll file a bug for this. We have similar problems with handling empty hosts as well, both of which probably need a new state to indicate the beginning of the entity so that we can verify that there is at least one character.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628", "body": "Filed #74 for this.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456", "body": "so it's just request_url now? I'm using the others and wouldn't mind them staying so I dont have to re-parse them in c land, but it's not a show stopper I guess, pretty simple to delimit\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563", "body": "nah it's a none-node related C project, thanks I'll check it out!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "koichik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937", "body": "@pgriess - With HTTP/1.0 or earlier, Keep-Alive is disabled by default. Therefore, I think that we do not need it. Keep-Alive is used if and only if the response has `Connection: Keep-Alive` (or legacy `Keep-Alive:`, but http-parser does not seem to support it).\n\n[EDIT] I may understand what you mean. HTTP/1.0 server sends `Connection: Keep-Alive`, but the body length may be unable to be determined.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dhruvbird": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kolbyjack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414", "body": "I think you need to goto reexecute_byte when switching to a request here in case ch is a space\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429", "body": "This will still fail on GENERICLONGMETHOD, since that 'L' isn't a space, it'll fall through to where it still indexes method_strings\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498", "body": "Since it's walking through the full HTTP now, would it be better to deal with s_req_or_resp as a single state kind of like the request methods?  Use a string \"HTTP\" and parser->index?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cmr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440", "body": "Herp, I knew there was a reason I initially had a nested if.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216", "body": "That would simplify the code a lot, great suggestion (thanks for all the help!)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "postmodern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630", "body": "Correct. This could be a function, but I choose a constant variable since accessing them via FFI is cheaper than function calls.\n\nIn http-parser 2.0, `HTTP_PARSER_DEBUG` can dramatically change the layout of `http_parser`, so I need to check if debug was enabled when defining my own [FFI Struct](https://github.com/postmodern/ffi-http-parser/blob/master/lib/ffi/http/parser/instance.rb#L11-33).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}, "4": {"ZaMaZaN4iK": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/404", "title": "Conan package for http-parser", "body": "Hello,\r\nDo you know about [Conan](https://github.com/conan-io/conan)?\r\n[Conan](http://docs.conan.io/en/latest/) is modern dependency manager for C++. And will be great if your library will be available via package manager for other developers.\r\n\r\n[Here](https://github.com/bincrafters/conan-templates) you can find example, how you can create package for the library. \r\n\r\nIf you have any questions, just ask :-)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samoconnor": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/403", "title": "Test \"CONNECT_WITH_BODY_REQUEST\" maybe worng", "body": "See: https://github.com/nodejs/http-parser/pull/235#issuecomment-356903686\r\n\r\nThe `CONNECT_WITH_BODY_REQUEST` test case input has `Content-Length: 10` and a body `\"blarfcicle\"`, but the test expects [`.body= \"\"`](https://github.com/nodejs/http-parser/blob/master/test.c#L1102) !\r\n\r\n[The RFC says](https://tools.ietf.org/html/rfc7230#section-3.3):\r\n> _The presence of a message body in a request is signaled by a\r\n    Content-Length or Transfer-Encoding header field.  Request message\r\n   framing is independent of method semantics, even if the method does\r\n   not define any use for a message body._\r\n\r\ni.e. A request that says `Content-Length: 10` has a 10-byte body irrespective of the method being `CONNECT`.\r\n\r\nThe `CONNECT` scemantics are defined here: [RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6). It talks about the client ignoring *responses( with Content-Length in, however, that is not relevant to this test *request* test case.\r\n\r\n>    _A server MUST NOT send any Transfer-Encoding or Content-Length header\r\n   fields in a 2xx (Successful) response to CONNECT.  A client MUST\r\n   ignore any Content-Length or Transfer-Encoding header fields received\r\n   in a successful response to CONNECT._\r\n\r\n[RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6) goes on to say that a payload on a `CONNECT` request has no defined meaning, but it does not disallow it:\r\n\r\n>  _A payload within a CONNECT request message has no defined semantics;\r\n   sending a payload body on a CONNECT request might cause some existing\r\n   implementations to reject the request._\r\n\r\nSo, this line may be wrong: https://github.com/nodejs/http-parser/pull/235/files#diff-5c62f371bf37583234d2462ad49ce33dR1837", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397", "title": "typos in http-parser/test.c", "body": "https://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L156\r\n\r\nhttps://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L374\r\n\r\nhttps://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md ?", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tianchao-haohan": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/401", "title": "Need to consider the noBody situation for HEAD method", "body": "Here is the diff code:\r\n```\r\n+++ b/src/3rd_party/http_parser/http_parser.c\r\n@@ -1783,8 +1783,9 @@ reexecute:\r\n\r\n         hasBody = parser->flags & F_CHUNKED ||\r\n           (parser->content_length > 0 && parser->content_length != ULLONG_MAX);\r\n-        if (parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n-                                (parser->flags & F_SKIPBODY) || !hasBody)) {\r\n+        if ((parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n+                                (parser->flags & F_SKIPBODY) || !hasBody))\r\n+                                || parser->method == HTTP_HEAD) {\r\n           /* Exit, the rest of the message is in a different protocol. */\r\n           UPDATE_STATE(NEW_MESSAGE());\r\n           CALLBACK_NOTIFY(message_complete);\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maclover7": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/400", "title": "Group related tests into files", "body": "`test.c` is over four thousand lines long and is getting a little hard to parse... any objections to moving some related tests into separate files in a `test/` directory?\r\n\r\n@indutny @bnoordhuis ", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399", "title": "Convert test suite to TAP output", "body": "Right now the test suite has a proprietary/unique way of outputting the status of tests. It would be better if it used something like TAP, which is already used by nodejs/node, libuv/libuv, and other projects. I'm going to try and take a look at this, but someone else can give it a shot if they want :)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b11de0f5c65bcc1b906f85f4df58883b0c133e7b", "message": "doc: standardize project name\n\nPR-URL: https://github.com/nodejs/http-parser/pull/398\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tduehr": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/394", "title": "New release needed: 2.7.1 http_parser.h does not contain HTTP_STATUS_MAP", "body": "This is needed by tang.\r\n\r\nsee also: https://github.com/latchset/tang/issues/19", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tatsuhiro-t": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/386", "title": "HTTP/0.9 does not have header fields", "body": "According to https://www.w3.org/Protocols/HTTP/AsImplemented.html, HTTP/0.9 does not have header fields, and single CR + LF pair (or just LF) after a request line signals the end of request.\r\nBut current http-parser waits for 2nd CR + LF pair.\r\n\r\nSee how apache works:\r\n\r\n```\r\n$ telnet 127.0.0.1 80\r\nTrying 127.0.0.1...\r\nConnected to 127.0.0.1.\r\nEscape character is '^]'.\r\nGET /\r\n<html><body><h1>It works!</h1>\r\n<p>This is the default web page for this server.</p>\r\n<p>The web server software is running but no content has been added, yet.</p>\r\n</body></html>\r\nConnection closed by foreign host.\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/311", "title": "Allow non-standard HTTP method", "body": "This change adds non-standard HTTP method support.  We added new\ncallback on_method of type http_data_cb, which notifies incoming\nmethod.  For non-standard HTTP method, method field in struct\nhttp_parser becomes HTTP_METHOD_UNKNOWN.\n\nThe non-standard HTTP method is disabled by default, and must be\nexplicitly enabled by giving -DHTTP_PARSER_METHOD_CB=1 on build time.\nThis is for backward compatibility; because non-standard HTTP method\nis now accepted rather than rejected.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TechnikEmpire": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/384", "title": "When parsing response that omits status message text, on_status is never called", "body": "On status callback does not get invoked when we're dealing with a web server that omits the status text from the status line. Examples of servers doing this are kijiji.\r\n\r\nExample from in the wild:\r\n```\r\nGET \r\nhttps://www.kijiji.ca/h-lloydminster-ab/1700095\r\n\r\nStatus: HTTP/1.1 200\r\n```\r\n\r\nServer is advertised as being nginx.\r\n\r\nWhen parsing the response, `on_status` will never be called. Not sure if this is intended or not, I started looking into the spec for this and didn't see any `MUST`'s with regards to the status text. I came up with a solution to work around this personally so I don't care anymore, just FYI.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sachinHPrabhu": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/382", "title": "Request for information about the schedule of next release", "body": "The master branch of the http-parser project already has a fix that I am interested in.\r\n\r\nTolerate non-compliant status line responses \r\nhttps://github.com/nodejs/http-parser/commit/3b0da34d83e4eace29cc49e3b659bf630537b94c\r\n\r\nHence I wished to know if there is any schedule for next release of the http-parser.\r\n\r\nThanking You.\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WilCrofter": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/381", "title": "Request new release: v2.7.1, does not build with gcc 7.1.1 due to FALLTHROUGH issue", "body": "Although the FALLTHROUGH issue was fixed in [0852bea](https://github.com/nodejs/http-parser/commit/0852bea482e0842b0445c14b19dc9b318a6c4eba) the last release predates the fix.\r\n\r\nv2.7.1 is currently a dependency of [JuliaWeb/HttpParser.jl](https://github.com/JuliaWeb/HttpParser.jl) which will, of course, not build with current versions of gcc.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rnburn": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/380", "title": "Makefile is broken for OS X", "body": "If you try to install on OS X, you'll get this error\r\n```\r\ncc  -I. -DHTTP_PARSER_STRICT=0  -Wall -Wextra -Werror -O3  -fPIC -c http_parser.c -o libhttp_parser.o\r\ncc  -shared -o libhttp_parser.2.7.1.dylib libhttp_parser.o\r\ninstall -D  http_parser.h /usr/local/include/http_parser.h\r\ninstall: illegal option -- D\r\nusage: install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 file2\r\n       install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 ... fileN directory\r\n       install -d [-v] [-g group] [-m mode] [-o owner] directory ...\r\nmake: *** [install] Error 64\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RekGRpth": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/371", "title": "http_status_str", "body": "```c\r\nconst char *http_status_str(enum http_status s) {\r\n    switch (s) {\r\n#define XX(num, name, string) case HTTP_STATUS_##name: return #num \" \" #string;\r\n    HTTP_STATUS_MAP(XX)\r\n#undef XX\r\n        default: return \"<unknown>\";\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "povilasb": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/362", "title": "How to disable automatic chunks decoding?", "body": "> The parser decodes the transfer-encoding for both requests and responses transparently. That is, a chunked encoding is decoded before being sent to the on_body callback.\r\n\r\nIs it possible to configure parser not to decode chunked encoding?\r\nI would like to receive chunks in `on_body` unmodified.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinniefalco": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/319", "title": "http-parser fails to detect chunked encoding at the end of a list", "body": "Given the header:\n\n```\nTransfer-Encoding: gzip, chunked\\r\\n\n```\n\nThe parser will not set chunked encoding when it should:\nhttps://tools.ietf.org/html/rfc7230#section-3.3.1\n\nEncodings are applied left to right and removed from right to left. If the parser encounters the `chunked` token as the last item when the Transfer-Encoding value is a comma separated list, it should consider the message body to be chunk encoded.\n\nI haven't actually tried this so I might be wrong but I see no code for finding a comma in Transfer-Encoding. However, the parser DOES handle comma separated lists correctly for the Connection header.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318", "title": "http-parser impossible condition check", "body": "Consider this code (from http_parser.c):\n\n```\n            /* Transfer-Encoding: chunked */\n            case h_matching_transfer_encoding_chunked:\n              parser->index++;\n              if (parser->index > sizeof(CHUNKED)-1\n                  || c != CHUNKED[parser->index]) {\n                h_state = h_general;\n              } else if (parser->index == sizeof(CHUNKED)-2) {\n                h_state = h_transfer_encoding_chunked;\n              }\n              break;\n```\n\nIt seems `parser->index > sizeof(CHUNKED)-1` can never be true, because if the token being checked matches, we would set `h_state = h_transfer_encoding_chunked` before `parser->index` can ever exceed `sizeof(CHUNKED)-2`. And if the token being checked doesn't match, then we will set `h_state = h_general` before `parser->index` can exceed `sizeof(CHUNKED)-1`.\n\nI haven't actually tested this so I am not 100% sure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grobian": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd3850c048f7a69db2f066d267797fbc3680d9a0", "message": "Makefile: set install_name on macos\n\ninstall_name on Mach-O is similar to SONAME on ELF, except that it needs\na full path instead of just the basename.\n\nFixes: https://github.com/nodejs/http-parser/issues/356\nPR-URL: https://github.com/nodejs/http-parser/pull/358\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/8ea9532378291b5a9c27ab61bb5cff336cc396b5", "message": "Makefile: set versions for SONAME correctly\n\nRaised in issue #356, reduce version number in SONAME to MAJOR.MINOR.\nWhile at it, create a symlink the from SONAME to the library, instead of\nthe other way around, and add a (standard) unversioned symlink to the\nlibrary to aid the ordinary linking process.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/359\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bnoordhuis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/89279ab6135a63159200928da6e544135bf98301", "message": "Update license boilerplate.\n\nThe boilerplate included attribution to NGINX that created confusion\nbecause NGINX is distributed under a different license (BSD, not MIT.)\n\nTo the best of everyone's knowledge, no actual NGINX code remains.\nRemove the attribution to clear up the confusion.\n\nFixes: https://github.com/nodejs/http-parser/issues/389\nPR-URL: https://github.com/nodejs/http-parser/pull/390\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/05525c5fde1fc562481f6ae08fa7056185325daf", "message": "Ignore Upgrade header outside of 101 response.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/260c52233044cdfad4d84b01d3dba11c2786c794", "message": "Fix typo in test name.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/cacb07d2b4ebcd86fc44fd6ee3f0020125e7a9a6", "message": "parser: fix Content-Length header parsing.\n\nCommit e2e467b (\"Update http-parser to 2.6.1\") enforces that messages\ncontain no more than one Content-Length header but it considers any\nheader that starts with \"Content-Length\" as a duplicate.\n\nFix: https://github.com/nodejs/http-parser/issues/324\nPR-URL: https://github.com/nodejs/http-parser/pull/325\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920", "body": "Trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921", "body": "s/seciont/section/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929", "body": "Maybe avoid the extra level of indentation:\n\n``` c\nif (parser->type != HTTP_RESPONSE) {\n  return 1;\n}\nif (parser->status_code / 100 == 1 || /* etc */\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905", "body": "s/swtich/switch/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906", "body": "Trailing whitespace. Happens in one other place too.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909", "body": "This doesn't catch URLs like `http://example.com:/`, v will be zero. I'm not sure if that's a bug or a feature.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694", "body": "James, isn't that redundant? If the `on_headers_complete` callback hasn't fired yet, you know you're still parsing headers.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760", "body": "You need to preserve `parser->data`.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878", "body": "No, to make it easier to detect overflow (signed overflow is undefined, unsigned overflow is not).\n\n`(uint64_t) -1` is a shorthand / fallback for ULLONG_MAX.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920", "body": "Yes-ish. The reason that I don't is that `<limits.h>` doesn't always define it. I can add something like this:\n\n``` c\n#include <limits.h>\n\n#ifndef ULLONG_MAX\n#define ULLONG_MAX ((uint64_t) -1)\n#endif\n```\n\nYour call.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981", "body": "Cool. Updated in 8f290a5.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578", "body": "Style issue: arguments should line up if split over multiple lines.\n\n``` c\nrv = http_parser_parse_url(test->url,\n                           strlen(test->url),\n                           test->is_connect,\n                           &u);\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125", "body": "Sorry, missed this one. Don't use `u_int`, it's a POSIX-ism.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622", "body": "What's this supposed to do?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624", "body": "Oh, I think I get it - you need to know _if_ this version of http-parser is compiled in debug mode.\n\nI initially read it as a switch to turn on/off debug mode.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064", "body": "Wrap at 80 columns.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069", "body": "Style: too much whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077", "body": "Use NULL, not zero. Signals to the reader that it's a pointer.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083", "body": "Superfluous blank line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089", "body": "Why is that here?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091", "body": "Don't use C++/C99 comments.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ploxiln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/1b79abab34d4763c0467f1173a406ad2817c1635", "message": "simplify parsing M-SEARCH method, group P methods\n\ncan use same switch-lookup for '-' char case\nmove PROPFIND and PURGE to be next to the other P methods\n\nchange IS_ALPHA(ch) to  A <= ch <= Z\n(very slight optimization, only uppercase will match in switch)\n\nPR-URL: https://github.com/nodejs/http-parser/pull/323\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "misery": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/0852bea482e0842b0445c14b19dc9b318a6c4eba", "message": "Fix FALLTHROUGH warning in switch of GCC7\n\nPR-URL: https://github.com/nodejs/http-parser/pull/357\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gatzka": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/291a32cc51698318adfbe81ca24e77da1a735365", "message": "Include stddef.h instead of sys/types.h.\n\nThe include is required for type size_t. stddef.h should be available\non every platform, sys/types.h is not.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/360\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fake666": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/3b0da34d83e4eace29cc49e3b659bf630537b94c", "message": "Tolerate non-compliant status line responses\n\n- original fix is from daeon: https://github.com/daeon/http-parser/\n\n  \"Tolerate web servers which do not return a status message in the\n   return response.\n\n   I have noticed this usse on several websites such downloads from\n   mediafire.com\"\n\n- original pull request: https://github.com/nodejs/http-parser/pull/254\n- i merely added the status_cb_called unit test check, there already\n  is a test that triggers this without the patch (a 301 without a\n  reason phrase).\n\nPR-URL: https://github.com/nodejs/http-parser/pull/367\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mscdex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/9f489a474d5761ca5715f1e13a3d39023a656424", "message": "parser: fix HTTP version parsing\n\nOnly one digit is allowed for the major version and only one is\nallowed for the minor version according to RFC 7230.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/366\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "npmccallum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/335850f6b868d3411968cbf5a4d59fe619dee36f", "message": "parser: HTTP_STATUS_MAP(XX) and enum http_status\n\nThis patch provides an enum for the standardized HTTP status codes.\nAdditionally, the HTTP_STATUS_MAP(XX) can be used for other purposes as\nwell, such as code-to-name lookups and code-based switch statements.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/337\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "indutny": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/feae95a3a69f111bc1897b9048d9acbc290992f9", "message": "Bump version to 2.7.1"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/9b0d5b33ebdaacff1dadd06bad4e198b11ff880e", "message": "Bump version to 2.6.0"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/04d28a7377c03bac762e44927c234d9b3d58462a", "message": "parser: returning 2 from on_headers_complete\n\nReturning `2` from on_headers_complete will tell parser that it\nshould not expect neither a body nor any futher responses on\nthis connection. This is useful for handling responses to a\nCONNECT request which may not contain `Upgrade` or\n`Connection: upgrade` headers.\n\nSee: https://github.com/nodejs/node/pull/6198\nPR-URL: https://github.com/nodejs/http-parser/pull/299\nReviewed-By: Brian White <mscdex@mscdex.net>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/777ba4ededf53040f4c5cc5d53f26201e705ebaf", "message": "src: introduce `http_parser_url_init`\n\nThe struct must be zero-initialized, but this wasn't explicitly stated\nanywhere in headers. Introduce `http_parser_url_init` API method that\nwill do it.\n\nFixes: #209\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nPR-URL: https://github.com/nodejs/http-parser/pull/225"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/295", "title": "http_parser: skip lws/rws in header field", "body": "Skip whitespace from the left and the right sides of the header field.\n\nSee: https://github.com/nodejs/node/pull/5844\n\ncc @jasnell \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guoxiao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b2cc8e49f39277b197c6f3592708309ee78c015e", "message": "test: remove \u2018nread\u2019, which is not used\n\nPR-URL: https://github.com/nodejs/http-parser/pull/300\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oldratlee": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/737627b2b232f6a47dffca7ea17a8e3c3e2231a0", "message": "readme: improve format, fix code syntax\n\nPR-URL: https://github.com/nodejs/http-parser/pull/305\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbergstroem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/5651aea80472bf9a1f7d2718c78c0de08984aa1f", "message": "test: add a test for for obstext characters (> 0x80)\n\nCreate a test added for nodejs in nodejs/node@954a4b4b.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/dbcda1961c25a4f945a55da8e9dd3af6e4df65f0", "message": "Update http-parser to 2.6.2\n\nFixes a header parsing bug for obstext characters (> 0x80)\n\nAdaption of nodejs/node@954a4b4b:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Mon Feb 15 09:40:58 2016 -0800\n\n    deps: update to http-parser 2.6.2\n\n    Fixes http-parser regression with IS_HEADER_CHAR check\n    Add test case for obstext characters (> 0x80) is header\n\n    PR-URL: https://github.com/nodejs/node/pull/5237\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Myles Borins <myles.borins@gmail.com>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/678a9e21f11e5ea93e5e17a2302390f88a6a8c46", "message": "test: Assert against correct error messages\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dolmen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd65b0fbbdb405425a14d0e49f5366667550b1c2", "message": "src: refactor method parsing\n\nUse a switch and a macro to branch parsing of HTTP methods.\nEasier to read and much shorter.\n\nIn this commit, the order of branches dispatching is the same as in the\noriginal code, to ease review. Reordering branches by descending\nfrequency will improve speed too.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/273\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasnell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/e2e467b91262246b339fb3d80c8408d498b4a43b", "message": "Update http-parser to 2.6.1\n\nIncludes parsing improvements to ensure closer HTTP spec conformance\n\nAdaption of nodejs/node@4f4c8ab3b4cea246d2ece6ca006fe280241d84a4:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Wed Feb 3 17:28:48 2016 -0800\n\n    deps: update http-parser to version 2.6.1\n\n    includes parsing improvements to ensure closer HTTP spec conformance\n\n    PR-URL: https://github.com/nodejs/node-private/pull/26\n    Reviewed-By: Rod Vagg <r@va.gg>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/bee4817ebea0eaa592143c7825f5c96f040c84e4", "message": "Bump version to 2.6.0"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/326", "title": "add settings flags, refactor lenient_http_headers setting", "body": "A previous change during a security fix added the ability to set a `lenient_http_headers` flag on the HTTP Parser instance. The way it was done was a bit of a hack at the time in order to avoid an ABI breaking change. This PR adds a new `uint32_t` flags field to `http_parser_settings` in order to provide a more robust and correct way of passing these kinds of settings into a parser instance.\n\n_Note_: This is an ABI change so it would require a semver-major bump\n\n/cc @indutny \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/4e382f96e6d3321538a78f2c7f9506d4e79b08d6", "message": "readme: fix build status badge\n\nPR-URL: https://github.com/nodejs/http-parser/pull/277\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lberezy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/483eca7989d655b34b01f65a8faad82ddb79813c", "message": "doc: updated README.md to include multi-threading example\n\nIncluded information and example on communicating data between\nthread local and callback scopes. This shows how http-parser\ncan be used in a multi-threaded context.\n\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nPR-URL: https://github.com/nodejs/http-parser/pull/256"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DCjanus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/388", "title": "fix typo", "body": "from 'futher' to 'further'\r\n\r\n-----------------\r\n\r\nI'm not a native English speaker, maybe there is a word 'futher', but I can't find it by Google.\r\nIf I'm Wrong, forget me\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nibaozhu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/379", "title": "install `package'", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simsong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/378", "title": "add .deps and .dirstamp to .gitignore", "body": "I use http-parser in another project as a submodule. When I run autotools configure, it creates in the http-parser sub directory a directory and a file:\r\n\r\n```\r\n[user@localhost http-parser]$ git status\r\nHEAD detached from 8d9e5db\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\t.deps/\r\n\t.dirstamp\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n[user@localhost http-parser]$\r\n```\r\n\r\nIt would be super-nice to have `git status` **not** warn me about these two files generated by autotools.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "izaid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/377", "title": "[WIP] CMake Support", "body": "CMake support has been requested a few times, and there has been at least one PR about it. This is a new attempt at it -- I think it is relatively simple. Happy to build it out more if that is what is needed.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flandr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/374", "title": "Add basic CMake support", "body": "Only supports building the main library target (static and dynamic).\r\n\r\nRefs #257", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alperakcan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/369", "title": "ignore headers transfer_encoding_chunked and content_length to work with http assemblers.", "body": "added ignore_header_transfer_encodig_chunked and ignore_header_content_length to settings.\r\n\r\nignore_header_content_length:\r\n  useful if body length and content length does not match. happens with owa servers. or working with pre http assemblers that unzips compressed content without changing content-length.\r\n\r\nignore_header_transfer_encodig_chunked:\r\n  useful when working with pre-http assemblers which assembles chunked content into one http packet without changing transfer-encoding field.\r\n\r\nmay be useful for someone.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kunalspathak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/352", "title": "http header parsing", "body": "http_parser along with other http request information supplies header\r\nfields to the consumer. In `node` case, it creates a new `JSString`\r\nof these header fields which involves memory allocation. If parser\r\nkeeps track of headers while parsing and return a unique id to `node`\r\nthat help distinguish the known header name, `node` don't have to\r\nallocate for known headers and it can use the pre-created `JSString`\r\nfor the header fields. See discussion in https://github.com/nodejs/node/issues/10930\r\n\r\nThe approach I have taken is while scanning the request, keep track\r\nof known headers and update the `header_state` accordingly. `node` or\r\nany consumer can consume the `header_state` information and decide\r\nto use cached http header field instead of creating new string. I try to\r\nmatch traditional cases http header. e.g. In Content-Type 'C' and 'T' has\r\nto be upper case for the header to qualify for traditional cased header.\r\nI use `traditional_case_http_headers` to track this information.\r\n\r\nPerformance is flat for node's http benchmark except bench-parse where\r\nsometimes I noticed 5% regression. I am not sure if it was due to noise.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akatrevorjay": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/351", "title": "Cython bindings -- Interested?", "body": "Hi, a long time ago I wrote Cython bindings for this. If I clean it up are you interested in merging?\r\n\r\n(notably the build process and add some docs)\r\n\r\nTy,\r\nTrevor", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roman-neuhauser": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/348", "title": "Unbreak `make install` in BSDs", "body": "I've only tested this in freebsd-12.0 where the changes get me from syntax errors in the Makefile to passing `port test` with flying colors.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shindo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/347", "title": "parser: fix handling of newlines before HTTP responses", "body": "This diff fixes ignoring of CR and LF chars received before HTTP response's start line the same way as they are handled with HTTP_REQUEST and HTTP_BOTH parser types.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdamMajer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/346", "title": "makefile: Flexible install fixes", "body": "Fixing three Makefile related things,\r\n\r\n1. LIBDIR should be configurable. INCLUDEDIR as well\r\n2. fix SONAME so it represents actual ABI compatibility\r\n3. symlinks should not have absolute paths\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shekhei": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/342", "title": "Various optimizations", "body": "Hi, basically I was just messing around and did some benchmarking, found some interesting things, so I made some changes. Mostly to do with removing some of the branches and created a SIMD version of finding CRLF that doesn't need to walk the whole payload twice(worst case)\n\nBelow are the benchmark results\n### OSX (el capitan, mbp 13\" early 2015, 3.1 GHz Intel Core i7)\n#### Clang\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 5.761632 | 867809.687500 | 5.104409 | 979545.312500 | 11.4069 |\n| 5.769115 | 866684.062500 | 5.104001 | 979623.625000 | 11.5289 |\n| 5.803461 | 861554.875000 | 5.086198 | 983052.625000 | 12.3592 |\n| 5.779534 | 865121.687500 | 5.082990 | 983672.937500 | 12.0519 |\n| 5.762670 | 867653.375000 | 5.092542 | 981827.875000 | 11.6288 |\n#### GCC 4.9\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 4.297466 | 1163476.375000 | 3.787979 | 1319965.000000 | 11.8555 |\n| 4.159397 | 1202097.250000 | 3.774015 | 1324849.000000 | 9.26533 |\n| 4.230322 | 1181943.125000 | 3.788900 | 1319644.250000 | 10.4347 |\n| 4.214539 | 1186369.375000 | 3.772407 | 1325413.750000 | 10.4906 |\n| 4.162938 | 1201074.750000 | 3.763118 | 1328685.375000 | 9.6042 |\n### ubuntu 14.04 ( Intel Core i7-6700 @ 3.40GHz )\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 3.186016 | 1569358.000000 | 2.815905 | 1775628.000000 | 11.6167 |\n| 3.186449 | 1569144.875000 | 2.846761 | 1756382.125000 | 10.6604 |\n| 3.190864 | 1566973.625000 | 2.877822 | 1737425.125000 | 9.81057 |\n| 3.183230 | 1570731.625000 | 2.813425 | 1777193.250000 | 11.6173 |\n| 3.190520 | 1567142.625000 | 2.849443 | 1754728.875000 | 10.6903 |\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jlesk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/334", "title": "build: vms and os400 support", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bc-lee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/296", "title": "Fix: suppress warning C4244 on MSVC", "body": "MSVC 2015 gives some warnings on http_parser.c with \n\n> warning C4244: '=' : conversion from 'int' to 'uint16_t', possible loss of data\n> It will supress this warning.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "claudix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/294", "title": "Added support for compiling on MinGW platform", "body": "Added rules to compile on MinGW platforms (Microsoft Windows environments):\n- Use 'gcc' as compiler.\n- Generate DLL file when compiling the library.\n- Disable -fPIC when compiling the library (on MinGW platforms all code is already position independent and setting this flag issues an error).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RandoMan70": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/285", "title": "Introduce raw data callbacks", "body": "These callbacks can be used when developing transparent HTTP traffic analysis and filtering. \nThe main goal of it is to handle transmitted data as-is, but having ability to distinguish data between headers, bodies and different requests.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/258", "title": "Implement on_header_raw and on_body_raw callbacks", "body": "This patch adds on_header_raw and on_body_raw callbacks. \nWhen parser finish processing of new portion of data (or when it switches between header/body state) it run these callbacks, attaching exact stream data.\nThese callbacks called after usual header and body callbacks.\n\nPatch contains bug: after parsing error detected it still can call raw callback, so we need to check error status of a parser inside raw callbacks.\n\nPatch based at old revision, so we need to dig into parser logic again.\nBase revision: 959f4cb12748ea3aa2c4ec3183ff4acbf0fd222f\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbargren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/276", "title": "Add support for digits, '+', '-', and '.' to the scheme of a URI", "body": "Addresses #275.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "staticfloat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/264", "title": "Make library symlinks relative", "body": "This allows distributions to be more easily relocatable, such as when bottling this library in Homebrew.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erikjohnston": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/243", "title": "Allow repeatable calls to 'make install'.", "body": "Currently if `make install` is invoked multiple times it fails due to it trying to recreate the `libhttp_parser.so` symlink. \n\nAdding the `-f` flag to the `ln` invocations fixes this, but will change the default http-parser used to the newly installed version if there are multiple versions installed. I _think_ this is what we want to do anyway since we are clobbering any existing `http-parser.h` during install, so not repointing the symlink would result in a mismatch between the default library and header versions.\n\nThe alternative would be to version `http-parser.h` and add a symlink for it, while trying to ensure we always update both symlinks atomically.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThisIsMissEm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/214", "title": "Added support for SOURCE", "body": "As per tweets: https://twitter.com/indutny/status/557499042243289088\n\nIt seems new handling for upgrade was added at some point, which makes the tests break. Unfortunately I don't have time to work out how to make the tests pass again.\n\nSOURCE should essentially be handled like Upgrade, I believe, and switched to data/tcp mode after parsing headers.\n\n/cc @indutny @bnoordhuis \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacquesg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/184", "title": "Solaris doesn't necessarily have stdint.h, use inttypes.h", "body": "Solaris doesn't necessarily have `stdint.h`, it's more portable to use `sys/inttypes.h`.\n\nSee:\nhttp://wiki.opencsw.org/porting-faq#toc1\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vincentbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/159", "title": "Add two hooks to be executed when a chunk is downloaded.", "body": "One hook is executed right before receiving a new chunk. The second\none is executed just after. parsertrace.c is updated to use those\nhooks for display.\n\nI am using this for experimentation with rendering. This is more reliable than looking at timestamps to know where chunks start and end.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078", "body": "Yes this is still true. Annoying but it make a lot of other things much simpler (i.e. the http_parser does not have to make decisions about how how you might pre-allocate this)\n\nHere are two examples\n1) http://github.com/ry/http-parser/blob/37a0ff8928fb0d83cec0d0d8909c5a4abcd221af/test.c#L403 \n2) http://github.com/ry/node/blob/842eaf446d2fdcb33b296c67c911c32a0dabc747/src/http.js#L284 (in javascript, but it's just a thin abstraction over the parser callback)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080", "body": "Here is an untested code snippit which more directly answers your question: http://gist.github.com/155877\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082", "body": "I would gladly accept a patch for better documentation of this tricky part of the library. :)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067", "body": "fixed in b5b116e59ea3a22b4898705f30c5b0ffe7ce1e7c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182", "body": "sorry, i guess you're the same that reported the news.ycombinator.org bug in node. i just realized this is the same error. the fix I gave doesn't solve the problem.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421", "body": "It should.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623", "body": "Please show an example where it is not called. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408", "body": "You're not making the call for EOF. Do this:\n    http_parser_execute(&parser, settings, response, strlen(response));\n    http_parser_execute(&parser, settings, NULL, 0);\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062", "body": "Your response is missing the last `\\r\\n`. Chunked messages must be terminated by `0\\r\\n\\r\\n` \nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1\n\nAre you seeing a response like this in real-life?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512", "body": "thanks for the note. i added some text in 69cf8d8da9ba0907192f26239eb41223871dd46c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346", "body": "you can see where it failed by looking at the result of http_parser_execute()\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361", "body": "yes, but it exits immediately if there was an error. so if http_parser_execute() < sizeof(buf) then there was an error (or an Upgrade). You can use this to point out where the error was - which is perhaps more useful than an error code.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407", "body": "You can communicate your state (or what action to take) to the code calling `http_parser_execute()` through your `void *data` object. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479", "body": "Can you please provide a dump of such a request?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901", "body": "closing.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935", "body": "Fixed in 4cf39fd2fa8d1b52338ad3c4dd9ae6b3f32d72f4.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375", "body": "Thanks for the report. Fixed in 120f0f6e09773dbe003841b5b339f9284dd63aad.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885", "body": "thanks. comitted in a66c61c190a90653da3fd7c1443a1a7329472567\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793", "body": "why unsigned? just to save a bit?\n\nforgive my ignorance but what is `(uint64_t) -1` ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913", "body": "can you use `ULLONG_MAX` instead?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969", "body": "that's fine - i just want it for clarity\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "suhoparov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504", "body": "And in what sense not to call message_complete ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150", "body": "int message_complete_cb(http_parser \\* p) {\n    puts(**FUNCTION**);\n    return 0;\n}\n\n```\nconst char * response = \n    \"HTTP/1.1 200 OK\\r\\n\"\n    \"Date: Fri, 31 Dec 1999 23:59:59 GMT\\r\\n\"\n    \"Content-Type: text/plain\\r\\n\"\n    \"Transfer-Encoding: chunked\\r\\n\"\n    \"\\r\\n\"\n    \"1a\\r\\n\"\n    \"abcdefghijklmnopqrstuvwxyz\\r\\n\"\n    \"10\\r\\n\"\n    \"1234567890abcdef\\r\\n\"\n    \"0\\r\\n\";\n```\n\nmain() ...\n    http_parser parser;\n    http_parser_init(&parser, HTTP_RESPONSE);\n\n```\nhttp_parser_settings settings;\nsettings.on_body = data_cb;\nsettings.on_message_begin = message_cb;\nsettings.on_header_field = header_field_cb;\nsettings.on_header_value = header_value_cb;\nsettings.on_headers_complete = headers_complete_cb;\nsettings.on_message_complete = message_complete_cb;\n\nhttp_parser_execute(&parser, settings, response, strlen(response));\n```\n\noutput: calls all callback unless \"message_complete_cb\".\ncode is master branch on VC++ 7.1\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456", "body": "the same, message_complete_callback doesn't call\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180", "body": "Sorry, yes it invalid response, with CRLF good works. No in real-life, this my design)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183", "body": "closed\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353", "body": "wtf, that was fast. Doesn't `http_parser_execute` return the number of bytes parsed?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390", "body": "hrm, I'd like to use the return values for indicating the reason why I made http-parser exit; for example after I got the request URL and figured out I want to answer with HTTP 404, it would be comfortable to simply return `404`.\n\nIf I manually break parsing, I've got a reason to and I most probably want to communicate that reason back to the code that called `http_parser_execute` so that code can decide what steps to take next.\n\nSo please add this feature. :-)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ptlomholt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507", "body": "A sample request from http://muffin.doit.org/docs/rfc/tunneling_ssl.html:\n\nCONNECT home.netscape.com:443 HTTP/1.0\nUser-agent: Mozilla/1.1N\nProxy-authorization: basic aGVsbG86d29ybGQ=\n\nI can get a dump, but from the sample it is pretty obvious what the problem is...\n\nThe parser fails when it encounters the first period in the hostname as it assumes it is parsing the schema, not the hostname!\nI guess an easy fix would be to skip directly to _s_req_host state_ instead of _s_req_schema_ iff the request is a CONNECT...\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jterrace": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092", "body": "Fixed in d0dfc987732a25ee1f2236526e2801f06678cda4\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "arhrodriguez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mnot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895", "body": "Just FYI, HTTPbis is discouraging the use of multi-line headers; from http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-3.2 : \n\n   Historically, HTTP header field values could be extended over\n   multiple lines by preceding each extra line with at least one space\n   or horizontal tab character (line folding).  This specification\n   deprecates such line folding except within the message/http media\n   type (Section 10.3.1).  HTTP/1.1 senders MUST NOT produce messages\n   that include line folding (i.e., that contain any field-content that\n   matches the obs-fold rule) unless the message is intended for\n   packaging within the message/http media type.  HTTP/1.1 recipients\n   SHOULD accept line folding and replace any embedded obs-fold\n   whitespace with a single SP prior to interpreting the field value or\n   forwarding the message downstream.\n\nI.e., the parser still SHOULD be able to handle them, but the spec now admits they're not widely supported.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909", "body": "This appears to be caused by this:\n          if (c < 'a' || 'z' < c) goto error;\n\nwhich rejects non-alphabetic first characters. The BNF for the field name in HTTP is 'token' which accepts a much broader range of characters (see http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-1.2.2).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pgriess": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088", "body": "Accepting any non-CR/LF character is a bit more liberal than the RFC allows, but I don't really think it's a problem. Also, this doesn't handle LWS properly (we can get a CRLF followed by some number of HTs or SPs and continue the reason). Check out the way the s_header_value_lws state works.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931", "body": "Yeah, agreed that we should be validating that.\n\nHowever, this isn't a regression. I'll file a bug for this. We have similar problems with handling empty hosts as well, both of which probably need a new state to indicate the beginning of the entity so that we can verify that there is at least one character.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628", "body": "Filed #74 for this.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "postmodern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630", "body": "Correct. This could be a function, but I choose a constant variable since accessing them via FFI is cheaper than function calls.\n\nIn http-parser 2.0, `HTTP_PARSER_DEBUG` can dramatically change the layout of `http_parser`, so I need to check if debug was enabled when defining my own [FFI Struct](https://github.com/postmodern/ffi-http-parser/blob/master/lib/ffi/http/parser/instance.rb#L11-33).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}, "5": {"ZaMaZaN4iK": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/404", "title": "Conan package for http-parser", "body": "Hello,\r\nDo you know about [Conan](https://github.com/conan-io/conan)?\r\n[Conan](http://docs.conan.io/en/latest/) is modern dependency manager for C++. And will be great if your library will be available via package manager for other developers.\r\n\r\n[Here](https://github.com/bincrafters/conan-templates) you can find example, how you can create package for the library. \r\n\r\nIf you have any questions, just ask :-)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samoconnor": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/403", "title": "Test \"CONNECT_WITH_BODY_REQUEST\" maybe worng", "body": "See: https://github.com/nodejs/http-parser/pull/235#issuecomment-356903686\r\n\r\nThe `CONNECT_WITH_BODY_REQUEST` test case input has `Content-Length: 10` and a body `\"blarfcicle\"`, but the test expects [`.body= \"\"`](https://github.com/nodejs/http-parser/blob/master/test.c#L1102) !\r\n\r\n[The RFC says](https://tools.ietf.org/html/rfc7230#section-3.3):\r\n> _The presence of a message body in a request is signaled by a\r\n    Content-Length or Transfer-Encoding header field.  Request message\r\n   framing is independent of method semantics, even if the method does\r\n   not define any use for a message body._\r\n\r\ni.e. A request that says `Content-Length: 10` has a 10-byte body irrespective of the method being `CONNECT`.\r\n\r\nThe `CONNECT` scemantics are defined here: [RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6). It talks about the client ignoring *responses( with Content-Length in, however, that is not relevant to this test *request* test case.\r\n\r\n>    _A server MUST NOT send any Transfer-Encoding or Content-Length header\r\n   fields in a 2xx (Successful) response to CONNECT.  A client MUST\r\n   ignore any Content-Length or Transfer-Encoding header fields received\r\n   in a successful response to CONNECT._\r\n\r\n[RFC 7231, 4.3.6](https://tools.ietf.org/html/rfc7231#section-4.3.6) goes on to say that a payload on a `CONNECT` request has no defined meaning, but it does not disallow it:\r\n\r\n>  _A payload within a CONNECT request message has no defined semantics;\r\n   sending a payload body on a CONNECT request might cause some existing\r\n   implementations to reject the request._\r\n\r\nSo, this line may be wrong: https://github.com/nodejs/http-parser/pull/235/files#diff-5c62f371bf37583234d2462ad49ce33dR1837", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397", "title": "typos in http-parser/test.c", "body": "https://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L156\r\n\r\nhttps://github.com/nodejs/http-parser/blob/05525c5fde1fc562481f6ae08fa7056185325daf/test.c#L374\r\n\r\nhttps://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md ?", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tianchao-haohan": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/401", "title": "Need to consider the noBody situation for HEAD method", "body": "Here is the diff code:\r\n```\r\n+++ b/src/3rd_party/http_parser/http_parser.c\r\n@@ -1783,8 +1783,9 @@ reexecute:\r\n\r\n         hasBody = parser->flags & F_CHUNKED ||\r\n           (parser->content_length > 0 && parser->content_length != ULLONG_MAX);\r\n-        if (parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n-                                (parser->flags & F_SKIPBODY) || !hasBody)) {\r\n+        if ((parser->upgrade && (parser->method == HTTP_CONNECT ||\r\n+                                (parser->flags & F_SKIPBODY) || !hasBody))\r\n+                                || parser->method == HTTP_HEAD) {\r\n           /* Exit, the rest of the message is in a different protocol. */\r\n           UPDATE_STATE(NEW_MESSAGE());\r\n           CALLBACK_NOTIFY(message_complete);\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maclover7": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/400", "title": "Group related tests into files", "body": "`test.c` is over four thousand lines long and is getting a little hard to parse... any objections to moving some related tests into separate files in a `test/` directory?\r\n\r\n@indutny @bnoordhuis ", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399", "title": "Convert test suite to TAP output", "body": "Right now the test suite has a proprietary/unique way of outputting the status of tests. It would be better if it used something like TAP, which is already used by nodejs/node, libuv/libuv, and other projects. I'm going to try and take a look at this, but someone else can give it a shot if they want :)", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b11de0f5c65bcc1b906f85f4df58883b0c133e7b", "message": "doc: standardize project name\n\nPR-URL: https://github.com/nodejs/http-parser/pull/398\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tduehr": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/394", "title": "New release needed: 2.7.1 http_parser.h does not contain HTTP_STATUS_MAP", "body": "This is needed by tang.\r\n\r\nsee also: https://github.com/latchset/tang/issues/19", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tatsuhiro-t": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/386", "title": "HTTP/0.9 does not have header fields", "body": "According to https://www.w3.org/Protocols/HTTP/AsImplemented.html, HTTP/0.9 does not have header fields, and single CR + LF pair (or just LF) after a request line signals the end of request.\r\nBut current http-parser waits for 2nd CR + LF pair.\r\n\r\nSee how apache works:\r\n\r\n```\r\n$ telnet 127.0.0.1 80\r\nTrying 127.0.0.1...\r\nConnected to 127.0.0.1.\r\nEscape character is '^]'.\r\nGET /\r\n<html><body><h1>It works!</h1>\r\n<p>This is the default web page for this server.</p>\r\n<p>The web server software is running but no content has been added, yet.</p>\r\n</body></html>\r\nConnection closed by foreign host.\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/311", "title": "Allow non-standard HTTP method", "body": "This change adds non-standard HTTP method support.  We added new\ncallback on_method of type http_data_cb, which notifies incoming\nmethod.  For non-standard HTTP method, method field in struct\nhttp_parser becomes HTTP_METHOD_UNKNOWN.\n\nThe non-standard HTTP method is disabled by default, and must be\nexplicitly enabled by giving -DHTTP_PARSER_METHOD_CB=1 on build time.\nThis is for backward compatibility; because non-standard HTTP method\nis now accepted rather than rejected.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TechnikEmpire": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/384", "title": "When parsing response that omits status message text, on_status is never called", "body": "On status callback does not get invoked when we're dealing with a web server that omits the status text from the status line. Examples of servers doing this are kijiji.\r\n\r\nExample from in the wild:\r\n```\r\nGET \r\nhttps://www.kijiji.ca/h-lloydminster-ab/1700095\r\n\r\nStatus: HTTP/1.1 200\r\n```\r\n\r\nServer is advertised as being nginx.\r\n\r\nWhen parsing the response, `on_status` will never be called. Not sure if this is intended or not, I started looking into the spec for this and didn't see any `MUST`'s with regards to the status text. I came up with a solution to work around this personally so I don't care anymore, just FYI.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sachinHPrabhu": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/382", "title": "Request for information about the schedule of next release", "body": "The master branch of the http-parser project already has a fix that I am interested in.\r\n\r\nTolerate non-compliant status line responses \r\nhttps://github.com/nodejs/http-parser/commit/3b0da34d83e4eace29cc49e3b659bf630537b94c\r\n\r\nHence I wished to know if there is any schedule for next release of the http-parser.\r\n\r\nThanking You.\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WilCrofter": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/381", "title": "Request new release: v2.7.1, does not build with gcc 7.1.1 due to FALLTHROUGH issue", "body": "Although the FALLTHROUGH issue was fixed in [0852bea](https://github.com/nodejs/http-parser/commit/0852bea482e0842b0445c14b19dc9b318a6c4eba) the last release predates the fix.\r\n\r\nv2.7.1 is currently a dependency of [JuliaWeb/HttpParser.jl](https://github.com/JuliaWeb/HttpParser.jl) which will, of course, not build with current versions of gcc.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rnburn": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/380", "title": "Makefile is broken for OS X", "body": "If you try to install on OS X, you'll get this error\r\n```\r\ncc  -I. -DHTTP_PARSER_STRICT=0  -Wall -Wextra -Werror -O3  -fPIC -c http_parser.c -o libhttp_parser.o\r\ncc  -shared -o libhttp_parser.2.7.1.dylib libhttp_parser.o\r\ninstall -D  http_parser.h /usr/local/include/http_parser.h\r\ninstall: illegal option -- D\r\nusage: install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 file2\r\n       install [-bCcpSsv] [-B suffix] [-f flags] [-g group] [-m mode]\r\n               [-o owner] file1 ... fileN directory\r\n       install -d [-v] [-g group] [-m mode] [-o owner] directory ...\r\nmake: *** [install] Error 64\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RekGRpth": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/371", "title": "http_status_str", "body": "```c\r\nconst char *http_status_str(enum http_status s) {\r\n    switch (s) {\r\n#define XX(num, name, string) case HTTP_STATUS_##name: return #num \" \" #string;\r\n    HTTP_STATUS_MAP(XX)\r\n#undef XX\r\n        default: return \"<unknown>\";\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "povilasb": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/362", "title": "How to disable automatic chunks decoding?", "body": "> The parser decodes the transfer-encoding for both requests and responses transparently. That is, a chunked encoding is decoded before being sent to the on_body callback.\r\n\r\nIs it possible to configure parser not to decode chunked encoding?\r\nI would like to receive chunks in `on_body` unmodified.", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinniefalco": {"issues": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/319", "title": "http-parser fails to detect chunked encoding at the end of a list", "body": "Given the header:\n\n```\nTransfer-Encoding: gzip, chunked\\r\\n\n```\n\nThe parser will not set chunked encoding when it should:\nhttps://tools.ietf.org/html/rfc7230#section-3.3.1\n\nEncodings are applied left to right and removed from right to left. If the parser encounters the `chunked` token as the last item when the Transfer-Encoding value is a comma separated list, it should consider the message body to be chunk encoded.\n\nI haven't actually tried this so I might be wrong but I see no code for finding a comma in Transfer-Encoding. However, the parser DOES handle comma separated lists correctly for the Connection header.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318", "title": "http-parser impossible condition check", "body": "Consider this code (from http_parser.c):\n\n```\n            /* Transfer-Encoding: chunked */\n            case h_matching_transfer_encoding_chunked:\n              parser->index++;\n              if (parser->index > sizeof(CHUNKED)-1\n                  || c != CHUNKED[parser->index]) {\n                h_state = h_general;\n              } else if (parser->index == sizeof(CHUNKED)-2) {\n                h_state = h_transfer_encoding_chunked;\n              }\n              break;\n```\n\nIt seems `parser->index > sizeof(CHUNKED)-1` can never be true, because if the token being checked matches, we would set `h_state = h_transfer_encoding_chunked` before `parser->index` can ever exceed `sizeof(CHUNKED)-2`. And if the token being checked doesn't match, then we will set `h_state = h_general` before `parser->index` can exceed `sizeof(CHUNKED)-1`.\n\nI haven't actually tested this so I am not 100% sure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grobian": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd3850c048f7a69db2f066d267797fbc3680d9a0", "message": "Makefile: set install_name on macos\n\ninstall_name on Mach-O is similar to SONAME on ELF, except that it needs\na full path instead of just the basename.\n\nFixes: https://github.com/nodejs/http-parser/issues/356\nPR-URL: https://github.com/nodejs/http-parser/pull/358\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/8ea9532378291b5a9c27ab61bb5cff336cc396b5", "message": "Makefile: set versions for SONAME correctly\n\nRaised in issue #356, reduce version number in SONAME to MAJOR.MINOR.\nWhile at it, create a symlink the from SONAME to the library, instead of\nthe other way around, and add a (standard) unversioned symlink to the\nlibrary to aid the ordinary linking process.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/359\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bnoordhuis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/89279ab6135a63159200928da6e544135bf98301", "message": "Update license boilerplate.\n\nThe boilerplate included attribution to NGINX that created confusion\nbecause NGINX is distributed under a different license (BSD, not MIT.)\n\nTo the best of everyone's knowledge, no actual NGINX code remains.\nRemove the attribution to clear up the confusion.\n\nFixes: https://github.com/nodejs/http-parser/issues/389\nPR-URL: https://github.com/nodejs/http-parser/pull/390\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/05525c5fde1fc562481f6ae08fa7056185325daf", "message": "Ignore Upgrade header outside of 101 response.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/260c52233044cdfad4d84b01d3dba11c2786c794", "message": "Fix typo in test name.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/364\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/cacb07d2b4ebcd86fc44fd6ee3f0020125e7a9a6", "message": "parser: fix Content-Length header parsing.\n\nCommit e2e467b (\"Update http-parser to 2.6.1\") enforces that messages\ncontain no more than one Content-Length header but it considers any\nheader that starts with \"Content-Length\" as a duplicate.\n\nFix: https://github.com/nodejs/http-parser/issues/324\nPR-URL: https://github.com/nodejs/http-parser/pull/325\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920", "body": "Trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921", "body": "s/seciont/section/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929", "body": "Maybe avoid the extra level of indentation:\n\n``` c\nif (parser->type != HTTP_RESPONSE) {\n  return 1;\n}\nif (parser->status_code / 100 == 1 || /* etc */\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/330929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905", "body": "s/swtich/switch/\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906", "body": "Trailing whitespace. Happens in one other place too.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909", "body": "This doesn't catch URLs like `http://example.com:/`, v will be zero. I'm not sure if that's a bug or a feature.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694", "body": "James, isn't that redundant? If the `on_headers_complete` callback hasn't fired yet, you know you're still parsing headers.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/387694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760", "body": "You need to preserve `parser->data`.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/391760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878", "body": "No, to make it easier to detect overflow (signed overflow is undefined, unsigned overflow is not).\n\n`(uint64_t) -1` is a shorthand / fallback for ULLONG_MAX.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920", "body": "Yes-ish. The reason that I don't is that `<limits.h>` doesn't always define it. I can add something like this:\n\n``` c\n#include <limits.h>\n\n#ifndef ULLONG_MAX\n#define ULLONG_MAX ((uint64_t) -1)\n#endif\n```\n\nYour call.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981", "body": "Cool. Updated in 8f290a5.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578", "body": "Style issue: arguments should line up if split over multiple lines.\n\n``` c\nrv = http_parser_parse_url(test->url,\n                           strlen(test->url),\n                           test->is_connect,\n                           &u);\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/427578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125", "body": "Sorry, missed this one. Don't use `u_int`, it's a POSIX-ism.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/428125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622", "body": "What's this supposed to do?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624", "body": "Oh, I think I get it - you need to know _if_ this version of http-parser is compiled in debug mode.\n\nI initially read it as a switch to turn on/off debug mode.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064", "body": "Wrap at 80 columns.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069", "body": "Style: too much whitespace.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077", "body": "Use NULL, not zero. Signals to the reader that it's a pointer.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083", "body": "Superfluous blank line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089", "body": "Why is that here?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091", "body": "Don't use C++/C99 comments.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104", "body": "Long line.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1175104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ploxiln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/1b79abab34d4763c0467f1173a406ad2817c1635", "message": "simplify parsing M-SEARCH method, group P methods\n\ncan use same switch-lookup for '-' char case\nmove PROPFIND and PURGE to be next to the other P methods\n\nchange IS_ALPHA(ch) to  A <= ch <= Z\n(very slight optimization, only uppercase will match in switch)\n\nPR-URL: https://github.com/nodejs/http-parser/pull/323\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "misery": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/0852bea482e0842b0445c14b19dc9b318a6c4eba", "message": "Fix FALLTHROUGH warning in switch of GCC7\n\nPR-URL: https://github.com/nodejs/http-parser/pull/357\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gatzka": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/291a32cc51698318adfbe81ca24e77da1a735365", "message": "Include stddef.h instead of sys/types.h.\n\nThe include is required for type size_t. stddef.h should be available\non every platform, sys/types.h is not.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/360\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fake666": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/3b0da34d83e4eace29cc49e3b659bf630537b94c", "message": "Tolerate non-compliant status line responses\n\n- original fix is from daeon: https://github.com/daeon/http-parser/\n\n  \"Tolerate web servers which do not return a status message in the\n   return response.\n\n   I have noticed this usse on several websites such downloads from\n   mediafire.com\"\n\n- original pull request: https://github.com/nodejs/http-parser/pull/254\n- i merely added the status_cb_called unit test check, there already\n  is a test that triggers this without the patch (a 301 without a\n  reason phrase).\n\nPR-URL: https://github.com/nodejs/http-parser/pull/367\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mscdex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/9f489a474d5761ca5715f1e13a3d39023a656424", "message": "parser: fix HTTP version parsing\n\nOnly one digit is allowed for the major version and only one is\nallowed for the minor version according to RFC 7230.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/366\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "npmccallum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/335850f6b868d3411968cbf5a4d59fe619dee36f", "message": "parser: HTTP_STATUS_MAP(XX) and enum http_status\n\nThis patch provides an enum for the standardized HTTP status codes.\nAdditionally, the HTTP_STATUS_MAP(XX) can be used for other purposes as\nwell, such as code-to-name lookups and code-based switch statements.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/337\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "indutny": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/feae95a3a69f111bc1897b9048d9acbc290992f9", "message": "Bump version to 2.7.1"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/9b0d5b33ebdaacff1dadd06bad4e198b11ff880e", "message": "Bump version to 2.6.0"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/04d28a7377c03bac762e44927c234d9b3d58462a", "message": "parser: returning 2 from on_headers_complete\n\nReturning `2` from on_headers_complete will tell parser that it\nshould not expect neither a body nor any futher responses on\nthis connection. This is useful for handling responses to a\nCONNECT request which may not contain `Upgrade` or\n`Connection: upgrade` headers.\n\nSee: https://github.com/nodejs/node/pull/6198\nPR-URL: https://github.com/nodejs/http-parser/pull/299\nReviewed-By: Brian White <mscdex@mscdex.net>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/777ba4ededf53040f4c5cc5d53f26201e705ebaf", "message": "src: introduce `http_parser_url_init`\n\nThe struct must be zero-initialized, but this wasn't explicitly stated\nanywhere in headers. Introduce `http_parser_url_init` API method that\nwill do it.\n\nFixes: #209\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Brian White <mscdex@mscdex.net>\nPR-URL: https://github.com/nodejs/http-parser/pull/225"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/295", "title": "http_parser: skip lws/rws in header field", "body": "Skip whitespace from the left and the right sides of the header field.\n\nSee: https://github.com/nodejs/node/pull/5844\n\ncc @jasnell \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guoxiao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/b2cc8e49f39277b197c6f3592708309ee78c015e", "message": "test: remove \u2018nread\u2019, which is not used\n\nPR-URL: https://github.com/nodejs/http-parser/pull/300\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oldratlee": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/737627b2b232f6a47dffca7ea17a8e3c3e2231a0", "message": "readme: improve format, fix code syntax\n\nPR-URL: https://github.com/nodejs/http-parser/pull/305\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbergstroem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/5651aea80472bf9a1f7d2718c78c0de08984aa1f", "message": "test: add a test for for obstext characters (> 0x80)\n\nCreate a test added for nodejs in nodejs/node@954a4b4b.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/dbcda1961c25a4f945a55da8e9dd3af6e4df65f0", "message": "Update http-parser to 2.6.2\n\nFixes a header parsing bug for obstext characters (> 0x80)\n\nAdaption of nodejs/node@954a4b4b:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Mon Feb 15 09:40:58 2016 -0800\n\n    deps: update to http-parser 2.6.2\n\n    Fixes http-parser regression with IS_HEADER_CHAR check\n    Add test case for obstext characters (> 0x80) is header\n\n    PR-URL: https://github.com/nodejs/node/pull/5237\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Myles Borins <myles.borins@gmail.com>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/287\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/678a9e21f11e5ea93e5e17a2302390f88a6a8c46", "message": "test: Assert against correct error messages\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228", "body": "Hey, any reason you didn't merge my commit (http://github.com/jbergstroem/http-parser/commit/4c521a67fe5eaaee539cb68a4b66c8367afcc4fd)? Let me know if I'm doing something wrong and i'll try to fix it.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dolmen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/fd65b0fbbdb405425a14d0e49f5366667550b1c2", "message": "src: refactor method parsing\n\nUse a switch and a macro to branch parsing of HTTP methods.\nEasier to read and much shorter.\n\nIn this commit, the order of branches dispatching is the same as in the\noriginal code, to ease review. Reordering branches by descending\nfrequency will improve speed too.\n\nPR-URL: https://github.com/nodejs/http-parser/pull/273\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasnell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/e2e467b91262246b339fb3d80c8408d498b4a43b", "message": "Update http-parser to 2.6.1\n\nIncludes parsing improvements to ensure closer HTTP spec conformance\n\nAdaption of nodejs/node@4f4c8ab3b4cea246d2ece6ca006fe280241d84a4:\n\n    Author: James M Snell <jasnell@gmail.com>\n    Date:   Wed Feb 3 17:28:48 2016 -0800\n\n    deps: update http-parser to version 2.6.1\n\n    includes parsing improvements to ensure closer HTTP spec conformance\n\n    PR-URL: https://github.com/nodejs/node-private/pull/26\n    Reviewed-By: Rod Vagg <r@va.gg>\n    Reviewed-By: \u0421\u043a\u043e\u0432\u043e\u0440\u043e\u0434\u0430 \u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 <chalkerx@gmail.com>\n    Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\n\nPR-URL: https://github.com/nodejs/http-parser/pull/279\nReviewed-By: James M Snell <jasnell@gmail.com>"}, {"url": "https://api.github.com/repos/nodejs/http-parser/commits/bee4817ebea0eaa592143c7825f5c96f040c84e4", "message": "Bump version to 2.6.0"}], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/326", "title": "add settings flags, refactor lenient_http_headers setting", "body": "A previous change during a security fix added the ability to set a `lenient_http_headers` flag on the HTTP Parser instance. The way it was done was a bit of a hack at the time in order to avoid an ABI breaking change. This PR adds a new `uint32_t` flags field to `http_parser_settings` in order to provide a more robust and correct way of passing these kinds of settings into a parser instance.\n\n_Note_: This is an ABI change so it would require a semver-major bump\n\n/cc @indutny \n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/4e382f96e6d3321538a78f2c7f9506d4e79b08d6", "message": "readme: fix build status badge\n\nPR-URL: https://github.com/nodejs/http-parser/pull/277\nReviewed-By: Fedor Indutny <fedor@indutny.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lberezy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/nodejs/http-parser/commits/483eca7989d655b34b01f65a8faad82ddb79813c", "message": "doc: updated README.md to include multi-threading example\n\nIncluded information and example on communicating data between\nthread local and callback scopes. This shows how http-parser\ncan be used in a multi-threaded context.\n\nReviewed-By: James M Snell <jasnell@gmail.com>\nReviewed-By: Fedor Indutny <fedor@indutny.com>\nPR-URL: https://github.com/nodejs/http-parser/pull/256"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DCjanus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/388", "title": "fix typo", "body": "from 'futher' to 'further'\r\n\r\n-----------------\r\n\r\nI'm not a native English speaker, maybe there is a word 'futher', but I can't find it by Google.\r\nIf I'm Wrong, forget me\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nibaozhu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/379", "title": "install `package'", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simsong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/378", "title": "add .deps and .dirstamp to .gitignore", "body": "I use http-parser in another project as a submodule. When I run autotools configure, it creates in the http-parser sub directory a directory and a file:\r\n\r\n```\r\n[user@localhost http-parser]$ git status\r\nHEAD detached from 8d9e5db\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n\t.deps/\r\n\t.dirstamp\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n[user@localhost http-parser]$\r\n```\r\n\r\nIt would be super-nice to have `git status` **not** warn me about these two files generated by autotools.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "izaid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/377", "title": "[WIP] CMake Support", "body": "CMake support has been requested a few times, and there has been at least one PR about it. This is a new attempt at it -- I think it is relatively simple. Happy to build it out more if that is what is needed.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flandr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/374", "title": "Add basic CMake support", "body": "Only supports building the main library target (static and dynamic).\r\n\r\nRefs #257", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alperakcan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/369", "title": "ignore headers transfer_encoding_chunked and content_length to work with http assemblers.", "body": "added ignore_header_transfer_encodig_chunked and ignore_header_content_length to settings.\r\n\r\nignore_header_content_length:\r\n  useful if body length and content length does not match. happens with owa servers. or working with pre http assemblers that unzips compressed content without changing content-length.\r\n\r\nignore_header_transfer_encodig_chunked:\r\n  useful when working with pre-http assemblers which assembles chunked content into one http packet without changing transfer-encoding field.\r\n\r\nmay be useful for someone.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kunalspathak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/352", "title": "http header parsing", "body": "http_parser along with other http request information supplies header\r\nfields to the consumer. In `node` case, it creates a new `JSString`\r\nof these header fields which involves memory allocation. If parser\r\nkeeps track of headers while parsing and return a unique id to `node`\r\nthat help distinguish the known header name, `node` don't have to\r\nallocate for known headers and it can use the pre-created `JSString`\r\nfor the header fields. See discussion in https://github.com/nodejs/node/issues/10930\r\n\r\nThe approach I have taken is while scanning the request, keep track\r\nof known headers and update the `header_state` accordingly. `node` or\r\nany consumer can consume the `header_state` information and decide\r\nto use cached http header field instead of creating new string. I try to\r\nmatch traditional cases http header. e.g. In Content-Type 'C' and 'T' has\r\nto be upper case for the header to qualify for traditional cased header.\r\nI use `traditional_case_http_headers` to track this information.\r\n\r\nPerformance is flat for node's http benchmark except bench-parse where\r\nsometimes I noticed 5% regression. I am not sure if it was due to noise.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akatrevorjay": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/351", "title": "Cython bindings -- Interested?", "body": "Hi, a long time ago I wrote Cython bindings for this. If I clean it up are you interested in merging?\r\n\r\n(notably the build process and add some docs)\r\n\r\nTy,\r\nTrevor", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roman-neuhauser": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/348", "title": "Unbreak `make install` in BSDs", "body": "I've only tested this in freebsd-12.0 where the changes get me from syntax errors in the Makefile to passing `port test` with flying colors.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shindo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/347", "title": "parser: fix handling of newlines before HTTP responses", "body": "This diff fixes ignoring of CR and LF chars received before HTTP response's start line the same way as they are handled with HTTP_REQUEST and HTTP_BOTH parser types.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdamMajer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/346", "title": "makefile: Flexible install fixes", "body": "Fixing three Makefile related things,\r\n\r\n1. LIBDIR should be configurable. INCLUDEDIR as well\r\n2. fix SONAME so it represents actual ABI compatibility\r\n3. symlinks should not have absolute paths\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shekhei": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/342", "title": "Various optimizations", "body": "Hi, basically I was just messing around and did some benchmarking, found some interesting things, so I made some changes. Mostly to do with removing some of the branches and created a SIMD version of finding CRLF that doesn't need to walk the whole payload twice(worst case)\n\nBelow are the benchmark results\n### OSX (el capitan, mbp 13\" early 2015, 3.1 GHz Intel Core i7)\n#### Clang\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 5.761632 | 867809.687500 | 5.104409 | 979545.312500 | 11.4069 |\n| 5.769115 | 866684.062500 | 5.104001 | 979623.625000 | 11.5289 |\n| 5.803461 | 861554.875000 | 5.086198 | 983052.625000 | 12.3592 |\n| 5.779534 | 865121.687500 | 5.082990 | 983672.937500 | 12.0519 |\n| 5.762670 | 867653.375000 | 5.092542 | 981827.875000 | 11.6288 |\n#### GCC 4.9\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 4.297466 | 1163476.375000 | 3.787979 | 1319965.000000 | 11.8555 |\n| 4.159397 | 1202097.250000 | 3.774015 | 1324849.000000 | 9.26533 |\n| 4.230322 | 1181943.125000 | 3.788900 | 1319644.250000 | 10.4347 |\n| 4.214539 | 1186369.375000 | 3.772407 | 1325413.750000 | 10.4906 |\n| 4.162938 | 1201074.750000 | 3.763118 | 1328685.375000 | 9.6042 |\n### ubuntu 14.04 ( Intel Core i7-6700 @ 3.40GHz )\n\n| time(master) | req/s(master) | time(new) | req/s(new) | percent |\n| --- | --- | --- | --- | --- |\n| 3.186016 | 1569358.000000 | 2.815905 | 1775628.000000 | 11.6167 |\n| 3.186449 | 1569144.875000 | 2.846761 | 1756382.125000 | 10.6604 |\n| 3.190864 | 1566973.625000 | 2.877822 | 1737425.125000 | 9.81057 |\n| 3.183230 | 1570731.625000 | 2.813425 | 1777193.250000 | 11.6173 |\n| 3.190520 | 1567142.625000 | 2.849443 | 1754728.875000 | 10.6903 |\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jlesk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/334", "title": "build: vms and os400 support", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bc-lee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/296", "title": "Fix: suppress warning C4244 on MSVC", "body": "MSVC 2015 gives some warnings on http_parser.c with \n\n> warning C4244: '=' : conversion from 'int' to 'uint16_t', possible loss of data\n> It will supress this warning.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "claudix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/294", "title": "Added support for compiling on MinGW platform", "body": "Added rules to compile on MinGW platforms (Microsoft Windows environments):\n- Use 'gcc' as compiler.\n- Generate DLL file when compiling the library.\n- Disable -fPIC when compiling the library (on MinGW platforms all code is already position independent and setting this flag issues an error).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RandoMan70": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/285", "title": "Introduce raw data callbacks", "body": "These callbacks can be used when developing transparent HTTP traffic analysis and filtering. \nThe main goal of it is to handle transmitted data as-is, but having ability to distinguish data between headers, bodies and different requests.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/258", "title": "Implement on_header_raw and on_body_raw callbacks", "body": "This patch adds on_header_raw and on_body_raw callbacks. \nWhen parser finish processing of new portion of data (or when it switches between header/body state) it run these callbacks, attaching exact stream data.\nThese callbacks called after usual header and body callbacks.\n\nPatch contains bug: after parsing error detected it still can call raw callback, so we need to check error status of a parser inside raw callbacks.\n\nPatch based at old revision, so we need to dig into parser logic again.\nBase revision: 959f4cb12748ea3aa2c4ec3183ff4acbf0fd222f\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbargren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/276", "title": "Add support for digits, '+', '-', and '.' to the scheme of a URI", "body": "Addresses #275.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "staticfloat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/264", "title": "Make library symlinks relative", "body": "This allows distributions to be more easily relocatable, such as when bottling this library in Homebrew.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erikjohnston": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/243", "title": "Allow repeatable calls to 'make install'.", "body": "Currently if `make install` is invoked multiple times it fails due to it trying to recreate the `libhttp_parser.so` symlink. \n\nAdding the `-f` flag to the `ln` invocations fixes this, but will change the default http-parser used to the newly installed version if there are multiple versions installed. I _think_ this is what we want to do anyway since we are clobbering any existing `http-parser.h` during install, so not repointing the symlink would result in a mismatch between the default library and header versions.\n\nThe alternative would be to version `http-parser.h` and add a symlink for it, while trying to ensure we always update both symlinks atomically.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThisIsMissEm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/214", "title": "Added support for SOURCE", "body": "As per tweets: https://twitter.com/indutny/status/557499042243289088\n\nIt seems new handling for upgrade was added at some point, which makes the tests break. Unfortunately I don't have time to work out how to make the tests pass again.\n\nSOURCE should essentially be handled like Upgrade, I believe, and switched to data/tcp mode after parsing headers.\n\n/cc @indutny @bnoordhuis \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacquesg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/184", "title": "Solaris doesn't necessarily have stdint.h, use inttypes.h", "body": "Solaris doesn't necessarily have `stdint.h`, it's more portable to use `sys/inttypes.h`.\n\nSee:\nhttp://wiki.opencsw.org/porting-faq#toc1\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vincentbernat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/159", "title": "Add two hooks to be executed when a chunk is downloaded.", "body": "One hook is executed right before receiving a new chunk. The second\none is executed just after. parsertrace.c is updated to use those\nhooks for display.\n\nI am using this for experimentation with rendering. This is more reliable than looking at timestamps to know where chunks start and end.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078", "body": "Yes this is still true. Annoying but it make a lot of other things much simpler (i.e. the http_parser does not have to make decisions about how how you might pre-allocate this)\n\nHere are two examples\n1) http://github.com/ry/http-parser/blob/37a0ff8928fb0d83cec0d0d8909c5a4abcd221af/test.c#L403 \n2) http://github.com/ry/node/blob/842eaf446d2fdcb33b296c67c911c32a0dabc747/src/http.js#L284 (in javascript, but it's just a thin abstraction over the parser callback)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080", "body": "Here is an untested code snippit which more directly answers your question: http://gist.github.com/155877\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082", "body": "I would gladly accept a patch for better documentation of this tricky part of the library. :)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/31082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067", "body": "fixed in b5b116e59ea3a22b4898705f30c5b0ffe7ce1e7c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182", "body": "sorry, i guess you're the same that reported the news.ycombinator.org bug in node. i just realized this is the same error. the fix I gave doesn't solve the problem.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/104182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421", "body": "It should.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623", "body": "Please show an example where it is not called. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408", "body": "You're not making the call for EOF. Do this:\n    http_parser_execute(&parser, settings, response, strlen(response));\n    http_parser_execute(&parser, settings, NULL, 0);\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062", "body": "Your response is missing the last `\\r\\n`. Chunked messages must be terminated by `0\\r\\n\\r\\n` \nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1\n\nAre you seeing a response like this in real-life?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512", "body": "thanks for the note. i added some text in 69cf8d8da9ba0907192f26239eb41223871dd46c\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/158512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346", "body": "you can see where it failed by looking at the result of http_parser_execute()\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361", "body": "yes, but it exits immediately if there was an error. so if http_parser_execute() < sizeof(buf) then there was an error (or an Upgrade). You can use this to point out where the error was - which is perhaps more useful than an error code.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407", "body": "You can communicate your state (or what action to take) to the code calling `http_parser_execute()` through your `void *data` object. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479", "body": "Can you please provide a dump of such a request?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901", "body": "closing.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935", "body": "Fixed in 4cf39fd2fa8d1b52338ad3c4dd9ae6b3f32d72f4.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/265935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375", "body": "Thanks for the report. Fixed in 120f0f6e09773dbe003841b5b339f9284dd63aad.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/325375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885", "body": "thanks. comitted in a66c61c190a90653da3fd7c1443a1a7329472567\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/463885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139", "body": "There is no reason phrase callback.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181", "body": "Currently there is no way. The status code can is set in the parser structure.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949", "body": "no, unfortunately not. \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277", "body": "no\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595", "body": "CONNECT too. thanks\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267", "body": "cliff suggests the name 'lowcase' should change. i agree. can't think of anything appropriate right now though.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/116267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239", "body": "Sorry - it got lost in my inbox.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419", "body": "nread is just for the header\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793", "body": "why unsigned? just to save a bit?\n\nforgive my ignorance but what is `(uint64_t) -1` ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913", "body": "can you use `ULLONG_MAX` instead?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969", "body": "that's fine - i just want it for clarity\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/374969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "suhoparov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504", "body": "And in what sense not to call message_complete ?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/154504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150", "body": "int message_complete_cb(http_parser \\* p) {\n    puts(**FUNCTION**);\n    return 0;\n}\n\n```\nconst char * response = \n    \"HTTP/1.1 200 OK\\r\\n\"\n    \"Date: Fri, 31 Dec 1999 23:59:59 GMT\\r\\n\"\n    \"Content-Type: text/plain\\r\\n\"\n    \"Transfer-Encoding: chunked\\r\\n\"\n    \"\\r\\n\"\n    \"1a\\r\\n\"\n    \"abcdefghijklmnopqrstuvwxyz\\r\\n\"\n    \"10\\r\\n\"\n    \"1234567890abcdef\\r\\n\"\n    \"0\\r\\n\";\n```\n\nmain() ...\n    http_parser parser;\n    http_parser_init(&parser, HTTP_RESPONSE);\n\n```\nhttp_parser_settings settings;\nsettings.on_body = data_cb;\nsettings.on_message_begin = message_cb;\nsettings.on_header_field = header_field_cb;\nsettings.on_header_value = header_value_cb;\nsettings.on_headers_complete = headers_complete_cb;\nsettings.on_message_complete = message_complete_cb;\n\nhttp_parser_execute(&parser, settings, response, strlen(response));\n```\n\noutput: calls all callback unless \"message_complete_cb\".\ncode is master branch on VC++ 7.1\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456", "body": "the same, message_complete_callback doesn't call\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/155456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180", "body": "Sorry, yes it invalid response, with CRLF good works. No in real-life, this my design)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183", "body": "closed\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/156183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353", "body": "wtf, that was fast. Doesn't `http_parser_execute` return the number of bytes parsed?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390", "body": "hrm, I'd like to use the return values for indicating the reason why I made http-parser exit; for example after I got the request URL and figured out I want to answer with HTTP 404, it would be comfortable to simply return `404`.\n\nIf I manually break parsing, I've got a reason to and I most probably want to communicate that reason back to the code that called `http_parser_execute` so that code can decide what steps to take next.\n\nSo please add this feature. :-)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/221390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ptlomholt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507", "body": "A sample request from http://muffin.doit.org/docs/rfc/tunneling_ssl.html:\n\nCONNECT home.netscape.com:443 HTTP/1.0\nUser-agent: Mozilla/1.1N\nProxy-authorization: basic aGVsbG86d29ybGQ=\n\nI can get a dump, but from the sample it is pretty obvious what the problem is...\n\nThe parser fails when it encounters the first period in the hostname as it assumes it is parsing the schema, not the hostname!\nI guess an easy fix would be to skip directly to _s_req_host state_ instead of _s_req_schema_ iff the request is a CONNECT...\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/244507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jterrace": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092", "body": "Fixed in d0dfc987732a25ee1f2236526e2801f06678cda4\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/335092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402", "body": "Why did you change nread back to 32-bit? Isn't it possible for a response to be > 4GB? I realize it's rare, but still possible?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/131402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "arhrodriguez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/350174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mnot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895", "body": "Just FYI, HTTPbis is discouraging the use of multi-line headers; from http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-3.2 : \n\n   Historically, HTTP header field values could be extended over\n   multiple lines by preceding each extra line with at least one space\n   or horizontal tab character (line folding).  This specification\n   deprecates such line folding except within the message/http media\n   type (Section 10.3.1).  HTTP/1.1 senders MUST NOT produce messages\n   that include line folding (i.e., that contain any field-content that\n   matches the obs-fold rule) unless the message is intended for\n   packaging within the message/http media type.  HTTP/1.1 recipients\n   SHOULD accept line folding and replace any embedded obs-fold\n   whitespace with a single SP prior to interpreting the field value or\n   forwarding the message downstream.\n\nI.e., the parser still SHOULD be able to handle them, but the spec now admits they're not widely supported.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909", "body": "This appears to be caused by this:\n          if (c < 'a' || 'z' < c) goto error;\n\nwhich rejects non-alphabetic first characters. The BNF for the field name in HTTP is 'token' which accepts a much broader range of characters (see http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-11#section-1.2.2).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/issues/comments/451909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "temoto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796", "body": "I think that 'ascii*'\nallows matching\nHTTP/1.1 301 \\r\\n\\r\\n  (space between 301 and CRLF)\neither. And if i understand correctly, it would trigger response phrase callback with empty phrase.\n\nIs that proper?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/25796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180", "body": "How to read reason phrase then?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/26180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133", "body": "And new parser will not support custom methods?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/36133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "erichocean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944", "body": "Happy to see you going by hand, but the Ragel parser had the advantage of the graphical Dot state machine output. Are you maintaing a similar FSM for this version, and if so, would you please copy the .Dot file into the repository? Thanks! \n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/35944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cmlenz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594", "body": "Afaik, TRACE and OPTIONS aren't WebDAV methods, but defined by the HTTP/1.1 spec.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/37594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lericson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707", "body": "Heh, funny how it's the exact same modifications though - one huge coincidence right there ;-) I mean especially what with the `CC?=gcc` part, that's not even necessary as `CC` is set by default in a Makefile.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/121707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ignacio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521", "body": "These typedefs don't work with Mingw. #ifdef _WIN32 should check for mingw and/or cygwin\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/189521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pgriess": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306", "body": "Thanks. I was just about to submit a patch for this ;)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/397306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487", "body": "Yeah, it's just request_url now. Check out the discussion on this pull request for the justification at ry/http-parser#54.\n\nWhat were you using the callbacks for? If this is node-land, can you just use the the 'url' module to parse what you want?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227", "body": "I believe we need to be doing this status code check for HTTP/1.0 as well.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407", "body": "Yeah, if the client and server both agree on keep-alive (i.e. by both sending \"Connection: keep-alive\" headers), we're dealing with the same situation as HTTP/1.1: we have a bytestream that contains a response with no body followed by another response. The case we're dealing with here is not that we can't determine the response length -- it's that we know that the length is 0.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/846407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088", "body": "Accepting any non-CR/LF character is a bit more liberal than the RFC allows, but I don't really think it's a problem. Also, this doesn't handle LWS properly (we can get a CRLF followed by some number of HTs or SPs and continue the reason). Check out the way the s_header_value_lws state works.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931", "body": "Yeah, agreed that we should be validating that.\n\nHowever, this isn't a regression. I'll file a bug for this. We have similar problems with handling empty hosts as well, both of which probably need a new state to indicate the beginning of the entity so that we can verify that there is at least one character.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/334931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628", "body": "Filed #74 for this.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/335628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456", "body": "so it's just request_url now? I'm using the others and wouldn't mind them staying so I dont have to re-parse them in c land, but it's not a show stopper I guess, pretty simple to delimit\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563", "body": "nah it's a none-node related C project, thanks I'll check it out!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/487563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "koichik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937", "body": "@pgriess - With HTTP/1.0 or earlier, Keep-Alive is disabled by default. Therefore, I think that we do not need it. Keep-Alive is used if and only if the response has `Connection: Keep-Alive` (or legacy `Keep-Alive:`, but http-parser does not seem to support it).\n\n[EDIT] I may understand what you mean. HTTP/1.0 server sends `Connection: Keep-Alive`, but the body length may be unable to be determined.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/845937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dhruvbird": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2133565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kolbyjack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414", "body": "I think you need to goto reexecute_byte when switching to a request here in case ch is a space\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429", "body": "This will still fail on GENERICLONGMETHOD, since that 'L' isn't a space, it'll fall through to where it still indexes method_strings\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498", "body": "Since it's walking through the full HTTP now, would it be better to deal with s_req_or_resp as a single state kind of like the request methods?  Use a string \"HTTP\" and parser->index?\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cmr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440", "body": "Herp, I knew there was a reason I initially had a nested if.\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2341440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216", "body": "That would simplify the code a lot, great suggestion (thanks for all the help!)\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/comments/2342216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "postmodern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630", "body": "Correct. This could be a function, but I choose a constant variable since accessing them via FFI is cheaper than function calls.\n\nIn http-parser 2.0, `HTTP_PARSER_DEBUG` can dramatically change the layout of `http_parser`, so I need to check if debug was enabled when defining my own [FFI Struct](https://github.com/postmodern/ffi-http-parser/blob/master/lib/ffi/http/parser/instance.rb#L11-33).\n", "reactions": {"url": "https://api.github.com/repos/nodejs/http-parser/pulls/comments/1039630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}