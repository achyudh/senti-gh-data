{"_default": {"1": {"togarlamhot": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/235", "title": "used Synapse to replace RDS", "body": "Hi guys, \r\ndid you have try synapse to replace RDS?\r\nI have tried it and the result \r\n\r\nI, [2017-04-28T09:59:05.870663 #15534]  INFO -- Synapse::Synapse: synapse: starting...\r\nI, [2017-04-28T09:59:05.870740 #15534]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: Connecting to EC2 region: ap-southeast-1\r\nI, [2017-04-28T09:59:06.592645 #15534]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: ec2tag watcher looking for instances tagged with Name=staging-synapse\r\nI, [2017-04-28T09:59:06.592795 #15534]  INFO -- Synapse::Synapse: synapse: configuring haproxy\r\nW, [2017-04-28T09:59:06.616788 #15534]  WARN -- Synapse::ConfigGenerator::Haproxy: synapse: restart required because socket command show stat\r\n failed with error #<Errno::ECONNREFUSED: Connection refused - connect(2) for /run/haproxy/admin.sock>\r\nI, [2017-04-28T09:59:06.646909 #15534]  INFO -- Synapse::ConfigGenerator::Haproxy: synapse: restarted haproxy\r\nW, [2017-04-28T09:59:06.820603 #15534]  WARN -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: no backends for service proddb; using default servers: [{\"name\"=>\"staging-synapse\", \"host\"=>\"staging-database.blabla.rds.amazonaws.com\", \"port\"=>5432}]\r\n\r\nthanks", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "udangel-r7": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/234", "title": "No support for relative server_port overrides", "body": "haproxy supports relative port addresses, prefixed by a \"+\" or \"-\".\r\n\r\nIf this is set the server port is determined by adding the value to the client's port. In the base service_watcher there is currently a check to verify that the override port is an integer which breaks existing configurations. \r\n\r\nI assume nginx doesn't support a similar behaviour, would you accept a patch or should we just maintain our own version?", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ianbamforth": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/233", "title": "ec2tag watcher fails if metadata service is unavailable during a credential refresh", "body": "The `DefaultProvider` takes aws keys from environment variables / config if available, otherwise falling back to ec2 metadata IAM role.  If you are using keys from the latter, they refresh automatically when they get near to expiry.  If the metadata service is down at this point, Synapse enters a broken state, where it has no credentials and cannot recover.  We have seen this in our production environment.\r\n\r\nI'm currently looking at a patch whereby I specifically select the `EC2Provider` if no keys are provided by the environment / config, inserting the following into `ec2tag.rb` before the call to `AWS::EC2.new`:\r\n\r\n`      unless ((@discovery['aws_access_key_id'] || ENV['aws_access_key_id']) \\\r\n              && (@discovery['aws_secret_access_key'] || ENV['aws_secret_access_key'] ))\r\n        AWS.config(:credential_provider => AWS::Core::CredentialProviders::EC2Provider.new(:retries => 0))\r\n      end\r\n`\r\n\r\nDoes this seem like a reasonable approach? Happy to submit a PR.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/210", "title": "docker-api v1.32 dropped support for Ruby 1.9", "body": "No longer possible to install this with Ruby 1.9, as https://github.com/swipely/docker-api/releases/tag/v1.32.0 dropped support for 1.9.  Setting `<1.32` in the `synapse.gemspec` appears to resolve this.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/198", "title": "ec2tag watcher needs to back off if Client.RequestLimitExceeded is returned", "body": "If you have a reasonable number of ec2tag watchers running, you can hit the rate limiter.  Rather than a fixed check_interval, there should be a way of doing some kind of backoff (as per the AWS docs).  If the Client.RequestLimitExceeded is returned, then there definitely needs to be a backoff - otherwise you just continue to hammer on the door, and the rate limit exceedance will never go away.\n\nI'm yet to discover what the rate limit is, but I hit it today with ~6 servers each watching ~24 ec2tags (plus various other odds and sods running in the background) and the default check_interval\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bjoernmeier": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/215", "title": "discovery fails if Zookeeper tree is read only", "body": "Hi,\r\n\r\nwe are using synapse for service discovery and wanted to use it with a read only Zookeeper.\r\nBut during tests we got the following error:\r\n```\r\n/usr/lib/ruby/vendor_ruby/zk/client/base.rb:1083:in `check_rc': inputs: {:path=>\"/level_1/level_2/level_3\", :data=>\"\", :ephemeral=>false, :sequence=>false, :ignore=>:node_exists} (ZK::Exceptions::NoAuth)\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/base.rb:1072:in `call_and_check_rc'\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/threaded.rb:584:in `call_and_check_rc'\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/base.rb:352:in `create'\r\n\tfrom /usr/lib/ruby/vendor_ruby/zk/client/threaded.rb:434:in `create'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse/service_watcher/zookeeper.rb:121:in `create'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse/service_watcher/zookeeper.rb:245:in `zk_connect'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse/service_watcher/zookeeper.rb:39:in `start'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse.rb:48:in `block in run'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse.rb:48:in `map'\r\n\tfrom /usr/lib/ruby/vendor_ruby/synapse.rb:48:in `run'\r\n\tfrom /usr/bin/synapse:60:in `<main>'\r\n```\r\nWhile checking the code we saw that synapse uses zk `exists` to create nodes if they do not exist (e.g. /level_1 exists it will create level_2/level_3).This fails even if the nodes do exist as synapse does not have create permissions in zookeeper.\r\nIt would be great if as long a subtree does not exist only the existing root is watched and on a new node creation the watches are registered on the new subtree instead of creating the subtree.\r\n\r\nThank you.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/185", "title": "Allow name in the DNS service watcher's ping method to configurable", "body": "https://github.com/airbnb/synapse/blob/master/lib/synapse/service_watcher/dns.rb#L18 is hard-coded to airbnb.com .\n\nIdeally this'd be configurable, so we can set it to something internal, so we don't have to depend on airbnb.com's DNS.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomfitzhenry": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/182", "title": "AWS Auto Scaling Group watcher", "body": "", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/181", "title": "In DNS service watcher, re-resolve every $TTL", "body": "The DNS service watcher will re-resolve every `check_interval` seconds. Rather than having to set `check_interval`, and possibly setting it too high/low, it would be nice if it re-resolved every $TTL (whatever the returned TTL is).\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/184", "title": "[WIP] ASG watcher", "body": "Early feedback welcome.\n\nCode mostly copied from ec2tag watcher.\n\nIssue #182 \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bkochendorfer": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/172", "title": "DnsWatcher < BaseWatcher", "body": "We were trying out this service at our organization in an internal datacenter and we temporarily lost internet connection. Because this is resolving the external address of [airbnb](https://github.com/airbnb/synapse/blob/01a2409a5f1e19742ff9380ce683a54b31a4b7ad/lib/synapse/service_watcher/dns.rb#L18) being required as part of 'ping?' it caused synapse to fail entirely. Perhaps throwing a recoverable error rather than a runtime exception would help prevent the entire cluster from collapsing.\n\n``` bash\nI, [2016-02-17T17:34:09.333142 #8263]  INFO -- Synapse::Haproxy: synapse: restarted haproxy\nE, [2016-02-18T16:58:00.932196 #8263] ERROR -- Synapse::Synapse: synapse: encountered unexpected exception #<RuntimeError: synapse: service watcher mongo failed ping!> in main thread\nW, [2016-02-18T16:58:00.932830 #8263]  WARN -- Synapse::Synapse: synapse: exiting; sending stop signal to all watchers\nI, [2016-02-18T16:58:00.932962 #8263]  INFO -- Synapse::ZookeeperDnsWatcher: synapse: stopping watcher mongo using default stop handler\nW, [2016-02-18T16:58:00.933561 #8263]  WARN -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: zookeeper watcher exiting\nI, [2016-02-18T16:58:00.934565 #8263]  INFO -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: zookeeper watcher cleaning up\nI, [2016-02-18T16:58:00.934961 #8263]  INFO -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: closing zk connection to 172.16.151.82:2181,172.16.151.86:2181,172.16.151.87:2181\nI, [2016-02-18T16:58:00.937347 #8263]  INFO -- Synapse::ZookeeperDnsWatcher::Zookeeper: synapse: zookeeper watcher cleaned up successfully\n/var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:54:in `block (2 levels) in run': synapse: service watcher mongo failed ping! (RuntimeError)\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:53:in `each'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:53:in `block in run'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:52:in `loop'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/lib/synapse.rb:52:in `run'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/lib/ruby/gems/2.2.0/gems/synapse-0.12.1/bin/synapse:60:in `<top (required)>'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/.bin/synapse:23:in `load'\n    from /var/lib/mesos/slaves/20160213-002027-1469517996-5050-555-S4/frameworks/20160204-212329-1385631916-5050-163-0000/executors/thermos-1455730435744-bright-devel-authserve-0-6e52c164-8fcb-4e00-bc33-62523f32ad4c/runs/4810df56-7a1d-4bd1-9c2c-84f2c041a181/sandbox/synapse/.bin/synapse:23:in `<main>'\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fnicholas": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/163", "title": "Centos Compatibility & Higher Version of Ruby Support ", "body": "synapse version - v0.12.2.\nnerve version - v0.6.0\n\nthe cookbook breaks here on centos. Im running it on centos 6.5 64 bit\nError executing action run on resource 'execute[synapse_install]'\n\nIt appeared the cookbook is looking for a higher version for ruby. Centos currently installs v1.8. It also appeared there's no easy way of installing a higher version of ruby on centos. Please how should I go about this?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "j-datadome": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/161", "title": "ELB config - Error \"Name or service not known\"", "body": "Hello,\n\nI installed Synapse on a Ubuntu 14.04 server.\n\nWhen I try to launch it using the following config, I receive as a response a warning \"Name or service not known\".\n\nI run haproxy 1.6.3, use ruby 2.2.1 and bundler 1.11.2\n\nSynapse correctly rewrites haproxy config file, but seems to fail to find my instances.\nIs there a debug mode which I could activate to track more precisely the error?\n\nThank you a lot\n\nConfig file:\n\n```\n\n---\n  services:\n    myservice:\n      default_servers:\n        -\n          name: \"elb\"\n          host: \"ELB_IP\"\n          port: 80\n      discovery:\n        method: \"ec2tag\"\n        tag_name: \"TAG_NAME\"\n        tag_value: \"TAG_VALUE\"\n        aws_access_key_id: \"AWS_ACCESS_KEY_ID\"\n        aws_secret_access_key: \"AWS_SECRET_ACCESS_KEY\"\n        aws_region: \"AWS_REGION\"\n      haproxy:\n        port: 3213\n        server_port_override: \"7000\"\n        server_options: \"check inter 2000 rise 3 fall 2\"\n        frontend:\n          - \"mode tcp\"\n        backend:\n          - \"mode tcp\"\n  haproxy:\n    bind_address: \"0.0.0.0\"\n    reload_command: \"service haproxy reload\"\n    config_file_path: \"/etc/haproxy/haproxy.cfg\"\n    do_writes: true\n    do_reloads: true\n    global:\n      - \"log 127.0.0.1 local0\"\n      - \"log 127.0.0.1 local1 notice\"\n      - \"user haproxy\"\n      - \"group haproxy\"\n    defaults:\n      - \"log global\"\n      - \"balance roundrobin\"\n      - \"timeout client 50s\"\n      - \"timeout connect 5s\"\n      - \"timeout server 50s\"\n```\n\nResponse:\n\n```\nI, [2016-02-08T16:39:00.007426 #2617]  INFO -- Synapse::Synapse: synapse: starting...\nI, [2016-02-08T16:39:00.007588 #2617]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: Connecting to EC2 region: AWS_REGION\nI, [2016-02-08T16:39:00.696891 #2617]  INFO -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: ec2tag watcher looking for instances tagged with TAG_NAME=TAG_VALUE\nI, [2016-02-08T16:39:00.697127 #2617]  INFO -- Synapse::Synapse: synapse: configuring haproxy\nW, [2016-02-08T16:39:00.697281 #2617]  WARN -- Synapse::Haproxy: synapse: unhandled error reading stats socket: #<TypeError: no implicit conversion of nil into String>\nI, [2016-02-08T16:39:00.721859 #2617]  INFO -- Synapse::Haproxy: synapse: restarted haproxy\nW, [2016-02-08T16:39:02.886652 #2617]  WARN -- Synapse::ServiceWatcher::Ec2tagWatcher: synapse: error in ec2tag watcher thread: #<SocketError: getaddrinfo: Name or service not known>\nW, [2016-02-08T16:39:02.886780 #2617]  WARN -- Synapse::ServiceWatcher::Ec2tagWatcher: [\"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:879:in `initialize'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:879:in `open'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:879:in `block in connect'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/timeout.rb:89:in `block in timeout'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/timeout.rb:99:in `call'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/timeout.rb:99:in `timeout'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:878:in `connect'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:863:in `do_start'\", \"/usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/2.2.0/net/http.rb:858:in `start'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/http/connection_pool.rb:327:in `start_session'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/http/connection_pool.rb:127:in `session_for'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/http/net_http_handler.rb:56:in `handle'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:253:in `block in make_sync_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:289:in `retry_server_errors'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:249:in `make_sync_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:511:in `block (2 levels) in client_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:391:in `log_client_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:477:in `block in client_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:373:in `return_or_raise'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core/client.rb:476:in `client_request'\", \"(eval):3:in `describe_instances'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/ec2/filtered_collection.rb:44:in `filtered_request'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/ec2/instance_collection.rb:318:in `each'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:108:in `select'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:108:in `instances_with_tags'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:86:in `block in discover_instances'\", \"/usr/local/rvm/gems/ruby-2.2.1/gems/aws-sdk-v1-1.66.0/lib/aws/core.rb:598:in `memoize'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:85:in `discover_instances'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:63:in `watch'\", \"/usr/local/rvm/gems/ruby-2.2.1/bundler/gems/synapse-00024028b366/lib/synapse/service_watcher/ec2tag.rb:23:in `block in start'\"]\n\n```\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timerish": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/158", "title": "synapse: error polling docker host http://localhost:4243: #<Docker::Error::ClientError: Expected(200..204) <=> Actual(400 Bad Request)", "body": "Hello,\n        Is synapse incompatible with docker-api 1.20 , I got this warn when running synapse,\nI attached environment info,and how to resolve it ?\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# synapse -c /etc/synapse.json.conf\nI, [2016-01-20T16:15:03.797821 #13184]  INFO -- Synapse::Synapse: synapse: starting...\nI, [2016-01-20T16:15:03.798011 #13184]  INFO -- Synapse::Synapse: synapse: configuring haproxy\nI, [2016-01-20T16:15:03.798862 #13184]  INFO -- Synapse::Haproxy: synapse: reconfigured haproxy\nW, [2016-01-20T16:15:03.807022 #13184]  WARN -- Synapse::ServiceWatcher::DockerWatcher: synapse: error polling docker host http://localhost:4243: #<Docker::Error::ClientError: Expected(200..204) <=> Actual(400 Bad Request)\n\n> I, [2016-01-20T16:15:03.808142 #13184]  INFO -- Synapse::Haproxy: synapse: restarted haproxy\n> W, [2016-01-20T16:15:18.815548 #13184]  WARN -- Synapse::ServiceWatcher::DockerWatcher: synapse: error polling docker host http://localhost:4243: #<Docker::Error::ClientError: Expected(200..204) <=> Actual(400 Bad Request)\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# docker version\nClient:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Wed Oct  7 17:48:28 UTC 2015\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Wed Oct  7 17:48:28 UTC 2015\n OS/Arch:      linux/amd64\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# cat synapse.gemspec \n# -_\\- encoding: utf-8 -_-\n\nlib = File.expand_path('../lib', **FILE**)\n$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)\nrequire 'synapse/version'\n\nGem::Specification.new do |gem|\n  gem.name          = \"synapse\"\n  gem.version       = Synapse::VERSION\n  gem.authors       = [\"Martin Rhoads\"]\n  gem.email         = [\"martin.rhoads@airbnb.com\"]\n  gem.description   = %q{: Write a gem description}\n  gem.summary       = %q{: Write a gem summary}\n  gem.homepage      = \"\"\n\n  gem.files         = `git ls-files`.split($/)\n  gem.executables   = gem.files.grep(%r{^bin/}).map{ |f| File.basename(f) }\n  gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})\n\n  gem.add_runtime_dependency \"aws-sdk\", \"~> 1.39\"\n  gem.add_runtime_dependency \"docker-api\", \"~> 1.7.2\"\n  gem.add_runtime_dependency \"zk\", \"~> 1.9.4\"\n\n  gem.add_development_dependency \"rake\"\n  gem.add_development_dependency \"rspec\", \"~> 3.1.0\"\n  gem.add_development_dependency \"pry\"\n  gem.add_development_dependency \"pry-nav\"\n  gem.add_development_dependency \"webmock\"\nend\n\nroot@VirtualBox:/var/lib/gems/1.9.1/gems/synapse-0.12.2# uname -an\nLinux VirtualBox 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:16:20 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n\nThanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dnephin": {"issues": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/121", "title": "docker watcher proposal: identify services by label instead of port and image name", "body": "Docker 1.6 added [labels](https://docs.docker.com/userguide/labels-custom-metadata/) for images and containers.\n\nInstead of requiring the same port for every service and exposing the port to the host (#109, #88), read a `com.airbnb.synapse.service-port` label from the image or container, and register the service using that port.\n\nAnother option might be to keep specifying the port in the watcher config, but look for a `com.airbnb.synapse.service` label.\n\nContainers without a label would not be registered.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/120", "title": "docker watcher proposal: use the events API instead of polling", "body": "**Replace polling by streaming the [events API](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#monitor-dockers-events)**\n- using the events API filter by the `start` event to get notified of all new containers that have started\n- when a new container starts, check it against the list of criteria and register it if it matches\n- removes the need to poll, and keep track of the list of previous containers\n- the `/containers/json` endpoint that it uses now can be pretty slow with large numbers of containers\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bsherrod": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/c50b6dd5027d068f8acf7196d652eeea4109fbc7", "message": "Merge pull request #246 from bsherrod/bs-haproxy-path-var\n\nadd generator_config_path config option"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "darnaut": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/aba2658a9febd19dd1f7a9804691c15c045d1f04", "message": "Merge pull request #245 from airbnb/erb_config\n\nSupport embedded ruby (ERB) in config files"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8205f1037afacd76c13b6738c4cbcb47178fab6d", "message": "Support embedded ruby (ERB) in config files"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jolynch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/c3c43a04757a8174edf33ddabccc05fd16f97e8f", "message": "Bump to 0.15.1"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/26c5ab1161b677f6c740752e41fdd3d63dcb3a18", "message": "Merge pull request #242 from lap1817/feng-pan-synapse\n\n[synapse] fix bug in generate_backend_stanze"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b1ef75453b9347edb21f636ff4c2c14fa51c7a9f", "message": "Merge pull request #244 from airbnb/fix_travis\n\nTry upgrading bundler on travis"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b808ce579cce10db11298b160595c26cc03778c8", "message": "Try upgrading bundler on travis"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/117e26d6ec1bd5118fbe7be7ce563f390118b83d", "message": "Merge pull request #241 from lap1817/feng-pan-synapse\n\n[synapse] enable generator config update from ZK"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9226826e7f3c57fe7f9a0dc300915081a9df7dfb", "message": "Bump to 0.14.7"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/c73c41e46e45a3986d3e77d033c2dc735d501f3c", "message": "Merge pull request #240 from airbnb/jlynch_better_id_algo\n\nTo find the next server id, just count up"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a4a1a6dff809710d0a07c313ab449c5e2704b2d3", "message": "To find the next server id, just count up"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/511738ba67210ba45e59a814430c2e5b756db618", "message": "Merge pull request #239 from airbnb/jlynch_consistent_shuffle\n\nMake shuffle reproducible"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/9c9c7b8fb5095fb01903270b5356f16a67a360e0", "message": "Fixup max id search"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/ec0ea19d6414e945324487bcdcba530f42323341", "message": "Only store valid ids in the state file"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/5608ba97b3b36546796806b64262a9f5a337196f", "message": "Maintain bookeeping both directions for server ids"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/86b8368000523e4b2241da35419cd7c7a2cdb8f0", "message": "Factor things better"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/f0bb0af09f2b4b74e0ba43e708be1c38fce15b45", "message": "Oh man"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/b84270653236c1562172c4c41e1b3ba9923983ee", "message": "Add some test coverage of haproxy_server_id"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/912c5fef6f6245b463da8a59a6b6c882ae646127", "message": "Have to use a separate variable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lap1817": {"issues": [], "commits": [{"url": "https://api.github.com/repos/airbnb/synapse/commits/7f501c808656253164dbc850e3486ed2b10e3c1c", "message": "[synapse] fix bug in generate_backend_stanze"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/80bbf6266155e5454d4690fffedded85344fd71e", "message": "revise version"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/2cd3c3918d9a077c080a7202a0756d9c8d0dc10e", "message": "fix spec"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/53264cfe9bce9da177bb38133a3bb32fe1c47299", "message": "fix spec"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/75fe0ee5816a39b762ce760c417f0772a8ed41ab", "message": "add logging when restart required due to config change"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/653bda2660c8e6776dc0a45dbd7b60f88d3a73a0", "message": "fix a few issues:\n -use node.first as the data blob\n\n -make haproxy generator to refresh the config before generate config\n\n -make the config_for_generator hash readonly in base watcher by deep clone"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/8caf3403a66d11f225e319386633797d9a3b3209", "message": "update README"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/a65729a6f1c8f07905dcd79e3155ead4f18060b8", "message": "update tests"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/e117aebf3fbe32893fa9fa222edfe103185c8703", "message": "fix gemfile lock for nokogiri"}, {"url": "https://api.github.com/repos/airbnb/synapse/commits/45aa4c0f8f384b251df6031e24635262c09c51bf", "message": "[synapse] enable generator config update from ZK"}], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/248", "title": "[Synapse] atomic config file update", "body": "reviewer:\r\n@jolynch @liangg\r\n\r\nThis PR is to enable atomic Haproxy config file update.\r\n\r\nThe issue that we observed is that when Synapse restarts Haproxy in a high frequency (e.g. every 2 seconds), the haproxy config file may get partially over-written while a Haproxy process is still loading the file, especially for services that have high number of dependencies and thus have large haproxy config (1MB+). In some cases, the haproxy process corrupted because of that.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "microwavedboy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/231", "title": "Adding tag_hash functionality to ec2tag watcher. ", "body": "Migrated to v2 of AWS-SDK\r\nUpdated rspec tests\r\nUpdated README.md to cover new functionality\r\n\r\nThis adds the ability to define a \"tag_hash\" key in the options block for the ec2tag watcher.\r\n\r\nI had the use case of wanting to target only the intersection of two tags -- such as \r\n```\r\ntag_hash:\r\n  environment: staging\r\n  some_service: installed\r\n```\r\n\r\nAnd the existing watcher functionality did not suffice. \r\n\r\nThis is backwards compatible with existing synapse.yaml configuration files (and the tag_name/tag_value keys for ec2tag)\r\n\r\nCheers,\r\nAlex", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "merimna": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/221", "title": "Adds Docker watcher ability to use images without tags", "body": "Really useful for local dev where an image might not have a tag yet.\r\n\r\nThe fix here was to use `split` instead of `rpartition` because `rpartition` has some unexpected behavior when there is no match.\r\n\r\n```\r\n\"foo:bar\".rpartition(\":\")    # [\"foo\", \":\", \"bar\"]\r\n\r\n\"foo\".rpartition(\":\")        # [\"\", \"\", \"foo\"]\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GrigorievNick": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/217", "title": "Add watcher for YARN application that was deploy with Apache Slider.", "body": "Checked in production of Playtech with 2.7.2 YARN and slide 0.91 on HDP 2.5.\r\nChosen application done base on slider publish tags.\r\nMain goal add service discovery for exports per container.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "solarkennedy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/209", "title": "Add splay startup jitter to haproxy startup", "body": "Sometimes all the synapses are restarted globally across a fleet, so I would like their startup to be jittered just like their normal `next_restart` is jittered during a normal haproxy restart. I believe this change will do that.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "igor47": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/207", "title": "[base watcher] filter on set_backends", "body": "currently, we are filtering backends when we attempt to retrieve the list of\nbackends. there are a few things wrong with that:\n- we perform the same filter computation repeatedly every time we rebuild the haproxy config\n- we incorrectly restart haproxy even if the set of backends which don't match the filters changes\n- we log the total number of backends discovered, not the number of backends matching the filter\n- it's unclear how the defaults/keep_last logic plays with filters/leader election\n\nthis PR moves the filter/leader election logic to be performed as part of\n`set_backends`. the call to retrieve the backends becomes just an\n`attr_reader`. we don't have to make any spec changes, because we already test\nall of this logic as part of testing `set_backends`\n\nthis change may be backwards-incompatible depending on configuration, because\nthe logic around how default/previous backends are used is different.\npreviously, if no backends match filters (including the default backends) or if\nno backends are elected as leader (including default backends) then we return\nan empty list. after this change is made, we will apply the filters/election\nparameters to just the discovered backends. if these fail election or\nfiltering, then we will return the default backends instead of returning an\nempty list.\n\ni think this change makes things more clear overall. previously, there was no\nmechanism to always return some default set of backends no matter what, and now\nthis mechanism is just the setting of `default_backends`\n\nto: @jtai @jolynch @scarletmeow \n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17831665", "body": "you can run synapse locally and it will do the right thing. this doesn't quite work as-is. lets sync up.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17831665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17844752", "body": "lgtm\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17844752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19633507", "body": "tested on vagrant, and does the correct thing. exciting times!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19633507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20099792", "body": "tested in vagrant; not only does it work, but it actually exits when zookeeper starts acting funny\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20099792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146727", "body": "tested on admin as well; it generated the same haproxy config. i was concerned that the synchronous updates would cause a noticeable lag in taking down services, but i couldn't discern much the difference when stopping/starting nerve on an optica box.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24695672", "body": "tested on admin boxes btw\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24695672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24944030", "body": "yes a lot of the changes were to the `gemfile.lock`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24944030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27515126", "body": "thanks for the pr! it looks generally good to me.\n\nmy main concern: i'm wary of adding a second config format; there should be only one way to configure synapse, and it should be the same as nerve. i often add comments to json hashes by just adding a \"comment\" field (which is ignored by the code). would that be sufficient?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27515126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516718", "body": "i would merge this PR with the yaml stuff factored out. i'd be happy to set up a time to chat with you about infrastructure. email me (firstname.lastname@airbnb.com) to set up a time.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27743806", "body": "bah, i'm a bad maintainer; @memory which arguments that normally go into `listen` can go into `backend`? can these be the same thing?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27743806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27744194", "body": "the matrix says no; now we're going to have duplication of config information between `listen` and `backend` sections. probably, as part of the changes to the config format, we should have dynamically build the `listen` directive.\n\ni think we can do this by being a little smarter about what the different haproxy directives mean and which sections they can go in. then, we can extract the ones that relate to `backend` or `frontend` from `listen` and put them there without requiring an extra `backend` config section...\n\n@memory does that sound like a reasonable approach?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27744194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27790606", "body": "the list of keywords and their applicability was auto-generated using [this gist](https://gist.github.com/igor47/7322131). prettified by piping through [jq](http://stedolan.github.io/jq/)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27790606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27792318", "body": "thanks for the PR! looks great except for the few nits. i would definitely want to see the config handling addressed.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27792318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4602524", "body": "unfortunately, we have to bounce haproxy to add new backends for an existing service (if we've never seen the backend before). if a backend that previously existed disappears, it's placed in maintenance mode via the haproxy stats socket, and later we can re-enable it if it comes back.\n\nbut we win a lot by avoiding haproxy bounces during the worst times (deploys, outages). in those cases, we can usually keep the same haproxy process throughout unless we start spinning up new backends. we've seen haproxy instances last for days or weeks in our environment.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4602524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4602538", "body": "i should update the comments and get my terminology straight. synapse watches services, and services have backends. a backend is identified to haproxy via a `server` line, but i should stop using the word `server` otherwise.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4602538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4605208", "body": "yes. but haproxy restarts are not as scary as they sound. existing connections are unaffected -- the previous haproxy process is left running until they close. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4605208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344069", "body": "bah, the one with pie on his face is me. https://github.com/airbnb/synapse/pull/47\n\nthanks for drawing attention!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199788", "body": "hmmm; i'm not sure this is necessary. if it _is_ necessary it should live in the configure code in `synapse.rb`, but what are you worried about? multiple calls to configure happening at once mean the haproxy.rb grabs the backends again...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199802", "body": "you never set `@backends` to the list of new ips you resolved... haproxy.rb wants to look at `@backends` to create the listen stanza.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199821", "body": "hmmm, what is the `servers` argument exactly? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4199821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4203792", "body": "do you need an `|| nil` here?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4203792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4755143", "body": "oops\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4755143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923654", "body": "now that i think about it, i wonder if we can get into a bad state with a single service watcher having problems and as a result breaking updates on the rest of the services. this would definitely happen now, but the question is how do we want to handle such a scenario...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923756", "body": "no, i think the stub watcher is always healthy\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923786", "body": "i'm not sure what a better way to test if DNS resolution is working. this just makes sure that the list of addresses for `airbnb.com` is not empty. i chose `airbnb.com` because that's the place where we do the thing; if our domain is not resolving, we've got bigger problems than synapse restarting.\n\ni'm very very open to ideas about what to do here instead\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4924278", "body": "i guess we have a hierarchy of desirable behaviors here. i think, from least to most desirable:\n- a single watcher breaks synapse silently; it's still running but not functional and requires manual intervention\n- a single watcher fails silently, leaving the rest of synapse functional; requires manual intervention\n- a single watcher breaks and takes synapse down with it, leaving runit to restart it\n- a single watcher breaks but the rest of synapse still runs; the watcher later recovers on it's own\n\nwe're at the first of these. this pull request moves us to the 3rd. getting to 4 is hard...\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4924278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351841", "body": "not sure this calls for a warning; this seems like a generally common state of affairs.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351895", "body": "i would make this a descriptive debug message: `log.debug \"synapse: not generating listen stanza for watcher #{water.name} because it has no port\"`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351905", "body": "s/if not/unless\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7351905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352435", "body": "changing the name of the listen section to `<name>_in` will break dynamic haproxy reconfiguration. is it possible to have a `listen` and a `backend` section both named the same? if not, some changes will have to happen in `update_backends` or we will end up flapping haproxy\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352448", "body": "oh i see; that won't matter!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470509", "body": "same as nerve, this should be `filename` instead of `options[:config]`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470530", "body": "same as nerve, more ideomatic is `config['services'] ||= {}`\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7470530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "hashbrowncipher": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/201", "title": "WIP: Standalone mode", "body": "@jolynch: this branch implements something we had discussed a little while ago, namely a standalone or \"oneshot\" execution mode for Synapse. This is for situations where you would like to know what information is in Synapse's backing datastore, but you don't want to read it out of the datastore directly in order to preserve separation of concerns. By adding this standalone operation, we can use the same code paths that Synapse would use to read the data.\n\nMy initial use-case is monitoring scripts. I would like to deploy a container with the Synapse gem, and run it as a script that produces a list of backends as output. My monitoring script will process this output, check it for sanity, and report issues to my monitoring system if the results are insane.\n\nThis change makes use of a new method on watchers, that I've called `read`. As far as I can tell, right now watchers don't implement any method which provides the list of backends as output without mutating other state. `read` is designed for that purpose.\n\nSo far I've just touched the Zookeeper watcher. Please review for initial feasibility.\n\nExample invocation:\n\n```\nsynapse_standalone.rb '{\"method\":\"zookeeper\",\"path\":\"/nerve/services/postgres_main_read\",\"hosts\":[\"10.74.4.104:2181\",\"10.74.4.70:2181\",\"10.74.1.43:2181\"]}'\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scarletmeow": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/179", "title": "Weights support in Synapse", "body": "Follow up to https://github.com/airbnb/synapse/pull/174.\n\nAdds logic to signal HAProxy restart if `weight` has changed.\n\nAdded an additional warning if `weights` is redefined in `haproxy_server_options`. I would prefer not to implement behavior that strips out any user-defined `weight X` statement in HAProxy server options. It seems sufficient to warn about the unexpected behavior in either case.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "minkovich": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/174", "title": "Create an option to stop ignoring weights. By default weights will still be ignored. ", "body": "This commit is based on the following by @bobtfish \nhttps://github.com/airbnb/synapse/pull/131\n\nbut does the following things differently:\n1. By default weights are ignored. This is to maintain current behavior for safety.\n2. HAProxy will reconfigure if weights changes.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobtfish": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/131", "title": "Weights in generated config", "body": "cc @vulpine\n\nRebased against airbnb/synapse master\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/58", "title": "Etcd service watcher", "body": "And the etcd watcher part to go with the reporter :)\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gfelbing": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/119", "title": "Zookeeper recursive", "body": "This branch adds a new service watcher \"zookeeper_recursive\".\nIt doesn't generate backends directly, but generates new \"zookeeper\"-watcher for each persistent node under the configured path (including the path itself).\nThe configuration of the \"zookeeper\"-watcher is based on the configuration of the \"zookeeper_recursive\"-watcher, the \"#[service]\" will be replaced by the node's path in zookeeper, the \"/\" are replaced by \"_\".\nWith this functionality you doesn't have to know which services are existing or will exist in the future.\nFor an example configuration see \"config/synapse_zookeeper_recursive.yaml\"\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bcicen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/118", "title": "Add optional image_tag param to docker watcher", "body": "Rebase of #96 with minor changes.\n\nAdd param to explicitly discover only containers running image_name:image_tag. I've found this to be quite valuable in the deploy cycle as I can bring up containers and move them to the tag defined in synapse config when I'm ready for them to be discovered.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "worldsouptester": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/116", "title": "Update Rakefile", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danieleva": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/114", "title": "SRV support for dns watcher", "body": "Accepts an optional \"srv\" field in the servers definition. The port will be fetched from the srv record, with fallback on the \"port\" field in case of failure/empty value\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajohnstone": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/108", "title": "Update example configs for DNS", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csconnell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/91", "title": "Feature/addressable ips", "body": "These changes provide a way to update the HAProxy config for docker containers that are on addressable IPs (i.e IP addresses reachable on the network / outside of the local docker host).  The change allows you to provide a discovery setting of \"addressable_ip\" for docker discovered services as shown below:\n\n``` JSON\n\"services\": {\n    \"local-nodes\": {\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"addressable_ip\": \"true\",\n        \"servers\": [\n          {\n            \"name\": \"localhost\",\n            \"host\": \"192.168.224.2\",\n            \"port\": 4243\n          }\n    ],\n    \"container_port\": 8000,\n        \"image_name\": \"local/testapp\"\n      },\n      \"haproxy\": {\n        \"port\": 9091,\n      }\n```\n\nThis change then looks up the actual IP address of the docker container instead of using the docker host and then uses the private port of the service.  The change does not affect the previous functionality - both services with non-addressable IPs and those with addressable IPs are properly written to the HAProxy config.  So a synapse config file that looks like this:\n\n``` JSON\n{\n  \"services\": {\n    \"local-nodes\": {\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"addressable_ip\": \"true\",\n        \"servers\": [\n          {\n            \"name\": \"localhost\",\n            \"host\": \"192.168.224.2\",\n            \"port\": 4243\n          }\n    ],\n    \"container_port\": 8000,\n        \"image_name\": \"local/testapp\"\n      },\n      \"haproxy\": {\n        \"port\": 9091,\n\n      }\n\n    },\n    \"remote-nodes\":{\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"servers\": [\n          {\n            \"name\": \"cconnell3\",\n            \"host\": \"192.168.222.153\",\n        \"port\": 4243\n      }\n        ],\n      \"container_port\": 8000,\n        \"image_name\": \"local/testapp\"\n      },\n      \"haproxy\": {\n        \"port\": 9091,\n\n      }\n\n    },\n    \"proxy-clients\": {\n      \"discovery\": {\n        \"method\": \"docker\",\n        \"addressable_ip\": \"true\",\n        \"servers\": [\n          {\n            \"name\": \"localhost\",\n            \"host\": \"192.168.224.2\",\n            \"port\": 4243\n      }\n        ],\n        \"container_port\": 9090,\n        \"image_name\": \"local/proxy-node\"\n      },\n      \"haproxy\": {\n        \"port\": 9090,\n\n      }\n\n    },\n\n  },\n\"haproxy\": {\n    \"reload_command\": \"systemctl reload haproxy.service\",\n    \"config_file_path\": \"/etc/haproxy/haproxy.cfg\",\n    \"do_writes\": true,\n    \"do_reloads\": true,\n    \"bind_address\": \"*\",\n    \"global\": [\n      \"daemon\",\n      \"maxconn 4096\",\n    ],\n    \"defaults\": [\n      \"maxconn  2000\",\n      \"timeout  connect 5s\",\n      \"timeout  client  1m\",\n      \"timeout  server  1m\",\n      \"mode http\",\n    ],\n  }\n}\n```\n\nwill result in an haproxy config like:\n\n```\n# auto-generated by synapse at 2014-09-03 16:04:10 -0400\n\nglobal\n        daemon\n    maxconn 4096\ndefaults\n        maxconn  2000\n        timeout  connect 5s\n        timeout  client  1m\n        timeout  server  1m\n        mode http\n\nfrontend local-nodes\n        bind *:9091\n        default_backend local-nodes\n\nbackend local-nodes\n        server 192.168.224.19:8000_27f8db643d74 192.168.224.19:8000 cookie 192.168.224.19:8000_27f8db643d74\n        server 192.168.224.22:8000_c5dd48c1adac 192.168.224.22:8000 cookie 192.168.224.22:8000_c5dd48c1adac\n        server 192.168.224.18:8000_df6616b4e4af 192.168.224.18:8000 cookie 192.168.224.18:8000_df6616b4e4af\n\nfrontend remote-nodes\n        bind *:9091\n        default_backend remote-nodes\n\nbackend remote-nodes\n        server 192.168.222.153:49155_cconnell3 192.168.222.153:49155 cookie 192.168.222.153:49155_cconnell3\n        server 192.168.222.153:49154_cconnell3 192.168.222.153:49154 cookie 192.168.222.153:49154_cconnell3\n        server 192.168.222.153:49153_cconnell3 192.168.222.153:49153 cookie 192.168.222.153:49153_cconnell3\n\nfrontend proxy-clients\n        bind *:9090\n        default_backend proxy-clients\n\nbackend proxy-clients\n        server 192.168.224.28:9090_sel-node-6 192.168.224.28:9090 cookie 192.168.224.28:9090_sel-node-6\n        server 192.168.224.29:9090_sel-node-7 192.168.224.29:9090 cookie 192.168.224.29:9090_sel-node-7\n        server 192.168.224.25:9090_sel-node-4 192.168.224.25:9090 cookie 192.168.224.25:9090_sel-node-4\n        server 192.168.224.30:9090_sel-node-8 192.168.224.30:9090 cookie 192.168.224.30:9090_sel-node-8\n        server 192.168.224.24:9090_sel-node-3 192.168.224.24:9090 cookie 192.168.224.24:9090_sel-node-3\n        server 192.168.224.27:9090_sel-node-5 192.168.224.27:9090 cookie 192.168.224.27:9090_sel-node-5\n```\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mandarjog": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/89", "title": "Ec2tags selector", "body": "2 commits.\n1. Adds max_checks and check_interval as top level options. This cuts down on synapse cpu usage. \n    We run in under supervisord, so max_check = 10 would exit after those many loops.\n1. Adds a fancier selector  with a @discovery['selector'] option.\n   This option as actually eval'd with 'i' being the AWSInstance variable.\n\nWe are using this in production.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cloakedcode": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/86", "title": "Multi-host compatible etcd service watcher", "body": "Merged bobtfish's etcd service watcher and added etcd host failover.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinrhoads": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/13465010", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/13465010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14744368", "body": "I should have removed the message, it was safe ;)\n\nOn Mon, Mar 11, 2013 at 2:19 PM, Christopher Lin\nnotifications@github.comwrote:\n\n> wat\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/pull/2#issuecomment-14743374\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14744368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146741", "body": "more or less great, but I would like a comment on what the dns resolution check is supposed to do. \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/20146741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4616189", "body": "no, this should not be the case\n\nOn Thu, Nov 14, 2013 at 7:13 PM, Mat Schaffer notifications@github.comwrote:\n\n> That's encouraging. Is there any period between processes where you'd have\n> new requests or connections get rejected?\n> \n> On Thursday, November 14, 2013, Igor Serebryany wrote:\n> \n> > yes. but haproxy restarts are not as scary as they sound. existing\n> > connections are unaffected -- the previous haproxy process is left\n> > running\n> > until they close.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4605208>\n> > \n> > .\n> ## \n> \n> -Mat\n> \n> about.me/matschaffer\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4609207\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4616189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923471", "body": "should this raise an exception? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923489", "body": "what exactly are you trying to test here? that the watcher can resolve dns? why airbnb.com? \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4923489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "schleyfox": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743310", "body": "Mixed Messages ftw\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17843566", "body": "Updated this per comments and also to handle multiple addresses from DNS.  I have also tested locally and checked behavior with loss of network connection.\n\nThe next step is to get a new version of synapse out, set it up on my test boxes, smoke test a bit more, and then run the third dress rehearsal.\n\nBen\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/17843566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/3453011", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/3453011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4204076", "body": "no, an `|| nil` would only force it to be `nil` instead of potentially `nil` or `false`, both of which are falsey anyway.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4204076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926223", "body": "I don't love the reaching in and setting the variable.  It's a minor thing but something like `@synapse.schedule_configure!` or just `@synapse.configure!` might be happier.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926264", "body": "this is a local variable (and thus created fresh on every call to this method), you probably want an instance variable\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926327", "body": "This might make sense as 0.3.0, we're doing big things here.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4926327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "clizzin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743374", "body": "wat\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/14743374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jtai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/16481539", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/16481539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19648073", "body": "Other than that, LGTM\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19648073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/3026562", "body": "The service name would be helpful here so we can filter on service and aggregate on backend.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/3026562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/3824782", "body": "I would change the earlier debug line to an info line and just drop this one.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/3824782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4761748", "body": "Even though the port doesn't change with the DNS watcher, should we hash the address and port here for consistency?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4761748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929602", "body": "I'm not sure what this comment is supposed to mean. If it's referring to `@restart_interval`, it should be \"how often to restart haproxy\", or better yet, \"minimum time between haproxy restarts\"\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929650", "body": "Unless we patched the init script, this line will never trigger.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/4929650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "pcarrier": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19632740", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/19632740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24713845", "body": "Am I missing some commits? I only see a version bump and a dep removal.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/24713845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25418022", "body": "https://github.com/airbnb/smartstack4j/pull/1\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25418022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/26572634", "body": "Completely agree on the changes.\n\nNothing obviously wrong with the code, didn't review very carefully but if it's tested then go!\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/26572634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7054218", "body": "Looks great to me. Would be nice to have haproxy a class with its own attributes instead of keeping it around as a hash, but that's a refinement that could come later if we wanted to spend more time on the Ruby implementation.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7054218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nelgau": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25312684", "body": "Seems reasonable. :+1:\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/25312684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "memory": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516099", "body": "On Thu, Oct 31, 2013 at 11:58 AM, Igor Serebryany\nnotifications@github.comwrote:\n\n> thanks for the pr! it looks generally good to me.\n> \n> Cool, glad you like it. :)\n> \n> my main concern: i'm wary of adding a second config format; there should\n> be only one way to configure synapse, and it should be the same as nerve. i\n> often add comments to json hashes by just adding a \"comment\" field (which\n> is ignored by the code). would that be sufficient?\n> \n> I should probably just back out the JSON/YAML stuff and offer it as a\n> separate PR.  FWIW, I'd argue for doing it in nerve as well.  My general\n> feeling is that JSON is great as a formal interchange format between\n> programs, but lousy as a configuration file format that has to be edited\n> (and read!) by humans, because of issues like this:\n\n{ \"valid_json?\":\n  { \"lets\":\n    [\"play\",\n     \"spot\",\n     \"the\",\n     \"syntax\",\n     \"errors\",\n   ]\n  },\n}\n\n...and while you can certainly do:\n\n{\n  \"this_dict\": {\n\n```\n\"has\": \"values\",\n\n\"and\": \"a\",\n\n\"comment\": \"which is me!\"\n```\n\n  }\n\n}\n\n...it's much harder to do something like this:\n\n{\n  \"this_dict\": {\n\n```\n# TODO: restore when bug #7 closes\n\n# \"has\": \"values\",\n\n# \"and\": \"a\",\n\n\"comment\": \"which is me!\"\n```\n\n  }\n\n}\n\n...whereas all of the above strings are valid and correct YAML.\n\nBTW, are you on freenode?  I have some general architecture questions I'd\nlike to pepper you with.\n\n-n\n\n## \n\nEveryone knows history moves in circles;\nthe surprise is how big the circles are.\n  (--Greil Marcus)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27516099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745380", "body": "Actually my original pass at this involved trying to build out the listen section a little more dynamically, but I went for the minimal-changes route.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745393", "body": "In short: yes. :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27745393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4509510", "body": "is there any advantage here over line.strip.start_with?(fieldname) ?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509623", "body": "log a warning if we encounter a line that doesn't seem to belong?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509642", "body": "starts to feel like a DRY violation.\n\ndef check_directives(array_of_lines, directive_section)\n  array_of_lines.each do |line|\n    section_fields[directive_section].each do |fieldname|\n...etc...\nend\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509660", "body": "Appears to do what it says on the tin.  But:\n- The match section feels a bit fragile: is haproxy's config parser whitespace-sensitive?  case-sensitive?\n- Iterating over the whole long list of valid config directives each time we parse a line feels janky.  Maybe tokenize the line and drill down over an array of arrays?  e.g.:\n\nlisten_directives = {\n  'acl' => nil,\n  'option' => {\n    'httpchk' => nil,\n    'httplog' => nil,\n  }\n}\n\n...then walk down the list of tokens until you either hit a nil value in the array (hooray, left-hand match, everything else is an argument) or an unknown word (boo, return error)?  (Possibly I'm overthinking this.)\n\nAlso, this puts the onus on you, the maintainer, to keep the list of allowed service directives for each section up-to-date with haproxy itself.  Previously we'd just handed the user a sufficient amount of rope and assumed they'd read the docs.  Your call as to which approach you think is best, but probably there should be some sort of --no-really-trust-me flag to turn off the validation in case someone wants to play with some hypothetical haproxy 1.6?  And maybe it would just make more sense to pass the whole thing off to 'haproxy -c testconfig.cfg' and kick up an error if haproxy complains?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4509660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/5335378", "body": "Okay, I'm willing to be stupid in public: I can't find this method in the 1.8.7, 1.9.3, 2.0.0 or 2.1.0 versions of the stdlib yaml library, and this raises an undefined method error.\n\nbin/synapse:43:in `parseconfig': undefined method`to_ruby' for #Hash:0x00000001cdb760 (NoMethodError)\n        from bin/synapse:46:in `<main>'\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/5335378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344076", "body": "D'oh.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/5344076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352301", "body": "python brain damage ahoy. :)\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352336", "body": "Reasonable.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7352336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7478824", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/pulls/comments/7478824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "rgarcia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27797253", "body": "thanks for the review\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/issues/comments/27797253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "matschaffer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/4597121", "body": "Just to make sure I'm reading this right; Does HAProxy bounce whenever you add a new service? Or even when a new node is added for an existing service?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4597121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4603946", "body": "So am I right in assuming that (for example) auto scaling a service behind\nhaproxy would require restarts?\n\nOn Thursday, November 14, 2013, Igor Serebryany wrote:\n\n> i should update the comments and get my terminology straight. synapse\n> watches services, and services have backends. a backend is identified to\n> haproxy via a server line, but i should stop using the word serverotherwise.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4602538\n> .\n## \n\n-Mat\n\nabout.me/matschaffer\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4603946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4609207", "body": "That's encouraging. Is there any period between processes where you'd have\nnew requests or connections get rejected?\n\nOn Thursday, November 14, 2013, Igor Serebryany wrote:\n\n> yes. but haproxy restarts are not as scary as they sound. existing\n> connections are unaffected -- the previous haproxy process is left running\n> until they close.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4605208\n> .\n## \n\n-Mat\n\nabout.me/matschaffer\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4609207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/4624060", "body": "Sweet! Well done then. Look forward to experimenting with this :)\n\n-Mat\n\nabout.me/matschaffer\n\nOn Fri, Nov 15, 2013 at 11:50 AM, Martin Rhoads notifications@github.comwrote:\n\n> no, this should not be the case\n> \n> On Thu, Nov 14, 2013 at 7:13 PM, Mat Schaffer notifications@github.comwrote:\n> \n> > That's encouraging. Is there any period between processes where you'd\n> > have\n> > new requests or connections get rejected?\n> > \n> > On Thursday, November 14, 2013, Igor Serebryany wrote:\n> > \n> > > yes. but haproxy restarts are not as scary as they sound. existing\n> > > connections are unaffected -- the previous haproxy process is left\n> > > running\n> > > until they close.\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > \n> > https://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4605208>\n> > \n> > > .\n> > ## \n> > \n> > -Mat\n> > \n> > about.me/matschaffer\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4609207>\n> > \n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/9127f69e79cbe0c4f797188bf42d432eae92387d#commitcomment-4616189\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/4624060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wmoss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/6493187", "body": "Do we want to add this if it evaluated to `false` but is not `nil`?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493318", "body": "What was the original problem this was trying to solve?\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "brndnmtthws": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/6493219", "body": "My Ruby knowledge is not sufficient to answer that question.\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493400", "body": "Nelson found a bug where the znodes occasionally disappeared because we\nnever handled session expiry.\nOn May 29, 2014 12:02 PM, \"Will Moss\" notifications@github.com wrote:\n\n> What was the original problem this was trying to solve?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/airbnb/synapse/commit/a0f40d337c87ccac90a3aac00b5c6f5e2bf4c1ac#commitcomment-6493318\n> .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6493400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/airbnb/synapse/comments/6496477", "body": "I just realized I responded to the wrong question.  There was a ruby syntax\nerror, which has also been fixed in master (as you can see in the diff).\n I'll drop my patch.\n\nOn Thu, May 29, 2014 at 12:09 PM, Brenden Matthews <\nbrenden.matthews@airbedandbreakfast.com> wrote:\n\n> Nelson found a bug where the znodes occasionally disappeared because we\n> never handled session expiry.\n> On May 29, 2014 12:02 PM, \"Will Moss\" notifications@github.com wrote:\n> \n> > What was the original problem this was trying to solve?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/airbnb/synapse/commit/a0f40d337c87ccac90a3aac00b5c6f5e2bf4c1ac#commitcomment-6493318\n> > .\n", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/6496477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "somic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/airbnb/synapse/comments/21483273", "body": "@jolynch do we need to sort watcher.backends? Appears to me that it's an array that will be in order we read them from zk - is the order guaranteed to be deterministic here?\r\n\r\nWe of course can sort it anywhere (when we read from zk or here etc) but just wanted to double check.", "reactions": {"url": "https://api.github.com/repos/airbnb/synapse/comments/21483273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}}}}